// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
	mock "github.com/stretchr/testify/mock"
	"github.com/theopenlane/core/pkg/openlaneclient"
)

// NewMockOpenlaneGraphClient creates a new instance of MockOpenlaneGraphClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOpenlaneGraphClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOpenlaneGraphClient {
	mock := &MockOpenlaneGraphClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOpenlaneGraphClient is an autogenerated mock type for the OpenlaneGraphClient type
type MockOpenlaneGraphClient struct {
	mock.Mock
}

type MockOpenlaneGraphClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOpenlaneGraphClient) EXPECT() *MockOpenlaneGraphClient_Expecter {
	return &MockOpenlaneGraphClient_Expecter{mock: &_m.Mock}
}

// AddUserToGroupWithRole provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) AddUserToGroupWithRole(ctx context.Context, input openlaneclient.CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToGroupWithRole, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroupWithRole")
	}

	var r0 *openlaneclient.AddUserToGroupWithRole
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToGroupWithRole, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.AddUserToGroupWithRole); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.AddUserToGroupWithRole)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateGroupMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_AddUserToGroupWithRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroupWithRole'
type MockOpenlaneGraphClient_AddUserToGroupWithRole_Call struct {
	*mock.Call
}

// AddUserToGroupWithRole is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateGroupMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) AddUserToGroupWithRole(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_AddUserToGroupWithRole_Call {
	return &MockOpenlaneGraphClient_AddUserToGroupWithRole_Call{Call: _e.mock.On("AddUserToGroupWithRole",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_AddUserToGroupWithRole_Call) Run(run func(ctx context.Context, input openlaneclient.CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_AddUserToGroupWithRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateGroupMembershipInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateGroupMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_AddUserToGroupWithRole_Call) Return(addUserToGroupWithRole *openlaneclient.AddUserToGroupWithRole, err error) *MockOpenlaneGraphClient_AddUserToGroupWithRole_Call {
	_c.Call.Return(addUserToGroupWithRole, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_AddUserToGroupWithRole_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToGroupWithRole, error)) *MockOpenlaneGraphClient_AddUserToGroupWithRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToOrgWithRole provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) AddUserToOrgWithRole(ctx context.Context, input openlaneclient.CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToOrgWithRole, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddUserToOrgWithRole")
	}

	var r0 *openlaneclient.AddUserToOrgWithRole
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOrgMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToOrgWithRole, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOrgMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.AddUserToOrgWithRole); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.AddUserToOrgWithRole)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateOrgMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_AddUserToOrgWithRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToOrgWithRole'
type MockOpenlaneGraphClient_AddUserToOrgWithRole_Call struct {
	*mock.Call
}

// AddUserToOrgWithRole is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateOrgMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) AddUserToOrgWithRole(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_AddUserToOrgWithRole_Call {
	return &MockOpenlaneGraphClient_AddUserToOrgWithRole_Call{Call: _e.mock.On("AddUserToOrgWithRole",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_AddUserToOrgWithRole_Call) Run(run func(ctx context.Context, input openlaneclient.CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_AddUserToOrgWithRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateOrgMembershipInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateOrgMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_AddUserToOrgWithRole_Call) Return(addUserToOrgWithRole *openlaneclient.AddUserToOrgWithRole, err error) *MockOpenlaneGraphClient_AddUserToOrgWithRole_Call {
	_c.Call.Return(addUserToOrgWithRole, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_AddUserToOrgWithRole_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToOrgWithRole, error)) *MockOpenlaneGraphClient_AddUserToOrgWithRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToProgramWithRole provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) AddUserToProgramWithRole(ctx context.Context, input openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToProgramWithRole, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddUserToProgramWithRole")
	}

	var r0 *openlaneclient.AddUserToProgramWithRole
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToProgramWithRole, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.AddUserToProgramWithRole); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.AddUserToProgramWithRole)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_AddUserToProgramWithRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToProgramWithRole'
type MockOpenlaneGraphClient_AddUserToProgramWithRole_Call struct {
	*mock.Call
}

// AddUserToProgramWithRole is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateProgramMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) AddUserToProgramWithRole(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_AddUserToProgramWithRole_Call {
	return &MockOpenlaneGraphClient_AddUserToProgramWithRole_Call{Call: _e.mock.On("AddUserToProgramWithRole",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_AddUserToProgramWithRole_Call) Run(run func(ctx context.Context, input openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_AddUserToProgramWithRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateProgramMembershipInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateProgramMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_AddUserToProgramWithRole_Call) Return(addUserToProgramWithRole *openlaneclient.AddUserToProgramWithRole, err error) *MockOpenlaneGraphClient_AddUserToProgramWithRole_Call {
	_c.Call.Return(addUserToProgramWithRole, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_AddUserToProgramWithRole_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AddUserToProgramWithRole, error)) *MockOpenlaneGraphClient_AddUserToProgramWithRole_Call {
	_c.Call.Return(run)
	return _c
}

// AdminSearch provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) AdminSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AdminSearch, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, query, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AdminSearch")
	}

	var r0 *openlaneclient.AdminSearch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.AdminSearch, error)); ok {
		return returnFunc(ctx, query, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.AdminSearch); ok {
		r0 = returnFunc(ctx, query, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.AdminSearch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, query, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_AdminSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminSearch'
type MockOpenlaneGraphClient_AdminSearch_Call struct {
	*mock.Call
}

// AdminSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) AdminSearch(ctx interface{}, query interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_AdminSearch_Call {
	return &MockOpenlaneGraphClient_AdminSearch_Call{Call: _e.mock.On("AdminSearch",
		append([]interface{}{ctx, query}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_AdminSearch_Call) Run(run func(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_AdminSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_AdminSearch_Call) Return(adminSearch *openlaneclient.AdminSearch, err error) *MockOpenlaneGraphClient_AdminSearch_Call {
	_c.Call.Return(adminSearch, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_AdminSearch_Call) RunAndReturn(run func(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AdminSearch, error)) *MockOpenlaneGraphClient_AdminSearch_Call {
	_c.Call.Return(run)
	return _c
}

// AuditLogs provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) AuditLogs(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.AuditLogWhereInput, orderBy *openlaneclient.AuditLogOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AuditLogs, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AuditLogs")
	}

	var r0 *openlaneclient.AuditLogs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.AuditLogWhereInput, *openlaneclient.AuditLogOrder, ...clientv2.RequestInterceptor) (*openlaneclient.AuditLogs, error)); ok {
		return returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.AuditLogWhereInput, *openlaneclient.AuditLogOrder, ...clientv2.RequestInterceptor) *openlaneclient.AuditLogs); ok {
		r0 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.AuditLogs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.AuditLogWhereInput, *openlaneclient.AuditLogOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_AuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuditLogs'
type MockOpenlaneGraphClient_AuditLogs_Call struct {
	*mock.Call
}

// AuditLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - where *openlaneclient.AuditLogWhereInput
//   - orderBy *openlaneclient.AuditLogOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) AuditLogs(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, where interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_AuditLogs_Call {
	return &MockOpenlaneGraphClient_AuditLogs_Call{Call: _e.mock.On("AuditLogs",
		append([]interface{}{ctx, first, last, after, before, where, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_AuditLogs_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.AuditLogWhereInput, orderBy *openlaneclient.AuditLogOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_AuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *openlaneclient.AuditLogWhereInput
		if args[5] != nil {
			arg5 = args[5].(*openlaneclient.AuditLogWhereInput)
		}
		var arg6 *openlaneclient.AuditLogOrder
		if args[6] != nil {
			arg6 = args[6].(*openlaneclient.AuditLogOrder)
		}
		var arg7 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 7 {
			variadicArgs = args[7].([]clientv2.RequestInterceptor)
		}
		arg7 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_AuditLogs_Call) Return(auditLogs *openlaneclient.AuditLogs, err error) *MockOpenlaneGraphClient_AuditLogs_Call {
	_c.Call.Return(auditLogs, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_AuditLogs_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.AuditLogWhereInput, orderBy *openlaneclient.AuditLogOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.AuditLogs, error)) *MockOpenlaneGraphClient_AuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateAPIToken(ctx context.Context, input openlaneclient.CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateAPIToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIToken")
	}

	var r0 *openlaneclient.CreateAPIToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateAPITokenInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateAPIToken, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateAPITokenInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateAPIToken); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateAPIToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateAPITokenInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateAPIToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIToken'
type MockOpenlaneGraphClient_CreateAPIToken_Call struct {
	*mock.Call
}

// CreateAPIToken is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateAPITokenInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateAPIToken(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateAPIToken_Call {
	return &MockOpenlaneGraphClient_CreateAPIToken_Call{Call: _e.mock.On("CreateAPIToken",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateAPIToken_Call) Run(run func(ctx context.Context, input openlaneclient.CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateAPIToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateAPITokenInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateAPITokenInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateAPIToken_Call) Return(createAPIToken *openlaneclient.CreateAPIToken, err error) *MockOpenlaneGraphClient_CreateAPIToken_Call {
	_c.Call.Return(createAPIToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateAPIToken_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateAPIToken, error)) *MockOpenlaneGraphClient_CreateAPIToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateActionPlan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateActionPlan(ctx context.Context, input openlaneclient.CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateActionPlan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateActionPlan")
	}

	var r0 *openlaneclient.CreateActionPlan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateActionPlanInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateActionPlan, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateActionPlanInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateActionPlan); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateActionPlan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateActionPlanInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateActionPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateActionPlan'
type MockOpenlaneGraphClient_CreateActionPlan_Call struct {
	*mock.Call
}

// CreateActionPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateActionPlanInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateActionPlan(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateActionPlan_Call {
	return &MockOpenlaneGraphClient_CreateActionPlan_Call{Call: _e.mock.On("CreateActionPlan",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateActionPlan_Call) Run(run func(ctx context.Context, input openlaneclient.CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateActionPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateActionPlanInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateActionPlanInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateActionPlan_Call) Return(createActionPlan *openlaneclient.CreateActionPlan, err error) *MockOpenlaneGraphClient_CreateActionPlan_Call {
	_c.Call.Return(createActionPlan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateActionPlan_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateActionPlan, error)) *MockOpenlaneGraphClient_CreateActionPlan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAsset provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateAsset(ctx context.Context, input openlaneclient.CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateAsset, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *openlaneclient.CreateAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateAssetInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateAsset, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateAssetInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateAsset); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateAssetInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAsset'
type MockOpenlaneGraphClient_CreateAsset_Call struct {
	*mock.Call
}

// CreateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateAssetInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateAsset(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateAsset_Call {
	return &MockOpenlaneGraphClient_CreateAsset_Call{Call: _e.mock.On("CreateAsset",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateAsset_Call) Run(run func(ctx context.Context, input openlaneclient.CreateAssetInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateAssetInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateAssetInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateAsset_Call) Return(createAsset *openlaneclient.CreateAsset, err error) *MockOpenlaneGraphClient_CreateAsset_Call {
	_c.Call.Return(createAsset, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateAsset_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateAsset, error)) *MockOpenlaneGraphClient_CreateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkActionPlan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkActionPlan(ctx context.Context, input []*openlaneclient.CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkActionPlan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkActionPlan")
	}

	var r0 *openlaneclient.CreateBulkActionPlan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateActionPlanInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkActionPlan, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateActionPlanInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkActionPlan); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkActionPlan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateActionPlanInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkActionPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkActionPlan'
type MockOpenlaneGraphClient_CreateBulkActionPlan_Call struct {
	*mock.Call
}

// CreateBulkActionPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateActionPlanInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkActionPlan(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkActionPlan_Call {
	return &MockOpenlaneGraphClient_CreateBulkActionPlan_Call{Call: _e.mock.On("CreateBulkActionPlan",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkActionPlan_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkActionPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateActionPlanInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateActionPlanInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkActionPlan_Call) Return(createBulkActionPlan *openlaneclient.CreateBulkActionPlan, err error) *MockOpenlaneGraphClient_CreateBulkActionPlan_Call {
	_c.Call.Return(createBulkActionPlan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkActionPlan_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkActionPlan, error)) *MockOpenlaneGraphClient_CreateBulkActionPlan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkAsset provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkAsset(ctx context.Context, input []*openlaneclient.CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkAsset, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkAsset")
	}

	var r0 *openlaneclient.CreateBulkAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateAssetInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkAsset, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateAssetInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkAsset); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateAssetInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkAsset'
type MockOpenlaneGraphClient_CreateBulkAsset_Call struct {
	*mock.Call
}

// CreateBulkAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateAssetInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkAsset(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkAsset_Call {
	return &MockOpenlaneGraphClient_CreateBulkAsset_Call{Call: _e.mock.On("CreateBulkAsset",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkAsset_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateAssetInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateAssetInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateAssetInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkAsset_Call) Return(createBulkAsset *openlaneclient.CreateBulkAsset, err error) *MockOpenlaneGraphClient_CreateBulkAsset_Call {
	_c.Call.Return(createBulkAsset, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkAsset_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkAsset, error)) *MockOpenlaneGraphClient_CreateBulkAsset_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVActionPlan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVActionPlan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVActionPlan")
	}

	var r0 *openlaneclient.CreateBulkCSVActionPlan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVActionPlan, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVActionPlan); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVActionPlan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVActionPlan'
type MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call struct {
	*mock.Call
}

// CreateBulkCSVActionPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVActionPlan(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call{Call: _e.mock.On("CreateBulkCSVActionPlan",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call) Return(createBulkCSVActionPlan *openlaneclient.CreateBulkCSVActionPlan, err error) *MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call {
	_c.Call.Return(createBulkCSVActionPlan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVActionPlan, error)) *MockOpenlaneGraphClient_CreateBulkCSVActionPlan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVAsset provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVAsset(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVAsset, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVAsset")
	}

	var r0 *openlaneclient.CreateBulkCSVAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVAsset, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVAsset); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVAsset'
type MockOpenlaneGraphClient_CreateBulkCSVAsset_Call struct {
	*mock.Call
}

// CreateBulkCSVAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVAsset(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVAsset_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVAsset_Call{Call: _e.mock.On("CreateBulkCSVAsset",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVAsset_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVAsset_Call) Return(createBulkCSVAsset *openlaneclient.CreateBulkCSVAsset, err error) *MockOpenlaneGraphClient_CreateBulkCSVAsset_Call {
	_c.Call.Return(createBulkCSVAsset, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVAsset_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVAsset, error)) *MockOpenlaneGraphClient_CreateBulkCSVAsset_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVContact provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVContact(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVContact, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVContact")
	}

	var r0 *openlaneclient.CreateBulkCSVContact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVContact, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVContact); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVContact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVContact'
type MockOpenlaneGraphClient_CreateBulkCSVContact_Call struct {
	*mock.Call
}

// CreateBulkCSVContact is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVContact(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVContact_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVContact_Call{Call: _e.mock.On("CreateBulkCSVContact",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVContact_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVContact_Call) Return(createBulkCSVContact *openlaneclient.CreateBulkCSVContact, err error) *MockOpenlaneGraphClient_CreateBulkCSVContact_Call {
	_c.Call.Return(createBulkCSVContact, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVContact_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVContact, error)) *MockOpenlaneGraphClient_CreateBulkCSVContact_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVControl")
	}

	var r0 *openlaneclient.CreateBulkCSVControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControl, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVControl); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVControl'
type MockOpenlaneGraphClient_CreateBulkCSVControl_Call struct {
	*mock.Call
}

// CreateBulkCSVControl is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVControl(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVControl_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVControl_Call{Call: _e.mock.On("CreateBulkCSVControl",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControl_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControl_Call) Return(createBulkCSVControl *openlaneclient.CreateBulkCSVControl, err error) *MockOpenlaneGraphClient_CreateBulkCSVControl_Call {
	_c.Call.Return(createBulkCSVControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControl_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControl, error)) *MockOpenlaneGraphClient_CreateBulkCSVControl_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVControlImplementation provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVControlImplementation(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlImplementation, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVControlImplementation")
	}

	var r0 *openlaneclient.CreateBulkCSVControlImplementation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlImplementation, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVControlImplementation); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVControlImplementation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVControlImplementation'
type MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call struct {
	*mock.Call
}

// CreateBulkCSVControlImplementation is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVControlImplementation(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call{Call: _e.mock.On("CreateBulkCSVControlImplementation",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call) Return(createBulkCSVControlImplementation *openlaneclient.CreateBulkCSVControlImplementation, err error) *MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call {
	_c.Call.Return(createBulkCSVControlImplementation, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlImplementation, error)) *MockOpenlaneGraphClient_CreateBulkCSVControlImplementation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVControlObjective provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlObjective, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVControlObjective")
	}

	var r0 *openlaneclient.CreateBulkCSVControlObjective
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlObjective, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVControlObjective); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVControlObjective)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVControlObjective'
type MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call struct {
	*mock.Call
}

// CreateBulkCSVControlObjective is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVControlObjective(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call{Call: _e.mock.On("CreateBulkCSVControlObjective",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call) Return(createBulkCSVControlObjective *openlaneclient.CreateBulkCSVControlObjective, err error) *MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call {
	_c.Call.Return(createBulkCSVControlObjective, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlObjective, error)) *MockOpenlaneGraphClient_CreateBulkCSVControlObjective_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVControlScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVControlScheduledJob(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVControlScheduledJob")
	}

	var r0 *openlaneclient.CreateBulkCSVControlScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlScheduledJob, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVControlScheduledJob); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVControlScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVControlScheduledJob'
type MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call struct {
	*mock.Call
}

// CreateBulkCSVControlScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVControlScheduledJob(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call{Call: _e.mock.On("CreateBulkCSVControlScheduledJob",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call) Return(createBulkCSVControlScheduledJob *openlaneclient.CreateBulkCSVControlScheduledJob, err error) *MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call {
	_c.Call.Return(createBulkCSVControlScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVControlScheduledJob, error)) *MockOpenlaneGraphClient_CreateBulkCSVControlScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVCustomDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVCustomDomain(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVCustomDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVCustomDomain")
	}

	var r0 *openlaneclient.CreateBulkCSVCustomDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVCustomDomain, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVCustomDomain); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVCustomDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVCustomDomain'
type MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call struct {
	*mock.Call
}

// CreateBulkCSVCustomDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVCustomDomain(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call{Call: _e.mock.On("CreateBulkCSVCustomDomain",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call) Return(createBulkCSVCustomDomain *openlaneclient.CreateBulkCSVCustomDomain, err error) *MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call {
	_c.Call.Return(createBulkCSVCustomDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVCustomDomain, error)) *MockOpenlaneGraphClient_CreateBulkCSVCustomDomain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVDNSVerification provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVDNSVerification(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVDNSVerification, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVDNSVerification")
	}

	var r0 *openlaneclient.CreateBulkCSVDNSVerification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVDNSVerification, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVDNSVerification); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVDNSVerification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVDNSVerification'
type MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call struct {
	*mock.Call
}

// CreateBulkCSVDNSVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVDNSVerification(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call{Call: _e.mock.On("CreateBulkCSVDNSVerification",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call) Return(createBulkCSVDNSVerification *openlaneclient.CreateBulkCSVDNSVerification, err error) *MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call {
	_c.Call.Return(createBulkCSVDNSVerification, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVDNSVerification, error)) *MockOpenlaneGraphClient_CreateBulkCSVDNSVerification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVEntity provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVEntity(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEntity, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVEntity")
	}

	var r0 *openlaneclient.CreateBulkCSVEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEntity, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVEntity); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVEntity'
type MockOpenlaneGraphClient_CreateBulkCSVEntity_Call struct {
	*mock.Call
}

// CreateBulkCSVEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVEntity(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVEntity_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVEntity_Call{Call: _e.mock.On("CreateBulkCSVEntity",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEntity_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEntity_Call) Return(createBulkCSVEntity *openlaneclient.CreateBulkCSVEntity, err error) *MockOpenlaneGraphClient_CreateBulkCSVEntity_Call {
	_c.Call.Return(createBulkCSVEntity, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEntity_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEntity, error)) *MockOpenlaneGraphClient_CreateBulkCSVEntity_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVEntityType provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEntityType, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVEntityType")
	}

	var r0 *openlaneclient.CreateBulkCSVEntityType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEntityType, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVEntityType); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVEntityType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVEntityType'
type MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call struct {
	*mock.Call
}

// CreateBulkCSVEntityType is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVEntityType(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call{Call: _e.mock.On("CreateBulkCSVEntityType",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call) Return(createBulkCSVEntityType *openlaneclient.CreateBulkCSVEntityType, err error) *MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call {
	_c.Call.Return(createBulkCSVEntityType, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEntityType, error)) *MockOpenlaneGraphClient_CreateBulkCSVEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVEvent provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEvent, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVEvent")
	}

	var r0 *openlaneclient.CreateBulkCSVEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEvent, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVEvent); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVEvent'
type MockOpenlaneGraphClient_CreateBulkCSVEvent_Call struct {
	*mock.Call
}

// CreateBulkCSVEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVEvent(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVEvent_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVEvent_Call{Call: _e.mock.On("CreateBulkCSVEvent",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEvent_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEvent_Call) Return(createBulkCSVEvent *openlaneclient.CreateBulkCSVEvent, err error) *MockOpenlaneGraphClient_CreateBulkCSVEvent_Call {
	_c.Call.Return(createBulkCSVEvent, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVEvent_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVEvent, error)) *MockOpenlaneGraphClient_CreateBulkCSVEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVGroup provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVGroup, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVGroup")
	}

	var r0 *openlaneclient.CreateBulkCSVGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVGroup, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVGroup); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVGroup'
type MockOpenlaneGraphClient_CreateBulkCSVGroup_Call struct {
	*mock.Call
}

// CreateBulkCSVGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVGroup(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVGroup_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVGroup_Call{Call: _e.mock.On("CreateBulkCSVGroup",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVGroup_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVGroup_Call) Return(createBulkCSVGroup *openlaneclient.CreateBulkCSVGroup, err error) *MockOpenlaneGraphClient_CreateBulkCSVGroup_Call {
	_c.Call.Return(createBulkCSVGroup, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVGroup_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVGroup, error)) *MockOpenlaneGraphClient_CreateBulkCSVGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVGroupMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVGroupMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVGroupMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVGroupMembers")
	}

	var r0 *openlaneclient.CreateBulkCSVGroupMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVGroupMembers, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVGroupMembers); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVGroupMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVGroupMembers'
type MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call struct {
	*mock.Call
}

// CreateBulkCSVGroupMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVGroupMembers(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call{Call: _e.mock.On("CreateBulkCSVGroupMembers",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call) Return(createBulkCSVGroupMembers *openlaneclient.CreateBulkCSVGroupMembers, err error) *MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call {
	_c.Call.Return(createBulkCSVGroupMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVGroupMembers, error)) *MockOpenlaneGraphClient_CreateBulkCSVGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVHush provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVHush, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVHush")
	}

	var r0 *openlaneclient.CreateBulkCSVHush
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVHush, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVHush); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVHush)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVHush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVHush'
type MockOpenlaneGraphClient_CreateBulkCSVHush_Call struct {
	*mock.Call
}

// CreateBulkCSVHush is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVHush(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVHush_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVHush_Call{Call: _e.mock.On("CreateBulkCSVHush",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVHush_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVHush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVHush_Call) Return(createBulkCSVHush *openlaneclient.CreateBulkCSVHush, err error) *MockOpenlaneGraphClient_CreateBulkCSVHush_Call {
	_c.Call.Return(createBulkCSVHush, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVHush_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVHush, error)) *MockOpenlaneGraphClient_CreateBulkCSVHush_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVIntegration provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVIntegration(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVIntegration, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVIntegration")
	}

	var r0 *openlaneclient.CreateBulkCSVIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVIntegration, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVIntegration); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVIntegration'
type MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call struct {
	*mock.Call
}

// CreateBulkCSVIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVIntegration(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call{Call: _e.mock.On("CreateBulkCSVIntegration",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call) Return(createBulkCSVIntegration *openlaneclient.CreateBulkCSVIntegration, err error) *MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call {
	_c.Call.Return(createBulkCSVIntegration, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVIntegration, error)) *MockOpenlaneGraphClient_CreateBulkCSVIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVInternalPolicy provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVInternalPolicy(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVInternalPolicy, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVInternalPolicy")
	}

	var r0 *openlaneclient.CreateBulkCSVInternalPolicy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVInternalPolicy, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVInternalPolicy); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVInternalPolicy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVInternalPolicy'
type MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call struct {
	*mock.Call
}

// CreateBulkCSVInternalPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVInternalPolicy(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call{Call: _e.mock.On("CreateBulkCSVInternalPolicy",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call) Return(createBulkCSVInternalPolicy *openlaneclient.CreateBulkCSVInternalPolicy, err error) *MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call {
	_c.Call.Return(createBulkCSVInternalPolicy, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVInternalPolicy, error)) *MockOpenlaneGraphClient_CreateBulkCSVInternalPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVInvite provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVInvite, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVInvite")
	}

	var r0 *openlaneclient.CreateBulkCSVInvite
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVInvite, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVInvite); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVInvite)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVInvite'
type MockOpenlaneGraphClient_CreateBulkCSVInvite_Call struct {
	*mock.Call
}

// CreateBulkCSVInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVInvite(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVInvite_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVInvite_Call{Call: _e.mock.On("CreateBulkCSVInvite",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVInvite_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVInvite_Call) Return(createBulkCSVInvite *openlaneclient.CreateBulkCSVInvite, err error) *MockOpenlaneGraphClient_CreateBulkCSVInvite_Call {
	_c.Call.Return(createBulkCSVInvite, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVInvite_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVInvite, error)) *MockOpenlaneGraphClient_CreateBulkCSVInvite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVMappableDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVMappableDomain(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVMappableDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVMappableDomain")
	}

	var r0 *openlaneclient.CreateBulkCSVMappableDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVMappableDomain, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVMappableDomain); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVMappableDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVMappableDomain'
type MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call struct {
	*mock.Call
}

// CreateBulkCSVMappableDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVMappableDomain(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call{Call: _e.mock.On("CreateBulkCSVMappableDomain",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call) Return(createBulkCSVMappableDomain *openlaneclient.CreateBulkCSVMappableDomain, err error) *MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call {
	_c.Call.Return(createBulkCSVMappableDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVMappableDomain, error)) *MockOpenlaneGraphClient_CreateBulkCSVMappableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVMappedControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVMappedControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVMappedControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVMappedControl")
	}

	var r0 *openlaneclient.CreateBulkCSVMappedControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVMappedControl, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVMappedControl); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVMappedControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVMappedControl'
type MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call struct {
	*mock.Call
}

// CreateBulkCSVMappedControl is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVMappedControl(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call{Call: _e.mock.On("CreateBulkCSVMappedControl",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call) Return(createBulkCSVMappedControl *openlaneclient.CreateBulkCSVMappedControl, err error) *MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call {
	_c.Call.Return(createBulkCSVMappedControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVMappedControl, error)) *MockOpenlaneGraphClient_CreateBulkCSVMappedControl_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVNarrative provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVNarrative, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVNarrative")
	}

	var r0 *openlaneclient.CreateBulkCSVNarrative
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVNarrative, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVNarrative); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVNarrative)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVNarrative'
type MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call struct {
	*mock.Call
}

// CreateBulkCSVNarrative is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVNarrative(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call{Call: _e.mock.On("CreateBulkCSVNarrative",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call) Return(createBulkCSVNarrative *openlaneclient.CreateBulkCSVNarrative, err error) *MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call {
	_c.Call.Return(createBulkCSVNarrative, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVNarrative, error)) *MockOpenlaneGraphClient_CreateBulkCSVNarrative_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVOrgMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVOrgMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVOrgMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVOrgMembers")
	}

	var r0 *openlaneclient.CreateBulkCSVOrgMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVOrgMembers, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVOrgMembers); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVOrgMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVOrgMembers'
type MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call struct {
	*mock.Call
}

// CreateBulkCSVOrgMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVOrgMembers(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call{Call: _e.mock.On("CreateBulkCSVOrgMembers",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call) Return(createBulkCSVOrgMembers *openlaneclient.CreateBulkCSVOrgMembers, err error) *MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call {
	_c.Call.Return(createBulkCSVOrgMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVOrgMembers, error)) *MockOpenlaneGraphClient_CreateBulkCSVOrgMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVProcedure provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVProcedure(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProcedure, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVProcedure")
	}

	var r0 *openlaneclient.CreateBulkCSVProcedure
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProcedure, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVProcedure); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVProcedure)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVProcedure'
type MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call struct {
	*mock.Call
}

// CreateBulkCSVProcedure is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVProcedure(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call{Call: _e.mock.On("CreateBulkCSVProcedure",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call) Return(createBulkCSVProcedure *openlaneclient.CreateBulkCSVProcedure, err error) *MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call {
	_c.Call.Return(createBulkCSVProcedure, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProcedure, error)) *MockOpenlaneGraphClient_CreateBulkCSVProcedure_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVProgram(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVProgram")
	}

	var r0 *openlaneclient.CreateBulkCSVProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgram, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVProgram); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVProgram'
type MockOpenlaneGraphClient_CreateBulkCSVProgram_Call struct {
	*mock.Call
}

// CreateBulkCSVProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVProgram(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVProgram_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVProgram_Call{Call: _e.mock.On("CreateBulkCSVProgram",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgram_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgram_Call) Return(createBulkCSVProgram *openlaneclient.CreateBulkCSVProgram, err error) *MockOpenlaneGraphClient_CreateBulkCSVProgram_Call {
	_c.Call.Return(createBulkCSVProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgram_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgram, error)) *MockOpenlaneGraphClient_CreateBulkCSVProgram_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVProgramMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVProgramMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgramMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVProgramMembers")
	}

	var r0 *openlaneclient.CreateBulkCSVProgramMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgramMembers, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVProgramMembers); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVProgramMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVProgramMembers'
type MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call struct {
	*mock.Call
}

// CreateBulkCSVProgramMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVProgramMembers(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call{Call: _e.mock.On("CreateBulkCSVProgramMembers",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call) Return(createBulkCSVProgramMembers *openlaneclient.CreateBulkCSVProgramMembers, err error) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call {
	_c.Call.Return(createBulkCSVProgramMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgramMembers, error)) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVProgramMembership provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgramMembership, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVProgramMembership")
	}

	var r0 *openlaneclient.CreateBulkCSVProgramMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgramMembership, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVProgramMembership); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVProgramMembership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVProgramMembership'
type MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call struct {
	*mock.Call
}

// CreateBulkCSVProgramMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVProgramMembership(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call{Call: _e.mock.On("CreateBulkCSVProgramMembership",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call) Return(createBulkCSVProgramMembership *openlaneclient.CreateBulkCSVProgramMembership, err error) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call {
	_c.Call.Return(createBulkCSVProgramMembership, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVProgramMembership, error)) *MockOpenlaneGraphClient_CreateBulkCSVProgramMembership_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVRisk provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVRisk(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVRisk, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVRisk")
	}

	var r0 *openlaneclient.CreateBulkCSVRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVRisk, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVRisk); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVRisk'
type MockOpenlaneGraphClient_CreateBulkCSVRisk_Call struct {
	*mock.Call
}

// CreateBulkCSVRisk is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVRisk(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVRisk_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVRisk_Call{Call: _e.mock.On("CreateBulkCSVRisk",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVRisk_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVRisk_Call) Return(createBulkCSVRisk *openlaneclient.CreateBulkCSVRisk, err error) *MockOpenlaneGraphClient_CreateBulkCSVRisk_Call {
	_c.Call.Return(createBulkCSVRisk, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVRisk_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVRisk, error)) *MockOpenlaneGraphClient_CreateBulkCSVRisk_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVScan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVScan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVScan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVScan")
	}

	var r0 *openlaneclient.CreateBulkCSVScan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVScan, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVScan); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVScan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVScan'
type MockOpenlaneGraphClient_CreateBulkCSVScan_Call struct {
	*mock.Call
}

// CreateBulkCSVScan is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVScan(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVScan_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVScan_Call{Call: _e.mock.On("CreateBulkCSVScan",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVScan_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVScan_Call) Return(createBulkCSVScan *openlaneclient.CreateBulkCSVScan, err error) *MockOpenlaneGraphClient_CreateBulkCSVScan_Call {
	_c.Call.Return(createBulkCSVScan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVScan_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVScan, error)) *MockOpenlaneGraphClient_CreateBulkCSVScan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVScheduledJob(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVScheduledJob")
	}

	var r0 *openlaneclient.CreateBulkCSVScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVScheduledJob, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVScheduledJob); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVScheduledJob'
type MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call struct {
	*mock.Call
}

// CreateBulkCSVScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVScheduledJob(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call{Call: _e.mock.On("CreateBulkCSVScheduledJob",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call) Return(createBulkCSVScheduledJob *openlaneclient.CreateBulkCSVScheduledJob, err error) *MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call {
	_c.Call.Return(createBulkCSVScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVScheduledJob, error)) *MockOpenlaneGraphClient_CreateBulkCSVScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVSubcontrol provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubcontrol, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVSubcontrol")
	}

	var r0 *openlaneclient.CreateBulkCSVSubcontrol
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubcontrol, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVSubcontrol); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVSubcontrol)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVSubcontrol'
type MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call struct {
	*mock.Call
}

// CreateBulkCSVSubcontrol is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVSubcontrol(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call{Call: _e.mock.On("CreateBulkCSVSubcontrol",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call) Return(createBulkCSVSubcontrol *openlaneclient.CreateBulkCSVSubcontrol, err error) *MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call {
	_c.Call.Return(createBulkCSVSubcontrol, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubcontrol, error)) *MockOpenlaneGraphClient_CreateBulkCSVSubcontrol_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVSubprocessor(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVSubprocessor")
	}

	var r0 *openlaneclient.CreateBulkCSVSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubprocessor, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVSubprocessor); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVSubprocessor'
type MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call struct {
	*mock.Call
}

// CreateBulkCSVSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVSubprocessor(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call{Call: _e.mock.On("CreateBulkCSVSubprocessor",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call) Return(createBulkCSVSubprocessor *openlaneclient.CreateBulkCSVSubprocessor, err error) *MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call {
	_c.Call.Return(createBulkCSVSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubprocessor, error)) *MockOpenlaneGraphClient_CreateBulkCSVSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVSubscriber provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubscriber, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVSubscriber")
	}

	var r0 *openlaneclient.CreateBulkCSVSubscriber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubscriber, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVSubscriber); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVSubscriber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVSubscriber'
type MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call struct {
	*mock.Call
}

// CreateBulkCSVSubscriber is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVSubscriber(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call{Call: _e.mock.On("CreateBulkCSVSubscriber",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call) Return(createBulkCSVSubscriber *openlaneclient.CreateBulkCSVSubscriber, err error) *MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call {
	_c.Call.Return(createBulkCSVSubscriber, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVSubscriber, error)) *MockOpenlaneGraphClient_CreateBulkCSVSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVTask provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVTask(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTask, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVTask")
	}

	var r0 *openlaneclient.CreateBulkCSVTask
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTask, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVTask); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVTask)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVTask'
type MockOpenlaneGraphClient_CreateBulkCSVTask_Call struct {
	*mock.Call
}

// CreateBulkCSVTask is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVTask(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVTask_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVTask_Call{Call: _e.mock.On("CreateBulkCSVTask",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTask_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTask_Call) Return(createBulkCSVTask *openlaneclient.CreateBulkCSVTask, err error) *MockOpenlaneGraphClient_CreateBulkCSVTask_Call {
	_c.Call.Return(createBulkCSVTask, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTask_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTask, error)) *MockOpenlaneGraphClient_CreateBulkCSVTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVTemplate provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTemplate, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVTemplate")
	}

	var r0 *openlaneclient.CreateBulkCSVTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTemplate, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVTemplate); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVTemplate'
type MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call struct {
	*mock.Call
}

// CreateBulkCSVTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVTemplate(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call{Call: _e.mock.On("CreateBulkCSVTemplate",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call) Return(createBulkCSVTemplate *openlaneclient.CreateBulkCSVTemplate, err error) *MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call {
	_c.Call.Return(createBulkCSVTemplate, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTemplate, error)) *MockOpenlaneGraphClient_CreateBulkCSVTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVTrustCenterCompliance provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVTrustCenterCompliance(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTrustCenterCompliance, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVTrustCenterCompliance")
	}

	var r0 *openlaneclient.CreateBulkCSVTrustCenterCompliance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTrustCenterCompliance, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVTrustCenterCompliance); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVTrustCenterCompliance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVTrustCenterCompliance'
type MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call struct {
	*mock.Call
}

// CreateBulkCSVTrustCenterCompliance is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVTrustCenterCompliance(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call{Call: _e.mock.On("CreateBulkCSVTrustCenterCompliance",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call) Return(createBulkCSVTrustCenterCompliance *openlaneclient.CreateBulkCSVTrustCenterCompliance, err error) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call {
	_c.Call.Return(createBulkCSVTrustCenterCompliance, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTrustCenterCompliance, error)) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterCompliance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCSVTrustCenterSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCSVTrustCenterSubprocessor(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTrustCenterSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCSVTrustCenterSubprocessor")
	}

	var r0 *openlaneclient.CreateBulkCSVTrustCenterSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTrustCenterSubprocessor, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCSVTrustCenterSubprocessor); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCSVTrustCenterSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCSVTrustCenterSubprocessor'
type MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call struct {
	*mock.Call
}

// CreateBulkCSVTrustCenterSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - input graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCSVTrustCenterSubprocessor(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call {
	return &MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call{Call: _e.mock.On("CreateBulkCSVTrustCenterSubprocessor",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call) Run(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 graphql.Upload
		if args[1] != nil {
			arg1 = args[1].(graphql.Upload)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call) Return(createBulkCSVTrustCenterSubprocessor *openlaneclient.CreateBulkCSVTrustCenterSubprocessor, err error) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call {
	_c.Call.Return(createBulkCSVTrustCenterSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call) RunAndReturn(run func(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCSVTrustCenterSubprocessor, error)) *MockOpenlaneGraphClient_CreateBulkCSVTrustCenterSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkContact provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkContact(ctx context.Context, input []*openlaneclient.CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkContact, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkContact")
	}

	var r0 *openlaneclient.CreateBulkContact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateContactInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkContact, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateContactInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkContact); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkContact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateContactInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkContact'
type MockOpenlaneGraphClient_CreateBulkContact_Call struct {
	*mock.Call
}

// CreateBulkContact is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateContactInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkContact(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkContact_Call {
	return &MockOpenlaneGraphClient_CreateBulkContact_Call{Call: _e.mock.On("CreateBulkContact",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkContact_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateContactInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateContactInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateContactInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkContact_Call) Return(createBulkContact *openlaneclient.CreateBulkContact, err error) *MockOpenlaneGraphClient_CreateBulkContact_Call {
	_c.Call.Return(createBulkContact, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkContact_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkContact, error)) *MockOpenlaneGraphClient_CreateBulkContact_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkControl(ctx context.Context, input []*openlaneclient.CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkControl")
	}

	var r0 *openlaneclient.CreateBulkControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControl, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkControl); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkControl'
type MockOpenlaneGraphClient_CreateBulkControl_Call struct {
	*mock.Call
}

// CreateBulkControl is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkControl(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkControl_Call {
	return &MockOpenlaneGraphClient_CreateBulkControl_Call{Call: _e.mock.On("CreateBulkControl",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkControl_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateControlInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateControlInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControl_Call) Return(createBulkControl *openlaneclient.CreateBulkControl, err error) *MockOpenlaneGraphClient_CreateBulkControl_Call {
	_c.Call.Return(createBulkControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControl_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControl, error)) *MockOpenlaneGraphClient_CreateBulkControl_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkControlImplementation provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkControlImplementation(ctx context.Context, input []*openlaneclient.CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlImplementation, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkControlImplementation")
	}

	var r0 *openlaneclient.CreateBulkControlImplementation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlImplementationInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlImplementation, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlImplementationInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkControlImplementation); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkControlImplementation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateControlImplementationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkControlImplementation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkControlImplementation'
type MockOpenlaneGraphClient_CreateBulkControlImplementation_Call struct {
	*mock.Call
}

// CreateBulkControlImplementation is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateControlImplementationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkControlImplementation(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkControlImplementation_Call {
	return &MockOpenlaneGraphClient_CreateBulkControlImplementation_Call{Call: _e.mock.On("CreateBulkControlImplementation",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlImplementation_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkControlImplementation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateControlImplementationInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateControlImplementationInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlImplementation_Call) Return(createBulkControlImplementation *openlaneclient.CreateBulkControlImplementation, err error) *MockOpenlaneGraphClient_CreateBulkControlImplementation_Call {
	_c.Call.Return(createBulkControlImplementation, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlImplementation_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlImplementation, error)) *MockOpenlaneGraphClient_CreateBulkControlImplementation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkControlObjective provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkControlObjective(ctx context.Context, input []*openlaneclient.CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlObjective, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkControlObjective")
	}

	var r0 *openlaneclient.CreateBulkControlObjective
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlObjectiveInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlObjective, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlObjectiveInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkControlObjective); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkControlObjective)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateControlObjectiveInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkControlObjective_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkControlObjective'
type MockOpenlaneGraphClient_CreateBulkControlObjective_Call struct {
	*mock.Call
}

// CreateBulkControlObjective is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateControlObjectiveInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkControlObjective(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkControlObjective_Call {
	return &MockOpenlaneGraphClient_CreateBulkControlObjective_Call{Call: _e.mock.On("CreateBulkControlObjective",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlObjective_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkControlObjective_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateControlObjectiveInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateControlObjectiveInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlObjective_Call) Return(createBulkControlObjective *openlaneclient.CreateBulkControlObjective, err error) *MockOpenlaneGraphClient_CreateBulkControlObjective_Call {
	_c.Call.Return(createBulkControlObjective, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlObjective_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlObjective, error)) *MockOpenlaneGraphClient_CreateBulkControlObjective_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkControlScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkControlScheduledJob(ctx context.Context, input []*openlaneclient.CreateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkControlScheduledJob")
	}

	var r0 *openlaneclient.CreateBulkControlScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlScheduledJobInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlScheduledJob, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateControlScheduledJobInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkControlScheduledJob); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkControlScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateControlScheduledJobInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkControlScheduledJob'
type MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call struct {
	*mock.Call
}

// CreateBulkControlScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateControlScheduledJobInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkControlScheduledJob(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call {
	return &MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call{Call: _e.mock.On("CreateBulkControlScheduledJob",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateControlScheduledJobInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateControlScheduledJobInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call) Return(createBulkControlScheduledJob *openlaneclient.CreateBulkControlScheduledJob, err error) *MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call {
	_c.Call.Return(createBulkControlScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkControlScheduledJob, error)) *MockOpenlaneGraphClient_CreateBulkControlScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkCustomDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkCustomDomain(ctx context.Context, input []*openlaneclient.CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCustomDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkCustomDomain")
	}

	var r0 *openlaneclient.CreateBulkCustomDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateCustomDomainInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCustomDomain, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateCustomDomainInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkCustomDomain); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkCustomDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateCustomDomainInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkCustomDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkCustomDomain'
type MockOpenlaneGraphClient_CreateBulkCustomDomain_Call struct {
	*mock.Call
}

// CreateBulkCustomDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateCustomDomainInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkCustomDomain(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkCustomDomain_Call {
	return &MockOpenlaneGraphClient_CreateBulkCustomDomain_Call{Call: _e.mock.On("CreateBulkCustomDomain",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkCustomDomain_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkCustomDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateCustomDomainInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateCustomDomainInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCustomDomain_Call) Return(createBulkCustomDomain *openlaneclient.CreateBulkCustomDomain, err error) *MockOpenlaneGraphClient_CreateBulkCustomDomain_Call {
	_c.Call.Return(createBulkCustomDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkCustomDomain_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkCustomDomain, error)) *MockOpenlaneGraphClient_CreateBulkCustomDomain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkDNSVerification provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkDNSVerification(ctx context.Context, input []*openlaneclient.CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkDNSVerification, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkDNSVerification")
	}

	var r0 *openlaneclient.CreateBulkDNSVerification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateDNSVerificationInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkDNSVerification, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateDNSVerificationInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkDNSVerification); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkDNSVerification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateDNSVerificationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkDNSVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkDNSVerification'
type MockOpenlaneGraphClient_CreateBulkDNSVerification_Call struct {
	*mock.Call
}

// CreateBulkDNSVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateDNSVerificationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkDNSVerification(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkDNSVerification_Call {
	return &MockOpenlaneGraphClient_CreateBulkDNSVerification_Call{Call: _e.mock.On("CreateBulkDNSVerification",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkDNSVerification_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkDNSVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateDNSVerificationInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateDNSVerificationInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkDNSVerification_Call) Return(createBulkDNSVerification *openlaneclient.CreateBulkDNSVerification, err error) *MockOpenlaneGraphClient_CreateBulkDNSVerification_Call {
	_c.Call.Return(createBulkDNSVerification, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkDNSVerification_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkDNSVerification, error)) *MockOpenlaneGraphClient_CreateBulkDNSVerification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkEntity provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkEntity(ctx context.Context, input []*openlaneclient.CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEntity, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkEntity")
	}

	var r0 *openlaneclient.CreateBulkEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateEntityInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEntity, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateEntityInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkEntity); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateEntityInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkEntity'
type MockOpenlaneGraphClient_CreateBulkEntity_Call struct {
	*mock.Call
}

// CreateBulkEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateEntityInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkEntity(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkEntity_Call {
	return &MockOpenlaneGraphClient_CreateBulkEntity_Call{Call: _e.mock.On("CreateBulkEntity",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkEntity_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateEntityInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateEntityInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateEntityInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkEntity_Call) Return(createBulkEntity *openlaneclient.CreateBulkEntity, err error) *MockOpenlaneGraphClient_CreateBulkEntity_Call {
	_c.Call.Return(createBulkEntity, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkEntity_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEntity, error)) *MockOpenlaneGraphClient_CreateBulkEntity_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkEntityType provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkEntityType(ctx context.Context, input []*openlaneclient.CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEntityType, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkEntityType")
	}

	var r0 *openlaneclient.CreateBulkEntityType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateEntityTypeInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEntityType, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateEntityTypeInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkEntityType); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkEntityType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateEntityTypeInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkEntityType'
type MockOpenlaneGraphClient_CreateBulkEntityType_Call struct {
	*mock.Call
}

// CreateBulkEntityType is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateEntityTypeInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkEntityType(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkEntityType_Call {
	return &MockOpenlaneGraphClient_CreateBulkEntityType_Call{Call: _e.mock.On("CreateBulkEntityType",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkEntityType_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateEntityTypeInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateEntityTypeInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkEntityType_Call) Return(createBulkEntityType *openlaneclient.CreateBulkEntityType, err error) *MockOpenlaneGraphClient_CreateBulkEntityType_Call {
	_c.Call.Return(createBulkEntityType, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkEntityType_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEntityType, error)) *MockOpenlaneGraphClient_CreateBulkEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkEvent provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkEvent(ctx context.Context, input []*openlaneclient.CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEvent, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkEvent")
	}

	var r0 *openlaneclient.CreateBulkEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateEventInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEvent, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateEventInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkEvent); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateEventInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkEvent'
type MockOpenlaneGraphClient_CreateBulkEvent_Call struct {
	*mock.Call
}

// CreateBulkEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateEventInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkEvent(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkEvent_Call {
	return &MockOpenlaneGraphClient_CreateBulkEvent_Call{Call: _e.mock.On("CreateBulkEvent",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkEvent_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateEventInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateEventInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateEventInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkEvent_Call) Return(createBulkEvent *openlaneclient.CreateBulkEvent, err error) *MockOpenlaneGraphClient_CreateBulkEvent_Call {
	_c.Call.Return(createBulkEvent, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkEvent_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkEvent, error)) *MockOpenlaneGraphClient_CreateBulkEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkGroup provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkGroup(ctx context.Context, input []*openlaneclient.CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkGroup, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkGroup")
	}

	var r0 *openlaneclient.CreateBulkGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateGroupInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkGroup, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateGroupInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkGroup); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateGroupInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkGroup'
type MockOpenlaneGraphClient_CreateBulkGroup_Call struct {
	*mock.Call
}

// CreateBulkGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateGroupInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkGroup(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkGroup_Call {
	return &MockOpenlaneGraphClient_CreateBulkGroup_Call{Call: _e.mock.On("CreateBulkGroup",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkGroup_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateGroupInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateGroupInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateGroupInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkGroup_Call) Return(createBulkGroup *openlaneclient.CreateBulkGroup, err error) *MockOpenlaneGraphClient_CreateBulkGroup_Call {
	_c.Call.Return(createBulkGroup, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkGroup_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkGroup, error)) *MockOpenlaneGraphClient_CreateBulkGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkGroupMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkGroupMembers(ctx context.Context, input []*openlaneclient.CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkGroupMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkGroupMembers")
	}

	var r0 *openlaneclient.CreateBulkGroupMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateGroupMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkGroupMembers, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateGroupMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkGroupMembers); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkGroupMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateGroupMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkGroupMembers'
type MockOpenlaneGraphClient_CreateBulkGroupMembers_Call struct {
	*mock.Call
}

// CreateBulkGroupMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateGroupMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkGroupMembers(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkGroupMembers_Call {
	return &MockOpenlaneGraphClient_CreateBulkGroupMembers_Call{Call: _e.mock.On("CreateBulkGroupMembers",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkGroupMembers_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateGroupMembershipInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateGroupMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkGroupMembers_Call) Return(createBulkGroupMembers *openlaneclient.CreateBulkGroupMembers, err error) *MockOpenlaneGraphClient_CreateBulkGroupMembers_Call {
	_c.Call.Return(createBulkGroupMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkGroupMembers_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkGroupMembers, error)) *MockOpenlaneGraphClient_CreateBulkGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkHush provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkHush(ctx context.Context, input []*openlaneclient.CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkHush, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkHush")
	}

	var r0 *openlaneclient.CreateBulkHush
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateHushInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkHush, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateHushInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkHush); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkHush)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateHushInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkHush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkHush'
type MockOpenlaneGraphClient_CreateBulkHush_Call struct {
	*mock.Call
}

// CreateBulkHush is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateHushInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkHush(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkHush_Call {
	return &MockOpenlaneGraphClient_CreateBulkHush_Call{Call: _e.mock.On("CreateBulkHush",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkHush_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateHushInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkHush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateHushInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateHushInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkHush_Call) Return(createBulkHush *openlaneclient.CreateBulkHush, err error) *MockOpenlaneGraphClient_CreateBulkHush_Call {
	_c.Call.Return(createBulkHush, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkHush_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkHush, error)) *MockOpenlaneGraphClient_CreateBulkHush_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkIntegration provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkIntegration(ctx context.Context, input []*openlaneclient.CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkIntegration, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkIntegration")
	}

	var r0 *openlaneclient.CreateBulkIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateIntegrationInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkIntegration, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateIntegrationInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkIntegration); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateIntegrationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkIntegration'
type MockOpenlaneGraphClient_CreateBulkIntegration_Call struct {
	*mock.Call
}

// CreateBulkIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateIntegrationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkIntegration(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkIntegration_Call {
	return &MockOpenlaneGraphClient_CreateBulkIntegration_Call{Call: _e.mock.On("CreateBulkIntegration",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkIntegration_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateIntegrationInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateIntegrationInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkIntegration_Call) Return(createBulkIntegration *openlaneclient.CreateBulkIntegration, err error) *MockOpenlaneGraphClient_CreateBulkIntegration_Call {
	_c.Call.Return(createBulkIntegration, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkIntegration_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkIntegration, error)) *MockOpenlaneGraphClient_CreateBulkIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkInternalPolicy provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkInternalPolicy(ctx context.Context, input []*openlaneclient.CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkInternalPolicy, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkInternalPolicy")
	}

	var r0 *openlaneclient.CreateBulkInternalPolicy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateInternalPolicyInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkInternalPolicy, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateInternalPolicyInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkInternalPolicy); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkInternalPolicy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateInternalPolicyInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkInternalPolicy'
type MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call struct {
	*mock.Call
}

// CreateBulkInternalPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateInternalPolicyInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkInternalPolicy(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call {
	return &MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call{Call: _e.mock.On("CreateBulkInternalPolicy",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateInternalPolicyInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateInternalPolicyInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call) Return(createBulkInternalPolicy *openlaneclient.CreateBulkInternalPolicy, err error) *MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call {
	_c.Call.Return(createBulkInternalPolicy, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkInternalPolicy, error)) *MockOpenlaneGraphClient_CreateBulkInternalPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkInvite provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkInvite(ctx context.Context, input []*openlaneclient.CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkInvite, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkInvite")
	}

	var r0 *openlaneclient.CreateBulkInvite
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateInviteInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkInvite, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateInviteInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkInvite); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkInvite)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateInviteInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkInvite'
type MockOpenlaneGraphClient_CreateBulkInvite_Call struct {
	*mock.Call
}

// CreateBulkInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateInviteInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkInvite(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkInvite_Call {
	return &MockOpenlaneGraphClient_CreateBulkInvite_Call{Call: _e.mock.On("CreateBulkInvite",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkInvite_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateInviteInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateInviteInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateInviteInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkInvite_Call) Return(createBulkInvite *openlaneclient.CreateBulkInvite, err error) *MockOpenlaneGraphClient_CreateBulkInvite_Call {
	_c.Call.Return(createBulkInvite, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkInvite_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkInvite, error)) *MockOpenlaneGraphClient_CreateBulkInvite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkMappableDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkMappableDomain(ctx context.Context, input []*openlaneclient.CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkMappableDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkMappableDomain")
	}

	var r0 *openlaneclient.CreateBulkMappableDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateMappableDomainInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkMappableDomain, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateMappableDomainInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkMappableDomain); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkMappableDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateMappableDomainInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkMappableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkMappableDomain'
type MockOpenlaneGraphClient_CreateBulkMappableDomain_Call struct {
	*mock.Call
}

// CreateBulkMappableDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateMappableDomainInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkMappableDomain(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkMappableDomain_Call {
	return &MockOpenlaneGraphClient_CreateBulkMappableDomain_Call{Call: _e.mock.On("CreateBulkMappableDomain",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkMappableDomain_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkMappableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateMappableDomainInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateMappableDomainInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkMappableDomain_Call) Return(createBulkMappableDomain *openlaneclient.CreateBulkMappableDomain, err error) *MockOpenlaneGraphClient_CreateBulkMappableDomain_Call {
	_c.Call.Return(createBulkMappableDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkMappableDomain_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkMappableDomain, error)) *MockOpenlaneGraphClient_CreateBulkMappableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkMappedControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkMappedControl(ctx context.Context, input []*openlaneclient.CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkMappedControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkMappedControl")
	}

	var r0 *openlaneclient.CreateBulkMappedControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateMappedControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkMappedControl, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateMappedControlInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkMappedControl); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkMappedControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateMappedControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkMappedControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkMappedControl'
type MockOpenlaneGraphClient_CreateBulkMappedControl_Call struct {
	*mock.Call
}

// CreateBulkMappedControl is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateMappedControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkMappedControl(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkMappedControl_Call {
	return &MockOpenlaneGraphClient_CreateBulkMappedControl_Call{Call: _e.mock.On("CreateBulkMappedControl",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkMappedControl_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkMappedControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateMappedControlInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateMappedControlInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkMappedControl_Call) Return(createBulkMappedControl *openlaneclient.CreateBulkMappedControl, err error) *MockOpenlaneGraphClient_CreateBulkMappedControl_Call {
	_c.Call.Return(createBulkMappedControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkMappedControl_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkMappedControl, error)) *MockOpenlaneGraphClient_CreateBulkMappedControl_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkNarrative provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkNarrative(ctx context.Context, input []*openlaneclient.CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkNarrative, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkNarrative")
	}

	var r0 *openlaneclient.CreateBulkNarrative
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateNarrativeInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkNarrative, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateNarrativeInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkNarrative); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkNarrative)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateNarrativeInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkNarrative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkNarrative'
type MockOpenlaneGraphClient_CreateBulkNarrative_Call struct {
	*mock.Call
}

// CreateBulkNarrative is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateNarrativeInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkNarrative(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkNarrative_Call {
	return &MockOpenlaneGraphClient_CreateBulkNarrative_Call{Call: _e.mock.On("CreateBulkNarrative",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkNarrative_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkNarrative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateNarrativeInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateNarrativeInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkNarrative_Call) Return(createBulkNarrative *openlaneclient.CreateBulkNarrative, err error) *MockOpenlaneGraphClient_CreateBulkNarrative_Call {
	_c.Call.Return(createBulkNarrative, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkNarrative_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkNarrative, error)) *MockOpenlaneGraphClient_CreateBulkNarrative_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkOrgMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkOrgMembers(ctx context.Context, input []*openlaneclient.CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkOrgMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkOrgMembers")
	}

	var r0 *openlaneclient.CreateBulkOrgMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateOrgMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkOrgMembers, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateOrgMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkOrgMembers); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkOrgMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateOrgMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkOrgMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkOrgMembers'
type MockOpenlaneGraphClient_CreateBulkOrgMembers_Call struct {
	*mock.Call
}

// CreateBulkOrgMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateOrgMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkOrgMembers(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkOrgMembers_Call {
	return &MockOpenlaneGraphClient_CreateBulkOrgMembers_Call{Call: _e.mock.On("CreateBulkOrgMembers",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkOrgMembers_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkOrgMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateOrgMembershipInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateOrgMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkOrgMembers_Call) Return(createBulkOrgMembers *openlaneclient.CreateBulkOrgMembers, err error) *MockOpenlaneGraphClient_CreateBulkOrgMembers_Call {
	_c.Call.Return(createBulkOrgMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkOrgMembers_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkOrgMembers, error)) *MockOpenlaneGraphClient_CreateBulkOrgMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkProcedure provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkProcedure(ctx context.Context, input []*openlaneclient.CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProcedure, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkProcedure")
	}

	var r0 *openlaneclient.CreateBulkProcedure
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProcedureInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProcedure, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProcedureInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkProcedure); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkProcedure)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateProcedureInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkProcedure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkProcedure'
type MockOpenlaneGraphClient_CreateBulkProcedure_Call struct {
	*mock.Call
}

// CreateBulkProcedure is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateProcedureInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkProcedure(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkProcedure_Call {
	return &MockOpenlaneGraphClient_CreateBulkProcedure_Call{Call: _e.mock.On("CreateBulkProcedure",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkProcedure_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateProcedureInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkProcedure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateProcedureInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateProcedureInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProcedure_Call) Return(createBulkProcedure *openlaneclient.CreateBulkProcedure, err error) *MockOpenlaneGraphClient_CreateBulkProcedure_Call {
	_c.Call.Return(createBulkProcedure, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProcedure_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProcedure, error)) *MockOpenlaneGraphClient_CreateBulkProcedure_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkProgram(ctx context.Context, input []*openlaneclient.CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkProgram")
	}

	var r0 *openlaneclient.CreateBulkProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProgramInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgram, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProgramInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkProgram); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateProgramInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkProgram'
type MockOpenlaneGraphClient_CreateBulkProgram_Call struct {
	*mock.Call
}

// CreateBulkProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateProgramInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkProgram(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkProgram_Call {
	return &MockOpenlaneGraphClient_CreateBulkProgram_Call{Call: _e.mock.On("CreateBulkProgram",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgram_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateProgramInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateProgramInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateProgramInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgram_Call) Return(createBulkProgram *openlaneclient.CreateBulkProgram, err error) *MockOpenlaneGraphClient_CreateBulkProgram_Call {
	_c.Call.Return(createBulkProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgram_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgram, error)) *MockOpenlaneGraphClient_CreateBulkProgram_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkProgramMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkProgramMembers(ctx context.Context, input []*openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgramMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkProgramMembers")
	}

	var r0 *openlaneclient.CreateBulkProgramMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgramMembers, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkProgramMembers); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkProgramMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkProgramMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkProgramMembers'
type MockOpenlaneGraphClient_CreateBulkProgramMembers_Call struct {
	*mock.Call
}

// CreateBulkProgramMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateProgramMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkProgramMembers(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkProgramMembers_Call {
	return &MockOpenlaneGraphClient_CreateBulkProgramMembers_Call{Call: _e.mock.On("CreateBulkProgramMembers",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgramMembers_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkProgramMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateProgramMembershipInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateProgramMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgramMembers_Call) Return(createBulkProgramMembers *openlaneclient.CreateBulkProgramMembers, err error) *MockOpenlaneGraphClient_CreateBulkProgramMembers_Call {
	_c.Call.Return(createBulkProgramMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgramMembers_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgramMembers, error)) *MockOpenlaneGraphClient_CreateBulkProgramMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkProgramMembership provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkProgramMembership(ctx context.Context, input []*openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgramMembership, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkProgramMembership")
	}

	var r0 *openlaneclient.CreateBulkProgramMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgramMembership, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkProgramMembership); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkProgramMembership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkProgramMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkProgramMembership'
type MockOpenlaneGraphClient_CreateBulkProgramMembership_Call struct {
	*mock.Call
}

// CreateBulkProgramMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateProgramMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkProgramMembership(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkProgramMembership_Call {
	return &MockOpenlaneGraphClient_CreateBulkProgramMembership_Call{Call: _e.mock.On("CreateBulkProgramMembership",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgramMembership_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkProgramMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateProgramMembershipInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateProgramMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgramMembership_Call) Return(createBulkProgramMembership *openlaneclient.CreateBulkProgramMembership, err error) *MockOpenlaneGraphClient_CreateBulkProgramMembership_Call {
	_c.Call.Return(createBulkProgramMembership, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkProgramMembership_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkProgramMembership, error)) *MockOpenlaneGraphClient_CreateBulkProgramMembership_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkRisk provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkRisk(ctx context.Context, input []*openlaneclient.CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkRisk, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkRisk")
	}

	var r0 *openlaneclient.CreateBulkRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateRiskInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkRisk, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateRiskInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkRisk); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateRiskInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkRisk'
type MockOpenlaneGraphClient_CreateBulkRisk_Call struct {
	*mock.Call
}

// CreateBulkRisk is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateRiskInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkRisk(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkRisk_Call {
	return &MockOpenlaneGraphClient_CreateBulkRisk_Call{Call: _e.mock.On("CreateBulkRisk",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkRisk_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateRiskInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateRiskInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateRiskInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkRisk_Call) Return(createBulkRisk *openlaneclient.CreateBulkRisk, err error) *MockOpenlaneGraphClient_CreateBulkRisk_Call {
	_c.Call.Return(createBulkRisk, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkRisk_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkRisk, error)) *MockOpenlaneGraphClient_CreateBulkRisk_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkScan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkScan(ctx context.Context, input []*openlaneclient.CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkScan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkScan")
	}

	var r0 *openlaneclient.CreateBulkScan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateScanInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkScan, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateScanInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkScan); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkScan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateScanInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkScan'
type MockOpenlaneGraphClient_CreateBulkScan_Call struct {
	*mock.Call
}

// CreateBulkScan is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateScanInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkScan(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkScan_Call {
	return &MockOpenlaneGraphClient_CreateBulkScan_Call{Call: _e.mock.On("CreateBulkScan",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkScan_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateScanInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateScanInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateScanInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkScan_Call) Return(createBulkScan *openlaneclient.CreateBulkScan, err error) *MockOpenlaneGraphClient_CreateBulkScan_Call {
	_c.Call.Return(createBulkScan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkScan_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkScan, error)) *MockOpenlaneGraphClient_CreateBulkScan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkScheduledJob(ctx context.Context, input []*openlaneclient.CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkScheduledJob")
	}

	var r0 *openlaneclient.CreateBulkScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateScheduledJobInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkScheduledJob, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateScheduledJobInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkScheduledJob); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateScheduledJobInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkScheduledJob'
type MockOpenlaneGraphClient_CreateBulkScheduledJob_Call struct {
	*mock.Call
}

// CreateBulkScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateScheduledJobInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkScheduledJob(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkScheduledJob_Call {
	return &MockOpenlaneGraphClient_CreateBulkScheduledJob_Call{Call: _e.mock.On("CreateBulkScheduledJob",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkScheduledJob_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateScheduledJobInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateScheduledJobInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkScheduledJob_Call) Return(createBulkScheduledJob *openlaneclient.CreateBulkScheduledJob, err error) *MockOpenlaneGraphClient_CreateBulkScheduledJob_Call {
	_c.Call.Return(createBulkScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkScheduledJob_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkScheduledJob, error)) *MockOpenlaneGraphClient_CreateBulkScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkSubcontrol provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkSubcontrol(ctx context.Context, input []*openlaneclient.CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubcontrol, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkSubcontrol")
	}

	var r0 *openlaneclient.CreateBulkSubcontrol
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateSubcontrolInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubcontrol, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateSubcontrolInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkSubcontrol); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkSubcontrol)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateSubcontrolInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkSubcontrol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkSubcontrol'
type MockOpenlaneGraphClient_CreateBulkSubcontrol_Call struct {
	*mock.Call
}

// CreateBulkSubcontrol is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateSubcontrolInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkSubcontrol(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkSubcontrol_Call {
	return &MockOpenlaneGraphClient_CreateBulkSubcontrol_Call{Call: _e.mock.On("CreateBulkSubcontrol",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubcontrol_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkSubcontrol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateSubcontrolInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateSubcontrolInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubcontrol_Call) Return(createBulkSubcontrol *openlaneclient.CreateBulkSubcontrol, err error) *MockOpenlaneGraphClient_CreateBulkSubcontrol_Call {
	_c.Call.Return(createBulkSubcontrol, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubcontrol_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubcontrol, error)) *MockOpenlaneGraphClient_CreateBulkSubcontrol_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkSubprocessor(ctx context.Context, input []*openlaneclient.CreateSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkSubprocessor")
	}

	var r0 *openlaneclient.CreateBulkSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateSubprocessorInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubprocessor, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateSubprocessorInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkSubprocessor); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateSubprocessorInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkSubprocessor'
type MockOpenlaneGraphClient_CreateBulkSubprocessor_Call struct {
	*mock.Call
}

// CreateBulkSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateSubprocessorInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkSubprocessor(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkSubprocessor_Call {
	return &MockOpenlaneGraphClient_CreateBulkSubprocessor_Call{Call: _e.mock.On("CreateBulkSubprocessor",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubprocessor_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateSubprocessorInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateSubprocessorInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateSubprocessorInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubprocessor_Call) Return(createBulkSubprocessor *openlaneclient.CreateBulkSubprocessor, err error) *MockOpenlaneGraphClient_CreateBulkSubprocessor_Call {
	_c.Call.Return(createBulkSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubprocessor_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubprocessor, error)) *MockOpenlaneGraphClient_CreateBulkSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkSubscriber provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkSubscriber(ctx context.Context, input []*openlaneclient.CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubscriber, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkSubscriber")
	}

	var r0 *openlaneclient.CreateBulkSubscriber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateSubscriberInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubscriber, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateSubscriberInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkSubscriber); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkSubscriber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateSubscriberInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkSubscriber'
type MockOpenlaneGraphClient_CreateBulkSubscriber_Call struct {
	*mock.Call
}

// CreateBulkSubscriber is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateSubscriberInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkSubscriber(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkSubscriber_Call {
	return &MockOpenlaneGraphClient_CreateBulkSubscriber_Call{Call: _e.mock.On("CreateBulkSubscriber",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubscriber_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateSubscriberInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateSubscriberInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubscriber_Call) Return(createBulkSubscriber *openlaneclient.CreateBulkSubscriber, err error) *MockOpenlaneGraphClient_CreateBulkSubscriber_Call {
	_c.Call.Return(createBulkSubscriber, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkSubscriber_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkSubscriber, error)) *MockOpenlaneGraphClient_CreateBulkSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkTask provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkTask(ctx context.Context, input []*openlaneclient.CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTask, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkTask")
	}

	var r0 *openlaneclient.CreateBulkTask
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTaskInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTask, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTaskInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkTask); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkTask)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateTaskInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkTask'
type MockOpenlaneGraphClient_CreateBulkTask_Call struct {
	*mock.Call
}

// CreateBulkTask is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateTaskInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkTask(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkTask_Call {
	return &MockOpenlaneGraphClient_CreateBulkTask_Call{Call: _e.mock.On("CreateBulkTask",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkTask_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateTaskInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateTaskInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateTaskInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTask_Call) Return(createBulkTask *openlaneclient.CreateBulkTask, err error) *MockOpenlaneGraphClient_CreateBulkTask_Call {
	_c.Call.Return(createBulkTask, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTask_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTask, error)) *MockOpenlaneGraphClient_CreateBulkTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkTemplate provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkTemplate(ctx context.Context, input []*openlaneclient.CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTemplate, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkTemplate")
	}

	var r0 *openlaneclient.CreateBulkTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTemplateInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTemplate, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTemplateInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkTemplate); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateTemplateInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkTemplate'
type MockOpenlaneGraphClient_CreateBulkTemplate_Call struct {
	*mock.Call
}

// CreateBulkTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateTemplateInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkTemplate(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkTemplate_Call {
	return &MockOpenlaneGraphClient_CreateBulkTemplate_Call{Call: _e.mock.On("CreateBulkTemplate",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkTemplate_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateTemplateInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateTemplateInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateTemplateInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTemplate_Call) Return(createBulkTemplate *openlaneclient.CreateBulkTemplate, err error) *MockOpenlaneGraphClient_CreateBulkTemplate_Call {
	_c.Call.Return(createBulkTemplate, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTemplate_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTemplate, error)) *MockOpenlaneGraphClient_CreateBulkTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkTrustCenterCompliance provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkTrustCenterCompliance(ctx context.Context, input []*openlaneclient.CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTrustCenterCompliance, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkTrustCenterCompliance")
	}

	var r0 *openlaneclient.CreateBulkTrustCenterCompliance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTrustCenterCompliance, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkTrustCenterCompliance); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkTrustCenterCompliance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkTrustCenterCompliance'
type MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call struct {
	*mock.Call
}

// CreateBulkTrustCenterCompliance is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateTrustCenterComplianceInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkTrustCenterCompliance(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call {
	return &MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call{Call: _e.mock.On("CreateBulkTrustCenterCompliance",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateTrustCenterComplianceInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateTrustCenterComplianceInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call) Return(createBulkTrustCenterCompliance *openlaneclient.CreateBulkTrustCenterCompliance, err error) *MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call {
	_c.Call.Return(createBulkTrustCenterCompliance, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTrustCenterCompliance, error)) *MockOpenlaneGraphClient_CreateBulkTrustCenterCompliance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkTrustCenterSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateBulkTrustCenterSubprocessor(ctx context.Context, input []*openlaneclient.CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTrustCenterSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkTrustCenterSubprocessor")
	}

	var r0 *openlaneclient.CreateBulkTrustCenterSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTrustCenterSubprocessor, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*openlaneclient.CreateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateBulkTrustCenterSubprocessor); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateBulkTrustCenterSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*openlaneclient.CreateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkTrustCenterSubprocessor'
type MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call struct {
	*mock.Call
}

// CreateBulkTrustCenterSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*openlaneclient.CreateTrustCenterSubprocessorInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateBulkTrustCenterSubprocessor(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call {
	return &MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call{Call: _e.mock.On("CreateBulkTrustCenterSubprocessor",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call) Run(run func(ctx context.Context, input []*openlaneclient.CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*openlaneclient.CreateTrustCenterSubprocessorInput
		if args[1] != nil {
			arg1 = args[1].([]*openlaneclient.CreateTrustCenterSubprocessorInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call) Return(createBulkTrustCenterSubprocessor *openlaneclient.CreateBulkTrustCenterSubprocessor, err error) *MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call {
	_c.Call.Return(createBulkTrustCenterSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call) RunAndReturn(run func(ctx context.Context, input []*openlaneclient.CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateBulkTrustCenterSubprocessor, error)) *MockOpenlaneGraphClient_CreateBulkTrustCenterSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateContact provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateContact(ctx context.Context, input openlaneclient.CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateContact, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateContact")
	}

	var r0 *openlaneclient.CreateContact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateContactInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateContact, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateContactInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateContact); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateContact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateContactInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContact'
type MockOpenlaneGraphClient_CreateContact_Call struct {
	*mock.Call
}

// CreateContact is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateContactInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateContact(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateContact_Call {
	return &MockOpenlaneGraphClient_CreateContact_Call{Call: _e.mock.On("CreateContact",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateContact_Call) Run(run func(ctx context.Context, input openlaneclient.CreateContactInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateContactInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateContactInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateContact_Call) Return(createContact *openlaneclient.CreateContact, err error) *MockOpenlaneGraphClient_CreateContact_Call {
	_c.Call.Return(createContact, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateContact_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateContact, error)) *MockOpenlaneGraphClient_CreateContact_Call {
	_c.Call.Return(run)
	return _c
}

// CreateControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateControl(ctx context.Context, input openlaneclient.CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControl")
	}

	var r0 *openlaneclient.CreateControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateControl, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateControl); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControl'
type MockOpenlaneGraphClient_CreateControl_Call struct {
	*mock.Call
}

// CreateControl is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateControl(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateControl_Call {
	return &MockOpenlaneGraphClient_CreateControl_Call{Call: _e.mock.On("CreateControl",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateControl_Call) Run(run func(ctx context.Context, input openlaneclient.CreateControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateControlInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateControlInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControl_Call) Return(createControl *openlaneclient.CreateControl, err error) *MockOpenlaneGraphClient_CreateControl_Call {
	_c.Call.Return(createControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControl_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControl, error)) *MockOpenlaneGraphClient_CreateControl_Call {
	_c.Call.Return(run)
	return _c
}

// CreateControlImplementation provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateControlImplementation(ctx context.Context, input openlaneclient.CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlImplementation, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControlImplementation")
	}

	var r0 *openlaneclient.CreateControlImplementation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlImplementationInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlImplementation, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlImplementationInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateControlImplementation); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateControlImplementation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateControlImplementationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateControlImplementation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControlImplementation'
type MockOpenlaneGraphClient_CreateControlImplementation_Call struct {
	*mock.Call
}

// CreateControlImplementation is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateControlImplementationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateControlImplementation(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateControlImplementation_Call {
	return &MockOpenlaneGraphClient_CreateControlImplementation_Call{Call: _e.mock.On("CreateControlImplementation",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateControlImplementation_Call) Run(run func(ctx context.Context, input openlaneclient.CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateControlImplementation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateControlImplementationInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateControlImplementationInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlImplementation_Call) Return(createControlImplementation *openlaneclient.CreateControlImplementation, err error) *MockOpenlaneGraphClient_CreateControlImplementation_Call {
	_c.Call.Return(createControlImplementation, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlImplementation_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlImplementation, error)) *MockOpenlaneGraphClient_CreateControlImplementation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateControlObjective provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateControlObjective(ctx context.Context, input openlaneclient.CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlObjective, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControlObjective")
	}

	var r0 *openlaneclient.CreateControlObjective
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlObjectiveInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlObjective, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlObjectiveInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateControlObjective); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateControlObjective)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateControlObjectiveInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateControlObjective_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControlObjective'
type MockOpenlaneGraphClient_CreateControlObjective_Call struct {
	*mock.Call
}

// CreateControlObjective is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateControlObjectiveInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateControlObjective(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateControlObjective_Call {
	return &MockOpenlaneGraphClient_CreateControlObjective_Call{Call: _e.mock.On("CreateControlObjective",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateControlObjective_Call) Run(run func(ctx context.Context, input openlaneclient.CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateControlObjective_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateControlObjectiveInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateControlObjectiveInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlObjective_Call) Return(createControlObjective *openlaneclient.CreateControlObjective, err error) *MockOpenlaneGraphClient_CreateControlObjective_Call {
	_c.Call.Return(createControlObjective, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlObjective_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlObjective, error)) *MockOpenlaneGraphClient_CreateControlObjective_Call {
	_c.Call.Return(run)
	return _c
}

// CreateControlScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateControlScheduledJob(ctx context.Context, input openlaneclient.CreateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControlScheduledJob")
	}

	var r0 *openlaneclient.CreateControlScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlScheduledJobInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlScheduledJob, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlScheduledJobInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateControlScheduledJob); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateControlScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateControlScheduledJobInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateControlScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControlScheduledJob'
type MockOpenlaneGraphClient_CreateControlScheduledJob_Call struct {
	*mock.Call
}

// CreateControlScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateControlScheduledJobInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateControlScheduledJob(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateControlScheduledJob_Call {
	return &MockOpenlaneGraphClient_CreateControlScheduledJob_Call{Call: _e.mock.On("CreateControlScheduledJob",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateControlScheduledJob_Call) Run(run func(ctx context.Context, input openlaneclient.CreateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateControlScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateControlScheduledJobInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateControlScheduledJobInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlScheduledJob_Call) Return(createControlScheduledJob *openlaneclient.CreateControlScheduledJob, err error) *MockOpenlaneGraphClient_CreateControlScheduledJob_Call {
	_c.Call.Return(createControlScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlScheduledJob_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlScheduledJob, error)) *MockOpenlaneGraphClient_CreateControlScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateControlWithSubcontrols provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateControlWithSubcontrols(ctx context.Context, input openlaneclient.CreateControlWithSubcontrolsInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlWithSubcontrols, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControlWithSubcontrols")
	}

	var r0 *openlaneclient.CreateControlWithSubcontrols
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlWithSubcontrolsInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlWithSubcontrols, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateControlWithSubcontrolsInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateControlWithSubcontrols); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateControlWithSubcontrols)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateControlWithSubcontrolsInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControlWithSubcontrols'
type MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call struct {
	*mock.Call
}

// CreateControlWithSubcontrols is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateControlWithSubcontrolsInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateControlWithSubcontrols(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call {
	return &MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call{Call: _e.mock.On("CreateControlWithSubcontrols",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call) Run(run func(ctx context.Context, input openlaneclient.CreateControlWithSubcontrolsInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateControlWithSubcontrolsInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateControlWithSubcontrolsInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call) Return(createControlWithSubcontrols *openlaneclient.CreateControlWithSubcontrols, err error) *MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call {
	_c.Call.Return(createControlWithSubcontrols, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateControlWithSubcontrolsInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlWithSubcontrols, error)) *MockOpenlaneGraphClient_CreateControlWithSubcontrols_Call {
	_c.Call.Return(run)
	return _c
}

// CreateControlsByClone provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateControlsByClone(ctx context.Context, input openlaneclient.CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlsByClone, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControlsByClone")
	}

	var r0 *openlaneclient.CreateControlsByClone
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CloneControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlsByClone, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CloneControlInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateControlsByClone); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateControlsByClone)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CloneControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateControlsByClone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControlsByClone'
type MockOpenlaneGraphClient_CreateControlsByClone_Call struct {
	*mock.Call
}

// CreateControlsByClone is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CloneControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateControlsByClone(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateControlsByClone_Call {
	return &MockOpenlaneGraphClient_CreateControlsByClone_Call{Call: _e.mock.On("CreateControlsByClone",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateControlsByClone_Call) Run(run func(ctx context.Context, input openlaneclient.CloneControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateControlsByClone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CloneControlInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CloneControlInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlsByClone_Call) Return(createControlsByClone *openlaneclient.CreateControlsByClone, err error) *MockOpenlaneGraphClient_CreateControlsByClone_Call {
	_c.Call.Return(createControlsByClone, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlsByClone_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlsByClone, error)) *MockOpenlaneGraphClient_CreateControlsByClone_Call {
	_c.Call.Return(run)
	return _c
}

// CreateControlsByCloneReturnID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateControlsByCloneReturnID(ctx context.Context, input openlaneclient.CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlsByCloneReturnID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControlsByCloneReturnID")
	}

	var r0 *openlaneclient.CreateControlsByCloneReturnID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CloneControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlsByCloneReturnID, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CloneControlInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateControlsByCloneReturnID); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateControlsByCloneReturnID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CloneControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControlsByCloneReturnID'
type MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call struct {
	*mock.Call
}

// CreateControlsByCloneReturnID is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CloneControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateControlsByCloneReturnID(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call {
	return &MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call{Call: _e.mock.On("CreateControlsByCloneReturnID",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call) Run(run func(ctx context.Context, input openlaneclient.CloneControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CloneControlInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CloneControlInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call) Return(createControlsByCloneReturnID *openlaneclient.CreateControlsByCloneReturnID, err error) *MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call {
	_c.Call.Return(createControlsByCloneReturnID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateControlsByCloneReturnID, error)) *MockOpenlaneGraphClient_CreateControlsByCloneReturnID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateCustomDomain(ctx context.Context, input openlaneclient.CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateCustomDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomDomain")
	}

	var r0 *openlaneclient.CreateCustomDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateCustomDomainInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateCustomDomain, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateCustomDomainInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateCustomDomain); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateCustomDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateCustomDomainInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateCustomDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomDomain'
type MockOpenlaneGraphClient_CreateCustomDomain_Call struct {
	*mock.Call
}

// CreateCustomDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateCustomDomainInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateCustomDomain(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateCustomDomain_Call {
	return &MockOpenlaneGraphClient_CreateCustomDomain_Call{Call: _e.mock.On("CreateCustomDomain",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateCustomDomain_Call) Run(run func(ctx context.Context, input openlaneclient.CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateCustomDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateCustomDomainInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateCustomDomainInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateCustomDomain_Call) Return(createCustomDomain *openlaneclient.CreateCustomDomain, err error) *MockOpenlaneGraphClient_CreateCustomDomain_Call {
	_c.Call.Return(createCustomDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateCustomDomain_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateCustomDomain, error)) *MockOpenlaneGraphClient_CreateCustomDomain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDNSVerification provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateDNSVerification(ctx context.Context, input openlaneclient.CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateDNSVerification, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateDNSVerification")
	}

	var r0 *openlaneclient.CreateDNSVerification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateDNSVerificationInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateDNSVerification, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateDNSVerificationInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateDNSVerification); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateDNSVerification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateDNSVerificationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateDNSVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDNSVerification'
type MockOpenlaneGraphClient_CreateDNSVerification_Call struct {
	*mock.Call
}

// CreateDNSVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateDNSVerificationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateDNSVerification(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateDNSVerification_Call {
	return &MockOpenlaneGraphClient_CreateDNSVerification_Call{Call: _e.mock.On("CreateDNSVerification",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateDNSVerification_Call) Run(run func(ctx context.Context, input openlaneclient.CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateDNSVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateDNSVerificationInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateDNSVerificationInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateDNSVerification_Call) Return(createDNSVerification *openlaneclient.CreateDNSVerification, err error) *MockOpenlaneGraphClient_CreateDNSVerification_Call {
	_c.Call.Return(createDNSVerification, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateDNSVerification_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateDNSVerification, error)) *MockOpenlaneGraphClient_CreateDNSVerification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDocumentData provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateDocumentData(ctx context.Context, input openlaneclient.CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateDocumentData, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateDocumentData")
	}

	var r0 *openlaneclient.CreateDocumentData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateDocumentDataInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateDocumentData, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateDocumentDataInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateDocumentData); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateDocumentData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateDocumentDataInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateDocumentData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDocumentData'
type MockOpenlaneGraphClient_CreateDocumentData_Call struct {
	*mock.Call
}

// CreateDocumentData is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateDocumentDataInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateDocumentData(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateDocumentData_Call {
	return &MockOpenlaneGraphClient_CreateDocumentData_Call{Call: _e.mock.On("CreateDocumentData",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateDocumentData_Call) Run(run func(ctx context.Context, input openlaneclient.CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateDocumentData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateDocumentDataInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateDocumentDataInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateDocumentData_Call) Return(createDocumentData *openlaneclient.CreateDocumentData, err error) *MockOpenlaneGraphClient_CreateDocumentData_Call {
	_c.Call.Return(createDocumentData, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateDocumentData_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateDocumentData, error)) *MockOpenlaneGraphClient_CreateDocumentData_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEntity provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateEntity(ctx context.Context, input openlaneclient.CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEntity, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateEntity")
	}

	var r0 *openlaneclient.CreateEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEntityInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateEntity, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEntityInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateEntity); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateEntityInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEntity'
type MockOpenlaneGraphClient_CreateEntity_Call struct {
	*mock.Call
}

// CreateEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateEntityInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateEntity(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateEntity_Call {
	return &MockOpenlaneGraphClient_CreateEntity_Call{Call: _e.mock.On("CreateEntity",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateEntity_Call) Run(run func(ctx context.Context, input openlaneclient.CreateEntityInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateEntityInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateEntityInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEntity_Call) Return(createEntity *openlaneclient.CreateEntity, err error) *MockOpenlaneGraphClient_CreateEntity_Call {
	_c.Call.Return(createEntity, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEntity_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEntity, error)) *MockOpenlaneGraphClient_CreateEntity_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEntityType provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateEntityType(ctx context.Context, input openlaneclient.CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEntityType, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateEntityType")
	}

	var r0 *openlaneclient.CreateEntityType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEntityTypeInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateEntityType, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEntityTypeInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateEntityType); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateEntityType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateEntityTypeInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEntityType'
type MockOpenlaneGraphClient_CreateEntityType_Call struct {
	*mock.Call
}

// CreateEntityType is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateEntityTypeInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateEntityType(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateEntityType_Call {
	return &MockOpenlaneGraphClient_CreateEntityType_Call{Call: _e.mock.On("CreateEntityType",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateEntityType_Call) Run(run func(ctx context.Context, input openlaneclient.CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateEntityTypeInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateEntityTypeInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEntityType_Call) Return(createEntityType *openlaneclient.CreateEntityType, err error) *MockOpenlaneGraphClient_CreateEntityType_Call {
	_c.Call.Return(createEntityType, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEntityType_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEntityType, error)) *MockOpenlaneGraphClient_CreateEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvent provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateEvent(ctx context.Context, input openlaneclient.CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEvent, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 *openlaneclient.CreateEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEventInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateEvent, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEventInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateEvent); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateEventInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockOpenlaneGraphClient_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateEventInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateEvent(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateEvent_Call {
	return &MockOpenlaneGraphClient_CreateEvent_Call{Call: _e.mock.On("CreateEvent",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateEvent_Call) Run(run func(ctx context.Context, input openlaneclient.CreateEventInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateEventInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateEventInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEvent_Call) Return(createEvent *openlaneclient.CreateEvent, err error) *MockOpenlaneGraphClient_CreateEvent_Call {
	_c.Call.Return(createEvent, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEvent_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEvent, error)) *MockOpenlaneGraphClient_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvidence provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateEvidence(ctx context.Context, input openlaneclient.CreateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEvidence, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, evidenceFiles, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input, evidenceFiles)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateEvidence")
	}

	var r0 *openlaneclient.CreateEvidence
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEvidenceInput, []*graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateEvidence, error)); ok {
		return returnFunc(ctx, input, evidenceFiles, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateEvidenceInput, []*graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateEvidence); ok {
		r0 = returnFunc(ctx, input, evidenceFiles, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateEvidence)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateEvidenceInput, []*graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, evidenceFiles, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvidence'
type MockOpenlaneGraphClient_CreateEvidence_Call struct {
	*mock.Call
}

// CreateEvidence is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateEvidenceInput
//   - evidenceFiles []*graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateEvidence(ctx interface{}, input interface{}, evidenceFiles interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateEvidence_Call {
	return &MockOpenlaneGraphClient_CreateEvidence_Call{Call: _e.mock.On("CreateEvidence",
		append([]interface{}{ctx, input, evidenceFiles}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateEvidence_Call) Run(run func(ctx context.Context, input openlaneclient.CreateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateEvidenceInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateEvidenceInput)
		}
		var arg2 []*graphql.Upload
		if args[2] != nil {
			arg2 = args[2].([]*graphql.Upload)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEvidence_Call) Return(createEvidence *openlaneclient.CreateEvidence, err error) *MockOpenlaneGraphClient_CreateEvidence_Call {
	_c.Call.Return(createEvidence, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateEvidence_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateEvidence, error)) *MockOpenlaneGraphClient_CreateEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExport provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateExport(ctx context.Context, input openlaneclient.CreateExportInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateExport, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateExport")
	}

	var r0 *openlaneclient.CreateExport
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateExportInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateExport, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateExportInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateExport); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateExport)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateExportInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExport'
type MockOpenlaneGraphClient_CreateExport_Call struct {
	*mock.Call
}

// CreateExport is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateExportInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateExport(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateExport_Call {
	return &MockOpenlaneGraphClient_CreateExport_Call{Call: _e.mock.On("CreateExport",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateExport_Call) Run(run func(ctx context.Context, input openlaneclient.CreateExportInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateExportInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateExportInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateExport_Call) Return(createExport *openlaneclient.CreateExport, err error) *MockOpenlaneGraphClient_CreateExport_Call {
	_c.Call.Return(createExport, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateExport_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateExportInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateExport, error)) *MockOpenlaneGraphClient_CreateExport_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFullProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateFullProgram(ctx context.Context, input openlaneclient.CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateFullProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateFullProgram")
	}

	var r0 *openlaneclient.CreateFullProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateFullProgramInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateFullProgram, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateFullProgramInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateFullProgram); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateFullProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateFullProgramInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateFullProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFullProgram'
type MockOpenlaneGraphClient_CreateFullProgram_Call struct {
	*mock.Call
}

// CreateFullProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateFullProgramInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateFullProgram(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateFullProgram_Call {
	return &MockOpenlaneGraphClient_CreateFullProgram_Call{Call: _e.mock.On("CreateFullProgram",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateFullProgram_Call) Run(run func(ctx context.Context, input openlaneclient.CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateFullProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateFullProgramInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateFullProgramInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateFullProgram_Call) Return(createFullProgram *openlaneclient.CreateFullProgram, err error) *MockOpenlaneGraphClient_CreateFullProgram_Call {
	_c.Call.Return(createFullProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateFullProgram_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateFullProgram, error)) *MockOpenlaneGraphClient_CreateFullProgram_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFullProgramReturnIDs provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateFullProgramReturnIDs(ctx context.Context, input openlaneclient.CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateFullProgramReturnIDs, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateFullProgramReturnIDs")
	}

	var r0 *openlaneclient.CreateFullProgramReturnIDs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateFullProgramInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateFullProgramReturnIDs, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateFullProgramInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateFullProgramReturnIDs); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateFullProgramReturnIDs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateFullProgramInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFullProgramReturnIDs'
type MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call struct {
	*mock.Call
}

// CreateFullProgramReturnIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateFullProgramInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateFullProgramReturnIDs(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call {
	return &MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call{Call: _e.mock.On("CreateFullProgramReturnIDs",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call) Run(run func(ctx context.Context, input openlaneclient.CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateFullProgramInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateFullProgramInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call) Return(createFullProgramReturnIDs *openlaneclient.CreateFullProgramReturnIDs, err error) *MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call {
	_c.Call.Return(createFullProgramReturnIDs, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateFullProgramReturnIDs, error)) *MockOpenlaneGraphClient_CreateFullProgramReturnIDs_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateGroup(ctx context.Context, input openlaneclient.CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroup, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *openlaneclient.CreateGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroup, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateGroup); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateGroupInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockOpenlaneGraphClient_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateGroupInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateGroup(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateGroup_Call {
	return &MockOpenlaneGraphClient_CreateGroup_Call{Call: _e.mock.On("CreateGroup",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateGroup_Call) Run(run func(ctx context.Context, input openlaneclient.CreateGroupInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateGroupInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateGroupInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateGroup_Call) Return(createGroup *openlaneclient.CreateGroup, err error) *MockOpenlaneGraphClient_CreateGroup_Call {
	_c.Call.Return(createGroup, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateGroup_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroup, error)) *MockOpenlaneGraphClient_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupByClone provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateGroupByClone(ctx context.Context, groupInput openlaneclient.CreateGroupInput, inheritGroupPermissions *string, cloneGroupMembers *string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroupByClone, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, groupInput, inheritGroupPermissions, cloneGroupMembers, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, groupInput, inheritGroupPermissions, cloneGroupMembers)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupByClone")
	}

	var r0 *openlaneclient.CreateGroupByClone
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupInput, *string, *string, ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroupByClone, error)); ok {
		return returnFunc(ctx, groupInput, inheritGroupPermissions, cloneGroupMembers, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupInput, *string, *string, ...clientv2.RequestInterceptor) *openlaneclient.CreateGroupByClone); ok {
		r0 = returnFunc(ctx, groupInput, inheritGroupPermissions, cloneGroupMembers, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateGroupByClone)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateGroupInput, *string, *string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, groupInput, inheritGroupPermissions, cloneGroupMembers, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateGroupByClone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupByClone'
type MockOpenlaneGraphClient_CreateGroupByClone_Call struct {
	*mock.Call
}

// CreateGroupByClone is a helper method to define mock.On call
//   - ctx context.Context
//   - groupInput openlaneclient.CreateGroupInput
//   - inheritGroupPermissions *string
//   - cloneGroupMembers *string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateGroupByClone(ctx interface{}, groupInput interface{}, inheritGroupPermissions interface{}, cloneGroupMembers interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateGroupByClone_Call {
	return &MockOpenlaneGraphClient_CreateGroupByClone_Call{Call: _e.mock.On("CreateGroupByClone",
		append([]interface{}{ctx, groupInput, inheritGroupPermissions, cloneGroupMembers}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateGroupByClone_Call) Run(run func(ctx context.Context, groupInput openlaneclient.CreateGroupInput, inheritGroupPermissions *string, cloneGroupMembers *string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateGroupByClone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateGroupInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateGroupInput)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateGroupByClone_Call) Return(createGroupByClone *openlaneclient.CreateGroupByClone, err error) *MockOpenlaneGraphClient_CreateGroupByClone_Call {
	_c.Call.Return(createGroupByClone, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateGroupByClone_Call) RunAndReturn(run func(ctx context.Context, groupInput openlaneclient.CreateGroupInput, inheritGroupPermissions *string, cloneGroupMembers *string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroupByClone, error)) *MockOpenlaneGraphClient_CreateGroupByClone_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupWithMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateGroupWithMembers(ctx context.Context, groupInput openlaneclient.CreateGroupInput, members []*openlaneclient.GroupMembersInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroupWithMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, groupInput, members, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, groupInput, members)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupWithMembers")
	}

	var r0 *openlaneclient.CreateGroupWithMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupInput, []*openlaneclient.GroupMembersInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroupWithMembers, error)); ok {
		return returnFunc(ctx, groupInput, members, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateGroupInput, []*openlaneclient.GroupMembersInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateGroupWithMembers); ok {
		r0 = returnFunc(ctx, groupInput, members, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateGroupWithMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateGroupInput, []*openlaneclient.GroupMembersInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, groupInput, members, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateGroupWithMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupWithMembers'
type MockOpenlaneGraphClient_CreateGroupWithMembers_Call struct {
	*mock.Call
}

// CreateGroupWithMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupInput openlaneclient.CreateGroupInput
//   - members []*openlaneclient.GroupMembersInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateGroupWithMembers(ctx interface{}, groupInput interface{}, members interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateGroupWithMembers_Call {
	return &MockOpenlaneGraphClient_CreateGroupWithMembers_Call{Call: _e.mock.On("CreateGroupWithMembers",
		append([]interface{}{ctx, groupInput, members}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateGroupWithMembers_Call) Run(run func(ctx context.Context, groupInput openlaneclient.CreateGroupInput, members []*openlaneclient.GroupMembersInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateGroupWithMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateGroupInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateGroupInput)
		}
		var arg2 []*openlaneclient.GroupMembersInput
		if args[2] != nil {
			arg2 = args[2].([]*openlaneclient.GroupMembersInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateGroupWithMembers_Call) Return(createGroupWithMembers *openlaneclient.CreateGroupWithMembers, err error) *MockOpenlaneGraphClient_CreateGroupWithMembers_Call {
	_c.Call.Return(createGroupWithMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateGroupWithMembers_Call) RunAndReturn(run func(ctx context.Context, groupInput openlaneclient.CreateGroupInput, members []*openlaneclient.GroupMembersInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateGroupWithMembers, error)) *MockOpenlaneGraphClient_CreateGroupWithMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateHush provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateHush(ctx context.Context, input openlaneclient.CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateHush, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateHush")
	}

	var r0 *openlaneclient.CreateHush
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateHushInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateHush, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateHushInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateHush); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateHush)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateHushInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateHush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHush'
type MockOpenlaneGraphClient_CreateHush_Call struct {
	*mock.Call
}

// CreateHush is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateHushInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateHush(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateHush_Call {
	return &MockOpenlaneGraphClient_CreateHush_Call{Call: _e.mock.On("CreateHush",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateHush_Call) Run(run func(ctx context.Context, input openlaneclient.CreateHushInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateHush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateHushInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateHushInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateHush_Call) Return(createHush *openlaneclient.CreateHush, err error) *MockOpenlaneGraphClient_CreateHush_Call {
	_c.Call.Return(createHush, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateHush_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateHush, error)) *MockOpenlaneGraphClient_CreateHush_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIntegration provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateIntegration(ctx context.Context, input openlaneclient.CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateIntegration, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegration")
	}

	var r0 *openlaneclient.CreateIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateIntegrationInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateIntegration, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateIntegrationInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateIntegration); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateIntegrationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIntegration'
type MockOpenlaneGraphClient_CreateIntegration_Call struct {
	*mock.Call
}

// CreateIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateIntegrationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateIntegration(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateIntegration_Call {
	return &MockOpenlaneGraphClient_CreateIntegration_Call{Call: _e.mock.On("CreateIntegration",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateIntegration_Call) Run(run func(ctx context.Context, input openlaneclient.CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateIntegrationInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateIntegrationInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateIntegration_Call) Return(createIntegration *openlaneclient.CreateIntegration, err error) *MockOpenlaneGraphClient_CreateIntegration_Call {
	_c.Call.Return(createIntegration, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateIntegration_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateIntegration, error)) *MockOpenlaneGraphClient_CreateIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInternalPolicy provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateInternalPolicy(ctx context.Context, input openlaneclient.CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateInternalPolicy, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateInternalPolicy")
	}

	var r0 *openlaneclient.CreateInternalPolicy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateInternalPolicyInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateInternalPolicy, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateInternalPolicyInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateInternalPolicy); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateInternalPolicy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateInternalPolicyInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateInternalPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInternalPolicy'
type MockOpenlaneGraphClient_CreateInternalPolicy_Call struct {
	*mock.Call
}

// CreateInternalPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateInternalPolicyInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateInternalPolicy(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateInternalPolicy_Call {
	return &MockOpenlaneGraphClient_CreateInternalPolicy_Call{Call: _e.mock.On("CreateInternalPolicy",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateInternalPolicy_Call) Run(run func(ctx context.Context, input openlaneclient.CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateInternalPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateInternalPolicyInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateInternalPolicyInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateInternalPolicy_Call) Return(createInternalPolicy *openlaneclient.CreateInternalPolicy, err error) *MockOpenlaneGraphClient_CreateInternalPolicy_Call {
	_c.Call.Return(createInternalPolicy, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateInternalPolicy_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateInternalPolicy, error)) *MockOpenlaneGraphClient_CreateInternalPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInvite provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateInvite(ctx context.Context, input openlaneclient.CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateInvite, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateInvite")
	}

	var r0 *openlaneclient.CreateInvite
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateInviteInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateInvite, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateInviteInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateInvite); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateInvite)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateInviteInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvite'
type MockOpenlaneGraphClient_CreateInvite_Call struct {
	*mock.Call
}

// CreateInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateInviteInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateInvite(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateInvite_Call {
	return &MockOpenlaneGraphClient_CreateInvite_Call{Call: _e.mock.On("CreateInvite",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateInvite_Call) Run(run func(ctx context.Context, input openlaneclient.CreateInviteInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateInviteInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateInviteInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateInvite_Call) Return(createInvite *openlaneclient.CreateInvite, err error) *MockOpenlaneGraphClient_CreateInvite_Call {
	_c.Call.Return(createInvite, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateInvite_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateInvite, error)) *MockOpenlaneGraphClient_CreateInvite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJobRunnerRegistrationToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateJobRunnerRegistrationToken(ctx context.Context, input openlaneclient.CreateJobRunnerRegistrationTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateJobRunnerRegistrationToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateJobRunnerRegistrationToken")
	}

	var r0 *openlaneclient.CreateJobRunnerRegistrationToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateJobRunnerRegistrationTokenInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateJobRunnerRegistrationToken, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateJobRunnerRegistrationTokenInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateJobRunnerRegistrationToken); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateJobRunnerRegistrationToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateJobRunnerRegistrationTokenInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJobRunnerRegistrationToken'
type MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call struct {
	*mock.Call
}

// CreateJobRunnerRegistrationToken is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateJobRunnerRegistrationTokenInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateJobRunnerRegistrationToken(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call {
	return &MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call{Call: _e.mock.On("CreateJobRunnerRegistrationToken",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call) Run(run func(ctx context.Context, input openlaneclient.CreateJobRunnerRegistrationTokenInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateJobRunnerRegistrationTokenInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateJobRunnerRegistrationTokenInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call) Return(createJobRunnerRegistrationToken *openlaneclient.CreateJobRunnerRegistrationToken, err error) *MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call {
	_c.Call.Return(createJobRunnerRegistrationToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateJobRunnerRegistrationTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateJobRunnerRegistrationToken, error)) *MockOpenlaneGraphClient_CreateJobRunnerRegistrationToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJobRunnerToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateJobRunnerToken(ctx context.Context, input openlaneclient.CreateJobRunnerTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateJobRunnerToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateJobRunnerToken")
	}

	var r0 *openlaneclient.CreateJobRunnerToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateJobRunnerTokenInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateJobRunnerToken, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateJobRunnerTokenInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateJobRunnerToken); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateJobRunnerToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateJobRunnerTokenInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateJobRunnerToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJobRunnerToken'
type MockOpenlaneGraphClient_CreateJobRunnerToken_Call struct {
	*mock.Call
}

// CreateJobRunnerToken is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateJobRunnerTokenInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateJobRunnerToken(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateJobRunnerToken_Call {
	return &MockOpenlaneGraphClient_CreateJobRunnerToken_Call{Call: _e.mock.On("CreateJobRunnerToken",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateJobRunnerToken_Call) Run(run func(ctx context.Context, input openlaneclient.CreateJobRunnerTokenInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateJobRunnerToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateJobRunnerTokenInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateJobRunnerTokenInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateJobRunnerToken_Call) Return(createJobRunnerToken *openlaneclient.CreateJobRunnerToken, err error) *MockOpenlaneGraphClient_CreateJobRunnerToken_Call {
	_c.Call.Return(createJobRunnerToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateJobRunnerToken_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateJobRunnerTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateJobRunnerToken, error)) *MockOpenlaneGraphClient_CreateJobRunnerToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMappableDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateMappableDomain(ctx context.Context, input openlaneclient.CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateMappableDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateMappableDomain")
	}

	var r0 *openlaneclient.CreateMappableDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateMappableDomainInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateMappableDomain, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateMappableDomainInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateMappableDomain); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateMappableDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateMappableDomainInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateMappableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMappableDomain'
type MockOpenlaneGraphClient_CreateMappableDomain_Call struct {
	*mock.Call
}

// CreateMappableDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateMappableDomainInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateMappableDomain(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateMappableDomain_Call {
	return &MockOpenlaneGraphClient_CreateMappableDomain_Call{Call: _e.mock.On("CreateMappableDomain",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateMappableDomain_Call) Run(run func(ctx context.Context, input openlaneclient.CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateMappableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateMappableDomainInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateMappableDomainInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateMappableDomain_Call) Return(createMappableDomain *openlaneclient.CreateMappableDomain, err error) *MockOpenlaneGraphClient_CreateMappableDomain_Call {
	_c.Call.Return(createMappableDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateMappableDomain_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateMappableDomain, error)) *MockOpenlaneGraphClient_CreateMappableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMappedControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateMappedControl(ctx context.Context, input openlaneclient.CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateMappedControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateMappedControl")
	}

	var r0 *openlaneclient.CreateMappedControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateMappedControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateMappedControl, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateMappedControlInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateMappedControl); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateMappedControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateMappedControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateMappedControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMappedControl'
type MockOpenlaneGraphClient_CreateMappedControl_Call struct {
	*mock.Call
}

// CreateMappedControl is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateMappedControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateMappedControl(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateMappedControl_Call {
	return &MockOpenlaneGraphClient_CreateMappedControl_Call{Call: _e.mock.On("CreateMappedControl",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateMappedControl_Call) Run(run func(ctx context.Context, input openlaneclient.CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateMappedControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateMappedControlInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateMappedControlInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateMappedControl_Call) Return(createMappedControl *openlaneclient.CreateMappedControl, err error) *MockOpenlaneGraphClient_CreateMappedControl_Call {
	_c.Call.Return(createMappedControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateMappedControl_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateMappedControl, error)) *MockOpenlaneGraphClient_CreateMappedControl_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNarrative provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateNarrative(ctx context.Context, input openlaneclient.CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateNarrative, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateNarrative")
	}

	var r0 *openlaneclient.CreateNarrative
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateNarrativeInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateNarrative, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateNarrativeInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateNarrative); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateNarrative)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateNarrativeInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateNarrative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNarrative'
type MockOpenlaneGraphClient_CreateNarrative_Call struct {
	*mock.Call
}

// CreateNarrative is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateNarrativeInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateNarrative(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateNarrative_Call {
	return &MockOpenlaneGraphClient_CreateNarrative_Call{Call: _e.mock.On("CreateNarrative",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateNarrative_Call) Run(run func(ctx context.Context, input openlaneclient.CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateNarrative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateNarrativeInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateNarrativeInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateNarrative_Call) Return(createNarrative *openlaneclient.CreateNarrative, err error) *MockOpenlaneGraphClient_CreateNarrative_Call {
	_c.Call.Return(createNarrative, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateNarrative_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateNarrative, error)) *MockOpenlaneGraphClient_CreateNarrative_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOnboarding provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateOnboarding(ctx context.Context, input openlaneclient.CreateOnboardingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateOnboarding, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateOnboarding")
	}

	var r0 *openlaneclient.CreateOnboarding
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOnboardingInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateOnboarding, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOnboardingInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateOnboarding); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateOnboarding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateOnboardingInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateOnboarding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOnboarding'
type MockOpenlaneGraphClient_CreateOnboarding_Call struct {
	*mock.Call
}

// CreateOnboarding is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateOnboardingInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateOnboarding(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateOnboarding_Call {
	return &MockOpenlaneGraphClient_CreateOnboarding_Call{Call: _e.mock.On("CreateOnboarding",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateOnboarding_Call) Run(run func(ctx context.Context, input openlaneclient.CreateOnboardingInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateOnboarding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateOnboardingInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateOnboardingInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateOnboarding_Call) Return(createOnboarding *openlaneclient.CreateOnboarding, err error) *MockOpenlaneGraphClient_CreateOnboarding_Call {
	_c.Call.Return(createOnboarding, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateOnboarding_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateOnboardingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateOnboarding, error)) *MockOpenlaneGraphClient_CreateOnboarding_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganization provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateOrganization(ctx context.Context, input openlaneclient.CreateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateOrganization, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, avatarFile, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input, avatarFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *openlaneclient.CreateOrganization
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOrganizationInput, *graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateOrganization, error)); ok {
		return returnFunc(ctx, input, avatarFile, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOrganizationInput, *graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateOrganization); ok {
		r0 = returnFunc(ctx, input, avatarFile, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateOrganization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateOrganizationInput, *graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, avatarFile, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockOpenlaneGraphClient_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateOrganizationInput
//   - avatarFile *graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateOrganization(ctx interface{}, input interface{}, avatarFile interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateOrganization_Call {
	return &MockOpenlaneGraphClient_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization",
		append([]interface{}{ctx, input, avatarFile}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateOrganization_Call) Run(run func(ctx context.Context, input openlaneclient.CreateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateOrganizationInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateOrganizationInput)
		}
		var arg2 *graphql.Upload
		if args[2] != nil {
			arg2 = args[2].(*graphql.Upload)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateOrganization_Call) Return(createOrganization *openlaneclient.CreateOrganization, err error) *MockOpenlaneGraphClient_CreateOrganization_Call {
	_c.Call.Return(createOrganization, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateOrganization_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateOrganization, error)) *MockOpenlaneGraphClient_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationWithMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateOrganizationWithMembers(ctx context.Context, organizationInput openlaneclient.CreateOrganizationInput, members []*openlaneclient.OrgMembersInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateOrganizationWithMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, organizationInput, members, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, organizationInput, members)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationWithMembers")
	}

	var r0 *openlaneclient.CreateOrganizationWithMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOrganizationInput, []*openlaneclient.OrgMembersInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateOrganizationWithMembers, error)); ok {
		return returnFunc(ctx, organizationInput, members, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateOrganizationInput, []*openlaneclient.OrgMembersInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateOrganizationWithMembers); ok {
		r0 = returnFunc(ctx, organizationInput, members, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateOrganizationWithMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateOrganizationInput, []*openlaneclient.OrgMembersInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, organizationInput, members, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationWithMembers'
type MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call struct {
	*mock.Call
}

// CreateOrganizationWithMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationInput openlaneclient.CreateOrganizationInput
//   - members []*openlaneclient.OrgMembersInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateOrganizationWithMembers(ctx interface{}, organizationInput interface{}, members interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call {
	return &MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call{Call: _e.mock.On("CreateOrganizationWithMembers",
		append([]interface{}{ctx, organizationInput, members}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call) Run(run func(ctx context.Context, organizationInput openlaneclient.CreateOrganizationInput, members []*openlaneclient.OrgMembersInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateOrganizationInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateOrganizationInput)
		}
		var arg2 []*openlaneclient.OrgMembersInput
		if args[2] != nil {
			arg2 = args[2].([]*openlaneclient.OrgMembersInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call) Return(createOrganizationWithMembers *openlaneclient.CreateOrganizationWithMembers, err error) *MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call {
	_c.Call.Return(createOrganizationWithMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call) RunAndReturn(run func(ctx context.Context, organizationInput openlaneclient.CreateOrganizationInput, members []*openlaneclient.OrgMembersInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateOrganizationWithMembers, error)) *MockOpenlaneGraphClient_CreateOrganizationWithMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePersonalAccessToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreatePersonalAccessToken(ctx context.Context, input openlaneclient.CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreatePersonalAccessToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreatePersonalAccessToken")
	}

	var r0 *openlaneclient.CreatePersonalAccessToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreatePersonalAccessTokenInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreatePersonalAccessToken, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreatePersonalAccessTokenInput, ...clientv2.RequestInterceptor) *openlaneclient.CreatePersonalAccessToken); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreatePersonalAccessToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreatePersonalAccessTokenInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreatePersonalAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePersonalAccessToken'
type MockOpenlaneGraphClient_CreatePersonalAccessToken_Call struct {
	*mock.Call
}

// CreatePersonalAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreatePersonalAccessTokenInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreatePersonalAccessToken(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreatePersonalAccessToken_Call {
	return &MockOpenlaneGraphClient_CreatePersonalAccessToken_Call{Call: _e.mock.On("CreatePersonalAccessToken",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreatePersonalAccessToken_Call) Run(run func(ctx context.Context, input openlaneclient.CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreatePersonalAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreatePersonalAccessTokenInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreatePersonalAccessTokenInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreatePersonalAccessToken_Call) Return(createPersonalAccessToken *openlaneclient.CreatePersonalAccessToken, err error) *MockOpenlaneGraphClient_CreatePersonalAccessToken_Call {
	_c.Call.Return(createPersonalAccessToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreatePersonalAccessToken_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreatePersonalAccessToken, error)) *MockOpenlaneGraphClient_CreatePersonalAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProcedure provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateProcedure(ctx context.Context, input openlaneclient.CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProcedure, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateProcedure")
	}

	var r0 *openlaneclient.CreateProcedure
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProcedureInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateProcedure, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProcedureInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateProcedure); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateProcedure)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateProcedureInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateProcedure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProcedure'
type MockOpenlaneGraphClient_CreateProcedure_Call struct {
	*mock.Call
}

// CreateProcedure is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateProcedureInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateProcedure(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateProcedure_Call {
	return &MockOpenlaneGraphClient_CreateProcedure_Call{Call: _e.mock.On("CreateProcedure",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateProcedure_Call) Run(run func(ctx context.Context, input openlaneclient.CreateProcedureInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateProcedure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateProcedureInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateProcedureInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProcedure_Call) Return(createProcedure *openlaneclient.CreateProcedure, err error) *MockOpenlaneGraphClient_CreateProcedure_Call {
	_c.Call.Return(createProcedure, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProcedure_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProcedure, error)) *MockOpenlaneGraphClient_CreateProcedure_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateProgram(ctx context.Context, input openlaneclient.CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateProgram")
	}

	var r0 *openlaneclient.CreateProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgram, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateProgram); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateProgramInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProgram'
type MockOpenlaneGraphClient_CreateProgram_Call struct {
	*mock.Call
}

// CreateProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateProgramInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateProgram(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateProgram_Call {
	return &MockOpenlaneGraphClient_CreateProgram_Call{Call: _e.mock.On("CreateProgram",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateProgram_Call) Run(run func(ctx context.Context, input openlaneclient.CreateProgramInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateProgramInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateProgramInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProgram_Call) Return(createProgram *openlaneclient.CreateProgram, err error) *MockOpenlaneGraphClient_CreateProgram_Call {
	_c.Call.Return(createProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProgram_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgram, error)) *MockOpenlaneGraphClient_CreateProgram_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProgramMembership provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateProgramMembership(ctx context.Context, input openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgramMembership, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateProgramMembership")
	}

	var r0 *openlaneclient.CreateProgramMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgramMembership, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateProgramMembership); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateProgramMembership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateProgramMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateProgramMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProgramMembership'
type MockOpenlaneGraphClient_CreateProgramMembership_Call struct {
	*mock.Call
}

// CreateProgramMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateProgramMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateProgramMembership(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateProgramMembership_Call {
	return &MockOpenlaneGraphClient_CreateProgramMembership_Call{Call: _e.mock.On("CreateProgramMembership",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateProgramMembership_Call) Run(run func(ctx context.Context, input openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateProgramMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateProgramMembershipInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateProgramMembershipInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProgramMembership_Call) Return(createProgramMembership *openlaneclient.CreateProgramMembership, err error) *MockOpenlaneGraphClient_CreateProgramMembership_Call {
	_c.Call.Return(createProgramMembership, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProgramMembership_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgramMembership, error)) *MockOpenlaneGraphClient_CreateProgramMembership_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProgramWithMembers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateProgramWithMembers(ctx context.Context, input openlaneclient.CreateProgramWithMembersInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgramWithMembers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateProgramWithMembers")
	}

	var r0 *openlaneclient.CreateProgramWithMembers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramWithMembersInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgramWithMembers, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateProgramWithMembersInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateProgramWithMembers); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateProgramWithMembers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateProgramWithMembersInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateProgramWithMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProgramWithMembers'
type MockOpenlaneGraphClient_CreateProgramWithMembers_Call struct {
	*mock.Call
}

// CreateProgramWithMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateProgramWithMembersInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateProgramWithMembers(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateProgramWithMembers_Call {
	return &MockOpenlaneGraphClient_CreateProgramWithMembers_Call{Call: _e.mock.On("CreateProgramWithMembers",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateProgramWithMembers_Call) Run(run func(ctx context.Context, input openlaneclient.CreateProgramWithMembersInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateProgramWithMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateProgramWithMembersInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateProgramWithMembersInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProgramWithMembers_Call) Return(createProgramWithMembers *openlaneclient.CreateProgramWithMembers, err error) *MockOpenlaneGraphClient_CreateProgramWithMembers_Call {
	_c.Call.Return(createProgramWithMembers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateProgramWithMembers_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateProgramWithMembersInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateProgramWithMembers, error)) *MockOpenlaneGraphClient_CreateProgramWithMembers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRisk provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateRisk(ctx context.Context, input openlaneclient.CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateRisk, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateRisk")
	}

	var r0 *openlaneclient.CreateRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateRiskInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateRisk, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateRiskInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateRisk); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateRiskInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRisk'
type MockOpenlaneGraphClient_CreateRisk_Call struct {
	*mock.Call
}

// CreateRisk is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateRiskInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateRisk(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateRisk_Call {
	return &MockOpenlaneGraphClient_CreateRisk_Call{Call: _e.mock.On("CreateRisk",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateRisk_Call) Run(run func(ctx context.Context, input openlaneclient.CreateRiskInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateRiskInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateRiskInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateRisk_Call) Return(createRisk *openlaneclient.CreateRisk, err error) *MockOpenlaneGraphClient_CreateRisk_Call {
	_c.Call.Return(createRisk, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateRisk_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateRisk, error)) *MockOpenlaneGraphClient_CreateRisk_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateScan(ctx context.Context, input openlaneclient.CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateScan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateScan")
	}

	var r0 *openlaneclient.CreateScan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateScanInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateScan, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateScanInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateScan); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateScan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateScanInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScan'
type MockOpenlaneGraphClient_CreateScan_Call struct {
	*mock.Call
}

// CreateScan is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateScanInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateScan(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateScan_Call {
	return &MockOpenlaneGraphClient_CreateScan_Call{Call: _e.mock.On("CreateScan",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateScan_Call) Run(run func(ctx context.Context, input openlaneclient.CreateScanInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateScanInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateScanInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateScan_Call) Return(createScan *openlaneclient.CreateScan, err error) *MockOpenlaneGraphClient_CreateScan_Call {
	_c.Call.Return(createScan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateScan_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateScan, error)) *MockOpenlaneGraphClient_CreateScan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateScheduledJob(ctx context.Context, input openlaneclient.CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduledJob")
	}

	var r0 *openlaneclient.CreateScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateScheduledJobInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateScheduledJob, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateScheduledJobInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateScheduledJob); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateScheduledJobInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScheduledJob'
type MockOpenlaneGraphClient_CreateScheduledJob_Call struct {
	*mock.Call
}

// CreateScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateScheduledJobInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateScheduledJob(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateScheduledJob_Call {
	return &MockOpenlaneGraphClient_CreateScheduledJob_Call{Call: _e.mock.On("CreateScheduledJob",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateScheduledJob_Call) Run(run func(ctx context.Context, input openlaneclient.CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateScheduledJobInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateScheduledJobInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateScheduledJob_Call) Return(createScheduledJob *openlaneclient.CreateScheduledJob, err error) *MockOpenlaneGraphClient_CreateScheduledJob_Call {
	_c.Call.Return(createScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateScheduledJob_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateScheduledJob, error)) *MockOpenlaneGraphClient_CreateScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStandard provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateStandard(ctx context.Context, input openlaneclient.CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateStandard, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateStandard")
	}

	var r0 *openlaneclient.CreateStandard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateStandardInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateStandard, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateStandardInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateStandard); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateStandard)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateStandardInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateStandard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStandard'
type MockOpenlaneGraphClient_CreateStandard_Call struct {
	*mock.Call
}

// CreateStandard is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateStandardInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateStandard(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateStandard_Call {
	return &MockOpenlaneGraphClient_CreateStandard_Call{Call: _e.mock.On("CreateStandard",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateStandard_Call) Run(run func(ctx context.Context, input openlaneclient.CreateStandardInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateStandard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateStandardInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateStandardInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateStandard_Call) Return(createStandard *openlaneclient.CreateStandard, err error) *MockOpenlaneGraphClient_CreateStandard_Call {
	_c.Call.Return(createStandard, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateStandard_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateStandard, error)) *MockOpenlaneGraphClient_CreateStandard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubcontrol provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateSubcontrol(ctx context.Context, input openlaneclient.CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubcontrol, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSubcontrol")
	}

	var r0 *openlaneclient.CreateSubcontrol
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateSubcontrolInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubcontrol, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateSubcontrolInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateSubcontrol); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateSubcontrol)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateSubcontrolInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateSubcontrol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubcontrol'
type MockOpenlaneGraphClient_CreateSubcontrol_Call struct {
	*mock.Call
}

// CreateSubcontrol is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateSubcontrolInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateSubcontrol(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateSubcontrol_Call {
	return &MockOpenlaneGraphClient_CreateSubcontrol_Call{Call: _e.mock.On("CreateSubcontrol",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateSubcontrol_Call) Run(run func(ctx context.Context, input openlaneclient.CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateSubcontrol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateSubcontrolInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateSubcontrolInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateSubcontrol_Call) Return(createSubcontrol *openlaneclient.CreateSubcontrol, err error) *MockOpenlaneGraphClient_CreateSubcontrol_Call {
	_c.Call.Return(createSubcontrol, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateSubcontrol_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubcontrol, error)) *MockOpenlaneGraphClient_CreateSubcontrol_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateSubprocessor(ctx context.Context, input openlaneclient.CreateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, logoFile, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input, logoFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSubprocessor")
	}

	var r0 *openlaneclient.CreateSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateSubprocessorInput, *graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubprocessor, error)); ok {
		return returnFunc(ctx, input, logoFile, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateSubprocessorInput, *graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateSubprocessor); ok {
		r0 = returnFunc(ctx, input, logoFile, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateSubprocessorInput, *graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, logoFile, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubprocessor'
type MockOpenlaneGraphClient_CreateSubprocessor_Call struct {
	*mock.Call
}

// CreateSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateSubprocessorInput
//   - logoFile *graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateSubprocessor(ctx interface{}, input interface{}, logoFile interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateSubprocessor_Call {
	return &MockOpenlaneGraphClient_CreateSubprocessor_Call{Call: _e.mock.On("CreateSubprocessor",
		append([]interface{}{ctx, input, logoFile}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateSubprocessor_Call) Run(run func(ctx context.Context, input openlaneclient.CreateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateSubprocessorInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateSubprocessorInput)
		}
		var arg2 *graphql.Upload
		if args[2] != nil {
			arg2 = args[2].(*graphql.Upload)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateSubprocessor_Call) Return(createSubprocessor *openlaneclient.CreateSubprocessor, err error) *MockOpenlaneGraphClient_CreateSubprocessor_Call {
	_c.Call.Return(createSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateSubprocessor_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubprocessor, error)) *MockOpenlaneGraphClient_CreateSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscriber provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateSubscriber(ctx context.Context, input openlaneclient.CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubscriber, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriber")
	}

	var r0 *openlaneclient.CreateSubscriber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateSubscriberInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubscriber, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateSubscriberInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateSubscriber); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateSubscriber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateSubscriberInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscriber'
type MockOpenlaneGraphClient_CreateSubscriber_Call struct {
	*mock.Call
}

// CreateSubscriber is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateSubscriberInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateSubscriber(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateSubscriber_Call {
	return &MockOpenlaneGraphClient_CreateSubscriber_Call{Call: _e.mock.On("CreateSubscriber",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateSubscriber_Call) Run(run func(ctx context.Context, input openlaneclient.CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateSubscriberInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateSubscriberInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateSubscriber_Call) Return(createSubscriber *openlaneclient.CreateSubscriber, err error) *MockOpenlaneGraphClient_CreateSubscriber_Call {
	_c.Call.Return(createSubscriber, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateSubscriber_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateSubscriber, error)) *MockOpenlaneGraphClient_CreateSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTFASetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateTFASetting(ctx context.Context, input openlaneclient.CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTFASetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTFASetting")
	}

	var r0 *openlaneclient.CreateTFASetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTFASettingInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateTFASetting, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTFASettingInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateTFASetting); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateTFASetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateTFASettingInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateTFASetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTFASetting'
type MockOpenlaneGraphClient_CreateTFASetting_Call struct {
	*mock.Call
}

// CreateTFASetting is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateTFASettingInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateTFASetting(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateTFASetting_Call {
	return &MockOpenlaneGraphClient_CreateTFASetting_Call{Call: _e.mock.On("CreateTFASetting",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateTFASetting_Call) Run(run func(ctx context.Context, input openlaneclient.CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateTFASetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateTFASettingInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateTFASettingInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTFASetting_Call) Return(createTFASetting *openlaneclient.CreateTFASetting, err error) *MockOpenlaneGraphClient_CreateTFASetting_Call {
	_c.Call.Return(createTFASetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTFASetting_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTFASetting, error)) *MockOpenlaneGraphClient_CreateTFASetting_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTask provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateTask(ctx context.Context, input openlaneclient.CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTask, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *openlaneclient.CreateTask
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTaskInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateTask, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTaskInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateTask); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateTask)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateTaskInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockOpenlaneGraphClient_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateTaskInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateTask(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateTask_Call {
	return &MockOpenlaneGraphClient_CreateTask_Call{Call: _e.mock.On("CreateTask",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateTask_Call) Run(run func(ctx context.Context, input openlaneclient.CreateTaskInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateTaskInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateTaskInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTask_Call) Return(createTask *openlaneclient.CreateTask, err error) *MockOpenlaneGraphClient_CreateTask_Call {
	_c.Call.Return(createTask, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTask_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTask, error)) *MockOpenlaneGraphClient_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplate provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateTemplate(ctx context.Context, input openlaneclient.CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTemplate, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 *openlaneclient.CreateTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTemplateInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateTemplate, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTemplateInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateTemplate); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateTemplateInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type MockOpenlaneGraphClient_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateTemplateInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateTemplate(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateTemplate_Call {
	return &MockOpenlaneGraphClient_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateTemplate_Call) Run(run func(ctx context.Context, input openlaneclient.CreateTemplateInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateTemplateInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateTemplateInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTemplate_Call) Return(createTemplate *openlaneclient.CreateTemplate, err error) *MockOpenlaneGraphClient_CreateTemplate_Call {
	_c.Call.Return(createTemplate, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTemplate_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTemplate, error)) *MockOpenlaneGraphClient_CreateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrustCenter provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateTrustCenter(ctx context.Context, input openlaneclient.CreateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenter, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustCenter")
	}

	var r0 *openlaneclient.CreateTrustCenter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenter, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateTrustCenter); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateTrustCenter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateTrustCenterInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateTrustCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrustCenter'
type MockOpenlaneGraphClient_CreateTrustCenter_Call struct {
	*mock.Call
}

// CreateTrustCenter is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateTrustCenterInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateTrustCenter(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateTrustCenter_Call {
	return &MockOpenlaneGraphClient_CreateTrustCenter_Call{Call: _e.mock.On("CreateTrustCenter",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenter_Call) Run(run func(ctx context.Context, input openlaneclient.CreateTrustCenterInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateTrustCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateTrustCenterInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateTrustCenterInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenter_Call) Return(createTrustCenter *openlaneclient.CreateTrustCenter, err error) *MockOpenlaneGraphClient_CreateTrustCenter_Call {
	_c.Call.Return(createTrustCenter, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenter_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenter, error)) *MockOpenlaneGraphClient_CreateTrustCenter_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrustCenterCompliance provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateTrustCenterCompliance(ctx context.Context, input openlaneclient.CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterCompliance, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustCenterCompliance")
	}

	var r0 *openlaneclient.CreateTrustCenterCompliance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterCompliance, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateTrustCenterCompliance); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateTrustCenterCompliance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrustCenterCompliance'
type MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call struct {
	*mock.Call
}

// CreateTrustCenterCompliance is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateTrustCenterComplianceInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateTrustCenterCompliance(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call {
	return &MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call{Call: _e.mock.On("CreateTrustCenterCompliance",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call) Run(run func(ctx context.Context, input openlaneclient.CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateTrustCenterComplianceInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateTrustCenterComplianceInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call) Return(createTrustCenterCompliance *openlaneclient.CreateTrustCenterCompliance, err error) *MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call {
	_c.Call.Return(createTrustCenterCompliance, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterCompliance, error)) *MockOpenlaneGraphClient_CreateTrustCenterCompliance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrustCenterSetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateTrustCenterSetting(ctx context.Context, input openlaneclient.CreateTrustCenterSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterSetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustCenterSetting")
	}

	var r0 *openlaneclient.CreateTrustCenterSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterSettingInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterSetting, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterSettingInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateTrustCenterSetting); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateTrustCenterSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateTrustCenterSettingInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateTrustCenterSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrustCenterSetting'
type MockOpenlaneGraphClient_CreateTrustCenterSetting_Call struct {
	*mock.Call
}

// CreateTrustCenterSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateTrustCenterSettingInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateTrustCenterSetting(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateTrustCenterSetting_Call {
	return &MockOpenlaneGraphClient_CreateTrustCenterSetting_Call{Call: _e.mock.On("CreateTrustCenterSetting",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterSetting_Call) Run(run func(ctx context.Context, input openlaneclient.CreateTrustCenterSettingInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateTrustCenterSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateTrustCenterSettingInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateTrustCenterSettingInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterSetting_Call) Return(createTrustCenterSetting *openlaneclient.CreateTrustCenterSetting, err error) *MockOpenlaneGraphClient_CreateTrustCenterSetting_Call {
	_c.Call.Return(createTrustCenterSetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterSetting_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateTrustCenterSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterSetting, error)) *MockOpenlaneGraphClient_CreateTrustCenterSetting_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrustCenterSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateTrustCenterSubprocessor(ctx context.Context, input openlaneclient.CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustCenterSubprocessor")
	}

	var r0 *openlaneclient.CreateTrustCenterSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterSubprocessor, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) *openlaneclient.CreateTrustCenterSubprocessor); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateTrustCenterSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrustCenterSubprocessor'
type MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call struct {
	*mock.Call
}

// CreateTrustCenterSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateTrustCenterSubprocessorInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateTrustCenterSubprocessor(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call {
	return &MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call{Call: _e.mock.On("CreateTrustCenterSubprocessor",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call) Run(run func(ctx context.Context, input openlaneclient.CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateTrustCenterSubprocessorInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateTrustCenterSubprocessorInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call) Return(createTrustCenterSubprocessor *openlaneclient.CreateTrustCenterSubprocessor, err error) *MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call {
	_c.Call.Return(createTrustCenterSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateTrustCenterSubprocessor, error)) *MockOpenlaneGraphClient_CreateTrustCenterSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) CreateUser(ctx context.Context, input openlaneclient.CreateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateUser, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, avatarFile, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input, avatarFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *openlaneclient.CreateUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateUserInput, *graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.CreateUser, error)); ok {
		return returnFunc(ctx, input, avatarFile, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.CreateUserInput, *graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.CreateUser); ok {
		r0 = returnFunc(ctx, input, avatarFile, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.CreateUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.CreateUserInput, *graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, avatarFile, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockOpenlaneGraphClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.CreateUserInput
//   - avatarFile *graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) CreateUser(ctx interface{}, input interface{}, avatarFile interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_CreateUser_Call {
	return &MockOpenlaneGraphClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, input, avatarFile}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_CreateUser_Call) Run(run func(ctx context.Context, input openlaneclient.CreateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.CreateUserInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.CreateUserInput)
		}
		var arg2 *graphql.Upload
		if args[2] != nil {
			arg2 = args[2].(*graphql.Upload)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateUser_Call) Return(createUser *openlaneclient.CreateUser, err error) *MockOpenlaneGraphClient_CreateUser_Call {
	_c.Call.Return(createUser, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_CreateUser_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.CreateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.CreateUser, error)) *MockOpenlaneGraphClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAPIToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteAPIToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteAPITokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteAPITokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteAPIToken")
	}

	var r0 *openlaneclient.DeleteAPIToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteAPIToken, error)); ok {
		return returnFunc(ctx, deleteAPITokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteAPIToken); ok {
		r0 = returnFunc(ctx, deleteAPITokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteAPIToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteAPITokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteAPIToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAPIToken'
type MockOpenlaneGraphClient_DeleteAPIToken_Call struct {
	*mock.Call
}

// DeleteAPIToken is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteAPITokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteAPIToken(ctx interface{}, deleteAPITokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteAPIToken_Call {
	return &MockOpenlaneGraphClient_DeleteAPIToken_Call{Call: _e.mock.On("DeleteAPIToken",
		append([]interface{}{ctx, deleteAPITokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteAPIToken_Call) Run(run func(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteAPIToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteAPIToken_Call) Return(deleteAPIToken *openlaneclient.DeleteAPIToken, err error) *MockOpenlaneGraphClient_DeleteAPIToken_Call {
	_c.Call.Return(deleteAPIToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteAPIToken_Call) RunAndReturn(run func(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteAPIToken, error)) *MockOpenlaneGraphClient_DeleteAPIToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteActionPlan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteActionPlan(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteActionPlan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteActionPlanID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteActionPlanID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteActionPlan")
	}

	var r0 *openlaneclient.DeleteActionPlan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteActionPlan, error)); ok {
		return returnFunc(ctx, deleteActionPlanID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteActionPlan); ok {
		r0 = returnFunc(ctx, deleteActionPlanID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteActionPlan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteActionPlanID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteActionPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteActionPlan'
type MockOpenlaneGraphClient_DeleteActionPlan_Call struct {
	*mock.Call
}

// DeleteActionPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteActionPlanID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteActionPlan(ctx interface{}, deleteActionPlanID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteActionPlan_Call {
	return &MockOpenlaneGraphClient_DeleteActionPlan_Call{Call: _e.mock.On("DeleteActionPlan",
		append([]interface{}{ctx, deleteActionPlanID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteActionPlan_Call) Run(run func(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteActionPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteActionPlan_Call) Return(deleteActionPlan *openlaneclient.DeleteActionPlan, err error) *MockOpenlaneGraphClient_DeleteActionPlan_Call {
	_c.Call.Return(deleteActionPlan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteActionPlan_Call) RunAndReturn(run func(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteActionPlan, error)) *MockOpenlaneGraphClient_DeleteActionPlan_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAsset provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteAsset(ctx context.Context, deleteAssetID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteAsset, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteAssetID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteAssetID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 *openlaneclient.DeleteAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteAsset, error)); ok {
		return returnFunc(ctx, deleteAssetID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteAsset); ok {
		r0 = returnFunc(ctx, deleteAssetID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteAssetID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAsset'
type MockOpenlaneGraphClient_DeleteAsset_Call struct {
	*mock.Call
}

// DeleteAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteAssetID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteAsset(ctx interface{}, deleteAssetID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteAsset_Call {
	return &MockOpenlaneGraphClient_DeleteAsset_Call{Call: _e.mock.On("DeleteAsset",
		append([]interface{}{ctx, deleteAssetID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteAsset_Call) Run(run func(ctx context.Context, deleteAssetID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteAsset_Call) Return(deleteAsset *openlaneclient.DeleteAsset, err error) *MockOpenlaneGraphClient_DeleteAsset_Call {
	_c.Call.Return(deleteAsset, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteAsset_Call) RunAndReturn(run func(ctx context.Context, deleteAssetID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteAsset, error)) *MockOpenlaneGraphClient_DeleteAsset_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBulkExport provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteBulkExport(ctx context.Context, ids []string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteBulkExport, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, ids, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, ids)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteBulkExport")
	}

	var r0 *openlaneclient.DeleteBulkExport
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteBulkExport, error)); ok {
		return returnFunc(ctx, ids, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteBulkExport); ok {
		r0 = returnFunc(ctx, ids, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteBulkExport)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, ids, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteBulkExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBulkExport'
type MockOpenlaneGraphClient_DeleteBulkExport_Call struct {
	*mock.Call
}

// DeleteBulkExport is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteBulkExport(ctx interface{}, ids interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteBulkExport_Call {
	return &MockOpenlaneGraphClient_DeleteBulkExport_Call{Call: _e.mock.On("DeleteBulkExport",
		append([]interface{}{ctx, ids}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteBulkExport_Call) Run(run func(ctx context.Context, ids []string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteBulkExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteBulkExport_Call) Return(deleteBulkExport *openlaneclient.DeleteBulkExport, err error) *MockOpenlaneGraphClient_DeleteBulkExport_Call {
	_c.Call.Return(deleteBulkExport, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteBulkExport_Call) RunAndReturn(run func(ctx context.Context, ids []string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteBulkExport, error)) *MockOpenlaneGraphClient_DeleteBulkExport_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContact provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteContact(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteContact, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteContactID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteContactID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteContact")
	}

	var r0 *openlaneclient.DeleteContact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteContact, error)); ok {
		return returnFunc(ctx, deleteContactID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteContact); ok {
		r0 = returnFunc(ctx, deleteContactID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteContact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteContactID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContact'
type MockOpenlaneGraphClient_DeleteContact_Call struct {
	*mock.Call
}

// DeleteContact is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteContactID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteContact(ctx interface{}, deleteContactID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteContact_Call {
	return &MockOpenlaneGraphClient_DeleteContact_Call{Call: _e.mock.On("DeleteContact",
		append([]interface{}{ctx, deleteContactID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteContact_Call) Run(run func(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteContact_Call) Return(deleteContact *openlaneclient.DeleteContact, err error) *MockOpenlaneGraphClient_DeleteContact_Call {
	_c.Call.Return(deleteContact, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteContact_Call) RunAndReturn(run func(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteContact, error)) *MockOpenlaneGraphClient_DeleteContact_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteControl(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteControlID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteControlID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteControl")
	}

	var r0 *openlaneclient.DeleteControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControl, error)); ok {
		return returnFunc(ctx, deleteControlID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteControl); ok {
		r0 = returnFunc(ctx, deleteControlID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteControlID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteControl'
type MockOpenlaneGraphClient_DeleteControl_Call struct {
	*mock.Call
}

// DeleteControl is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteControlID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteControl(ctx interface{}, deleteControlID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteControl_Call {
	return &MockOpenlaneGraphClient_DeleteControl_Call{Call: _e.mock.On("DeleteControl",
		append([]interface{}{ctx, deleteControlID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteControl_Call) Run(run func(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControl_Call) Return(deleteControl *openlaneclient.DeleteControl, err error) *MockOpenlaneGraphClient_DeleteControl_Call {
	_c.Call.Return(deleteControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControl_Call) RunAndReturn(run func(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControl, error)) *MockOpenlaneGraphClient_DeleteControl_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteControlImplementation provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteControlImplementation(ctx context.Context, deleteControlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlImplementation, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteControlImplementationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteControlImplementationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteControlImplementation")
	}

	var r0 *openlaneclient.DeleteControlImplementation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlImplementation, error)); ok {
		return returnFunc(ctx, deleteControlImplementationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteControlImplementation); ok {
		r0 = returnFunc(ctx, deleteControlImplementationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteControlImplementation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteControlImplementationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteControlImplementation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteControlImplementation'
type MockOpenlaneGraphClient_DeleteControlImplementation_Call struct {
	*mock.Call
}

// DeleteControlImplementation is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteControlImplementationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteControlImplementation(ctx interface{}, deleteControlImplementationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteControlImplementation_Call {
	return &MockOpenlaneGraphClient_DeleteControlImplementation_Call{Call: _e.mock.On("DeleteControlImplementation",
		append([]interface{}{ctx, deleteControlImplementationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteControlImplementation_Call) Run(run func(ctx context.Context, deleteControlImplementationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteControlImplementation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControlImplementation_Call) Return(deleteControlImplementation *openlaneclient.DeleteControlImplementation, err error) *MockOpenlaneGraphClient_DeleteControlImplementation_Call {
	_c.Call.Return(deleteControlImplementation, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControlImplementation_Call) RunAndReturn(run func(ctx context.Context, deleteControlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlImplementation, error)) *MockOpenlaneGraphClient_DeleteControlImplementation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteControlObjective provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteControlObjective(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlObjective, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteControlObjectiveID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteControlObjectiveID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteControlObjective")
	}

	var r0 *openlaneclient.DeleteControlObjective
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlObjective, error)); ok {
		return returnFunc(ctx, deleteControlObjectiveID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteControlObjective); ok {
		r0 = returnFunc(ctx, deleteControlObjectiveID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteControlObjective)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteControlObjectiveID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteControlObjective_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteControlObjective'
type MockOpenlaneGraphClient_DeleteControlObjective_Call struct {
	*mock.Call
}

// DeleteControlObjective is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteControlObjectiveID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteControlObjective(ctx interface{}, deleteControlObjectiveID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteControlObjective_Call {
	return &MockOpenlaneGraphClient_DeleteControlObjective_Call{Call: _e.mock.On("DeleteControlObjective",
		append([]interface{}{ctx, deleteControlObjectiveID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteControlObjective_Call) Run(run func(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteControlObjective_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControlObjective_Call) Return(deleteControlObjective *openlaneclient.DeleteControlObjective, err error) *MockOpenlaneGraphClient_DeleteControlObjective_Call {
	_c.Call.Return(deleteControlObjective, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControlObjective_Call) RunAndReturn(run func(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlObjective, error)) *MockOpenlaneGraphClient_DeleteControlObjective_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteControlScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteControlScheduledJob(ctx context.Context, deleteControlScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteControlScheduledJobID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteControlScheduledJobID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteControlScheduledJob")
	}

	var r0 *openlaneclient.DeleteControlScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlScheduledJob, error)); ok {
		return returnFunc(ctx, deleteControlScheduledJobID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteControlScheduledJob); ok {
		r0 = returnFunc(ctx, deleteControlScheduledJobID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteControlScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteControlScheduledJobID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteControlScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteControlScheduledJob'
type MockOpenlaneGraphClient_DeleteControlScheduledJob_Call struct {
	*mock.Call
}

// DeleteControlScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteControlScheduledJobID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteControlScheduledJob(ctx interface{}, deleteControlScheduledJobID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteControlScheduledJob_Call {
	return &MockOpenlaneGraphClient_DeleteControlScheduledJob_Call{Call: _e.mock.On("DeleteControlScheduledJob",
		append([]interface{}{ctx, deleteControlScheduledJobID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteControlScheduledJob_Call) Run(run func(ctx context.Context, deleteControlScheduledJobID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteControlScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControlScheduledJob_Call) Return(deleteControlScheduledJob *openlaneclient.DeleteControlScheduledJob, err error) *MockOpenlaneGraphClient_DeleteControlScheduledJob_Call {
	_c.Call.Return(deleteControlScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteControlScheduledJob_Call) RunAndReturn(run func(ctx context.Context, deleteControlScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteControlScheduledJob, error)) *MockOpenlaneGraphClient_DeleteControlScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteCustomDomain(ctx context.Context, deleteCustomDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteCustomDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteCustomDomainID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteCustomDomainID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomDomain")
	}

	var r0 *openlaneclient.DeleteCustomDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteCustomDomain, error)); ok {
		return returnFunc(ctx, deleteCustomDomainID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteCustomDomain); ok {
		r0 = returnFunc(ctx, deleteCustomDomainID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteCustomDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteCustomDomainID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteCustomDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomDomain'
type MockOpenlaneGraphClient_DeleteCustomDomain_Call struct {
	*mock.Call
}

// DeleteCustomDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteCustomDomainID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteCustomDomain(ctx interface{}, deleteCustomDomainID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteCustomDomain_Call {
	return &MockOpenlaneGraphClient_DeleteCustomDomain_Call{Call: _e.mock.On("DeleteCustomDomain",
		append([]interface{}{ctx, deleteCustomDomainID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteCustomDomain_Call) Run(run func(ctx context.Context, deleteCustomDomainID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteCustomDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteCustomDomain_Call) Return(deleteCustomDomain *openlaneclient.DeleteCustomDomain, err error) *MockOpenlaneGraphClient_DeleteCustomDomain_Call {
	_c.Call.Return(deleteCustomDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteCustomDomain_Call) RunAndReturn(run func(ctx context.Context, deleteCustomDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteCustomDomain, error)) *MockOpenlaneGraphClient_DeleteCustomDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDNSVerification provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteDNSVerification(ctx context.Context, deleteDNSVerificationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteDNSVerification, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteDNSVerificationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteDNSVerificationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteDNSVerification")
	}

	var r0 *openlaneclient.DeleteDNSVerification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteDNSVerification, error)); ok {
		return returnFunc(ctx, deleteDNSVerificationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteDNSVerification); ok {
		r0 = returnFunc(ctx, deleteDNSVerificationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteDNSVerification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteDNSVerificationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteDNSVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDNSVerification'
type MockOpenlaneGraphClient_DeleteDNSVerification_Call struct {
	*mock.Call
}

// DeleteDNSVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteDNSVerificationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteDNSVerification(ctx interface{}, deleteDNSVerificationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteDNSVerification_Call {
	return &MockOpenlaneGraphClient_DeleteDNSVerification_Call{Call: _e.mock.On("DeleteDNSVerification",
		append([]interface{}{ctx, deleteDNSVerificationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteDNSVerification_Call) Run(run func(ctx context.Context, deleteDNSVerificationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteDNSVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteDNSVerification_Call) Return(deleteDNSVerification *openlaneclient.DeleteDNSVerification, err error) *MockOpenlaneGraphClient_DeleteDNSVerification_Call {
	_c.Call.Return(deleteDNSVerification, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteDNSVerification_Call) RunAndReturn(run func(ctx context.Context, deleteDNSVerificationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteDNSVerification, error)) *MockOpenlaneGraphClient_DeleteDNSVerification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDocumentData provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteDocumentData, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteDocumentDataID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteDocumentDataID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteDocumentData")
	}

	var r0 *openlaneclient.DeleteDocumentData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteDocumentData, error)); ok {
		return returnFunc(ctx, deleteDocumentDataID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteDocumentData); ok {
		r0 = returnFunc(ctx, deleteDocumentDataID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteDocumentData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteDocumentDataID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteDocumentData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDocumentData'
type MockOpenlaneGraphClient_DeleteDocumentData_Call struct {
	*mock.Call
}

// DeleteDocumentData is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteDocumentDataID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteDocumentData(ctx interface{}, deleteDocumentDataID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteDocumentData_Call {
	return &MockOpenlaneGraphClient_DeleteDocumentData_Call{Call: _e.mock.On("DeleteDocumentData",
		append([]interface{}{ctx, deleteDocumentDataID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteDocumentData_Call) Run(run func(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteDocumentData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteDocumentData_Call) Return(deleteDocumentData *openlaneclient.DeleteDocumentData, err error) *MockOpenlaneGraphClient_DeleteDocumentData_Call {
	_c.Call.Return(deleteDocumentData, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteDocumentData_Call) RunAndReturn(run func(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteDocumentData, error)) *MockOpenlaneGraphClient_DeleteDocumentData_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEntity provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteEntity(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEntity, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteEntityID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteEntityID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntity")
	}

	var r0 *openlaneclient.DeleteEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEntity, error)); ok {
		return returnFunc(ctx, deleteEntityID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteEntity); ok {
		r0 = returnFunc(ctx, deleteEntityID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteEntityID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEntity'
type MockOpenlaneGraphClient_DeleteEntity_Call struct {
	*mock.Call
}

// DeleteEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteEntityID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteEntity(ctx interface{}, deleteEntityID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteEntity_Call {
	return &MockOpenlaneGraphClient_DeleteEntity_Call{Call: _e.mock.On("DeleteEntity",
		append([]interface{}{ctx, deleteEntityID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteEntity_Call) Run(run func(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEntity_Call) Return(deleteEntity *openlaneclient.DeleteEntity, err error) *MockOpenlaneGraphClient_DeleteEntity_Call {
	_c.Call.Return(deleteEntity, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEntity_Call) RunAndReturn(run func(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEntity, error)) *MockOpenlaneGraphClient_DeleteEntity_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEntityType provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteEntityType(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEntityType, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteEntityTypeID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteEntityTypeID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntityType")
	}

	var r0 *openlaneclient.DeleteEntityType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEntityType, error)); ok {
		return returnFunc(ctx, deleteEntityTypeID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteEntityType); ok {
		r0 = returnFunc(ctx, deleteEntityTypeID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteEntityType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteEntityTypeID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEntityType'
type MockOpenlaneGraphClient_DeleteEntityType_Call struct {
	*mock.Call
}

// DeleteEntityType is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteEntityTypeID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteEntityType(ctx interface{}, deleteEntityTypeID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteEntityType_Call {
	return &MockOpenlaneGraphClient_DeleteEntityType_Call{Call: _e.mock.On("DeleteEntityType",
		append([]interface{}{ctx, deleteEntityTypeID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteEntityType_Call) Run(run func(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEntityType_Call) Return(deleteEntityType *openlaneclient.DeleteEntityType, err error) *MockOpenlaneGraphClient_DeleteEntityType_Call {
	_c.Call.Return(deleteEntityType, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEntityType_Call) RunAndReturn(run func(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEntityType, error)) *MockOpenlaneGraphClient_DeleteEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvent provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEvent, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteEventID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteEventID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 *openlaneclient.DeleteEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEvent, error)); ok {
		return returnFunc(ctx, deleteEventID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteEvent); ok {
		r0 = returnFunc(ctx, deleteEventID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteEventID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvent'
type MockOpenlaneGraphClient_DeleteEvent_Call struct {
	*mock.Call
}

// DeleteEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteEventID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteEvent(ctx interface{}, deleteEventID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteEvent_Call {
	return &MockOpenlaneGraphClient_DeleteEvent_Call{Call: _e.mock.On("DeleteEvent",
		append([]interface{}{ctx, deleteEventID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteEvent_Call) Run(run func(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEvent_Call) Return(deleteEvent *openlaneclient.DeleteEvent, err error) *MockOpenlaneGraphClient_DeleteEvent_Call {
	_c.Call.Return(deleteEvent, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEvent_Call) RunAndReturn(run func(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEvent, error)) *MockOpenlaneGraphClient_DeleteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvidence provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteEvidence(ctx context.Context, deleteEvidenceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEvidence, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteEvidenceID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteEvidenceID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvidence")
	}

	var r0 *openlaneclient.DeleteEvidence
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEvidence, error)); ok {
		return returnFunc(ctx, deleteEvidenceID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteEvidence); ok {
		r0 = returnFunc(ctx, deleteEvidenceID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteEvidence)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteEvidenceID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvidence'
type MockOpenlaneGraphClient_DeleteEvidence_Call struct {
	*mock.Call
}

// DeleteEvidence is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteEvidenceID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteEvidence(ctx interface{}, deleteEvidenceID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteEvidence_Call {
	return &MockOpenlaneGraphClient_DeleteEvidence_Call{Call: _e.mock.On("DeleteEvidence",
		append([]interface{}{ctx, deleteEvidenceID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteEvidence_Call) Run(run func(ctx context.Context, deleteEvidenceID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEvidence_Call) Return(deleteEvidence *openlaneclient.DeleteEvidence, err error) *MockOpenlaneGraphClient_DeleteEvidence_Call {
	_c.Call.Return(deleteEvidence, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteEvidence_Call) RunAndReturn(run func(ctx context.Context, deleteEvidenceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteEvidence, error)) *MockOpenlaneGraphClient_DeleteEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExport provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteExport(ctx context.Context, deleteExportID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteExport, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteExportID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteExportID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteExport")
	}

	var r0 *openlaneclient.DeleteExport
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteExport, error)); ok {
		return returnFunc(ctx, deleteExportID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteExport); ok {
		r0 = returnFunc(ctx, deleteExportID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteExport)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteExportID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExport'
type MockOpenlaneGraphClient_DeleteExport_Call struct {
	*mock.Call
}

// DeleteExport is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteExportID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteExport(ctx interface{}, deleteExportID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteExport_Call {
	return &MockOpenlaneGraphClient_DeleteExport_Call{Call: _e.mock.On("DeleteExport",
		append([]interface{}{ctx, deleteExportID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteExport_Call) Run(run func(ctx context.Context, deleteExportID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteExport_Call) Return(deleteExport *openlaneclient.DeleteExport, err error) *MockOpenlaneGraphClient_DeleteExport_Call {
	_c.Call.Return(deleteExport, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteExport_Call) RunAndReturn(run func(ctx context.Context, deleteExportID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteExport, error)) *MockOpenlaneGraphClient_DeleteExport_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteFile, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteFileID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteFileID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 *openlaneclient.DeleteFile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteFile, error)); ok {
		return returnFunc(ctx, deleteFileID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteFile); ok {
		r0 = returnFunc(ctx, deleteFileID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteFile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteFileID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockOpenlaneGraphClient_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteFileID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteFile(ctx interface{}, deleteFileID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteFile_Call {
	return &MockOpenlaneGraphClient_DeleteFile_Call{Call: _e.mock.On("DeleteFile",
		append([]interface{}{ctx, deleteFileID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteFile_Call) Run(run func(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteFile_Call) Return(deleteFile *openlaneclient.DeleteFile, err error) *MockOpenlaneGraphClient_DeleteFile_Call {
	_c.Call.Return(deleteFile, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteFile_Call) RunAndReturn(run func(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteFile, error)) *MockOpenlaneGraphClient_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteGroup, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteGroupID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteGroupID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *openlaneclient.DeleteGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteGroup, error)); ok {
		return returnFunc(ctx, deleteGroupID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteGroup); ok {
		r0 = returnFunc(ctx, deleteGroupID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteGroupID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockOpenlaneGraphClient_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteGroupID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteGroup(ctx interface{}, deleteGroupID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteGroup_Call {
	return &MockOpenlaneGraphClient_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup",
		append([]interface{}{ctx, deleteGroupID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteGroup_Call) Run(run func(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteGroup_Call) Return(deleteGroup *openlaneclient.DeleteGroup, err error) *MockOpenlaneGraphClient_DeleteGroup_Call {
	_c.Call.Return(deleteGroup, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteGroup_Call) RunAndReturn(run func(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteGroup, error)) *MockOpenlaneGraphClient_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIntegration provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteIntegration, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteIntegrationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteIntegrationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegration")
	}

	var r0 *openlaneclient.DeleteIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteIntegration, error)); ok {
		return returnFunc(ctx, deleteIntegrationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteIntegration); ok {
		r0 = returnFunc(ctx, deleteIntegrationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteIntegrationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIntegration'
type MockOpenlaneGraphClient_DeleteIntegration_Call struct {
	*mock.Call
}

// DeleteIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteIntegrationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteIntegration(ctx interface{}, deleteIntegrationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteIntegration_Call {
	return &MockOpenlaneGraphClient_DeleteIntegration_Call{Call: _e.mock.On("DeleteIntegration",
		append([]interface{}{ctx, deleteIntegrationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteIntegration_Call) Run(run func(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteIntegration_Call) Return(deleteIntegration *openlaneclient.DeleteIntegration, err error) *MockOpenlaneGraphClient_DeleteIntegration_Call {
	_c.Call.Return(deleteIntegration, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteIntegration_Call) RunAndReturn(run func(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteIntegration, error)) *MockOpenlaneGraphClient_DeleteIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInternalPolicy provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteInternalPolicy(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteInternalPolicy, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteInternalPolicyID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteInternalPolicyID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteInternalPolicy")
	}

	var r0 *openlaneclient.DeleteInternalPolicy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteInternalPolicy, error)); ok {
		return returnFunc(ctx, deleteInternalPolicyID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteInternalPolicy); ok {
		r0 = returnFunc(ctx, deleteInternalPolicyID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteInternalPolicy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteInternalPolicyID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteInternalPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInternalPolicy'
type MockOpenlaneGraphClient_DeleteInternalPolicy_Call struct {
	*mock.Call
}

// DeleteInternalPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteInternalPolicyID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteInternalPolicy(ctx interface{}, deleteInternalPolicyID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteInternalPolicy_Call {
	return &MockOpenlaneGraphClient_DeleteInternalPolicy_Call{Call: _e.mock.On("DeleteInternalPolicy",
		append([]interface{}{ctx, deleteInternalPolicyID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteInternalPolicy_Call) Run(run func(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteInternalPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteInternalPolicy_Call) Return(deleteInternalPolicy *openlaneclient.DeleteInternalPolicy, err error) *MockOpenlaneGraphClient_DeleteInternalPolicy_Call {
	_c.Call.Return(deleteInternalPolicy, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteInternalPolicy_Call) RunAndReturn(run func(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteInternalPolicy, error)) *MockOpenlaneGraphClient_DeleteInternalPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvite provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteInvite, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteInviteID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteInviteID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvite")
	}

	var r0 *openlaneclient.DeleteInvite
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteInvite, error)); ok {
		return returnFunc(ctx, deleteInviteID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteInvite); ok {
		r0 = returnFunc(ctx, deleteInviteID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteInvite)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteInviteID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvite'
type MockOpenlaneGraphClient_DeleteInvite_Call struct {
	*mock.Call
}

// DeleteInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteInviteID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteInvite(ctx interface{}, deleteInviteID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteInvite_Call {
	return &MockOpenlaneGraphClient_DeleteInvite_Call{Call: _e.mock.On("DeleteInvite",
		append([]interface{}{ctx, deleteInviteID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteInvite_Call) Run(run func(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteInvite_Call) Return(deleteInvite *openlaneclient.DeleteInvite, err error) *MockOpenlaneGraphClient_DeleteInvite_Call {
	_c.Call.Return(deleteInvite, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteInvite_Call) RunAndReturn(run func(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteInvite, error)) *MockOpenlaneGraphClient_DeleteInvite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJobRunner provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteJobRunner(ctx context.Context, deleteJobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunner, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteJobRunnerID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteJobRunnerID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobRunner")
	}

	var r0 *openlaneclient.DeleteJobRunner
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunner, error)); ok {
		return returnFunc(ctx, deleteJobRunnerID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteJobRunner); ok {
		r0 = returnFunc(ctx, deleteJobRunnerID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteJobRunner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteJobRunnerID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteJobRunner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJobRunner'
type MockOpenlaneGraphClient_DeleteJobRunner_Call struct {
	*mock.Call
}

// DeleteJobRunner is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteJobRunnerID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteJobRunner(ctx interface{}, deleteJobRunnerID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteJobRunner_Call {
	return &MockOpenlaneGraphClient_DeleteJobRunner_Call{Call: _e.mock.On("DeleteJobRunner",
		append([]interface{}{ctx, deleteJobRunnerID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunner_Call) Run(run func(ctx context.Context, deleteJobRunnerID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteJobRunner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunner_Call) Return(deleteJobRunner *openlaneclient.DeleteJobRunner, err error) *MockOpenlaneGraphClient_DeleteJobRunner_Call {
	_c.Call.Return(deleteJobRunner, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunner_Call) RunAndReturn(run func(ctx context.Context, deleteJobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunner, error)) *MockOpenlaneGraphClient_DeleteJobRunner_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJobRunnerRegistrationToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteJobRunnerRegistrationToken(ctx context.Context, deleteJobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunnerRegistrationToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteJobRunnerRegistrationTokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteJobRunnerRegistrationTokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobRunnerRegistrationToken")
	}

	var r0 *openlaneclient.DeleteJobRunnerRegistrationToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunnerRegistrationToken, error)); ok {
		return returnFunc(ctx, deleteJobRunnerRegistrationTokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteJobRunnerRegistrationToken); ok {
		r0 = returnFunc(ctx, deleteJobRunnerRegistrationTokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteJobRunnerRegistrationToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteJobRunnerRegistrationTokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJobRunnerRegistrationToken'
type MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call struct {
	*mock.Call
}

// DeleteJobRunnerRegistrationToken is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteJobRunnerRegistrationTokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteJobRunnerRegistrationToken(ctx interface{}, deleteJobRunnerRegistrationTokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call {
	return &MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call{Call: _e.mock.On("DeleteJobRunnerRegistrationToken",
		append([]interface{}{ctx, deleteJobRunnerRegistrationTokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call) Run(run func(ctx context.Context, deleteJobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call) Return(deleteJobRunnerRegistrationToken *openlaneclient.DeleteJobRunnerRegistrationToken, err error) *MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call {
	_c.Call.Return(deleteJobRunnerRegistrationToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call) RunAndReturn(run func(ctx context.Context, deleteJobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunnerRegistrationToken, error)) *MockOpenlaneGraphClient_DeleteJobRunnerRegistrationToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJobRunnerToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteJobRunnerToken(ctx context.Context, deleteJobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunnerToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteJobRunnerTokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteJobRunnerTokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobRunnerToken")
	}

	var r0 *openlaneclient.DeleteJobRunnerToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunnerToken, error)); ok {
		return returnFunc(ctx, deleteJobRunnerTokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteJobRunnerToken); ok {
		r0 = returnFunc(ctx, deleteJobRunnerTokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteJobRunnerToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteJobRunnerTokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteJobRunnerToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJobRunnerToken'
type MockOpenlaneGraphClient_DeleteJobRunnerToken_Call struct {
	*mock.Call
}

// DeleteJobRunnerToken is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteJobRunnerTokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteJobRunnerToken(ctx interface{}, deleteJobRunnerTokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteJobRunnerToken_Call {
	return &MockOpenlaneGraphClient_DeleteJobRunnerToken_Call{Call: _e.mock.On("DeleteJobRunnerToken",
		append([]interface{}{ctx, deleteJobRunnerTokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunnerToken_Call) Run(run func(ctx context.Context, deleteJobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteJobRunnerToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunnerToken_Call) Return(deleteJobRunnerToken *openlaneclient.DeleteJobRunnerToken, err error) *MockOpenlaneGraphClient_DeleteJobRunnerToken_Call {
	_c.Call.Return(deleteJobRunnerToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteJobRunnerToken_Call) RunAndReturn(run func(ctx context.Context, deleteJobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteJobRunnerToken, error)) *MockOpenlaneGraphClient_DeleteJobRunnerToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappableDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteMappableDomain(ctx context.Context, deleteMappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteMappableDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteMappableDomainID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteMappableDomainID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappableDomain")
	}

	var r0 *openlaneclient.DeleteMappableDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteMappableDomain, error)); ok {
		return returnFunc(ctx, deleteMappableDomainID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteMappableDomain); ok {
		r0 = returnFunc(ctx, deleteMappableDomainID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteMappableDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteMappableDomainID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteMappableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappableDomain'
type MockOpenlaneGraphClient_DeleteMappableDomain_Call struct {
	*mock.Call
}

// DeleteMappableDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteMappableDomainID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteMappableDomain(ctx interface{}, deleteMappableDomainID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteMappableDomain_Call {
	return &MockOpenlaneGraphClient_DeleteMappableDomain_Call{Call: _e.mock.On("DeleteMappableDomain",
		append([]interface{}{ctx, deleteMappableDomainID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteMappableDomain_Call) Run(run func(ctx context.Context, deleteMappableDomainID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteMappableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteMappableDomain_Call) Return(deleteMappableDomain *openlaneclient.DeleteMappableDomain, err error) *MockOpenlaneGraphClient_DeleteMappableDomain_Call {
	_c.Call.Return(deleteMappableDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteMappableDomain_Call) RunAndReturn(run func(ctx context.Context, deleteMappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteMappableDomain, error)) *MockOpenlaneGraphClient_DeleteMappableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappedControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteMappedControl(ctx context.Context, deleteMappedControlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteMappedControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteMappedControlID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteMappedControlID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappedControl")
	}

	var r0 *openlaneclient.DeleteMappedControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteMappedControl, error)); ok {
		return returnFunc(ctx, deleteMappedControlID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteMappedControl); ok {
		r0 = returnFunc(ctx, deleteMappedControlID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteMappedControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteMappedControlID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteMappedControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappedControl'
type MockOpenlaneGraphClient_DeleteMappedControl_Call struct {
	*mock.Call
}

// DeleteMappedControl is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteMappedControlID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteMappedControl(ctx interface{}, deleteMappedControlID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteMappedControl_Call {
	return &MockOpenlaneGraphClient_DeleteMappedControl_Call{Call: _e.mock.On("DeleteMappedControl",
		append([]interface{}{ctx, deleteMappedControlID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteMappedControl_Call) Run(run func(ctx context.Context, deleteMappedControlID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteMappedControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteMappedControl_Call) Return(deleteMappedControl *openlaneclient.DeleteMappedControl, err error) *MockOpenlaneGraphClient_DeleteMappedControl_Call {
	_c.Call.Return(deleteMappedControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteMappedControl_Call) RunAndReturn(run func(ctx context.Context, deleteMappedControlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteMappedControl, error)) *MockOpenlaneGraphClient_DeleteMappedControl_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNarrative provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteNarrative(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteNarrative, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteNarrativeID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteNarrativeID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteNarrative")
	}

	var r0 *openlaneclient.DeleteNarrative
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteNarrative, error)); ok {
		return returnFunc(ctx, deleteNarrativeID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteNarrative); ok {
		r0 = returnFunc(ctx, deleteNarrativeID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteNarrative)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteNarrativeID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteNarrative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNarrative'
type MockOpenlaneGraphClient_DeleteNarrative_Call struct {
	*mock.Call
}

// DeleteNarrative is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteNarrativeID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteNarrative(ctx interface{}, deleteNarrativeID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteNarrative_Call {
	return &MockOpenlaneGraphClient_DeleteNarrative_Call{Call: _e.mock.On("DeleteNarrative",
		append([]interface{}{ctx, deleteNarrativeID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteNarrative_Call) Run(run func(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteNarrative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteNarrative_Call) Return(deleteNarrative *openlaneclient.DeleteNarrative, err error) *MockOpenlaneGraphClient_DeleteNarrative_Call {
	_c.Call.Return(deleteNarrative, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteNarrative_Call) RunAndReturn(run func(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteNarrative, error)) *MockOpenlaneGraphClient_DeleteNarrative_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganization provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteOrganization, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteOrganizationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteOrganizationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 *openlaneclient.DeleteOrganization
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteOrganization, error)); ok {
		return returnFunc(ctx, deleteOrganizationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteOrganization); ok {
		r0 = returnFunc(ctx, deleteOrganizationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteOrganization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteOrganizationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type MockOpenlaneGraphClient_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteOrganizationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteOrganization(ctx interface{}, deleteOrganizationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteOrganization_Call {
	return &MockOpenlaneGraphClient_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization",
		append([]interface{}{ctx, deleteOrganizationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteOrganization_Call) Run(run func(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteOrganization_Call) Return(deleteOrganization *openlaneclient.DeleteOrganization, err error) *MockOpenlaneGraphClient_DeleteOrganization_Call {
	_c.Call.Return(deleteOrganization, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteOrganization_Call) RunAndReturn(run func(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteOrganization, error)) *MockOpenlaneGraphClient_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePersonalAccessToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeletePersonalAccessToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deletePersonalAccessTokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deletePersonalAccessTokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonalAccessToken")
	}

	var r0 *openlaneclient.DeletePersonalAccessToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeletePersonalAccessToken, error)); ok {
		return returnFunc(ctx, deletePersonalAccessTokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeletePersonalAccessToken); ok {
		r0 = returnFunc(ctx, deletePersonalAccessTokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeletePersonalAccessToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deletePersonalAccessTokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeletePersonalAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonalAccessToken'
type MockOpenlaneGraphClient_DeletePersonalAccessToken_Call struct {
	*mock.Call
}

// DeletePersonalAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - deletePersonalAccessTokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeletePersonalAccessToken(ctx interface{}, deletePersonalAccessTokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeletePersonalAccessToken_Call {
	return &MockOpenlaneGraphClient_DeletePersonalAccessToken_Call{Call: _e.mock.On("DeletePersonalAccessToken",
		append([]interface{}{ctx, deletePersonalAccessTokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeletePersonalAccessToken_Call) Run(run func(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeletePersonalAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeletePersonalAccessToken_Call) Return(deletePersonalAccessToken *openlaneclient.DeletePersonalAccessToken, err error) *MockOpenlaneGraphClient_DeletePersonalAccessToken_Call {
	_c.Call.Return(deletePersonalAccessToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeletePersonalAccessToken_Call) RunAndReturn(run func(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeletePersonalAccessToken, error)) *MockOpenlaneGraphClient_DeletePersonalAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProcedure provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteProcedure(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProcedure, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteProcedureID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteProcedureID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteProcedure")
	}

	var r0 *openlaneclient.DeleteProcedure
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProcedure, error)); ok {
		return returnFunc(ctx, deleteProcedureID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteProcedure); ok {
		r0 = returnFunc(ctx, deleteProcedureID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteProcedure)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteProcedureID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteProcedure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProcedure'
type MockOpenlaneGraphClient_DeleteProcedure_Call struct {
	*mock.Call
}

// DeleteProcedure is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteProcedureID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteProcedure(ctx interface{}, deleteProcedureID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteProcedure_Call {
	return &MockOpenlaneGraphClient_DeleteProcedure_Call{Call: _e.mock.On("DeleteProcedure",
		append([]interface{}{ctx, deleteProcedureID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteProcedure_Call) Run(run func(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteProcedure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteProcedure_Call) Return(deleteProcedure *openlaneclient.DeleteProcedure, err error) *MockOpenlaneGraphClient_DeleteProcedure_Call {
	_c.Call.Return(deleteProcedure, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteProcedure_Call) RunAndReturn(run func(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProcedure, error)) *MockOpenlaneGraphClient_DeleteProcedure_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteProgram(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteProgramID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteProgramID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteProgram")
	}

	var r0 *openlaneclient.DeleteProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProgram, error)); ok {
		return returnFunc(ctx, deleteProgramID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteProgram); ok {
		r0 = returnFunc(ctx, deleteProgramID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteProgramID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProgram'
type MockOpenlaneGraphClient_DeleteProgram_Call struct {
	*mock.Call
}

// DeleteProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteProgramID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteProgram(ctx interface{}, deleteProgramID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteProgram_Call {
	return &MockOpenlaneGraphClient_DeleteProgram_Call{Call: _e.mock.On("DeleteProgram",
		append([]interface{}{ctx, deleteProgramID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteProgram_Call) Run(run func(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteProgram_Call) Return(deleteProgram *openlaneclient.DeleteProgram, err error) *MockOpenlaneGraphClient_DeleteProgram_Call {
	_c.Call.Return(deleteProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteProgram_Call) RunAndReturn(run func(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProgram, error)) *MockOpenlaneGraphClient_DeleteProgram_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProgramMembership provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteProgramMembership(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProgramMembership, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteProgramMembershipID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteProgramMembershipID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteProgramMembership")
	}

	var r0 *openlaneclient.DeleteProgramMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProgramMembership, error)); ok {
		return returnFunc(ctx, deleteProgramMembershipID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteProgramMembership); ok {
		r0 = returnFunc(ctx, deleteProgramMembershipID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteProgramMembership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteProgramMembershipID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteProgramMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProgramMembership'
type MockOpenlaneGraphClient_DeleteProgramMembership_Call struct {
	*mock.Call
}

// DeleteProgramMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteProgramMembershipID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteProgramMembership(ctx interface{}, deleteProgramMembershipID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteProgramMembership_Call {
	return &MockOpenlaneGraphClient_DeleteProgramMembership_Call{Call: _e.mock.On("DeleteProgramMembership",
		append([]interface{}{ctx, deleteProgramMembershipID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteProgramMembership_Call) Run(run func(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteProgramMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteProgramMembership_Call) Return(deleteProgramMembership *openlaneclient.DeleteProgramMembership, err error) *MockOpenlaneGraphClient_DeleteProgramMembership_Call {
	_c.Call.Return(deleteProgramMembership, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteProgramMembership_Call) RunAndReturn(run func(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteProgramMembership, error)) *MockOpenlaneGraphClient_DeleteProgramMembership_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRisk provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteRisk(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteRisk, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteRiskID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteRiskID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteRisk")
	}

	var r0 *openlaneclient.DeleteRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteRisk, error)); ok {
		return returnFunc(ctx, deleteRiskID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteRisk); ok {
		r0 = returnFunc(ctx, deleteRiskID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteRiskID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRisk'
type MockOpenlaneGraphClient_DeleteRisk_Call struct {
	*mock.Call
}

// DeleteRisk is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteRiskID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteRisk(ctx interface{}, deleteRiskID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteRisk_Call {
	return &MockOpenlaneGraphClient_DeleteRisk_Call{Call: _e.mock.On("DeleteRisk",
		append([]interface{}{ctx, deleteRiskID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteRisk_Call) Run(run func(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteRisk_Call) Return(deleteRisk *openlaneclient.DeleteRisk, err error) *MockOpenlaneGraphClient_DeleteRisk_Call {
	_c.Call.Return(deleteRisk, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteRisk_Call) RunAndReturn(run func(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteRisk, error)) *MockOpenlaneGraphClient_DeleteRisk_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteScan(ctx context.Context, deleteScanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteScan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteScanID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteScanID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteScan")
	}

	var r0 *openlaneclient.DeleteScan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteScan, error)); ok {
		return returnFunc(ctx, deleteScanID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteScan); ok {
		r0 = returnFunc(ctx, deleteScanID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteScan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteScanID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScan'
type MockOpenlaneGraphClient_DeleteScan_Call struct {
	*mock.Call
}

// DeleteScan is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteScanID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteScan(ctx interface{}, deleteScanID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteScan_Call {
	return &MockOpenlaneGraphClient_DeleteScan_Call{Call: _e.mock.On("DeleteScan",
		append([]interface{}{ctx, deleteScanID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteScan_Call) Run(run func(ctx context.Context, deleteScanID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteScan_Call) Return(deleteScan *openlaneclient.DeleteScan, err error) *MockOpenlaneGraphClient_DeleteScan_Call {
	_c.Call.Return(deleteScan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteScan_Call) RunAndReturn(run func(ctx context.Context, deleteScanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteScan, error)) *MockOpenlaneGraphClient_DeleteScan_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteScheduledJob(ctx context.Context, deleteScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteScheduledJobID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteScheduledJobID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteScheduledJob")
	}

	var r0 *openlaneclient.DeleteScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteScheduledJob, error)); ok {
		return returnFunc(ctx, deleteScheduledJobID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteScheduledJob); ok {
		r0 = returnFunc(ctx, deleteScheduledJobID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteScheduledJobID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScheduledJob'
type MockOpenlaneGraphClient_DeleteScheduledJob_Call struct {
	*mock.Call
}

// DeleteScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteScheduledJobID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteScheduledJob(ctx interface{}, deleteScheduledJobID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteScheduledJob_Call {
	return &MockOpenlaneGraphClient_DeleteScheduledJob_Call{Call: _e.mock.On("DeleteScheduledJob",
		append([]interface{}{ctx, deleteScheduledJobID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteScheduledJob_Call) Run(run func(ctx context.Context, deleteScheduledJobID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteScheduledJob_Call) Return(deleteScheduledJob *openlaneclient.DeleteScheduledJob, err error) *MockOpenlaneGraphClient_DeleteScheduledJob_Call {
	_c.Call.Return(deleteScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteScheduledJob_Call) RunAndReturn(run func(ctx context.Context, deleteScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteScheduledJob, error)) *MockOpenlaneGraphClient_DeleteScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStandard provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteStandard(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteStandard, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteStandardID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteStandardID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteStandard")
	}

	var r0 *openlaneclient.DeleteStandard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteStandard, error)); ok {
		return returnFunc(ctx, deleteStandardID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteStandard); ok {
		r0 = returnFunc(ctx, deleteStandardID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteStandard)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteStandardID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteStandard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStandard'
type MockOpenlaneGraphClient_DeleteStandard_Call struct {
	*mock.Call
}

// DeleteStandard is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteStandardID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteStandard(ctx interface{}, deleteStandardID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteStandard_Call {
	return &MockOpenlaneGraphClient_DeleteStandard_Call{Call: _e.mock.On("DeleteStandard",
		append([]interface{}{ctx, deleteStandardID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteStandard_Call) Run(run func(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteStandard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteStandard_Call) Return(deleteStandard *openlaneclient.DeleteStandard, err error) *MockOpenlaneGraphClient_DeleteStandard_Call {
	_c.Call.Return(deleteStandard, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteStandard_Call) RunAndReturn(run func(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteStandard, error)) *MockOpenlaneGraphClient_DeleteStandard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubcontrol provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteSubcontrol(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubcontrol, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteSubcontrolID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteSubcontrolID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubcontrol")
	}

	var r0 *openlaneclient.DeleteSubcontrol
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubcontrol, error)); ok {
		return returnFunc(ctx, deleteSubcontrolID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteSubcontrol); ok {
		r0 = returnFunc(ctx, deleteSubcontrolID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteSubcontrol)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteSubcontrolID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteSubcontrol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubcontrol'
type MockOpenlaneGraphClient_DeleteSubcontrol_Call struct {
	*mock.Call
}

// DeleteSubcontrol is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteSubcontrolID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteSubcontrol(ctx interface{}, deleteSubcontrolID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteSubcontrol_Call {
	return &MockOpenlaneGraphClient_DeleteSubcontrol_Call{Call: _e.mock.On("DeleteSubcontrol",
		append([]interface{}{ctx, deleteSubcontrolID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteSubcontrol_Call) Run(run func(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteSubcontrol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteSubcontrol_Call) Return(deleteSubcontrol *openlaneclient.DeleteSubcontrol, err error) *MockOpenlaneGraphClient_DeleteSubcontrol_Call {
	_c.Call.Return(deleteSubcontrol, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteSubcontrol_Call) RunAndReturn(run func(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubcontrol, error)) *MockOpenlaneGraphClient_DeleteSubcontrol_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteSubprocessor(ctx context.Context, deleteSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteSubprocessorID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteSubprocessorID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubprocessor")
	}

	var r0 *openlaneclient.DeleteSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubprocessor, error)); ok {
		return returnFunc(ctx, deleteSubprocessorID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteSubprocessor); ok {
		r0 = returnFunc(ctx, deleteSubprocessorID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteSubprocessorID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubprocessor'
type MockOpenlaneGraphClient_DeleteSubprocessor_Call struct {
	*mock.Call
}

// DeleteSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteSubprocessorID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteSubprocessor(ctx interface{}, deleteSubprocessorID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteSubprocessor_Call {
	return &MockOpenlaneGraphClient_DeleteSubprocessor_Call{Call: _e.mock.On("DeleteSubprocessor",
		append([]interface{}{ctx, deleteSubprocessorID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteSubprocessor_Call) Run(run func(ctx context.Context, deleteSubprocessorID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteSubprocessor_Call) Return(deleteSubprocessor *openlaneclient.DeleteSubprocessor, err error) *MockOpenlaneGraphClient_DeleteSubprocessor_Call {
	_c.Call.Return(deleteSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteSubprocessor_Call) RunAndReturn(run func(ctx context.Context, deleteSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubprocessor, error)) *MockOpenlaneGraphClient_DeleteSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscriber provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubscriber, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteSubscriberEmail, subscriberOrganization, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteSubscriberEmail, subscriberOrganization)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriber")
	}

	var r0 *openlaneclient.DeleteSubscriber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubscriber, error)); ok {
		return returnFunc(ctx, deleteSubscriberEmail, subscriberOrganization, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteSubscriber); ok {
		r0 = returnFunc(ctx, deleteSubscriberEmail, subscriberOrganization, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteSubscriber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteSubscriberEmail, subscriberOrganization, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscriber'
type MockOpenlaneGraphClient_DeleteSubscriber_Call struct {
	*mock.Call
}

// DeleteSubscriber is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteSubscriberEmail string
//   - subscriberOrganization *string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteSubscriber(ctx interface{}, deleteSubscriberEmail interface{}, subscriberOrganization interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteSubscriber_Call {
	return &MockOpenlaneGraphClient_DeleteSubscriber_Call{Call: _e.mock.On("DeleteSubscriber",
		append([]interface{}{ctx, deleteSubscriberEmail, subscriberOrganization}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteSubscriber_Call) Run(run func(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteSubscriber_Call) Return(deleteSubscriber *openlaneclient.DeleteSubscriber, err error) *MockOpenlaneGraphClient_DeleteSubscriber_Call {
	_c.Call.Return(deleteSubscriber, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteSubscriber_Call) RunAndReturn(run func(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteSubscriber, error)) *MockOpenlaneGraphClient_DeleteSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteTask(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTask, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteTaskID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteTaskID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *openlaneclient.DeleteTask
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTask, error)); ok {
		return returnFunc(ctx, deleteTaskID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteTask); ok {
		r0 = returnFunc(ctx, deleteTaskID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteTask)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteTaskID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockOpenlaneGraphClient_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteTaskID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteTask(ctx interface{}, deleteTaskID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteTask_Call {
	return &MockOpenlaneGraphClient_DeleteTask_Call{Call: _e.mock.On("DeleteTask",
		append([]interface{}{ctx, deleteTaskID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteTask_Call) Run(run func(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTask_Call) Return(deleteTask *openlaneclient.DeleteTask, err error) *MockOpenlaneGraphClient_DeleteTask_Call {
	_c.Call.Return(deleteTask, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTask_Call) RunAndReturn(run func(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTask, error)) *MockOpenlaneGraphClient_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTrustCenter provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteTrustCenter(ctx context.Context, deleteTrustCenterID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenter, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteTrustCenterID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteTrustCenterID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustCenter")
	}

	var r0 *openlaneclient.DeleteTrustCenter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenter, error)); ok {
		return returnFunc(ctx, deleteTrustCenterID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteTrustCenter); ok {
		r0 = returnFunc(ctx, deleteTrustCenterID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteTrustCenter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteTrustCenterID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteTrustCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrustCenter'
type MockOpenlaneGraphClient_DeleteTrustCenter_Call struct {
	*mock.Call
}

// DeleteTrustCenter is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteTrustCenterID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteTrustCenter(ctx interface{}, deleteTrustCenterID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteTrustCenter_Call {
	return &MockOpenlaneGraphClient_DeleteTrustCenter_Call{Call: _e.mock.On("DeleteTrustCenter",
		append([]interface{}{ctx, deleteTrustCenterID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenter_Call) Run(run func(ctx context.Context, deleteTrustCenterID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteTrustCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenter_Call) Return(deleteTrustCenter *openlaneclient.DeleteTrustCenter, err error) *MockOpenlaneGraphClient_DeleteTrustCenter_Call {
	_c.Call.Return(deleteTrustCenter, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenter_Call) RunAndReturn(run func(ctx context.Context, deleteTrustCenterID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenter, error)) *MockOpenlaneGraphClient_DeleteTrustCenter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTrustCenterCompliance provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteTrustCenterCompliance(ctx context.Context, deleteTrustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterCompliance, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteTrustCenterComplianceID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteTrustCenterComplianceID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustCenterCompliance")
	}

	var r0 *openlaneclient.DeleteTrustCenterCompliance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterCompliance, error)); ok {
		return returnFunc(ctx, deleteTrustCenterComplianceID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteTrustCenterCompliance); ok {
		r0 = returnFunc(ctx, deleteTrustCenterComplianceID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteTrustCenterCompliance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteTrustCenterComplianceID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrustCenterCompliance'
type MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call struct {
	*mock.Call
}

// DeleteTrustCenterCompliance is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteTrustCenterComplianceID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteTrustCenterCompliance(ctx interface{}, deleteTrustCenterComplianceID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call {
	return &MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call{Call: _e.mock.On("DeleteTrustCenterCompliance",
		append([]interface{}{ctx, deleteTrustCenterComplianceID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call) Run(run func(ctx context.Context, deleteTrustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call) Return(deleteTrustCenterCompliance *openlaneclient.DeleteTrustCenterCompliance, err error) *MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call {
	_c.Call.Return(deleteTrustCenterCompliance, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call) RunAndReturn(run func(ctx context.Context, deleteTrustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterCompliance, error)) *MockOpenlaneGraphClient_DeleteTrustCenterCompliance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTrustCenterSetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteTrustCenterSetting(ctx context.Context, deleteTrustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterSetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteTrustCenterSettingID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteTrustCenterSettingID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustCenterSetting")
	}

	var r0 *openlaneclient.DeleteTrustCenterSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterSetting, error)); ok {
		return returnFunc(ctx, deleteTrustCenterSettingID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteTrustCenterSetting); ok {
		r0 = returnFunc(ctx, deleteTrustCenterSettingID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteTrustCenterSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteTrustCenterSettingID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrustCenterSetting'
type MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call struct {
	*mock.Call
}

// DeleteTrustCenterSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteTrustCenterSettingID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteTrustCenterSetting(ctx interface{}, deleteTrustCenterSettingID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call {
	return &MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call{Call: _e.mock.On("DeleteTrustCenterSetting",
		append([]interface{}{ctx, deleteTrustCenterSettingID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call) Run(run func(ctx context.Context, deleteTrustCenterSettingID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call) Return(deleteTrustCenterSetting *openlaneclient.DeleteTrustCenterSetting, err error) *MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call {
	_c.Call.Return(deleteTrustCenterSetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call) RunAndReturn(run func(ctx context.Context, deleteTrustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterSetting, error)) *MockOpenlaneGraphClient_DeleteTrustCenterSetting_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTrustCenterSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteTrustCenterSubprocessor(ctx context.Context, deleteTrustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteTrustCenterSubprocessorID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteTrustCenterSubprocessorID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustCenterSubprocessor")
	}

	var r0 *openlaneclient.DeleteTrustCenterSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterSubprocessor, error)); ok {
		return returnFunc(ctx, deleteTrustCenterSubprocessorID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteTrustCenterSubprocessor); ok {
		r0 = returnFunc(ctx, deleteTrustCenterSubprocessorID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteTrustCenterSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteTrustCenterSubprocessorID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrustCenterSubprocessor'
type MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call struct {
	*mock.Call
}

// DeleteTrustCenterSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteTrustCenterSubprocessorID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteTrustCenterSubprocessor(ctx interface{}, deleteTrustCenterSubprocessorID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call {
	return &MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call{Call: _e.mock.On("DeleteTrustCenterSubprocessor",
		append([]interface{}{ctx, deleteTrustCenterSubprocessorID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call) Run(run func(ctx context.Context, deleteTrustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call) Return(deleteTrustCenterSubprocessor *openlaneclient.DeleteTrustCenterSubprocessor, err error) *MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call {
	_c.Call.Return(deleteTrustCenterSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call) RunAndReturn(run func(ctx context.Context, deleteTrustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteTrustCenterSubprocessor, error)) *MockOpenlaneGraphClient_DeleteTrustCenterSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteUser, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteUserID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteUserID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *openlaneclient.DeleteUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteUser, error)); ok {
		return returnFunc(ctx, deleteUserID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteUser); ok {
		r0 = returnFunc(ctx, deleteUserID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteUserID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockOpenlaneGraphClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteUserID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteUser(ctx interface{}, deleteUserID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteUser_Call {
	return &MockOpenlaneGraphClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser",
		append([]interface{}{ctx, deleteUserID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteUser_Call) Run(run func(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteUser_Call) Return(deleteUser *openlaneclient.DeleteUser, err error) *MockOpenlaneGraphClient_DeleteUser_Call {
	_c.Call.Return(deleteUser, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteUser, error)) *MockOpenlaneGraphClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWebauthn provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) DeleteWebauthn(ctx context.Context, deleteWebauthnID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteWebauthn, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteWebauthnID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteWebauthnID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebauthn")
	}

	var r0 *openlaneclient.DeleteWebauthn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.DeleteWebauthn, error)); ok {
		return returnFunc(ctx, deleteWebauthnID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.DeleteWebauthn); ok {
		r0 = returnFunc(ctx, deleteWebauthnID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.DeleteWebauthn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteWebauthnID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_DeleteWebauthn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWebauthn'
type MockOpenlaneGraphClient_DeleteWebauthn_Call struct {
	*mock.Call
}

// DeleteWebauthn is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteWebauthnID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) DeleteWebauthn(ctx interface{}, deleteWebauthnID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_DeleteWebauthn_Call {
	return &MockOpenlaneGraphClient_DeleteWebauthn_Call{Call: _e.mock.On("DeleteWebauthn",
		append([]interface{}{ctx, deleteWebauthnID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_DeleteWebauthn_Call) Run(run func(ctx context.Context, deleteWebauthnID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_DeleteWebauthn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteWebauthn_Call) Return(deleteWebauthn *openlaneclient.DeleteWebauthn, err error) *MockOpenlaneGraphClient_DeleteWebauthn_Call {
	_c.Call.Return(deleteWebauthn, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_DeleteWebauthn_Call) RunAndReturn(run func(ctx context.Context, deleteWebauthnID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.DeleteWebauthn, error)) *MockOpenlaneGraphClient_DeleteWebauthn_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPITokenByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAPITokenByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, apiTokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, apiTokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAPITokenByID")
	}

	var r0 *openlaneclient.GetAPITokenByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetAPITokenByID, error)); ok {
		return returnFunc(ctx, apiTokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetAPITokenByID); ok {
		r0 = returnFunc(ctx, apiTokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAPITokenByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, apiTokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAPITokenByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPITokenByID'
type MockOpenlaneGraphClient_GetAPITokenByID_Call struct {
	*mock.Call
}

// GetAPITokenByID is a helper method to define mock.On call
//   - ctx context.Context
//   - apiTokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAPITokenByID(ctx interface{}, apiTokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAPITokenByID_Call {
	return &MockOpenlaneGraphClient_GetAPITokenByID_Call{Call: _e.mock.On("GetAPITokenByID",
		append([]interface{}{ctx, apiTokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAPITokenByID_Call) Run(run func(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAPITokenByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAPITokenByID_Call) Return(getAPITokenByID *openlaneclient.GetAPITokenByID, err error) *MockOpenlaneGraphClient_GetAPITokenByID_Call {
	_c.Call.Return(getAPITokenByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAPITokenByID_Call) RunAndReturn(run func(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAPITokenByID, error)) *MockOpenlaneGraphClient_GetAPITokenByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPITokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAPITokens(ctx context.Context, where *openlaneclient.APITokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAPITokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAPITokens")
	}

	var r0 *openlaneclient.GetAPITokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.APITokenWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetAPITokens, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.APITokenWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetAPITokens); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAPITokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.APITokenWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAPITokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPITokens'
type MockOpenlaneGraphClient_GetAPITokens_Call struct {
	*mock.Call
}

// GetAPITokens is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.APITokenWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAPITokens(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAPITokens_Call {
	return &MockOpenlaneGraphClient_GetAPITokens_Call{Call: _e.mock.On("GetAPITokens",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAPITokens_Call) Run(run func(ctx context.Context, where *openlaneclient.APITokenWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAPITokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.APITokenWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.APITokenWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAPITokens_Call) Return(getAPITokens *openlaneclient.GetAPITokens, err error) *MockOpenlaneGraphClient_GetAPITokens_Call {
	_c.Call.Return(getAPITokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAPITokens_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.APITokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAPITokens, error)) *MockOpenlaneGraphClient_GetAPITokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionPlanByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetActionPlanByID(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlanByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, actionPlanID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, actionPlanID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetActionPlanByID")
	}

	var r0 *openlaneclient.GetActionPlanByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlanByID, error)); ok {
		return returnFunc(ctx, actionPlanID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetActionPlanByID); ok {
		r0 = returnFunc(ctx, actionPlanID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetActionPlanByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, actionPlanID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetActionPlanByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionPlanByID'
type MockOpenlaneGraphClient_GetActionPlanByID_Call struct {
	*mock.Call
}

// GetActionPlanByID is a helper method to define mock.On call
//   - ctx context.Context
//   - actionPlanID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetActionPlanByID(ctx interface{}, actionPlanID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetActionPlanByID_Call {
	return &MockOpenlaneGraphClient_GetActionPlanByID_Call{Call: _e.mock.On("GetActionPlanByID",
		append([]interface{}{ctx, actionPlanID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetActionPlanByID_Call) Run(run func(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetActionPlanByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetActionPlanByID_Call) Return(getActionPlanByID *openlaneclient.GetActionPlanByID, err error) *MockOpenlaneGraphClient_GetActionPlanByID_Call {
	_c.Call.Return(getActionPlanByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetActionPlanByID_Call) RunAndReturn(run func(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlanByID, error)) *MockOpenlaneGraphClient_GetActionPlanByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionPlanHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetActionPlanHistories(ctx context.Context, where *openlaneclient.ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlanHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetActionPlanHistories")
	}

	var r0 *openlaneclient.GetActionPlanHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ActionPlanHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlanHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ActionPlanHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetActionPlanHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetActionPlanHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ActionPlanHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetActionPlanHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionPlanHistories'
type MockOpenlaneGraphClient_GetActionPlanHistories_Call struct {
	*mock.Call
}

// GetActionPlanHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ActionPlanHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetActionPlanHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetActionPlanHistories_Call {
	return &MockOpenlaneGraphClient_GetActionPlanHistories_Call{Call: _e.mock.On("GetActionPlanHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetActionPlanHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetActionPlanHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ActionPlanHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ActionPlanHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetActionPlanHistories_Call) Return(getActionPlanHistories *openlaneclient.GetActionPlanHistories, err error) *MockOpenlaneGraphClient_GetActionPlanHistories_Call {
	_c.Call.Return(getActionPlanHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetActionPlanHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlanHistories, error)) *MockOpenlaneGraphClient_GetActionPlanHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionPlans provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetActionPlans(ctx context.Context, where *openlaneclient.ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlans, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetActionPlans")
	}

	var r0 *openlaneclient.GetActionPlans
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ActionPlanWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlans, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ActionPlanWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetActionPlans); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetActionPlans)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ActionPlanWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetActionPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionPlans'
type MockOpenlaneGraphClient_GetActionPlans_Call struct {
	*mock.Call
}

// GetActionPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ActionPlanWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetActionPlans(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetActionPlans_Call {
	return &MockOpenlaneGraphClient_GetActionPlans_Call{Call: _e.mock.On("GetActionPlans",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetActionPlans_Call) Run(run func(ctx context.Context, where *openlaneclient.ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetActionPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ActionPlanWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ActionPlanWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetActionPlans_Call) Return(getActionPlans *openlaneclient.GetActionPlans, err error) *MockOpenlaneGraphClient_GetActionPlans_Call {
	_c.Call.Return(getActionPlans, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetActionPlans_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetActionPlans, error)) *MockOpenlaneGraphClient_GetActionPlans_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAPITokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAPITokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllAPITokens")
	}

	var r0 *openlaneclient.GetAllAPITokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAPITokens, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllAPITokens); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllAPITokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllAPITokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAPITokens'
type MockOpenlaneGraphClient_GetAllAPITokens_Call struct {
	*mock.Call
}

// GetAllAPITokens is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllAPITokens(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllAPITokens_Call {
	return &MockOpenlaneGraphClient_GetAllAPITokens_Call{Call: _e.mock.On("GetAllAPITokens",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllAPITokens_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllAPITokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllAPITokens_Call) Return(getAllAPITokens *openlaneclient.GetAllAPITokens, err error) *MockOpenlaneGraphClient_GetAllAPITokens_Call {
	_c.Call.Return(getAllAPITokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllAPITokens_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAPITokens, error)) *MockOpenlaneGraphClient_GetAllAPITokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActionPlanHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllActionPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllActionPlanHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllActionPlanHistories")
	}

	var r0 *openlaneclient.GetAllActionPlanHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllActionPlanHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllActionPlanHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllActionPlanHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllActionPlanHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActionPlanHistories'
type MockOpenlaneGraphClient_GetAllActionPlanHistories_Call struct {
	*mock.Call
}

// GetAllActionPlanHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllActionPlanHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllActionPlanHistories_Call {
	return &MockOpenlaneGraphClient_GetAllActionPlanHistories_Call{Call: _e.mock.On("GetAllActionPlanHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllActionPlanHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllActionPlanHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllActionPlanHistories_Call) Return(getAllActionPlanHistories *openlaneclient.GetAllActionPlanHistories, err error) *MockOpenlaneGraphClient_GetAllActionPlanHistories_Call {
	_c.Call.Return(getAllActionPlanHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllActionPlanHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllActionPlanHistories, error)) *MockOpenlaneGraphClient_GetAllActionPlanHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActionPlans provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllActionPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllActionPlans, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllActionPlans")
	}

	var r0 *openlaneclient.GetAllActionPlans
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllActionPlans, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllActionPlans); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllActionPlans)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllActionPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActionPlans'
type MockOpenlaneGraphClient_GetAllActionPlans_Call struct {
	*mock.Call
}

// GetAllActionPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllActionPlans(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllActionPlans_Call {
	return &MockOpenlaneGraphClient_GetAllActionPlans_Call{Call: _e.mock.On("GetAllActionPlans",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllActionPlans_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllActionPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllActionPlans_Call) Return(getAllActionPlans *openlaneclient.GetAllActionPlans, err error) *MockOpenlaneGraphClient_GetAllActionPlans_Call {
	_c.Call.Return(getAllActionPlans, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllActionPlans_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllActionPlans, error)) *MockOpenlaneGraphClient_GetAllActionPlans_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAssetHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllAssetHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAssetHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssetHistories")
	}

	var r0 *openlaneclient.GetAllAssetHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAssetHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllAssetHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllAssetHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllAssetHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssetHistories'
type MockOpenlaneGraphClient_GetAllAssetHistories_Call struct {
	*mock.Call
}

// GetAllAssetHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllAssetHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllAssetHistories_Call {
	return &MockOpenlaneGraphClient_GetAllAssetHistories_Call{Call: _e.mock.On("GetAllAssetHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllAssetHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllAssetHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllAssetHistories_Call) Return(getAllAssetHistories *openlaneclient.GetAllAssetHistories, err error) *MockOpenlaneGraphClient_GetAllAssetHistories_Call {
	_c.Call.Return(getAllAssetHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllAssetHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAssetHistories, error)) *MockOpenlaneGraphClient_GetAllAssetHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAssets provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllAssets(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAssets, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssets")
	}

	var r0 *openlaneclient.GetAllAssets
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAssets, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllAssets); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllAssets)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssets'
type MockOpenlaneGraphClient_GetAllAssets_Call struct {
	*mock.Call
}

// GetAllAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllAssets(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllAssets_Call {
	return &MockOpenlaneGraphClient_GetAllAssets_Call{Call: _e.mock.On("GetAllAssets",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllAssets_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllAssets_Call) Return(getAllAssets *openlaneclient.GetAllAssets, err error) *MockOpenlaneGraphClient_GetAllAssets_Call {
	_c.Call.Return(getAllAssets, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllAssets_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllAssets, error)) *MockOpenlaneGraphClient_GetAllAssets_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllContactHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllContactHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllContactHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllContactHistories")
	}

	var r0 *openlaneclient.GetAllContactHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllContactHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllContactHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllContactHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllContactHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllContactHistories'
type MockOpenlaneGraphClient_GetAllContactHistories_Call struct {
	*mock.Call
}

// GetAllContactHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllContactHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllContactHistories_Call {
	return &MockOpenlaneGraphClient_GetAllContactHistories_Call{Call: _e.mock.On("GetAllContactHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllContactHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllContactHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllContactHistories_Call) Return(getAllContactHistories *openlaneclient.GetAllContactHistories, err error) *MockOpenlaneGraphClient_GetAllContactHistories_Call {
	_c.Call.Return(getAllContactHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllContactHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllContactHistories, error)) *MockOpenlaneGraphClient_GetAllContactHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllContacts provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllContacts(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllContacts, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllContacts")
	}

	var r0 *openlaneclient.GetAllContacts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllContacts, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllContacts); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllContacts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllContacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllContacts'
type MockOpenlaneGraphClient_GetAllContacts_Call struct {
	*mock.Call
}

// GetAllContacts is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllContacts(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllContacts_Call {
	return &MockOpenlaneGraphClient_GetAllContacts_Call{Call: _e.mock.On("GetAllContacts",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllContacts_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllContacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllContacts_Call) Return(getAllContacts *openlaneclient.GetAllContacts, err error) *MockOpenlaneGraphClient_GetAllContacts_Call {
	_c.Call.Return(getAllContacts, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllContacts_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllContacts, error)) *MockOpenlaneGraphClient_GetAllContacts_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControlHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControlHistories")
	}

	var r0 *openlaneclient.GetAllControlHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControlHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControlHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControlHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControlHistories'
type MockOpenlaneGraphClient_GetAllControlHistories_Call struct {
	*mock.Call
}

// GetAllControlHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControlHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControlHistories_Call {
	return &MockOpenlaneGraphClient_GetAllControlHistories_Call{Call: _e.mock.On("GetAllControlHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControlHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControlHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlHistories_Call) Return(getAllControlHistories *openlaneclient.GetAllControlHistories, err error) *MockOpenlaneGraphClient_GetAllControlHistories_Call {
	_c.Call.Return(getAllControlHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlHistories, error)) *MockOpenlaneGraphClient_GetAllControlHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControlImplementationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControlImplementationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlImplementationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControlImplementationHistories")
	}

	var r0 *openlaneclient.GetAllControlImplementationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlImplementationHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControlImplementationHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControlImplementationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControlImplementationHistories'
type MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call struct {
	*mock.Call
}

// GetAllControlImplementationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControlImplementationHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call {
	return &MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call{Call: _e.mock.On("GetAllControlImplementationHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call) Return(getAllControlImplementationHistories *openlaneclient.GetAllControlImplementationHistories, err error) *MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call {
	_c.Call.Return(getAllControlImplementationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlImplementationHistories, error)) *MockOpenlaneGraphClient_GetAllControlImplementationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControlImplementations provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControlImplementations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlImplementations, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControlImplementations")
	}

	var r0 *openlaneclient.GetAllControlImplementations
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlImplementations, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControlImplementations); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControlImplementations)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControlImplementations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControlImplementations'
type MockOpenlaneGraphClient_GetAllControlImplementations_Call struct {
	*mock.Call
}

// GetAllControlImplementations is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControlImplementations(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControlImplementations_Call {
	return &MockOpenlaneGraphClient_GetAllControlImplementations_Call{Call: _e.mock.On("GetAllControlImplementations",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControlImplementations_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControlImplementations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlImplementations_Call) Return(getAllControlImplementations *openlaneclient.GetAllControlImplementations, err error) *MockOpenlaneGraphClient_GetAllControlImplementations_Call {
	_c.Call.Return(getAllControlImplementations, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlImplementations_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlImplementations, error)) *MockOpenlaneGraphClient_GetAllControlImplementations_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControlObjectiveHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControlObjectiveHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlObjectiveHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControlObjectiveHistories")
	}

	var r0 *openlaneclient.GetAllControlObjectiveHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlObjectiveHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControlObjectiveHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControlObjectiveHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControlObjectiveHistories'
type MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call struct {
	*mock.Call
}

// GetAllControlObjectiveHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControlObjectiveHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call {
	return &MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call{Call: _e.mock.On("GetAllControlObjectiveHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call) Return(getAllControlObjectiveHistories *openlaneclient.GetAllControlObjectiveHistories, err error) *MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call {
	_c.Call.Return(getAllControlObjectiveHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlObjectiveHistories, error)) *MockOpenlaneGraphClient_GetAllControlObjectiveHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControlObjectives provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControlObjectives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlObjectives, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControlObjectives")
	}

	var r0 *openlaneclient.GetAllControlObjectives
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlObjectives, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControlObjectives); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControlObjectives)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControlObjectives_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControlObjectives'
type MockOpenlaneGraphClient_GetAllControlObjectives_Call struct {
	*mock.Call
}

// GetAllControlObjectives is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControlObjectives(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControlObjectives_Call {
	return &MockOpenlaneGraphClient_GetAllControlObjectives_Call{Call: _e.mock.On("GetAllControlObjectives",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControlObjectives_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControlObjectives_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlObjectives_Call) Return(getAllControlObjectives *openlaneclient.GetAllControlObjectives, err error) *MockOpenlaneGraphClient_GetAllControlObjectives_Call {
	_c.Call.Return(getAllControlObjectives, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlObjectives_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlObjectives, error)) *MockOpenlaneGraphClient_GetAllControlObjectives_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControlScheduledJobHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControlScheduledJobHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlScheduledJobHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControlScheduledJobHistories")
	}

	var r0 *openlaneclient.GetAllControlScheduledJobHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlScheduledJobHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControlScheduledJobHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControlScheduledJobHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControlScheduledJobHistories'
type MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call struct {
	*mock.Call
}

// GetAllControlScheduledJobHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControlScheduledJobHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call {
	return &MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call{Call: _e.mock.On("GetAllControlScheduledJobHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call) Return(getAllControlScheduledJobHistories *openlaneclient.GetAllControlScheduledJobHistories, err error) *MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call {
	_c.Call.Return(getAllControlScheduledJobHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlScheduledJobHistories, error)) *MockOpenlaneGraphClient_GetAllControlScheduledJobHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControlScheduledJobs provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControlScheduledJobs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlScheduledJobs, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControlScheduledJobs")
	}

	var r0 *openlaneclient.GetAllControlScheduledJobs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlScheduledJobs, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControlScheduledJobs); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControlScheduledJobs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControlScheduledJobs'
type MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call struct {
	*mock.Call
}

// GetAllControlScheduledJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControlScheduledJobs(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call {
	return &MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call{Call: _e.mock.On("GetAllControlScheduledJobs",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call) Return(getAllControlScheduledJobs *openlaneclient.GetAllControlScheduledJobs, err error) *MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call {
	_c.Call.Return(getAllControlScheduledJobs, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControlScheduledJobs, error)) *MockOpenlaneGraphClient_GetAllControlScheduledJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllControls provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControls, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllControls")
	}

	var r0 *openlaneclient.GetAllControls
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControls, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllControls); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllControls)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllControls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControls'
type MockOpenlaneGraphClient_GetAllControls_Call struct {
	*mock.Call
}

// GetAllControls is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllControls(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllControls_Call {
	return &MockOpenlaneGraphClient_GetAllControls_Call{Call: _e.mock.On("GetAllControls",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllControls_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllControls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControls_Call) Return(getAllControls *openlaneclient.GetAllControls, err error) *MockOpenlaneGraphClient_GetAllControls_Call {
	_c.Call.Return(getAllControls, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllControls_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllControls, error)) *MockOpenlaneGraphClient_GetAllControls_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomDomainHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllCustomDomainHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllCustomDomainHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomDomainHistories")
	}

	var r0 *openlaneclient.GetAllCustomDomainHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllCustomDomainHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllCustomDomainHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllCustomDomainHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomDomainHistories'
type MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call struct {
	*mock.Call
}

// GetAllCustomDomainHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllCustomDomainHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call {
	return &MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call{Call: _e.mock.On("GetAllCustomDomainHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call) Return(getAllCustomDomainHistories *openlaneclient.GetAllCustomDomainHistories, err error) *MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call {
	_c.Call.Return(getAllCustomDomainHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllCustomDomainHistories, error)) *MockOpenlaneGraphClient_GetAllCustomDomainHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomDomains provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllCustomDomains(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllCustomDomains, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomDomains")
	}

	var r0 *openlaneclient.GetAllCustomDomains
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllCustomDomains, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllCustomDomains); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllCustomDomains)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllCustomDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomDomains'
type MockOpenlaneGraphClient_GetAllCustomDomains_Call struct {
	*mock.Call
}

// GetAllCustomDomains is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllCustomDomains(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllCustomDomains_Call {
	return &MockOpenlaneGraphClient_GetAllCustomDomains_Call{Call: _e.mock.On("GetAllCustomDomains",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllCustomDomains_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllCustomDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllCustomDomains_Call) Return(getAllCustomDomains *openlaneclient.GetAllCustomDomains, err error) *MockOpenlaneGraphClient_GetAllCustomDomains_Call {
	_c.Call.Return(getAllCustomDomains, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllCustomDomains_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllCustomDomains, error)) *MockOpenlaneGraphClient_GetAllCustomDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDNSVerificationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllDNSVerificationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDNSVerificationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllDNSVerificationHistories")
	}

	var r0 *openlaneclient.GetAllDNSVerificationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDNSVerificationHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllDNSVerificationHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllDNSVerificationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDNSVerificationHistories'
type MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call struct {
	*mock.Call
}

// GetAllDNSVerificationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllDNSVerificationHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call {
	return &MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call{Call: _e.mock.On("GetAllDNSVerificationHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call) Return(getAllDNSVerificationHistories *openlaneclient.GetAllDNSVerificationHistories, err error) *MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call {
	_c.Call.Return(getAllDNSVerificationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDNSVerificationHistories, error)) *MockOpenlaneGraphClient_GetAllDNSVerificationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDNSVerifications provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllDNSVerifications(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDNSVerifications, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllDNSVerifications")
	}

	var r0 *openlaneclient.GetAllDNSVerifications
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDNSVerifications, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllDNSVerifications); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllDNSVerifications)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllDNSVerifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDNSVerifications'
type MockOpenlaneGraphClient_GetAllDNSVerifications_Call struct {
	*mock.Call
}

// GetAllDNSVerifications is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllDNSVerifications(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllDNSVerifications_Call {
	return &MockOpenlaneGraphClient_GetAllDNSVerifications_Call{Call: _e.mock.On("GetAllDNSVerifications",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllDNSVerifications_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllDNSVerifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllDNSVerifications_Call) Return(getAllDNSVerifications *openlaneclient.GetAllDNSVerifications, err error) *MockOpenlaneGraphClient_GetAllDNSVerifications_Call {
	_c.Call.Return(getAllDNSVerifications, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllDNSVerifications_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDNSVerifications, error)) *MockOpenlaneGraphClient_GetAllDNSVerifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDocumentDataHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllDocumentDataHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDocumentDataHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllDocumentDataHistories")
	}

	var r0 *openlaneclient.GetAllDocumentDataHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDocumentDataHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllDocumentDataHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllDocumentDataHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDocumentDataHistories'
type MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call struct {
	*mock.Call
}

// GetAllDocumentDataHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllDocumentDataHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call {
	return &MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call{Call: _e.mock.On("GetAllDocumentDataHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call) Return(getAllDocumentDataHistories *openlaneclient.GetAllDocumentDataHistories, err error) *MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call {
	_c.Call.Return(getAllDocumentDataHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllDocumentDataHistories, error)) *MockOpenlaneGraphClient_GetAllDocumentDataHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEntities provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllEntities(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntities, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllEntities")
	}

	var r0 *openlaneclient.GetAllEntities
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntities, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllEntities); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllEntities)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEntities'
type MockOpenlaneGraphClient_GetAllEntities_Call struct {
	*mock.Call
}

// GetAllEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllEntities(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllEntities_Call {
	return &MockOpenlaneGraphClient_GetAllEntities_Call{Call: _e.mock.On("GetAllEntities",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllEntities_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntities_Call) Return(getAllEntities *openlaneclient.GetAllEntities, err error) *MockOpenlaneGraphClient_GetAllEntities_Call {
	_c.Call.Return(getAllEntities, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntities_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntities, error)) *MockOpenlaneGraphClient_GetAllEntities_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEntityHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllEntityHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllEntityHistories")
	}

	var r0 *openlaneclient.GetAllEntityHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllEntityHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllEntityHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllEntityHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEntityHistories'
type MockOpenlaneGraphClient_GetAllEntityHistories_Call struct {
	*mock.Call
}

// GetAllEntityHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllEntityHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllEntityHistories_Call {
	return &MockOpenlaneGraphClient_GetAllEntityHistories_Call{Call: _e.mock.On("GetAllEntityHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllEntityHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllEntityHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntityHistories_Call) Return(getAllEntityHistories *openlaneclient.GetAllEntityHistories, err error) *MockOpenlaneGraphClient_GetAllEntityHistories_Call {
	_c.Call.Return(getAllEntityHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntityHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityHistories, error)) *MockOpenlaneGraphClient_GetAllEntityHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEntityTypeHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllEntityTypeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityTypeHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllEntityTypeHistories")
	}

	var r0 *openlaneclient.GetAllEntityTypeHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityTypeHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllEntityTypeHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllEntityTypeHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEntityTypeHistories'
type MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call struct {
	*mock.Call
}

// GetAllEntityTypeHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllEntityTypeHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call {
	return &MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call{Call: _e.mock.On("GetAllEntityTypeHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call) Return(getAllEntityTypeHistories *openlaneclient.GetAllEntityTypeHistories, err error) *MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call {
	_c.Call.Return(getAllEntityTypeHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityTypeHistories, error)) *MockOpenlaneGraphClient_GetAllEntityTypeHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEntityTypes provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllEntityTypes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityTypes, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllEntityTypes")
	}

	var r0 *openlaneclient.GetAllEntityTypes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityTypes, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllEntityTypes); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllEntityTypes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllEntityTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEntityTypes'
type MockOpenlaneGraphClient_GetAllEntityTypes_Call struct {
	*mock.Call
}

// GetAllEntityTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllEntityTypes(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllEntityTypes_Call {
	return &MockOpenlaneGraphClient_GetAllEntityTypes_Call{Call: _e.mock.On("GetAllEntityTypes",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllEntityTypes_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllEntityTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntityTypes_Call) Return(getAllEntityTypes *openlaneclient.GetAllEntityTypes, err error) *MockOpenlaneGraphClient_GetAllEntityTypes_Call {
	_c.Call.Return(getAllEntityTypes, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEntityTypes_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEntityTypes, error)) *MockOpenlaneGraphClient_GetAllEntityTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEvents provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvents, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvents")
	}

	var r0 *openlaneclient.GetAllEvents
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvents, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllEvents); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllEvents)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEvents'
type MockOpenlaneGraphClient_GetAllEvents_Call struct {
	*mock.Call
}

// GetAllEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllEvents(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllEvents_Call {
	return &MockOpenlaneGraphClient_GetAllEvents_Call{Call: _e.mock.On("GetAllEvents",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllEvents_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEvents_Call) Return(getAllEvents *openlaneclient.GetAllEvents, err error) *MockOpenlaneGraphClient_GetAllEvents_Call {
	_c.Call.Return(getAllEvents, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEvents_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvents, error)) *MockOpenlaneGraphClient_GetAllEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEvidenceHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllEvidenceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvidenceHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvidenceHistories")
	}

	var r0 *openlaneclient.GetAllEvidenceHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvidenceHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllEvidenceHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllEvidenceHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllEvidenceHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEvidenceHistories'
type MockOpenlaneGraphClient_GetAllEvidenceHistories_Call struct {
	*mock.Call
}

// GetAllEvidenceHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllEvidenceHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllEvidenceHistories_Call {
	return &MockOpenlaneGraphClient_GetAllEvidenceHistories_Call{Call: _e.mock.On("GetAllEvidenceHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllEvidenceHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllEvidenceHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEvidenceHistories_Call) Return(getAllEvidenceHistories *openlaneclient.GetAllEvidenceHistories, err error) *MockOpenlaneGraphClient_GetAllEvidenceHistories_Call {
	_c.Call.Return(getAllEvidenceHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEvidenceHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvidenceHistories, error)) *MockOpenlaneGraphClient_GetAllEvidenceHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEvidences provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllEvidences(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvidences, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvidences")
	}

	var r0 *openlaneclient.GetAllEvidences
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvidences, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllEvidences); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllEvidences)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllEvidences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEvidences'
type MockOpenlaneGraphClient_GetAllEvidences_Call struct {
	*mock.Call
}

// GetAllEvidences is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllEvidences(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllEvidences_Call {
	return &MockOpenlaneGraphClient_GetAllEvidences_Call{Call: _e.mock.On("GetAllEvidences",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllEvidences_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllEvidences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEvidences_Call) Return(getAllEvidences *openlaneclient.GetAllEvidences, err error) *MockOpenlaneGraphClient_GetAllEvidences_Call {
	_c.Call.Return(getAllEvidences, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllEvidences_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllEvidences, error)) *MockOpenlaneGraphClient_GetAllEvidences_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllExports provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllExports(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllExports, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllExports")
	}

	var r0 *openlaneclient.GetAllExports
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllExports, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllExports); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllExports)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllExports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllExports'
type MockOpenlaneGraphClient_GetAllExports_Call struct {
	*mock.Call
}

// GetAllExports is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllExports(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllExports_Call {
	return &MockOpenlaneGraphClient_GetAllExports_Call{Call: _e.mock.On("GetAllExports",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllExports_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllExports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllExports_Call) Return(getAllExports *openlaneclient.GetAllExports, err error) *MockOpenlaneGraphClient_GetAllExports_Call {
	_c.Call.Return(getAllExports, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllExports_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllExports, error)) *MockOpenlaneGraphClient_GetAllExports_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFileHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllFileHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllFileHistories")
	}

	var r0 *openlaneclient.GetAllFileHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllFileHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllFileHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllFileHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllFileHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFileHistories'
type MockOpenlaneGraphClient_GetAllFileHistories_Call struct {
	*mock.Call
}

// GetAllFileHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllFileHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllFileHistories_Call {
	return &MockOpenlaneGraphClient_GetAllFileHistories_Call{Call: _e.mock.On("GetAllFileHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllFileHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllFileHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllFileHistories_Call) Return(getAllFileHistories *openlaneclient.GetAllFileHistories, err error) *MockOpenlaneGraphClient_GetAllFileHistories_Call {
	_c.Call.Return(getAllFileHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllFileHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllFileHistories, error)) *MockOpenlaneGraphClient_GetAllFileHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFiles provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllFiles, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllFiles")
	}

	var r0 *openlaneclient.GetAllFiles
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllFiles, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllFiles); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllFiles)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFiles'
type MockOpenlaneGraphClient_GetAllFiles_Call struct {
	*mock.Call
}

// GetAllFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllFiles(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllFiles_Call {
	return &MockOpenlaneGraphClient_GetAllFiles_Call{Call: _e.mock.On("GetAllFiles",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllFiles_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllFiles_Call) Return(getAllFiles *openlaneclient.GetAllFiles, err error) *MockOpenlaneGraphClient_GetAllFiles_Call {
	_c.Call.Return(getAllFiles, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllFiles_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllFiles, error)) *MockOpenlaneGraphClient_GetAllFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroupHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroupHistories")
	}

	var r0 *openlaneclient.GetAllGroupHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllGroupHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllGroupHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllGroupHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroupHistories'
type MockOpenlaneGraphClient_GetAllGroupHistories_Call struct {
	*mock.Call
}

// GetAllGroupHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllGroupHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllGroupHistories_Call {
	return &MockOpenlaneGraphClient_GetAllGroupHistories_Call{Call: _e.mock.On("GetAllGroupHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllGroupHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllGroupHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupHistories_Call) Return(getAllGroupHistories *openlaneclient.GetAllGroupHistories, err error) *MockOpenlaneGraphClient_GetAllGroupHistories_Call {
	_c.Call.Return(getAllGroupHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupHistories, error)) *MockOpenlaneGraphClient_GetAllGroupHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroupMembershipHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllGroupMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupMembershipHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroupMembershipHistories")
	}

	var r0 *openlaneclient.GetAllGroupMembershipHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupMembershipHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllGroupMembershipHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllGroupMembershipHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroupMembershipHistories'
type MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call struct {
	*mock.Call
}

// GetAllGroupMembershipHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllGroupMembershipHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call {
	return &MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call{Call: _e.mock.On("GetAllGroupMembershipHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call) Return(getAllGroupMembershipHistories *openlaneclient.GetAllGroupMembershipHistories, err error) *MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call {
	_c.Call.Return(getAllGroupMembershipHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupMembershipHistories, error)) *MockOpenlaneGraphClient_GetAllGroupMembershipHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroupSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllGroupSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroupSettingHistories")
	}

	var r0 *openlaneclient.GetAllGroupSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupSettingHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllGroupSettingHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllGroupSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroupSettingHistories'
type MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call struct {
	*mock.Call
}

// GetAllGroupSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllGroupSettingHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call{Call: _e.mock.On("GetAllGroupSettingHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call) Return(getAllGroupSettingHistories *openlaneclient.GetAllGroupSettingHistories, err error) *MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call {
	_c.Call.Return(getAllGroupSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupSettingHistories, error)) *MockOpenlaneGraphClient_GetAllGroupSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroupSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroupSettings")
	}

	var r0 *openlaneclient.GetAllGroupSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupSettings, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllGroupSettings); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllGroupSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllGroupSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroupSettings'
type MockOpenlaneGraphClient_GetAllGroupSettings_Call struct {
	*mock.Call
}

// GetAllGroupSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllGroupSettings(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllGroupSettings_Call {
	return &MockOpenlaneGraphClient_GetAllGroupSettings_Call{Call: _e.mock.On("GetAllGroupSettings",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllGroupSettings_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllGroupSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupSettings_Call) Return(getAllGroupSettings *openlaneclient.GetAllGroupSettings, err error) *MockOpenlaneGraphClient_GetAllGroupSettings_Call {
	_c.Call.Return(getAllGroupSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroupSettings_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroupSettings, error)) *MockOpenlaneGraphClient_GetAllGroupSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroups provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroups, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroups")
	}

	var r0 *openlaneclient.GetAllGroups
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroups, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllGroups); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllGroups)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroups'
type MockOpenlaneGraphClient_GetAllGroups_Call struct {
	*mock.Call
}

// GetAllGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllGroups(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllGroups_Call {
	return &MockOpenlaneGraphClient_GetAllGroups_Call{Call: _e.mock.On("GetAllGroups",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllGroups_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroups_Call) Return(getAllGroups *openlaneclient.GetAllGroups, err error) *MockOpenlaneGraphClient_GetAllGroups_Call {
	_c.Call.Return(getAllGroups, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllGroups_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllGroups, error)) *MockOpenlaneGraphClient_GetAllGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllHushHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllHushHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllHushHistories")
	}

	var r0 *openlaneclient.GetAllHushHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllHushHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllHushHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllHushHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllHushHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllHushHistories'
type MockOpenlaneGraphClient_GetAllHushHistories_Call struct {
	*mock.Call
}

// GetAllHushHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllHushHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllHushHistories_Call {
	return &MockOpenlaneGraphClient_GetAllHushHistories_Call{Call: _e.mock.On("GetAllHushHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllHushHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllHushHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllHushHistories_Call) Return(getAllHushHistories *openlaneclient.GetAllHushHistories, err error) *MockOpenlaneGraphClient_GetAllHushHistories_Call {
	_c.Call.Return(getAllHushHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllHushHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllHushHistories, error)) *MockOpenlaneGraphClient_GetAllHushHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllHushes provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllHushes, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllHushes")
	}

	var r0 *openlaneclient.GetAllHushes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllHushes, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllHushes); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllHushes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllHushes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllHushes'
type MockOpenlaneGraphClient_GetAllHushes_Call struct {
	*mock.Call
}

// GetAllHushes is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllHushes(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllHushes_Call {
	return &MockOpenlaneGraphClient_GetAllHushes_Call{Call: _e.mock.On("GetAllHushes",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllHushes_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllHushes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllHushes_Call) Return(getAllHushes *openlaneclient.GetAllHushes, err error) *MockOpenlaneGraphClient_GetAllHushes_Call {
	_c.Call.Return(getAllHushes, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllHushes_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllHushes, error)) *MockOpenlaneGraphClient_GetAllHushes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIntegrationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllIntegrationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllIntegrationHistories")
	}

	var r0 *openlaneclient.GetAllIntegrationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllIntegrationHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllIntegrationHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllIntegrationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllIntegrationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIntegrationHistories'
type MockOpenlaneGraphClient_GetAllIntegrationHistories_Call struct {
	*mock.Call
}

// GetAllIntegrationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllIntegrationHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllIntegrationHistories_Call {
	return &MockOpenlaneGraphClient_GetAllIntegrationHistories_Call{Call: _e.mock.On("GetAllIntegrationHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllIntegrationHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllIntegrationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllIntegrationHistories_Call) Return(getAllIntegrationHistories *openlaneclient.GetAllIntegrationHistories, err error) *MockOpenlaneGraphClient_GetAllIntegrationHistories_Call {
	_c.Call.Return(getAllIntegrationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllIntegrationHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllIntegrationHistories, error)) *MockOpenlaneGraphClient_GetAllIntegrationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIntegrations provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllIntegrations, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllIntegrations")
	}

	var r0 *openlaneclient.GetAllIntegrations
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllIntegrations, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllIntegrations); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllIntegrations)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIntegrations'
type MockOpenlaneGraphClient_GetAllIntegrations_Call struct {
	*mock.Call
}

// GetAllIntegrations is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllIntegrations(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllIntegrations_Call {
	return &MockOpenlaneGraphClient_GetAllIntegrations_Call{Call: _e.mock.On("GetAllIntegrations",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllIntegrations_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllIntegrations_Call) Return(getAllIntegrations *openlaneclient.GetAllIntegrations, err error) *MockOpenlaneGraphClient_GetAllIntegrations_Call {
	_c.Call.Return(getAllIntegrations, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllIntegrations_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllIntegrations, error)) *MockOpenlaneGraphClient_GetAllIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllInternalPolicies provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllInternalPolicies(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.InternalPolicyOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInternalPolicies, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllInternalPolicies")
	}

	var r0 *openlaneclient.GetAllInternalPolicies
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.InternalPolicyOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInternalPolicies, error)); ok {
		return returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.InternalPolicyOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetAllInternalPolicies); ok {
		r0 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllInternalPolicies)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.InternalPolicyOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllInternalPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInternalPolicies'
type MockOpenlaneGraphClient_GetAllInternalPolicies_Call struct {
	*mock.Call
}

// GetAllInternalPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - orderBy []*openlaneclient.InternalPolicyOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllInternalPolicies(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllInternalPolicies_Call {
	return &MockOpenlaneGraphClient_GetAllInternalPolicies_Call{Call: _e.mock.On("GetAllInternalPolicies",
		append([]interface{}{ctx, first, last, after, before, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllInternalPolicies_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.InternalPolicyOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllInternalPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 []*openlaneclient.InternalPolicyOrder
		if args[5] != nil {
			arg5 = args[5].([]*openlaneclient.InternalPolicyOrder)
		}
		var arg6 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 6 {
			variadicArgs = args[6].([]clientv2.RequestInterceptor)
		}
		arg6 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllInternalPolicies_Call) Return(getAllInternalPolicies *openlaneclient.GetAllInternalPolicies, err error) *MockOpenlaneGraphClient_GetAllInternalPolicies_Call {
	_c.Call.Return(getAllInternalPolicies, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllInternalPolicies_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.InternalPolicyOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInternalPolicies, error)) *MockOpenlaneGraphClient_GetAllInternalPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllInternalPolicyHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllInternalPolicyHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInternalPolicyHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllInternalPolicyHistories")
	}

	var r0 *openlaneclient.GetAllInternalPolicyHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInternalPolicyHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllInternalPolicyHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllInternalPolicyHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInternalPolicyHistories'
type MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call struct {
	*mock.Call
}

// GetAllInternalPolicyHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllInternalPolicyHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call {
	return &MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call{Call: _e.mock.On("GetAllInternalPolicyHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call) Return(getAllInternalPolicyHistories *openlaneclient.GetAllInternalPolicyHistories, err error) *MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call {
	_c.Call.Return(getAllInternalPolicyHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInternalPolicyHistories, error)) *MockOpenlaneGraphClient_GetAllInternalPolicyHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllInvites provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInvites, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllInvites")
	}

	var r0 *openlaneclient.GetAllInvites
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInvites, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllInvites); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllInvites)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllInvites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInvites'
type MockOpenlaneGraphClient_GetAllInvites_Call struct {
	*mock.Call
}

// GetAllInvites is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllInvites(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllInvites_Call {
	return &MockOpenlaneGraphClient_GetAllInvites_Call{Call: _e.mock.On("GetAllInvites",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllInvites_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllInvites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllInvites_Call) Return(getAllInvites *openlaneclient.GetAllInvites, err error) *MockOpenlaneGraphClient_GetAllInvites_Call {
	_c.Call.Return(getAllInvites, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllInvites_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllInvites, error)) *MockOpenlaneGraphClient_GetAllInvites_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllJobResults provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllJobResults(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobResults, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllJobResults")
	}

	var r0 *openlaneclient.GetAllJobResults
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobResults, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllJobResults); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllJobResults)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllJobResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllJobResults'
type MockOpenlaneGraphClient_GetAllJobResults_Call struct {
	*mock.Call
}

// GetAllJobResults is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllJobResults(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllJobResults_Call {
	return &MockOpenlaneGraphClient_GetAllJobResults_Call{Call: _e.mock.On("GetAllJobResults",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllJobResults_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllJobResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobResults_Call) Return(getAllJobResults *openlaneclient.GetAllJobResults, err error) *MockOpenlaneGraphClient_GetAllJobResults_Call {
	_c.Call.Return(getAllJobResults, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobResults_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobResults, error)) *MockOpenlaneGraphClient_GetAllJobResults_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllJobRunnerRegistrationTokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllJobRunnerRegistrationTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunnerRegistrationTokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllJobRunnerRegistrationTokens")
	}

	var r0 *openlaneclient.GetAllJobRunnerRegistrationTokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunnerRegistrationTokens, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllJobRunnerRegistrationTokens); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllJobRunnerRegistrationTokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllJobRunnerRegistrationTokens'
type MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call struct {
	*mock.Call
}

// GetAllJobRunnerRegistrationTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllJobRunnerRegistrationTokens(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call {
	return &MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call{Call: _e.mock.On("GetAllJobRunnerRegistrationTokens",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call) Return(getAllJobRunnerRegistrationTokens *openlaneclient.GetAllJobRunnerRegistrationTokens, err error) *MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call {
	_c.Call.Return(getAllJobRunnerRegistrationTokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunnerRegistrationTokens, error)) *MockOpenlaneGraphClient_GetAllJobRunnerRegistrationTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllJobRunnerTokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllJobRunnerTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunnerTokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllJobRunnerTokens")
	}

	var r0 *openlaneclient.GetAllJobRunnerTokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunnerTokens, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllJobRunnerTokens); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllJobRunnerTokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllJobRunnerTokens'
type MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call struct {
	*mock.Call
}

// GetAllJobRunnerTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllJobRunnerTokens(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call {
	return &MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call{Call: _e.mock.On("GetAllJobRunnerTokens",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call) Return(getAllJobRunnerTokens *openlaneclient.GetAllJobRunnerTokens, err error) *MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call {
	_c.Call.Return(getAllJobRunnerTokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunnerTokens, error)) *MockOpenlaneGraphClient_GetAllJobRunnerTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllJobRunners provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllJobRunners(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunners, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllJobRunners")
	}

	var r0 *openlaneclient.GetAllJobRunners
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunners, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllJobRunners); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllJobRunners)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllJobRunners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllJobRunners'
type MockOpenlaneGraphClient_GetAllJobRunners_Call struct {
	*mock.Call
}

// GetAllJobRunners is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllJobRunners(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllJobRunners_Call {
	return &MockOpenlaneGraphClient_GetAllJobRunners_Call{Call: _e.mock.On("GetAllJobRunners",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunners_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllJobRunners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunners_Call) Return(getAllJobRunners *openlaneclient.GetAllJobRunners, err error) *MockOpenlaneGraphClient_GetAllJobRunners_Call {
	_c.Call.Return(getAllJobRunners, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllJobRunners_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllJobRunners, error)) *MockOpenlaneGraphClient_GetAllJobRunners_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMappableDomainHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllMappableDomainHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappableDomainHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllMappableDomainHistories")
	}

	var r0 *openlaneclient.GetAllMappableDomainHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappableDomainHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllMappableDomainHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllMappableDomainHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMappableDomainHistories'
type MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call struct {
	*mock.Call
}

// GetAllMappableDomainHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllMappableDomainHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call {
	return &MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call{Call: _e.mock.On("GetAllMappableDomainHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call) Return(getAllMappableDomainHistories *openlaneclient.GetAllMappableDomainHistories, err error) *MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call {
	_c.Call.Return(getAllMappableDomainHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappableDomainHistories, error)) *MockOpenlaneGraphClient_GetAllMappableDomainHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMappableDomains provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllMappableDomains(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappableDomains, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllMappableDomains")
	}

	var r0 *openlaneclient.GetAllMappableDomains
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappableDomains, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllMappableDomains); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllMappableDomains)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllMappableDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMappableDomains'
type MockOpenlaneGraphClient_GetAllMappableDomains_Call struct {
	*mock.Call
}

// GetAllMappableDomains is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllMappableDomains(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllMappableDomains_Call {
	return &MockOpenlaneGraphClient_GetAllMappableDomains_Call{Call: _e.mock.On("GetAllMappableDomains",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllMappableDomains_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllMappableDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappableDomains_Call) Return(getAllMappableDomains *openlaneclient.GetAllMappableDomains, err error) *MockOpenlaneGraphClient_GetAllMappableDomains_Call {
	_c.Call.Return(getAllMappableDomains, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappableDomains_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappableDomains, error)) *MockOpenlaneGraphClient_GetAllMappableDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMappedControlHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllMappedControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappedControlHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllMappedControlHistories")
	}

	var r0 *openlaneclient.GetAllMappedControlHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappedControlHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllMappedControlHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllMappedControlHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllMappedControlHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMappedControlHistories'
type MockOpenlaneGraphClient_GetAllMappedControlHistories_Call struct {
	*mock.Call
}

// GetAllMappedControlHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllMappedControlHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllMappedControlHistories_Call {
	return &MockOpenlaneGraphClient_GetAllMappedControlHistories_Call{Call: _e.mock.On("GetAllMappedControlHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllMappedControlHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllMappedControlHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappedControlHistories_Call) Return(getAllMappedControlHistories *openlaneclient.GetAllMappedControlHistories, err error) *MockOpenlaneGraphClient_GetAllMappedControlHistories_Call {
	_c.Call.Return(getAllMappedControlHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappedControlHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappedControlHistories, error)) *MockOpenlaneGraphClient_GetAllMappedControlHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMappedControls provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllMappedControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappedControls, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllMappedControls")
	}

	var r0 *openlaneclient.GetAllMappedControls
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappedControls, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllMappedControls); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllMappedControls)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllMappedControls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMappedControls'
type MockOpenlaneGraphClient_GetAllMappedControls_Call struct {
	*mock.Call
}

// GetAllMappedControls is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllMappedControls(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllMappedControls_Call {
	return &MockOpenlaneGraphClient_GetAllMappedControls_Call{Call: _e.mock.On("GetAllMappedControls",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllMappedControls_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllMappedControls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappedControls_Call) Return(getAllMappedControls *openlaneclient.GetAllMappedControls, err error) *MockOpenlaneGraphClient_GetAllMappedControls_Call {
	_c.Call.Return(getAllMappedControls, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllMappedControls_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllMappedControls, error)) *MockOpenlaneGraphClient_GetAllMappedControls_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNarrativeHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllNarrativeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNarrativeHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllNarrativeHistories")
	}

	var r0 *openlaneclient.GetAllNarrativeHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNarrativeHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllNarrativeHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllNarrativeHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllNarrativeHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNarrativeHistories'
type MockOpenlaneGraphClient_GetAllNarrativeHistories_Call struct {
	*mock.Call
}

// GetAllNarrativeHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllNarrativeHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllNarrativeHistories_Call {
	return &MockOpenlaneGraphClient_GetAllNarrativeHistories_Call{Call: _e.mock.On("GetAllNarrativeHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllNarrativeHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllNarrativeHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllNarrativeHistories_Call) Return(getAllNarrativeHistories *openlaneclient.GetAllNarrativeHistories, err error) *MockOpenlaneGraphClient_GetAllNarrativeHistories_Call {
	_c.Call.Return(getAllNarrativeHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllNarrativeHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNarrativeHistories, error)) *MockOpenlaneGraphClient_GetAllNarrativeHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNarratives provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllNarratives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNarratives, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllNarratives")
	}

	var r0 *openlaneclient.GetAllNarratives
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNarratives, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllNarratives); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllNarratives)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllNarratives_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNarratives'
type MockOpenlaneGraphClient_GetAllNarratives_Call struct {
	*mock.Call
}

// GetAllNarratives is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllNarratives(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllNarratives_Call {
	return &MockOpenlaneGraphClient_GetAllNarratives_Call{Call: _e.mock.On("GetAllNarratives",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllNarratives_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllNarratives_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllNarratives_Call) Return(getAllNarratives *openlaneclient.GetAllNarratives, err error) *MockOpenlaneGraphClient_GetAllNarratives_Call {
	_c.Call.Return(getAllNarratives, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllNarratives_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNarratives, error)) *MockOpenlaneGraphClient_GetAllNarratives_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNoteHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllNoteHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNoteHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllNoteHistories")
	}

	var r0 *openlaneclient.GetAllNoteHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNoteHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllNoteHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllNoteHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllNoteHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNoteHistories'
type MockOpenlaneGraphClient_GetAllNoteHistories_Call struct {
	*mock.Call
}

// GetAllNoteHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllNoteHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllNoteHistories_Call {
	return &MockOpenlaneGraphClient_GetAllNoteHistories_Call{Call: _e.mock.On("GetAllNoteHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllNoteHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllNoteHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllNoteHistories_Call) Return(getAllNoteHistories *openlaneclient.GetAllNoteHistories, err error) *MockOpenlaneGraphClient_GetAllNoteHistories_Call {
	_c.Call.Return(getAllNoteHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllNoteHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllNoteHistories, error)) *MockOpenlaneGraphClient_GetAllNoteHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrgMembershipHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgMembershipHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrgMembershipHistories")
	}

	var r0 *openlaneclient.GetAllOrgMembershipHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgMembershipHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllOrgMembershipHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllOrgMembershipHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrgMembershipHistories'
type MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call struct {
	*mock.Call
}

// GetAllOrgMembershipHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllOrgMembershipHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call {
	return &MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call{Call: _e.mock.On("GetAllOrgMembershipHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call) Return(getAllOrgMembershipHistories *openlaneclient.GetAllOrgMembershipHistories, err error) *MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call {
	_c.Call.Return(getAllOrgMembershipHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgMembershipHistories, error)) *MockOpenlaneGraphClient_GetAllOrgMembershipHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrgSubscriptionHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllOrgSubscriptionHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgSubscriptionHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrgSubscriptionHistories")
	}

	var r0 *openlaneclient.GetAllOrgSubscriptionHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgSubscriptionHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllOrgSubscriptionHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllOrgSubscriptionHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrgSubscriptionHistories'
type MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call struct {
	*mock.Call
}

// GetAllOrgSubscriptionHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllOrgSubscriptionHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call {
	return &MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call{Call: _e.mock.On("GetAllOrgSubscriptionHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call) Return(getAllOrgSubscriptionHistories *openlaneclient.GetAllOrgSubscriptionHistories, err error) *MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call {
	_c.Call.Return(getAllOrgSubscriptionHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgSubscriptionHistories, error)) *MockOpenlaneGraphClient_GetAllOrgSubscriptionHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrgSubscriptions provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllOrgSubscriptions(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgSubscriptions, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrgSubscriptions")
	}

	var r0 *openlaneclient.GetAllOrgSubscriptions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgSubscriptions, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllOrgSubscriptions); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllOrgSubscriptions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrgSubscriptions'
type MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call struct {
	*mock.Call
}

// GetAllOrgSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllOrgSubscriptions(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call {
	return &MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call{Call: _e.mock.On("GetAllOrgSubscriptions",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call) Return(getAllOrgSubscriptions *openlaneclient.GetAllOrgSubscriptions, err error) *MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call {
	_c.Call.Return(getAllOrgSubscriptions, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrgSubscriptions, error)) *MockOpenlaneGraphClient_GetAllOrgSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrganizationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllOrganizationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrganizationHistories")
	}

	var r0 *openlaneclient.GetAllOrganizationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllOrganizationHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllOrganizationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllOrganizationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrganizationHistories'
type MockOpenlaneGraphClient_GetAllOrganizationHistories_Call struct {
	*mock.Call
}

// GetAllOrganizationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllOrganizationHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllOrganizationHistories_Call {
	return &MockOpenlaneGraphClient_GetAllOrganizationHistories_Call{Call: _e.mock.On("GetAllOrganizationHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllOrganizationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationHistories_Call) Return(getAllOrganizationHistories *openlaneclient.GetAllOrganizationHistories, err error) *MockOpenlaneGraphClient_GetAllOrganizationHistories_Call {
	_c.Call.Return(getAllOrganizationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationHistories, error)) *MockOpenlaneGraphClient_GetAllOrganizationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrganizationSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrganizationSettingHistories")
	}

	var r0 *openlaneclient.GetAllOrganizationSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationSettingHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllOrganizationSettingHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllOrganizationSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrganizationSettingHistories'
type MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call struct {
	*mock.Call
}

// GetAllOrganizationSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllOrganizationSettingHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call{Call: _e.mock.On("GetAllOrganizationSettingHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call) Return(getAllOrganizationSettingHistories *openlaneclient.GetAllOrganizationSettingHistories, err error) *MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call {
	_c.Call.Return(getAllOrganizationSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationSettingHistories, error)) *MockOpenlaneGraphClient_GetAllOrganizationSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrganizationSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrganizationSettings")
	}

	var r0 *openlaneclient.GetAllOrganizationSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationSettings, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllOrganizationSettings); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllOrganizationSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrganizationSettings'
type MockOpenlaneGraphClient_GetAllOrganizationSettings_Call struct {
	*mock.Call
}

// GetAllOrganizationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllOrganizationSettings(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllOrganizationSettings_Call {
	return &MockOpenlaneGraphClient_GetAllOrganizationSettings_Call{Call: _e.mock.On("GetAllOrganizationSettings",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationSettings_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationSettings_Call) Return(getAllOrganizationSettings *openlaneclient.GetAllOrganizationSettings, err error) *MockOpenlaneGraphClient_GetAllOrganizationSettings_Call {
	_c.Call.Return(getAllOrganizationSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizationSettings_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizationSettings, error)) *MockOpenlaneGraphClient_GetAllOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrganizations provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizations, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrganizations")
	}

	var r0 *openlaneclient.GetAllOrganizations
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizations, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllOrganizations); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllOrganizations)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrganizations'
type MockOpenlaneGraphClient_GetAllOrganizations_Call struct {
	*mock.Call
}

// GetAllOrganizations is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllOrganizations(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllOrganizations_Call {
	return &MockOpenlaneGraphClient_GetAllOrganizations_Call{Call: _e.mock.On("GetAllOrganizations",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizations_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizations_Call) Return(getAllOrganizations *openlaneclient.GetAllOrganizations, err error) *MockOpenlaneGraphClient_GetAllOrganizations_Call {
	_c.Call.Return(getAllOrganizations, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllOrganizations_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllOrganizations, error)) *MockOpenlaneGraphClient_GetAllOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPersonalAccessTokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllPersonalAccessTokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllPersonalAccessTokens")
	}

	var r0 *openlaneclient.GetAllPersonalAccessTokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllPersonalAccessTokens, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllPersonalAccessTokens); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllPersonalAccessTokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPersonalAccessTokens'
type MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call struct {
	*mock.Call
}

// GetAllPersonalAccessTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllPersonalAccessTokens(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call {
	return &MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call{Call: _e.mock.On("GetAllPersonalAccessTokens",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call) Return(getAllPersonalAccessTokens *openlaneclient.GetAllPersonalAccessTokens, err error) *MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call {
	_c.Call.Return(getAllPersonalAccessTokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllPersonalAccessTokens, error)) *MockOpenlaneGraphClient_GetAllPersonalAccessTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProcedureHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllProcedureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProcedureHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllProcedureHistories")
	}

	var r0 *openlaneclient.GetAllProcedureHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProcedureHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllProcedureHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllProcedureHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllProcedureHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProcedureHistories'
type MockOpenlaneGraphClient_GetAllProcedureHistories_Call struct {
	*mock.Call
}

// GetAllProcedureHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllProcedureHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllProcedureHistories_Call {
	return &MockOpenlaneGraphClient_GetAllProcedureHistories_Call{Call: _e.mock.On("GetAllProcedureHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllProcedureHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllProcedureHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProcedureHistories_Call) Return(getAllProcedureHistories *openlaneclient.GetAllProcedureHistories, err error) *MockOpenlaneGraphClient_GetAllProcedureHistories_Call {
	_c.Call.Return(getAllProcedureHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProcedureHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProcedureHistories, error)) *MockOpenlaneGraphClient_GetAllProcedureHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProcedures provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllProcedures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProcedures, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllProcedures")
	}

	var r0 *openlaneclient.GetAllProcedures
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProcedures, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllProcedures); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllProcedures)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllProcedures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProcedures'
type MockOpenlaneGraphClient_GetAllProcedures_Call struct {
	*mock.Call
}

// GetAllProcedures is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllProcedures(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllProcedures_Call {
	return &MockOpenlaneGraphClient_GetAllProcedures_Call{Call: _e.mock.On("GetAllProcedures",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllProcedures_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllProcedures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProcedures_Call) Return(getAllProcedures *openlaneclient.GetAllProcedures, err error) *MockOpenlaneGraphClient_GetAllProcedures_Call {
	_c.Call.Return(getAllProcedures, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProcedures_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProcedures, error)) *MockOpenlaneGraphClient_GetAllProcedures_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProgramHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllProgramHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllProgramHistories")
	}

	var r0 *openlaneclient.GetAllProgramHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllProgramHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllProgramHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllProgramHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProgramHistories'
type MockOpenlaneGraphClient_GetAllProgramHistories_Call struct {
	*mock.Call
}

// GetAllProgramHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllProgramHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllProgramHistories_Call {
	return &MockOpenlaneGraphClient_GetAllProgramHistories_Call{Call: _e.mock.On("GetAllProgramHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllProgramHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllProgramHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProgramHistories_Call) Return(getAllProgramHistories *openlaneclient.GetAllProgramHistories, err error) *MockOpenlaneGraphClient_GetAllProgramHistories_Call {
	_c.Call.Return(getAllProgramHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProgramHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramHistories, error)) *MockOpenlaneGraphClient_GetAllProgramHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProgramMembershipHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllProgramMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramMembershipHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllProgramMembershipHistories")
	}

	var r0 *openlaneclient.GetAllProgramMembershipHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramMembershipHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllProgramMembershipHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllProgramMembershipHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProgramMembershipHistories'
type MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call struct {
	*mock.Call
}

// GetAllProgramMembershipHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllProgramMembershipHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call {
	return &MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call{Call: _e.mock.On("GetAllProgramMembershipHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call) Return(getAllProgramMembershipHistories *openlaneclient.GetAllProgramMembershipHistories, err error) *MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call {
	_c.Call.Return(getAllProgramMembershipHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramMembershipHistories, error)) *MockOpenlaneGraphClient_GetAllProgramMembershipHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProgramMemberships provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllProgramMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramMemberships, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllProgramMemberships")
	}

	var r0 *openlaneclient.GetAllProgramMemberships
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramMemberships, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllProgramMemberships); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllProgramMemberships)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllProgramMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProgramMemberships'
type MockOpenlaneGraphClient_GetAllProgramMemberships_Call struct {
	*mock.Call
}

// GetAllProgramMemberships is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllProgramMemberships(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllProgramMemberships_Call {
	return &MockOpenlaneGraphClient_GetAllProgramMemberships_Call{Call: _e.mock.On("GetAllProgramMemberships",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllProgramMemberships_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllProgramMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProgramMemberships_Call) Return(getAllProgramMemberships *openlaneclient.GetAllProgramMemberships, err error) *MockOpenlaneGraphClient_GetAllProgramMemberships_Call {
	_c.Call.Return(getAllProgramMemberships, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllProgramMemberships_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllProgramMemberships, error)) *MockOpenlaneGraphClient_GetAllProgramMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPrograms provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllPrograms(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllPrograms, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllPrograms")
	}

	var r0 *openlaneclient.GetAllPrograms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllPrograms, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllPrograms); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllPrograms)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllPrograms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPrograms'
type MockOpenlaneGraphClient_GetAllPrograms_Call struct {
	*mock.Call
}

// GetAllPrograms is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllPrograms(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllPrograms_Call {
	return &MockOpenlaneGraphClient_GetAllPrograms_Call{Call: _e.mock.On("GetAllPrograms",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllPrograms_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllPrograms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllPrograms_Call) Return(getAllPrograms *openlaneclient.GetAllPrograms, err error) *MockOpenlaneGraphClient_GetAllPrograms_Call {
	_c.Call.Return(getAllPrograms, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllPrograms_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllPrograms, error)) *MockOpenlaneGraphClient_GetAllPrograms_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRiskHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllRiskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllRiskHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllRiskHistories")
	}

	var r0 *openlaneclient.GetAllRiskHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllRiskHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllRiskHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllRiskHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllRiskHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRiskHistories'
type MockOpenlaneGraphClient_GetAllRiskHistories_Call struct {
	*mock.Call
}

// GetAllRiskHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllRiskHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllRiskHistories_Call {
	return &MockOpenlaneGraphClient_GetAllRiskHistories_Call{Call: _e.mock.On("GetAllRiskHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllRiskHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllRiskHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllRiskHistories_Call) Return(getAllRiskHistories *openlaneclient.GetAllRiskHistories, err error) *MockOpenlaneGraphClient_GetAllRiskHistories_Call {
	_c.Call.Return(getAllRiskHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllRiskHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllRiskHistories, error)) *MockOpenlaneGraphClient_GetAllRiskHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRisks provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllRisks(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.RiskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllRisks, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllRisks")
	}

	var r0 *openlaneclient.GetAllRisks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.RiskOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllRisks, error)); ok {
		return returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.RiskOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetAllRisks); ok {
		r0 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllRisks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.RiskOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllRisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRisks'
type MockOpenlaneGraphClient_GetAllRisks_Call struct {
	*mock.Call
}

// GetAllRisks is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - orderBy []*openlaneclient.RiskOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllRisks(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllRisks_Call {
	return &MockOpenlaneGraphClient_GetAllRisks_Call{Call: _e.mock.On("GetAllRisks",
		append([]interface{}{ctx, first, last, after, before, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllRisks_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.RiskOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllRisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 []*openlaneclient.RiskOrder
		if args[5] != nil {
			arg5 = args[5].([]*openlaneclient.RiskOrder)
		}
		var arg6 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 6 {
			variadicArgs = args[6].([]clientv2.RequestInterceptor)
		}
		arg6 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllRisks_Call) Return(getAllRisks *openlaneclient.GetAllRisks, err error) *MockOpenlaneGraphClient_GetAllRisks_Call {
	_c.Call.Return(getAllRisks, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllRisks_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.RiskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllRisks, error)) *MockOpenlaneGraphClient_GetAllRisks_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllScanHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllScanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScanHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllScanHistories")
	}

	var r0 *openlaneclient.GetAllScanHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScanHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllScanHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllScanHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllScanHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllScanHistories'
type MockOpenlaneGraphClient_GetAllScanHistories_Call struct {
	*mock.Call
}

// GetAllScanHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllScanHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllScanHistories_Call {
	return &MockOpenlaneGraphClient_GetAllScanHistories_Call{Call: _e.mock.On("GetAllScanHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllScanHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllScanHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScanHistories_Call) Return(getAllScanHistories *openlaneclient.GetAllScanHistories, err error) *MockOpenlaneGraphClient_GetAllScanHistories_Call {
	_c.Call.Return(getAllScanHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScanHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScanHistories, error)) *MockOpenlaneGraphClient_GetAllScanHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllScans provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllScans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScans, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllScans")
	}

	var r0 *openlaneclient.GetAllScans
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScans, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllScans); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllScans)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllScans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllScans'
type MockOpenlaneGraphClient_GetAllScans_Call struct {
	*mock.Call
}

// GetAllScans is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllScans(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllScans_Call {
	return &MockOpenlaneGraphClient_GetAllScans_Call{Call: _e.mock.On("GetAllScans",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllScans_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllScans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScans_Call) Return(getAllScans *openlaneclient.GetAllScans, err error) *MockOpenlaneGraphClient_GetAllScans_Call {
	_c.Call.Return(getAllScans, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScans_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScans, error)) *MockOpenlaneGraphClient_GetAllScans_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllScheduledJobHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllScheduledJobHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllScheduledJobHistories")
	}

	var r0 *openlaneclient.GetAllScheduledJobHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllScheduledJobHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllScheduledJobHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllScheduledJobHistories'
type MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call struct {
	*mock.Call
}

// GetAllScheduledJobHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllScheduledJobHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call {
	return &MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call{Call: _e.mock.On("GetAllScheduledJobHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call) Return(getAllScheduledJobHistories *openlaneclient.GetAllScheduledJobHistories, err error) *MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call {
	_c.Call.Return(getAllScheduledJobHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobHistories, error)) *MockOpenlaneGraphClient_GetAllScheduledJobHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllScheduledJobRuns provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllScheduledJobRuns(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobRuns, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllScheduledJobRuns")
	}

	var r0 *openlaneclient.GetAllScheduledJobRuns
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobRuns, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllScheduledJobRuns); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllScheduledJobRuns)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllScheduledJobRuns'
type MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call struct {
	*mock.Call
}

// GetAllScheduledJobRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllScheduledJobRuns(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call {
	return &MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call{Call: _e.mock.On("GetAllScheduledJobRuns",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call) Return(getAllScheduledJobRuns *openlaneclient.GetAllScheduledJobRuns, err error) *MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call {
	_c.Call.Return(getAllScheduledJobRuns, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobRuns, error)) *MockOpenlaneGraphClient_GetAllScheduledJobRuns_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllScheduledJobs provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllScheduledJobs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobs, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllScheduledJobs")
	}

	var r0 *openlaneclient.GetAllScheduledJobs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobs, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllScheduledJobs); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllScheduledJobs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllScheduledJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllScheduledJobs'
type MockOpenlaneGraphClient_GetAllScheduledJobs_Call struct {
	*mock.Call
}

// GetAllScheduledJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllScheduledJobs(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllScheduledJobs_Call {
	return &MockOpenlaneGraphClient_GetAllScheduledJobs_Call{Call: _e.mock.On("GetAllScheduledJobs",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobs_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllScheduledJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobs_Call) Return(getAllScheduledJobs *openlaneclient.GetAllScheduledJobs, err error) *MockOpenlaneGraphClient_GetAllScheduledJobs_Call {
	_c.Call.Return(getAllScheduledJobs, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllScheduledJobs_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllScheduledJobs, error)) *MockOpenlaneGraphClient_GetAllScheduledJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStandardHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllStandardHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllStandardHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllStandardHistories")
	}

	var r0 *openlaneclient.GetAllStandardHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllStandardHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllStandardHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllStandardHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllStandardHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStandardHistories'
type MockOpenlaneGraphClient_GetAllStandardHistories_Call struct {
	*mock.Call
}

// GetAllStandardHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllStandardHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllStandardHistories_Call {
	return &MockOpenlaneGraphClient_GetAllStandardHistories_Call{Call: _e.mock.On("GetAllStandardHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllStandardHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllStandardHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllStandardHistories_Call) Return(getAllStandardHistories *openlaneclient.GetAllStandardHistories, err error) *MockOpenlaneGraphClient_GetAllStandardHistories_Call {
	_c.Call.Return(getAllStandardHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllStandardHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllStandardHistories, error)) *MockOpenlaneGraphClient_GetAllStandardHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStandards provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllStandards(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllStandards, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllStandards")
	}

	var r0 *openlaneclient.GetAllStandards
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllStandards, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllStandards); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllStandards)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllStandards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStandards'
type MockOpenlaneGraphClient_GetAllStandards_Call struct {
	*mock.Call
}

// GetAllStandards is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllStandards(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllStandards_Call {
	return &MockOpenlaneGraphClient_GetAllStandards_Call{Call: _e.mock.On("GetAllStandards",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllStandards_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllStandards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllStandards_Call) Return(getAllStandards *openlaneclient.GetAllStandards, err error) *MockOpenlaneGraphClient_GetAllStandards_Call {
	_c.Call.Return(getAllStandards, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllStandards_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllStandards, error)) *MockOpenlaneGraphClient_GetAllStandards_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSubcontrolHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllSubcontrolHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubcontrolHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllSubcontrolHistories")
	}

	var r0 *openlaneclient.GetAllSubcontrolHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubcontrolHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllSubcontrolHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllSubcontrolHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSubcontrolHistories'
type MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call struct {
	*mock.Call
}

// GetAllSubcontrolHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllSubcontrolHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call {
	return &MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call{Call: _e.mock.On("GetAllSubcontrolHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call) Return(getAllSubcontrolHistories *openlaneclient.GetAllSubcontrolHistories, err error) *MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call {
	_c.Call.Return(getAllSubcontrolHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubcontrolHistories, error)) *MockOpenlaneGraphClient_GetAllSubcontrolHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSubcontrols provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllSubcontrols(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubcontrols, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllSubcontrols")
	}

	var r0 *openlaneclient.GetAllSubcontrols
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubcontrols, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllSubcontrols); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllSubcontrols)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllSubcontrols_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSubcontrols'
type MockOpenlaneGraphClient_GetAllSubcontrols_Call struct {
	*mock.Call
}

// GetAllSubcontrols is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllSubcontrols(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllSubcontrols_Call {
	return &MockOpenlaneGraphClient_GetAllSubcontrols_Call{Call: _e.mock.On("GetAllSubcontrols",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllSubcontrols_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllSubcontrols_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubcontrols_Call) Return(getAllSubcontrols *openlaneclient.GetAllSubcontrols, err error) *MockOpenlaneGraphClient_GetAllSubcontrols_Call {
	_c.Call.Return(getAllSubcontrols, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubcontrols_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubcontrols, error)) *MockOpenlaneGraphClient_GetAllSubcontrols_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSubprocessorHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllSubprocessorHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubprocessorHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllSubprocessorHistories")
	}

	var r0 *openlaneclient.GetAllSubprocessorHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubprocessorHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllSubprocessorHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllSubprocessorHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSubprocessorHistories'
type MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call struct {
	*mock.Call
}

// GetAllSubprocessorHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllSubprocessorHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call {
	return &MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call{Call: _e.mock.On("GetAllSubprocessorHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call) Return(getAllSubprocessorHistories *openlaneclient.GetAllSubprocessorHistories, err error) *MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call {
	_c.Call.Return(getAllSubprocessorHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubprocessorHistories, error)) *MockOpenlaneGraphClient_GetAllSubprocessorHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSubprocessors provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllSubprocessors(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubprocessors, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllSubprocessors")
	}

	var r0 *openlaneclient.GetAllSubprocessors
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubprocessors, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllSubprocessors); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllSubprocessors)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllSubprocessors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSubprocessors'
type MockOpenlaneGraphClient_GetAllSubprocessors_Call struct {
	*mock.Call
}

// GetAllSubprocessors is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllSubprocessors(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllSubprocessors_Call {
	return &MockOpenlaneGraphClient_GetAllSubprocessors_Call{Call: _e.mock.On("GetAllSubprocessors",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllSubprocessors_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllSubprocessors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubprocessors_Call) Return(getAllSubprocessors *openlaneclient.GetAllSubprocessors, err error) *MockOpenlaneGraphClient_GetAllSubprocessors_Call {
	_c.Call.Return(getAllSubprocessors, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubprocessors_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubprocessors, error)) *MockOpenlaneGraphClient_GetAllSubprocessors_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSubscribers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllSubscribers(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubscribers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllSubscribers")
	}

	var r0 *openlaneclient.GetAllSubscribers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.SubscriberOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubscribers, error)); ok {
		return returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.SubscriberOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetAllSubscribers); ok {
		r0 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllSubscribers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.SubscriberOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllSubscribers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSubscribers'
type MockOpenlaneGraphClient_GetAllSubscribers_Call struct {
	*mock.Call
}

// GetAllSubscribers is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - orderBy []*openlaneclient.SubscriberOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllSubscribers(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllSubscribers_Call {
	return &MockOpenlaneGraphClient_GetAllSubscribers_Call{Call: _e.mock.On("GetAllSubscribers",
		append([]interface{}{ctx, first, last, after, before, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllSubscribers_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.SubscriberOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllSubscribers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 []*openlaneclient.SubscriberOrder
		if args[5] != nil {
			arg5 = args[5].([]*openlaneclient.SubscriberOrder)
		}
		var arg6 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 6 {
			variadicArgs = args[6].([]clientv2.RequestInterceptor)
		}
		arg6 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubscribers_Call) Return(getAllSubscribers *openlaneclient.GetAllSubscribers, err error) *MockOpenlaneGraphClient_GetAllSubscribers_Call {
	_c.Call.Return(getAllSubscribers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllSubscribers_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllSubscribers, error)) *MockOpenlaneGraphClient_GetAllSubscribers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTFASettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTFASettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTFASettings")
	}

	var r0 *openlaneclient.GetAllTFASettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTFASettings, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTFASettings); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTFASettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTFASettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTFASettings'
type MockOpenlaneGraphClient_GetAllTFASettings_Call struct {
	*mock.Call
}

// GetAllTFASettings is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTFASettings(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTFASettings_Call {
	return &MockOpenlaneGraphClient_GetAllTFASettings_Call{Call: _e.mock.On("GetAllTFASettings",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTFASettings_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTFASettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTFASettings_Call) Return(getAllTFASettings *openlaneclient.GetAllTFASettings, err error) *MockOpenlaneGraphClient_GetAllTFASettings_Call {
	_c.Call.Return(getAllTFASettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTFASettings_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTFASettings, error)) *MockOpenlaneGraphClient_GetAllTFASettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTaskHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTaskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTaskHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTaskHistories")
	}

	var r0 *openlaneclient.GetAllTaskHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTaskHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTaskHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTaskHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTaskHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTaskHistories'
type MockOpenlaneGraphClient_GetAllTaskHistories_Call struct {
	*mock.Call
}

// GetAllTaskHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTaskHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTaskHistories_Call {
	return &MockOpenlaneGraphClient_GetAllTaskHistories_Call{Call: _e.mock.On("GetAllTaskHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTaskHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTaskHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTaskHistories_Call) Return(getAllTaskHistories *openlaneclient.GetAllTaskHistories, err error) *MockOpenlaneGraphClient_GetAllTaskHistories_Call {
	_c.Call.Return(getAllTaskHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTaskHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTaskHistories, error)) *MockOpenlaneGraphClient_GetAllTaskHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTasks provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTasks(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.TaskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTasks, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 *openlaneclient.GetAllTasks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.TaskOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTasks, error)); ok {
		return returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.TaskOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTasks); ok {
		r0 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTasks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, []*openlaneclient.TaskOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTasks'
type MockOpenlaneGraphClient_GetAllTasks_Call struct {
	*mock.Call
}

// GetAllTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - orderBy []*openlaneclient.TaskOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTasks(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTasks_Call {
	return &MockOpenlaneGraphClient_GetAllTasks_Call{Call: _e.mock.On("GetAllTasks",
		append([]interface{}{ctx, first, last, after, before, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTasks_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.TaskOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 []*openlaneclient.TaskOrder
		if args[5] != nil {
			arg5 = args[5].([]*openlaneclient.TaskOrder)
		}
		var arg6 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 6 {
			variadicArgs = args[6].([]clientv2.RequestInterceptor)
		}
		arg6 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTasks_Call) Return(getAllTasks *openlaneclient.GetAllTasks, err error) *MockOpenlaneGraphClient_GetAllTasks_Call {
	_c.Call.Return(getAllTasks, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTasks_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*openlaneclient.TaskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTasks, error)) *MockOpenlaneGraphClient_GetAllTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTemplateHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTemplateHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTemplateHistories")
	}

	var r0 *openlaneclient.GetAllTemplateHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTemplateHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTemplateHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTemplateHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTemplateHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTemplateHistories'
type MockOpenlaneGraphClient_GetAllTemplateHistories_Call struct {
	*mock.Call
}

// GetAllTemplateHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTemplateHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTemplateHistories_Call {
	return &MockOpenlaneGraphClient_GetAllTemplateHistories_Call{Call: _e.mock.On("GetAllTemplateHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTemplateHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTemplateHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTemplateHistories_Call) Return(getAllTemplateHistories *openlaneclient.GetAllTemplateHistories, err error) *MockOpenlaneGraphClient_GetAllTemplateHistories_Call {
	_c.Call.Return(getAllTemplateHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTemplateHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTemplateHistories, error)) *MockOpenlaneGraphClient_GetAllTemplateHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTemplates provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTemplates, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTemplates")
	}

	var r0 *openlaneclient.GetAllTemplates
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTemplates, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTemplates); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTemplates)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTemplates'
type MockOpenlaneGraphClient_GetAllTemplates_Call struct {
	*mock.Call
}

// GetAllTemplates is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTemplates(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTemplates_Call {
	return &MockOpenlaneGraphClient_GetAllTemplates_Call{Call: _e.mock.On("GetAllTemplates",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTemplates_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTemplates_Call) Return(getAllTemplates *openlaneclient.GetAllTemplates, err error) *MockOpenlaneGraphClient_GetAllTemplates_Call {
	_c.Call.Return(getAllTemplates, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTemplates_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTemplates, error)) *MockOpenlaneGraphClient_GetAllTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenterComplianceHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenterComplianceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterComplianceHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenterComplianceHistories")
	}

	var r0 *openlaneclient.GetAllTrustCenterComplianceHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterComplianceHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenterComplianceHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenterComplianceHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenterComplianceHistories'
type MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call struct {
	*mock.Call
}

// GetAllTrustCenterComplianceHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenterComplianceHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call{Call: _e.mock.On("GetAllTrustCenterComplianceHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call) Return(getAllTrustCenterComplianceHistories *openlaneclient.GetAllTrustCenterComplianceHistories, err error) *MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call {
	_c.Call.Return(getAllTrustCenterComplianceHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterComplianceHistories, error)) *MockOpenlaneGraphClient_GetAllTrustCenterComplianceHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenterCompliances provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenterCompliances(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterCompliances, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenterCompliances")
	}

	var r0 *openlaneclient.GetAllTrustCenterCompliances
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterCompliances, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenterCompliances); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenterCompliances)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenterCompliances'
type MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call struct {
	*mock.Call
}

// GetAllTrustCenterCompliances is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenterCompliances(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call{Call: _e.mock.On("GetAllTrustCenterCompliances",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call) Return(getAllTrustCenterCompliances *openlaneclient.GetAllTrustCenterCompliances, err error) *MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call {
	_c.Call.Return(getAllTrustCenterCompliances, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterCompliances, error)) *MockOpenlaneGraphClient_GetAllTrustCenterCompliances_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenterHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenterHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenterHistories")
	}

	var r0 *openlaneclient.GetAllTrustCenterHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenterHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenterHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenterHistories'
type MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call struct {
	*mock.Call
}

// GetAllTrustCenterHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenterHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call{Call: _e.mock.On("GetAllTrustCenterHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call) Return(getAllTrustCenterHistories *openlaneclient.GetAllTrustCenterHistories, err error) *MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call {
	_c.Call.Return(getAllTrustCenterHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterHistories, error)) *MockOpenlaneGraphClient_GetAllTrustCenterHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenterSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenterSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenterSettingHistories")
	}

	var r0 *openlaneclient.GetAllTrustCenterSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSettingHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenterSettingHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenterSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenterSettingHistories'
type MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call struct {
	*mock.Call
}

// GetAllTrustCenterSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenterSettingHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call{Call: _e.mock.On("GetAllTrustCenterSettingHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call) Return(getAllTrustCenterSettingHistories *openlaneclient.GetAllTrustCenterSettingHistories, err error) *MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call {
	_c.Call.Return(getAllTrustCenterSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSettingHistories, error)) *MockOpenlaneGraphClient_GetAllTrustCenterSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenterSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenterSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenterSettings")
	}

	var r0 *openlaneclient.GetAllTrustCenterSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSettings, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenterSettings); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenterSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenterSettings'
type MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call struct {
	*mock.Call
}

// GetAllTrustCenterSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenterSettings(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call{Call: _e.mock.On("GetAllTrustCenterSettings",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call) Return(getAllTrustCenterSettings *openlaneclient.GetAllTrustCenterSettings, err error) *MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call {
	_c.Call.Return(getAllTrustCenterSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSettings, error)) *MockOpenlaneGraphClient_GetAllTrustCenterSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenterSubprocessorHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenterSubprocessorHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSubprocessorHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenterSubprocessorHistories")
	}

	var r0 *openlaneclient.GetAllTrustCenterSubprocessorHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSubprocessorHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenterSubprocessorHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenterSubprocessorHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenterSubprocessorHistories'
type MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call struct {
	*mock.Call
}

// GetAllTrustCenterSubprocessorHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenterSubprocessorHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call{Call: _e.mock.On("GetAllTrustCenterSubprocessorHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call) Return(getAllTrustCenterSubprocessorHistories *openlaneclient.GetAllTrustCenterSubprocessorHistories, err error) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call {
	_c.Call.Return(getAllTrustCenterSubprocessorHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSubprocessorHistories, error)) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessorHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenterSubprocessors provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenterSubprocessors(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSubprocessors, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenterSubprocessors")
	}

	var r0 *openlaneclient.GetAllTrustCenterSubprocessors
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSubprocessors, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenterSubprocessors); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenterSubprocessors)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenterSubprocessors'
type MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call struct {
	*mock.Call
}

// GetAllTrustCenterSubprocessors is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenterSubprocessors(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call{Call: _e.mock.On("GetAllTrustCenterSubprocessors",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call) Return(getAllTrustCenterSubprocessors *openlaneclient.GetAllTrustCenterSubprocessors, err error) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call {
	_c.Call.Return(getAllTrustCenterSubprocessors, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenterSubprocessors, error)) *MockOpenlaneGraphClient_GetAllTrustCenterSubprocessors_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustCenters provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllTrustCenters(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenters, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustCenters")
	}

	var r0 *openlaneclient.GetAllTrustCenters
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenters, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllTrustCenters); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllTrustCenters)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllTrustCenters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustCenters'
type MockOpenlaneGraphClient_GetAllTrustCenters_Call struct {
	*mock.Call
}

// GetAllTrustCenters is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllTrustCenters(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllTrustCenters_Call {
	return &MockOpenlaneGraphClient_GetAllTrustCenters_Call{Call: _e.mock.On("GetAllTrustCenters",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenters_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllTrustCenters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenters_Call) Return(getAllTrustCenters *openlaneclient.GetAllTrustCenters, err error) *MockOpenlaneGraphClient_GetAllTrustCenters_Call {
	_c.Call.Return(getAllTrustCenters, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllTrustCenters_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllTrustCenters, error)) *MockOpenlaneGraphClient_GetAllTrustCenters_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserHistories")
	}

	var r0 *openlaneclient.GetAllUserHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllUserHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllUserHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllUserHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserHistories'
type MockOpenlaneGraphClient_GetAllUserHistories_Call struct {
	*mock.Call
}

// GetAllUserHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllUserHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllUserHistories_Call {
	return &MockOpenlaneGraphClient_GetAllUserHistories_Call{Call: _e.mock.On("GetAllUserHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllUserHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllUserHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUserHistories_Call) Return(getAllUserHistories *openlaneclient.GetAllUserHistories, err error) *MockOpenlaneGraphClient_GetAllUserHistories_Call {
	_c.Call.Return(getAllUserHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUserHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserHistories, error)) *MockOpenlaneGraphClient_GetAllUserHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserSettingHistories")
	}

	var r0 *openlaneclient.GetAllUserSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserSettingHistories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllUserSettingHistories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllUserSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllUserSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserSettingHistories'
type MockOpenlaneGraphClient_GetAllUserSettingHistories_Call struct {
	*mock.Call
}

// GetAllUserSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllUserSettingHistories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllUserSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetAllUserSettingHistories_Call{Call: _e.mock.On("GetAllUserSettingHistories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllUserSettingHistories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllUserSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUserSettingHistories_Call) Return(getAllUserSettingHistories *openlaneclient.GetAllUserSettingHistories, err error) *MockOpenlaneGraphClient_GetAllUserSettingHistories_Call {
	_c.Call.Return(getAllUserSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUserSettingHistories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserSettingHistories, error)) *MockOpenlaneGraphClient_GetAllUserSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserSettings")
	}

	var r0 *openlaneclient.GetAllUserSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserSettings, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllUserSettings); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllUserSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllUserSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserSettings'
type MockOpenlaneGraphClient_GetAllUserSettings_Call struct {
	*mock.Call
}

// GetAllUserSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllUserSettings(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllUserSettings_Call {
	return &MockOpenlaneGraphClient_GetAllUserSettings_Call{Call: _e.mock.On("GetAllUserSettings",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllUserSettings_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllUserSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUserSettings_Call) Return(getAllUserSettings *openlaneclient.GetAllUserSettings, err error) *MockOpenlaneGraphClient_GetAllUserSettings_Call {
	_c.Call.Return(getAllUserSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUserSettings_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUserSettings, error)) *MockOpenlaneGraphClient_GetAllUserSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUsers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 *openlaneclient.GetAllUsers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUsers, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllUsers); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllUsers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockOpenlaneGraphClient_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllUsers(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllUsers_Call {
	return &MockOpenlaneGraphClient_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllUsers_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUsers_Call) Return(getAllUsers *openlaneclient.GetAllUsers, err error) *MockOpenlaneGraphClient_GetAllUsers_Call {
	_c.Call.Return(getAllUsers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllUsers_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllUsers, error)) *MockOpenlaneGraphClient_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWebauthns provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAllWebauthns(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllWebauthns, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllWebauthns")
	}

	var r0 *openlaneclient.GetAllWebauthns
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetAllWebauthns, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetAllWebauthns); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAllWebauthns)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAllWebauthns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWebauthns'
type MockOpenlaneGraphClient_GetAllWebauthns_Call struct {
	*mock.Call
}

// GetAllWebauthns is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAllWebauthns(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAllWebauthns_Call {
	return &MockOpenlaneGraphClient_GetAllWebauthns_Call{Call: _e.mock.On("GetAllWebauthns",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAllWebauthns_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAllWebauthns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllWebauthns_Call) Return(getAllWebauthns *openlaneclient.GetAllWebauthns, err error) *MockOpenlaneGraphClient_GetAllWebauthns_Call {
	_c.Call.Return(getAllWebauthns, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAllWebauthns_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAllWebauthns, error)) *MockOpenlaneGraphClient_GetAllWebauthns_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAssetByID(ctx context.Context, assetID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAssetByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, assetID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, assetID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAssetByID")
	}

	var r0 *openlaneclient.GetAssetByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetAssetByID, error)); ok {
		return returnFunc(ctx, assetID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetAssetByID); ok {
		r0 = returnFunc(ctx, assetID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAssetByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, assetID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAssetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetByID'
type MockOpenlaneGraphClient_GetAssetByID_Call struct {
	*mock.Call
}

// GetAssetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - assetID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAssetByID(ctx interface{}, assetID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAssetByID_Call {
	return &MockOpenlaneGraphClient_GetAssetByID_Call{Call: _e.mock.On("GetAssetByID",
		append([]interface{}{ctx, assetID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAssetByID_Call) Run(run func(ctx context.Context, assetID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAssetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAssetByID_Call) Return(getAssetByID *openlaneclient.GetAssetByID, err error) *MockOpenlaneGraphClient_GetAssetByID_Call {
	_c.Call.Return(getAssetByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAssetByID_Call) RunAndReturn(run func(ctx context.Context, assetID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAssetByID, error)) *MockOpenlaneGraphClient_GetAssetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAssetHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.AssetHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAssetHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAssetHistories")
	}

	var r0 *openlaneclient.GetAssetHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.AssetHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetAssetHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.AssetHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetAssetHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAssetHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.AssetHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAssetHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetHistories'
type MockOpenlaneGraphClient_GetAssetHistories_Call struct {
	*mock.Call
}

// GetAssetHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.AssetHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAssetHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAssetHistories_Call {
	return &MockOpenlaneGraphClient_GetAssetHistories_Call{Call: _e.mock.On("GetAssetHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAssetHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.AssetHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAssetHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.AssetHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.AssetHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAssetHistories_Call) Return(getAssetHistories *openlaneclient.GetAssetHistories, err error) *MockOpenlaneGraphClient_GetAssetHistories_Call {
	_c.Call.Return(getAssetHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAssetHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.AssetHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAssetHistories, error)) *MockOpenlaneGraphClient_GetAssetHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssets provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetAssets(ctx context.Context, first *int64, last *int64, where *openlaneclient.AssetWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAssets, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAssets")
	}

	var r0 *openlaneclient.GetAssets
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.AssetWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetAssets, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.AssetWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetAssets); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetAssets)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.AssetWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssets'
type MockOpenlaneGraphClient_GetAssets_Call struct {
	*mock.Call
}

// GetAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.AssetWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetAssets(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetAssets_Call {
	return &MockOpenlaneGraphClient_GetAssets_Call{Call: _e.mock.On("GetAssets",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetAssets_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.AssetWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.AssetWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.AssetWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAssets_Call) Return(getAssets *openlaneclient.GetAssets, err error) *MockOpenlaneGraphClient_GetAssets_Call {
	_c.Call.Return(getAssets, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetAssets_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.AssetWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetAssets, error)) *MockOpenlaneGraphClient_GetAssets_Call {
	_c.Call.Return(run)
	return _c
}

// GetContactByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetContactByID(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetContactByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, contactID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, contactID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetContactByID")
	}

	var r0 *openlaneclient.GetContactByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetContactByID, error)); ok {
		return returnFunc(ctx, contactID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetContactByID); ok {
		r0 = returnFunc(ctx, contactID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetContactByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, contactID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetContactByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactByID'
type MockOpenlaneGraphClient_GetContactByID_Call struct {
	*mock.Call
}

// GetContactByID is a helper method to define mock.On call
//   - ctx context.Context
//   - contactID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetContactByID(ctx interface{}, contactID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetContactByID_Call {
	return &MockOpenlaneGraphClient_GetContactByID_Call{Call: _e.mock.On("GetContactByID",
		append([]interface{}{ctx, contactID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetContactByID_Call) Run(run func(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetContactByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetContactByID_Call) Return(getContactByID *openlaneclient.GetContactByID, err error) *MockOpenlaneGraphClient_GetContactByID_Call {
	_c.Call.Return(getContactByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetContactByID_Call) RunAndReturn(run func(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetContactByID, error)) *MockOpenlaneGraphClient_GetContactByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetContactHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetContactHistories(ctx context.Context, where *openlaneclient.ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetContactHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetContactHistories")
	}

	var r0 *openlaneclient.GetContactHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ContactHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetContactHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ContactHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetContactHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetContactHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ContactHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetContactHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactHistories'
type MockOpenlaneGraphClient_GetContactHistories_Call struct {
	*mock.Call
}

// GetContactHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ContactHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetContactHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetContactHistories_Call {
	return &MockOpenlaneGraphClient_GetContactHistories_Call{Call: _e.mock.On("GetContactHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetContactHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetContactHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ContactHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ContactHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetContactHistories_Call) Return(getContactHistories *openlaneclient.GetContactHistories, err error) *MockOpenlaneGraphClient_GetContactHistories_Call {
	_c.Call.Return(getContactHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetContactHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetContactHistories, error)) *MockOpenlaneGraphClient_GetContactHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetContacts provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetContacts(ctx context.Context, where *openlaneclient.ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetContacts, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetContacts")
	}

	var r0 *openlaneclient.GetContacts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ContactWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetContacts, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ContactWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetContacts); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetContacts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ContactWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetContacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContacts'
type MockOpenlaneGraphClient_GetContacts_Call struct {
	*mock.Call
}

// GetContacts is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ContactWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetContacts(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetContacts_Call {
	return &MockOpenlaneGraphClient_GetContacts_Call{Call: _e.mock.On("GetContacts",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetContacts_Call) Run(run func(ctx context.Context, where *openlaneclient.ContactWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetContacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ContactWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ContactWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetContacts_Call) Return(getContacts *openlaneclient.GetContacts, err error) *MockOpenlaneGraphClient_GetContacts_Call {
	_c.Call.Return(getContacts, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetContacts_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetContacts, error)) *MockOpenlaneGraphClient_GetContacts_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlByID(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, controlID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, controlID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlByID")
	}

	var r0 *openlaneclient.GetControlByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlByID, error)); ok {
		return returnFunc(ctx, controlID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetControlByID); ok {
		r0 = returnFunc(ctx, controlID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, controlID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlByID'
type MockOpenlaneGraphClient_GetControlByID_Call struct {
	*mock.Call
}

// GetControlByID is a helper method to define mock.On call
//   - ctx context.Context
//   - controlID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlByID(ctx interface{}, controlID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlByID_Call {
	return &MockOpenlaneGraphClient_GetControlByID_Call{Call: _e.mock.On("GetControlByID",
		append([]interface{}{ctx, controlID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlByID_Call) Run(run func(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlByID_Call) Return(getControlByID *openlaneclient.GetControlByID, err error) *MockOpenlaneGraphClient_GetControlByID_Call {
	_c.Call.Return(getControlByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlByID_Call) RunAndReturn(run func(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlByID, error)) *MockOpenlaneGraphClient_GetControlByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlCategories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlCategories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlCategories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlCategories")
	}

	var r0 *openlaneclient.GetControlCategories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlCategories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetControlCategories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlCategories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlCategories'
type MockOpenlaneGraphClient_GetControlCategories_Call struct {
	*mock.Call
}

// GetControlCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlCategories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlCategories_Call {
	return &MockOpenlaneGraphClient_GetControlCategories_Call{Call: _e.mock.On("GetControlCategories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlCategories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlCategories_Call) Return(getControlCategories *openlaneclient.GetControlCategories, err error) *MockOpenlaneGraphClient_GetControlCategories_Call {
	_c.Call.Return(getControlCategories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlCategories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlCategories, error)) *MockOpenlaneGraphClient_GetControlCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlCategoriesWithFramework provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlCategoriesWithFramework(ctx context.Context, where *openlaneclient.ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlCategoriesWithFramework, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlCategoriesWithFramework")
	}

	var r0 *openlaneclient.GetControlCategoriesWithFramework
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlCategoriesWithFramework, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlCategoriesWithFramework); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlCategoriesWithFramework)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ControlWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlCategoriesWithFramework'
type MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call struct {
	*mock.Call
}

// GetControlCategoriesWithFramework is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ControlWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlCategoriesWithFramework(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call {
	return &MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call{Call: _e.mock.On("GetControlCategoriesWithFramework",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call) Run(run func(ctx context.Context, where *openlaneclient.ControlWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ControlWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ControlWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call) Return(getControlCategoriesWithFramework *openlaneclient.GetControlCategoriesWithFramework, err error) *MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call {
	_c.Call.Return(getControlCategoriesWithFramework, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlCategoriesWithFramework, error)) *MockOpenlaneGraphClient_GetControlCategoriesWithFramework_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlHistories(ctx context.Context, where *openlaneclient.ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlHistories")
	}

	var r0 *openlaneclient.GetControlHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ControlHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlHistories'
type MockOpenlaneGraphClient_GetControlHistories_Call struct {
	*mock.Call
}

// GetControlHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ControlHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlHistories_Call {
	return &MockOpenlaneGraphClient_GetControlHistories_Call{Call: _e.mock.On("GetControlHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ControlHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ControlHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlHistories_Call) Return(getControlHistories *openlaneclient.GetControlHistories, err error) *MockOpenlaneGraphClient_GetControlHistories_Call {
	_c.Call.Return(getControlHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlHistories, error)) *MockOpenlaneGraphClient_GetControlHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlImplementationByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlImplementationByID(ctx context.Context, controlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementationByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, controlImplementationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, controlImplementationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlImplementationByID")
	}

	var r0 *openlaneclient.GetControlImplementationByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementationByID, error)); ok {
		return returnFunc(ctx, controlImplementationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetControlImplementationByID); ok {
		r0 = returnFunc(ctx, controlImplementationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlImplementationByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, controlImplementationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlImplementationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlImplementationByID'
type MockOpenlaneGraphClient_GetControlImplementationByID_Call struct {
	*mock.Call
}

// GetControlImplementationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - controlImplementationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlImplementationByID(ctx interface{}, controlImplementationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlImplementationByID_Call {
	return &MockOpenlaneGraphClient_GetControlImplementationByID_Call{Call: _e.mock.On("GetControlImplementationByID",
		append([]interface{}{ctx, controlImplementationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlImplementationByID_Call) Run(run func(ctx context.Context, controlImplementationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlImplementationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlImplementationByID_Call) Return(getControlImplementationByID *openlaneclient.GetControlImplementationByID, err error) *MockOpenlaneGraphClient_GetControlImplementationByID_Call {
	_c.Call.Return(getControlImplementationByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlImplementationByID_Call) RunAndReturn(run func(ctx context.Context, controlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementationByID, error)) *MockOpenlaneGraphClient_GetControlImplementationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlImplementationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlImplementationHistories(ctx context.Context, where *openlaneclient.ControlImplementationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlImplementationHistories")
	}

	var r0 *openlaneclient.GetControlImplementationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlImplementationHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementationHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlImplementationHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlImplementationHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlImplementationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ControlImplementationHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlImplementationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlImplementationHistories'
type MockOpenlaneGraphClient_GetControlImplementationHistories_Call struct {
	*mock.Call
}

// GetControlImplementationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ControlImplementationHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlImplementationHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlImplementationHistories_Call {
	return &MockOpenlaneGraphClient_GetControlImplementationHistories_Call{Call: _e.mock.On("GetControlImplementationHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlImplementationHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ControlImplementationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlImplementationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ControlImplementationHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ControlImplementationHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlImplementationHistories_Call) Return(getControlImplementationHistories *openlaneclient.GetControlImplementationHistories, err error) *MockOpenlaneGraphClient_GetControlImplementationHistories_Call {
	_c.Call.Return(getControlImplementationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlImplementationHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ControlImplementationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementationHistories, error)) *MockOpenlaneGraphClient_GetControlImplementationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlImplementations provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlImplementations(ctx context.Context, where *openlaneclient.ControlImplementationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementations, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlImplementations")
	}

	var r0 *openlaneclient.GetControlImplementations
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlImplementationWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementations, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlImplementationWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlImplementations); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlImplementations)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ControlImplementationWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlImplementations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlImplementations'
type MockOpenlaneGraphClient_GetControlImplementations_Call struct {
	*mock.Call
}

// GetControlImplementations is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ControlImplementationWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlImplementations(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlImplementations_Call {
	return &MockOpenlaneGraphClient_GetControlImplementations_Call{Call: _e.mock.On("GetControlImplementations",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlImplementations_Call) Run(run func(ctx context.Context, where *openlaneclient.ControlImplementationWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlImplementations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ControlImplementationWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ControlImplementationWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlImplementations_Call) Return(getControlImplementations *openlaneclient.GetControlImplementations, err error) *MockOpenlaneGraphClient_GetControlImplementations_Call {
	_c.Call.Return(getControlImplementations, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlImplementations_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ControlImplementationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlImplementations, error)) *MockOpenlaneGraphClient_GetControlImplementations_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlObjectiveByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlObjectiveByID(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectiveByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, controlObjectiveID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, controlObjectiveID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlObjectiveByID")
	}

	var r0 *openlaneclient.GetControlObjectiveByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectiveByID, error)); ok {
		return returnFunc(ctx, controlObjectiveID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetControlObjectiveByID); ok {
		r0 = returnFunc(ctx, controlObjectiveID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlObjectiveByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, controlObjectiveID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlObjectiveByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlObjectiveByID'
type MockOpenlaneGraphClient_GetControlObjectiveByID_Call struct {
	*mock.Call
}

// GetControlObjectiveByID is a helper method to define mock.On call
//   - ctx context.Context
//   - controlObjectiveID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlObjectiveByID(ctx interface{}, controlObjectiveID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlObjectiveByID_Call {
	return &MockOpenlaneGraphClient_GetControlObjectiveByID_Call{Call: _e.mock.On("GetControlObjectiveByID",
		append([]interface{}{ctx, controlObjectiveID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlObjectiveByID_Call) Run(run func(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlObjectiveByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlObjectiveByID_Call) Return(getControlObjectiveByID *openlaneclient.GetControlObjectiveByID, err error) *MockOpenlaneGraphClient_GetControlObjectiveByID_Call {
	_c.Call.Return(getControlObjectiveByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlObjectiveByID_Call) RunAndReturn(run func(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectiveByID, error)) *MockOpenlaneGraphClient_GetControlObjectiveByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlObjectiveHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlObjectiveHistories(ctx context.Context, where *openlaneclient.ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectiveHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlObjectiveHistories")
	}

	var r0 *openlaneclient.GetControlObjectiveHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlObjectiveHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectiveHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlObjectiveHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlObjectiveHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlObjectiveHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ControlObjectiveHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlObjectiveHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlObjectiveHistories'
type MockOpenlaneGraphClient_GetControlObjectiveHistories_Call struct {
	*mock.Call
}

// GetControlObjectiveHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ControlObjectiveHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlObjectiveHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlObjectiveHistories_Call {
	return &MockOpenlaneGraphClient_GetControlObjectiveHistories_Call{Call: _e.mock.On("GetControlObjectiveHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlObjectiveHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlObjectiveHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ControlObjectiveHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ControlObjectiveHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlObjectiveHistories_Call) Return(getControlObjectiveHistories *openlaneclient.GetControlObjectiveHistories, err error) *MockOpenlaneGraphClient_GetControlObjectiveHistories_Call {
	_c.Call.Return(getControlObjectiveHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlObjectiveHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectiveHistories, error)) *MockOpenlaneGraphClient_GetControlObjectiveHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlObjectives provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlObjectives(ctx context.Context, where *openlaneclient.ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectives, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlObjectives")
	}

	var r0 *openlaneclient.GetControlObjectives
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlObjectiveWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectives, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlObjectiveWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlObjectives); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlObjectives)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ControlObjectiveWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlObjectives_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlObjectives'
type MockOpenlaneGraphClient_GetControlObjectives_Call struct {
	*mock.Call
}

// GetControlObjectives is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ControlObjectiveWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlObjectives(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlObjectives_Call {
	return &MockOpenlaneGraphClient_GetControlObjectives_Call{Call: _e.mock.On("GetControlObjectives",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlObjectives_Call) Run(run func(ctx context.Context, where *openlaneclient.ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlObjectives_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ControlObjectiveWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ControlObjectiveWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlObjectives_Call) Return(getControlObjectives *openlaneclient.GetControlObjectives, err error) *MockOpenlaneGraphClient_GetControlObjectives_Call {
	_c.Call.Return(getControlObjectives, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlObjectives_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlObjectives, error)) *MockOpenlaneGraphClient_GetControlObjectives_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlScheduledJobByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlScheduledJobByID(ctx context.Context, controlScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, controlScheduledJobID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, controlScheduledJobID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlScheduledJobByID")
	}

	var r0 *openlaneclient.GetControlScheduledJobByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobByID, error)); ok {
		return returnFunc(ctx, controlScheduledJobID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetControlScheduledJobByID); ok {
		r0 = returnFunc(ctx, controlScheduledJobID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlScheduledJobByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, controlScheduledJobID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlScheduledJobByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlScheduledJobByID'
type MockOpenlaneGraphClient_GetControlScheduledJobByID_Call struct {
	*mock.Call
}

// GetControlScheduledJobByID is a helper method to define mock.On call
//   - ctx context.Context
//   - controlScheduledJobID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlScheduledJobByID(ctx interface{}, controlScheduledJobID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlScheduledJobByID_Call {
	return &MockOpenlaneGraphClient_GetControlScheduledJobByID_Call{Call: _e.mock.On("GetControlScheduledJobByID",
		append([]interface{}{ctx, controlScheduledJobID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobByID_Call) Run(run func(ctx context.Context, controlScheduledJobID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlScheduledJobByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobByID_Call) Return(getControlScheduledJobByID *openlaneclient.GetControlScheduledJobByID, err error) *MockOpenlaneGraphClient_GetControlScheduledJobByID_Call {
	_c.Call.Return(getControlScheduledJobByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobByID_Call) RunAndReturn(run func(ctx context.Context, controlScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobByID, error)) *MockOpenlaneGraphClient_GetControlScheduledJobByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlScheduledJobHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlScheduledJobHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.ControlScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlScheduledJobHistories")
	}

	var r0 *openlaneclient.GetControlScheduledJobHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ControlScheduledJobHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ControlScheduledJobHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlScheduledJobHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlScheduledJobHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ControlScheduledJobHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlScheduledJobHistories'
type MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call struct {
	*mock.Call
}

// GetControlScheduledJobHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ControlScheduledJobHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlScheduledJobHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call {
	return &MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call{Call: _e.mock.On("GetControlScheduledJobHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ControlScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ControlScheduledJobHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ControlScheduledJobHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call) Return(getControlScheduledJobHistories *openlaneclient.GetControlScheduledJobHistories, err error) *MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call {
	_c.Call.Return(getControlScheduledJobHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ControlScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobHistories, error)) *MockOpenlaneGraphClient_GetControlScheduledJobHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlScheduledJobs provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlScheduledJobs(ctx context.Context, first *int64, last *int64, where *openlaneclient.ControlScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobs, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlScheduledJobs")
	}

	var r0 *openlaneclient.GetControlScheduledJobs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ControlScheduledJobWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobs, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ControlScheduledJobWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlScheduledJobs); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlScheduledJobs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ControlScheduledJobWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlScheduledJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlScheduledJobs'
type MockOpenlaneGraphClient_GetControlScheduledJobs_Call struct {
	*mock.Call
}

// GetControlScheduledJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ControlScheduledJobWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlScheduledJobs(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlScheduledJobs_Call {
	return &MockOpenlaneGraphClient_GetControlScheduledJobs_Call{Call: _e.mock.On("GetControlScheduledJobs",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobs_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ControlScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlScheduledJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ControlScheduledJobWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ControlScheduledJobWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobs_Call) Return(getControlScheduledJobs *openlaneclient.GetControlScheduledJobs, err error) *MockOpenlaneGraphClient_GetControlScheduledJobs_Call {
	_c.Call.Return(getControlScheduledJobs, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlScheduledJobs_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ControlScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlScheduledJobs, error)) *MockOpenlaneGraphClient_GetControlScheduledJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlSubcategories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlSubcategories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlSubcategories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlSubcategories")
	}

	var r0 *openlaneclient.GetControlSubcategories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlSubcategories, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetControlSubcategories); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlSubcategories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlSubcategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlSubcategories'
type MockOpenlaneGraphClient_GetControlSubcategories_Call struct {
	*mock.Call
}

// GetControlSubcategories is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlSubcategories(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlSubcategories_Call {
	return &MockOpenlaneGraphClient_GetControlSubcategories_Call{Call: _e.mock.On("GetControlSubcategories",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlSubcategories_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlSubcategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlSubcategories_Call) Return(getControlSubcategories *openlaneclient.GetControlSubcategories, err error) *MockOpenlaneGraphClient_GetControlSubcategories_Call {
	_c.Call.Return(getControlSubcategories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlSubcategories_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlSubcategories, error)) *MockOpenlaneGraphClient_GetControlSubcategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlSubcategoriesWithFramework provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlSubcategoriesWithFramework(ctx context.Context, where *openlaneclient.ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlSubcategoriesWithFramework, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlSubcategoriesWithFramework")
	}

	var r0 *openlaneclient.GetControlSubcategoriesWithFramework
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlSubcategoriesWithFramework, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ControlWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetControlSubcategoriesWithFramework); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlSubcategoriesWithFramework)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ControlWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlSubcategoriesWithFramework'
type MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call struct {
	*mock.Call
}

// GetControlSubcategoriesWithFramework is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ControlWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlSubcategoriesWithFramework(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call {
	return &MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call{Call: _e.mock.On("GetControlSubcategoriesWithFramework",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call) Run(run func(ctx context.Context, where *openlaneclient.ControlWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ControlWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ControlWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call) Return(getControlSubcategoriesWithFramework *openlaneclient.GetControlSubcategoriesWithFramework, err error) *MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call {
	_c.Call.Return(getControlSubcategoriesWithFramework, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlSubcategoriesWithFramework, error)) *MockOpenlaneGraphClient_GetControlSubcategoriesWithFramework_Call {
	_c.Call.Return(run)
	return _c
}

// GetControls provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControls(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.ControlWhereInput, orderBy []*openlaneclient.ControlOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControls, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControls")
	}

	var r0 *openlaneclient.GetControls
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.ControlWhereInput, []*openlaneclient.ControlOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetControls, error)); ok {
		return returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.ControlWhereInput, []*openlaneclient.ControlOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetControls); ok {
		r0 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControls)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.ControlWhereInput, []*openlaneclient.ControlOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControls'
type MockOpenlaneGraphClient_GetControls_Call struct {
	*mock.Call
}

// GetControls is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - where *openlaneclient.ControlWhereInput
//   - orderBy []*openlaneclient.ControlOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControls(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, where interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControls_Call {
	return &MockOpenlaneGraphClient_GetControls_Call{Call: _e.mock.On("GetControls",
		append([]interface{}{ctx, first, last, after, before, where, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControls_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.ControlWhereInput, orderBy []*openlaneclient.ControlOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *openlaneclient.ControlWhereInput
		if args[5] != nil {
			arg5 = args[5].(*openlaneclient.ControlWhereInput)
		}
		var arg6 []*openlaneclient.ControlOrder
		if args[6] != nil {
			arg6 = args[6].([]*openlaneclient.ControlOrder)
		}
		var arg7 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 7 {
			variadicArgs = args[7].([]clientv2.RequestInterceptor)
		}
		arg7 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControls_Call) Return(getControls *openlaneclient.GetControls, err error) *MockOpenlaneGraphClient_GetControls_Call {
	_c.Call.Return(getControls, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControls_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.ControlWhereInput, orderBy []*openlaneclient.ControlOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControls, error)) *MockOpenlaneGraphClient_GetControls_Call {
	_c.Call.Return(run)
	return _c
}

// GetControlsGroupByCategory provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetControlsGroupByCategory(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.ControlWhereInput, orderBy []*openlaneclient.ControlOrder, category *string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlsGroupByCategory, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, category, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, category)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetControlsGroupByCategory")
	}

	var r0 *openlaneclient.GetControlsGroupByCategory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.ControlWhereInput, []*openlaneclient.ControlOrder, *string, ...clientv2.RequestInterceptor) (*openlaneclient.GetControlsGroupByCategory, error)); ok {
		return returnFunc(ctx, first, last, after, before, where, orderBy, category, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.ControlWhereInput, []*openlaneclient.ControlOrder, *string, ...clientv2.RequestInterceptor) *openlaneclient.GetControlsGroupByCategory); ok {
		r0 = returnFunc(ctx, first, last, after, before, where, orderBy, category, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetControlsGroupByCategory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.ControlWhereInput, []*openlaneclient.ControlOrder, *string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, where, orderBy, category, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetControlsGroupByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControlsGroupByCategory'
type MockOpenlaneGraphClient_GetControlsGroupByCategory_Call struct {
	*mock.Call
}

// GetControlsGroupByCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - where *openlaneclient.ControlWhereInput
//   - orderBy []*openlaneclient.ControlOrder
//   - category *string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetControlsGroupByCategory(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, where interface{}, orderBy interface{}, category interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetControlsGroupByCategory_Call {
	return &MockOpenlaneGraphClient_GetControlsGroupByCategory_Call{Call: _e.mock.On("GetControlsGroupByCategory",
		append([]interface{}{ctx, first, last, after, before, where, orderBy, category}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetControlsGroupByCategory_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.ControlWhereInput, orderBy []*openlaneclient.ControlOrder, category *string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetControlsGroupByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *openlaneclient.ControlWhereInput
		if args[5] != nil {
			arg5 = args[5].(*openlaneclient.ControlWhereInput)
		}
		var arg6 []*openlaneclient.ControlOrder
		if args[6] != nil {
			arg6 = args[6].([]*openlaneclient.ControlOrder)
		}
		var arg7 *string
		if args[7] != nil {
			arg7 = args[7].(*string)
		}
		var arg8 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 8 {
			variadicArgs = args[8].([]clientv2.RequestInterceptor)
		}
		arg8 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlsGroupByCategory_Call) Return(getControlsGroupByCategory *openlaneclient.GetControlsGroupByCategory, err error) *MockOpenlaneGraphClient_GetControlsGroupByCategory_Call {
	_c.Call.Return(getControlsGroupByCategory, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetControlsGroupByCategory_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.ControlWhereInput, orderBy []*openlaneclient.ControlOrder, category *string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetControlsGroupByCategory, error)) *MockOpenlaneGraphClient_GetControlsGroupByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomDomainByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetCustomDomainByID(ctx context.Context, customDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomainByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, customDomainID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, customDomainID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDomainByID")
	}

	var r0 *openlaneclient.GetCustomDomainByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomainByID, error)); ok {
		return returnFunc(ctx, customDomainID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetCustomDomainByID); ok {
		r0 = returnFunc(ctx, customDomainID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetCustomDomainByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, customDomainID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetCustomDomainByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomDomainByID'
type MockOpenlaneGraphClient_GetCustomDomainByID_Call struct {
	*mock.Call
}

// GetCustomDomainByID is a helper method to define mock.On call
//   - ctx context.Context
//   - customDomainID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetCustomDomainByID(ctx interface{}, customDomainID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetCustomDomainByID_Call {
	return &MockOpenlaneGraphClient_GetCustomDomainByID_Call{Call: _e.mock.On("GetCustomDomainByID",
		append([]interface{}{ctx, customDomainID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetCustomDomainByID_Call) Run(run func(ctx context.Context, customDomainID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetCustomDomainByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetCustomDomainByID_Call) Return(getCustomDomainByID *openlaneclient.GetCustomDomainByID, err error) *MockOpenlaneGraphClient_GetCustomDomainByID_Call {
	_c.Call.Return(getCustomDomainByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetCustomDomainByID_Call) RunAndReturn(run func(ctx context.Context, customDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomainByID, error)) *MockOpenlaneGraphClient_GetCustomDomainByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomDomainHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetCustomDomainHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.CustomDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomainHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDomainHistories")
	}

	var r0 *openlaneclient.GetCustomDomainHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.CustomDomainHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomainHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.CustomDomainHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetCustomDomainHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetCustomDomainHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.CustomDomainHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetCustomDomainHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomDomainHistories'
type MockOpenlaneGraphClient_GetCustomDomainHistories_Call struct {
	*mock.Call
}

// GetCustomDomainHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.CustomDomainHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetCustomDomainHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetCustomDomainHistories_Call {
	return &MockOpenlaneGraphClient_GetCustomDomainHistories_Call{Call: _e.mock.On("GetCustomDomainHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetCustomDomainHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.CustomDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetCustomDomainHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.CustomDomainHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.CustomDomainHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetCustomDomainHistories_Call) Return(getCustomDomainHistories *openlaneclient.GetCustomDomainHistories, err error) *MockOpenlaneGraphClient_GetCustomDomainHistories_Call {
	_c.Call.Return(getCustomDomainHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetCustomDomainHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.CustomDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomainHistories, error)) *MockOpenlaneGraphClient_GetCustomDomainHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomDomains provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetCustomDomains(ctx context.Context, first *int64, last *int64, where *openlaneclient.CustomDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomains, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDomains")
	}

	var r0 *openlaneclient.GetCustomDomains
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.CustomDomainWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomains, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.CustomDomainWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetCustomDomains); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetCustomDomains)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.CustomDomainWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetCustomDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomDomains'
type MockOpenlaneGraphClient_GetCustomDomains_Call struct {
	*mock.Call
}

// GetCustomDomains is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.CustomDomainWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetCustomDomains(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetCustomDomains_Call {
	return &MockOpenlaneGraphClient_GetCustomDomains_Call{Call: _e.mock.On("GetCustomDomains",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetCustomDomains_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.CustomDomainWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetCustomDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.CustomDomainWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.CustomDomainWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetCustomDomains_Call) Return(getCustomDomains *openlaneclient.GetCustomDomains, err error) *MockOpenlaneGraphClient_GetCustomDomains_Call {
	_c.Call.Return(getCustomDomains, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetCustomDomains_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.CustomDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetCustomDomains, error)) *MockOpenlaneGraphClient_GetCustomDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetDNSVerificationByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetDNSVerificationByID(ctx context.Context, dnsVerificationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerificationByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, dnsVerificationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, dnsVerificationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDNSVerificationByID")
	}

	var r0 *openlaneclient.GetDNSVerificationByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerificationByID, error)); ok {
		return returnFunc(ctx, dnsVerificationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetDNSVerificationByID); ok {
		r0 = returnFunc(ctx, dnsVerificationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetDNSVerificationByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, dnsVerificationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetDNSVerificationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDNSVerificationByID'
type MockOpenlaneGraphClient_GetDNSVerificationByID_Call struct {
	*mock.Call
}

// GetDNSVerificationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dnsVerificationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetDNSVerificationByID(ctx interface{}, dnsVerificationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetDNSVerificationByID_Call {
	return &MockOpenlaneGraphClient_GetDNSVerificationByID_Call{Call: _e.mock.On("GetDNSVerificationByID",
		append([]interface{}{ctx, dnsVerificationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetDNSVerificationByID_Call) Run(run func(ctx context.Context, dnsVerificationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetDNSVerificationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDNSVerificationByID_Call) Return(getDNSVerificationByID *openlaneclient.GetDNSVerificationByID, err error) *MockOpenlaneGraphClient_GetDNSVerificationByID_Call {
	_c.Call.Return(getDNSVerificationByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDNSVerificationByID_Call) RunAndReturn(run func(ctx context.Context, dnsVerificationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerificationByID, error)) *MockOpenlaneGraphClient_GetDNSVerificationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDNSVerificationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetDNSVerificationHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.DNSVerificationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerificationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDNSVerificationHistories")
	}

	var r0 *openlaneclient.GetDNSVerificationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.DNSVerificationHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerificationHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.DNSVerificationHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetDNSVerificationHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetDNSVerificationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.DNSVerificationHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetDNSVerificationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDNSVerificationHistories'
type MockOpenlaneGraphClient_GetDNSVerificationHistories_Call struct {
	*mock.Call
}

// GetDNSVerificationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.DNSVerificationHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetDNSVerificationHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetDNSVerificationHistories_Call {
	return &MockOpenlaneGraphClient_GetDNSVerificationHistories_Call{Call: _e.mock.On("GetDNSVerificationHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetDNSVerificationHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.DNSVerificationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetDNSVerificationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.DNSVerificationHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.DNSVerificationHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDNSVerificationHistories_Call) Return(getDNSVerificationHistories *openlaneclient.GetDNSVerificationHistories, err error) *MockOpenlaneGraphClient_GetDNSVerificationHistories_Call {
	_c.Call.Return(getDNSVerificationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDNSVerificationHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.DNSVerificationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerificationHistories, error)) *MockOpenlaneGraphClient_GetDNSVerificationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetDNSVerifications provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetDNSVerifications(ctx context.Context, first *int64, last *int64, where *openlaneclient.DNSVerificationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerifications, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDNSVerifications")
	}

	var r0 *openlaneclient.GetDNSVerifications
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.DNSVerificationWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerifications, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.DNSVerificationWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetDNSVerifications); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetDNSVerifications)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.DNSVerificationWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetDNSVerifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDNSVerifications'
type MockOpenlaneGraphClient_GetDNSVerifications_Call struct {
	*mock.Call
}

// GetDNSVerifications is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.DNSVerificationWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetDNSVerifications(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetDNSVerifications_Call {
	return &MockOpenlaneGraphClient_GetDNSVerifications_Call{Call: _e.mock.On("GetDNSVerifications",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetDNSVerifications_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.DNSVerificationWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetDNSVerifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.DNSVerificationWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.DNSVerificationWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDNSVerifications_Call) Return(getDNSVerifications *openlaneclient.GetDNSVerifications, err error) *MockOpenlaneGraphClient_GetDNSVerifications_Call {
	_c.Call.Return(getDNSVerifications, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDNSVerifications_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.DNSVerificationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDNSVerifications, error)) *MockOpenlaneGraphClient_GetDNSVerifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetDocumentDataByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDocumentDataByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, documentDataID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, documentDataID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentDataByID")
	}

	var r0 *openlaneclient.GetDocumentDataByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetDocumentDataByID, error)); ok {
		return returnFunc(ctx, documentDataID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetDocumentDataByID); ok {
		r0 = returnFunc(ctx, documentDataID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetDocumentDataByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, documentDataID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetDocumentDataByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDocumentDataByID'
type MockOpenlaneGraphClient_GetDocumentDataByID_Call struct {
	*mock.Call
}

// GetDocumentDataByID is a helper method to define mock.On call
//   - ctx context.Context
//   - documentDataID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetDocumentDataByID(ctx interface{}, documentDataID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetDocumentDataByID_Call {
	return &MockOpenlaneGraphClient_GetDocumentDataByID_Call{Call: _e.mock.On("GetDocumentDataByID",
		append([]interface{}{ctx, documentDataID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetDocumentDataByID_Call) Run(run func(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetDocumentDataByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDocumentDataByID_Call) Return(getDocumentDataByID *openlaneclient.GetDocumentDataByID, err error) *MockOpenlaneGraphClient_GetDocumentDataByID_Call {
	_c.Call.Return(getDocumentDataByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDocumentDataByID_Call) RunAndReturn(run func(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDocumentDataByID, error)) *MockOpenlaneGraphClient_GetDocumentDataByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDocumentDataHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetDocumentDataHistories(ctx context.Context, where *openlaneclient.DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDocumentDataHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentDataHistories")
	}

	var r0 *openlaneclient.GetDocumentDataHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.DocumentDataHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetDocumentDataHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.DocumentDataHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetDocumentDataHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetDocumentDataHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.DocumentDataHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetDocumentDataHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDocumentDataHistories'
type MockOpenlaneGraphClient_GetDocumentDataHistories_Call struct {
	*mock.Call
}

// GetDocumentDataHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.DocumentDataHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetDocumentDataHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetDocumentDataHistories_Call {
	return &MockOpenlaneGraphClient_GetDocumentDataHistories_Call{Call: _e.mock.On("GetDocumentDataHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetDocumentDataHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetDocumentDataHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.DocumentDataHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.DocumentDataHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDocumentDataHistories_Call) Return(getDocumentDataHistories *openlaneclient.GetDocumentDataHistories, err error) *MockOpenlaneGraphClient_GetDocumentDataHistories_Call {
	_c.Call.Return(getDocumentDataHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetDocumentDataHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetDocumentDataHistories, error)) *MockOpenlaneGraphClient_GetDocumentDataHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntities provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEntities(ctx context.Context, where *openlaneclient.EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntities, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEntities")
	}

	var r0 *openlaneclient.GetEntities
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetEntities, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetEntities); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEntities)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.EntityWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntities'
type MockOpenlaneGraphClient_GetEntities_Call struct {
	*mock.Call
}

// GetEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.EntityWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEntities(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEntities_Call {
	return &MockOpenlaneGraphClient_GetEntities_Call{Call: _e.mock.On("GetEntities",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEntities_Call) Run(run func(ctx context.Context, where *openlaneclient.EntityWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.EntityWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.EntityWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntities_Call) Return(getEntities *openlaneclient.GetEntities, err error) *MockOpenlaneGraphClient_GetEntities_Call {
	_c.Call.Return(getEntities, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntities_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntities, error)) *MockOpenlaneGraphClient_GetEntities_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntityByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEntityByID(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, entityID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, entityID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEntityByID")
	}

	var r0 *openlaneclient.GetEntityByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityByID, error)); ok {
		return returnFunc(ctx, entityID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetEntityByID); ok {
		r0 = returnFunc(ctx, entityID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEntityByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, entityID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEntityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityByID'
type MockOpenlaneGraphClient_GetEntityByID_Call struct {
	*mock.Call
}

// GetEntityByID is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEntityByID(ctx interface{}, entityID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEntityByID_Call {
	return &MockOpenlaneGraphClient_GetEntityByID_Call{Call: _e.mock.On("GetEntityByID",
		append([]interface{}{ctx, entityID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEntityByID_Call) Run(run func(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEntityByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityByID_Call) Return(getEntityByID *openlaneclient.GetEntityByID, err error) *MockOpenlaneGraphClient_GetEntityByID_Call {
	_c.Call.Return(getEntityByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityByID_Call) RunAndReturn(run func(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityByID, error)) *MockOpenlaneGraphClient_GetEntityByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntityHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEntityHistories(ctx context.Context, where *openlaneclient.EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEntityHistories")
	}

	var r0 *openlaneclient.GetEntityHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetEntityHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEntityHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.EntityHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEntityHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityHistories'
type MockOpenlaneGraphClient_GetEntityHistories_Call struct {
	*mock.Call
}

// GetEntityHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.EntityHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEntityHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEntityHistories_Call {
	return &MockOpenlaneGraphClient_GetEntityHistories_Call{Call: _e.mock.On("GetEntityHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEntityHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEntityHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.EntityHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.EntityHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityHistories_Call) Return(getEntityHistories *openlaneclient.GetEntityHistories, err error) *MockOpenlaneGraphClient_GetEntityHistories_Call {
	_c.Call.Return(getEntityHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityHistories, error)) *MockOpenlaneGraphClient_GetEntityHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntityTypeByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEntityTypeByID(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypeByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, entityTypeID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, entityTypeID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEntityTypeByID")
	}

	var r0 *openlaneclient.GetEntityTypeByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypeByID, error)); ok {
		return returnFunc(ctx, entityTypeID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetEntityTypeByID); ok {
		r0 = returnFunc(ctx, entityTypeID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEntityTypeByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, entityTypeID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEntityTypeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityTypeByID'
type MockOpenlaneGraphClient_GetEntityTypeByID_Call struct {
	*mock.Call
}

// GetEntityTypeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - entityTypeID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEntityTypeByID(ctx interface{}, entityTypeID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEntityTypeByID_Call {
	return &MockOpenlaneGraphClient_GetEntityTypeByID_Call{Call: _e.mock.On("GetEntityTypeByID",
		append([]interface{}{ctx, entityTypeID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEntityTypeByID_Call) Run(run func(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEntityTypeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityTypeByID_Call) Return(getEntityTypeByID *openlaneclient.GetEntityTypeByID, err error) *MockOpenlaneGraphClient_GetEntityTypeByID_Call {
	_c.Call.Return(getEntityTypeByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityTypeByID_Call) RunAndReturn(run func(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypeByID, error)) *MockOpenlaneGraphClient_GetEntityTypeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntityTypeHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEntityTypeHistories(ctx context.Context, where *openlaneclient.EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypeHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEntityTypeHistories")
	}

	var r0 *openlaneclient.GetEntityTypeHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityTypeHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypeHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityTypeHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetEntityTypeHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEntityTypeHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.EntityTypeHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEntityTypeHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityTypeHistories'
type MockOpenlaneGraphClient_GetEntityTypeHistories_Call struct {
	*mock.Call
}

// GetEntityTypeHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.EntityTypeHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEntityTypeHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEntityTypeHistories_Call {
	return &MockOpenlaneGraphClient_GetEntityTypeHistories_Call{Call: _e.mock.On("GetEntityTypeHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEntityTypeHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEntityTypeHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.EntityTypeHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.EntityTypeHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityTypeHistories_Call) Return(getEntityTypeHistories *openlaneclient.GetEntityTypeHistories, err error) *MockOpenlaneGraphClient_GetEntityTypeHistories_Call {
	_c.Call.Return(getEntityTypeHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityTypeHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypeHistories, error)) *MockOpenlaneGraphClient_GetEntityTypeHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntityTypes provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEntityTypes(ctx context.Context, where *openlaneclient.EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypes, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEntityTypes")
	}

	var r0 *openlaneclient.GetEntityTypes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityTypeWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypes, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EntityTypeWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetEntityTypes); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEntityTypes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.EntityTypeWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEntityTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityTypes'
type MockOpenlaneGraphClient_GetEntityTypes_Call struct {
	*mock.Call
}

// GetEntityTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.EntityTypeWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEntityTypes(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEntityTypes_Call {
	return &MockOpenlaneGraphClient_GetEntityTypes_Call{Call: _e.mock.On("GetEntityTypes",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEntityTypes_Call) Run(run func(ctx context.Context, where *openlaneclient.EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEntityTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.EntityTypeWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.EntityTypeWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityTypes_Call) Return(getEntityTypes *openlaneclient.GetEntityTypes, err error) *MockOpenlaneGraphClient_GetEntityTypes_Call {
	_c.Call.Return(getEntityTypes, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEntityTypes_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEntityTypes, error)) *MockOpenlaneGraphClient_GetEntityTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEventByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, eventID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, eventID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEventByID")
	}

	var r0 *openlaneclient.GetEventByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetEventByID, error)); ok {
		return returnFunc(ctx, eventID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetEventByID); ok {
		r0 = returnFunc(ctx, eventID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEventByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, eventID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEventByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventByID'
type MockOpenlaneGraphClient_GetEventByID_Call struct {
	*mock.Call
}

// GetEventByID is a helper method to define mock.On call
//   - ctx context.Context
//   - eventID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEventByID(ctx interface{}, eventID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEventByID_Call {
	return &MockOpenlaneGraphClient_GetEventByID_Call{Call: _e.mock.On("GetEventByID",
		append([]interface{}{ctx, eventID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEventByID_Call) Run(run func(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEventByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEventByID_Call) Return(getEventByID *openlaneclient.GetEventByID, err error) *MockOpenlaneGraphClient_GetEventByID_Call {
	_c.Call.Return(getEventByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEventByID_Call) RunAndReturn(run func(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEventByID, error)) *MockOpenlaneGraphClient_GetEventByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEvents(ctx context.Context, first *int64, last *int64, where *openlaneclient.EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvents, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 *openlaneclient.GetEvents
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.EventWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetEvents, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.EventWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetEvents); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEvents)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.EventWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockOpenlaneGraphClient_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.EventWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEvents(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEvents_Call {
	return &MockOpenlaneGraphClient_GetEvents_Call{Call: _e.mock.On("GetEvents",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEvents_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.EventWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.EventWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.EventWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvents_Call) Return(getEvents *openlaneclient.GetEvents, err error) *MockOpenlaneGraphClient_GetEvents_Call {
	_c.Call.Return(getEvents, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvents_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvents, error)) *MockOpenlaneGraphClient_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvidenceByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEvidenceByID(ctx context.Context, evidenceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidenceByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, evidenceID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, evidenceID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEvidenceByID")
	}

	var r0 *openlaneclient.GetEvidenceByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidenceByID, error)); ok {
		return returnFunc(ctx, evidenceID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetEvidenceByID); ok {
		r0 = returnFunc(ctx, evidenceID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEvidenceByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, evidenceID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEvidenceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvidenceByID'
type MockOpenlaneGraphClient_GetEvidenceByID_Call struct {
	*mock.Call
}

// GetEvidenceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - evidenceID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEvidenceByID(ctx interface{}, evidenceID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEvidenceByID_Call {
	return &MockOpenlaneGraphClient_GetEvidenceByID_Call{Call: _e.mock.On("GetEvidenceByID",
		append([]interface{}{ctx, evidenceID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEvidenceByID_Call) Run(run func(ctx context.Context, evidenceID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEvidenceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvidenceByID_Call) Return(getEvidenceByID *openlaneclient.GetEvidenceByID, err error) *MockOpenlaneGraphClient_GetEvidenceByID_Call {
	_c.Call.Return(getEvidenceByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvidenceByID_Call) RunAndReturn(run func(ctx context.Context, evidenceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidenceByID, error)) *MockOpenlaneGraphClient_GetEvidenceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvidenceHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEvidenceHistories(ctx context.Context, where *openlaneclient.EvidenceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidenceHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEvidenceHistories")
	}

	var r0 *openlaneclient.GetEvidenceHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EvidenceHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidenceHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EvidenceHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetEvidenceHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEvidenceHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.EvidenceHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEvidenceHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvidenceHistories'
type MockOpenlaneGraphClient_GetEvidenceHistories_Call struct {
	*mock.Call
}

// GetEvidenceHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.EvidenceHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEvidenceHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEvidenceHistories_Call {
	return &MockOpenlaneGraphClient_GetEvidenceHistories_Call{Call: _e.mock.On("GetEvidenceHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEvidenceHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.EvidenceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEvidenceHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.EvidenceHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.EvidenceHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvidenceHistories_Call) Return(getEvidenceHistories *openlaneclient.GetEvidenceHistories, err error) *MockOpenlaneGraphClient_GetEvidenceHistories_Call {
	_c.Call.Return(getEvidenceHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvidenceHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.EvidenceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidenceHistories, error)) *MockOpenlaneGraphClient_GetEvidenceHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvidences provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetEvidences(ctx context.Context, where *openlaneclient.EvidenceWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidences, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetEvidences")
	}

	var r0 *openlaneclient.GetEvidences
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EvidenceWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidences, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.EvidenceWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetEvidences); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetEvidences)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.EvidenceWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetEvidences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvidences'
type MockOpenlaneGraphClient_GetEvidences_Call struct {
	*mock.Call
}

// GetEvidences is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.EvidenceWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetEvidences(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetEvidences_Call {
	return &MockOpenlaneGraphClient_GetEvidences_Call{Call: _e.mock.On("GetEvidences",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetEvidences_Call) Run(run func(ctx context.Context, where *openlaneclient.EvidenceWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetEvidences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.EvidenceWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.EvidenceWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvidences_Call) Return(getEvidences *openlaneclient.GetEvidences, err error) *MockOpenlaneGraphClient_GetEvidences_Call {
	_c.Call.Return(getEvidences, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetEvidences_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.EvidenceWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetEvidences, error)) *MockOpenlaneGraphClient_GetEvidences_Call {
	_c.Call.Return(run)
	return _c
}

// GetExportByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetExportByID(ctx context.Context, exportID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetExportByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, exportID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, exportID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetExportByID")
	}

	var r0 *openlaneclient.GetExportByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetExportByID, error)); ok {
		return returnFunc(ctx, exportID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetExportByID); ok {
		r0 = returnFunc(ctx, exportID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetExportByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, exportID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetExportByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExportByID'
type MockOpenlaneGraphClient_GetExportByID_Call struct {
	*mock.Call
}

// GetExportByID is a helper method to define mock.On call
//   - ctx context.Context
//   - exportID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetExportByID(ctx interface{}, exportID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetExportByID_Call {
	return &MockOpenlaneGraphClient_GetExportByID_Call{Call: _e.mock.On("GetExportByID",
		append([]interface{}{ctx, exportID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetExportByID_Call) Run(run func(ctx context.Context, exportID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetExportByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetExportByID_Call) Return(getExportByID *openlaneclient.GetExportByID, err error) *MockOpenlaneGraphClient_GetExportByID_Call {
	_c.Call.Return(getExportByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetExportByID_Call) RunAndReturn(run func(ctx context.Context, exportID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetExportByID, error)) *MockOpenlaneGraphClient_GetExportByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetExports provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetExports(ctx context.Context, first *int64, last *int64, where *openlaneclient.ExportWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetExports, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetExports")
	}

	var r0 *openlaneclient.GetExports
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ExportWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetExports, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ExportWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetExports); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetExports)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ExportWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetExports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExports'
type MockOpenlaneGraphClient_GetExports_Call struct {
	*mock.Call
}

// GetExports is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ExportWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetExports(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetExports_Call {
	return &MockOpenlaneGraphClient_GetExports_Call{Call: _e.mock.On("GetExports",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetExports_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ExportWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetExports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ExportWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ExportWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetExports_Call) Return(getExports *openlaneclient.GetExports, err error) *MockOpenlaneGraphClient_GetExports_Call {
	_c.Call.Return(getExports, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetExports_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ExportWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetExports, error)) *MockOpenlaneGraphClient_GetExports_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetFileByID(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetFileByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, fileID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, fileID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFileByID")
	}

	var r0 *openlaneclient.GetFileByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetFileByID, error)); ok {
		return returnFunc(ctx, fileID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetFileByID); ok {
		r0 = returnFunc(ctx, fileID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetFileByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, fileID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetFileByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileByID'
type MockOpenlaneGraphClient_GetFileByID_Call struct {
	*mock.Call
}

// GetFileByID is a helper method to define mock.On call
//   - ctx context.Context
//   - fileID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetFileByID(ctx interface{}, fileID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetFileByID_Call {
	return &MockOpenlaneGraphClient_GetFileByID_Call{Call: _e.mock.On("GetFileByID",
		append([]interface{}{ctx, fileID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetFileByID_Call) Run(run func(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetFileByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetFileByID_Call) Return(getFileByID *openlaneclient.GetFileByID, err error) *MockOpenlaneGraphClient_GetFileByID_Call {
	_c.Call.Return(getFileByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetFileByID_Call) RunAndReturn(run func(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetFileByID, error)) *MockOpenlaneGraphClient_GetFileByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetFileHistories(ctx context.Context, where *openlaneclient.FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetFileHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFileHistories")
	}

	var r0 *openlaneclient.GetFileHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.FileHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetFileHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.FileHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetFileHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetFileHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.FileHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetFileHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileHistories'
type MockOpenlaneGraphClient_GetFileHistories_Call struct {
	*mock.Call
}

// GetFileHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.FileHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetFileHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetFileHistories_Call {
	return &MockOpenlaneGraphClient_GetFileHistories_Call{Call: _e.mock.On("GetFileHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetFileHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetFileHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.FileHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.FileHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetFileHistories_Call) Return(getFileHistories *openlaneclient.GetFileHistories, err error) *MockOpenlaneGraphClient_GetFileHistories_Call {
	_c.Call.Return(getFileHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetFileHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetFileHistories, error)) *MockOpenlaneGraphClient_GetFileHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetFiles provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetFiles(ctx context.Context, where *openlaneclient.FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetFiles, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFiles")
	}

	var r0 *openlaneclient.GetFiles
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.FileWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetFiles, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.FileWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetFiles); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetFiles)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.FileWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFiles'
type MockOpenlaneGraphClient_GetFiles_Call struct {
	*mock.Call
}

// GetFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.FileWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetFiles(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetFiles_Call {
	return &MockOpenlaneGraphClient_GetFiles_Call{Call: _e.mock.On("GetFiles",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetFiles_Call) Run(run func(ctx context.Context, where *openlaneclient.FileWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.FileWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.FileWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetFiles_Call) Return(getFiles *openlaneclient.GetFiles, err error) *MockOpenlaneGraphClient_GetFiles_Call {
	_c.Call.Return(getFiles, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetFiles_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetFiles, error)) *MockOpenlaneGraphClient_GetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, groupID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, groupID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 *openlaneclient.GetGroupByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupByID, error)); ok {
		return returnFunc(ctx, groupID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupByID); ok {
		r0 = returnFunc(ctx, groupID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, groupID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByID'
type MockOpenlaneGraphClient_GetGroupByID_Call struct {
	*mock.Call
}

// GetGroupByID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupByID(ctx interface{}, groupID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupByID_Call {
	return &MockOpenlaneGraphClient_GetGroupByID_Call{Call: _e.mock.On("GetGroupByID",
		append([]interface{}{ctx, groupID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupByID_Call) Run(run func(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupByID_Call) Return(getGroupByID *openlaneclient.GetGroupByID, err error) *MockOpenlaneGraphClient_GetGroupByID_Call {
	_c.Call.Return(getGroupByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupByID_Call) RunAndReturn(run func(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupByID, error)) *MockOpenlaneGraphClient_GetGroupByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupHistories(ctx context.Context, where *openlaneclient.GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupHistories")
	}

	var r0 *openlaneclient.GetGroupHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.GroupHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupHistories'
type MockOpenlaneGraphClient_GetGroupHistories_Call struct {
	*mock.Call
}

// GetGroupHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.GroupHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupHistories_Call {
	return &MockOpenlaneGraphClient_GetGroupHistories_Call{Call: _e.mock.On("GetGroupHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.GroupHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.GroupHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupHistories_Call) Return(getGroupHistories *openlaneclient.GetGroupHistories, err error) *MockOpenlaneGraphClient_GetGroupHistories_Call {
	_c.Call.Return(getGroupHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupHistories, error)) *MockOpenlaneGraphClient_GetGroupHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupInfo provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupInfo(ctx context.Context, where *openlaneclient.GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupInfo, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupInfo")
	}

	var r0 *openlaneclient.GetGroupInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupInfo, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupInfo); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.GroupWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupInfo'
type MockOpenlaneGraphClient_GetGroupInfo_Call struct {
	*mock.Call
}

// GetGroupInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.GroupWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupInfo(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupInfo_Call {
	return &MockOpenlaneGraphClient_GetGroupInfo_Call{Call: _e.mock.On("GetGroupInfo",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupInfo_Call) Run(run func(ctx context.Context, where *openlaneclient.GroupWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.GroupWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.GroupWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupInfo_Call) Return(getGroupInfo *openlaneclient.GetGroupInfo, err error) *MockOpenlaneGraphClient_GetGroupInfo_Call {
	_c.Call.Return(getGroupInfo, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupInfo_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupInfo, error)) *MockOpenlaneGraphClient_GetGroupInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMembersByGroupID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupMembersByGroupID(ctx context.Context, where *openlaneclient.GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupMembersByGroupID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMembersByGroupID")
	}

	var r0 *openlaneclient.GetGroupMembersByGroupID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupMembershipWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupMembersByGroupID, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupMembershipWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupMembersByGroupID); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupMembersByGroupID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.GroupMembershipWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMembersByGroupID'
type MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call struct {
	*mock.Call
}

// GetGroupMembersByGroupID is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.GroupMembershipWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupMembersByGroupID(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call {
	return &MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call{Call: _e.mock.On("GetGroupMembersByGroupID",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call) Run(run func(ctx context.Context, where *openlaneclient.GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.GroupMembershipWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.GroupMembershipWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call) Return(getGroupMembersByGroupID *openlaneclient.GetGroupMembersByGroupID, err error) *MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call {
	_c.Call.Return(getGroupMembersByGroupID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupMembersByGroupID, error)) *MockOpenlaneGraphClient_GetGroupMembersByGroupID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMembershipHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupMembershipHistories(ctx context.Context, where *openlaneclient.GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupMembershipHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMembershipHistories")
	}

	var r0 *openlaneclient.GetGroupMembershipHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupMembershipHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupMembershipHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupMembershipHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.GroupMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupMembershipHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMembershipHistories'
type MockOpenlaneGraphClient_GetGroupMembershipHistories_Call struct {
	*mock.Call
}

// GetGroupMembershipHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.GroupMembershipHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupMembershipHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupMembershipHistories_Call {
	return &MockOpenlaneGraphClient_GetGroupMembershipHistories_Call{Call: _e.mock.On("GetGroupMembershipHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupMembershipHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupMembershipHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.GroupMembershipHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.GroupMembershipHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupMembershipHistories_Call) Return(getGroupMembershipHistories *openlaneclient.GetGroupMembershipHistories, err error) *MockOpenlaneGraphClient_GetGroupMembershipHistories_Call {
	_c.Call.Return(getGroupMembershipHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupMembershipHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupMembershipHistories, error)) *MockOpenlaneGraphClient_GetGroupMembershipHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupSettingByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettingByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, groupSettingID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, groupSettingID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupSettingByID")
	}

	var r0 *openlaneclient.GetGroupSettingByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettingByID, error)); ok {
		return returnFunc(ctx, groupSettingID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupSettingByID); ok {
		r0 = returnFunc(ctx, groupSettingID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupSettingByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, groupSettingID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupSettingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupSettingByID'
type MockOpenlaneGraphClient_GetGroupSettingByID_Call struct {
	*mock.Call
}

// GetGroupSettingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupSettingID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupSettingByID(ctx interface{}, groupSettingID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupSettingByID_Call {
	return &MockOpenlaneGraphClient_GetGroupSettingByID_Call{Call: _e.mock.On("GetGroupSettingByID",
		append([]interface{}{ctx, groupSettingID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupSettingByID_Call) Run(run func(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupSettingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupSettingByID_Call) Return(getGroupSettingByID *openlaneclient.GetGroupSettingByID, err error) *MockOpenlaneGraphClient_GetGroupSettingByID_Call {
	_c.Call.Return(getGroupSettingByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupSettingByID_Call) RunAndReturn(run func(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettingByID, error)) *MockOpenlaneGraphClient_GetGroupSettingByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupSettingHistories(ctx context.Context, where *openlaneclient.GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupSettingHistories")
	}

	var r0 *openlaneclient.GetGroupSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupSettingHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettingHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupSettingHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupSettingHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.GroupSettingHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupSettingHistories'
type MockOpenlaneGraphClient_GetGroupSettingHistories_Call struct {
	*mock.Call
}

// GetGroupSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.GroupSettingHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupSettingHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetGroupSettingHistories_Call{Call: _e.mock.On("GetGroupSettingHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupSettingHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.GroupSettingHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.GroupSettingHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupSettingHistories_Call) Return(getGroupSettingHistories *openlaneclient.GetGroupSettingHistories, err error) *MockOpenlaneGraphClient_GetGroupSettingHistories_Call {
	_c.Call.Return(getGroupSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupSettingHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettingHistories, error)) *MockOpenlaneGraphClient_GetGroupSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroupSettings(ctx context.Context, where openlaneclient.GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupSettings")
	}

	var r0 *openlaneclient.GetGroupSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.GroupSettingWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettings, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.GroupSettingWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetGroupSettings); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroupSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.GroupSettingWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroupSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupSettings'
type MockOpenlaneGraphClient_GetGroupSettings_Call struct {
	*mock.Call
}

// GetGroupSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - where openlaneclient.GroupSettingWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroupSettings(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroupSettings_Call {
	return &MockOpenlaneGraphClient_GetGroupSettings_Call{Call: _e.mock.On("GetGroupSettings",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroupSettings_Call) Run(run func(ctx context.Context, where openlaneclient.GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroupSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.GroupSettingWhereInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.GroupSettingWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupSettings_Call) Return(getGroupSettings *openlaneclient.GetGroupSettings, err error) *MockOpenlaneGraphClient_GetGroupSettings_Call {
	_c.Call.Return(getGroupSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroupSettings_Call) RunAndReturn(run func(ctx context.Context, where openlaneclient.GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroupSettings, error)) *MockOpenlaneGraphClient_GetGroupSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetGroups(ctx context.Context, where *openlaneclient.GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroups, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 *openlaneclient.GetGroups
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetGroups, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.GroupWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetGroups); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetGroups)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.GroupWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockOpenlaneGraphClient_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.GroupWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetGroups(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetGroups_Call {
	return &MockOpenlaneGraphClient_GetGroups_Call{Call: _e.mock.On("GetGroups",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetGroups_Call) Run(run func(ctx context.Context, where *openlaneclient.GroupWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.GroupWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.GroupWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroups_Call) Return(getGroups *openlaneclient.GetGroups, err error) *MockOpenlaneGraphClient_GetGroups_Call {
	_c.Call.Return(getGroups, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetGroups_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetGroups, error)) *MockOpenlaneGraphClient_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetHushByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetHushByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, hushID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, hushID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetHushByID")
	}

	var r0 *openlaneclient.GetHushByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetHushByID, error)); ok {
		return returnFunc(ctx, hushID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetHushByID); ok {
		r0 = returnFunc(ctx, hushID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetHushByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, hushID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetHushByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHushByID'
type MockOpenlaneGraphClient_GetHushByID_Call struct {
	*mock.Call
}

// GetHushByID is a helper method to define mock.On call
//   - ctx context.Context
//   - hushID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetHushByID(ctx interface{}, hushID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetHushByID_Call {
	return &MockOpenlaneGraphClient_GetHushByID_Call{Call: _e.mock.On("GetHushByID",
		append([]interface{}{ctx, hushID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetHushByID_Call) Run(run func(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetHushByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetHushByID_Call) Return(getHushByID *openlaneclient.GetHushByID, err error) *MockOpenlaneGraphClient_GetHushByID_Call {
	_c.Call.Return(getHushByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetHushByID_Call) RunAndReturn(run func(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetHushByID, error)) *MockOpenlaneGraphClient_GetHushByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetHushHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetHushHistories(ctx context.Context, where *openlaneclient.HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetHushHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetHushHistories")
	}

	var r0 *openlaneclient.GetHushHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.HushHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetHushHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.HushHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetHushHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetHushHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.HushHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetHushHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHushHistories'
type MockOpenlaneGraphClient_GetHushHistories_Call struct {
	*mock.Call
}

// GetHushHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.HushHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetHushHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetHushHistories_Call {
	return &MockOpenlaneGraphClient_GetHushHistories_Call{Call: _e.mock.On("GetHushHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetHushHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetHushHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.HushHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.HushHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetHushHistories_Call) Return(getHushHistories *openlaneclient.GetHushHistories, err error) *MockOpenlaneGraphClient_GetHushHistories_Call {
	_c.Call.Return(getHushHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetHushHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetHushHistories, error)) *MockOpenlaneGraphClient_GetHushHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetHushes provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetHushes(ctx context.Context, where *openlaneclient.HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetHushes, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetHushes")
	}

	var r0 *openlaneclient.GetHushes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.HushWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetHushes, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.HushWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetHushes); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetHushes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.HushWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetHushes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHushes'
type MockOpenlaneGraphClient_GetHushes_Call struct {
	*mock.Call
}

// GetHushes is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.HushWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetHushes(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetHushes_Call {
	return &MockOpenlaneGraphClient_GetHushes_Call{Call: _e.mock.On("GetHushes",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetHushes_Call) Run(run func(ctx context.Context, where *openlaneclient.HushWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetHushes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.HushWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.HushWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetHushes_Call) Return(getHushes *openlaneclient.GetHushes, err error) *MockOpenlaneGraphClient_GetHushes_Call {
	_c.Call.Return(getHushes, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetHushes_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetHushes, error)) *MockOpenlaneGraphClient_GetHushes_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrationByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, integrationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, integrationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationByID")
	}

	var r0 *openlaneclient.GetIntegrationByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrationByID, error)); ok {
		return returnFunc(ctx, integrationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetIntegrationByID); ok {
		r0 = returnFunc(ctx, integrationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetIntegrationByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, integrationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetIntegrationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationByID'
type MockOpenlaneGraphClient_GetIntegrationByID_Call struct {
	*mock.Call
}

// GetIntegrationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - integrationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetIntegrationByID(ctx interface{}, integrationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetIntegrationByID_Call {
	return &MockOpenlaneGraphClient_GetIntegrationByID_Call{Call: _e.mock.On("GetIntegrationByID",
		append([]interface{}{ctx, integrationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetIntegrationByID_Call) Run(run func(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetIntegrationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetIntegrationByID_Call) Return(getIntegrationByID *openlaneclient.GetIntegrationByID, err error) *MockOpenlaneGraphClient_GetIntegrationByID_Call {
	_c.Call.Return(getIntegrationByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetIntegrationByID_Call) RunAndReturn(run func(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrationByID, error)) *MockOpenlaneGraphClient_GetIntegrationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetIntegrationHistories(ctx context.Context, where *openlaneclient.IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationHistories")
	}

	var r0 *openlaneclient.GetIntegrationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.IntegrationHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrationHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.IntegrationHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetIntegrationHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetIntegrationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.IntegrationHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetIntegrationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationHistories'
type MockOpenlaneGraphClient_GetIntegrationHistories_Call struct {
	*mock.Call
}

// GetIntegrationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.IntegrationHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetIntegrationHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetIntegrationHistories_Call {
	return &MockOpenlaneGraphClient_GetIntegrationHistories_Call{Call: _e.mock.On("GetIntegrationHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetIntegrationHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetIntegrationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.IntegrationHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.IntegrationHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetIntegrationHistories_Call) Return(getIntegrationHistories *openlaneclient.GetIntegrationHistories, err error) *MockOpenlaneGraphClient_GetIntegrationHistories_Call {
	_c.Call.Return(getIntegrationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetIntegrationHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrationHistories, error)) *MockOpenlaneGraphClient_GetIntegrationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrations provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetIntegrations(ctx context.Context, where *openlaneclient.IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrations, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrations")
	}

	var r0 *openlaneclient.GetIntegrations
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.IntegrationWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrations, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.IntegrationWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetIntegrations); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetIntegrations)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.IntegrationWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrations'
type MockOpenlaneGraphClient_GetIntegrations_Call struct {
	*mock.Call
}

// GetIntegrations is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.IntegrationWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetIntegrations(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetIntegrations_Call {
	return &MockOpenlaneGraphClient_GetIntegrations_Call{Call: _e.mock.On("GetIntegrations",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetIntegrations_Call) Run(run func(ctx context.Context, where *openlaneclient.IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.IntegrationWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.IntegrationWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetIntegrations_Call) Return(getIntegrations *openlaneclient.GetIntegrations, err error) *MockOpenlaneGraphClient_GetIntegrations_Call {
	_c.Call.Return(getIntegrations, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetIntegrations_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetIntegrations, error)) *MockOpenlaneGraphClient_GetIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternalPolicies provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetInternalPolicies(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.InternalPolicyWhereInput, orderBy []*openlaneclient.InternalPolicyOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicies, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetInternalPolicies")
	}

	var r0 *openlaneclient.GetInternalPolicies
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.InternalPolicyWhereInput, []*openlaneclient.InternalPolicyOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicies, error)); ok {
		return returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.InternalPolicyWhereInput, []*openlaneclient.InternalPolicyOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetInternalPolicies); ok {
		r0 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetInternalPolicies)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.InternalPolicyWhereInput, []*openlaneclient.InternalPolicyOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetInternalPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternalPolicies'
type MockOpenlaneGraphClient_GetInternalPolicies_Call struct {
	*mock.Call
}

// GetInternalPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - where *openlaneclient.InternalPolicyWhereInput
//   - orderBy []*openlaneclient.InternalPolicyOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetInternalPolicies(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, where interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetInternalPolicies_Call {
	return &MockOpenlaneGraphClient_GetInternalPolicies_Call{Call: _e.mock.On("GetInternalPolicies",
		append([]interface{}{ctx, first, last, after, before, where, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicies_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.InternalPolicyWhereInput, orderBy []*openlaneclient.InternalPolicyOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetInternalPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *openlaneclient.InternalPolicyWhereInput
		if args[5] != nil {
			arg5 = args[5].(*openlaneclient.InternalPolicyWhereInput)
		}
		var arg6 []*openlaneclient.InternalPolicyOrder
		if args[6] != nil {
			arg6 = args[6].([]*openlaneclient.InternalPolicyOrder)
		}
		var arg7 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 7 {
			variadicArgs = args[7].([]clientv2.RequestInterceptor)
		}
		arg7 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicies_Call) Return(getInternalPolicies *openlaneclient.GetInternalPolicies, err error) *MockOpenlaneGraphClient_GetInternalPolicies_Call {
	_c.Call.Return(getInternalPolicies, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicies_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.InternalPolicyWhereInput, orderBy []*openlaneclient.InternalPolicyOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicies, error)) *MockOpenlaneGraphClient_GetInternalPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternalPolicyByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetInternalPolicyByID(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicyByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, internalPolicyID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, internalPolicyID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetInternalPolicyByID")
	}

	var r0 *openlaneclient.GetInternalPolicyByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicyByID, error)); ok {
		return returnFunc(ctx, internalPolicyID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetInternalPolicyByID); ok {
		r0 = returnFunc(ctx, internalPolicyID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetInternalPolicyByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, internalPolicyID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetInternalPolicyByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternalPolicyByID'
type MockOpenlaneGraphClient_GetInternalPolicyByID_Call struct {
	*mock.Call
}

// GetInternalPolicyByID is a helper method to define mock.On call
//   - ctx context.Context
//   - internalPolicyID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetInternalPolicyByID(ctx interface{}, internalPolicyID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetInternalPolicyByID_Call {
	return &MockOpenlaneGraphClient_GetInternalPolicyByID_Call{Call: _e.mock.On("GetInternalPolicyByID",
		append([]interface{}{ctx, internalPolicyID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicyByID_Call) Run(run func(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetInternalPolicyByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicyByID_Call) Return(getInternalPolicyByID *openlaneclient.GetInternalPolicyByID, err error) *MockOpenlaneGraphClient_GetInternalPolicyByID_Call {
	_c.Call.Return(getInternalPolicyByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicyByID_Call) RunAndReturn(run func(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicyByID, error)) *MockOpenlaneGraphClient_GetInternalPolicyByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternalPolicyHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetInternalPolicyHistories(ctx context.Context, where *openlaneclient.InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicyHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetInternalPolicyHistories")
	}

	var r0 *openlaneclient.GetInternalPolicyHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.InternalPolicyHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicyHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.InternalPolicyHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetInternalPolicyHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetInternalPolicyHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.InternalPolicyHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetInternalPolicyHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternalPolicyHistories'
type MockOpenlaneGraphClient_GetInternalPolicyHistories_Call struct {
	*mock.Call
}

// GetInternalPolicyHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.InternalPolicyHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetInternalPolicyHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetInternalPolicyHistories_Call {
	return &MockOpenlaneGraphClient_GetInternalPolicyHistories_Call{Call: _e.mock.On("GetInternalPolicyHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicyHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetInternalPolicyHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.InternalPolicyHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.InternalPolicyHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicyHistories_Call) Return(getInternalPolicyHistories *openlaneclient.GetInternalPolicyHistories, err error) *MockOpenlaneGraphClient_GetInternalPolicyHistories_Call {
	_c.Call.Return(getInternalPolicyHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInternalPolicyHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInternalPolicyHistories, error)) *MockOpenlaneGraphClient_GetInternalPolicyHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetInviteByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInviteByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, inviteID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, inviteID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetInviteByID")
	}

	var r0 *openlaneclient.GetInviteByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetInviteByID, error)); ok {
		return returnFunc(ctx, inviteID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetInviteByID); ok {
		r0 = returnFunc(ctx, inviteID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetInviteByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, inviteID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetInviteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInviteByID'
type MockOpenlaneGraphClient_GetInviteByID_Call struct {
	*mock.Call
}

// GetInviteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - inviteID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetInviteByID(ctx interface{}, inviteID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetInviteByID_Call {
	return &MockOpenlaneGraphClient_GetInviteByID_Call{Call: _e.mock.On("GetInviteByID",
		append([]interface{}{ctx, inviteID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetInviteByID_Call) Run(run func(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetInviteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInviteByID_Call) Return(getInviteByID *openlaneclient.GetInviteByID, err error) *MockOpenlaneGraphClient_GetInviteByID_Call {
	_c.Call.Return(getInviteByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetInviteByID_Call) RunAndReturn(run func(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetInviteByID, error)) *MockOpenlaneGraphClient_GetInviteByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobResultByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobResultByID(ctx context.Context, jobResultID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobResultByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, jobResultID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, jobResultID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobResultByID")
	}

	var r0 *openlaneclient.GetJobResultByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobResultByID, error)); ok {
		return returnFunc(ctx, jobResultID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetJobResultByID); ok {
		r0 = returnFunc(ctx, jobResultID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobResultByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, jobResultID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobResultByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobResultByID'
type MockOpenlaneGraphClient_GetJobResultByID_Call struct {
	*mock.Call
}

// GetJobResultByID is a helper method to define mock.On call
//   - ctx context.Context
//   - jobResultID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobResultByID(ctx interface{}, jobResultID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobResultByID_Call {
	return &MockOpenlaneGraphClient_GetJobResultByID_Call{Call: _e.mock.On("GetJobResultByID",
		append([]interface{}{ctx, jobResultID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobResultByID_Call) Run(run func(ctx context.Context, jobResultID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobResultByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobResultByID_Call) Return(getJobResultByID *openlaneclient.GetJobResultByID, err error) *MockOpenlaneGraphClient_GetJobResultByID_Call {
	_c.Call.Return(getJobResultByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobResultByID_Call) RunAndReturn(run func(ctx context.Context, jobResultID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobResultByID, error)) *MockOpenlaneGraphClient_GetJobResultByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobResults provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobResults(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobResultWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobResults, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobResults")
	}

	var r0 *openlaneclient.GetJobResults
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobResultWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobResults, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobResultWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetJobResults); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobResults)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.JobResultWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobResults'
type MockOpenlaneGraphClient_GetJobResults_Call struct {
	*mock.Call
}

// GetJobResults is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.JobResultWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobResults(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobResults_Call {
	return &MockOpenlaneGraphClient_GetJobResults_Call{Call: _e.mock.On("GetJobResults",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobResults_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobResultWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.JobResultWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.JobResultWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobResults_Call) Return(getJobResults *openlaneclient.GetJobResults, err error) *MockOpenlaneGraphClient_GetJobResults_Call {
	_c.Call.Return(getJobResults, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobResults_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobResultWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobResults, error)) *MockOpenlaneGraphClient_GetJobResults_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunnerByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobRunnerByID(ctx context.Context, jobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, jobRunnerID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, jobRunnerID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunnerByID")
	}

	var r0 *openlaneclient.GetJobRunnerByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerByID, error)); ok {
		return returnFunc(ctx, jobRunnerID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetJobRunnerByID); ok {
		r0 = returnFunc(ctx, jobRunnerID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobRunnerByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, jobRunnerID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobRunnerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunnerByID'
type MockOpenlaneGraphClient_GetJobRunnerByID_Call struct {
	*mock.Call
}

// GetJobRunnerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - jobRunnerID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobRunnerByID(ctx interface{}, jobRunnerID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobRunnerByID_Call {
	return &MockOpenlaneGraphClient_GetJobRunnerByID_Call{Call: _e.mock.On("GetJobRunnerByID",
		append([]interface{}{ctx, jobRunnerID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerByID_Call) Run(run func(ctx context.Context, jobRunnerID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobRunnerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerByID_Call) Return(getJobRunnerByID *openlaneclient.GetJobRunnerByID, err error) *MockOpenlaneGraphClient_GetJobRunnerByID_Call {
	_c.Call.Return(getJobRunnerByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerByID_Call) RunAndReturn(run func(ctx context.Context, jobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerByID, error)) *MockOpenlaneGraphClient_GetJobRunnerByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunnerRegistrationTokenByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobRunnerRegistrationTokenByID(ctx context.Context, jobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerRegistrationTokenByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, jobRunnerRegistrationTokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, jobRunnerRegistrationTokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunnerRegistrationTokenByID")
	}

	var r0 *openlaneclient.GetJobRunnerRegistrationTokenByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerRegistrationTokenByID, error)); ok {
		return returnFunc(ctx, jobRunnerRegistrationTokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetJobRunnerRegistrationTokenByID); ok {
		r0 = returnFunc(ctx, jobRunnerRegistrationTokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobRunnerRegistrationTokenByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, jobRunnerRegistrationTokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunnerRegistrationTokenByID'
type MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call struct {
	*mock.Call
}

// GetJobRunnerRegistrationTokenByID is a helper method to define mock.On call
//   - ctx context.Context
//   - jobRunnerRegistrationTokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobRunnerRegistrationTokenByID(ctx interface{}, jobRunnerRegistrationTokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call {
	return &MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call{Call: _e.mock.On("GetJobRunnerRegistrationTokenByID",
		append([]interface{}{ctx, jobRunnerRegistrationTokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call) Run(run func(ctx context.Context, jobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call) Return(getJobRunnerRegistrationTokenByID *openlaneclient.GetJobRunnerRegistrationTokenByID, err error) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call {
	_c.Call.Return(getJobRunnerRegistrationTokenByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call) RunAndReturn(run func(ctx context.Context, jobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerRegistrationTokenByID, error)) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokenByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunnerRegistrationTokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobRunnerRegistrationTokens(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerRegistrationTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerRegistrationTokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunnerRegistrationTokens")
	}

	var r0 *openlaneclient.GetJobRunnerRegistrationTokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerRegistrationTokenWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerRegistrationTokens, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerRegistrationTokenWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetJobRunnerRegistrationTokens); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobRunnerRegistrationTokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerRegistrationTokenWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunnerRegistrationTokens'
type MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call struct {
	*mock.Call
}

// GetJobRunnerRegistrationTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.JobRunnerRegistrationTokenWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobRunnerRegistrationTokens(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call {
	return &MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call{Call: _e.mock.On("GetJobRunnerRegistrationTokens",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerRegistrationTokenWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.JobRunnerRegistrationTokenWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.JobRunnerRegistrationTokenWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call) Return(getJobRunnerRegistrationTokens *openlaneclient.GetJobRunnerRegistrationTokens, err error) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call {
	_c.Call.Return(getJobRunnerRegistrationTokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerRegistrationTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerRegistrationTokens, error)) *MockOpenlaneGraphClient_GetJobRunnerRegistrationTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunnerTokenByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobRunnerTokenByID(ctx context.Context, jobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerTokenByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, jobRunnerTokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, jobRunnerTokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunnerTokenByID")
	}

	var r0 *openlaneclient.GetJobRunnerTokenByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerTokenByID, error)); ok {
		return returnFunc(ctx, jobRunnerTokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetJobRunnerTokenByID); ok {
		r0 = returnFunc(ctx, jobRunnerTokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobRunnerTokenByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, jobRunnerTokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunnerTokenByID'
type MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call struct {
	*mock.Call
}

// GetJobRunnerTokenByID is a helper method to define mock.On call
//   - ctx context.Context
//   - jobRunnerTokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobRunnerTokenByID(ctx interface{}, jobRunnerTokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call {
	return &MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call{Call: _e.mock.On("GetJobRunnerTokenByID",
		append([]interface{}{ctx, jobRunnerTokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call) Run(run func(ctx context.Context, jobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call) Return(getJobRunnerTokenByID *openlaneclient.GetJobRunnerTokenByID, err error) *MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call {
	_c.Call.Return(getJobRunnerTokenByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call) RunAndReturn(run func(ctx context.Context, jobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerTokenByID, error)) *MockOpenlaneGraphClient_GetJobRunnerTokenByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunnerTokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobRunnerTokens(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerTokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunnerTokens")
	}

	var r0 *openlaneclient.GetJobRunnerTokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerTokenWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerTokens, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerTokenWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetJobRunnerTokens); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobRunnerTokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerTokenWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobRunnerTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunnerTokens'
type MockOpenlaneGraphClient_GetJobRunnerTokens_Call struct {
	*mock.Call
}

// GetJobRunnerTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.JobRunnerTokenWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobRunnerTokens(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobRunnerTokens_Call {
	return &MockOpenlaneGraphClient_GetJobRunnerTokens_Call{Call: _e.mock.On("GetJobRunnerTokens",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerTokens_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerTokenWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobRunnerTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.JobRunnerTokenWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.JobRunnerTokenWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerTokens_Call) Return(getJobRunnerTokens *openlaneclient.GetJobRunnerTokens, err error) *MockOpenlaneGraphClient_GetJobRunnerTokens_Call {
	_c.Call.Return(getJobRunnerTokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunnerTokens_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunnerTokens, error)) *MockOpenlaneGraphClient_GetJobRunnerTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunners provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetJobRunners(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunners, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunners")
	}

	var r0 *openlaneclient.GetJobRunners
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunners, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetJobRunners); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetJobRunners)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.JobRunnerWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetJobRunners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunners'
type MockOpenlaneGraphClient_GetJobRunners_Call struct {
	*mock.Call
}

// GetJobRunners is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.JobRunnerWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetJobRunners(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetJobRunners_Call {
	return &MockOpenlaneGraphClient_GetJobRunners_Call{Call: _e.mock.On("GetJobRunners",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetJobRunners_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetJobRunners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.JobRunnerWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.JobRunnerWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunners_Call) Return(getJobRunners *openlaneclient.GetJobRunners, err error) *MockOpenlaneGraphClient_GetJobRunners_Call {
	_c.Call.Return(getJobRunners, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetJobRunners_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.JobRunnerWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetJobRunners, error)) *MockOpenlaneGraphClient_GetJobRunners_Call {
	_c.Call.Return(run)
	return _c
}

// GetMappableDomainByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetMappableDomainByID(ctx context.Context, mappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomainByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, mappableDomainID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, mappableDomainID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMappableDomainByID")
	}

	var r0 *openlaneclient.GetMappableDomainByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomainByID, error)); ok {
		return returnFunc(ctx, mappableDomainID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetMappableDomainByID); ok {
		r0 = returnFunc(ctx, mappableDomainID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetMappableDomainByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, mappableDomainID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetMappableDomainByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMappableDomainByID'
type MockOpenlaneGraphClient_GetMappableDomainByID_Call struct {
	*mock.Call
}

// GetMappableDomainByID is a helper method to define mock.On call
//   - ctx context.Context
//   - mappableDomainID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetMappableDomainByID(ctx interface{}, mappableDomainID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetMappableDomainByID_Call {
	return &MockOpenlaneGraphClient_GetMappableDomainByID_Call{Call: _e.mock.On("GetMappableDomainByID",
		append([]interface{}{ctx, mappableDomainID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetMappableDomainByID_Call) Run(run func(ctx context.Context, mappableDomainID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetMappableDomainByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappableDomainByID_Call) Return(getMappableDomainByID *openlaneclient.GetMappableDomainByID, err error) *MockOpenlaneGraphClient_GetMappableDomainByID_Call {
	_c.Call.Return(getMappableDomainByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappableDomainByID_Call) RunAndReturn(run func(ctx context.Context, mappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomainByID, error)) *MockOpenlaneGraphClient_GetMappableDomainByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMappableDomainHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetMappableDomainHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappableDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomainHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMappableDomainHistories")
	}

	var r0 *openlaneclient.GetMappableDomainHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappableDomainHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomainHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappableDomainHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetMappableDomainHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetMappableDomainHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.MappableDomainHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetMappableDomainHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMappableDomainHistories'
type MockOpenlaneGraphClient_GetMappableDomainHistories_Call struct {
	*mock.Call
}

// GetMappableDomainHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.MappableDomainHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetMappableDomainHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetMappableDomainHistories_Call {
	return &MockOpenlaneGraphClient_GetMappableDomainHistories_Call{Call: _e.mock.On("GetMappableDomainHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetMappableDomainHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappableDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetMappableDomainHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.MappableDomainHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.MappableDomainHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappableDomainHistories_Call) Return(getMappableDomainHistories *openlaneclient.GetMappableDomainHistories, err error) *MockOpenlaneGraphClient_GetMappableDomainHistories_Call {
	_c.Call.Return(getMappableDomainHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappableDomainHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappableDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomainHistories, error)) *MockOpenlaneGraphClient_GetMappableDomainHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetMappableDomains provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetMappableDomains(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappableDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomains, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMappableDomains")
	}

	var r0 *openlaneclient.GetMappableDomains
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappableDomainWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomains, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappableDomainWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetMappableDomains); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetMappableDomains)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.MappableDomainWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetMappableDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMappableDomains'
type MockOpenlaneGraphClient_GetMappableDomains_Call struct {
	*mock.Call
}

// GetMappableDomains is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.MappableDomainWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetMappableDomains(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetMappableDomains_Call {
	return &MockOpenlaneGraphClient_GetMappableDomains_Call{Call: _e.mock.On("GetMappableDomains",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetMappableDomains_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappableDomainWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetMappableDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.MappableDomainWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.MappableDomainWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappableDomains_Call) Return(getMappableDomains *openlaneclient.GetMappableDomains, err error) *MockOpenlaneGraphClient_GetMappableDomains_Call {
	_c.Call.Return(getMappableDomains, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappableDomains_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappableDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappableDomains, error)) *MockOpenlaneGraphClient_GetMappableDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetMappedControlByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetMappedControlByID(ctx context.Context, mappedControlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControlByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, mappedControlID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, mappedControlID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMappedControlByID")
	}

	var r0 *openlaneclient.GetMappedControlByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControlByID, error)); ok {
		return returnFunc(ctx, mappedControlID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetMappedControlByID); ok {
		r0 = returnFunc(ctx, mappedControlID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetMappedControlByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, mappedControlID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetMappedControlByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMappedControlByID'
type MockOpenlaneGraphClient_GetMappedControlByID_Call struct {
	*mock.Call
}

// GetMappedControlByID is a helper method to define mock.On call
//   - ctx context.Context
//   - mappedControlID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetMappedControlByID(ctx interface{}, mappedControlID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetMappedControlByID_Call {
	return &MockOpenlaneGraphClient_GetMappedControlByID_Call{Call: _e.mock.On("GetMappedControlByID",
		append([]interface{}{ctx, mappedControlID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetMappedControlByID_Call) Run(run func(ctx context.Context, mappedControlID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetMappedControlByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappedControlByID_Call) Return(getMappedControlByID *openlaneclient.GetMappedControlByID, err error) *MockOpenlaneGraphClient_GetMappedControlByID_Call {
	_c.Call.Return(getMappedControlByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappedControlByID_Call) RunAndReturn(run func(ctx context.Context, mappedControlID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControlByID, error)) *MockOpenlaneGraphClient_GetMappedControlByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMappedControlHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetMappedControlHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappedControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControlHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMappedControlHistories")
	}

	var r0 *openlaneclient.GetMappedControlHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappedControlHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControlHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappedControlHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetMappedControlHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetMappedControlHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.MappedControlHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetMappedControlHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMappedControlHistories'
type MockOpenlaneGraphClient_GetMappedControlHistories_Call struct {
	*mock.Call
}

// GetMappedControlHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.MappedControlHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetMappedControlHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetMappedControlHistories_Call {
	return &MockOpenlaneGraphClient_GetMappedControlHistories_Call{Call: _e.mock.On("GetMappedControlHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetMappedControlHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappedControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetMappedControlHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.MappedControlHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.MappedControlHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappedControlHistories_Call) Return(getMappedControlHistories *openlaneclient.GetMappedControlHistories, err error) *MockOpenlaneGraphClient_GetMappedControlHistories_Call {
	_c.Call.Return(getMappedControlHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappedControlHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappedControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControlHistories, error)) *MockOpenlaneGraphClient_GetMappedControlHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetMappedControls provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetMappedControls(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappedControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControls, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMappedControls")
	}

	var r0 *openlaneclient.GetMappedControls
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappedControlWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControls, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.MappedControlWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetMappedControls); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetMappedControls)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.MappedControlWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetMappedControls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMappedControls'
type MockOpenlaneGraphClient_GetMappedControls_Call struct {
	*mock.Call
}

// GetMappedControls is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.MappedControlWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetMappedControls(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetMappedControls_Call {
	return &MockOpenlaneGraphClient_GetMappedControls_Call{Call: _e.mock.On("GetMappedControls",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetMappedControls_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappedControlWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetMappedControls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.MappedControlWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.MappedControlWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappedControls_Call) Return(getMappedControls *openlaneclient.GetMappedControls, err error) *MockOpenlaneGraphClient_GetMappedControls_Call {
	_c.Call.Return(getMappedControls, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetMappedControls_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.MappedControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetMappedControls, error)) *MockOpenlaneGraphClient_GetMappedControls_Call {
	_c.Call.Return(run)
	return _c
}

// GetNarrativeByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetNarrativeByID(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNarrativeByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, narrativeID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, narrativeID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNarrativeByID")
	}

	var r0 *openlaneclient.GetNarrativeByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetNarrativeByID, error)); ok {
		return returnFunc(ctx, narrativeID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetNarrativeByID); ok {
		r0 = returnFunc(ctx, narrativeID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetNarrativeByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, narrativeID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetNarrativeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNarrativeByID'
type MockOpenlaneGraphClient_GetNarrativeByID_Call struct {
	*mock.Call
}

// GetNarrativeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - narrativeID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetNarrativeByID(ctx interface{}, narrativeID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetNarrativeByID_Call {
	return &MockOpenlaneGraphClient_GetNarrativeByID_Call{Call: _e.mock.On("GetNarrativeByID",
		append([]interface{}{ctx, narrativeID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetNarrativeByID_Call) Run(run func(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetNarrativeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNarrativeByID_Call) Return(getNarrativeByID *openlaneclient.GetNarrativeByID, err error) *MockOpenlaneGraphClient_GetNarrativeByID_Call {
	_c.Call.Return(getNarrativeByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNarrativeByID_Call) RunAndReturn(run func(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNarrativeByID, error)) *MockOpenlaneGraphClient_GetNarrativeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNarrativeHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetNarrativeHistories(ctx context.Context, where *openlaneclient.NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNarrativeHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNarrativeHistories")
	}

	var r0 *openlaneclient.GetNarrativeHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.NarrativeHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetNarrativeHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.NarrativeHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetNarrativeHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetNarrativeHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.NarrativeHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetNarrativeHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNarrativeHistories'
type MockOpenlaneGraphClient_GetNarrativeHistories_Call struct {
	*mock.Call
}

// GetNarrativeHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.NarrativeHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetNarrativeHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetNarrativeHistories_Call {
	return &MockOpenlaneGraphClient_GetNarrativeHistories_Call{Call: _e.mock.On("GetNarrativeHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetNarrativeHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetNarrativeHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.NarrativeHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.NarrativeHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNarrativeHistories_Call) Return(getNarrativeHistories *openlaneclient.GetNarrativeHistories, err error) *MockOpenlaneGraphClient_GetNarrativeHistories_Call {
	_c.Call.Return(getNarrativeHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNarrativeHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNarrativeHistories, error)) *MockOpenlaneGraphClient_GetNarrativeHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetNarratives provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetNarratives(ctx context.Context, where *openlaneclient.NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNarratives, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNarratives")
	}

	var r0 *openlaneclient.GetNarratives
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.NarrativeWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetNarratives, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.NarrativeWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetNarratives); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetNarratives)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.NarrativeWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetNarratives_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNarratives'
type MockOpenlaneGraphClient_GetNarratives_Call struct {
	*mock.Call
}

// GetNarratives is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.NarrativeWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetNarratives(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetNarratives_Call {
	return &MockOpenlaneGraphClient_GetNarratives_Call{Call: _e.mock.On("GetNarratives",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetNarratives_Call) Run(run func(ctx context.Context, where *openlaneclient.NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetNarratives_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.NarrativeWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.NarrativeWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNarratives_Call) Return(getNarratives *openlaneclient.GetNarratives, err error) *MockOpenlaneGraphClient_GetNarratives_Call {
	_c.Call.Return(getNarratives, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNarratives_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNarratives, error)) *MockOpenlaneGraphClient_GetNarratives_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoteByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetNoteByID(ctx context.Context, noteID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNoteByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, noteID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, noteID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNoteByID")
	}

	var r0 *openlaneclient.GetNoteByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetNoteByID, error)); ok {
		return returnFunc(ctx, noteID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetNoteByID); ok {
		r0 = returnFunc(ctx, noteID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetNoteByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, noteID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetNoteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoteByID'
type MockOpenlaneGraphClient_GetNoteByID_Call struct {
	*mock.Call
}

// GetNoteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - noteID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetNoteByID(ctx interface{}, noteID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetNoteByID_Call {
	return &MockOpenlaneGraphClient_GetNoteByID_Call{Call: _e.mock.On("GetNoteByID",
		append([]interface{}{ctx, noteID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetNoteByID_Call) Run(run func(ctx context.Context, noteID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetNoteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNoteByID_Call) Return(getNoteByID *openlaneclient.GetNoteByID, err error) *MockOpenlaneGraphClient_GetNoteByID_Call {
	_c.Call.Return(getNoteByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNoteByID_Call) RunAndReturn(run func(ctx context.Context, noteID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNoteByID, error)) *MockOpenlaneGraphClient_GetNoteByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoteHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetNoteHistories(ctx context.Context, where *openlaneclient.NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNoteHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNoteHistories")
	}

	var r0 *openlaneclient.GetNoteHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.NoteHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetNoteHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.NoteHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetNoteHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetNoteHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.NoteHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetNoteHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoteHistories'
type MockOpenlaneGraphClient_GetNoteHistories_Call struct {
	*mock.Call
}

// GetNoteHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.NoteHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetNoteHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetNoteHistories_Call {
	return &MockOpenlaneGraphClient_GetNoteHistories_Call{Call: _e.mock.On("GetNoteHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetNoteHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetNoteHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.NoteHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.NoteHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNoteHistories_Call) Return(getNoteHistories *openlaneclient.GetNoteHistories, err error) *MockOpenlaneGraphClient_GetNoteHistories_Call {
	_c.Call.Return(getNoteHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetNoteHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetNoteHistories, error)) *MockOpenlaneGraphClient_GetNoteHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgMembersByOrgID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrgMembersByOrgID(ctx context.Context, where *openlaneclient.OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgMembersByOrgID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrgMembersByOrgID")
	}

	var r0 *openlaneclient.GetOrgMembersByOrgID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgMembershipWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgMembersByOrgID, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgMembershipWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrgMembersByOrgID); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrgMembersByOrgID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.OrgMembershipWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgMembersByOrgID'
type MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call struct {
	*mock.Call
}

// GetOrgMembersByOrgID is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.OrgMembershipWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrgMembersByOrgID(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call {
	return &MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call{Call: _e.mock.On("GetOrgMembersByOrgID",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call) Run(run func(ctx context.Context, where *openlaneclient.OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.OrgMembershipWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.OrgMembershipWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call) Return(getOrgMembersByOrgID *openlaneclient.GetOrgMembersByOrgID, err error) *MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call {
	_c.Call.Return(getOrgMembersByOrgID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgMembersByOrgID, error)) *MockOpenlaneGraphClient_GetOrgMembersByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgMembershipHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrgMembershipHistories(ctx context.Context, where *openlaneclient.OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgMembershipHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrgMembershipHistories")
	}

	var r0 *openlaneclient.GetOrgMembershipHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgMembershipHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrgMembershipHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrgMembershipHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.OrgMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrgMembershipHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgMembershipHistories'
type MockOpenlaneGraphClient_GetOrgMembershipHistories_Call struct {
	*mock.Call
}

// GetOrgMembershipHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.OrgMembershipHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrgMembershipHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrgMembershipHistories_Call {
	return &MockOpenlaneGraphClient_GetOrgMembershipHistories_Call{Call: _e.mock.On("GetOrgMembershipHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrgMembershipHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrgMembershipHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.OrgMembershipHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.OrgMembershipHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgMembershipHistories_Call) Return(getOrgMembershipHistories *openlaneclient.GetOrgMembershipHistories, err error) *MockOpenlaneGraphClient_GetOrgMembershipHistories_Call {
	_c.Call.Return(getOrgMembershipHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgMembershipHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgMembershipHistories, error)) *MockOpenlaneGraphClient_GetOrgMembershipHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgSubscriptionByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrgSubscriptionByID(ctx context.Context, orgSubscriptionID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptionByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, orgSubscriptionID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, orgSubscriptionID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrgSubscriptionByID")
	}

	var r0 *openlaneclient.GetOrgSubscriptionByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptionByID, error)); ok {
		return returnFunc(ctx, orgSubscriptionID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetOrgSubscriptionByID); ok {
		r0 = returnFunc(ctx, orgSubscriptionID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrgSubscriptionByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, orgSubscriptionID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgSubscriptionByID'
type MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call struct {
	*mock.Call
}

// GetOrgSubscriptionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - orgSubscriptionID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrgSubscriptionByID(ctx interface{}, orgSubscriptionID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call {
	return &MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call{Call: _e.mock.On("GetOrgSubscriptionByID",
		append([]interface{}{ctx, orgSubscriptionID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call) Run(run func(ctx context.Context, orgSubscriptionID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call) Return(getOrgSubscriptionByID *openlaneclient.GetOrgSubscriptionByID, err error) *MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call {
	_c.Call.Return(getOrgSubscriptionByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call) RunAndReturn(run func(ctx context.Context, orgSubscriptionID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptionByID, error)) *MockOpenlaneGraphClient_GetOrgSubscriptionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgSubscriptionHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrgSubscriptionHistories(ctx context.Context, where *openlaneclient.OrgSubscriptionHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptionHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrgSubscriptionHistories")
	}

	var r0 *openlaneclient.GetOrgSubscriptionHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgSubscriptionHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptionHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgSubscriptionHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrgSubscriptionHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrgSubscriptionHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.OrgSubscriptionHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgSubscriptionHistories'
type MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call struct {
	*mock.Call
}

// GetOrgSubscriptionHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.OrgSubscriptionHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrgSubscriptionHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call {
	return &MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call{Call: _e.mock.On("GetOrgSubscriptionHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.OrgSubscriptionHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.OrgSubscriptionHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.OrgSubscriptionHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call) Return(getOrgSubscriptionHistories *openlaneclient.GetOrgSubscriptionHistories, err error) *MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call {
	_c.Call.Return(getOrgSubscriptionHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.OrgSubscriptionHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptionHistories, error)) *MockOpenlaneGraphClient_GetOrgSubscriptionHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgSubscriptions provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrgSubscriptions(ctx context.Context, where *openlaneclient.OrgSubscriptionWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptions, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrgSubscriptions")
	}

	var r0 *openlaneclient.GetOrgSubscriptions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgSubscriptionWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptions, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrgSubscriptionWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrgSubscriptions); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrgSubscriptions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.OrgSubscriptionWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrgSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgSubscriptions'
type MockOpenlaneGraphClient_GetOrgSubscriptions_Call struct {
	*mock.Call
}

// GetOrgSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.OrgSubscriptionWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrgSubscriptions(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrgSubscriptions_Call {
	return &MockOpenlaneGraphClient_GetOrgSubscriptions_Call{Call: _e.mock.On("GetOrgSubscriptions",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptions_Call) Run(run func(ctx context.Context, where *openlaneclient.OrgSubscriptionWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrgSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.OrgSubscriptionWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.OrgSubscriptionWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptions_Call) Return(getOrgSubscriptions *openlaneclient.GetOrgSubscriptions, err error) *MockOpenlaneGraphClient_GetOrgSubscriptions_Call {
	_c.Call.Return(getOrgSubscriptions, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrgSubscriptions_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.OrgSubscriptionWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrgSubscriptions, error)) *MockOpenlaneGraphClient_GetOrgSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, organizationID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, organizationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByID")
	}

	var r0 *openlaneclient.GetOrganizationByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationByID, error)); ok {
		return returnFunc(ctx, organizationID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetOrganizationByID); ok {
		r0 = returnFunc(ctx, organizationID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrganizationByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, organizationID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrganizationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationByID'
type MockOpenlaneGraphClient_GetOrganizationByID_Call struct {
	*mock.Call
}

// GetOrganizationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrganizationByID(ctx interface{}, organizationID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrganizationByID_Call {
	return &MockOpenlaneGraphClient_GetOrganizationByID_Call{Call: _e.mock.On("GetOrganizationByID",
		append([]interface{}{ctx, organizationID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrganizationByID_Call) Run(run func(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrganizationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationByID_Call) Return(getOrganizationByID *openlaneclient.GetOrganizationByID, err error) *MockOpenlaneGraphClient_GetOrganizationByID_Call {
	_c.Call.Return(getOrganizationByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationByID_Call) RunAndReturn(run func(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationByID, error)) *MockOpenlaneGraphClient_GetOrganizationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrganizationHistories(ctx context.Context, where *openlaneclient.OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationHistories")
	}

	var r0 *openlaneclient.GetOrganizationHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrganizationHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrganizationHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrganizationHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrganizationHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.OrganizationHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrganizationHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationHistories'
type MockOpenlaneGraphClient_GetOrganizationHistories_Call struct {
	*mock.Call
}

// GetOrganizationHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.OrganizationHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrganizationHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrganizationHistories_Call {
	return &MockOpenlaneGraphClient_GetOrganizationHistories_Call{Call: _e.mock.On("GetOrganizationHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrganizationHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrganizationHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.OrganizationHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.OrganizationHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationHistories_Call) Return(getOrganizationHistories *openlaneclient.GetOrganizationHistories, err error) *MockOpenlaneGraphClient_GetOrganizationHistories_Call {
	_c.Call.Return(getOrganizationHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationHistories, error)) *MockOpenlaneGraphClient_GetOrganizationHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettingByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettingByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, organizationSettingID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, organizationSettingID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettingByID")
	}

	var r0 *openlaneclient.GetOrganizationSettingByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettingByID, error)); ok {
		return returnFunc(ctx, organizationSettingID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetOrganizationSettingByID); ok {
		r0 = returnFunc(ctx, organizationSettingID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrganizationSettingByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, organizationSettingID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrganizationSettingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettingByID'
type MockOpenlaneGraphClient_GetOrganizationSettingByID_Call struct {
	*mock.Call
}

// GetOrganizationSettingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationSettingID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrganizationSettingByID(ctx interface{}, organizationSettingID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrganizationSettingByID_Call {
	return &MockOpenlaneGraphClient_GetOrganizationSettingByID_Call{Call: _e.mock.On("GetOrganizationSettingByID",
		append([]interface{}{ctx, organizationSettingID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettingByID_Call) Run(run func(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrganizationSettingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettingByID_Call) Return(getOrganizationSettingByID *openlaneclient.GetOrganizationSettingByID, err error) *MockOpenlaneGraphClient_GetOrganizationSettingByID_Call {
	_c.Call.Return(getOrganizationSettingByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettingByID_Call) RunAndReturn(run func(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettingByID, error)) *MockOpenlaneGraphClient_GetOrganizationSettingByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrganizationSettingHistories(ctx context.Context, where *openlaneclient.OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettingHistories")
	}

	var r0 *openlaneclient.GetOrganizationSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrganizationSettingHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettingHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrganizationSettingHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrganizationSettingHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrganizationSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.OrganizationSettingHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettingHistories'
type MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call struct {
	*mock.Call
}

// GetOrganizationSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.OrganizationSettingHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrganizationSettingHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call{Call: _e.mock.On("GetOrganizationSettingHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.OrganizationSettingHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.OrganizationSettingHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call) Return(getOrganizationSettingHistories *openlaneclient.GetOrganizationSettingHistories, err error) *MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call {
	_c.Call.Return(getOrganizationSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettingHistories, error)) *MockOpenlaneGraphClient_GetOrganizationSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrganizationSettings(ctx context.Context, where openlaneclient.OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettings")
	}

	var r0 *openlaneclient.GetOrganizationSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.OrganizationSettingWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettings, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.OrganizationSettingWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrganizationSettings); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrganizationSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.OrganizationSettingWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettings'
type MockOpenlaneGraphClient_GetOrganizationSettings_Call struct {
	*mock.Call
}

// GetOrganizationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - where openlaneclient.OrganizationSettingWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrganizationSettings(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrganizationSettings_Call {
	return &MockOpenlaneGraphClient_GetOrganizationSettings_Call{Call: _e.mock.On("GetOrganizationSettings",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettings_Call) Run(run func(ctx context.Context, where openlaneclient.OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.OrganizationSettingWhereInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.OrganizationSettingWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettings_Call) Return(getOrganizationSettings *openlaneclient.GetOrganizationSettings, err error) *MockOpenlaneGraphClient_GetOrganizationSettings_Call {
	_c.Call.Return(getOrganizationSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizationSettings_Call) RunAndReturn(run func(ctx context.Context, where openlaneclient.OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizationSettings, error)) *MockOpenlaneGraphClient_GetOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizations provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetOrganizations(ctx context.Context, where *openlaneclient.OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizations, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizations")
	}

	var r0 *openlaneclient.GetOrganizations
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrganizationWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizations, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.OrganizationWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetOrganizations); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetOrganizations)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.OrganizationWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizations'
type MockOpenlaneGraphClient_GetOrganizations_Call struct {
	*mock.Call
}

// GetOrganizations is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.OrganizationWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetOrganizations(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetOrganizations_Call {
	return &MockOpenlaneGraphClient_GetOrganizations_Call{Call: _e.mock.On("GetOrganizations",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetOrganizations_Call) Run(run func(ctx context.Context, where *openlaneclient.OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.OrganizationWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.OrganizationWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizations_Call) Return(getOrganizations *openlaneclient.GetOrganizations, err error) *MockOpenlaneGraphClient_GetOrganizations_Call {
	_c.Call.Return(getOrganizations, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetOrganizations_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetOrganizations, error)) *MockOpenlaneGraphClient_GetOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalAccessTokenByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetPersonalAccessTokenByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, personalAccessTokenID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, personalAccessTokenID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalAccessTokenByID")
	}

	var r0 *openlaneclient.GetPersonalAccessTokenByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetPersonalAccessTokenByID, error)); ok {
		return returnFunc(ctx, personalAccessTokenID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetPersonalAccessTokenByID); ok {
		r0 = returnFunc(ctx, personalAccessTokenID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetPersonalAccessTokenByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, personalAccessTokenID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalAccessTokenByID'
type MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call struct {
	*mock.Call
}

// GetPersonalAccessTokenByID is a helper method to define mock.On call
//   - ctx context.Context
//   - personalAccessTokenID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetPersonalAccessTokenByID(ctx interface{}, personalAccessTokenID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call {
	return &MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call{Call: _e.mock.On("GetPersonalAccessTokenByID",
		append([]interface{}{ctx, personalAccessTokenID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call) Run(run func(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call) Return(getPersonalAccessTokenByID *openlaneclient.GetPersonalAccessTokenByID, err error) *MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call {
	_c.Call.Return(getPersonalAccessTokenByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call) RunAndReturn(run func(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetPersonalAccessTokenByID, error)) *MockOpenlaneGraphClient_GetPersonalAccessTokenByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalAccessTokens provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetPersonalAccessTokens(ctx context.Context, where *openlaneclient.PersonalAccessTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetPersonalAccessTokens, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalAccessTokens")
	}

	var r0 *openlaneclient.GetPersonalAccessTokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.PersonalAccessTokenWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetPersonalAccessTokens, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.PersonalAccessTokenWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetPersonalAccessTokens); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetPersonalAccessTokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.PersonalAccessTokenWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetPersonalAccessTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalAccessTokens'
type MockOpenlaneGraphClient_GetPersonalAccessTokens_Call struct {
	*mock.Call
}

// GetPersonalAccessTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.PersonalAccessTokenWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetPersonalAccessTokens(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetPersonalAccessTokens_Call {
	return &MockOpenlaneGraphClient_GetPersonalAccessTokens_Call{Call: _e.mock.On("GetPersonalAccessTokens",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetPersonalAccessTokens_Call) Run(run func(ctx context.Context, where *openlaneclient.PersonalAccessTokenWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetPersonalAccessTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.PersonalAccessTokenWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.PersonalAccessTokenWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetPersonalAccessTokens_Call) Return(getPersonalAccessTokens *openlaneclient.GetPersonalAccessTokens, err error) *MockOpenlaneGraphClient_GetPersonalAccessTokens_Call {
	_c.Call.Return(getPersonalAccessTokens, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetPersonalAccessTokens_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.PersonalAccessTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetPersonalAccessTokens, error)) *MockOpenlaneGraphClient_GetPersonalAccessTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcedureByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProcedureByID(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedureByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, procedureID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, procedureID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProcedureByID")
	}

	var r0 *openlaneclient.GetProcedureByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedureByID, error)); ok {
		return returnFunc(ctx, procedureID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetProcedureByID); ok {
		r0 = returnFunc(ctx, procedureID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProcedureByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, procedureID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProcedureByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcedureByID'
type MockOpenlaneGraphClient_GetProcedureByID_Call struct {
	*mock.Call
}

// GetProcedureByID is a helper method to define mock.On call
//   - ctx context.Context
//   - procedureID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProcedureByID(ctx interface{}, procedureID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProcedureByID_Call {
	return &MockOpenlaneGraphClient_GetProcedureByID_Call{Call: _e.mock.On("GetProcedureByID",
		append([]interface{}{ctx, procedureID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProcedureByID_Call) Run(run func(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProcedureByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProcedureByID_Call) Return(getProcedureByID *openlaneclient.GetProcedureByID, err error) *MockOpenlaneGraphClient_GetProcedureByID_Call {
	_c.Call.Return(getProcedureByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProcedureByID_Call) RunAndReturn(run func(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedureByID, error)) *MockOpenlaneGraphClient_GetProcedureByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcedureHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProcedureHistories(ctx context.Context, where *openlaneclient.ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedureHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProcedureHistories")
	}

	var r0 *openlaneclient.GetProcedureHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProcedureHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedureHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProcedureHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetProcedureHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProcedureHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ProcedureHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProcedureHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcedureHistories'
type MockOpenlaneGraphClient_GetProcedureHistories_Call struct {
	*mock.Call
}

// GetProcedureHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ProcedureHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProcedureHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProcedureHistories_Call {
	return &MockOpenlaneGraphClient_GetProcedureHistories_Call{Call: _e.mock.On("GetProcedureHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProcedureHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProcedureHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ProcedureHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ProcedureHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProcedureHistories_Call) Return(getProcedureHistories *openlaneclient.GetProcedureHistories, err error) *MockOpenlaneGraphClient_GetProcedureHistories_Call {
	_c.Call.Return(getProcedureHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProcedureHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedureHistories, error)) *MockOpenlaneGraphClient_GetProcedureHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcedures provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProcedures(ctx context.Context, where *openlaneclient.ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedures, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProcedures")
	}

	var r0 *openlaneclient.GetProcedures
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProcedureWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedures, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProcedureWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetProcedures); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProcedures)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ProcedureWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProcedures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcedures'
type MockOpenlaneGraphClient_GetProcedures_Call struct {
	*mock.Call
}

// GetProcedures is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ProcedureWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProcedures(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProcedures_Call {
	return &MockOpenlaneGraphClient_GetProcedures_Call{Call: _e.mock.On("GetProcedures",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProcedures_Call) Run(run func(ctx context.Context, where *openlaneclient.ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProcedures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ProcedureWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ProcedureWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProcedures_Call) Return(getProcedures *openlaneclient.GetProcedures, err error) *MockOpenlaneGraphClient_GetProcedures_Call {
	_c.Call.Return(getProcedures, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProcedures_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProcedures, error)) *MockOpenlaneGraphClient_GetProcedures_Call {
	_c.Call.Return(run)
	return _c
}

// GetProgramByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProgramByID(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, programID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, programID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProgramByID")
	}

	var r0 *openlaneclient.GetProgramByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramByID, error)); ok {
		return returnFunc(ctx, programID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetProgramByID); ok {
		r0 = returnFunc(ctx, programID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProgramByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, programID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProgramByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgramByID'
type MockOpenlaneGraphClient_GetProgramByID_Call struct {
	*mock.Call
}

// GetProgramByID is a helper method to define mock.On call
//   - ctx context.Context
//   - programID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProgramByID(ctx interface{}, programID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProgramByID_Call {
	return &MockOpenlaneGraphClient_GetProgramByID_Call{Call: _e.mock.On("GetProgramByID",
		append([]interface{}{ctx, programID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProgramByID_Call) Run(run func(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProgramByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramByID_Call) Return(getProgramByID *openlaneclient.GetProgramByID, err error) *MockOpenlaneGraphClient_GetProgramByID_Call {
	_c.Call.Return(getProgramByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramByID_Call) RunAndReturn(run func(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramByID, error)) *MockOpenlaneGraphClient_GetProgramByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProgramHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProgramHistories(ctx context.Context, where *openlaneclient.ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProgramHistories")
	}

	var r0 *openlaneclient.GetProgramHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetProgramHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProgramHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ProgramHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProgramHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgramHistories'
type MockOpenlaneGraphClient_GetProgramHistories_Call struct {
	*mock.Call
}

// GetProgramHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ProgramHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProgramHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProgramHistories_Call {
	return &MockOpenlaneGraphClient_GetProgramHistories_Call{Call: _e.mock.On("GetProgramHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProgramHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProgramHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ProgramHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ProgramHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramHistories_Call) Return(getProgramHistories *openlaneclient.GetProgramHistories, err error) *MockOpenlaneGraphClient_GetProgramHistories_Call {
	_c.Call.Return(getProgramHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramHistories, error)) *MockOpenlaneGraphClient_GetProgramHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetProgramMembersByProgramID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProgramMembersByProgramID(ctx context.Context, where *openlaneclient.ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembersByProgramID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProgramMembersByProgramID")
	}

	var r0 *openlaneclient.GetProgramMembersByProgramID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramMembershipWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembersByProgramID, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramMembershipWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetProgramMembersByProgramID); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProgramMembersByProgramID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ProgramMembershipWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgramMembersByProgramID'
type MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call struct {
	*mock.Call
}

// GetProgramMembersByProgramID is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ProgramMembershipWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProgramMembersByProgramID(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call {
	return &MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call{Call: _e.mock.On("GetProgramMembersByProgramID",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call) Run(run func(ctx context.Context, where *openlaneclient.ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ProgramMembershipWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ProgramMembershipWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call) Return(getProgramMembersByProgramID *openlaneclient.GetProgramMembersByProgramID, err error) *MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call {
	_c.Call.Return(getProgramMembersByProgramID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembersByProgramID, error)) *MockOpenlaneGraphClient_GetProgramMembersByProgramID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProgramMembershipByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProgramMembershipByID(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembershipByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, programMembershipID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, programMembershipID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProgramMembershipByID")
	}

	var r0 *openlaneclient.GetProgramMembershipByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembershipByID, error)); ok {
		return returnFunc(ctx, programMembershipID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetProgramMembershipByID); ok {
		r0 = returnFunc(ctx, programMembershipID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProgramMembershipByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, programMembershipID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProgramMembershipByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgramMembershipByID'
type MockOpenlaneGraphClient_GetProgramMembershipByID_Call struct {
	*mock.Call
}

// GetProgramMembershipByID is a helper method to define mock.On call
//   - ctx context.Context
//   - programMembershipID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProgramMembershipByID(ctx interface{}, programMembershipID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProgramMembershipByID_Call {
	return &MockOpenlaneGraphClient_GetProgramMembershipByID_Call{Call: _e.mock.On("GetProgramMembershipByID",
		append([]interface{}{ctx, programMembershipID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProgramMembershipByID_Call) Run(run func(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProgramMembershipByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMembershipByID_Call) Return(getProgramMembershipByID *openlaneclient.GetProgramMembershipByID, err error) *MockOpenlaneGraphClient_GetProgramMembershipByID_Call {
	_c.Call.Return(getProgramMembershipByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMembershipByID_Call) RunAndReturn(run func(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembershipByID, error)) *MockOpenlaneGraphClient_GetProgramMembershipByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProgramMembershipHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProgramMembershipHistories(ctx context.Context, where *openlaneclient.ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembershipHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProgramMembershipHistories")
	}

	var r0 *openlaneclient.GetProgramMembershipHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembershipHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetProgramMembershipHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProgramMembershipHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ProgramMembershipHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProgramMembershipHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgramMembershipHistories'
type MockOpenlaneGraphClient_GetProgramMembershipHistories_Call struct {
	*mock.Call
}

// GetProgramMembershipHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ProgramMembershipHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProgramMembershipHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProgramMembershipHistories_Call {
	return &MockOpenlaneGraphClient_GetProgramMembershipHistories_Call{Call: _e.mock.On("GetProgramMembershipHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProgramMembershipHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProgramMembershipHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ProgramMembershipHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ProgramMembershipHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMembershipHistories_Call) Return(getProgramMembershipHistories *openlaneclient.GetProgramMembershipHistories, err error) *MockOpenlaneGraphClient_GetProgramMembershipHistories_Call {
	_c.Call.Return(getProgramMembershipHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMembershipHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMembershipHistories, error)) *MockOpenlaneGraphClient_GetProgramMembershipHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetProgramMemberships provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetProgramMemberships(ctx context.Context, where *openlaneclient.ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMemberships, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProgramMemberships")
	}

	var r0 *openlaneclient.GetProgramMemberships
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramMembershipWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMemberships, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramMembershipWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetProgramMemberships); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetProgramMemberships)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ProgramMembershipWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetProgramMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgramMemberships'
type MockOpenlaneGraphClient_GetProgramMemberships_Call struct {
	*mock.Call
}

// GetProgramMemberships is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ProgramMembershipWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetProgramMemberships(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetProgramMemberships_Call {
	return &MockOpenlaneGraphClient_GetProgramMemberships_Call{Call: _e.mock.On("GetProgramMemberships",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetProgramMemberships_Call) Run(run func(ctx context.Context, where *openlaneclient.ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetProgramMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ProgramMembershipWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ProgramMembershipWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMemberships_Call) Return(getProgramMemberships *openlaneclient.GetProgramMemberships, err error) *MockOpenlaneGraphClient_GetProgramMemberships_Call {
	_c.Call.Return(getProgramMemberships, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetProgramMemberships_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetProgramMemberships, error)) *MockOpenlaneGraphClient_GetProgramMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrograms provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetPrograms(ctx context.Context, where *openlaneclient.ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetPrograms, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPrograms")
	}

	var r0 *openlaneclient.GetPrograms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetPrograms, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.ProgramWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetPrograms); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetPrograms)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.ProgramWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetPrograms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrograms'
type MockOpenlaneGraphClient_GetPrograms_Call struct {
	*mock.Call
}

// GetPrograms is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.ProgramWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetPrograms(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetPrograms_Call {
	return &MockOpenlaneGraphClient_GetPrograms_Call{Call: _e.mock.On("GetPrograms",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetPrograms_Call) Run(run func(ctx context.Context, where *openlaneclient.ProgramWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetPrograms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.ProgramWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.ProgramWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetPrograms_Call) Return(getPrograms *openlaneclient.GetPrograms, err error) *MockOpenlaneGraphClient_GetPrograms_Call {
	_c.Call.Return(getPrograms, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetPrograms_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetPrograms, error)) *MockOpenlaneGraphClient_GetPrograms_Call {
	_c.Call.Return(run)
	return _c
}

// GetRiskByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetRiskByID(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetRiskByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, riskID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, riskID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetRiskByID")
	}

	var r0 *openlaneclient.GetRiskByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetRiskByID, error)); ok {
		return returnFunc(ctx, riskID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetRiskByID); ok {
		r0 = returnFunc(ctx, riskID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetRiskByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, riskID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetRiskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRiskByID'
type MockOpenlaneGraphClient_GetRiskByID_Call struct {
	*mock.Call
}

// GetRiskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - riskID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetRiskByID(ctx interface{}, riskID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetRiskByID_Call {
	return &MockOpenlaneGraphClient_GetRiskByID_Call{Call: _e.mock.On("GetRiskByID",
		append([]interface{}{ctx, riskID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetRiskByID_Call) Run(run func(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetRiskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetRiskByID_Call) Return(getRiskByID *openlaneclient.GetRiskByID, err error) *MockOpenlaneGraphClient_GetRiskByID_Call {
	_c.Call.Return(getRiskByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetRiskByID_Call) RunAndReturn(run func(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetRiskByID, error)) *MockOpenlaneGraphClient_GetRiskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRiskHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetRiskHistories(ctx context.Context, where *openlaneclient.RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetRiskHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetRiskHistories")
	}

	var r0 *openlaneclient.GetRiskHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.RiskHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetRiskHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.RiskHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetRiskHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetRiskHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.RiskHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetRiskHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRiskHistories'
type MockOpenlaneGraphClient_GetRiskHistories_Call struct {
	*mock.Call
}

// GetRiskHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.RiskHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetRiskHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetRiskHistories_Call {
	return &MockOpenlaneGraphClient_GetRiskHistories_Call{Call: _e.mock.On("GetRiskHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetRiskHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetRiskHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.RiskHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.RiskHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetRiskHistories_Call) Return(getRiskHistories *openlaneclient.GetRiskHistories, err error) *MockOpenlaneGraphClient_GetRiskHistories_Call {
	_c.Call.Return(getRiskHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetRiskHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetRiskHistories, error)) *MockOpenlaneGraphClient_GetRiskHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetRisks provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetRisks(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.RiskWhereInput, orderBy []*openlaneclient.RiskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetRisks, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetRisks")
	}

	var r0 *openlaneclient.GetRisks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.RiskWhereInput, []*openlaneclient.RiskOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetRisks, error)); ok {
		return returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.RiskWhereInput, []*openlaneclient.RiskOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetRisks); ok {
		r0 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetRisks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.RiskWhereInput, []*openlaneclient.RiskOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetRisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRisks'
type MockOpenlaneGraphClient_GetRisks_Call struct {
	*mock.Call
}

// GetRisks is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - where *openlaneclient.RiskWhereInput
//   - orderBy []*openlaneclient.RiskOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetRisks(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, where interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetRisks_Call {
	return &MockOpenlaneGraphClient_GetRisks_Call{Call: _e.mock.On("GetRisks",
		append([]interface{}{ctx, first, last, after, before, where, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetRisks_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.RiskWhereInput, orderBy []*openlaneclient.RiskOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetRisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *openlaneclient.RiskWhereInput
		if args[5] != nil {
			arg5 = args[5].(*openlaneclient.RiskWhereInput)
		}
		var arg6 []*openlaneclient.RiskOrder
		if args[6] != nil {
			arg6 = args[6].([]*openlaneclient.RiskOrder)
		}
		var arg7 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 7 {
			variadicArgs = args[7].([]clientv2.RequestInterceptor)
		}
		arg7 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetRisks_Call) Return(getRisks *openlaneclient.GetRisks, err error) *MockOpenlaneGraphClient_GetRisks_Call {
	_c.Call.Return(getRisks, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetRisks_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.RiskWhereInput, orderBy []*openlaneclient.RiskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetRisks, error)) *MockOpenlaneGraphClient_GetRisks_Call {
	_c.Call.Return(run)
	return _c
}

// GetScanByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScanByID(ctx context.Context, scanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScanByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, scanID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, scanID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScanByID")
	}

	var r0 *openlaneclient.GetScanByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetScanByID, error)); ok {
		return returnFunc(ctx, scanID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetScanByID); ok {
		r0 = returnFunc(ctx, scanID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScanByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, scanID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScanByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScanByID'
type MockOpenlaneGraphClient_GetScanByID_Call struct {
	*mock.Call
}

// GetScanByID is a helper method to define mock.On call
//   - ctx context.Context
//   - scanID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScanByID(ctx interface{}, scanID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScanByID_Call {
	return &MockOpenlaneGraphClient_GetScanByID_Call{Call: _e.mock.On("GetScanByID",
		append([]interface{}{ctx, scanID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScanByID_Call) Run(run func(ctx context.Context, scanID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScanByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScanByID_Call) Return(getScanByID *openlaneclient.GetScanByID, err error) *MockOpenlaneGraphClient_GetScanByID_Call {
	_c.Call.Return(getScanByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScanByID_Call) RunAndReturn(run func(ctx context.Context, scanID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScanByID, error)) *MockOpenlaneGraphClient_GetScanByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetScanHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScanHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScanHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScanHistories")
	}

	var r0 *openlaneclient.GetScanHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScanHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetScanHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScanHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetScanHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScanHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ScanHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScanHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScanHistories'
type MockOpenlaneGraphClient_GetScanHistories_Call struct {
	*mock.Call
}

// GetScanHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ScanHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScanHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScanHistories_Call {
	return &MockOpenlaneGraphClient_GetScanHistories_Call{Call: _e.mock.On("GetScanHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScanHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScanHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ScanHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ScanHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScanHistories_Call) Return(getScanHistories *openlaneclient.GetScanHistories, err error) *MockOpenlaneGraphClient_GetScanHistories_Call {
	_c.Call.Return(getScanHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScanHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScanHistories, error)) *MockOpenlaneGraphClient_GetScanHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetScans provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScans(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScanWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScans, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScans")
	}

	var r0 *openlaneclient.GetScans
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScanWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetScans, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScanWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetScans); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScans)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ScanWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScans'
type MockOpenlaneGraphClient_GetScans_Call struct {
	*mock.Call
}

// GetScans is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ScanWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScans(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScans_Call {
	return &MockOpenlaneGraphClient_GetScans_Call{Call: _e.mock.On("GetScans",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScans_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScanWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ScanWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ScanWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScans_Call) Return(getScans *openlaneclient.GetScans, err error) *MockOpenlaneGraphClient_GetScans_Call {
	_c.Call.Return(getScans, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScans_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScanWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScans, error)) *MockOpenlaneGraphClient_GetScans_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduledJobByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScheduledJobByID(ctx context.Context, scheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, scheduledJobID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, scheduledJobID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledJobByID")
	}

	var r0 *openlaneclient.GetScheduledJobByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobByID, error)); ok {
		return returnFunc(ctx, scheduledJobID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetScheduledJobByID); ok {
		r0 = returnFunc(ctx, scheduledJobID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScheduledJobByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, scheduledJobID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScheduledJobByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduledJobByID'
type MockOpenlaneGraphClient_GetScheduledJobByID_Call struct {
	*mock.Call
}

// GetScheduledJobByID is a helper method to define mock.On call
//   - ctx context.Context
//   - scheduledJobID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScheduledJobByID(ctx interface{}, scheduledJobID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScheduledJobByID_Call {
	return &MockOpenlaneGraphClient_GetScheduledJobByID_Call{Call: _e.mock.On("GetScheduledJobByID",
		append([]interface{}{ctx, scheduledJobID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobByID_Call) Run(run func(ctx context.Context, scheduledJobID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScheduledJobByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobByID_Call) Return(getScheduledJobByID *openlaneclient.GetScheduledJobByID, err error) *MockOpenlaneGraphClient_GetScheduledJobByID_Call {
	_c.Call.Return(getScheduledJobByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobByID_Call) RunAndReturn(run func(ctx context.Context, scheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobByID, error)) *MockOpenlaneGraphClient_GetScheduledJobByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduledJobHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScheduledJobHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledJobHistories")
	}

	var r0 *openlaneclient.GetScheduledJobHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetScheduledJobHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScheduledJobHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScheduledJobHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduledJobHistories'
type MockOpenlaneGraphClient_GetScheduledJobHistories_Call struct {
	*mock.Call
}

// GetScheduledJobHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ScheduledJobHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScheduledJobHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScheduledJobHistories_Call {
	return &MockOpenlaneGraphClient_GetScheduledJobHistories_Call{Call: _e.mock.On("GetScheduledJobHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScheduledJobHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ScheduledJobHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ScheduledJobHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobHistories_Call) Return(getScheduledJobHistories *openlaneclient.GetScheduledJobHistories, err error) *MockOpenlaneGraphClient_GetScheduledJobHistories_Call {
	_c.Call.Return(getScheduledJobHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobHistories, error)) *MockOpenlaneGraphClient_GetScheduledJobHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduledJobRunByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScheduledJobRunByID(ctx context.Context, scheduledJobRunID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobRunByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, scheduledJobRunID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, scheduledJobRunID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledJobRunByID")
	}

	var r0 *openlaneclient.GetScheduledJobRunByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobRunByID, error)); ok {
		return returnFunc(ctx, scheduledJobRunID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetScheduledJobRunByID); ok {
		r0 = returnFunc(ctx, scheduledJobRunID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScheduledJobRunByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, scheduledJobRunID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScheduledJobRunByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduledJobRunByID'
type MockOpenlaneGraphClient_GetScheduledJobRunByID_Call struct {
	*mock.Call
}

// GetScheduledJobRunByID is a helper method to define mock.On call
//   - ctx context.Context
//   - scheduledJobRunID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScheduledJobRunByID(ctx interface{}, scheduledJobRunID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScheduledJobRunByID_Call {
	return &MockOpenlaneGraphClient_GetScheduledJobRunByID_Call{Call: _e.mock.On("GetScheduledJobRunByID",
		append([]interface{}{ctx, scheduledJobRunID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobRunByID_Call) Run(run func(ctx context.Context, scheduledJobRunID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScheduledJobRunByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobRunByID_Call) Return(getScheduledJobRunByID *openlaneclient.GetScheduledJobRunByID, err error) *MockOpenlaneGraphClient_GetScheduledJobRunByID_Call {
	_c.Call.Return(getScheduledJobRunByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobRunByID_Call) RunAndReturn(run func(ctx context.Context, scheduledJobRunID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobRunByID, error)) *MockOpenlaneGraphClient_GetScheduledJobRunByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduledJobRuns provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScheduledJobRuns(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobRunWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobRuns, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledJobRuns")
	}

	var r0 *openlaneclient.GetScheduledJobRuns
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobRunWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobRuns, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobRunWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetScheduledJobRuns); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScheduledJobRuns)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobRunWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScheduledJobRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduledJobRuns'
type MockOpenlaneGraphClient_GetScheduledJobRuns_Call struct {
	*mock.Call
}

// GetScheduledJobRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ScheduledJobRunWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScheduledJobRuns(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScheduledJobRuns_Call {
	return &MockOpenlaneGraphClient_GetScheduledJobRuns_Call{Call: _e.mock.On("GetScheduledJobRuns",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobRuns_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobRunWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScheduledJobRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ScheduledJobRunWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ScheduledJobRunWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobRuns_Call) Return(getScheduledJobRuns *openlaneclient.GetScheduledJobRuns, err error) *MockOpenlaneGraphClient_GetScheduledJobRuns_Call {
	_c.Call.Return(getScheduledJobRuns, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobRuns_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobRunWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobRuns, error)) *MockOpenlaneGraphClient_GetScheduledJobRuns_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduledJobs provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetScheduledJobs(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobs, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledJobs")
	}

	var r0 *openlaneclient.GetScheduledJobs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobs, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetScheduledJobs); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetScheduledJobs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.ScheduledJobWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetScheduledJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduledJobs'
type MockOpenlaneGraphClient_GetScheduledJobs_Call struct {
	*mock.Call
}

// GetScheduledJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.ScheduledJobWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetScheduledJobs(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetScheduledJobs_Call {
	return &MockOpenlaneGraphClient_GetScheduledJobs_Call{Call: _e.mock.On("GetScheduledJobs",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobs_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetScheduledJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.ScheduledJobWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.ScheduledJobWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobs_Call) Return(getScheduledJobs *openlaneclient.GetScheduledJobs, err error) *MockOpenlaneGraphClient_GetScheduledJobs_Call {
	_c.Call.Return(getScheduledJobs, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetScheduledJobs_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.ScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetScheduledJobs, error)) *MockOpenlaneGraphClient_GetScheduledJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelf provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSelf(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSelf, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSelf")
	}

	var r0 *openlaneclient.GetSelf
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetSelf, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetSelf); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSelf)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSelf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelf'
type MockOpenlaneGraphClient_GetSelf_Call struct {
	*mock.Call
}

// GetSelf is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSelf(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSelf_Call {
	return &MockOpenlaneGraphClient_GetSelf_Call{Call: _e.mock.On("GetSelf",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSelf_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSelf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSelf_Call) Return(getSelf *openlaneclient.GetSelf, err error) *MockOpenlaneGraphClient_GetSelf_Call {
	_c.Call.Return(getSelf, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSelf_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSelf, error)) *MockOpenlaneGraphClient_GetSelf_Call {
	_c.Call.Return(run)
	return _c
}

// GetStandardByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetStandardByID(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetStandardByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, standardID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, standardID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetStandardByID")
	}

	var r0 *openlaneclient.GetStandardByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetStandardByID, error)); ok {
		return returnFunc(ctx, standardID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetStandardByID); ok {
		r0 = returnFunc(ctx, standardID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetStandardByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, standardID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetStandardByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStandardByID'
type MockOpenlaneGraphClient_GetStandardByID_Call struct {
	*mock.Call
}

// GetStandardByID is a helper method to define mock.On call
//   - ctx context.Context
//   - standardID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetStandardByID(ctx interface{}, standardID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetStandardByID_Call {
	return &MockOpenlaneGraphClient_GetStandardByID_Call{Call: _e.mock.On("GetStandardByID",
		append([]interface{}{ctx, standardID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetStandardByID_Call) Run(run func(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetStandardByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetStandardByID_Call) Return(getStandardByID *openlaneclient.GetStandardByID, err error) *MockOpenlaneGraphClient_GetStandardByID_Call {
	_c.Call.Return(getStandardByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetStandardByID_Call) RunAndReturn(run func(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetStandardByID, error)) *MockOpenlaneGraphClient_GetStandardByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStandardHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetStandardHistories(ctx context.Context, where *openlaneclient.StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetStandardHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetStandardHistories")
	}

	var r0 *openlaneclient.GetStandardHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.StandardHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetStandardHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.StandardHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetStandardHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetStandardHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.StandardHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetStandardHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStandardHistories'
type MockOpenlaneGraphClient_GetStandardHistories_Call struct {
	*mock.Call
}

// GetStandardHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.StandardHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetStandardHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetStandardHistories_Call {
	return &MockOpenlaneGraphClient_GetStandardHistories_Call{Call: _e.mock.On("GetStandardHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetStandardHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetStandardHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.StandardHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.StandardHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetStandardHistories_Call) Return(getStandardHistories *openlaneclient.GetStandardHistories, err error) *MockOpenlaneGraphClient_GetStandardHistories_Call {
	_c.Call.Return(getStandardHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetStandardHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetStandardHistories, error)) *MockOpenlaneGraphClient_GetStandardHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetStandards provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetStandards(ctx context.Context, first *int64, last *int64, where *openlaneclient.StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetStandards, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetStandards")
	}

	var r0 *openlaneclient.GetStandards
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.StandardWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetStandards, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.StandardWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetStandards); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetStandards)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.StandardWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetStandards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStandards'
type MockOpenlaneGraphClient_GetStandards_Call struct {
	*mock.Call
}

// GetStandards is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.StandardWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetStandards(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetStandards_Call {
	return &MockOpenlaneGraphClient_GetStandards_Call{Call: _e.mock.On("GetStandards",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetStandards_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.StandardWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetStandards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.StandardWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.StandardWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetStandards_Call) Return(getStandards *openlaneclient.GetStandards, err error) *MockOpenlaneGraphClient_GetStandards_Call {
	_c.Call.Return(getStandards, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetStandards_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetStandards, error)) *MockOpenlaneGraphClient_GetStandards_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubcontrolByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubcontrolByID(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrolByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, subcontrolID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, subcontrolID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubcontrolByID")
	}

	var r0 *openlaneclient.GetSubcontrolByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrolByID, error)); ok {
		return returnFunc(ctx, subcontrolID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetSubcontrolByID); ok {
		r0 = returnFunc(ctx, subcontrolID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubcontrolByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, subcontrolID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubcontrolByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubcontrolByID'
type MockOpenlaneGraphClient_GetSubcontrolByID_Call struct {
	*mock.Call
}

// GetSubcontrolByID is a helper method to define mock.On call
//   - ctx context.Context
//   - subcontrolID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubcontrolByID(ctx interface{}, subcontrolID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubcontrolByID_Call {
	return &MockOpenlaneGraphClient_GetSubcontrolByID_Call{Call: _e.mock.On("GetSubcontrolByID",
		append([]interface{}{ctx, subcontrolID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubcontrolByID_Call) Run(run func(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubcontrolByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubcontrolByID_Call) Return(getSubcontrolByID *openlaneclient.GetSubcontrolByID, err error) *MockOpenlaneGraphClient_GetSubcontrolByID_Call {
	_c.Call.Return(getSubcontrolByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubcontrolByID_Call) RunAndReturn(run func(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrolByID, error)) *MockOpenlaneGraphClient_GetSubcontrolByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubcontrolHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubcontrolHistories(ctx context.Context, where *openlaneclient.SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrolHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubcontrolHistories")
	}

	var r0 *openlaneclient.GetSubcontrolHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.SubcontrolHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrolHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.SubcontrolHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetSubcontrolHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubcontrolHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.SubcontrolHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubcontrolHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubcontrolHistories'
type MockOpenlaneGraphClient_GetSubcontrolHistories_Call struct {
	*mock.Call
}

// GetSubcontrolHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.SubcontrolHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubcontrolHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubcontrolHistories_Call {
	return &MockOpenlaneGraphClient_GetSubcontrolHistories_Call{Call: _e.mock.On("GetSubcontrolHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubcontrolHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubcontrolHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.SubcontrolHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.SubcontrolHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubcontrolHistories_Call) Return(getSubcontrolHistories *openlaneclient.GetSubcontrolHistories, err error) *MockOpenlaneGraphClient_GetSubcontrolHistories_Call {
	_c.Call.Return(getSubcontrolHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubcontrolHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrolHistories, error)) *MockOpenlaneGraphClient_GetSubcontrolHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubcontrols provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubcontrols(ctx context.Context, where *openlaneclient.SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrols, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubcontrols")
	}

	var r0 *openlaneclient.GetSubcontrols
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.SubcontrolWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrols, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.SubcontrolWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetSubcontrols); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubcontrols)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.SubcontrolWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubcontrols_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubcontrols'
type MockOpenlaneGraphClient_GetSubcontrols_Call struct {
	*mock.Call
}

// GetSubcontrols is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.SubcontrolWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubcontrols(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubcontrols_Call {
	return &MockOpenlaneGraphClient_GetSubcontrols_Call{Call: _e.mock.On("GetSubcontrols",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubcontrols_Call) Run(run func(ctx context.Context, where *openlaneclient.SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubcontrols_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.SubcontrolWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.SubcontrolWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubcontrols_Call) Return(getSubcontrols *openlaneclient.GetSubcontrols, err error) *MockOpenlaneGraphClient_GetSubcontrols_Call {
	_c.Call.Return(getSubcontrols, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubcontrols_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubcontrols, error)) *MockOpenlaneGraphClient_GetSubcontrols_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubprocessorByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubprocessorByID(ctx context.Context, subprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessorByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, subprocessorID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, subprocessorID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubprocessorByID")
	}

	var r0 *openlaneclient.GetSubprocessorByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessorByID, error)); ok {
		return returnFunc(ctx, subprocessorID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetSubprocessorByID); ok {
		r0 = returnFunc(ctx, subprocessorID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubprocessorByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, subprocessorID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubprocessorByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubprocessorByID'
type MockOpenlaneGraphClient_GetSubprocessorByID_Call struct {
	*mock.Call
}

// GetSubprocessorByID is a helper method to define mock.On call
//   - ctx context.Context
//   - subprocessorID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubprocessorByID(ctx interface{}, subprocessorID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubprocessorByID_Call {
	return &MockOpenlaneGraphClient_GetSubprocessorByID_Call{Call: _e.mock.On("GetSubprocessorByID",
		append([]interface{}{ctx, subprocessorID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubprocessorByID_Call) Run(run func(ctx context.Context, subprocessorID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubprocessorByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubprocessorByID_Call) Return(getSubprocessorByID *openlaneclient.GetSubprocessorByID, err error) *MockOpenlaneGraphClient_GetSubprocessorByID_Call {
	_c.Call.Return(getSubprocessorByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubprocessorByID_Call) RunAndReturn(run func(ctx context.Context, subprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessorByID, error)) *MockOpenlaneGraphClient_GetSubprocessorByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubprocessorHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubprocessorHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.SubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessorHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubprocessorHistories")
	}

	var r0 *openlaneclient.GetSubprocessorHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.SubprocessorHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessorHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.SubprocessorHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetSubprocessorHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubprocessorHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.SubprocessorHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubprocessorHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubprocessorHistories'
type MockOpenlaneGraphClient_GetSubprocessorHistories_Call struct {
	*mock.Call
}

// GetSubprocessorHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.SubprocessorHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubprocessorHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubprocessorHistories_Call {
	return &MockOpenlaneGraphClient_GetSubprocessorHistories_Call{Call: _e.mock.On("GetSubprocessorHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubprocessorHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.SubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubprocessorHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.SubprocessorHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.SubprocessorHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubprocessorHistories_Call) Return(getSubprocessorHistories *openlaneclient.GetSubprocessorHistories, err error) *MockOpenlaneGraphClient_GetSubprocessorHistories_Call {
	_c.Call.Return(getSubprocessorHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubprocessorHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.SubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessorHistories, error)) *MockOpenlaneGraphClient_GetSubprocessorHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubprocessors provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubprocessors(ctx context.Context, first *int64, last *int64, where *openlaneclient.SubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessors, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubprocessors")
	}

	var r0 *openlaneclient.GetSubprocessors
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.SubprocessorWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessors, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.SubprocessorWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetSubprocessors); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubprocessors)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.SubprocessorWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubprocessors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubprocessors'
type MockOpenlaneGraphClient_GetSubprocessors_Call struct {
	*mock.Call
}

// GetSubprocessors is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.SubprocessorWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubprocessors(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubprocessors_Call {
	return &MockOpenlaneGraphClient_GetSubprocessors_Call{Call: _e.mock.On("GetSubprocessors",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubprocessors_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.SubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubprocessors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.SubprocessorWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.SubprocessorWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubprocessors_Call) Return(getSubprocessors *openlaneclient.GetSubprocessors, err error) *MockOpenlaneGraphClient_GetSubprocessors_Call {
	_c.Call.Return(getSubprocessors, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubprocessors_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.SubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubprocessors, error)) *MockOpenlaneGraphClient_GetSubprocessors_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscriberByEmail provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubscriberByEmail, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, email, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, email)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriberByEmail")
	}

	var r0 *openlaneclient.GetSubscriberByEmail
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubscriberByEmail, error)); ok {
		return returnFunc(ctx, email, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetSubscriberByEmail); ok {
		r0 = returnFunc(ctx, email, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubscriberByEmail)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, email, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubscriberByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriberByEmail'
type MockOpenlaneGraphClient_GetSubscriberByEmail_Call struct {
	*mock.Call
}

// GetSubscriberByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubscriberByEmail(ctx interface{}, email interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubscriberByEmail_Call {
	return &MockOpenlaneGraphClient_GetSubscriberByEmail_Call{Call: _e.mock.On("GetSubscriberByEmail",
		append([]interface{}{ctx, email}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubscriberByEmail_Call) Run(run func(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubscriberByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubscriberByEmail_Call) Return(getSubscriberByEmail *openlaneclient.GetSubscriberByEmail, err error) *MockOpenlaneGraphClient_GetSubscriberByEmail_Call {
	_c.Call.Return(getSubscriberByEmail, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubscriberByEmail_Call) RunAndReturn(run func(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubscriberByEmail, error)) *MockOpenlaneGraphClient_GetSubscriberByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscribers provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetSubscribers(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.SubscriberWhereInput, orderBy []*openlaneclient.SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubscribers, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSubscribers")
	}

	var r0 *openlaneclient.GetSubscribers
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.SubscriberWhereInput, []*openlaneclient.SubscriberOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetSubscribers, error)); ok {
		return returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.SubscriberWhereInput, []*openlaneclient.SubscriberOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetSubscribers); ok {
		r0 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetSubscribers)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.SubscriberWhereInput, []*openlaneclient.SubscriberOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetSubscribers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscribers'
type MockOpenlaneGraphClient_GetSubscribers_Call struct {
	*mock.Call
}

// GetSubscribers is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - where *openlaneclient.SubscriberWhereInput
//   - orderBy []*openlaneclient.SubscriberOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetSubscribers(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, where interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetSubscribers_Call {
	return &MockOpenlaneGraphClient_GetSubscribers_Call{Call: _e.mock.On("GetSubscribers",
		append([]interface{}{ctx, first, last, after, before, where, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetSubscribers_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.SubscriberWhereInput, orderBy []*openlaneclient.SubscriberOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetSubscribers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *openlaneclient.SubscriberWhereInput
		if args[5] != nil {
			arg5 = args[5].(*openlaneclient.SubscriberWhereInput)
		}
		var arg6 []*openlaneclient.SubscriberOrder
		if args[6] != nil {
			arg6 = args[6].([]*openlaneclient.SubscriberOrder)
		}
		var arg7 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 7 {
			variadicArgs = args[7].([]clientv2.RequestInterceptor)
		}
		arg7 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubscribers_Call) Return(getSubscribers *openlaneclient.GetSubscribers, err error) *MockOpenlaneGraphClient_GetSubscribers_Call {
	_c.Call.Return(getSubscribers, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetSubscribers_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.SubscriberWhereInput, orderBy []*openlaneclient.SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetSubscribers, error)) *MockOpenlaneGraphClient_GetSubscribers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTFASetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTFASetting(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTFASetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, interceptors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTFASetting")
	}

	var r0 *openlaneclient.GetTFASetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) (*openlaneclient.GetTFASetting, error)); ok {
		return returnFunc(ctx, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clientv2.RequestInterceptor) *openlaneclient.GetTFASetting); ok {
		r0 = returnFunc(ctx, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTFASetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTFASetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTFASetting'
type MockOpenlaneGraphClient_GetTFASetting_Call struct {
	*mock.Call
}

// GetTFASetting is a helper method to define mock.On call
//   - ctx context.Context
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTFASetting(ctx interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTFASetting_Call {
	return &MockOpenlaneGraphClient_GetTFASetting_Call{Call: _e.mock.On("GetTFASetting",
		append([]interface{}{ctx}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTFASetting_Call) Run(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTFASetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 1 {
			variadicArgs = args[1].([]clientv2.RequestInterceptor)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTFASetting_Call) Return(getTFASetting *openlaneclient.GetTFASetting, err error) *MockOpenlaneGraphClient_GetTFASetting_Call {
	_c.Call.Return(getTFASetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTFASetting_Call) RunAndReturn(run func(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTFASetting, error)) *MockOpenlaneGraphClient_GetTFASetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTaskByID(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTaskByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, taskID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, taskID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *openlaneclient.GetTaskByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetTaskByID, error)); ok {
		return returnFunc(ctx, taskID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetTaskByID); ok {
		r0 = returnFunc(ctx, taskID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTaskByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, taskID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type MockOpenlaneGraphClient_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTaskByID(ctx interface{}, taskID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTaskByID_Call {
	return &MockOpenlaneGraphClient_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID",
		append([]interface{}{ctx, taskID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTaskByID_Call) Run(run func(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTaskByID_Call) Return(getTaskByID *openlaneclient.GetTaskByID, err error) *MockOpenlaneGraphClient_GetTaskByID_Call {
	_c.Call.Return(getTaskByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTaskByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTaskByID, error)) *MockOpenlaneGraphClient_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTaskHistories(ctx context.Context, where *openlaneclient.TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTaskHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTaskHistories")
	}

	var r0 *openlaneclient.GetTaskHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.TaskHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTaskHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.TaskHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTaskHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTaskHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.TaskHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTaskHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskHistories'
type MockOpenlaneGraphClient_GetTaskHistories_Call struct {
	*mock.Call
}

// GetTaskHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.TaskHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTaskHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTaskHistories_Call {
	return &MockOpenlaneGraphClient_GetTaskHistories_Call{Call: _e.mock.On("GetTaskHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTaskHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTaskHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.TaskHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.TaskHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTaskHistories_Call) Return(getTaskHistories *openlaneclient.GetTaskHistories, err error) *MockOpenlaneGraphClient_GetTaskHistories_Call {
	_c.Call.Return(getTaskHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTaskHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTaskHistories, error)) *MockOpenlaneGraphClient_GetTaskHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTasks(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.TaskWhereInput, orderBy []*openlaneclient.TaskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTasks, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, after, before, where, orderBy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 *openlaneclient.GetTasks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.TaskWhereInput, []*openlaneclient.TaskOrder, ...clientv2.RequestInterceptor) (*openlaneclient.GetTasks, error)); ok {
		return returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.TaskWhereInput, []*openlaneclient.TaskOrder, ...clientv2.RequestInterceptor) *openlaneclient.GetTasks); ok {
		r0 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTasks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *string, *string, *openlaneclient.TaskWhereInput, []*openlaneclient.TaskOrder, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, after, before, where, orderBy, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type MockOpenlaneGraphClient_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - after *string
//   - before *string
//   - where *openlaneclient.TaskWhereInput
//   - orderBy []*openlaneclient.TaskOrder
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTasks(ctx interface{}, first interface{}, last interface{}, after interface{}, before interface{}, where interface{}, orderBy interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTasks_Call {
	return &MockOpenlaneGraphClient_GetTasks_Call{Call: _e.mock.On("GetTasks",
		append([]interface{}{ctx, first, last, after, before, where, orderBy}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTasks_Call) Run(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.TaskWhereInput, orderBy []*openlaneclient.TaskOrder, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *openlaneclient.TaskWhereInput
		if args[5] != nil {
			arg5 = args[5].(*openlaneclient.TaskWhereInput)
		}
		var arg6 []*openlaneclient.TaskOrder
		if args[6] != nil {
			arg6 = args[6].([]*openlaneclient.TaskOrder)
		}
		var arg7 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 7 {
			variadicArgs = args[7].([]clientv2.RequestInterceptor)
		}
		arg7 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTasks_Call) Return(getTasks *openlaneclient.GetTasks, err error) *MockOpenlaneGraphClient_GetTasks_Call {
	_c.Call.Return(getTasks, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTasks_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, after *string, before *string, where *openlaneclient.TaskWhereInput, orderBy []*openlaneclient.TaskOrder, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTasks, error)) *MockOpenlaneGraphClient_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTemplateByID(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTemplateByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, getTemplateID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, getTemplateID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateByID")
	}

	var r0 *openlaneclient.GetTemplateByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetTemplateByID, error)); ok {
		return returnFunc(ctx, getTemplateID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetTemplateByID); ok {
		r0 = returnFunc(ctx, getTemplateID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTemplateByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, getTemplateID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTemplateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateByID'
type MockOpenlaneGraphClient_GetTemplateByID_Call struct {
	*mock.Call
}

// GetTemplateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - getTemplateID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTemplateByID(ctx interface{}, getTemplateID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTemplateByID_Call {
	return &MockOpenlaneGraphClient_GetTemplateByID_Call{Call: _e.mock.On("GetTemplateByID",
		append([]interface{}{ctx, getTemplateID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTemplateByID_Call) Run(run func(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTemplateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTemplateByID_Call) Return(getTemplateByID *openlaneclient.GetTemplateByID, err error) *MockOpenlaneGraphClient_GetTemplateByID_Call {
	_c.Call.Return(getTemplateByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTemplateByID_Call) RunAndReturn(run func(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTemplateByID, error)) *MockOpenlaneGraphClient_GetTemplateByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTemplateHistories(ctx context.Context, where *openlaneclient.TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTemplateHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateHistories")
	}

	var r0 *openlaneclient.GetTemplateHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.TemplateHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTemplateHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.TemplateHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTemplateHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTemplateHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.TemplateHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTemplateHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateHistories'
type MockOpenlaneGraphClient_GetTemplateHistories_Call struct {
	*mock.Call
}

// GetTemplateHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.TemplateHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTemplateHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTemplateHistories_Call {
	return &MockOpenlaneGraphClient_GetTemplateHistories_Call{Call: _e.mock.On("GetTemplateHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTemplateHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTemplateHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.TemplateHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.TemplateHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTemplateHistories_Call) Return(getTemplateHistories *openlaneclient.GetTemplateHistories, err error) *MockOpenlaneGraphClient_GetTemplateHistories_Call {
	_c.Call.Return(getTemplateHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTemplateHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTemplateHistories, error)) *MockOpenlaneGraphClient_GetTemplateHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterByID(ctx context.Context, trustCenterID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, trustCenterID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, trustCenterID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterByID")
	}

	var r0 *openlaneclient.GetTrustCenterByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterByID, error)); ok {
		return returnFunc(ctx, trustCenterID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterByID); ok {
		r0 = returnFunc(ctx, trustCenterID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, trustCenterID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterByID'
type MockOpenlaneGraphClient_GetTrustCenterByID_Call struct {
	*mock.Call
}

// GetTrustCenterByID is a helper method to define mock.On call
//   - ctx context.Context
//   - trustCenterID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterByID(ctx interface{}, trustCenterID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterByID_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterByID_Call{Call: _e.mock.On("GetTrustCenterByID",
		append([]interface{}{ctx, trustCenterID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterByID_Call) Run(run func(ctx context.Context, trustCenterID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterByID_Call) Return(getTrustCenterByID *openlaneclient.GetTrustCenterByID, err error) *MockOpenlaneGraphClient_GetTrustCenterByID_Call {
	_c.Call.Return(getTrustCenterByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterByID_Call) RunAndReturn(run func(ctx context.Context, trustCenterID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterByID, error)) *MockOpenlaneGraphClient_GetTrustCenterByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterComplianceByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterComplianceByID(ctx context.Context, trustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterComplianceByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, trustCenterComplianceID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, trustCenterComplianceID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterComplianceByID")
	}

	var r0 *openlaneclient.GetTrustCenterComplianceByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterComplianceByID, error)); ok {
		return returnFunc(ctx, trustCenterComplianceID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterComplianceByID); ok {
		r0 = returnFunc(ctx, trustCenterComplianceID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterComplianceByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, trustCenterComplianceID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterComplianceByID'
type MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call struct {
	*mock.Call
}

// GetTrustCenterComplianceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - trustCenterComplianceID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterComplianceByID(ctx interface{}, trustCenterComplianceID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call{Call: _e.mock.On("GetTrustCenterComplianceByID",
		append([]interface{}{ctx, trustCenterComplianceID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call) Run(run func(ctx context.Context, trustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call) Return(getTrustCenterComplianceByID *openlaneclient.GetTrustCenterComplianceByID, err error) *MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call {
	_c.Call.Return(getTrustCenterComplianceByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call) RunAndReturn(run func(ctx context.Context, trustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterComplianceByID, error)) *MockOpenlaneGraphClient_GetTrustCenterComplianceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterComplianceHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterComplianceHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterComplianceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterComplianceHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterComplianceHistories")
	}

	var r0 *openlaneclient.GetTrustCenterComplianceHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterComplianceHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterComplianceHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterComplianceHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterComplianceHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterComplianceHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterComplianceHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterComplianceHistories'
type MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call struct {
	*mock.Call
}

// GetTrustCenterComplianceHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterComplianceHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterComplianceHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call{Call: _e.mock.On("GetTrustCenterComplianceHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterComplianceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterComplianceHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterComplianceHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call) Return(getTrustCenterComplianceHistories *openlaneclient.GetTrustCenterComplianceHistories, err error) *MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call {
	_c.Call.Return(getTrustCenterComplianceHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterComplianceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterComplianceHistories, error)) *MockOpenlaneGraphClient_GetTrustCenterComplianceHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterCompliances provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterCompliances(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterComplianceWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterCompliances, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterCompliances")
	}

	var r0 *openlaneclient.GetTrustCenterCompliances
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterComplianceWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterCompliances, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterComplianceWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterCompliances); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterCompliances)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterComplianceWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterCompliances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterCompliances'
type MockOpenlaneGraphClient_GetTrustCenterCompliances_Call struct {
	*mock.Call
}

// GetTrustCenterCompliances is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterComplianceWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterCompliances(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterCompliances_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterCompliances_Call{Call: _e.mock.On("GetTrustCenterCompliances",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterCompliances_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterComplianceWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterCompliances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterComplianceWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterComplianceWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterCompliances_Call) Return(getTrustCenterCompliances *openlaneclient.GetTrustCenterCompliances, err error) *MockOpenlaneGraphClient_GetTrustCenterCompliances_Call {
	_c.Call.Return(getTrustCenterCompliances, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterCompliances_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterComplianceWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterCompliances, error)) *MockOpenlaneGraphClient_GetTrustCenterCompliances_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterHistories")
	}

	var r0 *openlaneclient.GetTrustCenterHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterHistories'
type MockOpenlaneGraphClient_GetTrustCenterHistories_Call struct {
	*mock.Call
}

// GetTrustCenterHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterHistories_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterHistories_Call{Call: _e.mock.On("GetTrustCenterHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterHistories_Call) Return(getTrustCenterHistories *openlaneclient.GetTrustCenterHistories, err error) *MockOpenlaneGraphClient_GetTrustCenterHistories_Call {
	_c.Call.Return(getTrustCenterHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterHistories, error)) *MockOpenlaneGraphClient_GetTrustCenterHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterSettingByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterSettingByID(ctx context.Context, trustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettingByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, trustCenterSettingID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, trustCenterSettingID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterSettingByID")
	}

	var r0 *openlaneclient.GetTrustCenterSettingByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettingByID, error)); ok {
		return returnFunc(ctx, trustCenterSettingID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterSettingByID); ok {
		r0 = returnFunc(ctx, trustCenterSettingID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterSettingByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, trustCenterSettingID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterSettingByID'
type MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call struct {
	*mock.Call
}

// GetTrustCenterSettingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - trustCenterSettingID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterSettingByID(ctx interface{}, trustCenterSettingID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call{Call: _e.mock.On("GetTrustCenterSettingByID",
		append([]interface{}{ctx, trustCenterSettingID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call) Run(run func(ctx context.Context, trustCenterSettingID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call) Return(getTrustCenterSettingByID *openlaneclient.GetTrustCenterSettingByID, err error) *MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call {
	_c.Call.Return(getTrustCenterSettingByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call) RunAndReturn(run func(ctx context.Context, trustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettingByID, error)) *MockOpenlaneGraphClient_GetTrustCenterSettingByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterSettingHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterSettingHistories")
	}

	var r0 *openlaneclient.GetTrustCenterSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSettingHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettingHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSettingHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterSettingHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSettingHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterSettingHistories'
type MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call struct {
	*mock.Call
}

// GetTrustCenterSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterSettingHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterSettingHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call{Call: _e.mock.On("GetTrustCenterSettingHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterSettingHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterSettingHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call) Return(getTrustCenterSettingHistories *openlaneclient.GetTrustCenterSettingHistories, err error) *MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call {
	_c.Call.Return(getTrustCenterSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettingHistories, error)) *MockOpenlaneGraphClient_GetTrustCenterSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterSettings(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterSettings")
	}

	var r0 *openlaneclient.GetTrustCenterSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSettingWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettings, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSettingWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterSettings); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSettingWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterSettings'
type MockOpenlaneGraphClient_GetTrustCenterSettings_Call struct {
	*mock.Call
}

// GetTrustCenterSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterSettingWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterSettings(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterSettings_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterSettings_Call{Call: _e.mock.On("GetTrustCenterSettings",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettings_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSettingWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterSettingWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterSettingWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettings_Call) Return(getTrustCenterSettings *openlaneclient.GetTrustCenterSettings, err error) *MockOpenlaneGraphClient_GetTrustCenterSettings_Call {
	_c.Call.Return(getTrustCenterSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSettings_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSettings, error)) *MockOpenlaneGraphClient_GetTrustCenterSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterSubprocessorByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterSubprocessorByID(ctx context.Context, trustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessorByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, trustCenterSubprocessorID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, trustCenterSubprocessorID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterSubprocessorByID")
	}

	var r0 *openlaneclient.GetTrustCenterSubprocessorByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessorByID, error)); ok {
		return returnFunc(ctx, trustCenterSubprocessorID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterSubprocessorByID); ok {
		r0 = returnFunc(ctx, trustCenterSubprocessorID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterSubprocessorByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, trustCenterSubprocessorID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterSubprocessorByID'
type MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call struct {
	*mock.Call
}

// GetTrustCenterSubprocessorByID is a helper method to define mock.On call
//   - ctx context.Context
//   - trustCenterSubprocessorID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterSubprocessorByID(ctx interface{}, trustCenterSubprocessorID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call{Call: _e.mock.On("GetTrustCenterSubprocessorByID",
		append([]interface{}{ctx, trustCenterSubprocessorID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call) Run(run func(ctx context.Context, trustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call) Return(getTrustCenterSubprocessorByID *openlaneclient.GetTrustCenterSubprocessorByID, err error) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call {
	_c.Call.Return(getTrustCenterSubprocessorByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call) RunAndReturn(run func(ctx context.Context, trustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessorByID, error)) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterSubprocessorHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterSubprocessorHistories(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessorHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterSubprocessorHistories")
	}

	var r0 *openlaneclient.GetTrustCenterSubprocessorHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSubprocessorHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessorHistories, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSubprocessorHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterSubprocessorHistories); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterSubprocessorHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSubprocessorHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterSubprocessorHistories'
type MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call struct {
	*mock.Call
}

// GetTrustCenterSubprocessorHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterSubprocessorHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterSubprocessorHistories(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call{Call: _e.mock.On("GetTrustCenterSubprocessorHistories",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterSubprocessorHistoryWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterSubprocessorHistoryWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call) Return(getTrustCenterSubprocessorHistories *openlaneclient.GetTrustCenterSubprocessorHistories, err error) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call {
	_c.Call.Return(getTrustCenterSubprocessorHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessorHistories, error)) *MockOpenlaneGraphClient_GetTrustCenterSubprocessorHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenterSubprocessors provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenterSubprocessors(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessors, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenterSubprocessors")
	}

	var r0 *openlaneclient.GetTrustCenterSubprocessors
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSubprocessorWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessors, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSubprocessorWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenterSubprocessors); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenterSubprocessors)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterSubprocessorWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenterSubprocessors'
type MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call struct {
	*mock.Call
}

// GetTrustCenterSubprocessors is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterSubprocessorWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenterSubprocessors(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call {
	return &MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call{Call: _e.mock.On("GetTrustCenterSubprocessors",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterSubprocessorWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterSubprocessorWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call) Return(getTrustCenterSubprocessors *openlaneclient.GetTrustCenterSubprocessors, err error) *MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call {
	_c.Call.Return(getTrustCenterSubprocessors, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterSubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenterSubprocessors, error)) *MockOpenlaneGraphClient_GetTrustCenterSubprocessors_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustCenters provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetTrustCenters(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenters, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, first, last, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, first, last, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTrustCenters")
	}

	var r0 *openlaneclient.GetTrustCenters
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenters, error)); ok {
		return returnFunc(ctx, first, last, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetTrustCenters); ok {
		r0 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetTrustCenters)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64, *openlaneclient.TrustCenterWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, first, last, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetTrustCenters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustCenters'
type MockOpenlaneGraphClient_GetTrustCenters_Call struct {
	*mock.Call
}

// GetTrustCenters is a helper method to define mock.On call
//   - ctx context.Context
//   - first *int64
//   - last *int64
//   - where *openlaneclient.TrustCenterWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetTrustCenters(ctx interface{}, first interface{}, last interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetTrustCenters_Call {
	return &MockOpenlaneGraphClient_GetTrustCenters_Call{Call: _e.mock.On("GetTrustCenters",
		append([]interface{}{ctx, first, last, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetTrustCenters_Call) Run(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetTrustCenters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 *openlaneclient.TrustCenterWhereInput
		if args[3] != nil {
			arg3 = args[3].(*openlaneclient.TrustCenterWhereInput)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenters_Call) Return(getTrustCenters *openlaneclient.GetTrustCenters, err error) *MockOpenlaneGraphClient_GetTrustCenters_Call {
	_c.Call.Return(getTrustCenters, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetTrustCenters_Call) RunAndReturn(run func(ctx context.Context, first *int64, last *int64, where *openlaneclient.TrustCenterWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetTrustCenters, error)) *MockOpenlaneGraphClient_GetTrustCenters_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, userID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, userID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *openlaneclient.GetUserByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetUserByID, error)); ok {
		return returnFunc(ctx, userID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetUserByID); ok {
		r0 = returnFunc(ctx, userID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetUserByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, userID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockOpenlaneGraphClient_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetUserByID(ctx interface{}, userID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetUserByID_Call {
	return &MockOpenlaneGraphClient_GetUserByID_Call{Call: _e.mock.On("GetUserByID",
		append([]interface{}{ctx, userID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetUserByID_Call) Run(run func(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserByID_Call) Return(getUserByID *openlaneclient.GetUserByID, err error) *MockOpenlaneGraphClient_GetUserByID_Call {
	_c.Call.Return(getUserByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserByID, error)) *MockOpenlaneGraphClient_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByIDWithOrgs provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserByIDWithOrgs, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, userID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, userID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserByIDWithOrgs")
	}

	var r0 *openlaneclient.GetUserByIDWithOrgs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetUserByIDWithOrgs, error)); ok {
		return returnFunc(ctx, userID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetUserByIDWithOrgs); ok {
		r0 = returnFunc(ctx, userID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetUserByIDWithOrgs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, userID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByIDWithOrgs'
type MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call struct {
	*mock.Call
}

// GetUserByIDWithOrgs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetUserByIDWithOrgs(ctx interface{}, userID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call {
	return &MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call{Call: _e.mock.On("GetUserByIDWithOrgs",
		append([]interface{}{ctx, userID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call) Run(run func(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call) Return(getUserByIDWithOrgs *openlaneclient.GetUserByIDWithOrgs, err error) *MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call {
	_c.Call.Return(getUserByIDWithOrgs, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call) RunAndReturn(run func(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserByIDWithOrgs, error)) *MockOpenlaneGraphClient_GetUserByIDWithOrgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetUserHistories(ctx context.Context, where *openlaneclient.UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserHistories")
	}

	var r0 *openlaneclient.GetUserHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.UserHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetUserHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.UserHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetUserHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetUserHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.UserHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetUserHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserHistories'
type MockOpenlaneGraphClient_GetUserHistories_Call struct {
	*mock.Call
}

// GetUserHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.UserHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetUserHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetUserHistories_Call {
	return &MockOpenlaneGraphClient_GetUserHistories_Call{Call: _e.mock.On("GetUserHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetUserHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetUserHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.UserHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.UserHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserHistories_Call) Return(getUserHistories *openlaneclient.GetUserHistories, err error) *MockOpenlaneGraphClient_GetUserHistories_Call {
	_c.Call.Return(getUserHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserHistories, error)) *MockOpenlaneGraphClient_GetUserHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSettingByID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettingByID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, userSettingID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, userSettingID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettingByID")
	}

	var r0 *openlaneclient.GetUserSettingByID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettingByID, error)); ok {
		return returnFunc(ctx, userSettingID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GetUserSettingByID); ok {
		r0 = returnFunc(ctx, userSettingID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetUserSettingByID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, userSettingID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetUserSettingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSettingByID'
type MockOpenlaneGraphClient_GetUserSettingByID_Call struct {
	*mock.Call
}

// GetUserSettingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userSettingID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetUserSettingByID(ctx interface{}, userSettingID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetUserSettingByID_Call {
	return &MockOpenlaneGraphClient_GetUserSettingByID_Call{Call: _e.mock.On("GetUserSettingByID",
		append([]interface{}{ctx, userSettingID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetUserSettingByID_Call) Run(run func(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetUserSettingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserSettingByID_Call) Return(getUserSettingByID *openlaneclient.GetUserSettingByID, err error) *MockOpenlaneGraphClient_GetUserSettingByID_Call {
	_c.Call.Return(getUserSettingByID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserSettingByID_Call) RunAndReturn(run func(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettingByID, error)) *MockOpenlaneGraphClient_GetUserSettingByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSettingHistories provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetUserSettingHistories(ctx context.Context, where *openlaneclient.UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettingHistories, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettingHistories")
	}

	var r0 *openlaneclient.GetUserSettingHistories
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.UserSettingHistoryWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettingHistories, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.UserSettingHistoryWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetUserSettingHistories); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetUserSettingHistories)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.UserSettingHistoryWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetUserSettingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSettingHistories'
type MockOpenlaneGraphClient_GetUserSettingHistories_Call struct {
	*mock.Call
}

// GetUserSettingHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.UserSettingHistoryWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetUserSettingHistories(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetUserSettingHistories_Call {
	return &MockOpenlaneGraphClient_GetUserSettingHistories_Call{Call: _e.mock.On("GetUserSettingHistories",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetUserSettingHistories_Call) Run(run func(ctx context.Context, where *openlaneclient.UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetUserSettingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.UserSettingHistoryWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.UserSettingHistoryWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserSettingHistories_Call) Return(getUserSettingHistories *openlaneclient.GetUserSettingHistories, err error) *MockOpenlaneGraphClient_GetUserSettingHistories_Call {
	_c.Call.Return(getUserSettingHistories, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserSettingHistories_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettingHistories, error)) *MockOpenlaneGraphClient_GetUserSettingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSettings provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GetUserSettings(ctx context.Context, where openlaneclient.UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettings, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettings")
	}

	var r0 *openlaneclient.GetUserSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.UserSettingWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettings, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.UserSettingWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.GetUserSettings); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GetUserSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.UserSettingWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GetUserSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSettings'
type MockOpenlaneGraphClient_GetUserSettings_Call struct {
	*mock.Call
}

// GetUserSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - where openlaneclient.UserSettingWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GetUserSettings(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GetUserSettings_Call {
	return &MockOpenlaneGraphClient_GetUserSettings_Call{Call: _e.mock.On("GetUserSettings",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GetUserSettings_Call) Run(run func(ctx context.Context, where openlaneclient.UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GetUserSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.UserSettingWhereInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.UserSettingWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserSettings_Call) Return(getUserSettings *openlaneclient.GetUserSettings, err error) *MockOpenlaneGraphClient_GetUserSettings_Call {
	_c.Call.Return(getUserSettings, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GetUserSettings_Call) RunAndReturn(run func(ctx context.Context, where openlaneclient.UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GetUserSettings, error)) *MockOpenlaneGraphClient_GetUserSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalSearch provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) GlobalSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GlobalSearch, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, query, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GlobalSearch")
	}

	var r0 *openlaneclient.GlobalSearch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.GlobalSearch, error)); ok {
		return returnFunc(ctx, query, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.GlobalSearch); ok {
		r0 = returnFunc(ctx, query, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.GlobalSearch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, query, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_GlobalSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalSearch'
type MockOpenlaneGraphClient_GlobalSearch_Call struct {
	*mock.Call
}

// GlobalSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) GlobalSearch(ctx interface{}, query interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_GlobalSearch_Call {
	return &MockOpenlaneGraphClient_GlobalSearch_Call{Call: _e.mock.On("GlobalSearch",
		append([]interface{}{ctx, query}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_GlobalSearch_Call) Run(run func(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_GlobalSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_GlobalSearch_Call) Return(globalSearch *openlaneclient.GlobalSearch, err error) *MockOpenlaneGraphClient_GlobalSearch_Call {
	_c.Call.Return(globalSearch, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_GlobalSearch_Call) RunAndReturn(run func(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.GlobalSearch, error)) *MockOpenlaneGraphClient_GlobalSearch_Call {
	_c.Call.Return(run)
	return _c
}

// InvitesByOrgID provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) InvitesByOrgID(ctx context.Context, where *openlaneclient.InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.InvitesByOrgID, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, where, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, where)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for InvitesByOrgID")
	}

	var r0 *openlaneclient.InvitesByOrgID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.InviteWhereInput, ...clientv2.RequestInterceptor) (*openlaneclient.InvitesByOrgID, error)); ok {
		return returnFunc(ctx, where, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *openlaneclient.InviteWhereInput, ...clientv2.RequestInterceptor) *openlaneclient.InvitesByOrgID); ok {
		r0 = returnFunc(ctx, where, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.InvitesByOrgID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *openlaneclient.InviteWhereInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, where, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_InvitesByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvitesByOrgID'
type MockOpenlaneGraphClient_InvitesByOrgID_Call struct {
	*mock.Call
}

// InvitesByOrgID is a helper method to define mock.On call
//   - ctx context.Context
//   - where *openlaneclient.InviteWhereInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) InvitesByOrgID(ctx interface{}, where interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_InvitesByOrgID_Call {
	return &MockOpenlaneGraphClient_InvitesByOrgID_Call{Call: _e.mock.On("InvitesByOrgID",
		append([]interface{}{ctx, where}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_InvitesByOrgID_Call) Run(run func(ctx context.Context, where *openlaneclient.InviteWhereInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_InvitesByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *openlaneclient.InviteWhereInput
		if args[1] != nil {
			arg1 = args[1].(*openlaneclient.InviteWhereInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_InvitesByOrgID_Call) Return(invitesByOrgID *openlaneclient.InvitesByOrgID, err error) *MockOpenlaneGraphClient_InvitesByOrgID_Call {
	_c.Call.Return(invitesByOrgID, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_InvitesByOrgID_Call) RunAndReturn(run func(ctx context.Context, where *openlaneclient.InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.InvitesByOrgID, error)) *MockOpenlaneGraphClient_InvitesByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroup provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) RemoveUserFromGroup(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromGroup, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteGroupMembershipID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteGroupMembershipID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 *openlaneclient.RemoveUserFromGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromGroup, error)); ok {
		return returnFunc(ctx, deleteGroupMembershipID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.RemoveUserFromGroup); ok {
		r0 = returnFunc(ctx, deleteGroupMembershipID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.RemoveUserFromGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteGroupMembershipID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_RemoveUserFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroup'
type MockOpenlaneGraphClient_RemoveUserFromGroup_Call struct {
	*mock.Call
}

// RemoveUserFromGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteGroupMembershipID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) RemoveUserFromGroup(ctx interface{}, deleteGroupMembershipID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_RemoveUserFromGroup_Call {
	return &MockOpenlaneGraphClient_RemoveUserFromGroup_Call{Call: _e.mock.On("RemoveUserFromGroup",
		append([]interface{}{ctx, deleteGroupMembershipID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromGroup_Call) Run(run func(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_RemoveUserFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromGroup_Call) Return(removeUserFromGroup *openlaneclient.RemoveUserFromGroup, err error) *MockOpenlaneGraphClient_RemoveUserFromGroup_Call {
	_c.Call.Return(removeUserFromGroup, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromGroup_Call) RunAndReturn(run func(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromGroup, error)) *MockOpenlaneGraphClient_RemoveUserFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromOrg provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) RemoveUserFromOrg(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromOrg, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteOrgMembershipID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteOrgMembershipID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromOrg")
	}

	var r0 *openlaneclient.RemoveUserFromOrg
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromOrg, error)); ok {
		return returnFunc(ctx, deleteOrgMembershipID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.RemoveUserFromOrg); ok {
		r0 = returnFunc(ctx, deleteOrgMembershipID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.RemoveUserFromOrg)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteOrgMembershipID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_RemoveUserFromOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromOrg'
type MockOpenlaneGraphClient_RemoveUserFromOrg_Call struct {
	*mock.Call
}

// RemoveUserFromOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteOrgMembershipID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) RemoveUserFromOrg(ctx interface{}, deleteOrgMembershipID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_RemoveUserFromOrg_Call {
	return &MockOpenlaneGraphClient_RemoveUserFromOrg_Call{Call: _e.mock.On("RemoveUserFromOrg",
		append([]interface{}{ctx, deleteOrgMembershipID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromOrg_Call) Run(run func(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_RemoveUserFromOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromOrg_Call) Return(removeUserFromOrg *openlaneclient.RemoveUserFromOrg, err error) *MockOpenlaneGraphClient_RemoveUserFromOrg_Call {
	_c.Call.Return(removeUserFromOrg, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromOrg_Call) RunAndReturn(run func(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromOrg, error)) *MockOpenlaneGraphClient_RemoveUserFromOrg_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) RemoveUserFromProgram(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, deleteProgramMembershipID, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, deleteProgramMembershipID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromProgram")
	}

	var r0 *openlaneclient.RemoveUserFromProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromProgram, error)); ok {
		return returnFunc(ctx, deleteProgramMembershipID, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...clientv2.RequestInterceptor) *openlaneclient.RemoveUserFromProgram); ok {
		r0 = returnFunc(ctx, deleteProgramMembershipID, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.RemoveUserFromProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, deleteProgramMembershipID, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_RemoveUserFromProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromProgram'
type MockOpenlaneGraphClient_RemoveUserFromProgram_Call struct {
	*mock.Call
}

// RemoveUserFromProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - deleteProgramMembershipID string
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) RemoveUserFromProgram(ctx interface{}, deleteProgramMembershipID interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_RemoveUserFromProgram_Call {
	return &MockOpenlaneGraphClient_RemoveUserFromProgram_Call{Call: _e.mock.On("RemoveUserFromProgram",
		append([]interface{}{ctx, deleteProgramMembershipID}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromProgram_Call) Run(run func(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_RemoveUserFromProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromProgram_Call) Return(removeUserFromProgram *openlaneclient.RemoveUserFromProgram, err error) *MockOpenlaneGraphClient_RemoveUserFromProgram_Call {
	_c.Call.Return(removeUserFromProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_RemoveUserFromProgram_Call) RunAndReturn(run func(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.RemoveUserFromProgram, error)) *MockOpenlaneGraphClient_RemoveUserFromProgram_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAPIToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateAPIToken(ctx context.Context, updateAPITokenID string, input openlaneclient.UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateAPIToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateAPITokenID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateAPITokenID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateAPIToken")
	}

	var r0 *openlaneclient.UpdateAPIToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateAPITokenInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateAPIToken, error)); ok {
		return returnFunc(ctx, updateAPITokenID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateAPITokenInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateAPIToken); ok {
		r0 = returnFunc(ctx, updateAPITokenID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateAPIToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateAPITokenInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateAPITokenID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateAPIToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAPIToken'
type MockOpenlaneGraphClient_UpdateAPIToken_Call struct {
	*mock.Call
}

// UpdateAPIToken is a helper method to define mock.On call
//   - ctx context.Context
//   - updateAPITokenID string
//   - input openlaneclient.UpdateAPITokenInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateAPIToken(ctx interface{}, updateAPITokenID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateAPIToken_Call {
	return &MockOpenlaneGraphClient_UpdateAPIToken_Call{Call: _e.mock.On("UpdateAPIToken",
		append([]interface{}{ctx, updateAPITokenID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateAPIToken_Call) Run(run func(ctx context.Context, updateAPITokenID string, input openlaneclient.UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateAPIToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateAPITokenInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateAPITokenInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateAPIToken_Call) Return(updateAPIToken *openlaneclient.UpdateAPIToken, err error) *MockOpenlaneGraphClient_UpdateAPIToken_Call {
	_c.Call.Return(updateAPIToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateAPIToken_Call) RunAndReturn(run func(ctx context.Context, updateAPITokenID string, input openlaneclient.UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateAPIToken, error)) *MockOpenlaneGraphClient_UpdateAPIToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateActionPlan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateActionPlan(ctx context.Context, updateActionPlanID string, input openlaneclient.UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateActionPlan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateActionPlanID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateActionPlanID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateActionPlan")
	}

	var r0 *openlaneclient.UpdateActionPlan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateActionPlanInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateActionPlan, error)); ok {
		return returnFunc(ctx, updateActionPlanID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateActionPlanInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateActionPlan); ok {
		r0 = returnFunc(ctx, updateActionPlanID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateActionPlan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateActionPlanInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateActionPlanID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateActionPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateActionPlan'
type MockOpenlaneGraphClient_UpdateActionPlan_Call struct {
	*mock.Call
}

// UpdateActionPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - updateActionPlanID string
//   - input openlaneclient.UpdateActionPlanInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateActionPlan(ctx interface{}, updateActionPlanID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateActionPlan_Call {
	return &MockOpenlaneGraphClient_UpdateActionPlan_Call{Call: _e.mock.On("UpdateActionPlan",
		append([]interface{}{ctx, updateActionPlanID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateActionPlan_Call) Run(run func(ctx context.Context, updateActionPlanID string, input openlaneclient.UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateActionPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateActionPlanInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateActionPlanInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateActionPlan_Call) Return(updateActionPlan *openlaneclient.UpdateActionPlan, err error) *MockOpenlaneGraphClient_UpdateActionPlan_Call {
	_c.Call.Return(updateActionPlan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateActionPlan_Call) RunAndReturn(run func(ctx context.Context, updateActionPlanID string, input openlaneclient.UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateActionPlan, error)) *MockOpenlaneGraphClient_UpdateActionPlan_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAsset provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateAsset(ctx context.Context, updateAssetID string, input openlaneclient.UpdateAssetInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateAsset, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateAssetID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateAssetID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsset")
	}

	var r0 *openlaneclient.UpdateAsset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateAssetInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateAsset, error)); ok {
		return returnFunc(ctx, updateAssetID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateAssetInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateAsset); ok {
		r0 = returnFunc(ctx, updateAssetID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateAsset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateAssetInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateAssetID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAsset'
type MockOpenlaneGraphClient_UpdateAsset_Call struct {
	*mock.Call
}

// UpdateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - updateAssetID string
//   - input openlaneclient.UpdateAssetInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateAsset(ctx interface{}, updateAssetID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateAsset_Call {
	return &MockOpenlaneGraphClient_UpdateAsset_Call{Call: _e.mock.On("UpdateAsset",
		append([]interface{}{ctx, updateAssetID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateAsset_Call) Run(run func(ctx context.Context, updateAssetID string, input openlaneclient.UpdateAssetInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateAssetInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateAssetInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateAsset_Call) Return(updateAsset *openlaneclient.UpdateAsset, err error) *MockOpenlaneGraphClient_UpdateAsset_Call {
	_c.Call.Return(updateAsset, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateAsset_Call) RunAndReturn(run func(ctx context.Context, updateAssetID string, input openlaneclient.UpdateAssetInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateAsset, error)) *MockOpenlaneGraphClient_UpdateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContact provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateContact(ctx context.Context, updateContactID string, input openlaneclient.UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateContact, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateContactID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateContactID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateContact")
	}

	var r0 *openlaneclient.UpdateContact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateContactInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateContact, error)); ok {
		return returnFunc(ctx, updateContactID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateContactInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateContact); ok {
		r0 = returnFunc(ctx, updateContactID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateContact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateContactInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateContactID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContact'
type MockOpenlaneGraphClient_UpdateContact_Call struct {
	*mock.Call
}

// UpdateContact is a helper method to define mock.On call
//   - ctx context.Context
//   - updateContactID string
//   - input openlaneclient.UpdateContactInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateContact(ctx interface{}, updateContactID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateContact_Call {
	return &MockOpenlaneGraphClient_UpdateContact_Call{Call: _e.mock.On("UpdateContact",
		append([]interface{}{ctx, updateContactID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateContact_Call) Run(run func(ctx context.Context, updateContactID string, input openlaneclient.UpdateContactInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateContactInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateContactInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateContact_Call) Return(updateContact *openlaneclient.UpdateContact, err error) *MockOpenlaneGraphClient_UpdateContact_Call {
	_c.Call.Return(updateContact, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateContact_Call) RunAndReturn(run func(ctx context.Context, updateContactID string, input openlaneclient.UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateContact, error)) *MockOpenlaneGraphClient_UpdateContact_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateControl(ctx context.Context, updateControlID string, input openlaneclient.UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateControlID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateControlID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateControl")
	}

	var r0 *openlaneclient.UpdateControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControl, error)); ok {
		return returnFunc(ctx, updateControlID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateControl); ok {
		r0 = returnFunc(ctx, updateControlID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateControlID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateControl'
type MockOpenlaneGraphClient_UpdateControl_Call struct {
	*mock.Call
}

// UpdateControl is a helper method to define mock.On call
//   - ctx context.Context
//   - updateControlID string
//   - input openlaneclient.UpdateControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateControl(ctx interface{}, updateControlID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateControl_Call {
	return &MockOpenlaneGraphClient_UpdateControl_Call{Call: _e.mock.On("UpdateControl",
		append([]interface{}{ctx, updateControlID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateControl_Call) Run(run func(ctx context.Context, updateControlID string, input openlaneclient.UpdateControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateControlInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateControlInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControl_Call) Return(updateControl *openlaneclient.UpdateControl, err error) *MockOpenlaneGraphClient_UpdateControl_Call {
	_c.Call.Return(updateControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControl_Call) RunAndReturn(run func(ctx context.Context, updateControlID string, input openlaneclient.UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControl, error)) *MockOpenlaneGraphClient_UpdateControl_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateControlImplementation provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateControlImplementation(ctx context.Context, updateControlImplementationID string, input openlaneclient.UpdateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlImplementation, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateControlImplementationID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateControlImplementationID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateControlImplementation")
	}

	var r0 *openlaneclient.UpdateControlImplementation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlImplementationInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlImplementation, error)); ok {
		return returnFunc(ctx, updateControlImplementationID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlImplementationInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateControlImplementation); ok {
		r0 = returnFunc(ctx, updateControlImplementationID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateControlImplementation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateControlImplementationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateControlImplementationID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateControlImplementation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateControlImplementation'
type MockOpenlaneGraphClient_UpdateControlImplementation_Call struct {
	*mock.Call
}

// UpdateControlImplementation is a helper method to define mock.On call
//   - ctx context.Context
//   - updateControlImplementationID string
//   - input openlaneclient.UpdateControlImplementationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateControlImplementation(ctx interface{}, updateControlImplementationID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateControlImplementation_Call {
	return &MockOpenlaneGraphClient_UpdateControlImplementation_Call{Call: _e.mock.On("UpdateControlImplementation",
		append([]interface{}{ctx, updateControlImplementationID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateControlImplementation_Call) Run(run func(ctx context.Context, updateControlImplementationID string, input openlaneclient.UpdateControlImplementationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateControlImplementation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateControlImplementationInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateControlImplementationInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControlImplementation_Call) Return(updateControlImplementation *openlaneclient.UpdateControlImplementation, err error) *MockOpenlaneGraphClient_UpdateControlImplementation_Call {
	_c.Call.Return(updateControlImplementation, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControlImplementation_Call) RunAndReturn(run func(ctx context.Context, updateControlImplementationID string, input openlaneclient.UpdateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlImplementation, error)) *MockOpenlaneGraphClient_UpdateControlImplementation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateControlObjective provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateControlObjective(ctx context.Context, updateControlObjectiveID string, input openlaneclient.UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlObjective, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateControlObjectiveID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateControlObjectiveID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateControlObjective")
	}

	var r0 *openlaneclient.UpdateControlObjective
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlObjectiveInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlObjective, error)); ok {
		return returnFunc(ctx, updateControlObjectiveID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlObjectiveInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateControlObjective); ok {
		r0 = returnFunc(ctx, updateControlObjectiveID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateControlObjective)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateControlObjectiveInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateControlObjectiveID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateControlObjective_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateControlObjective'
type MockOpenlaneGraphClient_UpdateControlObjective_Call struct {
	*mock.Call
}

// UpdateControlObjective is a helper method to define mock.On call
//   - ctx context.Context
//   - updateControlObjectiveID string
//   - input openlaneclient.UpdateControlObjectiveInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateControlObjective(ctx interface{}, updateControlObjectiveID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateControlObjective_Call {
	return &MockOpenlaneGraphClient_UpdateControlObjective_Call{Call: _e.mock.On("UpdateControlObjective",
		append([]interface{}{ctx, updateControlObjectiveID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateControlObjective_Call) Run(run func(ctx context.Context, updateControlObjectiveID string, input openlaneclient.UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateControlObjective_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateControlObjectiveInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateControlObjectiveInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControlObjective_Call) Return(updateControlObjective *openlaneclient.UpdateControlObjective, err error) *MockOpenlaneGraphClient_UpdateControlObjective_Call {
	_c.Call.Return(updateControlObjective, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControlObjective_Call) RunAndReturn(run func(ctx context.Context, updateControlObjectiveID string, input openlaneclient.UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlObjective, error)) *MockOpenlaneGraphClient_UpdateControlObjective_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateControlScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateControlScheduledJob(ctx context.Context, updateControlScheduledJobID string, input openlaneclient.UpdateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateControlScheduledJobID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateControlScheduledJobID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateControlScheduledJob")
	}

	var r0 *openlaneclient.UpdateControlScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlScheduledJobInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlScheduledJob, error)); ok {
		return returnFunc(ctx, updateControlScheduledJobID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateControlScheduledJobInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateControlScheduledJob); ok {
		r0 = returnFunc(ctx, updateControlScheduledJobID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateControlScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateControlScheduledJobInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateControlScheduledJobID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateControlScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateControlScheduledJob'
type MockOpenlaneGraphClient_UpdateControlScheduledJob_Call struct {
	*mock.Call
}

// UpdateControlScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - updateControlScheduledJobID string
//   - input openlaneclient.UpdateControlScheduledJobInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateControlScheduledJob(ctx interface{}, updateControlScheduledJobID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateControlScheduledJob_Call {
	return &MockOpenlaneGraphClient_UpdateControlScheduledJob_Call{Call: _e.mock.On("UpdateControlScheduledJob",
		append([]interface{}{ctx, updateControlScheduledJobID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateControlScheduledJob_Call) Run(run func(ctx context.Context, updateControlScheduledJobID string, input openlaneclient.UpdateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateControlScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateControlScheduledJobInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateControlScheduledJobInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControlScheduledJob_Call) Return(updateControlScheduledJob *openlaneclient.UpdateControlScheduledJob, err error) *MockOpenlaneGraphClient_UpdateControlScheduledJob_Call {
	_c.Call.Return(updateControlScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateControlScheduledJob_Call) RunAndReturn(run func(ctx context.Context, updateControlScheduledJobID string, input openlaneclient.UpdateControlScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateControlScheduledJob, error)) *MockOpenlaneGraphClient_UpdateControlScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateCustomDomain(ctx context.Context, updateCustomDomainID string, input openlaneclient.UpdateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateCustomDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateCustomDomainID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateCustomDomainID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomDomain")
	}

	var r0 *openlaneclient.UpdateCustomDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateCustomDomainInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateCustomDomain, error)); ok {
		return returnFunc(ctx, updateCustomDomainID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateCustomDomainInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateCustomDomain); ok {
		r0 = returnFunc(ctx, updateCustomDomainID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateCustomDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateCustomDomainInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateCustomDomainID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateCustomDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomDomain'
type MockOpenlaneGraphClient_UpdateCustomDomain_Call struct {
	*mock.Call
}

// UpdateCustomDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - updateCustomDomainID string
//   - input openlaneclient.UpdateCustomDomainInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateCustomDomain(ctx interface{}, updateCustomDomainID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateCustomDomain_Call {
	return &MockOpenlaneGraphClient_UpdateCustomDomain_Call{Call: _e.mock.On("UpdateCustomDomain",
		append([]interface{}{ctx, updateCustomDomainID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateCustomDomain_Call) Run(run func(ctx context.Context, updateCustomDomainID string, input openlaneclient.UpdateCustomDomainInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateCustomDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateCustomDomainInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateCustomDomainInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateCustomDomain_Call) Return(updateCustomDomain *openlaneclient.UpdateCustomDomain, err error) *MockOpenlaneGraphClient_UpdateCustomDomain_Call {
	_c.Call.Return(updateCustomDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateCustomDomain_Call) RunAndReturn(run func(ctx context.Context, updateCustomDomainID string, input openlaneclient.UpdateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateCustomDomain, error)) *MockOpenlaneGraphClient_UpdateCustomDomain_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDNSVerification provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateDNSVerification(ctx context.Context, updateDNSVerificationID string, input openlaneclient.UpdateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateDNSVerification, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateDNSVerificationID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateDNSVerificationID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateDNSVerification")
	}

	var r0 *openlaneclient.UpdateDNSVerification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateDNSVerificationInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateDNSVerification, error)); ok {
		return returnFunc(ctx, updateDNSVerificationID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateDNSVerificationInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateDNSVerification); ok {
		r0 = returnFunc(ctx, updateDNSVerificationID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateDNSVerification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateDNSVerificationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateDNSVerificationID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateDNSVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDNSVerification'
type MockOpenlaneGraphClient_UpdateDNSVerification_Call struct {
	*mock.Call
}

// UpdateDNSVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - updateDNSVerificationID string
//   - input openlaneclient.UpdateDNSVerificationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateDNSVerification(ctx interface{}, updateDNSVerificationID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateDNSVerification_Call {
	return &MockOpenlaneGraphClient_UpdateDNSVerification_Call{Call: _e.mock.On("UpdateDNSVerification",
		append([]interface{}{ctx, updateDNSVerificationID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateDNSVerification_Call) Run(run func(ctx context.Context, updateDNSVerificationID string, input openlaneclient.UpdateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateDNSVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateDNSVerificationInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateDNSVerificationInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateDNSVerification_Call) Return(updateDNSVerification *openlaneclient.UpdateDNSVerification, err error) *MockOpenlaneGraphClient_UpdateDNSVerification_Call {
	_c.Call.Return(updateDNSVerification, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateDNSVerification_Call) RunAndReturn(run func(ctx context.Context, updateDNSVerificationID string, input openlaneclient.UpdateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateDNSVerification, error)) *MockOpenlaneGraphClient_UpdateDNSVerification_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDocumentData provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input openlaneclient.UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateDocumentData, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateDocumentDataID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateDocumentDataID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateDocumentData")
	}

	var r0 *openlaneclient.UpdateDocumentData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateDocumentDataInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateDocumentData, error)); ok {
		return returnFunc(ctx, updateDocumentDataID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateDocumentDataInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateDocumentData); ok {
		r0 = returnFunc(ctx, updateDocumentDataID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateDocumentData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateDocumentDataInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateDocumentDataID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateDocumentData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDocumentData'
type MockOpenlaneGraphClient_UpdateDocumentData_Call struct {
	*mock.Call
}

// UpdateDocumentData is a helper method to define mock.On call
//   - ctx context.Context
//   - updateDocumentDataID string
//   - input openlaneclient.UpdateDocumentDataInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateDocumentData(ctx interface{}, updateDocumentDataID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateDocumentData_Call {
	return &MockOpenlaneGraphClient_UpdateDocumentData_Call{Call: _e.mock.On("UpdateDocumentData",
		append([]interface{}{ctx, updateDocumentDataID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateDocumentData_Call) Run(run func(ctx context.Context, updateDocumentDataID string, input openlaneclient.UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateDocumentData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateDocumentDataInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateDocumentDataInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateDocumentData_Call) Return(updateDocumentData *openlaneclient.UpdateDocumentData, err error) *MockOpenlaneGraphClient_UpdateDocumentData_Call {
	_c.Call.Return(updateDocumentData, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateDocumentData_Call) RunAndReturn(run func(ctx context.Context, updateDocumentDataID string, input openlaneclient.UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateDocumentData, error)) *MockOpenlaneGraphClient_UpdateDocumentData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEntity provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateEntity(ctx context.Context, updateEntityID string, input openlaneclient.UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEntity, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateEntityID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateEntityID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateEntity")
	}

	var r0 *openlaneclient.UpdateEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEntityInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEntity, error)); ok {
		return returnFunc(ctx, updateEntityID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEntityInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateEntity); ok {
		r0 = returnFunc(ctx, updateEntityID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateEntityInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateEntityID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEntity'
type MockOpenlaneGraphClient_UpdateEntity_Call struct {
	*mock.Call
}

// UpdateEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - updateEntityID string
//   - input openlaneclient.UpdateEntityInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateEntity(ctx interface{}, updateEntityID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateEntity_Call {
	return &MockOpenlaneGraphClient_UpdateEntity_Call{Call: _e.mock.On("UpdateEntity",
		append([]interface{}{ctx, updateEntityID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateEntity_Call) Run(run func(ctx context.Context, updateEntityID string, input openlaneclient.UpdateEntityInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateEntityInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateEntityInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEntity_Call) Return(updateEntity *openlaneclient.UpdateEntity, err error) *MockOpenlaneGraphClient_UpdateEntity_Call {
	_c.Call.Return(updateEntity, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEntity_Call) RunAndReturn(run func(ctx context.Context, updateEntityID string, input openlaneclient.UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEntity, error)) *MockOpenlaneGraphClient_UpdateEntity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEntityType provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateEntityType(ctx context.Context, updateEntityTypeID string, input openlaneclient.UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEntityType, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateEntityTypeID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateEntityTypeID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateEntityType")
	}

	var r0 *openlaneclient.UpdateEntityType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEntityTypeInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEntityType, error)); ok {
		return returnFunc(ctx, updateEntityTypeID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEntityTypeInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateEntityType); ok {
		r0 = returnFunc(ctx, updateEntityTypeID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateEntityType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateEntityTypeInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateEntityTypeID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEntityType'
type MockOpenlaneGraphClient_UpdateEntityType_Call struct {
	*mock.Call
}

// UpdateEntityType is a helper method to define mock.On call
//   - ctx context.Context
//   - updateEntityTypeID string
//   - input openlaneclient.UpdateEntityTypeInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateEntityType(ctx interface{}, updateEntityTypeID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateEntityType_Call {
	return &MockOpenlaneGraphClient_UpdateEntityType_Call{Call: _e.mock.On("UpdateEntityType",
		append([]interface{}{ctx, updateEntityTypeID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateEntityType_Call) Run(run func(ctx context.Context, updateEntityTypeID string, input openlaneclient.UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateEntityTypeInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateEntityTypeInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEntityType_Call) Return(updateEntityType *openlaneclient.UpdateEntityType, err error) *MockOpenlaneGraphClient_UpdateEntityType_Call {
	_c.Call.Return(updateEntityType, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEntityType_Call) RunAndReturn(run func(ctx context.Context, updateEntityTypeID string, input openlaneclient.UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEntityType, error)) *MockOpenlaneGraphClient_UpdateEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvent provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateEvent(ctx context.Context, updateEventID string, input openlaneclient.UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEvent, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateEventID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateEventID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 *openlaneclient.UpdateEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEventInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEvent, error)); ok {
		return returnFunc(ctx, updateEventID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEventInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateEvent); ok {
		r0 = returnFunc(ctx, updateEventID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateEventInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateEventID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvent'
type MockOpenlaneGraphClient_UpdateEvent_Call struct {
	*mock.Call
}

// UpdateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - updateEventID string
//   - input openlaneclient.UpdateEventInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateEvent(ctx interface{}, updateEventID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateEvent_Call {
	return &MockOpenlaneGraphClient_UpdateEvent_Call{Call: _e.mock.On("UpdateEvent",
		append([]interface{}{ctx, updateEventID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateEvent_Call) Run(run func(ctx context.Context, updateEventID string, input openlaneclient.UpdateEventInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateEventInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateEventInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEvent_Call) Return(updateEvent *openlaneclient.UpdateEvent, err error) *MockOpenlaneGraphClient_UpdateEvent_Call {
	_c.Call.Return(updateEvent, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEvent_Call) RunAndReturn(run func(ctx context.Context, updateEventID string, input openlaneclient.UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEvent, error)) *MockOpenlaneGraphClient_UpdateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvidence provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateEvidence(ctx context.Context, updateEvidenceID string, input openlaneclient.UpdateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEvidence, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateEvidenceID, input, evidenceFiles, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateEvidenceID, input, evidenceFiles)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvidence")
	}

	var r0 *openlaneclient.UpdateEvidence
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEvidenceInput, []*graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEvidence, error)); ok {
		return returnFunc(ctx, updateEvidenceID, input, evidenceFiles, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateEvidenceInput, []*graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.UpdateEvidence); ok {
		r0 = returnFunc(ctx, updateEvidenceID, input, evidenceFiles, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateEvidence)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateEvidenceInput, []*graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateEvidenceID, input, evidenceFiles, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvidence'
type MockOpenlaneGraphClient_UpdateEvidence_Call struct {
	*mock.Call
}

// UpdateEvidence is a helper method to define mock.On call
//   - ctx context.Context
//   - updateEvidenceID string
//   - input openlaneclient.UpdateEvidenceInput
//   - evidenceFiles []*graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateEvidence(ctx interface{}, updateEvidenceID interface{}, input interface{}, evidenceFiles interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateEvidence_Call {
	return &MockOpenlaneGraphClient_UpdateEvidence_Call{Call: _e.mock.On("UpdateEvidence",
		append([]interface{}{ctx, updateEvidenceID, input, evidenceFiles}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateEvidence_Call) Run(run func(ctx context.Context, updateEvidenceID string, input openlaneclient.UpdateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateEvidenceInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateEvidenceInput)
		}
		var arg3 []*graphql.Upload
		if args[3] != nil {
			arg3 = args[3].([]*graphql.Upload)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEvidence_Call) Return(updateEvidence *openlaneclient.UpdateEvidence, err error) *MockOpenlaneGraphClient_UpdateEvidence_Call {
	_c.Call.Return(updateEvidence, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateEvidence_Call) RunAndReturn(run func(ctx context.Context, updateEvidenceID string, input openlaneclient.UpdateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateEvidence, error)) *MockOpenlaneGraphClient_UpdateEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExport provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateExport(ctx context.Context, id string, input openlaneclient.UpdateExportInput, exportFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateExport, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, id, input, exportFiles, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, id, input, exportFiles)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateExport")
	}

	var r0 *openlaneclient.UpdateExport
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateExportInput, []*graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateExport, error)); ok {
		return returnFunc(ctx, id, input, exportFiles, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateExportInput, []*graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.UpdateExport); ok {
		r0 = returnFunc(ctx, id, input, exportFiles, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateExport)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateExportInput, []*graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, id, input, exportFiles, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExport'
type MockOpenlaneGraphClient_UpdateExport_Call struct {
	*mock.Call
}

// UpdateExport is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - input openlaneclient.UpdateExportInput
//   - exportFiles []*graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateExport(ctx interface{}, id interface{}, input interface{}, exportFiles interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateExport_Call {
	return &MockOpenlaneGraphClient_UpdateExport_Call{Call: _e.mock.On("UpdateExport",
		append([]interface{}{ctx, id, input, exportFiles}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateExport_Call) Run(run func(ctx context.Context, id string, input openlaneclient.UpdateExportInput, exportFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateExportInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateExportInput)
		}
		var arg3 []*graphql.Upload
		if args[3] != nil {
			arg3 = args[3].([]*graphql.Upload)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateExport_Call) Return(updateExport *openlaneclient.UpdateExport, err error) *MockOpenlaneGraphClient_UpdateExport_Call {
	_c.Call.Return(updateExport, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateExport_Call) RunAndReturn(run func(ctx context.Context, id string, input openlaneclient.UpdateExportInput, exportFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateExport, error)) *MockOpenlaneGraphClient_UpdateExport_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateGroup(ctx context.Context, updateGroupID string, input openlaneclient.UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateGroup, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateGroupID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateGroupID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *openlaneclient.UpdateGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateGroupInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateGroup, error)); ok {
		return returnFunc(ctx, updateGroupID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateGroupInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateGroup); ok {
		r0 = returnFunc(ctx, updateGroupID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateGroupInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateGroupID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockOpenlaneGraphClient_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - updateGroupID string
//   - input openlaneclient.UpdateGroupInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateGroup(ctx interface{}, updateGroupID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateGroup_Call {
	return &MockOpenlaneGraphClient_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup",
		append([]interface{}{ctx, updateGroupID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateGroup_Call) Run(run func(ctx context.Context, updateGroupID string, input openlaneclient.UpdateGroupInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateGroupInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateGroupInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateGroup_Call) Return(updateGroup *openlaneclient.UpdateGroup, err error) *MockOpenlaneGraphClient_UpdateGroup_Call {
	_c.Call.Return(updateGroup, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateGroup_Call) RunAndReturn(run func(ctx context.Context, updateGroupID string, input openlaneclient.UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateGroup, error)) *MockOpenlaneGraphClient_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupSetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input openlaneclient.UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateGroupSetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateGroupSettingID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateGroupSettingID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupSetting")
	}

	var r0 *openlaneclient.UpdateGroupSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateGroupSettingInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateGroupSetting, error)); ok {
		return returnFunc(ctx, updateGroupSettingID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateGroupSettingInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateGroupSetting); ok {
		r0 = returnFunc(ctx, updateGroupSettingID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateGroupSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateGroupSettingInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateGroupSettingID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateGroupSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupSetting'
type MockOpenlaneGraphClient_UpdateGroupSetting_Call struct {
	*mock.Call
}

// UpdateGroupSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - updateGroupSettingID string
//   - input openlaneclient.UpdateGroupSettingInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateGroupSetting(ctx interface{}, updateGroupSettingID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateGroupSetting_Call {
	return &MockOpenlaneGraphClient_UpdateGroupSetting_Call{Call: _e.mock.On("UpdateGroupSetting",
		append([]interface{}{ctx, updateGroupSettingID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateGroupSetting_Call) Run(run func(ctx context.Context, updateGroupSettingID string, input openlaneclient.UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateGroupSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateGroupSettingInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateGroupSettingInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateGroupSetting_Call) Return(updateGroupSetting *openlaneclient.UpdateGroupSetting, err error) *MockOpenlaneGraphClient_UpdateGroupSetting_Call {
	_c.Call.Return(updateGroupSetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateGroupSetting_Call) RunAndReturn(run func(ctx context.Context, updateGroupSettingID string, input openlaneclient.UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateGroupSetting, error)) *MockOpenlaneGraphClient_UpdateGroupSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateHush provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateHush(ctx context.Context, updateHushID string, input openlaneclient.UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateHush, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateHushID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateHushID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateHush")
	}

	var r0 *openlaneclient.UpdateHush
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateHushInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateHush, error)); ok {
		return returnFunc(ctx, updateHushID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateHushInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateHush); ok {
		r0 = returnFunc(ctx, updateHushID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateHush)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateHushInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateHushID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateHush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateHush'
type MockOpenlaneGraphClient_UpdateHush_Call struct {
	*mock.Call
}

// UpdateHush is a helper method to define mock.On call
//   - ctx context.Context
//   - updateHushID string
//   - input openlaneclient.UpdateHushInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateHush(ctx interface{}, updateHushID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateHush_Call {
	return &MockOpenlaneGraphClient_UpdateHush_Call{Call: _e.mock.On("UpdateHush",
		append([]interface{}{ctx, updateHushID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateHush_Call) Run(run func(ctx context.Context, updateHushID string, input openlaneclient.UpdateHushInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateHush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateHushInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateHushInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateHush_Call) Return(updateHush *openlaneclient.UpdateHush, err error) *MockOpenlaneGraphClient_UpdateHush_Call {
	_c.Call.Return(updateHush, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateHush_Call) RunAndReturn(run func(ctx context.Context, updateHushID string, input openlaneclient.UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateHush, error)) *MockOpenlaneGraphClient_UpdateHush_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIntegration provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateIntegration(ctx context.Context, updateIntegrationID string, input openlaneclient.UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateIntegration, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateIntegrationID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateIntegrationID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegration")
	}

	var r0 *openlaneclient.UpdateIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateIntegrationInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateIntegration, error)); ok {
		return returnFunc(ctx, updateIntegrationID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateIntegrationInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateIntegration); ok {
		r0 = returnFunc(ctx, updateIntegrationID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateIntegrationInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateIntegrationID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIntegration'
type MockOpenlaneGraphClient_UpdateIntegration_Call struct {
	*mock.Call
}

// UpdateIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - updateIntegrationID string
//   - input openlaneclient.UpdateIntegrationInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateIntegration(ctx interface{}, updateIntegrationID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateIntegration_Call {
	return &MockOpenlaneGraphClient_UpdateIntegration_Call{Call: _e.mock.On("UpdateIntegration",
		append([]interface{}{ctx, updateIntegrationID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateIntegration_Call) Run(run func(ctx context.Context, updateIntegrationID string, input openlaneclient.UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateIntegrationInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateIntegrationInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateIntegration_Call) Return(updateIntegration *openlaneclient.UpdateIntegration, err error) *MockOpenlaneGraphClient_UpdateIntegration_Call {
	_c.Call.Return(updateIntegration, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateIntegration_Call) RunAndReturn(run func(ctx context.Context, updateIntegrationID string, input openlaneclient.UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateIntegration, error)) *MockOpenlaneGraphClient_UpdateIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInternalPolicy provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateInternalPolicy(ctx context.Context, updateInternalPolicyID string, input openlaneclient.UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateInternalPolicy, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateInternalPolicyID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateInternalPolicyID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateInternalPolicy")
	}

	var r0 *openlaneclient.UpdateInternalPolicy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateInternalPolicyInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateInternalPolicy, error)); ok {
		return returnFunc(ctx, updateInternalPolicyID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateInternalPolicyInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateInternalPolicy); ok {
		r0 = returnFunc(ctx, updateInternalPolicyID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateInternalPolicy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateInternalPolicyInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateInternalPolicyID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateInternalPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInternalPolicy'
type MockOpenlaneGraphClient_UpdateInternalPolicy_Call struct {
	*mock.Call
}

// UpdateInternalPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - updateInternalPolicyID string
//   - input openlaneclient.UpdateInternalPolicyInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateInternalPolicy(ctx interface{}, updateInternalPolicyID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateInternalPolicy_Call {
	return &MockOpenlaneGraphClient_UpdateInternalPolicy_Call{Call: _e.mock.On("UpdateInternalPolicy",
		append([]interface{}{ctx, updateInternalPolicyID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateInternalPolicy_Call) Run(run func(ctx context.Context, updateInternalPolicyID string, input openlaneclient.UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateInternalPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateInternalPolicyInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateInternalPolicyInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateInternalPolicy_Call) Return(updateInternalPolicy *openlaneclient.UpdateInternalPolicy, err error) *MockOpenlaneGraphClient_UpdateInternalPolicy_Call {
	_c.Call.Return(updateInternalPolicy, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateInternalPolicy_Call) RunAndReturn(run func(ctx context.Context, updateInternalPolicyID string, input openlaneclient.UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateInternalPolicy, error)) *MockOpenlaneGraphClient_UpdateInternalPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobRunner provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateJobRunner(ctx context.Context, updateJobRunnerID string, input openlaneclient.UpdateJobRunnerInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateJobRunner, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateJobRunnerID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateJobRunnerID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobRunner")
	}

	var r0 *openlaneclient.UpdateJobRunner
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateJobRunnerInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateJobRunner, error)); ok {
		return returnFunc(ctx, updateJobRunnerID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateJobRunnerInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateJobRunner); ok {
		r0 = returnFunc(ctx, updateJobRunnerID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateJobRunner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateJobRunnerInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateJobRunnerID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateJobRunner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobRunner'
type MockOpenlaneGraphClient_UpdateJobRunner_Call struct {
	*mock.Call
}

// UpdateJobRunner is a helper method to define mock.On call
//   - ctx context.Context
//   - updateJobRunnerID string
//   - input openlaneclient.UpdateJobRunnerInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateJobRunner(ctx interface{}, updateJobRunnerID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateJobRunner_Call {
	return &MockOpenlaneGraphClient_UpdateJobRunner_Call{Call: _e.mock.On("UpdateJobRunner",
		append([]interface{}{ctx, updateJobRunnerID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateJobRunner_Call) Run(run func(ctx context.Context, updateJobRunnerID string, input openlaneclient.UpdateJobRunnerInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateJobRunner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateJobRunnerInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateJobRunnerInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateJobRunner_Call) Return(updateJobRunner *openlaneclient.UpdateJobRunner, err error) *MockOpenlaneGraphClient_UpdateJobRunner_Call {
	_c.Call.Return(updateJobRunner, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateJobRunner_Call) RunAndReturn(run func(ctx context.Context, updateJobRunnerID string, input openlaneclient.UpdateJobRunnerInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateJobRunner, error)) *MockOpenlaneGraphClient_UpdateJobRunner_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMappableDomain provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateMappableDomain(ctx context.Context, updateMappableDomainID string, input openlaneclient.UpdateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateMappableDomain, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateMappableDomainID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateMappableDomainID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMappableDomain")
	}

	var r0 *openlaneclient.UpdateMappableDomain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateMappableDomainInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateMappableDomain, error)); ok {
		return returnFunc(ctx, updateMappableDomainID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateMappableDomainInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateMappableDomain); ok {
		r0 = returnFunc(ctx, updateMappableDomainID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateMappableDomain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateMappableDomainInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateMappableDomainID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateMappableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMappableDomain'
type MockOpenlaneGraphClient_UpdateMappableDomain_Call struct {
	*mock.Call
}

// UpdateMappableDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - updateMappableDomainID string
//   - input openlaneclient.UpdateMappableDomainInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateMappableDomain(ctx interface{}, updateMappableDomainID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateMappableDomain_Call {
	return &MockOpenlaneGraphClient_UpdateMappableDomain_Call{Call: _e.mock.On("UpdateMappableDomain",
		append([]interface{}{ctx, updateMappableDomainID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateMappableDomain_Call) Run(run func(ctx context.Context, updateMappableDomainID string, input openlaneclient.UpdateMappableDomainInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateMappableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateMappableDomainInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateMappableDomainInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateMappableDomain_Call) Return(updateMappableDomain *openlaneclient.UpdateMappableDomain, err error) *MockOpenlaneGraphClient_UpdateMappableDomain_Call {
	_c.Call.Return(updateMappableDomain, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateMappableDomain_Call) RunAndReturn(run func(ctx context.Context, updateMappableDomainID string, input openlaneclient.UpdateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateMappableDomain, error)) *MockOpenlaneGraphClient_UpdateMappableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMappedControl provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateMappedControl(ctx context.Context, updateMappedControlID string, input openlaneclient.UpdateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateMappedControl, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateMappedControlID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateMappedControlID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMappedControl")
	}

	var r0 *openlaneclient.UpdateMappedControl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateMappedControlInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateMappedControl, error)); ok {
		return returnFunc(ctx, updateMappedControlID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateMappedControlInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateMappedControl); ok {
		r0 = returnFunc(ctx, updateMappedControlID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateMappedControl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateMappedControlInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateMappedControlID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateMappedControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMappedControl'
type MockOpenlaneGraphClient_UpdateMappedControl_Call struct {
	*mock.Call
}

// UpdateMappedControl is a helper method to define mock.On call
//   - ctx context.Context
//   - updateMappedControlID string
//   - input openlaneclient.UpdateMappedControlInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateMappedControl(ctx interface{}, updateMappedControlID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateMappedControl_Call {
	return &MockOpenlaneGraphClient_UpdateMappedControl_Call{Call: _e.mock.On("UpdateMappedControl",
		append([]interface{}{ctx, updateMappedControlID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateMappedControl_Call) Run(run func(ctx context.Context, updateMappedControlID string, input openlaneclient.UpdateMappedControlInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateMappedControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateMappedControlInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateMappedControlInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateMappedControl_Call) Return(updateMappedControl *openlaneclient.UpdateMappedControl, err error) *MockOpenlaneGraphClient_UpdateMappedControl_Call {
	_c.Call.Return(updateMappedControl, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateMappedControl_Call) RunAndReturn(run func(ctx context.Context, updateMappedControlID string, input openlaneclient.UpdateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateMappedControl, error)) *MockOpenlaneGraphClient_UpdateMappedControl_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNarrative provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateNarrative(ctx context.Context, updateNarrativeID string, input openlaneclient.UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateNarrative, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateNarrativeID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateNarrativeID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateNarrative")
	}

	var r0 *openlaneclient.UpdateNarrative
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateNarrativeInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateNarrative, error)); ok {
		return returnFunc(ctx, updateNarrativeID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateNarrativeInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateNarrative); ok {
		r0 = returnFunc(ctx, updateNarrativeID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateNarrative)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateNarrativeInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateNarrativeID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateNarrative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNarrative'
type MockOpenlaneGraphClient_UpdateNarrative_Call struct {
	*mock.Call
}

// UpdateNarrative is a helper method to define mock.On call
//   - ctx context.Context
//   - updateNarrativeID string
//   - input openlaneclient.UpdateNarrativeInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateNarrative(ctx interface{}, updateNarrativeID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateNarrative_Call {
	return &MockOpenlaneGraphClient_UpdateNarrative_Call{Call: _e.mock.On("UpdateNarrative",
		append([]interface{}{ctx, updateNarrativeID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateNarrative_Call) Run(run func(ctx context.Context, updateNarrativeID string, input openlaneclient.UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateNarrative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateNarrativeInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateNarrativeInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateNarrative_Call) Return(updateNarrative *openlaneclient.UpdateNarrative, err error) *MockOpenlaneGraphClient_UpdateNarrative_Call {
	_c.Call.Return(updateNarrative, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateNarrative_Call) RunAndReturn(run func(ctx context.Context, updateNarrativeID string, input openlaneclient.UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateNarrative, error)) *MockOpenlaneGraphClient_UpdateNarrative_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganization provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateOrganization(ctx context.Context, updateOrganizationID string, input openlaneclient.UpdateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateOrganization, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateOrganizationID, input, avatarFile, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateOrganizationID, input, avatarFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 *openlaneclient.UpdateOrganization
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateOrganizationInput, *graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateOrganization, error)); ok {
		return returnFunc(ctx, updateOrganizationID, input, avatarFile, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateOrganizationInput, *graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.UpdateOrganization); ok {
		r0 = returnFunc(ctx, updateOrganizationID, input, avatarFile, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateOrganization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateOrganizationInput, *graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateOrganizationID, input, avatarFile, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganization'
type MockOpenlaneGraphClient_UpdateOrganization_Call struct {
	*mock.Call
}

// UpdateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - updateOrganizationID string
//   - input openlaneclient.UpdateOrganizationInput
//   - avatarFile *graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateOrganization(ctx interface{}, updateOrganizationID interface{}, input interface{}, avatarFile interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateOrganization_Call {
	return &MockOpenlaneGraphClient_UpdateOrganization_Call{Call: _e.mock.On("UpdateOrganization",
		append([]interface{}{ctx, updateOrganizationID, input, avatarFile}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateOrganization_Call) Run(run func(ctx context.Context, updateOrganizationID string, input openlaneclient.UpdateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateOrganizationInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateOrganizationInput)
		}
		var arg3 *graphql.Upload
		if args[3] != nil {
			arg3 = args[3].(*graphql.Upload)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateOrganization_Call) Return(updateOrganization *openlaneclient.UpdateOrganization, err error) *MockOpenlaneGraphClient_UpdateOrganization_Call {
	_c.Call.Return(updateOrganization, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateOrganization_Call) RunAndReturn(run func(ctx context.Context, updateOrganizationID string, input openlaneclient.UpdateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateOrganization, error)) *MockOpenlaneGraphClient_UpdateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationSetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input openlaneclient.UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateOrganizationSetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateOrganizationSettingID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateOrganizationSettingID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationSetting")
	}

	var r0 *openlaneclient.UpdateOrganizationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateOrganizationSettingInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateOrganizationSetting, error)); ok {
		return returnFunc(ctx, updateOrganizationSettingID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateOrganizationSettingInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateOrganizationSetting); ok {
		r0 = returnFunc(ctx, updateOrganizationSettingID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateOrganizationSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateOrganizationSettingInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateOrganizationSettingID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateOrganizationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationSetting'
type MockOpenlaneGraphClient_UpdateOrganizationSetting_Call struct {
	*mock.Call
}

// UpdateOrganizationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - updateOrganizationSettingID string
//   - input openlaneclient.UpdateOrganizationSettingInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateOrganizationSetting(ctx interface{}, updateOrganizationSettingID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateOrganizationSetting_Call {
	return &MockOpenlaneGraphClient_UpdateOrganizationSetting_Call{Call: _e.mock.On("UpdateOrganizationSetting",
		append([]interface{}{ctx, updateOrganizationSettingID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateOrganizationSetting_Call) Run(run func(ctx context.Context, updateOrganizationSettingID string, input openlaneclient.UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateOrganizationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateOrganizationSettingInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateOrganizationSettingInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateOrganizationSetting_Call) Return(updateOrganizationSetting *openlaneclient.UpdateOrganizationSetting, err error) *MockOpenlaneGraphClient_UpdateOrganizationSetting_Call {
	_c.Call.Return(updateOrganizationSetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateOrganizationSetting_Call) RunAndReturn(run func(ctx context.Context, updateOrganizationSettingID string, input openlaneclient.UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateOrganizationSetting, error)) *MockOpenlaneGraphClient_UpdateOrganizationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePersonalAccessToken provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input openlaneclient.UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdatePersonalAccessToken, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updatePersonalAccessTokenID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updatePersonalAccessTokenID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdatePersonalAccessToken")
	}

	var r0 *openlaneclient.UpdatePersonalAccessToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdatePersonalAccessTokenInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdatePersonalAccessToken, error)); ok {
		return returnFunc(ctx, updatePersonalAccessTokenID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdatePersonalAccessTokenInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdatePersonalAccessToken); ok {
		r0 = returnFunc(ctx, updatePersonalAccessTokenID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdatePersonalAccessToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdatePersonalAccessTokenInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updatePersonalAccessTokenID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePersonalAccessToken'
type MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call struct {
	*mock.Call
}

// UpdatePersonalAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - updatePersonalAccessTokenID string
//   - input openlaneclient.UpdatePersonalAccessTokenInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdatePersonalAccessToken(ctx interface{}, updatePersonalAccessTokenID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call {
	return &MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call{Call: _e.mock.On("UpdatePersonalAccessToken",
		append([]interface{}{ctx, updatePersonalAccessTokenID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call) Run(run func(ctx context.Context, updatePersonalAccessTokenID string, input openlaneclient.UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdatePersonalAccessTokenInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdatePersonalAccessTokenInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call) Return(updatePersonalAccessToken *openlaneclient.UpdatePersonalAccessToken, err error) *MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call {
	_c.Call.Return(updatePersonalAccessToken, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call) RunAndReturn(run func(ctx context.Context, updatePersonalAccessTokenID string, input openlaneclient.UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdatePersonalAccessToken, error)) *MockOpenlaneGraphClient_UpdatePersonalAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProcedure provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateProcedure(ctx context.Context, updateProcedureID string, input openlaneclient.UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProcedure, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateProcedureID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateProcedureID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcedure")
	}

	var r0 *openlaneclient.UpdateProcedure
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProcedureInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProcedure, error)); ok {
		return returnFunc(ctx, updateProcedureID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProcedureInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateProcedure); ok {
		r0 = returnFunc(ctx, updateProcedureID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateProcedure)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateProcedureInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateProcedureID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateProcedure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcedure'
type MockOpenlaneGraphClient_UpdateProcedure_Call struct {
	*mock.Call
}

// UpdateProcedure is a helper method to define mock.On call
//   - ctx context.Context
//   - updateProcedureID string
//   - input openlaneclient.UpdateProcedureInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateProcedure(ctx interface{}, updateProcedureID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateProcedure_Call {
	return &MockOpenlaneGraphClient_UpdateProcedure_Call{Call: _e.mock.On("UpdateProcedure",
		append([]interface{}{ctx, updateProcedureID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateProcedure_Call) Run(run func(ctx context.Context, updateProcedureID string, input openlaneclient.UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateProcedure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateProcedureInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateProcedureInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateProcedure_Call) Return(updateProcedure *openlaneclient.UpdateProcedure, err error) *MockOpenlaneGraphClient_UpdateProcedure_Call {
	_c.Call.Return(updateProcedure, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateProcedure_Call) RunAndReturn(run func(ctx context.Context, updateProcedureID string, input openlaneclient.UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProcedure, error)) *MockOpenlaneGraphClient_UpdateProcedure_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateProgram(ctx context.Context, updateProgramID string, input openlaneclient.UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateProgramID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateProgramID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateProgram")
	}

	var r0 *openlaneclient.UpdateProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProgramInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProgram, error)); ok {
		return returnFunc(ctx, updateProgramID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProgramInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateProgram); ok {
		r0 = returnFunc(ctx, updateProgramID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateProgramInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateProgramID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProgram'
type MockOpenlaneGraphClient_UpdateProgram_Call struct {
	*mock.Call
}

// UpdateProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - updateProgramID string
//   - input openlaneclient.UpdateProgramInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateProgram(ctx interface{}, updateProgramID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateProgram_Call {
	return &MockOpenlaneGraphClient_UpdateProgram_Call{Call: _e.mock.On("UpdateProgram",
		append([]interface{}{ctx, updateProgramID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateProgram_Call) Run(run func(ctx context.Context, updateProgramID string, input openlaneclient.UpdateProgramInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateProgramInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateProgramInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateProgram_Call) Return(updateProgram *openlaneclient.UpdateProgram, err error) *MockOpenlaneGraphClient_UpdateProgram_Call {
	_c.Call.Return(updateProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateProgram_Call) RunAndReturn(run func(ctx context.Context, updateProgramID string, input openlaneclient.UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProgram, error)) *MockOpenlaneGraphClient_UpdateProgram_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProgramMembership provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateProgramMembership(ctx context.Context, updateProgramMembershipID string, input openlaneclient.UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProgramMembership, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateProgramMembershipID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateProgramMembershipID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateProgramMembership")
	}

	var r0 *openlaneclient.UpdateProgramMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProgramMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProgramMembership, error)); ok {
		return returnFunc(ctx, updateProgramMembershipID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProgramMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateProgramMembership); ok {
		r0 = returnFunc(ctx, updateProgramMembershipID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateProgramMembership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateProgramMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateProgramMembershipID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateProgramMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProgramMembership'
type MockOpenlaneGraphClient_UpdateProgramMembership_Call struct {
	*mock.Call
}

// UpdateProgramMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - updateProgramMembershipID string
//   - input openlaneclient.UpdateProgramMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateProgramMembership(ctx interface{}, updateProgramMembershipID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateProgramMembership_Call {
	return &MockOpenlaneGraphClient_UpdateProgramMembership_Call{Call: _e.mock.On("UpdateProgramMembership",
		append([]interface{}{ctx, updateProgramMembershipID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateProgramMembership_Call) Run(run func(ctx context.Context, updateProgramMembershipID string, input openlaneclient.UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateProgramMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateProgramMembershipInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateProgramMembershipInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateProgramMembership_Call) Return(updateProgramMembership *openlaneclient.UpdateProgramMembership, err error) *MockOpenlaneGraphClient_UpdateProgramMembership_Call {
	_c.Call.Return(updateProgramMembership, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateProgramMembership_Call) RunAndReturn(run func(ctx context.Context, updateProgramMembershipID string, input openlaneclient.UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateProgramMembership, error)) *MockOpenlaneGraphClient_UpdateProgramMembership_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRisk provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateRisk(ctx context.Context, updateRiskID string, input openlaneclient.UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateRisk, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateRiskID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateRiskID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateRisk")
	}

	var r0 *openlaneclient.UpdateRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateRiskInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateRisk, error)); ok {
		return returnFunc(ctx, updateRiskID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateRiskInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateRisk); ok {
		r0 = returnFunc(ctx, updateRiskID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateRiskInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateRiskID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRisk'
type MockOpenlaneGraphClient_UpdateRisk_Call struct {
	*mock.Call
}

// UpdateRisk is a helper method to define mock.On call
//   - ctx context.Context
//   - updateRiskID string
//   - input openlaneclient.UpdateRiskInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateRisk(ctx interface{}, updateRiskID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateRisk_Call {
	return &MockOpenlaneGraphClient_UpdateRisk_Call{Call: _e.mock.On("UpdateRisk",
		append([]interface{}{ctx, updateRiskID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateRisk_Call) Run(run func(ctx context.Context, updateRiskID string, input openlaneclient.UpdateRiskInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateRiskInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateRiskInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateRisk_Call) Return(updateRisk *openlaneclient.UpdateRisk, err error) *MockOpenlaneGraphClient_UpdateRisk_Call {
	_c.Call.Return(updateRisk, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateRisk_Call) RunAndReturn(run func(ctx context.Context, updateRiskID string, input openlaneclient.UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateRisk, error)) *MockOpenlaneGraphClient_UpdateRisk_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateScan provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateScan(ctx context.Context, updateScanID string, input openlaneclient.UpdateScanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateScan, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateScanID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateScanID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateScan")
	}

	var r0 *openlaneclient.UpdateScan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateScanInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateScan, error)); ok {
		return returnFunc(ctx, updateScanID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateScanInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateScan); ok {
		r0 = returnFunc(ctx, updateScanID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateScan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateScanInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateScanID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateScan'
type MockOpenlaneGraphClient_UpdateScan_Call struct {
	*mock.Call
}

// UpdateScan is a helper method to define mock.On call
//   - ctx context.Context
//   - updateScanID string
//   - input openlaneclient.UpdateScanInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateScan(ctx interface{}, updateScanID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateScan_Call {
	return &MockOpenlaneGraphClient_UpdateScan_Call{Call: _e.mock.On("UpdateScan",
		append([]interface{}{ctx, updateScanID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateScan_Call) Run(run func(ctx context.Context, updateScanID string, input openlaneclient.UpdateScanInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateScanInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateScanInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateScan_Call) Return(updateScan *openlaneclient.UpdateScan, err error) *MockOpenlaneGraphClient_UpdateScan_Call {
	_c.Call.Return(updateScan, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateScan_Call) RunAndReturn(run func(ctx context.Context, updateScanID string, input openlaneclient.UpdateScanInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateScan, error)) *MockOpenlaneGraphClient_UpdateScan_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateScheduledJob provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateScheduledJob(ctx context.Context, updateScheduledJobID string, input openlaneclient.UpdateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateScheduledJob, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateScheduledJobID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateScheduledJobID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateScheduledJob")
	}

	var r0 *openlaneclient.UpdateScheduledJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateScheduledJobInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateScheduledJob, error)); ok {
		return returnFunc(ctx, updateScheduledJobID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateScheduledJobInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateScheduledJob); ok {
		r0 = returnFunc(ctx, updateScheduledJobID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateScheduledJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateScheduledJobInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateScheduledJobID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateScheduledJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateScheduledJob'
type MockOpenlaneGraphClient_UpdateScheduledJob_Call struct {
	*mock.Call
}

// UpdateScheduledJob is a helper method to define mock.On call
//   - ctx context.Context
//   - updateScheduledJobID string
//   - input openlaneclient.UpdateScheduledJobInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateScheduledJob(ctx interface{}, updateScheduledJobID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateScheduledJob_Call {
	return &MockOpenlaneGraphClient_UpdateScheduledJob_Call{Call: _e.mock.On("UpdateScheduledJob",
		append([]interface{}{ctx, updateScheduledJobID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateScheduledJob_Call) Run(run func(ctx context.Context, updateScheduledJobID string, input openlaneclient.UpdateScheduledJobInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateScheduledJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateScheduledJobInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateScheduledJobInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateScheduledJob_Call) Return(updateScheduledJob *openlaneclient.UpdateScheduledJob, err error) *MockOpenlaneGraphClient_UpdateScheduledJob_Call {
	_c.Call.Return(updateScheduledJob, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateScheduledJob_Call) RunAndReturn(run func(ctx context.Context, updateScheduledJobID string, input openlaneclient.UpdateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateScheduledJob, error)) *MockOpenlaneGraphClient_UpdateScheduledJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStandard provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateStandard(ctx context.Context, updateStandardID string, input openlaneclient.UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateStandard, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateStandardID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateStandardID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateStandard")
	}

	var r0 *openlaneclient.UpdateStandard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateStandardInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateStandard, error)); ok {
		return returnFunc(ctx, updateStandardID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateStandardInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateStandard); ok {
		r0 = returnFunc(ctx, updateStandardID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateStandard)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateStandardInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateStandardID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateStandard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStandard'
type MockOpenlaneGraphClient_UpdateStandard_Call struct {
	*mock.Call
}

// UpdateStandard is a helper method to define mock.On call
//   - ctx context.Context
//   - updateStandardID string
//   - input openlaneclient.UpdateStandardInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateStandard(ctx interface{}, updateStandardID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateStandard_Call {
	return &MockOpenlaneGraphClient_UpdateStandard_Call{Call: _e.mock.On("UpdateStandard",
		append([]interface{}{ctx, updateStandardID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateStandard_Call) Run(run func(ctx context.Context, updateStandardID string, input openlaneclient.UpdateStandardInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateStandard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateStandardInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateStandardInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateStandard_Call) Return(updateStandard *openlaneclient.UpdateStandard, err error) *MockOpenlaneGraphClient_UpdateStandard_Call {
	_c.Call.Return(updateStandard, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateStandard_Call) RunAndReturn(run func(ctx context.Context, updateStandardID string, input openlaneclient.UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateStandard, error)) *MockOpenlaneGraphClient_UpdateStandard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubcontrol provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateSubcontrol(ctx context.Context, updateSubcontrolID string, input openlaneclient.UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubcontrol, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateSubcontrolID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateSubcontrolID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubcontrol")
	}

	var r0 *openlaneclient.UpdateSubcontrol
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateSubcontrolInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubcontrol, error)); ok {
		return returnFunc(ctx, updateSubcontrolID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateSubcontrolInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateSubcontrol); ok {
		r0 = returnFunc(ctx, updateSubcontrolID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateSubcontrol)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateSubcontrolInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateSubcontrolID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateSubcontrol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubcontrol'
type MockOpenlaneGraphClient_UpdateSubcontrol_Call struct {
	*mock.Call
}

// UpdateSubcontrol is a helper method to define mock.On call
//   - ctx context.Context
//   - updateSubcontrolID string
//   - input openlaneclient.UpdateSubcontrolInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateSubcontrol(ctx interface{}, updateSubcontrolID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateSubcontrol_Call {
	return &MockOpenlaneGraphClient_UpdateSubcontrol_Call{Call: _e.mock.On("UpdateSubcontrol",
		append([]interface{}{ctx, updateSubcontrolID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateSubcontrol_Call) Run(run func(ctx context.Context, updateSubcontrolID string, input openlaneclient.UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateSubcontrol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateSubcontrolInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateSubcontrolInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateSubcontrol_Call) Return(updateSubcontrol *openlaneclient.UpdateSubcontrol, err error) *MockOpenlaneGraphClient_UpdateSubcontrol_Call {
	_c.Call.Return(updateSubcontrol, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateSubcontrol_Call) RunAndReturn(run func(ctx context.Context, updateSubcontrolID string, input openlaneclient.UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubcontrol, error)) *MockOpenlaneGraphClient_UpdateSubcontrol_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateSubprocessor(ctx context.Context, updateSubprocessorID string, input openlaneclient.UpdateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateSubprocessorID, input, logoFile, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateSubprocessorID, input, logoFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubprocessor")
	}

	var r0 *openlaneclient.UpdateSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateSubprocessorInput, *graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubprocessor, error)); ok {
		return returnFunc(ctx, updateSubprocessorID, input, logoFile, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateSubprocessorInput, *graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.UpdateSubprocessor); ok {
		r0 = returnFunc(ctx, updateSubprocessorID, input, logoFile, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateSubprocessorInput, *graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateSubprocessorID, input, logoFile, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubprocessor'
type MockOpenlaneGraphClient_UpdateSubprocessor_Call struct {
	*mock.Call
}

// UpdateSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - updateSubprocessorID string
//   - input openlaneclient.UpdateSubprocessorInput
//   - logoFile *graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateSubprocessor(ctx interface{}, updateSubprocessorID interface{}, input interface{}, logoFile interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateSubprocessor_Call {
	return &MockOpenlaneGraphClient_UpdateSubprocessor_Call{Call: _e.mock.On("UpdateSubprocessor",
		append([]interface{}{ctx, updateSubprocessorID, input, logoFile}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateSubprocessor_Call) Run(run func(ctx context.Context, updateSubprocessorID string, input openlaneclient.UpdateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateSubprocessorInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateSubprocessorInput)
		}
		var arg3 *graphql.Upload
		if args[3] != nil {
			arg3 = args[3].(*graphql.Upload)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateSubprocessor_Call) Return(updateSubprocessor *openlaneclient.UpdateSubprocessor, err error) *MockOpenlaneGraphClient_UpdateSubprocessor_Call {
	_c.Call.Return(updateSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateSubprocessor_Call) RunAndReturn(run func(ctx context.Context, updateSubprocessorID string, input openlaneclient.UpdateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubprocessor, error)) *MockOpenlaneGraphClient_UpdateSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscriber provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateSubscriber(ctx context.Context, email string, input openlaneclient.UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubscriber, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, email, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, email, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriber")
	}

	var r0 *openlaneclient.UpdateSubscriber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateSubscriberInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubscriber, error)); ok {
		return returnFunc(ctx, email, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateSubscriberInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateSubscriber); ok {
		r0 = returnFunc(ctx, email, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateSubscriber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateSubscriberInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, email, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscriber'
type MockOpenlaneGraphClient_UpdateSubscriber_Call struct {
	*mock.Call
}

// UpdateSubscriber is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - input openlaneclient.UpdateSubscriberInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateSubscriber(ctx interface{}, email interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateSubscriber_Call {
	return &MockOpenlaneGraphClient_UpdateSubscriber_Call{Call: _e.mock.On("UpdateSubscriber",
		append([]interface{}{ctx, email, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateSubscriber_Call) Run(run func(ctx context.Context, email string, input openlaneclient.UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateSubscriberInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateSubscriberInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateSubscriber_Call) Return(updateSubscriber *openlaneclient.UpdateSubscriber, err error) *MockOpenlaneGraphClient_UpdateSubscriber_Call {
	_c.Call.Return(updateSubscriber, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateSubscriber_Call) RunAndReturn(run func(ctx context.Context, email string, input openlaneclient.UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateSubscriber, error)) *MockOpenlaneGraphClient_UpdateSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTFASetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTFASetting(ctx context.Context, input openlaneclient.UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTFASetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTFASetting")
	}

	var r0 *openlaneclient.UpdateTFASetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.UpdateTFASettingInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTFASetting, error)); ok {
		return returnFunc(ctx, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openlaneclient.UpdateTFASettingInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTFASetting); ok {
		r0 = returnFunc(ctx, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTFASetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openlaneclient.UpdateTFASettingInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTFASetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTFASetting'
type MockOpenlaneGraphClient_UpdateTFASetting_Call struct {
	*mock.Call
}

// UpdateTFASetting is a helper method to define mock.On call
//   - ctx context.Context
//   - input openlaneclient.UpdateTFASettingInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTFASetting(ctx interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTFASetting_Call {
	return &MockOpenlaneGraphClient_UpdateTFASetting_Call{Call: _e.mock.On("UpdateTFASetting",
		append([]interface{}{ctx, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTFASetting_Call) Run(run func(ctx context.Context, input openlaneclient.UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTFASetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openlaneclient.UpdateTFASettingInput
		if args[1] != nil {
			arg1 = args[1].(openlaneclient.UpdateTFASettingInput)
		}
		var arg2 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 2 {
			variadicArgs = args[2].([]clientv2.RequestInterceptor)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTFASetting_Call) Return(updateTFASetting *openlaneclient.UpdateTFASetting, err error) *MockOpenlaneGraphClient_UpdateTFASetting_Call {
	_c.Call.Return(updateTFASetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTFASetting_Call) RunAndReturn(run func(ctx context.Context, input openlaneclient.UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTFASetting, error)) *MockOpenlaneGraphClient_UpdateTFASetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTask(ctx context.Context, updateTaskID string, input openlaneclient.UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTask, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateTaskID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateTaskID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *openlaneclient.UpdateTask
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTaskInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTask, error)); ok {
		return returnFunc(ctx, updateTaskID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTaskInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTask); ok {
		r0 = returnFunc(ctx, updateTaskID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTask)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateTaskInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateTaskID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockOpenlaneGraphClient_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - updateTaskID string
//   - input openlaneclient.UpdateTaskInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTask(ctx interface{}, updateTaskID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTask_Call {
	return &MockOpenlaneGraphClient_UpdateTask_Call{Call: _e.mock.On("UpdateTask",
		append([]interface{}{ctx, updateTaskID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTask_Call) Run(run func(ctx context.Context, updateTaskID string, input openlaneclient.UpdateTaskInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateTaskInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateTaskInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTask_Call) Return(updateTask *openlaneclient.UpdateTask, err error) *MockOpenlaneGraphClient_UpdateTask_Call {
	_c.Call.Return(updateTask, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTask_Call) RunAndReturn(run func(ctx context.Context, updateTaskID string, input openlaneclient.UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTask, error)) *MockOpenlaneGraphClient_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskComment provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTaskComment(ctx context.Context, updateTaskCommentID string, input openlaneclient.UpdateNoteInput, noteFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTaskComment, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateTaskCommentID, input, noteFiles, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateTaskCommentID, input, noteFiles)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskComment")
	}

	var r0 *openlaneclient.UpdateTaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateNoteInput, []*graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTaskComment, error)); ok {
		return returnFunc(ctx, updateTaskCommentID, input, noteFiles, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateNoteInput, []*graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTaskComment); ok {
		r0 = returnFunc(ctx, updateTaskCommentID, input, noteFiles, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateNoteInput, []*graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateTaskCommentID, input, noteFiles, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTaskComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskComment'
type MockOpenlaneGraphClient_UpdateTaskComment_Call struct {
	*mock.Call
}

// UpdateTaskComment is a helper method to define mock.On call
//   - ctx context.Context
//   - updateTaskCommentID string
//   - input openlaneclient.UpdateNoteInput
//   - noteFiles []*graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTaskComment(ctx interface{}, updateTaskCommentID interface{}, input interface{}, noteFiles interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTaskComment_Call {
	return &MockOpenlaneGraphClient_UpdateTaskComment_Call{Call: _e.mock.On("UpdateTaskComment",
		append([]interface{}{ctx, updateTaskCommentID, input, noteFiles}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTaskComment_Call) Run(run func(ctx context.Context, updateTaskCommentID string, input openlaneclient.UpdateNoteInput, noteFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTaskComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateNoteInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateNoteInput)
		}
		var arg3 []*graphql.Upload
		if args[3] != nil {
			arg3 = args[3].([]*graphql.Upload)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTaskComment_Call) Return(updateTaskComment *openlaneclient.UpdateTaskComment, err error) *MockOpenlaneGraphClient_UpdateTaskComment_Call {
	_c.Call.Return(updateTaskComment, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTaskComment_Call) RunAndReturn(run func(ctx context.Context, updateTaskCommentID string, input openlaneclient.UpdateNoteInput, noteFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTaskComment, error)) *MockOpenlaneGraphClient_UpdateTaskComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTemplate provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTemplate(ctx context.Context, updateTemplateID string, input openlaneclient.UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTemplate, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateTemplateID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateTemplateID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplate")
	}

	var r0 *openlaneclient.UpdateTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTemplateInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTemplate, error)); ok {
		return returnFunc(ctx, updateTemplateID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTemplateInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTemplate); ok {
		r0 = returnFunc(ctx, updateTemplateID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateTemplateInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateTemplateID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTemplate'
type MockOpenlaneGraphClient_UpdateTemplate_Call struct {
	*mock.Call
}

// UpdateTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - updateTemplateID string
//   - input openlaneclient.UpdateTemplateInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTemplate(ctx interface{}, updateTemplateID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTemplate_Call {
	return &MockOpenlaneGraphClient_UpdateTemplate_Call{Call: _e.mock.On("UpdateTemplate",
		append([]interface{}{ctx, updateTemplateID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTemplate_Call) Run(run func(ctx context.Context, updateTemplateID string, input openlaneclient.UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateTemplateInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateTemplateInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTemplate_Call) Return(updateTemplate *openlaneclient.UpdateTemplate, err error) *MockOpenlaneGraphClient_UpdateTemplate_Call {
	_c.Call.Return(updateTemplate, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTemplate_Call) RunAndReturn(run func(ctx context.Context, updateTemplateID string, input openlaneclient.UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTemplate, error)) *MockOpenlaneGraphClient_UpdateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTrustCenter provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTrustCenter(ctx context.Context, updateTrustCenterID string, input openlaneclient.UpdateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenter, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateTrustCenterID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateTrustCenterID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustCenter")
	}

	var r0 *openlaneclient.UpdateTrustCenter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenter, error)); ok {
		return returnFunc(ctx, updateTrustCenterID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTrustCenter); ok {
		r0 = returnFunc(ctx, updateTrustCenterID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTrustCenter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateTrustCenterInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateTrustCenterID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTrustCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTrustCenter'
type MockOpenlaneGraphClient_UpdateTrustCenter_Call struct {
	*mock.Call
}

// UpdateTrustCenter is a helper method to define mock.On call
//   - ctx context.Context
//   - updateTrustCenterID string
//   - input openlaneclient.UpdateTrustCenterInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTrustCenter(ctx interface{}, updateTrustCenterID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTrustCenter_Call {
	return &MockOpenlaneGraphClient_UpdateTrustCenter_Call{Call: _e.mock.On("UpdateTrustCenter",
		append([]interface{}{ctx, updateTrustCenterID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenter_Call) Run(run func(ctx context.Context, updateTrustCenterID string, input openlaneclient.UpdateTrustCenterInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTrustCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateTrustCenterInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateTrustCenterInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenter_Call) Return(updateTrustCenter *openlaneclient.UpdateTrustCenter, err error) *MockOpenlaneGraphClient_UpdateTrustCenter_Call {
	_c.Call.Return(updateTrustCenter, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenter_Call) RunAndReturn(run func(ctx context.Context, updateTrustCenterID string, input openlaneclient.UpdateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenter, error)) *MockOpenlaneGraphClient_UpdateTrustCenter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTrustCenterCompliance provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTrustCenterCompliance(ctx context.Context, updateTrustCenterComplianceID string, input openlaneclient.UpdateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterCompliance, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateTrustCenterComplianceID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateTrustCenterComplianceID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustCenterCompliance")
	}

	var r0 *openlaneclient.UpdateTrustCenterCompliance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterCompliance, error)); ok {
		return returnFunc(ctx, updateTrustCenterComplianceID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTrustCenterCompliance); ok {
		r0 = returnFunc(ctx, updateTrustCenterComplianceID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTrustCenterCompliance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateTrustCenterComplianceInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateTrustCenterComplianceID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTrustCenterCompliance'
type MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call struct {
	*mock.Call
}

// UpdateTrustCenterCompliance is a helper method to define mock.On call
//   - ctx context.Context
//   - updateTrustCenterComplianceID string
//   - input openlaneclient.UpdateTrustCenterComplianceInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTrustCenterCompliance(ctx interface{}, updateTrustCenterComplianceID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call {
	return &MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call{Call: _e.mock.On("UpdateTrustCenterCompliance",
		append([]interface{}{ctx, updateTrustCenterComplianceID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call) Run(run func(ctx context.Context, updateTrustCenterComplianceID string, input openlaneclient.UpdateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateTrustCenterComplianceInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateTrustCenterComplianceInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call) Return(updateTrustCenterCompliance *openlaneclient.UpdateTrustCenterCompliance, err error) *MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call {
	_c.Call.Return(updateTrustCenterCompliance, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call) RunAndReturn(run func(ctx context.Context, updateTrustCenterComplianceID string, input openlaneclient.UpdateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterCompliance, error)) *MockOpenlaneGraphClient_UpdateTrustCenterCompliance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTrustCenterSetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTrustCenterSetting(ctx context.Context, updateTrustCenterSettingID string, input openlaneclient.UpdateTrustCenterSettingInput, logoFile *graphql.Upload, faviconFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterSetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateTrustCenterSettingID, input, logoFile, faviconFile, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateTrustCenterSettingID, input, logoFile, faviconFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustCenterSetting")
	}

	var r0 *openlaneclient.UpdateTrustCenterSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterSettingInput, *graphql.Upload, *graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterSetting, error)); ok {
		return returnFunc(ctx, updateTrustCenterSettingID, input, logoFile, faviconFile, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterSettingInput, *graphql.Upload, *graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTrustCenterSetting); ok {
		r0 = returnFunc(ctx, updateTrustCenterSettingID, input, logoFile, faviconFile, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTrustCenterSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateTrustCenterSettingInput, *graphql.Upload, *graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateTrustCenterSettingID, input, logoFile, faviconFile, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTrustCenterSetting'
type MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call struct {
	*mock.Call
}

// UpdateTrustCenterSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - updateTrustCenterSettingID string
//   - input openlaneclient.UpdateTrustCenterSettingInput
//   - logoFile *graphql.Upload
//   - faviconFile *graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTrustCenterSetting(ctx interface{}, updateTrustCenterSettingID interface{}, input interface{}, logoFile interface{}, faviconFile interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call {
	return &MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call{Call: _e.mock.On("UpdateTrustCenterSetting",
		append([]interface{}{ctx, updateTrustCenterSettingID, input, logoFile, faviconFile}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call) Run(run func(ctx context.Context, updateTrustCenterSettingID string, input openlaneclient.UpdateTrustCenterSettingInput, logoFile *graphql.Upload, faviconFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateTrustCenterSettingInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateTrustCenterSettingInput)
		}
		var arg3 *graphql.Upload
		if args[3] != nil {
			arg3 = args[3].(*graphql.Upload)
		}
		var arg4 *graphql.Upload
		if args[4] != nil {
			arg4 = args[4].(*graphql.Upload)
		}
		var arg5 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 5 {
			variadicArgs = args[5].([]clientv2.RequestInterceptor)
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call) Return(updateTrustCenterSetting *openlaneclient.UpdateTrustCenterSetting, err error) *MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call {
	_c.Call.Return(updateTrustCenterSetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call) RunAndReturn(run func(ctx context.Context, updateTrustCenterSettingID string, input openlaneclient.UpdateTrustCenterSettingInput, logoFile *graphql.Upload, faviconFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterSetting, error)) *MockOpenlaneGraphClient_UpdateTrustCenterSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTrustCenterSubprocessor provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateTrustCenterSubprocessor(ctx context.Context, updateTrustCenterSubprocessorID string, input openlaneclient.UpdateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterSubprocessor, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateTrustCenterSubprocessorID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateTrustCenterSubprocessorID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustCenterSubprocessor")
	}

	var r0 *openlaneclient.UpdateTrustCenterSubprocessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterSubprocessor, error)); ok {
		return returnFunc(ctx, updateTrustCenterSubprocessorID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateTrustCenterSubprocessor); ok {
		r0 = returnFunc(ctx, updateTrustCenterSubprocessorID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateTrustCenterSubprocessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateTrustCenterSubprocessorInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateTrustCenterSubprocessorID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTrustCenterSubprocessor'
type MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call struct {
	*mock.Call
}

// UpdateTrustCenterSubprocessor is a helper method to define mock.On call
//   - ctx context.Context
//   - updateTrustCenterSubprocessorID string
//   - input openlaneclient.UpdateTrustCenterSubprocessorInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateTrustCenterSubprocessor(ctx interface{}, updateTrustCenterSubprocessorID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call {
	return &MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call{Call: _e.mock.On("UpdateTrustCenterSubprocessor",
		append([]interface{}{ctx, updateTrustCenterSubprocessorID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call) Run(run func(ctx context.Context, updateTrustCenterSubprocessorID string, input openlaneclient.UpdateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateTrustCenterSubprocessorInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateTrustCenterSubprocessorInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call) Return(updateTrustCenterSubprocessor *openlaneclient.UpdateTrustCenterSubprocessor, err error) *MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call {
	_c.Call.Return(updateTrustCenterSubprocessor, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call) RunAndReturn(run func(ctx context.Context, updateTrustCenterSubprocessorID string, input openlaneclient.UpdateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateTrustCenterSubprocessor, error)) *MockOpenlaneGraphClient_UpdateTrustCenterSubprocessor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateUser(ctx context.Context, updateUserID string, input openlaneclient.UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUser, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateUserID, input, avatarFile, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateUserID, input, avatarFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *openlaneclient.UpdateUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateUserInput, *graphql.Upload, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUser, error)); ok {
		return returnFunc(ctx, updateUserID, input, avatarFile, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateUserInput, *graphql.Upload, ...clientv2.RequestInterceptor) *openlaneclient.UpdateUser); ok {
		r0 = returnFunc(ctx, updateUserID, input, avatarFile, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateUserInput, *graphql.Upload, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateUserID, input, avatarFile, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockOpenlaneGraphClient_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - updateUserID string
//   - input openlaneclient.UpdateUserInput
//   - avatarFile *graphql.Upload
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateUser(ctx interface{}, updateUserID interface{}, input interface{}, avatarFile interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateUser_Call {
	return &MockOpenlaneGraphClient_UpdateUser_Call{Call: _e.mock.On("UpdateUser",
		append([]interface{}{ctx, updateUserID, input, avatarFile}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateUser_Call) Run(run func(ctx context.Context, updateUserID string, input openlaneclient.UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateUserInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateUserInput)
		}
		var arg3 *graphql.Upload
		if args[3] != nil {
			arg3 = args[3].(*graphql.Upload)
		}
		var arg4 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 4 {
			variadicArgs = args[4].([]clientv2.RequestInterceptor)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUser_Call) Return(updateUser *openlaneclient.UpdateUser, err error) *MockOpenlaneGraphClient_UpdateUser_Call {
	_c.Call.Return(updateUser, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, updateUserID string, input openlaneclient.UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUser, error)) *MockOpenlaneGraphClient_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRoleInGroup provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateUserRoleInGroup(ctx context.Context, updateGroupMemberID string, input openlaneclient.UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInGroup, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateGroupMemberID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateGroupMemberID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRoleInGroup")
	}

	var r0 *openlaneclient.UpdateUserRoleInGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateGroupMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInGroup, error)); ok {
		return returnFunc(ctx, updateGroupMemberID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateGroupMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateUserRoleInGroup); ok {
		r0 = returnFunc(ctx, updateGroupMemberID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateUserRoleInGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateGroupMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateGroupMemberID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRoleInGroup'
type MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call struct {
	*mock.Call
}

// UpdateUserRoleInGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - updateGroupMemberID string
//   - input openlaneclient.UpdateGroupMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateUserRoleInGroup(ctx interface{}, updateGroupMemberID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call {
	return &MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call{Call: _e.mock.On("UpdateUserRoleInGroup",
		append([]interface{}{ctx, updateGroupMemberID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call) Run(run func(ctx context.Context, updateGroupMemberID string, input openlaneclient.UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateGroupMembershipInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateGroupMembershipInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call) Return(updateUserRoleInGroup *openlaneclient.UpdateUserRoleInGroup, err error) *MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call {
	_c.Call.Return(updateUserRoleInGroup, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call) RunAndReturn(run func(ctx context.Context, updateGroupMemberID string, input openlaneclient.UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInGroup, error)) *MockOpenlaneGraphClient_UpdateUserRoleInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRoleInOrg provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateUserRoleInOrg(ctx context.Context, updateOrgMemberID string, input openlaneclient.UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInOrg, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateOrgMemberID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateOrgMemberID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRoleInOrg")
	}

	var r0 *openlaneclient.UpdateUserRoleInOrg
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateOrgMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInOrg, error)); ok {
		return returnFunc(ctx, updateOrgMemberID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateOrgMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateUserRoleInOrg); ok {
		r0 = returnFunc(ctx, updateOrgMemberID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateUserRoleInOrg)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateOrgMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateOrgMemberID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRoleInOrg'
type MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call struct {
	*mock.Call
}

// UpdateUserRoleInOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - updateOrgMemberID string
//   - input openlaneclient.UpdateOrgMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateUserRoleInOrg(ctx interface{}, updateOrgMemberID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call {
	return &MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call{Call: _e.mock.On("UpdateUserRoleInOrg",
		append([]interface{}{ctx, updateOrgMemberID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call) Run(run func(ctx context.Context, updateOrgMemberID string, input openlaneclient.UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateOrgMembershipInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateOrgMembershipInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call) Return(updateUserRoleInOrg *openlaneclient.UpdateUserRoleInOrg, err error) *MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call {
	_c.Call.Return(updateUserRoleInOrg, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call) RunAndReturn(run func(ctx context.Context, updateOrgMemberID string, input openlaneclient.UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInOrg, error)) *MockOpenlaneGraphClient_UpdateUserRoleInOrg_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRoleInProgram provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateUserRoleInProgram(ctx context.Context, updateProgramMemberID string, input openlaneclient.UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInProgram, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateProgramMemberID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateProgramMemberID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRoleInProgram")
	}

	var r0 *openlaneclient.UpdateUserRoleInProgram
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProgramMembershipInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInProgram, error)); ok {
		return returnFunc(ctx, updateProgramMemberID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateProgramMembershipInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateUserRoleInProgram); ok {
		r0 = returnFunc(ctx, updateProgramMemberID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateUserRoleInProgram)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateProgramMembershipInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateProgramMemberID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRoleInProgram'
type MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call struct {
	*mock.Call
}

// UpdateUserRoleInProgram is a helper method to define mock.On call
//   - ctx context.Context
//   - updateProgramMemberID string
//   - input openlaneclient.UpdateProgramMembershipInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateUserRoleInProgram(ctx interface{}, updateProgramMemberID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call {
	return &MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call{Call: _e.mock.On("UpdateUserRoleInProgram",
		append([]interface{}{ctx, updateProgramMemberID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call) Run(run func(ctx context.Context, updateProgramMemberID string, input openlaneclient.UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateProgramMembershipInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateProgramMembershipInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call) Return(updateUserRoleInProgram *openlaneclient.UpdateUserRoleInProgram, err error) *MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call {
	_c.Call.Return(updateUserRoleInProgram, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call) RunAndReturn(run func(ctx context.Context, updateProgramMemberID string, input openlaneclient.UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserRoleInProgram, error)) *MockOpenlaneGraphClient_UpdateUserRoleInProgram_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserSetting provides a mock function for the type MockOpenlaneGraphClient
func (_mock *MockOpenlaneGraphClient) UpdateUserSetting(ctx context.Context, updateUserSettingID string, input openlaneclient.UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserSetting, error) {
	var tmpRet mock.Arguments
	if len(interceptors) > 0 {
		tmpRet = _mock.Called(ctx, updateUserSettingID, input, interceptors)
	} else {
		tmpRet = _mock.Called(ctx, updateUserSettingID, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSetting")
	}

	var r0 *openlaneclient.UpdateUserSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateUserSettingInput, ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserSetting, error)); ok {
		return returnFunc(ctx, updateUserSettingID, input, interceptors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, openlaneclient.UpdateUserSettingInput, ...clientv2.RequestInterceptor) *openlaneclient.UpdateUserSetting); ok {
		r0 = returnFunc(ctx, updateUserSettingID, input, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openlaneclient.UpdateUserSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, openlaneclient.UpdateUserSettingInput, ...clientv2.RequestInterceptor) error); ok {
		r1 = returnFunc(ctx, updateUserSettingID, input, interceptors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenlaneGraphClient_UpdateUserSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserSetting'
type MockOpenlaneGraphClient_UpdateUserSetting_Call struct {
	*mock.Call
}

// UpdateUserSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - updateUserSettingID string
//   - input openlaneclient.UpdateUserSettingInput
//   - interceptors ...clientv2.RequestInterceptor
func (_e *MockOpenlaneGraphClient_Expecter) UpdateUserSetting(ctx interface{}, updateUserSettingID interface{}, input interface{}, interceptors ...interface{}) *MockOpenlaneGraphClient_UpdateUserSetting_Call {
	return &MockOpenlaneGraphClient_UpdateUserSetting_Call{Call: _e.mock.On("UpdateUserSetting",
		append([]interface{}{ctx, updateUserSettingID, input}, interceptors...)...)}
}

func (_c *MockOpenlaneGraphClient_UpdateUserSetting_Call) Run(run func(ctx context.Context, updateUserSettingID string, input openlaneclient.UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor)) *MockOpenlaneGraphClient_UpdateUserSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 openlaneclient.UpdateUserSettingInput
		if args[2] != nil {
			arg2 = args[2].(openlaneclient.UpdateUserSettingInput)
		}
		var arg3 []clientv2.RequestInterceptor
		var variadicArgs []clientv2.RequestInterceptor
		if len(args) > 3 {
			variadicArgs = args[3].([]clientv2.RequestInterceptor)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserSetting_Call) Return(updateUserSetting *openlaneclient.UpdateUserSetting, err error) *MockOpenlaneGraphClient_UpdateUserSetting_Call {
	_c.Call.Return(updateUserSetting, err)
	return _c
}

func (_c *MockOpenlaneGraphClient_UpdateUserSetting_Call) RunAndReturn(run func(ctx context.Context, updateUserSettingID string, input openlaneclient.UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*openlaneclient.UpdateUserSetting, error)) *MockOpenlaneGraphClient_UpdateUserSetting_Call {
	_c.Call.Return(run)
	return _c
}
