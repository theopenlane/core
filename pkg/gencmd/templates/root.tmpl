package {{ .Name | ToLower }}

import (
	"encoding/json"

	"github.com/spf13/cobra"

	"github.com/theopenlane/core/cmd/cli/cmd"
	"github.com/theopenlane/core/pkg/openlaneclient"
	"github.com/theopenlane/utils/cli/tables"
)

// command represents the base {{ .Name | ToLowerCamel }} command when called without any subcommands
var command = &cobra.Command{
	Use:   "{{ .Name | ToKebabCase }}",
	Short: "the subcommands for working with {{ .Name | ToLowerCamel | ToPlural }}",
}

func init() {
	cmd.RootCmd.AddCommand(command)
}

// consoleOutput prints the output in the console
func consoleOutput(e any) error {
	// check if the output format is JSON and print the {{ .Name | ToLowerCamel | ToPlural }} in JSON format
	if strings.EqualFold(cmd.OutputFormat, cmd.JSONOutput) {
		return jsonOutput(e)
	}

	// check the type of the {{ .Name | ToLowerCamel | ToPlural }} and print them in a table format
	switch v := e.(type) {
	case *openlaneclient.GetAll{{ .Name | ToUpperCamel | ToPlural }}:
		var nodes []*openlaneclient.GetAll{{ .Name | ToUpperCamel | ToPlural }}_{{ .Name | ToUpperCamel | ToPlural }}_Edges_Node

		for _, i := range v.{{ .Name | ToUpperCamel | ToPlural }}.Edges {
			nodes = append(nodes, i.Node)
		}

		e = nodes
	case *openlaneclient.Get{{ .Name | ToUpperCamel | ToPlural }}:
		var nodes []*openlaneclient.Get{{ .Name | ToUpperCamel | ToPlural }}_{{ .Name | ToUpperCamel | ToPlural }}_Edges_Node

		for _, i := range v.{{ .Name | ToUpperCamel | ToPlural }}.Edges {
			nodes = append(nodes, i.Node)
		}

		e = nodes
	{{- if not .ListOnly }}
	case *openlaneclient.Get{{ .Name | ToUpperCamel }}ByID:
		e = v.{{ .Name | ToUpperCamel }}
	case *openlaneclient.Create{{ .Name | ToUpperCamel }}:
		e = v.Create{{ .Name | ToUpperCamel }}.{{ .Name | ToUpperCamel }}
	case *openlaneclient.Update{{ .Name | ToUpperCamel }}:
		e = v.Update{{ .Name | ToUpperCamel }}.{{ .Name | ToUpperCamel }}
	case *openlaneclient.Delete{{ .Name | ToUpperCamel }}:
		deletedTableOutput(v)
		return nil
	{{- end }}
	}

	s, err := json.Marshal(e)
	cobra.CheckErr(err)

	var list []openlaneclient.{{ .Name | ToUpperCamel }}

	err = json.Unmarshal(s, &list)
	if err != nil {
		var in openlaneclient.{{ .Name | ToUpperCamel }}
		err = json.Unmarshal(s, &in)
		cobra.CheckErr(err)

		list = append(list, in)
	}

	tableOutput(list)

	return nil
}

// jsonOutput prints the output in a JSON format
func jsonOutput(out any) error {
	s, err := json.Marshal(out)
	cobra.CheckErr(err)

	return cmd.JSONPrint(s)
}

// tableOutput prints the output in a table format
func tableOutput(out []openlaneclient.{{ .Name | ToUpperCamel }}) {
	// create a table writer
	{{- if .HistoryCmd }}
	writer := tables.NewTableWriter(command.OutOrStdout(), "ID", "Ref", "Operation", "UpdatedAt", "UpdatedBy")
	{{- else }}
	// TODO: add additional columns to the table writer
	writer := tables.NewTableWriter(command.OutOrStdout(), "ID")
	{{- end }}
	for _, i := range out {
		{{- if .HistoryCmd }}
		writer.AddRow(i.ID, *i.Ref, i.Operation, *i.UpdatedAt, *i.UpdatedBy)
		{{- else }}
		writer.AddRow(i.ID)
		{{- end }}
	}

	writer.Render()
}

{{- if not .ListOnly }}
// deleteTableOutput prints the deleted id in a table format
func deletedTableOutput(e *openlaneclient.Delete{{ .Name | ToUpperCamel }}) {
	writer := tables.NewTableWriter(command.OutOrStdout(), "DeletedID")

	writer.AddRow(e.Delete{{ .Name | ToUpperCamel }}.DeletedID)

	writer.Render()
}
{{- end }}
