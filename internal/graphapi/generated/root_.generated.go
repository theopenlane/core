// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AuditLog() AuditLogResolver
	Group() GroupResolver
	Mutation() MutationResolver
	Query() QueryResolver
	CreateEntityInput() CreateEntityInputResolver
	CreateGroupInput() CreateGroupInputResolver
	CreateOrganizationInput() CreateOrganizationInputResolver
	CreateTrustCenterInput() CreateTrustCenterInputResolver
	UpdateActionPlanInput() UpdateActionPlanInputResolver
	UpdateControlObjectiveInput() UpdateControlObjectiveInputResolver
	UpdateEntityInput() UpdateEntityInputResolver
	UpdateGroupInput() UpdateGroupInputResolver
	UpdateInternalPolicyInput() UpdateInternalPolicyInputResolver
	UpdateOrganizationInput() UpdateOrganizationInputResolver
	UpdateProcedureInput() UpdateProcedureInputResolver
	UpdateProgramInput() UpdateProgramInputResolver
	UpdateStandardInput() UpdateStandardInputResolver
	UpdateTFASettingInput() UpdateTFASettingInputResolver
	UpdateTaskInput() UpdateTaskInputResolver
	UpdateTrustCenterInput() UpdateTrustCenterInputResolver
}

type DirectiveRoot struct {
	Hidden func(ctx context.Context, obj any, next graphql.Resolver, ifArg *bool) (res any, err error)
}

type ComplexityRoot struct {
	APIToken struct {
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		ExpiresAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		IsActive          func(childComplexity int) int
		LastUsedAt        func(childComplexity int) int
		Name              func(childComplexity int) int
		Owner             func(childComplexity int) int
		OwnerID           func(childComplexity int) int
		RevokedAt         func(childComplexity int) int
		RevokedBy         func(childComplexity int) int
		RevokedReason     func(childComplexity int) int
		SSOAuthorizations func(childComplexity int) int
		Scopes            func(childComplexity int) int
		Tags              func(childComplexity int) int
		Token             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	APITokenBulkCreatePayload struct {
		APITokens func(childComplexity int) int
	}

	APITokenConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	APITokenCreatePayload struct {
		APIToken func(childComplexity int) int
	}

	APITokenDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	APITokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	APITokenUpdatePayload struct {
		APIToken func(childComplexity int) int
	}

	ActionPlan struct {
		ActionPlanType                  func(childComplexity int) int
		ApprovalRequired                func(childComplexity int) int
		Approver                        func(childComplexity int) int
		ApproverID                      func(childComplexity int) int
		ControlSuggestions              func(childComplexity int) int
		Controls                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt                       func(childComplexity int) int
		CreatedBy                       func(childComplexity int) int
		Delegate                        func(childComplexity int) int
		DelegateID                      func(childComplexity int) int
		Details                         func(childComplexity int) int
		DismissedControlSuggestions     func(childComplexity int) int
		DismissedImprovementSuggestions func(childComplexity int) int
		DismissedTagSuggestions         func(childComplexity int) int
		DueDate                         func(childComplexity int) int
		ID                              func(childComplexity int) int
		ImprovementSuggestions          func(childComplexity int) int
		Name                            func(childComplexity int) int
		Owner                           func(childComplexity int) int
		OwnerID                         func(childComplexity int) int
		Priority                        func(childComplexity int) int
		Programs                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		ReviewDue                       func(childComplexity int) int
		ReviewFrequency                 func(childComplexity int) int
		Revision                        func(childComplexity int) int
		Risks                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Source                          func(childComplexity int) int
		Status                          func(childComplexity int) int
		Summary                         func(childComplexity int) int
		TagSuggestions                  func(childComplexity int) int
		Tags                            func(childComplexity int) int
		UpdatedAt                       func(childComplexity int) int
		UpdatedBy                       func(childComplexity int) int
	}

	ActionPlanBulkCreatePayload struct {
		ActionPlans func(childComplexity int) int
	}

	ActionPlanBulkUpdatePayload struct {
		ActionPlans func(childComplexity int) int
		UpdatedIDs  func(childComplexity int) int
	}

	ActionPlanConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ActionPlanCreatePayload struct {
		ActionPlan func(childComplexity int) int
	}

	ActionPlanDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ActionPlanEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ActionPlanHistory struct {
		ActionPlanType                  func(childComplexity int) int
		ApprovalRequired                func(childComplexity int) int
		ApproverID                      func(childComplexity int) int
		ControlSuggestions              func(childComplexity int) int
		CreatedAt                       func(childComplexity int) int
		CreatedBy                       func(childComplexity int) int
		DelegateID                      func(childComplexity int) int
		Details                         func(childComplexity int) int
		DismissedControlSuggestions     func(childComplexity int) int
		DismissedImprovementSuggestions func(childComplexity int) int
		DismissedTagSuggestions         func(childComplexity int) int
		DueDate                         func(childComplexity int) int
		HistoryTime                     func(childComplexity int) int
		ID                              func(childComplexity int) int
		ImprovementSuggestions          func(childComplexity int) int
		Name                            func(childComplexity int) int
		Operation                       func(childComplexity int) int
		OwnerID                         func(childComplexity int) int
		Priority                        func(childComplexity int) int
		Ref                             func(childComplexity int) int
		ReviewDue                       func(childComplexity int) int
		ReviewFrequency                 func(childComplexity int) int
		Revision                        func(childComplexity int) int
		Source                          func(childComplexity int) int
		Status                          func(childComplexity int) int
		Summary                         func(childComplexity int) int
		TagSuggestions                  func(childComplexity int) int
		Tags                            func(childComplexity int) int
		UpdatedAt                       func(childComplexity int) int
		UpdatedBy                       func(childComplexity int) int
	}

	ActionPlanHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ActionPlanHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ActionPlanUpdatePayload struct {
		ActionPlan func(childComplexity int) int
	}

	Asset struct {
		AssetType     func(childComplexity int) int
		BlockedGroups func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Categories    func(childComplexity int) int
		Controls      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		Cpe           func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Description   func(childComplexity int) int
		Editors       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Entities      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		ID            func(childComplexity int) int
		Identifier    func(childComplexity int) int
		Name          func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Scans         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		Viewers       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Website       func(childComplexity int) int
	}

	AssetBulkCreatePayload struct {
		Assets func(childComplexity int) int
	}

	AssetConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AssetCreatePayload struct {
		Asset func(childComplexity int) int
	}

	AssetDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	AssetEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AssetHistory struct {
		AssetType   func(childComplexity int) int
		Categories  func(childComplexity int) int
		Cpe         func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Identifier  func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		Website     func(childComplexity int) int
	}

	AssetHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AssetHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AssetUpdatePayload struct {
		Asset func(childComplexity int) int
	}

	AuditLog struct {
		Changes     func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		Operation   func(childComplexity int) int
		RefID       func(childComplexity int) int
		Table       func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	AuditLogConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AuditLogEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Contact struct {
		Address     func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Email       func(childComplexity int) int
		Entities    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		Files       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		FullName    func(childComplexity int) int
		ID          func(childComplexity int) int
		Owner       func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	ContactBulkCreatePayload struct {
		Contacts func(childComplexity int) int
	}

	ContactBulkUpdatePayload struct {
		Contacts   func(childComplexity int) int
		UpdatedIDs func(childComplexity int) int
	}

	ContactConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ContactCreatePayload struct {
		Contact func(childComplexity int) int
	}

	ContactDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ContactEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ContactHistory struct {
		Address     func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Email       func(childComplexity int) int
		FullName    func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		Ref         func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	ContactHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ContactHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ContactUpdatePayload struct {
		Contact func(childComplexity int) int
	}

	Control struct {
		ActionPlans            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) int
		AssessmentMethods      func(childComplexity int) int
		AssessmentObjectives   func(childComplexity int) int
		Assets                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.AssetOrder, where *generated.AssetWhereInput) int
		AuditorReferenceID     func(childComplexity int) int
		BlockedGroups          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Category               func(childComplexity int) int
		CategoryID             func(childComplexity int) int
		ControlImplementations func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjectives      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		ControlOwner           func(childComplexity int) int
		ControlOwnerID         func(childComplexity int) int
		ControlQuestions       func(childComplexity int) int
		ControlType            func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		Delegate               func(childComplexity int) int
		DelegateID             func(childComplexity int) int
		Description            func(childComplexity int) int
		DisplayID              func(childComplexity int) int
		Editors                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Evidence               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) int
		ExampleEvidence        func(childComplexity int) int
		ID                     func(childComplexity int) int
		ImplementationGuidance func(childComplexity int) int
		InternalPolicies       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		MappedCategories       func(childComplexity int) int
		Narratives             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Owner                  func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Procedures             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		Programs               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		RefCode                func(childComplexity int) int
		ReferenceFramework     func(childComplexity int) int
		ReferenceID            func(childComplexity int) int
		References             func(childComplexity int) int
		Risks                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Scans                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		ScheduledJobs          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScheduledJobOrder, where *generated.ScheduledJobWhereInput) int
		Source                 func(childComplexity int) int
		Standard               func(childComplexity int) int
		StandardID             func(childComplexity int) int
		Status                 func(childComplexity int) int
		Subcategory            func(childComplexity int) int
		Subcontrols            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags                   func(childComplexity int) int
		Tasks                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
	}

	ControlBulkCreatePayload struct {
		Controls func(childComplexity int) int
	}

	ControlBulkUpdatePayload struct {
		Controls   func(childComplexity int) int
		UpdatedIDs func(childComplexity int) int
	}

	ControlCategory struct {
		Name               func(childComplexity int) int
		ReferenceFramework func(childComplexity int) int
	}

	ControlCategoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlCategoryEdge struct {
		Node func(childComplexity int) int
	}

	ControlConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlCreatePayload struct {
		Control func(childComplexity int) int
	}

	ControlDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ControlEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlGroup struct {
		Category func(childComplexity int) int
		Controls func(childComplexity int) int
	}

	ControlGroupConnection struct {
		Edges func(childComplexity int) int
	}

	ControlGroupEdge struct {
		Node     func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ControlHistory struct {
		AssessmentMethods      func(childComplexity int) int
		AssessmentObjectives   func(childComplexity int) int
		AuditorReferenceID     func(childComplexity int) int
		Category               func(childComplexity int) int
		CategoryID             func(childComplexity int) int
		ControlOwnerID         func(childComplexity int) int
		ControlQuestions       func(childComplexity int) int
		ControlType            func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DelegateID             func(childComplexity int) int
		Description            func(childComplexity int) int
		DisplayID              func(childComplexity int) int
		ExampleEvidence        func(childComplexity int) int
		HistoryTime            func(childComplexity int) int
		ID                     func(childComplexity int) int
		ImplementationGuidance func(childComplexity int) int
		MappedCategories       func(childComplexity int) int
		Operation              func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Ref                    func(childComplexity int) int
		RefCode                func(childComplexity int) int
		ReferenceFramework     func(childComplexity int) int
		ReferenceID            func(childComplexity int) int
		References             func(childComplexity int) int
		Source                 func(childComplexity int) int
		StandardID             func(childComplexity int) int
		Status                 func(childComplexity int) int
		Subcategory            func(childComplexity int) int
		Tags                   func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
	}

	ControlHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlImplementation struct {
		BlockedGroups      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Controls           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		Details            func(childComplexity int) int
		Editors            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID                 func(childComplexity int) int
		ImplementationDate func(childComplexity int) int
		Owner              func(childComplexity int) int
		OwnerID            func(childComplexity int) int
		Status             func(childComplexity int) int
		Subcontrols        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags               func(childComplexity int) int
		Tasks              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VerificationDate   func(childComplexity int) int
		Verified           func(childComplexity int) int
		Viewers            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
	}

	ControlImplementationBulkCreatePayload struct {
		ControlImplementations func(childComplexity int) int
	}

	ControlImplementationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlImplementationCreatePayload struct {
		ControlImplementation func(childComplexity int) int
	}

	ControlImplementationDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ControlImplementationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlImplementationHistory struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		Details            func(childComplexity int) int
		HistoryTime        func(childComplexity int) int
		ID                 func(childComplexity int) int
		ImplementationDate func(childComplexity int) int
		Operation          func(childComplexity int) int
		OwnerID            func(childComplexity int) int
		Ref                func(childComplexity int) int
		Status             func(childComplexity int) int
		Tags               func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VerificationDate   func(childComplexity int) int
		Verified           func(childComplexity int) int
	}

	ControlImplementationHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlImplementationHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlImplementationUpdatePayload struct {
		ControlImplementation func(childComplexity int) int
	}

	ControlObjective struct {
		BlockedGroups        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Category             func(childComplexity int) int
		ControlObjectiveType func(childComplexity int) int
		Controls             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DesiredOutcome       func(childComplexity int) int
		DisplayID            func(childComplexity int) int
		Editors              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Evidence             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) int
		ID                   func(childComplexity int) int
		InternalPolicies     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		Name                 func(childComplexity int) int
		Narratives           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Owner                func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Procedures           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		Programs             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		Revision             func(childComplexity int) int
		Risks                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Source               func(childComplexity int) int
		Status               func(childComplexity int) int
		Subcategory          func(childComplexity int) int
		Subcontrols          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags                 func(childComplexity int) int
		Tasks                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Viewers              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
	}

	ControlObjectiveBulkCreatePayload struct {
		ControlObjectives func(childComplexity int) int
	}

	ControlObjectiveConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlObjectiveCreatePayload struct {
		ControlObjective func(childComplexity int) int
	}

	ControlObjectiveDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ControlObjectiveEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlObjectiveHistory struct {
		Category             func(childComplexity int) int
		ControlObjectiveType func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DesiredOutcome       func(childComplexity int) int
		DisplayID            func(childComplexity int) int
		HistoryTime          func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Operation            func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Ref                  func(childComplexity int) int
		Revision             func(childComplexity int) int
		Source               func(childComplexity int) int
		Status               func(childComplexity int) int
		Subcategory          func(childComplexity int) int
		Tags                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	ControlObjectiveHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlObjectiveHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlObjectiveUpdatePayload struct {
		ControlObjective func(childComplexity int) int
	}

	ControlUpdatePayload struct {
		Control func(childComplexity int) int
	}

	CustomDomain struct {
		CnameRecord       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DNSVerification   func(childComplexity int) int
		DNSVerificationID func(childComplexity int) int
		ID                func(childComplexity int) int
		MappableDomain    func(childComplexity int) int
		MappableDomainID  func(childComplexity int) int
		Owner             func(childComplexity int) int
		OwnerID           func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	CustomDomainBulkCreatePayload struct {
		CustomDomains func(childComplexity int) int
	}

	CustomDomainConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CustomDomainCreatePayload struct {
		CustomDomain func(childComplexity int) int
	}

	CustomDomainDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	CustomDomainEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CustomDomainHistory struct {
		CnameRecord       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DNSVerificationID func(childComplexity int) int
		HistoryTime       func(childComplexity int) int
		ID                func(childComplexity int) int
		MappableDomainID  func(childComplexity int) int
		Operation         func(childComplexity int) int
		OwnerID           func(childComplexity int) int
		Ref               func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	CustomDomainHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CustomDomainHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CustomDomainUpdatePayload struct {
		CustomDomain func(childComplexity int) int
	}

	DNSVerification struct {
		AcmeChallengePath           func(childComplexity int) int
		AcmeChallengeStatus         func(childComplexity int) int
		AcmeChallengeStatusReason   func(childComplexity int) int
		CloudflareHostnameID        func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		CustomDomains               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.CustomDomainOrder, where *generated.CustomDomainWhereInput) int
		DNSTxtRecord                func(childComplexity int) int
		DNSTxtValue                 func(childComplexity int) int
		DNSVerificationStatus       func(childComplexity int) int
		DNSVerificationStatusReason func(childComplexity int) int
		ExpectedAcmeChallengeValue  func(childComplexity int) int
		ID                          func(childComplexity int) int
		Owner                       func(childComplexity int) int
		OwnerID                     func(childComplexity int) int
		Tags                        func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	DNSVerificationBulkCreatePayload struct {
		DNSVerifications func(childComplexity int) int
	}

	DNSVerificationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DNSVerificationCreatePayload struct {
		DNSVerification func(childComplexity int) int
	}

	DNSVerificationDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	DNSVerificationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DNSVerificationHistory struct {
		AcmeChallengePath           func(childComplexity int) int
		AcmeChallengeStatus         func(childComplexity int) int
		AcmeChallengeStatusReason   func(childComplexity int) int
		CloudflareHostnameID        func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DNSTxtRecord                func(childComplexity int) int
		DNSTxtValue                 func(childComplexity int) int
		DNSVerificationStatus       func(childComplexity int) int
		DNSVerificationStatusReason func(childComplexity int) int
		ExpectedAcmeChallengeValue  func(childComplexity int) int
		HistoryTime                 func(childComplexity int) int
		ID                          func(childComplexity int) int
		Operation                   func(childComplexity int) int
		OwnerID                     func(childComplexity int) int
		Ref                         func(childComplexity int) int
		Tags                        func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	DNSVerificationHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DNSVerificationHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DNSVerificationUpdatePayload struct {
		DNSVerification func(childComplexity int) int
	}

	DocumentData struct {
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		Data       func(childComplexity int) int
		Entities   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		Files      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID         func(childComplexity int) int
		Owner      func(childComplexity int) int
		OwnerID    func(childComplexity int) int
		Tags       func(childComplexity int) int
		Template   func(childComplexity int) int
		TemplateID func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
	}

	DocumentDataBulkCreatePayload struct {
		DocumentData func(childComplexity int) int
	}

	DocumentDataConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DocumentDataCreatePayload struct {
		DocumentData func(childComplexity int) int
	}

	DocumentDataDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	DocumentDataEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DocumentDataHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Data        func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		TemplateID  func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	DocumentDataHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DocumentDataHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DocumentDataUpdatePayload struct {
		DocumentData func(childComplexity int) int
	}

	Entity struct {
		Assets        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.AssetOrder, where *generated.AssetWhereInput) int
		BlockedGroups func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Contacts      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ContactOrder, where *generated.ContactWhereInput) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Description   func(childComplexity int) int
		DisplayName   func(childComplexity int) int
		Documents     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.DocumentDataOrder, where *generated.DocumentDataWhereInput) int
		Domains       func(childComplexity int) int
		Editors       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		EntityType    func(childComplexity int) int
		EntityTypeID  func(childComplexity int) int
		Files         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Notes         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NoteOrder, where *generated.NoteWhereInput) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Scans         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		Status        func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		Viewers       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
	}

	EntityBulkCreatePayload struct {
		Entities func(childComplexity int) int
	}

	EntityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityCreatePayload struct {
		Entity func(childComplexity int) int
	}

	EntityDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	EntityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntityHistory struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		DisplayName  func(childComplexity int) int
		Domains      func(childComplexity int) int
		EntityTypeID func(childComplexity int) int
		HistoryTime  func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Operation    func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Ref          func(childComplexity int) int
		Status       func(childComplexity int) int
		Tags         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	EntityHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntityType struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		Entities  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Owner     func(childComplexity int) int
		OwnerID   func(childComplexity int) int
		Tags      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	EntityTypeBulkCreatePayload struct {
		EntityTypes func(childComplexity int) int
	}

	EntityTypeConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityTypeCreatePayload struct {
		EntityType func(childComplexity int) int
	}

	EntityTypeDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	EntityTypeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntityTypeHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	EntityTypeHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityTypeHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntityTypeUpdatePayload struct {
		EntityType func(childComplexity int) int
	}

	EntityUpdatePayload struct {
		Entity func(childComplexity int) int
	}

	Event struct {
		CorrelationID        func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		EventID              func(childComplexity int) int
		EventType            func(childComplexity int) int
		Files                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		GroupMemberships     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupMembershipOrder, where *generated.GroupMembershipWhereInput) int
		Groups               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID                   func(childComplexity int) int
		Integrations         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.IntegrationOrder, where *generated.IntegrationWhereInput) int
		Invites              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InviteOrder, where *generated.InviteWhereInput) int
		Metadata             func(childComplexity int) int
		OrgMemberships       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrgMembershipOrder, where *generated.OrgMembershipWhereInput) int
		OrgSubscriptions     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrgSubscriptionOrder, where *generated.OrgSubscriptionWhereInput) int
		Organizations        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationOrder, where *generated.OrganizationWhereInput) int
		PersonalAccessTokens func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.PersonalAccessTokenOrder, where *generated.PersonalAccessTokenWhereInput) int
		Secrets              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.HushOrder, where *generated.HushWhereInput) int
		Subscribers          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubscriberOrder, where *generated.SubscriberWhereInput) int
		Tags                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Users                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserOrder, where *generated.UserWhereInput) int
	}

	EventBulkCreatePayload struct {
		Events func(childComplexity int) int
	}

	EventConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EventCreatePayload struct {
		Event func(childComplexity int) int
	}

	EventDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	EventEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EventUpdatePayload struct {
		Event func(childComplexity int) int
	}

	Evidence struct {
		CollectionProcedure    func(childComplexity int) int
		ControlImplementations func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjectives      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		Controls               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		CreationDate           func(childComplexity int) int
		Description            func(childComplexity int) int
		DisplayID              func(childComplexity int) int
		Files                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID                     func(childComplexity int) int
		IsAutomated            func(childComplexity int) int
		Name                   func(childComplexity int) int
		Owner                  func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Programs               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		RenewalDate            func(childComplexity int) int
		Source                 func(childComplexity int) int
		Status                 func(childComplexity int) int
		Subcontrols            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags                   func(childComplexity int) int
		Tasks                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		URL                    func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
	}

	EvidenceBulkCreatePayload struct {
		Evidences func(childComplexity int) int
	}

	EvidenceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EvidenceCreatePayload struct {
		Evidence func(childComplexity int) int
	}

	EvidenceDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	EvidenceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EvidenceHistory struct {
		CollectionProcedure func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		CreationDate        func(childComplexity int) int
		Description         func(childComplexity int) int
		DisplayID           func(childComplexity int) int
		HistoryTime         func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsAutomated         func(childComplexity int) int
		Name                func(childComplexity int) int
		Operation           func(childComplexity int) int
		OwnerID             func(childComplexity int) int
		Ref                 func(childComplexity int) int
		RenewalDate         func(childComplexity int) int
		Source              func(childComplexity int) int
		Status              func(childComplexity int) int
		Tags                func(childComplexity int) int
		URL                 func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
	}

	EvidenceHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EvidenceHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EvidenceUpdatePayload struct {
		Evidence func(childComplexity int) int
	}

	Export struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		ErrorMessage func(childComplexity int) int
		Events       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		ExportType   func(childComplexity int) int
		Fields       func(childComplexity int) int
		Files        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		Filters      func(childComplexity int) int
		Format       func(childComplexity int) int
		ID           func(childComplexity int) int
		Owner        func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		RequestorID  func(childComplexity int) int
		Status       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	ExportBulkCreatePayload struct {
		Exports func(childComplexity int) int
	}

	ExportBulkDeletePayload struct {
		DeletedIDs func(childComplexity int) int
	}

	ExportConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ExportCreatePayload struct {
		Export func(childComplexity int) int
	}

	ExportDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ExportEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ExportUpdatePayload struct {
		Export func(childComplexity int) int
	}

	File struct {
		CategoryType          func(childComplexity int) int
		Contact               func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DetectedContentType   func(childComplexity int) int
		DetectedMimeType      func(childComplexity int) int
		Document              func(childComplexity int) int
		Entity                func(childComplexity int) int
		Events                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Evidence              func(childComplexity int) int
		Groups                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID                    func(childComplexity int) int
		Integrations          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.IntegrationOrder, where *generated.IntegrationWhereInput) int
		LastAccessedAt        func(childComplexity int) int
		Md5Hash               func(childComplexity int) int
		Metadata              func(childComplexity int) int
		Organization          func(childComplexity int) int
		OrganizationSetting   func(childComplexity int) int
		PersistedFileSize     func(childComplexity int) int
		PresignedURL          func(childComplexity int) int
		Program               func(childComplexity int) int
		ProvidedFileExtension func(childComplexity int) int
		ProvidedFileName      func(childComplexity int) int
		ProvidedFileSize      func(childComplexity int) int
		Secrets               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.HushOrder, where *generated.HushWhereInput) int
		StoragePath           func(childComplexity int) int
		StorageProvider       func(childComplexity int) int
		StorageRegion         func(childComplexity int) int
		StorageScheme         func(childComplexity int) int
		StorageVolume         func(childComplexity int) int
		StoreKey              func(childComplexity int) int
		Subprocessor          func(childComplexity int) int
		Tags                  func(childComplexity int) int
		Template              func(childComplexity int) int
		TrustCenterSetting    func(childComplexity int) int
		URI                   func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		User                  func(childComplexity int) int
		UserSetting           func(childComplexity int) int
	}

	FileConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	FileEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FileHistory struct {
		CategoryType          func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DetectedContentType   func(childComplexity int) int
		DetectedMimeType      func(childComplexity int) int
		HistoryTime           func(childComplexity int) int
		ID                    func(childComplexity int) int
		LastAccessedAt        func(childComplexity int) int
		Md5Hash               func(childComplexity int) int
		Metadata              func(childComplexity int) int
		Operation             func(childComplexity int) int
		PersistedFileSize     func(childComplexity int) int
		ProvidedFileExtension func(childComplexity int) int
		ProvidedFileName      func(childComplexity int) int
		ProvidedFileSize      func(childComplexity int) int
		Ref                   func(childComplexity int) int
		StoragePath           func(childComplexity int) int
		StorageProvider       func(childComplexity int) int
		StorageRegion         func(childComplexity int) int
		StorageScheme         func(childComplexity int) int
		StorageVolume         func(childComplexity int) int
		StoreKey              func(childComplexity int) int
		Tags                  func(childComplexity int) int
		URI                   func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
	}

	FileHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Group struct {
		ControlBlockedGroups               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		ControlEditors                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		ControlImplementationBlockedGroups func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlImplementationEditors       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlImplementationViewers       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjectiveBlockedGroups      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		ControlObjectiveEditors            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		ControlObjectiveViewers            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		CreatedAt                          func(childComplexity int) int
		CreatedBy                          func(childComplexity int) int
		Description                        func(childComplexity int) int
		DisplayID                          func(childComplexity int) int
		DisplayName                        func(childComplexity int) int
		EntityBlockedGroups                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		EntityEditors                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		EntityViewers                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		Events                             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Files                              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		GravatarLogoURL                    func(childComplexity int) int
		ID                                 func(childComplexity int) int
		Integrations                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.IntegrationOrder, where *generated.IntegrationWhereInput) int
		InternalPolicyBlockedGroups        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		InternalPolicyEditors              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		IsManaged                          func(childComplexity int) int
		LogoURL                            func(childComplexity int) int
		MappedControlBlockedGroups         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.MappedControlOrder, where *generated.MappedControlWhereInput) int
		MappedControlEditors               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.MappedControlOrder, where *generated.MappedControlWhereInput) int
		Members                            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupMembershipOrder, where *generated.GroupMembershipWhereInput) int
		Name                               func(childComplexity int) int
		NarrativeBlockedGroups             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		NarrativeEditors                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		NarrativeViewers                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Owner                              func(childComplexity int) int
		OwnerID                            func(childComplexity int) int
		Permissions                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		ProcedureBlockedGroups             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		ProcedureEditors                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		ProgramBlockedGroups               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		ProgramEditors                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		ProgramViewers                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		RiskBlockedGroups                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		RiskEditors                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		RiskViewers                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		ScanBlockedGroups                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		ScanEditors                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		ScanViewers                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		Setting                            func(childComplexity int) int
		Tags                               func(childComplexity int) int
		Tasks                              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		UpdatedAt                          func(childComplexity int) int
		UpdatedBy                          func(childComplexity int) int
		Users                              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserOrder, where *generated.UserWhereInput) int
	}

	GroupBulkCreatePayload struct {
		Groups func(childComplexity int) int
	}

	GroupConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupCreatePayload struct {
		Group func(childComplexity int) int
	}

	GroupDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	GroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupHistory struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		DisplayID       func(childComplexity int) int
		DisplayName     func(childComplexity int) int
		GravatarLogoURL func(childComplexity int) int
		HistoryTime     func(childComplexity int) int
		ID              func(childComplexity int) int
		IsManaged       func(childComplexity int) int
		LogoURL         func(childComplexity int) int
		Name            func(childComplexity int) int
		Operation       func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		Ref             func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
	}

	GroupHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupMembership struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		Events    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Group     func(childComplexity int) int
		GroupID   func(childComplexity int) int
		ID        func(childComplexity int) int
		Role      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	GroupMembershipBulkCreatePayload struct {
		GroupMemberships func(childComplexity int) int
	}

	GroupMembershipConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupMembershipCreatePayload struct {
		GroupMembership func(childComplexity int) int
	}

	GroupMembershipDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	GroupMembershipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupMembershipHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		GroupID     func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		Ref         func(childComplexity int) int
		Role        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	GroupMembershipHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupMembershipHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupMembershipUpdatePayload struct {
		GroupMembership func(childComplexity int) int
	}

	GroupPermission struct {
		DisplayID   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		ObjectType  func(childComplexity int) int
		Permissions func(childComplexity int) int
	}

	GroupPermissionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupPermissionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupSetting struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Group        func(childComplexity int) int
		GroupID      func(childComplexity int) int
		ID           func(childComplexity int) int
		JoinPolicy   func(childComplexity int) int
		SyncToGithub func(childComplexity int) int
		SyncToSlack  func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Visibility   func(childComplexity int) int
	}

	GroupSettingBulkCreatePayload struct {
		GroupSettings func(childComplexity int) int
	}

	GroupSettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupSettingCreatePayload struct {
		GroupSetting func(childComplexity int) int
	}

	GroupSettingDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	GroupSettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupSettingHistory struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		GroupID      func(childComplexity int) int
		HistoryTime  func(childComplexity int) int
		ID           func(childComplexity int) int
		JoinPolicy   func(childComplexity int) int
		Operation    func(childComplexity int) int
		Ref          func(childComplexity int) int
		SyncToGithub func(childComplexity int) int
		SyncToSlack  func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Visibility   func(childComplexity int) int
	}

	GroupSettingHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupSettingHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupSettingUpdatePayload struct {
		GroupSetting func(childComplexity int) int
	}

	GroupUpdatePayload struct {
		Group func(childComplexity int) int
	}

	Hush struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		CredentialSet func(childComplexity int) int
		Description   func(childComplexity int) int
		Events        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		ExpiresAt     func(childComplexity int) int
		Files         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID            func(childComplexity int) int
		Integrations  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.IntegrationOrder, where *generated.IntegrationWhereInput) int
		Kind          func(childComplexity int) int
		LastUsedAt    func(childComplexity int) int
		Metadata      func(childComplexity int) int
		Name          func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		SecretName    func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	HushBulkCreatePayload struct {
		Hushes func(childComplexity int) int
	}

	HushBulkUpdatePayload struct {
		Hushes     func(childComplexity int) int
		UpdatedIDs func(childComplexity int) int
	}

	HushConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HushCreatePayload struct {
		Hush func(childComplexity int) int
	}

	HushDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	HushEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HushHistory struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		CredentialSet func(childComplexity int) int
		Description   func(childComplexity int) int
		ExpiresAt     func(childComplexity int) int
		HistoryTime   func(childComplexity int) int
		ID            func(childComplexity int) int
		Kind          func(childComplexity int) int
		LastUsedAt    func(childComplexity int) int
		Metadata      func(childComplexity int) int
		Name          func(childComplexity int) int
		Operation     func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Ref           func(childComplexity int) int
		SecretName    func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	HushHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HushHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HushUpdatePayload struct {
		Hush func(childComplexity int) int
	}

	Integration struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		Events          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Files           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID              func(childComplexity int) int
		IntegrationType func(childComplexity int) int
		Kind            func(childComplexity int) int
		Metadata        func(childComplexity int) int
		Name            func(childComplexity int) int
		Owner           func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		Secrets         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.HushOrder, where *generated.HushWhereInput) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
	}

	IntegrationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	IntegrationDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	IntegrationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	IntegrationHistory struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		HistoryTime     func(childComplexity int) int
		ID              func(childComplexity int) int
		IntegrationType func(childComplexity int) int
		Kind            func(childComplexity int) int
		Metadata        func(childComplexity int) int
		Name            func(childComplexity int) int
		Operation       func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		Ref             func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
	}

	IntegrationHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	IntegrationHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InternalPolicy struct {
		ApprovalRequired                func(childComplexity int) int
		Approver                        func(childComplexity int) int
		ApproverID                      func(childComplexity int) int
		BlockedGroups                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ControlImplementations          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjectives               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		ControlSuggestions              func(childComplexity int) int
		Controls                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt                       func(childComplexity int) int
		CreatedBy                       func(childComplexity int) int
		Delegate                        func(childComplexity int) int
		DelegateID                      func(childComplexity int) int
		Details                         func(childComplexity int) int
		DismissedControlSuggestions     func(childComplexity int) int
		DismissedImprovementSuggestions func(childComplexity int) int
		DismissedTagSuggestions         func(childComplexity int) int
		DisplayID                       func(childComplexity int) int
		Editors                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		File                            func(childComplexity int) int
		FileID                          func(childComplexity int) int
		ID                              func(childComplexity int) int
		ImprovementSuggestions          func(childComplexity int) int
		Name                            func(childComplexity int) int
		Narratives                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Owner                           func(childComplexity int) int
		OwnerID                         func(childComplexity int) int
		PolicyType                      func(childComplexity int) int
		Procedures                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		Programs                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		ReviewDue                       func(childComplexity int) int
		ReviewFrequency                 func(childComplexity int) int
		Revision                        func(childComplexity int) int
		Risks                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Status                          func(childComplexity int) int
		Subcontrols                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Summary                         func(childComplexity int) int
		TagSuggestions                  func(childComplexity int) int
		Tags                            func(childComplexity int) int
		Tasks                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		URL                             func(childComplexity int) int
		UpdatedAt                       func(childComplexity int) int
		UpdatedBy                       func(childComplexity int) int
	}

	InternalPolicyBulkCreatePayload struct {
		InternalPolicies func(childComplexity int) int
	}

	InternalPolicyBulkUpdatePayload struct {
		InternalPolicies func(childComplexity int) int
		UpdatedIDs       func(childComplexity int) int
	}

	InternalPolicyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InternalPolicyCreatePayload struct {
		InternalPolicy func(childComplexity int) int
	}

	InternalPolicyDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	InternalPolicyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InternalPolicyHistory struct {
		ApprovalRequired                func(childComplexity int) int
		ApproverID                      func(childComplexity int) int
		ControlSuggestions              func(childComplexity int) int
		CreatedAt                       func(childComplexity int) int
		CreatedBy                       func(childComplexity int) int
		DelegateID                      func(childComplexity int) int
		Details                         func(childComplexity int) int
		DismissedControlSuggestions     func(childComplexity int) int
		DismissedImprovementSuggestions func(childComplexity int) int
		DismissedTagSuggestions         func(childComplexity int) int
		DisplayID                       func(childComplexity int) int
		FileID                          func(childComplexity int) int
		HistoryTime                     func(childComplexity int) int
		ID                              func(childComplexity int) int
		ImprovementSuggestions          func(childComplexity int) int
		Name                            func(childComplexity int) int
		Operation                       func(childComplexity int) int
		OwnerID                         func(childComplexity int) int
		PolicyType                      func(childComplexity int) int
		Ref                             func(childComplexity int) int
		ReviewDue                       func(childComplexity int) int
		ReviewFrequency                 func(childComplexity int) int
		Revision                        func(childComplexity int) int
		Status                          func(childComplexity int) int
		Summary                         func(childComplexity int) int
		TagSuggestions                  func(childComplexity int) int
		Tags                            func(childComplexity int) int
		URL                             func(childComplexity int) int
		UpdatedAt                       func(childComplexity int) int
		UpdatedBy                       func(childComplexity int) int
	}

	InternalPolicyHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InternalPolicyHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InternalPolicyUpdatePayload struct {
		InternalPolicy func(childComplexity int) int
	}

	Invite struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Events       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Expires      func(childComplexity int) int
		Groups       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID           func(childComplexity int) int
		Owner        func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Recipient    func(childComplexity int) int
		RequestorID  func(childComplexity int) int
		Role         func(childComplexity int) int
		SendAttempts func(childComplexity int) int
		Status       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	InviteBulkCreatePayload struct {
		Invites func(childComplexity int) int
	}

	InviteConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InviteCreatePayload struct {
		Invite func(childComplexity int) int
	}

	InviteDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	InviteEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InviteUpdatePayload struct {
		Invite func(childComplexity int) int
	}

	JobResult struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		ExitCode       func(childComplexity int) int
		File           func(childComplexity int) int
		FileID         func(childComplexity int) int
		FinishedAt     func(childComplexity int) int
		ID             func(childComplexity int) int
		Log            func(childComplexity int) int
		Owner          func(childComplexity int) int
		OwnerID        func(childComplexity int) int
		ScheduledJob   func(childComplexity int) int
		ScheduledJobID func(childComplexity int) int
		StartedAt      func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	JobResultConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobResultCreatePayload struct {
		JobResult func(childComplexity int) int
	}

	JobResultDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	JobResultEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobResultUpdatePayload struct {
		JobResult func(childComplexity int) int
	}

	JobRunner struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DisplayID       func(childComplexity int) int
		ID              func(childComplexity int) int
		IPAddress       func(childComplexity int) int
		JobRunnerTokens func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerTokenOrder, where *generated.JobRunnerTokenWhereInput) int
		LastSeen        func(childComplexity int) int
		Name            func(childComplexity int) int
		Os              func(childComplexity int) int
		Owner           func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		Status          func(childComplexity int) int
		SystemOwned     func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		Version         func(childComplexity int) int
	}

	JobRunnerConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobRunnerCreatePayload struct {
		JobRunner func(childComplexity int) int
	}

	JobRunnerDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	JobRunnerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobRunnerRegistrationToken struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		JobRunner   func(childComplexity int) int
		JobRunnerID func(childComplexity int) int
		LastUsedAt  func(childComplexity int) int
		Owner       func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Tags        func(childComplexity int) int
		Token       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	JobRunnerRegistrationTokenBulkCreatePayload struct {
		JobRunnerRegistrationTokens func(childComplexity int) int
	}

	JobRunnerRegistrationTokenConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobRunnerRegistrationTokenCreatePayload struct {
		JobRunnerRegistrationToken func(childComplexity int) int
	}

	JobRunnerRegistrationTokenDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	JobRunnerRegistrationTokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobRunnerToken struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ExpiresAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		IsActive      func(childComplexity int) int
		JobRunners    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerOrder, where *generated.JobRunnerWhereInput) int
		LastUsedAt    func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		RevokedAt     func(childComplexity int) int
		RevokedBy     func(childComplexity int) int
		RevokedReason func(childComplexity int) int
		Tags          func(childComplexity int) int
		Token         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	JobRunnerTokenConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobRunnerTokenCreatePayload struct {
		JobRunnerToken func(childComplexity int) int
	}

	JobRunnerTokenDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	JobRunnerTokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobRunnerTokenUpdatePayload struct {
		JobRunnerToken func(childComplexity int) int
	}

	JobRunnerUpdatePayload struct {
		JobRunner func(childComplexity int) int
	}

	JobTemplate struct {
		Configuration func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Cron          func(childComplexity int) int
		Description   func(childComplexity int) int
		DisplayID     func(childComplexity int) int
		DownloadURL   func(childComplexity int) int
		ID            func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Platform      func(childComplexity int) int
		ScheduledJobs func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScheduledJobOrder, where *generated.ScheduledJobWhereInput) int
		SystemOwned   func(childComplexity int) int
		Tags          func(childComplexity int) int
		Title         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	JobTemplateBulkCreatePayload struct {
		JobTemplates func(childComplexity int) int
	}

	JobTemplateConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobTemplateCreatePayload struct {
		JobTemplate func(childComplexity int) int
	}

	JobTemplateDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	JobTemplateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobTemplateHistory struct {
		Configuration func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Cron          func(childComplexity int) int
		Description   func(childComplexity int) int
		DisplayID     func(childComplexity int) int
		DownloadURL   func(childComplexity int) int
		HistoryTime   func(childComplexity int) int
		ID            func(childComplexity int) int
		Operation     func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Platform      func(childComplexity int) int
		Ref           func(childComplexity int) int
		SystemOwned   func(childComplexity int) int
		Tags          func(childComplexity int) int
		Title         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	JobTemplateHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobTemplateHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobTemplateUpdatePayload struct {
		JobTemplate func(childComplexity int) int
	}

	MappableDomain struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		CustomDomains func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.CustomDomainOrder, where *generated.CustomDomainWhereInput) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		ZoneID        func(childComplexity int) int
	}

	MappableDomainBulkCreatePayload struct {
		MappableDomains func(childComplexity int) int
	}

	MappableDomainConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MappableDomainCreatePayload struct {
		MappableDomain func(childComplexity int) int
	}

	MappableDomainDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	MappableDomainEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MappableDomainHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		ZoneID      func(childComplexity int) int
	}

	MappableDomainHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MappableDomainHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MappableDomainUpdatePayload struct {
		MappableDomain func(childComplexity int) int
	}

	MappedControl struct {
		BlockedGroups   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Confidence      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		Editors         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		FromControls    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		FromSubcontrols func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		ID              func(childComplexity int) int
		MappingType     func(childComplexity int) int
		Owner           func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		Relation        func(childComplexity int) int
		Source          func(childComplexity int) int
		Tags            func(childComplexity int) int
		ToControls      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		ToSubcontrols   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
	}

	MappedControlBulkCreatePayload struct {
		MappedControls func(childComplexity int) int
	}

	MappedControlConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MappedControlCreatePayload struct {
		MappedControl func(childComplexity int) int
	}

	MappedControlDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	MappedControlEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MappedControlHistory struct {
		Confidence  func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		MappingType func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Relation    func(childComplexity int) int
		Source      func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	MappedControlHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MappedControlHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MappedControlUpdatePayload struct {
		MappedControl func(childComplexity int) int
	}

	Mutation struct {
		CreateAPIToken                       func(childComplexity int, input generated.CreateAPITokenInput) int
		CreateActionPlan                     func(childComplexity int, input generated.CreateActionPlanInput) int
		CreateAsset                          func(childComplexity int, input generated.CreateAssetInput) int
		CreateBulkAPIToken                   func(childComplexity int, input []*generated.CreateAPITokenInput) int
		CreateBulkActionPlan                 func(childComplexity int, input []*generated.CreateActionPlanInput) int
		CreateBulkAsset                      func(childComplexity int, input []*generated.CreateAssetInput) int
		CreateBulkCSVAPIToken                func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVActionPlan              func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVAsset                   func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVContact                 func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVControl                 func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVControlImplementation   func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVControlObjective        func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVCustomDomain            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVDNSVerification         func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVDocumentData            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVEntity                  func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVEntityType              func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVEvent                   func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVGroup                   func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVGroupMembership         func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVGroupSetting            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVHush                    func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVInternalPolicy          func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVInvite                  func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVJobTemplate             func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVMappableDomain          func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVMappedControl           func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVNarrative               func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVOrgMembership           func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVOrganizationSetting     func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVProcedure               func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVProgram                 func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVProgramMembership       func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVRisk                    func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVScan                    func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVScheduledJob            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVSubcontrol              func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVSubprocessor            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVSubscriber              func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVTask                    func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVTemplate                func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVTrustCenterCompliance   func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVTrustCenterDoc          func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVTrustCenterSubprocessor func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVUserSetting             func(childComplexity int, input graphql.Upload) int
		CreateBulkContact                    func(childComplexity int, input []*generated.CreateContactInput) int
		CreateBulkControl                    func(childComplexity int, input []*generated.CreateControlInput) int
		CreateBulkControlImplementation      func(childComplexity int, input []*generated.CreateControlImplementationInput) int
		CreateBulkControlObjective           func(childComplexity int, input []*generated.CreateControlObjectiveInput) int
		CreateBulkCustomDomain               func(childComplexity int, input []*generated.CreateCustomDomainInput) int
		CreateBulkDNSVerification            func(childComplexity int, input []*generated.CreateDNSVerificationInput) int
		CreateBulkDocumentData               func(childComplexity int, input []*generated.CreateDocumentDataInput) int
		CreateBulkEntity                     func(childComplexity int, input []*generated.CreateEntityInput) int
		CreateBulkEntityType                 func(childComplexity int, input []*generated.CreateEntityTypeInput) int
		CreateBulkEvent                      func(childComplexity int, input []*generated.CreateEventInput) int
		CreateBulkGroup                      func(childComplexity int, input []*generated.CreateGroupInput) int
		CreateBulkGroupMembership            func(childComplexity int, input []*generated.CreateGroupMembershipInput) int
		CreateBulkGroupSetting               func(childComplexity int, input []*generated.CreateGroupSettingInput) int
		CreateBulkHush                       func(childComplexity int, input []*generated.CreateHushInput) int
		CreateBulkInternalPolicy             func(childComplexity int, input []*generated.CreateInternalPolicyInput) int
		CreateBulkInvite                     func(childComplexity int, input []*generated.CreateInviteInput) int
		CreateBulkJobTemplate                func(childComplexity int, input []*generated.CreateJobTemplateInput) int
		CreateBulkMappableDomain             func(childComplexity int, input []*generated.CreateMappableDomainInput) int
		CreateBulkMappedControl              func(childComplexity int, input []*generated.CreateMappedControlInput) int
		CreateBulkNarrative                  func(childComplexity int, input []*generated.CreateNarrativeInput) int
		CreateBulkOrgMembership              func(childComplexity int, input []*generated.CreateOrgMembershipInput) int
		CreateBulkOrganizationSetting        func(childComplexity int, input []*generated.CreateOrganizationSettingInput) int
		CreateBulkProcedure                  func(childComplexity int, input []*generated.CreateProcedureInput) int
		CreateBulkProgram                    func(childComplexity int, input []*generated.CreateProgramInput) int
		CreateBulkProgramMembership          func(childComplexity int, input []*generated.CreateProgramMembershipInput) int
		CreateBulkRisk                       func(childComplexity int, input []*generated.CreateRiskInput) int
		CreateBulkScan                       func(childComplexity int, input []*generated.CreateScanInput) int
		CreateBulkScheduledJob               func(childComplexity int, input []*generated.CreateScheduledJobInput) int
		CreateBulkSubcontrol                 func(childComplexity int, input []*generated.CreateSubcontrolInput) int
		CreateBulkSubprocessor               func(childComplexity int, input []*generated.CreateSubprocessorInput) int
		CreateBulkSubscriber                 func(childComplexity int, input []*generated.CreateSubscriberInput) int
		CreateBulkTask                       func(childComplexity int, input []*generated.CreateTaskInput) int
		CreateBulkTemplate                   func(childComplexity int, input []*generated.CreateTemplateInput) int
		CreateBulkTrustCenterCompliance      func(childComplexity int, input []*generated.CreateTrustCenterComplianceInput) int
		CreateBulkTrustCenterDoc             func(childComplexity int, input []*generated.CreateTrustCenterDocInput) int
		CreateBulkTrustCenterSubprocessor    func(childComplexity int, input []*generated.CreateTrustCenterSubprocessorInput) int
		CreateBulkUserSetting                func(childComplexity int, input []*generated.CreateUserSettingInput) int
		CreateContact                        func(childComplexity int, input generated.CreateContactInput) int
		CreateControl                        func(childComplexity int, input generated.CreateControlInput) int
		CreateControlImplementation          func(childComplexity int, input generated.CreateControlImplementationInput) int
		CreateControlObjective               func(childComplexity int, input generated.CreateControlObjectiveInput) int
		CreateControlWithSubcontrols         func(childComplexity int, input model.CreateControlWithSubcontrolsInput) int
		CreateControlsByClone                func(childComplexity int, input *model.CloneControlInput) int
		CreateCustomDomain                   func(childComplexity int, input generated.CreateCustomDomainInput) int
		CreateDNSVerification                func(childComplexity int, input generated.CreateDNSVerificationInput) int
		CreateDocumentData                   func(childComplexity int, input generated.CreateDocumentDataInput) int
		CreateEntity                         func(childComplexity int, input generated.CreateEntityInput) int
		CreateEntityType                     func(childComplexity int, input generated.CreateEntityTypeInput) int
		CreateEvent                          func(childComplexity int, input generated.CreateEventInput) int
		CreateEvidence                       func(childComplexity int, input generated.CreateEvidenceInput, evidenceFiles []*graphql.Upload) int
		CreateExport                         func(childComplexity int, input generated.CreateExportInput) int
		CreateFullProgram                    func(childComplexity int, input model.CreateFullProgramInput) int
		CreateGroup                          func(childComplexity int, input generated.CreateGroupInput) int
		CreateGroupByClone                   func(childComplexity int, groupInput generated.CreateGroupInput, members []*model.GroupMembersInput, inheritGroupPermissions *string, cloneGroupMembers *string) int
		CreateGroupMembership                func(childComplexity int, input generated.CreateGroupMembershipInput) int
		CreateGroupSetting                   func(childComplexity int, input generated.CreateGroupSettingInput) int
		CreateGroupWithMembers               func(childComplexity int, groupInput generated.CreateGroupInput, members []*model.GroupMembersInput) int
		CreateHush                           func(childComplexity int, input generated.CreateHushInput) int
		CreateInternalPolicy                 func(childComplexity int, input generated.CreateInternalPolicyInput) int
		CreateInvite                         func(childComplexity int, input generated.CreateInviteInput) int
		CreateJobResult                      func(childComplexity int, input generated.CreateJobResultInput, jobResultFiles []*graphql.Upload) int
		CreateJobRunner                      func(childComplexity int, input generated.CreateJobRunnerInput) int
		CreateJobRunnerRegistrationToken     func(childComplexity int, input generated.CreateJobRunnerRegistrationTokenInput) int
		CreateJobRunnerToken                 func(childComplexity int, input generated.CreateJobRunnerTokenInput) int
		CreateJobTemplate                    func(childComplexity int, input generated.CreateJobTemplateInput) int
		CreateMappableDomain                 func(childComplexity int, input generated.CreateMappableDomainInput) int
		CreateMappedControl                  func(childComplexity int, input generated.CreateMappedControlInput) int
		CreateNarrative                      func(childComplexity int, input generated.CreateNarrativeInput) int
		CreateOnboarding                     func(childComplexity int, input generated.CreateOnboardingInput) int
		CreateOrgMembership                  func(childComplexity int, input generated.CreateOrgMembershipInput) int
		CreateOrganization                   func(childComplexity int, input generated.CreateOrganizationInput, avatarFile *graphql.Upload) int
		CreateOrganizationSetting            func(childComplexity int, input generated.CreateOrganizationSettingInput) int
		CreateOrganizationWithMembers        func(childComplexity int, organizationInput generated.CreateOrganizationInput, avatarFile *graphql.Upload, members []*model.OrgMembersInput) int
		CreatePersonalAccessToken            func(childComplexity int, input generated.CreatePersonalAccessTokenInput) int
		CreateProcedure                      func(childComplexity int, input generated.CreateProcedureInput) int
		CreateProgram                        func(childComplexity int, input generated.CreateProgramInput) int
		CreateProgramMembership              func(childComplexity int, input generated.CreateProgramMembershipInput) int
		CreateProgramWithMembers             func(childComplexity int, input model.CreateProgramWithMembersInput) int
		CreateRisk                           func(childComplexity int, input generated.CreateRiskInput) int
		CreateScan                           func(childComplexity int, input generated.CreateScanInput) int
		CreateScheduledJob                   func(childComplexity int, input generated.CreateScheduledJobInput) int
		CreateScheduledJobRun                func(childComplexity int, input generated.CreateScheduledJobRunInput) int
		CreateStandard                       func(childComplexity int, input generated.CreateStandardInput) int
		CreateSubcontrol                     func(childComplexity int, input generated.CreateSubcontrolInput) int
		CreateSubprocessor                   func(childComplexity int, input generated.CreateSubprocessorInput, logoFile *graphql.Upload) int
		CreateSubscriber                     func(childComplexity int, input generated.CreateSubscriberInput) int
		CreateTFASetting                     func(childComplexity int, input generated.CreateTFASettingInput) int
		CreateTask                           func(childComplexity int, input generated.CreateTaskInput) int
		CreateTemplate                       func(childComplexity int, input generated.CreateTemplateInput) int
		CreateTrustCenter                    func(childComplexity int, input generated.CreateTrustCenterInput) int
		CreateTrustCenterCompliance          func(childComplexity int, input generated.CreateTrustCenterComplianceInput) int
		CreateTrustCenterDoc                 func(childComplexity int, input generated.CreateTrustCenterDocInput) int
		CreateTrustCenterDomain              func(childComplexity int, input model.CreateTrustCenterDomainInput) int
		CreateTrustCenterSetting             func(childComplexity int, input generated.CreateTrustCenterSettingInput, logoFile *graphql.Upload, faviconFile *graphql.Upload) int
		CreateTrustCenterSubprocessor        func(childComplexity int, input generated.CreateTrustCenterSubprocessorInput) int
		CreateUploadInternalPolicy           func(childComplexity int, policyFile graphql.Upload, ownerID *string) int
		CreateUploadProcedure                func(childComplexity int, procedureFile graphql.Upload, ownerID *string) int
		CreateUser                           func(childComplexity int, input generated.CreateUserInput, avatarFile *graphql.Upload) int
		CreateUserSetting                    func(childComplexity int, input generated.CreateUserSettingInput) int
		DeleteAPIToken                       func(childComplexity int, id string) int
		DeleteActionPlan                     func(childComplexity int, id string) int
		DeleteAsset                          func(childComplexity int, id string) int
		DeleteBulkExport                     func(childComplexity int, ids []string) int
		DeleteContact                        func(childComplexity int, id string) int
		DeleteControl                        func(childComplexity int, id string) int
		DeleteControlImplementation          func(childComplexity int, id string) int
		DeleteControlObjective               func(childComplexity int, id string) int
		DeleteCustomDomain                   func(childComplexity int, id string) int
		DeleteDNSVerification                func(childComplexity int, id string) int
		DeleteDocumentData                   func(childComplexity int, id string) int
		DeleteEntity                         func(childComplexity int, id string) int
		DeleteEntityType                     func(childComplexity int, id string) int
		DeleteEvent                          func(childComplexity int, id string) int
		DeleteEvidence                       func(childComplexity int, id string) int
		DeleteExport                         func(childComplexity int, id string) int
		DeleteFile                           func(childComplexity int, id string) int
		DeleteGroup                          func(childComplexity int, id string) int
		DeleteGroupMembership                func(childComplexity int, id string) int
		DeleteGroupSetting                   func(childComplexity int, id string) int
		DeleteHush                           func(childComplexity int, id string) int
		DeleteIntegration                    func(childComplexity int, id string) int
		DeleteInternalPolicy                 func(childComplexity int, id string) int
		DeleteInvite                         func(childComplexity int, id string) int
		DeleteJobResult                      func(childComplexity int, id string) int
		DeleteJobRunner                      func(childComplexity int, id string) int
		DeleteJobRunnerRegistrationToken     func(childComplexity int, id string) int
		DeleteJobRunnerToken                 func(childComplexity int, id string) int
		DeleteJobTemplate                    func(childComplexity int, id string) int
		DeleteMappableDomain                 func(childComplexity int, id string) int
		DeleteMappedControl                  func(childComplexity int, id string) int
		DeleteNarrative                      func(childComplexity int, id string) int
		DeleteOrgMembership                  func(childComplexity int, id string) int
		DeleteOrganization                   func(childComplexity int, id string) int
		DeleteOrganizationSetting            func(childComplexity int, id string) int
		DeletePersonalAccessToken            func(childComplexity int, id string) int
		DeleteProcedure                      func(childComplexity int, id string) int
		DeleteProgram                        func(childComplexity int, id string) int
		DeleteProgramMembership              func(childComplexity int, id string) int
		DeleteRisk                           func(childComplexity int, id string) int
		DeleteScan                           func(childComplexity int, id string) int
		DeleteScheduledJob                   func(childComplexity int, id string) int
		DeleteScheduledJobRun                func(childComplexity int, id string) int
		DeleteStandard                       func(childComplexity int, id string) int
		DeleteSubcontrol                     func(childComplexity int, id string) int
		DeleteSubprocessor                   func(childComplexity int, id string) int
		DeleteSubscriber                     func(childComplexity int, email string, ownerID *string) int
		DeleteTask                           func(childComplexity int, id string) int
		DeleteTemplate                       func(childComplexity int, id string) int
		DeleteTrustCenter                    func(childComplexity int, id string) int
		DeleteTrustCenterCompliance          func(childComplexity int, id string) int
		DeleteTrustCenterDoc                 func(childComplexity int, id string) int
		DeleteTrustCenterSetting             func(childComplexity int, id string) int
		DeleteTrustCenterSubprocessor        func(childComplexity int, id string) int
		DeleteUser                           func(childComplexity int, id string) int
		DeleteWebauthn                       func(childComplexity int, id string) int
		UpdateAPIToken                       func(childComplexity int, id string, input generated.UpdateAPITokenInput) int
		UpdateActionPlan                     func(childComplexity int, id string, input generated.UpdateActionPlanInput) int
		UpdateAsset                          func(childComplexity int, id string, input generated.UpdateAssetInput) int
		UpdateBulkActionPlan                 func(childComplexity int, ids []string, input generated.UpdateActionPlanInput) int
		UpdateBulkContact                    func(childComplexity int, ids []string, input generated.UpdateContactInput) int
		UpdateBulkControl                    func(childComplexity int, ids []string, input generated.UpdateControlInput) int
		UpdateBulkHush                       func(childComplexity int, ids []string, input generated.UpdateHushInput) int
		UpdateBulkInternalPolicy             func(childComplexity int, ids []string, input generated.UpdateInternalPolicyInput) int
		UpdateBulkProcedure                  func(childComplexity int, ids []string, input generated.UpdateProcedureInput) int
		UpdateBulkRisk                       func(childComplexity int, ids []string, input generated.UpdateRiskInput) int
		UpdateBulkScan                       func(childComplexity int, ids []string, input generated.UpdateScanInput) int
		UpdateBulkTask                       func(childComplexity int, ids []string, input generated.UpdateTaskInput) int
		UpdateContact                        func(childComplexity int, id string, input generated.UpdateContactInput) int
		UpdateControl                        func(childComplexity int, id string, input generated.UpdateControlInput) int
		UpdateControlImplementation          func(childComplexity int, id string, input generated.UpdateControlImplementationInput) int
		UpdateControlObjective               func(childComplexity int, id string, input generated.UpdateControlObjectiveInput) int
		UpdateCustomDomain                   func(childComplexity int, id string, input generated.UpdateCustomDomainInput) int
		UpdateDNSVerification                func(childComplexity int, id string, input generated.UpdateDNSVerificationInput) int
		UpdateDocumentData                   func(childComplexity int, id string, input generated.UpdateDocumentDataInput) int
		UpdateEntity                         func(childComplexity int, id string, input generated.UpdateEntityInput) int
		UpdateEntityType                     func(childComplexity int, id string, input generated.UpdateEntityTypeInput) int
		UpdateEvent                          func(childComplexity int, id string, input generated.UpdateEventInput) int
		UpdateEvidence                       func(childComplexity int, id string, input generated.UpdateEvidenceInput, evidenceFiles []*graphql.Upload) int
		UpdateExport                         func(childComplexity int, id string, input generated.UpdateExportInput, exportFiles []*graphql.Upload) int
		UpdateGroup                          func(childComplexity int, id string, input generated.UpdateGroupInput) int
		UpdateGroupMembership                func(childComplexity int, id string, input generated.UpdateGroupMembershipInput) int
		UpdateGroupSetting                   func(childComplexity int, id string, input generated.UpdateGroupSettingInput) int
		UpdateHush                           func(childComplexity int, id string, input generated.UpdateHushInput) int
		UpdateInternalPolicy                 func(childComplexity int, id string, input generated.UpdateInternalPolicyInput) int
		UpdateInvite                         func(childComplexity int, id string, input generated.UpdateInviteInput) int
		UpdateJobResult                      func(childComplexity int, id string, input generated.UpdateJobResultInput, jobResultFiles []*graphql.Upload) int
		UpdateJobRunner                      func(childComplexity int, id string, input generated.UpdateJobRunnerInput) int
		UpdateJobTemplate                    func(childComplexity int, id string, input generated.UpdateJobTemplateInput) int
		UpdateMappableDomain                 func(childComplexity int, id string, input generated.UpdateMappableDomainInput) int
		UpdateMappedControl                  func(childComplexity int, id string, input generated.UpdateMappedControlInput) int
		UpdateNarrative                      func(childComplexity int, id string, input generated.UpdateNarrativeInput) int
		UpdateOrgMembership                  func(childComplexity int, id string, input generated.UpdateOrgMembershipInput) int
		UpdateOrganization                   func(childComplexity int, id string, input generated.UpdateOrganizationInput, avatarFile *graphql.Upload) int
		UpdateOrganizationSetting            func(childComplexity int, id string, input generated.UpdateOrganizationSettingInput) int
		UpdatePersonalAccessToken            func(childComplexity int, id string, input generated.UpdatePersonalAccessTokenInput) int
		UpdateProcedure                      func(childComplexity int, id string, input generated.UpdateProcedureInput) int
		UpdateProgram                        func(childComplexity int, id string, input generated.UpdateProgramInput) int
		UpdateProgramMembership              func(childComplexity int, id string, input generated.UpdateProgramMembershipInput) int
		UpdateRisk                           func(childComplexity int, id string, input generated.UpdateRiskInput) int
		UpdateScan                           func(childComplexity int, id string, input generated.UpdateScanInput) int
		UpdateScheduledJob                   func(childComplexity int, id string, input generated.UpdateScheduledJobInput) int
		UpdateScheduledJobRun                func(childComplexity int, id string, input generated.UpdateScheduledJobRunInput) int
		UpdateStandard                       func(childComplexity int, id string, input generated.UpdateStandardInput) int
		UpdateSubcontrol                     func(childComplexity int, id string, input generated.UpdateSubcontrolInput) int
		UpdateSubprocessor                   func(childComplexity int, id string, input generated.UpdateSubprocessorInput, logoFile *graphql.Upload) int
		UpdateSubscriber                     func(childComplexity int, email string, input generated.UpdateSubscriberInput) int
		UpdateTFASetting                     func(childComplexity int, input generated.UpdateTFASettingInput) int
		UpdateTask                           func(childComplexity int, id string, input generated.UpdateTaskInput) int
		UpdateTaskComment                    func(childComplexity int, id string, input generated.UpdateNoteInput, noteFiles []*graphql.Upload) int
		UpdateTemplate                       func(childComplexity int, id string, input generated.UpdateTemplateInput) int
		UpdateTrustCenter                    func(childComplexity int, id string, input generated.UpdateTrustCenterInput) int
		UpdateTrustCenterCompliance          func(childComplexity int, id string, input generated.UpdateTrustCenterComplianceInput) int
		UpdateTrustCenterDoc                 func(childComplexity int, id string, input generated.UpdateTrustCenterDocInput) int
		UpdateTrustCenterSetting             func(childComplexity int, id string, input generated.UpdateTrustCenterSettingInput, logoFile *graphql.Upload, faviconFile *graphql.Upload) int
		UpdateTrustCenterSubprocessor        func(childComplexity int, id string, input generated.UpdateTrustCenterSubprocessorInput) int
		UpdateUser                           func(childComplexity int, id string, input generated.UpdateUserInput, avatarFile *graphql.Upload) int
		UpdateUserSetting                    func(childComplexity int, id string, input generated.UpdateUserSettingInput) int
	}

	Narrative struct {
		BlockedGroups    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		Description      func(childComplexity int) int
		Details          func(childComplexity int) int
		DisplayID        func(childComplexity int) int
		Editors          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID               func(childComplexity int) int
		InternalPolicies func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		Name             func(childComplexity int) int
		Owner            func(childComplexity int) int
		OwnerID          func(childComplexity int) int
		Procedures       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		Programs         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		Satisfies        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		Tags             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Viewers          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
	}

	NarrativeBulkCreatePayload struct {
		Narratives func(childComplexity int) int
	}

	NarrativeConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NarrativeCreatePayload struct {
		Narrative func(childComplexity int) int
	}

	NarrativeDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	NarrativeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	NarrativeHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		Details     func(childComplexity int) int
		DisplayID   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	NarrativeHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NarrativeHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	NarrativeUpdatePayload struct {
		Narrative func(childComplexity int) int
	}

	Note struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		DisplayID func(childComplexity int) int
		Files     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID        func(childComplexity int) int
		Owner     func(childComplexity int) int
		OwnerID   func(childComplexity int) int
		Task      func(childComplexity int) int
		Text      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	NoteConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NoteEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	NoteHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DisplayID   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Text        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	NoteHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NoteHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Onboarding struct {
		CompanyDetails func(childComplexity int) int
		CompanyName    func(childComplexity int) int
		Compliance     func(childComplexity int) int
		Domains        func(childComplexity int) int
		ID             func(childComplexity int) int
		Organization   func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		UserDetails    func(childComplexity int) int
	}

	OnboardingCreatePayload struct {
		Onboarding func(childComplexity int) int
	}

	OrgMembership struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		Events         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		ID             func(childComplexity int) int
		Organization   func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		Role           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
		User           func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	OrgMembershipBulkCreatePayload struct {
		OrgMemberships func(childComplexity int) int
	}

	OrgMembershipConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgMembershipCreatePayload struct {
		OrgMembership func(childComplexity int) int
	}

	OrgMembershipDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	OrgMembershipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgMembershipHistory struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		HistoryTime    func(childComplexity int) int
		ID             func(childComplexity int) int
		Operation      func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		Ref            func(childComplexity int) int
		Role           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	OrgMembershipHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgMembershipHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgMembershipUpdatePayload struct {
		OrgMembership func(childComplexity int) int
	}

	OrgSubscription struct {
		Active                   func(childComplexity int) int
		Cancellation             func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DaysUntilDue             func(childComplexity int) int
		Events                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		ExpiresAt                func(childComplexity int) int
		FeatureLookupKeys        func(childComplexity int) int
		Features                 func(childComplexity int) int
		ID                       func(childComplexity int) int
		ManagePaymentMethods     func(childComplexity int) int
		Owner                    func(childComplexity int) int
		OwnerID                  func(childComplexity int) int
		ProductPrice             func(childComplexity int) int
		StripeSubscriptionID     func(childComplexity int) int
		StripeSubscriptionStatus func(childComplexity int) int
		Tags                     func(childComplexity int) int
		TrialExpiresAt           func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
	}

	OrgSubscriptionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgSubscriptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgSubscriptionHistory struct {
		Active                   func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DaysUntilDue             func(childComplexity int) int
		ExpiresAt                func(childComplexity int) int
		FeatureLookupKeys        func(childComplexity int) int
		Features                 func(childComplexity int) int
		HistoryTime              func(childComplexity int) int
		ID                       func(childComplexity int) int
		Operation                func(childComplexity int) int
		OwnerID                  func(childComplexity int) int
		ProductPrice             func(childComplexity int) int
		Ref                      func(childComplexity int) int
		StripeSubscriptionID     func(childComplexity int) int
		StripeSubscriptionStatus func(childComplexity int) int
		Tags                     func(childComplexity int) int
		TrialExpiresAt           func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
	}

	OrgSubscriptionHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgSubscriptionHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Organization struct {
		APITokens                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.APITokenOrder, where *generated.APITokenWhereInput) int
		ActionPlans                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) int
		Assets                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.AssetOrder, where *generated.AssetWhereInput) int
		AvatarFile                    func(childComplexity int) int
		AvatarLocalFileID             func(childComplexity int) int
		AvatarRemoteURL               func(childComplexity int) int
		AvatarUpdatedAt               func(childComplexity int) int
		Children                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationOrder, where *generated.OrganizationWhereInput) int
		Contacts                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ContactOrder, where *generated.ContactWhereInput) int
		ControlCreators               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ControlImplementationCreators func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ControlImplementations        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjectiveCreators      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ControlObjectives             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		Controls                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		CustomDomains                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.CustomDomainOrder, where *generated.CustomDomainWhereInput) int
		DNSVerifications              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.DNSVerificationOrder, where *generated.DNSVerificationWhereInput) int
		DedicatedDb                   func(childComplexity int) int
		Description                   func(childComplexity int) int
		DisplayName                   func(childComplexity int) int
		Documents                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.DocumentDataOrder, where *generated.DocumentDataWhereInput) int
		Entities                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		EntityTypes                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityTypeOrder, where *generated.EntityTypeWhereInput) int
		Events                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Evidence                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) int
		EvidenceCreators              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Exports                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ExportOrder, where *generated.ExportWhereInput) int
		Files                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		GroupCreators                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Groups                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID                            func(childComplexity int) int
		Integrations                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.IntegrationOrder, where *generated.IntegrationWhereInput) int
		InternalPolicies              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		InternalPolicyCreators        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Invites                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InviteOrder, where *generated.InviteWhereInput) int
		JobResults                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobResultOrder, where *generated.JobResultWhereInput) int
		JobRunnerRegistrationTokens   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerRegistrationTokenOrder, where *generated.JobRunnerRegistrationTokenWhereInput) int
		JobRunnerTokens               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerTokenOrder, where *generated.JobRunnerTokenWhereInput) int
		JobRunners                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerOrder, where *generated.JobRunnerWhereInput) int
		JobTemplates                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobTemplateOrder, where *generated.JobTemplateWhereInput) int
		MappedControlCreators         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		MappedControls                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.MappedControlOrder, where *generated.MappedControlWhereInput) int
		Members                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrgMembershipOrder, where *generated.OrgMembershipWhereInput) int
		Name                          func(childComplexity int) int
		NarrativeCreators             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Narratives                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Notes                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NoteOrder, where *generated.NoteWhereInput) int
		OrgSubscriptions              func(childComplexity int) int
		Parent                        func(childComplexity int) int
		PersonalAccessTokens          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.PersonalAccessTokenOrder, where *generated.PersonalAccessTokenWhereInput) int
		PersonalOrg                   func(childComplexity int) int
		ProcedureCreators             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Procedures                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		ProgramCreators               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Programs                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		RiskCreators                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Risks                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Scans                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		ScheduledJobCreators          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ScheduledJobRuns              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScheduledJobRunOrder, where *generated.ScheduledJobRunWhereInput) int
		ScheduledJobs                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScheduledJobOrder, where *generated.ScheduledJobWhereInput) int
		Secrets                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.HushOrder, where *generated.HushWhereInput) int
		Setting                       func(childComplexity int) int
		StandardCreators              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Standards                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.StandardOrder, where *generated.StandardWhereInput) int
		StripeCustomerID              func(childComplexity int) int
		Subcontrols                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Subprocessors                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubprocessorOrder, where *generated.SubprocessorWhereInput) int
		Subscribers                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubscriberOrder, where *generated.SubscriberWhereInput) int
		Tags                          func(childComplexity int) int
		Tasks                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		TemplateCreators              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Templates                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TemplateOrder, where *generated.TemplateWhereInput) int
		TrustCenters                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterOrder, where *generated.TrustCenterWhereInput) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		Users                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserOrder, where *generated.UserWhereInput) int
	}

	OrganizationBulkCreatePayload struct {
		Organizations func(childComplexity int) int
	}

	OrganizationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationCreatePayload struct {
		Organization func(childComplexity int) int
	}

	OrganizationDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	OrganizationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationHistory struct {
		AvatarLocalFileID func(childComplexity int) int
		AvatarRemoteURL   func(childComplexity int) int
		AvatarUpdatedAt   func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DedicatedDb       func(childComplexity int) int
		Description       func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		HistoryTime       func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		Operation         func(childComplexity int) int
		PersonalOrg       func(childComplexity int) int
		Ref               func(childComplexity int) int
		StripeCustomerID  func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	OrganizationHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationSetting struct {
		AllowedEmailDomains              func(childComplexity int) int
		BillingAddress                   func(childComplexity int) int
		BillingContact                   func(childComplexity int) int
		BillingEmail                     func(childComplexity int) int
		BillingNotificationsEnabled      func(childComplexity int) int
		BillingPhone                     func(childComplexity int) int
		ComplianceWebhookToken           func(childComplexity int) int
		CreatedAt                        func(childComplexity int) int
		CreatedBy                        func(childComplexity int) int
		Domains                          func(childComplexity int) int
		Files                            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		GeoLocation                      func(childComplexity int) int
		ID                               func(childComplexity int) int
		IdentityProvider                 func(childComplexity int) int
		IdentityProviderAuthTested       func(childComplexity int) int
		IdentityProviderClientID         func(childComplexity int) int
		IdentityProviderClientSecret     func(childComplexity int) int
		IdentityProviderEntityID         func(childComplexity int) int
		IdentityProviderLoginEnforced    func(childComplexity int) int
		IdentityProviderMetadataEndpoint func(childComplexity int) int
		OidcDiscoveryEndpoint            func(childComplexity int) int
		Organization                     func(childComplexity int) int
		OrganizationID                   func(childComplexity int) int
		PaymentMethodAdded               func(childComplexity int) int
		Tags                             func(childComplexity int) int
		TaxIdentifier                    func(childComplexity int) int
		UpdatedAt                        func(childComplexity int) int
		UpdatedBy                        func(childComplexity int) int
	}

	OrganizationSettingBulkCreatePayload struct {
		OrganizationSettings func(childComplexity int) int
	}

	OrganizationSettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationSettingCreatePayload struct {
		OrganizationSetting func(childComplexity int) int
	}

	OrganizationSettingDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	OrganizationSettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationSettingHistory struct {
		AllowedEmailDomains              func(childComplexity int) int
		BillingAddress                   func(childComplexity int) int
		BillingContact                   func(childComplexity int) int
		BillingEmail                     func(childComplexity int) int
		BillingNotificationsEnabled      func(childComplexity int) int
		BillingPhone                     func(childComplexity int) int
		ComplianceWebhookToken           func(childComplexity int) int
		CreatedAt                        func(childComplexity int) int
		CreatedBy                        func(childComplexity int) int
		Domains                          func(childComplexity int) int
		GeoLocation                      func(childComplexity int) int
		HistoryTime                      func(childComplexity int) int
		ID                               func(childComplexity int) int
		IdentityProvider                 func(childComplexity int) int
		IdentityProviderAuthTested       func(childComplexity int) int
		IdentityProviderClientID         func(childComplexity int) int
		IdentityProviderClientSecret     func(childComplexity int) int
		IdentityProviderEntityID         func(childComplexity int) int
		IdentityProviderLoginEnforced    func(childComplexity int) int
		IdentityProviderMetadataEndpoint func(childComplexity int) int
		OidcDiscoveryEndpoint            func(childComplexity int) int
		Operation                        func(childComplexity int) int
		OrganizationID                   func(childComplexity int) int
		PaymentMethodAdded               func(childComplexity int) int
		Ref                              func(childComplexity int) int
		Tags                             func(childComplexity int) int
		TaxIdentifier                    func(childComplexity int) int
		UpdatedAt                        func(childComplexity int) int
		UpdatedBy                        func(childComplexity int) int
	}

	OrganizationSettingHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationSettingHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationSettingUpdatePayload struct {
		OrganizationSetting func(childComplexity int) int
	}

	OrganizationUpdatePayload struct {
		Organization func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	PersonalAccessToken struct {
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		Events            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		ExpiresAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		IsActive          func(childComplexity int) int
		LastUsedAt        func(childComplexity int) int
		Name              func(childComplexity int) int
		Organizations     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationOrder, where *generated.OrganizationWhereInput) int
		Owner             func(childComplexity int) int
		RevokedAt         func(childComplexity int) int
		RevokedBy         func(childComplexity int) int
		RevokedReason     func(childComplexity int) int
		SSOAuthorizations func(childComplexity int) int
		Scopes            func(childComplexity int) int
		Tags              func(childComplexity int) int
		Token             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	PersonalAccessTokenBulkCreatePayload struct {
		PersonalAccessTokens func(childComplexity int) int
	}

	PersonalAccessTokenConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PersonalAccessTokenCreatePayload struct {
		PersonalAccessToken func(childComplexity int) int
	}

	PersonalAccessTokenDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	PersonalAccessTokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PersonalAccessTokenUpdatePayload struct {
		PersonalAccessToken func(childComplexity int) int
	}

	Procedure struct {
		ApprovalRequired                func(childComplexity int) int
		Approver                        func(childComplexity int) int
		ApproverID                      func(childComplexity int) int
		BlockedGroups                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ControlSuggestions              func(childComplexity int) int
		Controls                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt                       func(childComplexity int) int
		CreatedBy                       func(childComplexity int) int
		Delegate                        func(childComplexity int) int
		DelegateID                      func(childComplexity int) int
		Details                         func(childComplexity int) int
		DismissedControlSuggestions     func(childComplexity int) int
		DismissedImprovementSuggestions func(childComplexity int) int
		DismissedTagSuggestions         func(childComplexity int) int
		DisplayID                       func(childComplexity int) int
		Editors                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		File                            func(childComplexity int) int
		FileID                          func(childComplexity int) int
		ID                              func(childComplexity int) int
		ImprovementSuggestions          func(childComplexity int) int
		InternalPolicies                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		Name                            func(childComplexity int) int
		Narratives                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Owner                           func(childComplexity int) int
		OwnerID                         func(childComplexity int) int
		ProcedureType                   func(childComplexity int) int
		Programs                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		ReviewDue                       func(childComplexity int) int
		ReviewFrequency                 func(childComplexity int) int
		Revision                        func(childComplexity int) int
		Risks                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Status                          func(childComplexity int) int
		Subcontrols                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Summary                         func(childComplexity int) int
		TagSuggestions                  func(childComplexity int) int
		Tags                            func(childComplexity int) int
		Tasks                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		URL                             func(childComplexity int) int
		UpdatedAt                       func(childComplexity int) int
		UpdatedBy                       func(childComplexity int) int
	}

	ProcedureBulkCreatePayload struct {
		Procedures func(childComplexity int) int
	}

	ProcedureBulkUpdatePayload struct {
		Procedures func(childComplexity int) int
		UpdatedIDs func(childComplexity int) int
	}

	ProcedureConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProcedureCreatePayload struct {
		Procedure func(childComplexity int) int
	}

	ProcedureDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ProcedureEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProcedureHistory struct {
		ApprovalRequired                func(childComplexity int) int
		ApproverID                      func(childComplexity int) int
		ControlSuggestions              func(childComplexity int) int
		CreatedAt                       func(childComplexity int) int
		CreatedBy                       func(childComplexity int) int
		DelegateID                      func(childComplexity int) int
		Details                         func(childComplexity int) int
		DismissedControlSuggestions     func(childComplexity int) int
		DismissedImprovementSuggestions func(childComplexity int) int
		DismissedTagSuggestions         func(childComplexity int) int
		DisplayID                       func(childComplexity int) int
		FileID                          func(childComplexity int) int
		HistoryTime                     func(childComplexity int) int
		ID                              func(childComplexity int) int
		ImprovementSuggestions          func(childComplexity int) int
		Name                            func(childComplexity int) int
		Operation                       func(childComplexity int) int
		OwnerID                         func(childComplexity int) int
		ProcedureType                   func(childComplexity int) int
		Ref                             func(childComplexity int) int
		ReviewDue                       func(childComplexity int) int
		ReviewFrequency                 func(childComplexity int) int
		Revision                        func(childComplexity int) int
		Status                          func(childComplexity int) int
		Summary                         func(childComplexity int) int
		TagSuggestions                  func(childComplexity int) int
		Tags                            func(childComplexity int) int
		URL                             func(childComplexity int) int
		UpdatedAt                       func(childComplexity int) int
		UpdatedBy                       func(childComplexity int) int
	}

	ProcedureHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProcedureHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProcedureUpdatePayload struct {
		Procedure func(childComplexity int) int
	}

	Program struct {
		ActionPlans          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) int
		AuditFirm            func(childComplexity int) int
		Auditor              func(childComplexity int) int
		AuditorEmail         func(childComplexity int) int
		AuditorReadComments  func(childComplexity int) int
		AuditorReady         func(childComplexity int) int
		AuditorWriteComments func(childComplexity int) int
		BlockedGroups        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ControlObjectives    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		Controls             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Description          func(childComplexity int) int
		DisplayID            func(childComplexity int) int
		Editors              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		EndDate              func(childComplexity int) int
		Evidence             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) int
		Files                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		FrameworkName        func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalPolicies     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		Members              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramMembershipOrder, where *generated.ProgramMembershipWhereInput) int
		Name                 func(childComplexity int) int
		Narratives           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Notes                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NoteOrder, where *generated.NoteWhereInput) int
		Owner                func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Procedures           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		ProgramType          func(childComplexity int) int
		Risks                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		StartDate            func(childComplexity int) int
		Status               func(childComplexity int) int
		Subcontrols          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags                 func(childComplexity int) int
		Tasks                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Users                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserOrder, where *generated.UserWhereInput) int
		Viewers              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
	}

	ProgramBulkCreatePayload struct {
		Programs func(childComplexity int) int
	}

	ProgramConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramCreatePayload struct {
		Program func(childComplexity int) int
	}

	ProgramDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ProgramEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramHistory struct {
		AuditFirm            func(childComplexity int) int
		Auditor              func(childComplexity int) int
		AuditorEmail         func(childComplexity int) int
		AuditorReadComments  func(childComplexity int) int
		AuditorReady         func(childComplexity int) int
		AuditorWriteComments func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Description          func(childComplexity int) int
		DisplayID            func(childComplexity int) int
		EndDate              func(childComplexity int) int
		FrameworkName        func(childComplexity int) int
		HistoryTime          func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Operation            func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		ProgramType          func(childComplexity int) int
		Ref                  func(childComplexity int) int
		StartDate            func(childComplexity int) int
		Status               func(childComplexity int) int
		Tags                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	ProgramHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramMembership struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Program   func(childComplexity int) int
		ProgramID func(childComplexity int) int
		Role      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	ProgramMembershipBulkCreatePayload struct {
		ProgramMemberships func(childComplexity int) int
	}

	ProgramMembershipConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramMembershipCreatePayload struct {
		ProgramMembership func(childComplexity int) int
	}

	ProgramMembershipDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ProgramMembershipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramMembershipHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		ProgramID   func(childComplexity int) int
		Ref         func(childComplexity int) int
		Role        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	ProgramMembershipHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramMembershipHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramMembershipUpdatePayload struct {
		ProgramMembership func(childComplexity int) int
	}

	ProgramUpdatePayload struct {
		Program func(childComplexity int) int
	}

	Query struct {
		APIToken                              func(childComplexity int, id string) int
		APITokenSearch                        func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		APITokens                             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.APITokenOrder, where *generated.APITokenWhereInput) int
		ActionPlan                            func(childComplexity int, id string) int
		ActionPlanHistories                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ActionPlanHistoryOrder, where *generated.ActionPlanHistoryWhereInput) int
		ActionPlanSearch                      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		ActionPlans                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) int
		AdminAPITokenSearch                   func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminActionPlanSearch                 func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminAssetSearch                      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminContactSearch                    func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminControlImplementationSearch      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminControlObjectiveSearch           func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminControlSearch                    func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminCustomDomainSearch               func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminDNSVerificationSearch            func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminDocumentDataSearch               func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminEntitySearch                     func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminEntityTypeSearch                 func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminEventSearch                      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminEvidenceSearch                   func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminFileSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminGroupSearch                      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminIntegrationSearch                func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminInternalPolicySearch             func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminInviteSearch                     func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminJobRunnerRegistrationTokenSearch func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminJobRunnerSearch                  func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminJobRunnerTokenSearch             func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminJobTemplateSearch                func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminMappableDomainSearch             func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminMappedControlSearch              func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminNarrativeSearch                  func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminOrgSubscriptionSearch            func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminOrganizationSearch               func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminOrganizationSettingSearch        func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminPersonalAccessTokenSearch        func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminProcedureSearch                  func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminProgramSearch                    func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminRiskSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminScanSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminSearch                           func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminStandardSearch                   func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminSubcontrolSearch                 func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminSubprocessorSearch               func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminSubscriberSearch                 func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminTaskSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminTemplateSearch                   func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminTrustCenterComplianceSearch      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminTrustCenterDocSearch             func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminTrustCenterSearch                func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminUserSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminUserSettingSearch                func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		AdminWebauthnSearch                   func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Asset                                 func(childComplexity int, id string) int
		AssetHistories                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.AssetHistoryOrder, where *generated.AssetHistoryWhereInput) int
		AssetSearch                           func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Assets                                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.AssetOrder, where *generated.AssetWhereInput) int
		AuditLogs                             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.AuditLogWhereInput, orderBy *generated.AuditLogOrder) int
		Contact                               func(childComplexity int, id string) int
		ContactHistories                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ContactHistoryOrder, where *generated.ContactHistoryWhereInput) int
		ContactSearch                         func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Contacts                              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ContactOrder, where *generated.ContactWhereInput) int
		Control                               func(childComplexity int, id string) int
		ControlCategories                     func(childComplexity int) int
		ControlCategoriesByFramework          func(childComplexity int, orderBy []*model.ControlCategoryOrder, where *generated.ControlWhereInput) int
		ControlHistories                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ControlHistoryOrder, where *generated.ControlHistoryWhereInput) int
		ControlImplementation                 func(childComplexity int, id string) int
		ControlImplementationHistories        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ControlImplementationHistoryOrder, where *generated.ControlImplementationHistoryWhereInput) int
		ControlImplementationSearch           func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		ControlImplementations                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjective                      func(childComplexity int, id string) int
		ControlObjectiveHistories             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ControlObjectiveHistoryOrder, where *generated.ControlObjectiveHistoryWhereInput) int
		ControlObjectiveSearch                func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		ControlObjectives                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		ControlSearch                         func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		ControlSubcategories                  func(childComplexity int) int
		ControlSubcategoriesByFramework       func(childComplexity int, orderBy []*model.ControlCategoryOrder, where *generated.ControlWhereInput) int
		Controls                              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		ControlsGroupByCategory               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput, category *string) int
		CustomDomain                          func(childComplexity int, id string) int
		CustomDomainHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.CustomDomainHistoryOrder, where *generated.CustomDomainHistoryWhereInput) int
		CustomDomainSearch                    func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		CustomDomains                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.CustomDomainOrder, where *generated.CustomDomainWhereInput) int
		DNSVerification                       func(childComplexity int, id string) int
		DNSVerificationHistories              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.DNSVerificationHistoryOrder, where *generated.DNSVerificationHistoryWhereInput) int
		DNSVerificationSearch                 func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		DNSVerifications                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.DNSVerificationOrder, where *generated.DNSVerificationWhereInput) int
		DocumentData                          func(childComplexity int, id string) int
		DocumentDataHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.DocumentDataHistoryOrder, where *generated.DocumentDataHistoryWhereInput) int
		DocumentDataSearch                    func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		DocumentDataSlice                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.DocumentDataOrder, where *generated.DocumentDataWhereInput) int
		Entities                              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		Entity                                func(childComplexity int, id string) int
		EntityHistories                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityHistoryOrder, where *generated.EntityHistoryWhereInput) int
		EntitySearch                          func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		EntityType                            func(childComplexity int, id string) int
		EntityTypeHistories                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityTypeHistoryOrder, where *generated.EntityTypeHistoryWhereInput) int
		EntityTypeSearch                      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		EntityTypes                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityTypeOrder, where *generated.EntityTypeWhereInput) int
		Event                                 func(childComplexity int, id string) int
		EventSearch                           func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Events                                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Evidence                              func(childComplexity int, id string) int
		EvidenceHistories                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EvidenceHistoryOrder, where *generated.EvidenceHistoryWhereInput) int
		EvidenceSearch                        func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Evidences                             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) int
		Export                                func(childComplexity int, id string) int
		Exports                               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ExportOrder, where *generated.ExportWhereInput) int
		File                                  func(childComplexity int, id string) int
		FileHistories                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.FileHistoryOrder, where *generated.FileHistoryWhereInput) int
		FileSearch                            func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Files                                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		Group                                 func(childComplexity int, id string) int
		GroupHistories                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupHistoryOrder, where *generated.GroupHistoryWhereInput) int
		GroupMembership                       func(childComplexity int, id string) int
		GroupMembershipHistories              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupMembershipHistoryOrder, where *generated.GroupMembershipHistoryWhereInput) int
		GroupMemberships                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupMembershipOrder, where *generated.GroupMembershipWhereInput) int
		GroupSearch                           func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		GroupSetting                          func(childComplexity int, id string) int
		GroupSettingHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupSettingHistoryOrder, where *generated.GroupSettingHistoryWhereInput) int
		GroupSettings                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupSettingOrder, where *generated.GroupSettingWhereInput) int
		Groups                                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Hush                                  func(childComplexity int, id string) int
		HushHistories                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.HushHistoryOrder, where *generated.HushHistoryWhereInput) int
		Hushes                                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.HushOrder, where *generated.HushWhereInput) int
		Integration                           func(childComplexity int, id string) int
		IntegrationHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.IntegrationHistoryOrder, where *generated.IntegrationHistoryWhereInput) int
		IntegrationSearch                     func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Integrations                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.IntegrationOrder, where *generated.IntegrationWhereInput) int
		InternalPolicies                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		InternalPolicy                        func(childComplexity int, id string) int
		InternalPolicyHistories               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.InternalPolicyHistoryOrder, where *generated.InternalPolicyHistoryWhereInput) int
		InternalPolicySearch                  func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Invite                                func(childComplexity int, id string) int
		InviteSearch                          func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Invites                               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InviteOrder, where *generated.InviteWhereInput) int
		JobResult                             func(childComplexity int, id string) int
		JobResults                            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobResultOrder, where *generated.JobResultWhereInput) int
		JobRunner                             func(childComplexity int, id string) int
		JobRunnerRegistrationToken            func(childComplexity int, id string) int
		JobRunnerRegistrationTokenSearch      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		JobRunnerRegistrationTokens           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerRegistrationTokenOrder, where *generated.JobRunnerRegistrationTokenWhereInput) int
		JobRunnerSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		JobRunnerToken                        func(childComplexity int, id string) int
		JobRunnerTokenSearch                  func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		JobRunnerTokens                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerTokenOrder, where *generated.JobRunnerTokenWhereInput) int
		JobRunners                            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobRunnerOrder, where *generated.JobRunnerWhereInput) int
		JobTemplate                           func(childComplexity int, id string) int
		JobTemplateHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.JobTemplateHistoryOrder, where *generated.JobTemplateHistoryWhereInput) int
		JobTemplateSearch                     func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		JobTemplates                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.JobTemplateOrder, where *generated.JobTemplateWhereInput) int
		MappableDomain                        func(childComplexity int, id string) int
		MappableDomainHistories               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.MappableDomainHistoryOrder, where *generated.MappableDomainHistoryWhereInput) int
		MappableDomainSearch                  func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		MappableDomains                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.MappableDomainOrder, where *generated.MappableDomainWhereInput) int
		MappedControl                         func(childComplexity int, id string) int
		MappedControlHistories                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.MappedControlHistoryOrder, where *generated.MappedControlHistoryWhereInput) int
		MappedControlSearch                   func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		MappedControls                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.MappedControlOrder, where *generated.MappedControlWhereInput) int
		Narrative                             func(childComplexity int, id string) int
		NarrativeHistories                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.NarrativeHistoryOrder, where *generated.NarrativeHistoryWhereInput) int
		NarrativeSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Narratives                            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Node                                  func(childComplexity int, id string) int
		Nodes                                 func(childComplexity int, ids []string) int
		Note                                  func(childComplexity int, id string) int
		NoteHistories                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.NoteHistoryOrder, where *generated.NoteHistoryWhereInput) int
		Notes                                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NoteOrder, where *generated.NoteWhereInput) int
		OrgMembership                         func(childComplexity int, id string) int
		OrgMembershipHistories                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrgMembershipHistoryOrder, where *generated.OrgMembershipHistoryWhereInput) int
		OrgMemberships                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrgMembershipOrder, where *generated.OrgMembershipWhereInput) int
		OrgSubscription                       func(childComplexity int, id string) int
		OrgSubscriptionHistories              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrgSubscriptionHistoryOrder, where *generated.OrgSubscriptionHistoryWhereInput) int
		OrgSubscriptionSearch                 func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		OrgSubscriptions                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrgSubscriptionOrder, where *generated.OrgSubscriptionWhereInput) int
		Organization                          func(childComplexity int, id string) int
		OrganizationHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationHistoryOrder, where *generated.OrganizationHistoryWhereInput) int
		OrganizationSearch                    func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		OrganizationSetting                   func(childComplexity int, id string) int
		OrganizationSettingHistories          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationSettingHistoryOrder, where *generated.OrganizationSettingHistoryWhereInput) int
		OrganizationSettingSearch             func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		OrganizationSettings                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationSettingOrder, where *generated.OrganizationSettingWhereInput) int
		Organizations                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationOrder, where *generated.OrganizationWhereInput) int
		PersonalAccessToken                   func(childComplexity int, id string) int
		PersonalAccessTokenSearch             func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		PersonalAccessTokens                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.PersonalAccessTokenOrder, where *generated.PersonalAccessTokenWhereInput) int
		Procedure                             func(childComplexity int, id string) int
		ProcedureHistories                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ProcedureHistoryOrder, where *generated.ProcedureHistoryWhereInput) int
		ProcedureSearch                       func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Procedures                            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		Program                               func(childComplexity int, id string) int
		ProgramHistories                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ProgramHistoryOrder, where *generated.ProgramHistoryWhereInput) int
		ProgramMembership                     func(childComplexity int, id string) int
		ProgramMembershipHistories            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ProgramMembershipHistoryOrder, where *generated.ProgramMembershipHistoryWhereInput) int
		ProgramMemberships                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramMembershipOrder, where *generated.ProgramMembershipWhereInput) int
		ProgramSearch                         func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Programs                              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		Risk                                  func(childComplexity int, id string) int
		RiskHistories                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.RiskHistoryOrder, where *generated.RiskHistoryWhereInput) int
		RiskSearch                            func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Risks                                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Scan                                  func(childComplexity int, id string) int
		ScanHistories                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ScanHistoryOrder, where *generated.ScanHistoryWhereInput) int
		ScanSearch                            func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Scans                                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		ScheduledJob                          func(childComplexity int, id string) int
		ScheduledJobHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ScheduledJobHistoryOrder, where *generated.ScheduledJobHistoryWhereInput) int
		ScheduledJobRun                       func(childComplexity int, id string) int
		ScheduledJobRuns                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScheduledJobRunOrder, where *generated.ScheduledJobRunWhereInput) int
		ScheduledJobs                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScheduledJobOrder, where *generated.ScheduledJobWhereInput) int
		Search                                func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Self                                  func(childComplexity int) int
		Standard                              func(childComplexity int, id string) int
		StandardHistories                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.StandardHistoryOrder, where *generated.StandardHistoryWhereInput) int
		StandardSearch                        func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Standards                             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.StandardOrder, where *generated.StandardWhereInput) int
		Subcontrol                            func(childComplexity int, id string) int
		SubcontrolHistories                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.SubcontrolHistoryOrder, where *generated.SubcontrolHistoryWhereInput) int
		SubcontrolSearch                      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Subcontrols                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Subprocessor                          func(childComplexity int, id string) int
		SubprocessorHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.SubprocessorHistoryOrder, where *generated.SubprocessorHistoryWhereInput) int
		SubprocessorSearch                    func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Subprocessors                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubprocessorOrder, where *generated.SubprocessorWhereInput) int
		Subscriber                            func(childComplexity int, email string) int
		SubscriberSearch                      func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Subscribers                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubscriberOrder, where *generated.SubscriberWhereInput) int
		Task                                  func(childComplexity int, id string) int
		TaskHistories                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TaskHistoryOrder, where *generated.TaskHistoryWhereInput) int
		TaskSearch                            func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Tasks                                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		Template                              func(childComplexity int, id string) int
		TemplateHistories                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TemplateHistoryOrder, where *generated.TemplateHistoryWhereInput) int
		TemplateSearch                        func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Templates                             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TemplateOrder, where *generated.TemplateWhereInput) int
		TfaSetting                            func(childComplexity int, id *string) int
		TfaSettings                           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TFASettingOrder, where *generated.TFASettingWhereInput) int
		TrustCenter                           func(childComplexity int, id string) int
		TrustCenterCompliance                 func(childComplexity int, id string) int
		TrustCenterComplianceHistories        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TrustCenterComplianceHistoryOrder, where *generated.TrustCenterComplianceHistoryWhereInput) int
		TrustCenterComplianceSearch           func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		TrustCenterCompliances                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterComplianceOrder, where *generated.TrustCenterComplianceWhereInput) int
		TrustCenterDoc                        func(childComplexity int, id string) int
		TrustCenterDocHistories               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TrustCenterDocHistoryOrder, where *generated.TrustCenterDocHistoryWhereInput) int
		TrustCenterDocSearch                  func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		TrustCenterDocs                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterDocOrder, where *generated.TrustCenterDocWhereInput) int
		TrustCenterHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TrustCenterHistoryOrder, where *generated.TrustCenterHistoryWhereInput) int
		TrustCenterSearch                     func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		TrustCenterSetting                    func(childComplexity int, id string) int
		TrustCenterSettingHistories           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TrustCenterSettingHistoryOrder, where *generated.TrustCenterSettingHistoryWhereInput) int
		TrustCenterSettings                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterSettingOrder, where *generated.TrustCenterSettingWhereInput) int
		TrustCenterSubprocessor               func(childComplexity int, id string) int
		TrustCenterSubprocessorHistories      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TrustCenterSubprocessorHistoryOrder, where *generated.TrustCenterSubprocessorHistoryWhereInput) int
		TrustCenterSubprocessors              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterSubprocessorOrder, where *generated.TrustCenterSubprocessorWhereInput) int
		TrustCenters                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterOrder, where *generated.TrustCenterWhereInput) int
		User                                  func(childComplexity int, id string) int
		UserHistories                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserHistoryOrder, where *generated.UserHistoryWhereInput) int
		UserSearch                            func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		UserSetting                           func(childComplexity int, id string) int
		UserSettingHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserSettingHistoryOrder, where *generated.UserSettingHistoryWhereInput) int
		UserSettingSearch                     func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		UserSettings                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserSettingOrder, where *generated.UserSettingWhereInput) int
		Users                                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserOrder, where *generated.UserWhereInput) int
		WebauthnSearch                        func(childComplexity int, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) int
		Webauthns                             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.WebauthnOrder, where *generated.WebauthnWhereInput) int
	}

	Risk struct {
		ActionPlans      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) int
		Assets           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.AssetOrder, where *generated.AssetWhereInput) int
		BlockedGroups    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		BusinessCosts    func(childComplexity int) int
		Category         func(childComplexity int) int
		Controls         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		Delegate         func(childComplexity int) int
		DelegateID       func(childComplexity int) int
		Details          func(childComplexity int) int
		DisplayID        func(childComplexity int) int
		Editors          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Entities         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		ID               func(childComplexity int) int
		Impact           func(childComplexity int) int
		InternalPolicies func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		Likelihood       func(childComplexity int) int
		Mitigation       func(childComplexity int) int
		Name             func(childComplexity int) int
		Owner            func(childComplexity int) int
		OwnerID          func(childComplexity int) int
		Procedures       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		Programs         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		RiskType         func(childComplexity int) int
		Scans            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScanOrder, where *generated.ScanWhereInput) int
		Score            func(childComplexity int) int
		Stakeholder      func(childComplexity int) int
		StakeholderID    func(childComplexity int) int
		Status           func(childComplexity int) int
		Subcontrols      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags             func(childComplexity int) int
		Tasks            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Viewers          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
	}

	RiskBulkCreatePayload struct {
		Risks func(childComplexity int) int
	}

	RiskBulkUpdatePayload struct {
		Risks      func(childComplexity int) int
		UpdatedIDs func(childComplexity int) int
	}

	RiskConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RiskCreatePayload struct {
		Risk func(childComplexity int) int
	}

	RiskDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	RiskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RiskHistory struct {
		BusinessCosts func(childComplexity int) int
		Category      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DelegateID    func(childComplexity int) int
		Details       func(childComplexity int) int
		DisplayID     func(childComplexity int) int
		HistoryTime   func(childComplexity int) int
		ID            func(childComplexity int) int
		Impact        func(childComplexity int) int
		Likelihood    func(childComplexity int) int
		Mitigation    func(childComplexity int) int
		Name          func(childComplexity int) int
		Operation     func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Ref           func(childComplexity int) int
		RiskType      func(childComplexity int) int
		Score         func(childComplexity int) int
		StakeholderID func(childComplexity int) int
		Status        func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	RiskHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RiskHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RiskUpdatePayload struct {
		Risk func(childComplexity int) int
	}

	Scan struct {
		Assets        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.AssetOrder, where *generated.AssetWhereInput) int
		BlockedGroups func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Editors       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		Entities      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) int
		ID            func(childComplexity int) int
		Metadata      func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		ScanType      func(childComplexity int) int
		Status        func(childComplexity int) int
		Tags          func(childComplexity int) int
		Target        func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		Viewers       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
	}

	ScanBulkCreatePayload struct {
		Scans func(childComplexity int) int
	}

	ScanBulkUpdatePayload struct {
		Scans      func(childComplexity int) int
		UpdatedIDs func(childComplexity int) int
	}

	ScanConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ScanCreatePayload struct {
		Scan func(childComplexity int) int
	}

	ScanDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ScanEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ScanHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Metadata    func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		ScanType    func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Target      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	ScanHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ScanHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ScanUpdatePayload struct {
		Scan func(childComplexity int) int
	}

	ScheduledJob struct {
		Active        func(childComplexity int) int
		Configuration func(childComplexity int) int
		Controls      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Cron          func(childComplexity int) int
		DisplayID     func(childComplexity int) int
		ID            func(childComplexity int) int
		JobID         func(childComplexity int) int
		JobRunner     func(childComplexity int) int
		JobRunnerID   func(childComplexity int) int
		JobTemplate   func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Subcontrols   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	ScheduledJobBulkCreatePayload struct {
		ScheduledJobs func(childComplexity int) int
	}

	ScheduledJobConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ScheduledJobCreatePayload struct {
		ScheduledJob func(childComplexity int) int
	}

	ScheduledJobDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ScheduledJobEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ScheduledJobHistory struct {
		Active        func(childComplexity int) int
		Configuration func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Cron          func(childComplexity int) int
		DisplayID     func(childComplexity int) int
		HistoryTime   func(childComplexity int) int
		ID            func(childComplexity int) int
		JobID         func(childComplexity int) int
		JobRunnerID   func(childComplexity int) int
		Operation     func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Ref           func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	ScheduledJobHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ScheduledJobHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ScheduledJobRun struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		ExpectedExecutionTime func(childComplexity int) int
		ID                    func(childComplexity int) int
		JobRunner             func(childComplexity int) int
		JobRunnerID           func(childComplexity int) int
		Owner                 func(childComplexity int) int
		OwnerID               func(childComplexity int) int
		ScheduledJob          func(childComplexity int) int
		ScheduledJobID        func(childComplexity int) int
		Script                func(childComplexity int) int
		Status                func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
	}

	ScheduledJobRunConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ScheduledJobRunCreatePayload struct {
		ScheduledJobRun func(childComplexity int) int
	}

	ScheduledJobRunDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ScheduledJobRunEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ScheduledJobRunUpdatePayload struct {
		ScheduledJobRun func(childComplexity int) int
	}

	ScheduledJobUpdatePayload struct {
		ScheduledJob func(childComplexity int) int
	}

	SearchResults struct {
		APITokens                   func(childComplexity int) int
		ActionPlans                 func(childComplexity int) int
		Assets                      func(childComplexity int) int
		Contacts                    func(childComplexity int) int
		ControlImplementations      func(childComplexity int) int
		ControlObjectives           func(childComplexity int) int
		Controls                    func(childComplexity int) int
		CustomDomains               func(childComplexity int) int
		DNSVerifications            func(childComplexity int) int
		DocumentData                func(childComplexity int) int
		Entities                    func(childComplexity int) int
		EntityTypes                 func(childComplexity int) int
		Events                      func(childComplexity int) int
		Evidences                   func(childComplexity int) int
		Files                       func(childComplexity int) int
		Groups                      func(childComplexity int) int
		Integrations                func(childComplexity int) int
		InternalPolicies            func(childComplexity int) int
		Invites                     func(childComplexity int) int
		JobRunnerRegistrationTokens func(childComplexity int) int
		JobRunnerTokens             func(childComplexity int) int
		JobRunners                  func(childComplexity int) int
		JobTemplates                func(childComplexity int) int
		MappableDomains             func(childComplexity int) int
		MappedControls              func(childComplexity int) int
		Narratives                  func(childComplexity int) int
		OrgSubscriptions            func(childComplexity int) int
		OrganizationSettings        func(childComplexity int) int
		Organizations               func(childComplexity int) int
		Page                        func(childComplexity int) int
		PersonalAccessTokens        func(childComplexity int) int
		Procedures                  func(childComplexity int) int
		Programs                    func(childComplexity int) int
		Risks                       func(childComplexity int) int
		Scans                       func(childComplexity int) int
		Standards                   func(childComplexity int) int
		Subcontrols                 func(childComplexity int) int
		Subprocessors               func(childComplexity int) int
		Subscribers                 func(childComplexity int) int
		Tasks                       func(childComplexity int) int
		Templates                   func(childComplexity int) int
		TotalCount                  func(childComplexity int) int
		TrustCenterCompliances      func(childComplexity int) int
		TrustCenterDocs             func(childComplexity int) int
		TrustCenters                func(childComplexity int) int
		UserSettings                func(childComplexity int) int
		Users                       func(childComplexity int) int
		Webauthns                   func(childComplexity int) int
	}

	Standard struct {
		Controls               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		Description            func(childComplexity int) int
		Domains                func(childComplexity int) int
		Framework              func(childComplexity int) int
		FreeToUse              func(childComplexity int) int
		GoverningBody          func(childComplexity int) int
		GoverningBodyLogoURL   func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsPublic               func(childComplexity int) int
		Link                   func(childComplexity int) int
		Name                   func(childComplexity int) int
		Owner                  func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Revision               func(childComplexity int) int
		ShortName              func(childComplexity int) int
		StandardType           func(childComplexity int) int
		Status                 func(childComplexity int) int
		SystemOwned            func(childComplexity int) int
		Tags                   func(childComplexity int) int
		TrustCenterCompliances func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterComplianceOrder, where *generated.TrustCenterComplianceWhereInput) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		Version                func(childComplexity int) int
	}

	StandardBulkCreatePayload struct {
		Standards func(childComplexity int) int
	}

	StandardConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StandardCreatePayload struct {
		Standard func(childComplexity int) int
	}

	StandardDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	StandardEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StandardHistory struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Description          func(childComplexity int) int
		Domains              func(childComplexity int) int
		Framework            func(childComplexity int) int
		FreeToUse            func(childComplexity int) int
		GoverningBody        func(childComplexity int) int
		GoverningBodyLogoURL func(childComplexity int) int
		HistoryTime          func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsPublic             func(childComplexity int) int
		Link                 func(childComplexity int) int
		Name                 func(childComplexity int) int
		Operation            func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Ref                  func(childComplexity int) int
		Revision             func(childComplexity int) int
		ShortName            func(childComplexity int) int
		StandardType         func(childComplexity int) int
		Status               func(childComplexity int) int
		SystemOwned          func(childComplexity int) int
		Tags                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Version              func(childComplexity int) int
	}

	StandardHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StandardHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StandardUpdatePayload struct {
		Standard func(childComplexity int) int
	}

	Subcontrol struct {
		ActionPlans            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) int
		AssessmentMethods      func(childComplexity int) int
		AssessmentObjectives   func(childComplexity int) int
		AuditorReferenceID     func(childComplexity int) int
		Category               func(childComplexity int) int
		CategoryID             func(childComplexity int) int
		Control                func(childComplexity int) int
		ControlID              func(childComplexity int) int
		ControlImplementations func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjectives      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		ControlOwner           func(childComplexity int) int
		ControlOwnerID         func(childComplexity int) int
		ControlQuestions       func(childComplexity int) int
		ControlType            func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		Delegate               func(childComplexity int) int
		DelegateID             func(childComplexity int) int
		Description            func(childComplexity int) int
		DisplayID              func(childComplexity int) int
		Evidence               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) int
		ExampleEvidence        func(childComplexity int) int
		ID                     func(childComplexity int) int
		ImplementationGuidance func(childComplexity int) int
		InternalPolicies       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		MappedCategories       func(childComplexity int) int
		Narratives             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) int
		Owner                  func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Procedures             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		RefCode                func(childComplexity int) int
		ReferenceFramework     func(childComplexity int) int
		ReferenceID            func(childComplexity int) int
		References             func(childComplexity int) int
		Risks                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		ScheduledJobs          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ScheduledJobOrder, where *generated.ScheduledJobWhereInput) int
		Source                 func(childComplexity int) int
		Status                 func(childComplexity int) int
		Subcategory            func(childComplexity int) int
		Tags                   func(childComplexity int) int
		Tasks                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
	}

	SubcontrolBulkCreatePayload struct {
		Subcontrols func(childComplexity int) int
	}

	SubcontrolConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubcontrolCreatePayload struct {
		Subcontrol func(childComplexity int) int
	}

	SubcontrolDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	SubcontrolEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubcontrolHistory struct {
		AssessmentMethods      func(childComplexity int) int
		AssessmentObjectives   func(childComplexity int) int
		AuditorReferenceID     func(childComplexity int) int
		Category               func(childComplexity int) int
		CategoryID             func(childComplexity int) int
		ControlID              func(childComplexity int) int
		ControlOwnerID         func(childComplexity int) int
		ControlQuestions       func(childComplexity int) int
		ControlType            func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DelegateID             func(childComplexity int) int
		Description            func(childComplexity int) int
		DisplayID              func(childComplexity int) int
		ExampleEvidence        func(childComplexity int) int
		HistoryTime            func(childComplexity int) int
		ID                     func(childComplexity int) int
		ImplementationGuidance func(childComplexity int) int
		MappedCategories       func(childComplexity int) int
		Operation              func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Ref                    func(childComplexity int) int
		RefCode                func(childComplexity int) int
		ReferenceFramework     func(childComplexity int) int
		ReferenceID            func(childComplexity int) int
		References             func(childComplexity int) int
		Source                 func(childComplexity int) int
		Status                 func(childComplexity int) int
		Subcategory            func(childComplexity int) int
		Tags                   func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
	}

	SubcontrolHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubcontrolHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubcontrolUpdatePayload struct {
		Subcontrol func(childComplexity int) int
	}

	Subprocessor struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		Description              func(childComplexity int) int
		Files                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID                       func(childComplexity int) int
		LogoFile                 func(childComplexity int) int
		LogoLocalFileID          func(childComplexity int) int
		LogoRemoteURL            func(childComplexity int) int
		Name                     func(childComplexity int) int
		Owner                    func(childComplexity int) int
		OwnerID                  func(childComplexity int) int
		SystemOwned              func(childComplexity int) int
		Tags                     func(childComplexity int) int
		TrustCenterSubprocessors func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterSubprocessorOrder, where *generated.TrustCenterSubprocessorWhereInput) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
	}

	SubprocessorBulkCreatePayload struct {
		Subprocessors func(childComplexity int) int
	}

	SubprocessorConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubprocessorCreatePayload struct {
		Subprocessor func(childComplexity int) int
	}

	SubprocessorDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	SubprocessorEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubprocessorHistory struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		HistoryTime     func(childComplexity int) int
		ID              func(childComplexity int) int
		LogoLocalFileID func(childComplexity int) int
		LogoRemoteURL   func(childComplexity int) int
		Name            func(childComplexity int) int
		Operation       func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		Ref             func(childComplexity int) int
		SystemOwned     func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
	}

	SubprocessorHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubprocessorHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubprocessorUpdatePayload struct {
		Subprocessor func(childComplexity int) int
	}

	Subscriber struct {
		Active        func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Email         func(childComplexity int) int
		Events        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		ID            func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		PhoneNumber   func(childComplexity int) int
		SendAttempts  func(childComplexity int) int
		Tags          func(childComplexity int) int
		Unsubscribed  func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		VerifiedEmail func(childComplexity int) int
		VerifiedPhone func(childComplexity int) int
	}

	SubscriberBulkCreatePayload struct {
		Subscribers func(childComplexity int) int
	}

	SubscriberConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubscriberCreatePayload struct {
		Subscriber func(childComplexity int) int
	}

	SubscriberDeletePayload struct {
		Email func(childComplexity int) int
	}

	SubscriberEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubscriberUpdatePayload struct {
		Subscriber func(childComplexity int) int
	}

	TFASetting struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		ID          func(childComplexity int) int
		Owner       func(childComplexity int) int
		TotpAllowed func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		Verified    func(childComplexity int) int
	}

	TFASettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TFASettingCreatePayload struct {
		QRCode     func(childComplexity int) int
		TfaSecret  func(childComplexity int) int
		TfaSetting func(childComplexity int) int
	}

	TFASettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TFASettingUpdatePayload struct {
		QRCode        func(childComplexity int) int
		RecoveryCodes func(childComplexity int) int
		TfaSecret     func(childComplexity int) int
		TfaSetting    func(childComplexity int) int
	}

	Task struct {
		Assignee               func(childComplexity int) int
		AssigneeID             func(childComplexity int) int
		Assigner               func(childComplexity int) int
		AssignerID             func(childComplexity int) int
		Category               func(childComplexity int) int
		Comments               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NoteOrder, where *generated.NoteWhereInput) int
		Completed              func(childComplexity int) int
		ControlImplementations func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) int
		ControlObjectives      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) int
		Controls               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		Details                func(childComplexity int) int
		DisplayID              func(childComplexity int) int
		Due                    func(childComplexity int) int
		Evidence               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) int
		Groups                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID                     func(childComplexity int) int
		InternalPolicies       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) int
		Owner                  func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Procedures             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) int
		Programs               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		Risks                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) int
		Status                 func(childComplexity int) int
		Subcontrols            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags                   func(childComplexity int) int
		Title                  func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
	}

	TaskBulkCreatePayload struct {
		Tasks func(childComplexity int) int
	}

	TaskBulkUpdatePayload struct {
		Tasks      func(childComplexity int) int
		UpdatedIDs func(childComplexity int) int
	}

	TaskConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TaskCreatePayload struct {
		Task func(childComplexity int) int
	}

	TaskDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TaskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TaskHistory struct {
		AssigneeID  func(childComplexity int) int
		AssignerID  func(childComplexity int) int
		Category    func(childComplexity int) int
		Completed   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Details     func(childComplexity int) int
		DisplayID   func(childComplexity int) int
		Due         func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	TaskHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TaskHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TaskUpdatePayload struct {
		Task func(childComplexity int) int
	}

	Template struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		Documents    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.DocumentDataOrder, where *generated.DocumentDataWhereInput) int
		Files        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID           func(childComplexity int) int
		Jsonconfig   func(childComplexity int) int
		Kind         func(childComplexity int) int
		Name         func(childComplexity int) int
		Owner        func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Tags         func(childComplexity int) int
		TemplateType func(childComplexity int) int
		Uischema     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	TemplateBulkCreatePayload struct {
		Templates func(childComplexity int) int
	}

	TemplateConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TemplateCreatePayload struct {
		Template func(childComplexity int) int
	}

	TemplateDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TemplateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TemplateHistory struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		HistoryTime  func(childComplexity int) int
		ID           func(childComplexity int) int
		Jsonconfig   func(childComplexity int) int
		Kind         func(childComplexity int) int
		Name         func(childComplexity int) int
		Operation    func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Ref          func(childComplexity int) int
		Tags         func(childComplexity int) int
		TemplateType func(childComplexity int) int
		Uischema     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	TemplateHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TemplateHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TemplateUpdatePayload struct {
		Template func(childComplexity int) int
	}

	TrustCenter struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		CustomDomain             func(childComplexity int) int
		CustomDomainID           func(childComplexity int) int
		ID                       func(childComplexity int) int
		Owner                    func(childComplexity int) int
		OwnerID                  func(childComplexity int) int
		Setting                  func(childComplexity int) int
		Slug                     func(childComplexity int) int
		Tags                     func(childComplexity int) int
		TrustCenterCompliances   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterComplianceOrder, where *generated.TrustCenterComplianceWhereInput) int
		TrustCenterSubprocessors func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TrustCenterSubprocessorOrder, where *generated.TrustCenterSubprocessorWhereInput) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
	}

	TrustCenterCompliance struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ID            func(childComplexity int) int
		Standard      func(childComplexity int) int
		StandardID    func(childComplexity int) int
		Tags          func(childComplexity int) int
		TrustCenter   func(childComplexity int) int
		TrustCenterID func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	TrustCenterComplianceBulkCreatePayload struct {
		TrustCenterCompliances func(childComplexity int) int
	}

	TrustCenterComplianceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterComplianceCreatePayload struct {
		TrustCenterCompliance func(childComplexity int) int
	}

	TrustCenterComplianceDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TrustCenterComplianceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterComplianceHistory struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		HistoryTime   func(childComplexity int) int
		ID            func(childComplexity int) int
		Operation     func(childComplexity int) int
		Ref           func(childComplexity int) int
		StandardID    func(childComplexity int) int
		Tags          func(childComplexity int) int
		TrustCenterID func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	TrustCenterComplianceHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterComplianceHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterComplianceUpdatePayload struct {
		TrustCenterCompliance func(childComplexity int) int
	}

	TrustCenterConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterCreatePayload struct {
		TrustCenter func(childComplexity int) int
	}

	TrustCenterDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TrustCenterDoc struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Tags      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	TrustCenterDocBulkCreatePayload struct {
		TrustCenterDocs func(childComplexity int) int
	}

	TrustCenterDocConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterDocCreatePayload struct {
		TrustCenterDoc func(childComplexity int) int
	}

	TrustCenterDocDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TrustCenterDocEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterDocHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	TrustCenterDocHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterDocHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterDocUpdatePayload struct {
		TrustCenterDoc func(childComplexity int) int
	}

	TrustCenterDomainCreatePayload struct {
		CustomDomain func(childComplexity int) int
	}

	TrustCenterEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterHistory struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		CustomDomainID func(childComplexity int) int
		HistoryTime    func(childComplexity int) int
		ID             func(childComplexity int) int
		Operation      func(childComplexity int) int
		OwnerID        func(childComplexity int) int
		Ref            func(childComplexity int) int
		Slug           func(childComplexity int) int
		Tags           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	TrustCenterHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterSetting struct {
		AccentColor        func(childComplexity int) int
		BackgroundColor    func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		FaviconFile        func(childComplexity int) int
		FaviconLocalFileID func(childComplexity int) int
		FaviconRemoteURL   func(childComplexity int) int
		Files              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		Font               func(childComplexity int) int
		ForegroundColor    func(childComplexity int) int
		ID                 func(childComplexity int) int
		LogoFile           func(childComplexity int) int
		LogoLocalFileID    func(childComplexity int) int
		LogoRemoteURL      func(childComplexity int) int
		Overview           func(childComplexity int) int
		PrimaryColor       func(childComplexity int) int
		ThemeMode          func(childComplexity int) int
		Title              func(childComplexity int) int
		TrustCenter        func(childComplexity int) int
		TrustCenterID      func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
	}

	TrustCenterSettingBulkCreatePayload struct {
		TrustCenterSettings func(childComplexity int) int
	}

	TrustCenterSettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterSettingCreatePayload struct {
		TrustCenterSetting func(childComplexity int) int
	}

	TrustCenterSettingDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TrustCenterSettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterSettingHistory struct {
		AccentColor        func(childComplexity int) int
		BackgroundColor    func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		FaviconLocalFileID func(childComplexity int) int
		FaviconRemoteURL   func(childComplexity int) int
		Font               func(childComplexity int) int
		ForegroundColor    func(childComplexity int) int
		HistoryTime        func(childComplexity int) int
		ID                 func(childComplexity int) int
		LogoLocalFileID    func(childComplexity int) int
		LogoRemoteURL      func(childComplexity int) int
		Operation          func(childComplexity int) int
		Overview           func(childComplexity int) int
		PrimaryColor       func(childComplexity int) int
		Ref                func(childComplexity int) int
		ThemeMode          func(childComplexity int) int
		Title              func(childComplexity int) int
		TrustCenterID      func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
	}

	TrustCenterSettingHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterSettingHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterSettingUpdatePayload struct {
		TrustCenterSetting func(childComplexity int) int
	}

	TrustCenterSubprocessor struct {
		Category       func(childComplexity int) int
		Countries      func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		Subprocessor   func(childComplexity int) int
		SubprocessorID func(childComplexity int) int
		TrustCenter    func(childComplexity int) int
		TrustCenterID  func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	TrustCenterSubprocessorBulkCreatePayload struct {
		TrustCenterSubprocessors func(childComplexity int) int
	}

	TrustCenterSubprocessorConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterSubprocessorCreatePayload struct {
		TrustCenterSubprocessor func(childComplexity int) int
	}

	TrustCenterSubprocessorDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TrustCenterSubprocessorEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterSubprocessorHistory struct {
		Category       func(childComplexity int) int
		Countries      func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		HistoryTime    func(childComplexity int) int
		ID             func(childComplexity int) int
		Operation      func(childComplexity int) int
		Ref            func(childComplexity int) int
		SubprocessorID func(childComplexity int) int
		TrustCenterID  func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	TrustCenterSubprocessorHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TrustCenterSubprocessorHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrustCenterSubprocessorUpdatePayload struct {
		TrustCenterSubprocessor func(childComplexity int) int
	}

	TrustCenterUpdatePayload struct {
		TrustCenter func(childComplexity int) int
	}

	User struct {
		ActionPlans          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) int
		AssigneeTasks        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		AssignerTasks        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) int
		AuthProvider         func(childComplexity int) int
		AvatarFile           func(childComplexity int) int
		AvatarLocalFileID    func(childComplexity int) int
		AvatarRemoteURL      func(childComplexity int) int
		AvatarUpdatedAt      func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DisplayID            func(childComplexity int) int
		DisplayName          func(childComplexity int) int
		Email                func(childComplexity int) int
		Events               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) int
		Files                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		FirstName            func(childComplexity int) int
		GroupMemberships     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupMembershipOrder, where *generated.GroupMembershipWhereInput) int
		Groups               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) int
		ID                   func(childComplexity int) int
		LastLoginProvider    func(childComplexity int) int
		LastName             func(childComplexity int) int
		LastSeen             func(childComplexity int) int
		OrgMemberships       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrgMembershipOrder, where *generated.OrgMembershipWhereInput) int
		Organizations        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationOrder, where *generated.OrganizationWhereInput) int
		PersonalAccessTokens func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.PersonalAccessTokenOrder, where *generated.PersonalAccessTokenWhereInput) int
		ProgramMemberships   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramMembershipOrder, where *generated.ProgramMembershipWhereInput) int
		Programs             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) int
		Role                 func(childComplexity int) int
		Setting              func(childComplexity int) int
		Sub                  func(childComplexity int) int
		Subcontrols          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) int
		Tags                 func(childComplexity int) int
		TfaSettings          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TFASettingOrder, where *generated.TFASettingWhereInput) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Webauthns            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.WebauthnOrder, where *generated.WebauthnWhereInput) int
	}

	UserBulkCreatePayload struct {
		Users func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserCreatePayload struct {
		User func(childComplexity int) int
	}

	UserDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserHistory struct {
		AuthProvider      func(childComplexity int) int
		AvatarLocalFileID func(childComplexity int) int
		AvatarRemoteURL   func(childComplexity int) int
		AvatarUpdatedAt   func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DisplayID         func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		Email             func(childComplexity int) int
		FirstName         func(childComplexity int) int
		HistoryTime       func(childComplexity int) int
		ID                func(childComplexity int) int
		LastLoginProvider func(childComplexity int) int
		LastName          func(childComplexity int) int
		LastSeen          func(childComplexity int) int
		Operation         func(childComplexity int) int
		Ref               func(childComplexity int) int
		Role              func(childComplexity int) int
		Sub               func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	UserHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSetting struct {
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DefaultOrg        func(childComplexity int) int
		EmailConfirmed    func(childComplexity int) int
		Files             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) int
		ID                func(childComplexity int) int
		IsTfaEnabled      func(childComplexity int) int
		IsWebauthnAllowed func(childComplexity int) int
		Locked            func(childComplexity int) int
		SilencedAt        func(childComplexity int) int
		Status            func(childComplexity int) int
		SuspendedAt       func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		User              func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	UserSettingBulkCreatePayload struct {
		UserSettings func(childComplexity int) int
	}

	UserSettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserSettingCreatePayload struct {
		UserSetting func(childComplexity int) int
	}

	UserSettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSettingHistory struct {
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		EmailConfirmed    func(childComplexity int) int
		HistoryTime       func(childComplexity int) int
		ID                func(childComplexity int) int
		IsTfaEnabled      func(childComplexity int) int
		IsWebauthnAllowed func(childComplexity int) int
		Locked            func(childComplexity int) int
		Operation         func(childComplexity int) int
		Ref               func(childComplexity int) int
		SilencedAt        func(childComplexity int) int
		Status            func(childComplexity int) int
		SuspendedAt       func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	UserSettingHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserSettingHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSettingUpdatePayload struct {
		UserSetting func(childComplexity int) int
	}

	UserUpdatePayload struct {
		User func(childComplexity int) int
	}

	Webauthn struct {
		Aaguid         func(childComplexity int) int
		BackupEligible func(childComplexity int) int
		BackupState    func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		Owner          func(childComplexity int) int
		Tags           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	WebauthnConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	WebauthnDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	WebauthnEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "APIToken.createdAt":
		if e.complexity.APIToken.CreatedAt == nil {
			break
		}

		return e.complexity.APIToken.CreatedAt(childComplexity), true

	case "APIToken.createdBy":
		if e.complexity.APIToken.CreatedBy == nil {
			break
		}

		return e.complexity.APIToken.CreatedBy(childComplexity), true

	case "APIToken.description":
		if e.complexity.APIToken.Description == nil {
			break
		}

		return e.complexity.APIToken.Description(childComplexity), true

	case "APIToken.expiresAt":
		if e.complexity.APIToken.ExpiresAt == nil {
			break
		}

		return e.complexity.APIToken.ExpiresAt(childComplexity), true

	case "APIToken.id":
		if e.complexity.APIToken.ID == nil {
			break
		}

		return e.complexity.APIToken.ID(childComplexity), true

	case "APIToken.isActive":
		if e.complexity.APIToken.IsActive == nil {
			break
		}

		return e.complexity.APIToken.IsActive(childComplexity), true

	case "APIToken.lastUsedAt":
		if e.complexity.APIToken.LastUsedAt == nil {
			break
		}

		return e.complexity.APIToken.LastUsedAt(childComplexity), true

	case "APIToken.name":
		if e.complexity.APIToken.Name == nil {
			break
		}

		return e.complexity.APIToken.Name(childComplexity), true

	case "APIToken.owner":
		if e.complexity.APIToken.Owner == nil {
			break
		}

		return e.complexity.APIToken.Owner(childComplexity), true

	case "APIToken.ownerID":
		if e.complexity.APIToken.OwnerID == nil {
			break
		}

		return e.complexity.APIToken.OwnerID(childComplexity), true

	case "APIToken.revokedAt":
		if e.complexity.APIToken.RevokedAt == nil {
			break
		}

		return e.complexity.APIToken.RevokedAt(childComplexity), true

	case "APIToken.revokedBy":
		if e.complexity.APIToken.RevokedBy == nil {
			break
		}

		return e.complexity.APIToken.RevokedBy(childComplexity), true

	case "APIToken.revokedReason":
		if e.complexity.APIToken.RevokedReason == nil {
			break
		}

		return e.complexity.APIToken.RevokedReason(childComplexity), true

	case "APIToken.ssoAuthorizations":
		if e.complexity.APIToken.SSOAuthorizations == nil {
			break
		}

		return e.complexity.APIToken.SSOAuthorizations(childComplexity), true

	case "APIToken.scopes":
		if e.complexity.APIToken.Scopes == nil {
			break
		}

		return e.complexity.APIToken.Scopes(childComplexity), true

	case "APIToken.tags":
		if e.complexity.APIToken.Tags == nil {
			break
		}

		return e.complexity.APIToken.Tags(childComplexity), true

	case "APIToken.token":
		if e.complexity.APIToken.Token == nil {
			break
		}

		return e.complexity.APIToken.Token(childComplexity), true

	case "APIToken.updatedAt":
		if e.complexity.APIToken.UpdatedAt == nil {
			break
		}

		return e.complexity.APIToken.UpdatedAt(childComplexity), true

	case "APIToken.updatedBy":
		if e.complexity.APIToken.UpdatedBy == nil {
			break
		}

		return e.complexity.APIToken.UpdatedBy(childComplexity), true

	case "APITokenBulkCreatePayload.apiTokens":
		if e.complexity.APITokenBulkCreatePayload.APITokens == nil {
			break
		}

		return e.complexity.APITokenBulkCreatePayload.APITokens(childComplexity), true

	case "APITokenConnection.edges":
		if e.complexity.APITokenConnection.Edges == nil {
			break
		}

		return e.complexity.APITokenConnection.Edges(childComplexity), true

	case "APITokenConnection.pageInfo":
		if e.complexity.APITokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.APITokenConnection.PageInfo(childComplexity), true

	case "APITokenConnection.totalCount":
		if e.complexity.APITokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.APITokenConnection.TotalCount(childComplexity), true

	case "APITokenCreatePayload.apiToken":
		if e.complexity.APITokenCreatePayload.APIToken == nil {
			break
		}

		return e.complexity.APITokenCreatePayload.APIToken(childComplexity), true

	case "APITokenDeletePayload.deletedID":
		if e.complexity.APITokenDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.APITokenDeletePayload.DeletedID(childComplexity), true

	case "APITokenEdge.cursor":
		if e.complexity.APITokenEdge.Cursor == nil {
			break
		}

		return e.complexity.APITokenEdge.Cursor(childComplexity), true

	case "APITokenEdge.node":
		if e.complexity.APITokenEdge.Node == nil {
			break
		}

		return e.complexity.APITokenEdge.Node(childComplexity), true

	case "APITokenUpdatePayload.apiToken":
		if e.complexity.APITokenUpdatePayload.APIToken == nil {
			break
		}

		return e.complexity.APITokenUpdatePayload.APIToken(childComplexity), true

	case "ActionPlan.actionPlanType":
		if e.complexity.ActionPlan.ActionPlanType == nil {
			break
		}

		return e.complexity.ActionPlan.ActionPlanType(childComplexity), true

	case "ActionPlan.approvalRequired":
		if e.complexity.ActionPlan.ApprovalRequired == nil {
			break
		}

		return e.complexity.ActionPlan.ApprovalRequired(childComplexity), true

	case "ActionPlan.approver":
		if e.complexity.ActionPlan.Approver == nil {
			break
		}

		return e.complexity.ActionPlan.Approver(childComplexity), true

	case "ActionPlan.approverID":
		if e.complexity.ActionPlan.ApproverID == nil {
			break
		}

		return e.complexity.ActionPlan.ApproverID(childComplexity), true

	case "ActionPlan.controlSuggestions":
		if e.complexity.ActionPlan.ControlSuggestions == nil {
			break
		}

		return e.complexity.ActionPlan.ControlSuggestions(childComplexity), true

	case "ActionPlan.controls":
		if e.complexity.ActionPlan.Controls == nil {
			break
		}

		args, err := ec.field_ActionPlan_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ActionPlan.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "ActionPlan.createdAt":
		if e.complexity.ActionPlan.CreatedAt == nil {
			break
		}

		return e.complexity.ActionPlan.CreatedAt(childComplexity), true

	case "ActionPlan.createdBy":
		if e.complexity.ActionPlan.CreatedBy == nil {
			break
		}

		return e.complexity.ActionPlan.CreatedBy(childComplexity), true

	case "ActionPlan.delegate":
		if e.complexity.ActionPlan.Delegate == nil {
			break
		}

		return e.complexity.ActionPlan.Delegate(childComplexity), true

	case "ActionPlan.delegateID":
		if e.complexity.ActionPlan.DelegateID == nil {
			break
		}

		return e.complexity.ActionPlan.DelegateID(childComplexity), true

	case "ActionPlan.details":
		if e.complexity.ActionPlan.Details == nil {
			break
		}

		return e.complexity.ActionPlan.Details(childComplexity), true

	case "ActionPlan.dismissedControlSuggestions":
		if e.complexity.ActionPlan.DismissedControlSuggestions == nil {
			break
		}

		return e.complexity.ActionPlan.DismissedControlSuggestions(childComplexity), true

	case "ActionPlan.dismissedImprovementSuggestions":
		if e.complexity.ActionPlan.DismissedImprovementSuggestions == nil {
			break
		}

		return e.complexity.ActionPlan.DismissedImprovementSuggestions(childComplexity), true

	case "ActionPlan.dismissedTagSuggestions":
		if e.complexity.ActionPlan.DismissedTagSuggestions == nil {
			break
		}

		return e.complexity.ActionPlan.DismissedTagSuggestions(childComplexity), true

	case "ActionPlan.dueDate":
		if e.complexity.ActionPlan.DueDate == nil {
			break
		}

		return e.complexity.ActionPlan.DueDate(childComplexity), true

	case "ActionPlan.id":
		if e.complexity.ActionPlan.ID == nil {
			break
		}

		return e.complexity.ActionPlan.ID(childComplexity), true

	case "ActionPlan.improvementSuggestions":
		if e.complexity.ActionPlan.ImprovementSuggestions == nil {
			break
		}

		return e.complexity.ActionPlan.ImprovementSuggestions(childComplexity), true

	case "ActionPlan.name":
		if e.complexity.ActionPlan.Name == nil {
			break
		}

		return e.complexity.ActionPlan.Name(childComplexity), true

	case "ActionPlan.owner":
		if e.complexity.ActionPlan.Owner == nil {
			break
		}

		return e.complexity.ActionPlan.Owner(childComplexity), true

	case "ActionPlan.ownerID":
		if e.complexity.ActionPlan.OwnerID == nil {
			break
		}

		return e.complexity.ActionPlan.OwnerID(childComplexity), true

	case "ActionPlan.priority":
		if e.complexity.ActionPlan.Priority == nil {
			break
		}

		return e.complexity.ActionPlan.Priority(childComplexity), true

	case "ActionPlan.programs":
		if e.complexity.ActionPlan.Programs == nil {
			break
		}

		args, err := ec.field_ActionPlan_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ActionPlan.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "ActionPlan.reviewDue":
		if e.complexity.ActionPlan.ReviewDue == nil {
			break
		}

		return e.complexity.ActionPlan.ReviewDue(childComplexity), true

	case "ActionPlan.reviewFrequency":
		if e.complexity.ActionPlan.ReviewFrequency == nil {
			break
		}

		return e.complexity.ActionPlan.ReviewFrequency(childComplexity), true

	case "ActionPlan.revision":
		if e.complexity.ActionPlan.Revision == nil {
			break
		}

		return e.complexity.ActionPlan.Revision(childComplexity), true

	case "ActionPlan.risks":
		if e.complexity.ActionPlan.Risks == nil {
			break
		}

		args, err := ec.field_ActionPlan_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ActionPlan.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "ActionPlan.source":
		if e.complexity.ActionPlan.Source == nil {
			break
		}

		return e.complexity.ActionPlan.Source(childComplexity), true

	case "ActionPlan.status":
		if e.complexity.ActionPlan.Status == nil {
			break
		}

		return e.complexity.ActionPlan.Status(childComplexity), true

	case "ActionPlan.summary":
		if e.complexity.ActionPlan.Summary == nil {
			break
		}

		return e.complexity.ActionPlan.Summary(childComplexity), true

	case "ActionPlan.tagSuggestions":
		if e.complexity.ActionPlan.TagSuggestions == nil {
			break
		}

		return e.complexity.ActionPlan.TagSuggestions(childComplexity), true

	case "ActionPlan.tags":
		if e.complexity.ActionPlan.Tags == nil {
			break
		}

		return e.complexity.ActionPlan.Tags(childComplexity), true

	case "ActionPlan.updatedAt":
		if e.complexity.ActionPlan.UpdatedAt == nil {
			break
		}

		return e.complexity.ActionPlan.UpdatedAt(childComplexity), true

	case "ActionPlan.updatedBy":
		if e.complexity.ActionPlan.UpdatedBy == nil {
			break
		}

		return e.complexity.ActionPlan.UpdatedBy(childComplexity), true

	case "ActionPlanBulkCreatePayload.actionPlans":
		if e.complexity.ActionPlanBulkCreatePayload.ActionPlans == nil {
			break
		}

		return e.complexity.ActionPlanBulkCreatePayload.ActionPlans(childComplexity), true

	case "ActionPlanBulkUpdatePayload.actionPlans":
		if e.complexity.ActionPlanBulkUpdatePayload.ActionPlans == nil {
			break
		}

		return e.complexity.ActionPlanBulkUpdatePayload.ActionPlans(childComplexity), true

	case "ActionPlanBulkUpdatePayload.updatedIDs":
		if e.complexity.ActionPlanBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.ActionPlanBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "ActionPlanConnection.edges":
		if e.complexity.ActionPlanConnection.Edges == nil {
			break
		}

		return e.complexity.ActionPlanConnection.Edges(childComplexity), true

	case "ActionPlanConnection.pageInfo":
		if e.complexity.ActionPlanConnection.PageInfo == nil {
			break
		}

		return e.complexity.ActionPlanConnection.PageInfo(childComplexity), true

	case "ActionPlanConnection.totalCount":
		if e.complexity.ActionPlanConnection.TotalCount == nil {
			break
		}

		return e.complexity.ActionPlanConnection.TotalCount(childComplexity), true

	case "ActionPlanCreatePayload.actionPlan":
		if e.complexity.ActionPlanCreatePayload.ActionPlan == nil {
			break
		}

		return e.complexity.ActionPlanCreatePayload.ActionPlan(childComplexity), true

	case "ActionPlanDeletePayload.deletedID":
		if e.complexity.ActionPlanDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ActionPlanDeletePayload.DeletedID(childComplexity), true

	case "ActionPlanEdge.cursor":
		if e.complexity.ActionPlanEdge.Cursor == nil {
			break
		}

		return e.complexity.ActionPlanEdge.Cursor(childComplexity), true

	case "ActionPlanEdge.node":
		if e.complexity.ActionPlanEdge.Node == nil {
			break
		}

		return e.complexity.ActionPlanEdge.Node(childComplexity), true

	case "ActionPlanHistory.actionPlanType":
		if e.complexity.ActionPlanHistory.ActionPlanType == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ActionPlanType(childComplexity), true

	case "ActionPlanHistory.approvalRequired":
		if e.complexity.ActionPlanHistory.ApprovalRequired == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ApprovalRequired(childComplexity), true

	case "ActionPlanHistory.approverID":
		if e.complexity.ActionPlanHistory.ApproverID == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ApproverID(childComplexity), true

	case "ActionPlanHistory.controlSuggestions":
		if e.complexity.ActionPlanHistory.ControlSuggestions == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ControlSuggestions(childComplexity), true

	case "ActionPlanHistory.createdAt":
		if e.complexity.ActionPlanHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ActionPlanHistory.CreatedAt(childComplexity), true

	case "ActionPlanHistory.createdBy":
		if e.complexity.ActionPlanHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ActionPlanHistory.CreatedBy(childComplexity), true

	case "ActionPlanHistory.delegateID":
		if e.complexity.ActionPlanHistory.DelegateID == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DelegateID(childComplexity), true

	case "ActionPlanHistory.details":
		if e.complexity.ActionPlanHistory.Details == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Details(childComplexity), true

	case "ActionPlanHistory.dismissedControlSuggestions":
		if e.complexity.ActionPlanHistory.DismissedControlSuggestions == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DismissedControlSuggestions(childComplexity), true

	case "ActionPlanHistory.dismissedImprovementSuggestions":
		if e.complexity.ActionPlanHistory.DismissedImprovementSuggestions == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DismissedImprovementSuggestions(childComplexity), true

	case "ActionPlanHistory.dismissedTagSuggestions":
		if e.complexity.ActionPlanHistory.DismissedTagSuggestions == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DismissedTagSuggestions(childComplexity), true

	case "ActionPlanHistory.dueDate":
		if e.complexity.ActionPlanHistory.DueDate == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DueDate(childComplexity), true

	case "ActionPlanHistory.historyTime":
		if e.complexity.ActionPlanHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ActionPlanHistory.HistoryTime(childComplexity), true

	case "ActionPlanHistory.id":
		if e.complexity.ActionPlanHistory.ID == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ID(childComplexity), true

	case "ActionPlanHistory.improvementSuggestions":
		if e.complexity.ActionPlanHistory.ImprovementSuggestions == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ImprovementSuggestions(childComplexity), true

	case "ActionPlanHistory.name":
		if e.complexity.ActionPlanHistory.Name == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Name(childComplexity), true

	case "ActionPlanHistory.operation":
		if e.complexity.ActionPlanHistory.Operation == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Operation(childComplexity), true

	case "ActionPlanHistory.ownerID":
		if e.complexity.ActionPlanHistory.OwnerID == nil {
			break
		}

		return e.complexity.ActionPlanHistory.OwnerID(childComplexity), true

	case "ActionPlanHistory.priority":
		if e.complexity.ActionPlanHistory.Priority == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Priority(childComplexity), true

	case "ActionPlanHistory.ref":
		if e.complexity.ActionPlanHistory.Ref == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Ref(childComplexity), true

	case "ActionPlanHistory.reviewDue":
		if e.complexity.ActionPlanHistory.ReviewDue == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ReviewDue(childComplexity), true

	case "ActionPlanHistory.reviewFrequency":
		if e.complexity.ActionPlanHistory.ReviewFrequency == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ReviewFrequency(childComplexity), true

	case "ActionPlanHistory.revision":
		if e.complexity.ActionPlanHistory.Revision == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Revision(childComplexity), true

	case "ActionPlanHistory.source":
		if e.complexity.ActionPlanHistory.Source == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Source(childComplexity), true

	case "ActionPlanHistory.status":
		if e.complexity.ActionPlanHistory.Status == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Status(childComplexity), true

	case "ActionPlanHistory.summary":
		if e.complexity.ActionPlanHistory.Summary == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Summary(childComplexity), true

	case "ActionPlanHistory.tagSuggestions":
		if e.complexity.ActionPlanHistory.TagSuggestions == nil {
			break
		}

		return e.complexity.ActionPlanHistory.TagSuggestions(childComplexity), true

	case "ActionPlanHistory.tags":
		if e.complexity.ActionPlanHistory.Tags == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Tags(childComplexity), true

	case "ActionPlanHistory.updatedAt":
		if e.complexity.ActionPlanHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ActionPlanHistory.UpdatedAt(childComplexity), true

	case "ActionPlanHistory.updatedBy":
		if e.complexity.ActionPlanHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ActionPlanHistory.UpdatedBy(childComplexity), true

	case "ActionPlanHistoryConnection.edges":
		if e.complexity.ActionPlanHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ActionPlanHistoryConnection.Edges(childComplexity), true

	case "ActionPlanHistoryConnection.pageInfo":
		if e.complexity.ActionPlanHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ActionPlanHistoryConnection.PageInfo(childComplexity), true

	case "ActionPlanHistoryConnection.totalCount":
		if e.complexity.ActionPlanHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ActionPlanHistoryConnection.TotalCount(childComplexity), true

	case "ActionPlanHistoryEdge.cursor":
		if e.complexity.ActionPlanHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ActionPlanHistoryEdge.Cursor(childComplexity), true

	case "ActionPlanHistoryEdge.node":
		if e.complexity.ActionPlanHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ActionPlanHistoryEdge.Node(childComplexity), true

	case "ActionPlanUpdatePayload.actionPlan":
		if e.complexity.ActionPlanUpdatePayload.ActionPlan == nil {
			break
		}

		return e.complexity.ActionPlanUpdatePayload.ActionPlan(childComplexity), true

	case "Asset.assetType":
		if e.complexity.Asset.AssetType == nil {
			break
		}

		return e.complexity.Asset.AssetType(childComplexity), true

	case "Asset.blockedGroups":
		if e.complexity.Asset.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Asset_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Asset.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Asset.categories":
		if e.complexity.Asset.Categories == nil {
			break
		}

		return e.complexity.Asset.Categories(childComplexity), true

	case "Asset.controls":
		if e.complexity.Asset.Controls == nil {
			break
		}

		args, err := ec.field_Asset_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Asset.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Asset.cpe":
		if e.complexity.Asset.Cpe == nil {
			break
		}

		return e.complexity.Asset.Cpe(childComplexity), true

	case "Asset.createdAt":
		if e.complexity.Asset.CreatedAt == nil {
			break
		}

		return e.complexity.Asset.CreatedAt(childComplexity), true

	case "Asset.createdBy":
		if e.complexity.Asset.CreatedBy == nil {
			break
		}

		return e.complexity.Asset.CreatedBy(childComplexity), true

	case "Asset.description":
		if e.complexity.Asset.Description == nil {
			break
		}

		return e.complexity.Asset.Description(childComplexity), true

	case "Asset.editors":
		if e.complexity.Asset.Editors == nil {
			break
		}

		args, err := ec.field_Asset_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Asset.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Asset.entities":
		if e.complexity.Asset.Entities == nil {
			break
		}

		args, err := ec.field_Asset_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Asset.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Asset.id":
		if e.complexity.Asset.ID == nil {
			break
		}

		return e.complexity.Asset.ID(childComplexity), true

	case "Asset.identifier":
		if e.complexity.Asset.Identifier == nil {
			break
		}

		return e.complexity.Asset.Identifier(childComplexity), true

	case "Asset.name":
		if e.complexity.Asset.Name == nil {
			break
		}

		return e.complexity.Asset.Name(childComplexity), true

	case "Asset.owner":
		if e.complexity.Asset.Owner == nil {
			break
		}

		return e.complexity.Asset.Owner(childComplexity), true

	case "Asset.ownerID":
		if e.complexity.Asset.OwnerID == nil {
			break
		}

		return e.complexity.Asset.OwnerID(childComplexity), true

	case "Asset.scans":
		if e.complexity.Asset.Scans == nil {
			break
		}

		args, err := ec.field_Asset_scans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Asset.Scans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Asset.tags":
		if e.complexity.Asset.Tags == nil {
			break
		}

		return e.complexity.Asset.Tags(childComplexity), true

	case "Asset.updatedAt":
		if e.complexity.Asset.UpdatedAt == nil {
			break
		}

		return e.complexity.Asset.UpdatedAt(childComplexity), true

	case "Asset.updatedBy":
		if e.complexity.Asset.UpdatedBy == nil {
			break
		}

		return e.complexity.Asset.UpdatedBy(childComplexity), true

	case "Asset.viewers":
		if e.complexity.Asset.Viewers == nil {
			break
		}

		args, err := ec.field_Asset_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Asset.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Asset.website":
		if e.complexity.Asset.Website == nil {
			break
		}

		return e.complexity.Asset.Website(childComplexity), true

	case "AssetBulkCreatePayload.assets":
		if e.complexity.AssetBulkCreatePayload.Assets == nil {
			break
		}

		return e.complexity.AssetBulkCreatePayload.Assets(childComplexity), true

	case "AssetConnection.edges":
		if e.complexity.AssetConnection.Edges == nil {
			break
		}

		return e.complexity.AssetConnection.Edges(childComplexity), true

	case "AssetConnection.pageInfo":
		if e.complexity.AssetConnection.PageInfo == nil {
			break
		}

		return e.complexity.AssetConnection.PageInfo(childComplexity), true

	case "AssetConnection.totalCount":
		if e.complexity.AssetConnection.TotalCount == nil {
			break
		}

		return e.complexity.AssetConnection.TotalCount(childComplexity), true

	case "AssetCreatePayload.asset":
		if e.complexity.AssetCreatePayload.Asset == nil {
			break
		}

		return e.complexity.AssetCreatePayload.Asset(childComplexity), true

	case "AssetDeletePayload.deletedID":
		if e.complexity.AssetDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.AssetDeletePayload.DeletedID(childComplexity), true

	case "AssetEdge.cursor":
		if e.complexity.AssetEdge.Cursor == nil {
			break
		}

		return e.complexity.AssetEdge.Cursor(childComplexity), true

	case "AssetEdge.node":
		if e.complexity.AssetEdge.Node == nil {
			break
		}

		return e.complexity.AssetEdge.Node(childComplexity), true

	case "AssetHistory.assetType":
		if e.complexity.AssetHistory.AssetType == nil {
			break
		}

		return e.complexity.AssetHistory.AssetType(childComplexity), true

	case "AssetHistory.categories":
		if e.complexity.AssetHistory.Categories == nil {
			break
		}

		return e.complexity.AssetHistory.Categories(childComplexity), true

	case "AssetHistory.cpe":
		if e.complexity.AssetHistory.Cpe == nil {
			break
		}

		return e.complexity.AssetHistory.Cpe(childComplexity), true

	case "AssetHistory.createdAt":
		if e.complexity.AssetHistory.CreatedAt == nil {
			break
		}

		return e.complexity.AssetHistory.CreatedAt(childComplexity), true

	case "AssetHistory.createdBy":
		if e.complexity.AssetHistory.CreatedBy == nil {
			break
		}

		return e.complexity.AssetHistory.CreatedBy(childComplexity), true

	case "AssetHistory.description":
		if e.complexity.AssetHistory.Description == nil {
			break
		}

		return e.complexity.AssetHistory.Description(childComplexity), true

	case "AssetHistory.historyTime":
		if e.complexity.AssetHistory.HistoryTime == nil {
			break
		}

		return e.complexity.AssetHistory.HistoryTime(childComplexity), true

	case "AssetHistory.id":
		if e.complexity.AssetHistory.ID == nil {
			break
		}

		return e.complexity.AssetHistory.ID(childComplexity), true

	case "AssetHistory.identifier":
		if e.complexity.AssetHistory.Identifier == nil {
			break
		}

		return e.complexity.AssetHistory.Identifier(childComplexity), true

	case "AssetHistory.name":
		if e.complexity.AssetHistory.Name == nil {
			break
		}

		return e.complexity.AssetHistory.Name(childComplexity), true

	case "AssetHistory.operation":
		if e.complexity.AssetHistory.Operation == nil {
			break
		}

		return e.complexity.AssetHistory.Operation(childComplexity), true

	case "AssetHistory.ownerID":
		if e.complexity.AssetHistory.OwnerID == nil {
			break
		}

		return e.complexity.AssetHistory.OwnerID(childComplexity), true

	case "AssetHistory.ref":
		if e.complexity.AssetHistory.Ref == nil {
			break
		}

		return e.complexity.AssetHistory.Ref(childComplexity), true

	case "AssetHistory.tags":
		if e.complexity.AssetHistory.Tags == nil {
			break
		}

		return e.complexity.AssetHistory.Tags(childComplexity), true

	case "AssetHistory.updatedAt":
		if e.complexity.AssetHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.AssetHistory.UpdatedAt(childComplexity), true

	case "AssetHistory.updatedBy":
		if e.complexity.AssetHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.AssetHistory.UpdatedBy(childComplexity), true

	case "AssetHistory.website":
		if e.complexity.AssetHistory.Website == nil {
			break
		}

		return e.complexity.AssetHistory.Website(childComplexity), true

	case "AssetHistoryConnection.edges":
		if e.complexity.AssetHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.AssetHistoryConnection.Edges(childComplexity), true

	case "AssetHistoryConnection.pageInfo":
		if e.complexity.AssetHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.AssetHistoryConnection.PageInfo(childComplexity), true

	case "AssetHistoryConnection.totalCount":
		if e.complexity.AssetHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.AssetHistoryConnection.TotalCount(childComplexity), true

	case "AssetHistoryEdge.cursor":
		if e.complexity.AssetHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.AssetHistoryEdge.Cursor(childComplexity), true

	case "AssetHistoryEdge.node":
		if e.complexity.AssetHistoryEdge.Node == nil {
			break
		}

		return e.complexity.AssetHistoryEdge.Node(childComplexity), true

	case "AssetUpdatePayload.asset":
		if e.complexity.AssetUpdatePayload.Asset == nil {
			break
		}

		return e.complexity.AssetUpdatePayload.Asset(childComplexity), true

	case "AuditLog.changes":
		if e.complexity.AuditLog.Changes == nil {
			break
		}

		return e.complexity.AuditLog.Changes(childComplexity), true

	case "AuditLog.time":
		if e.complexity.AuditLog.HistoryTime == nil {
			break
		}

		return e.complexity.AuditLog.HistoryTime(childComplexity), true

	case "AuditLog.operation":
		if e.complexity.AuditLog.Operation == nil {
			break
		}

		return e.complexity.AuditLog.Operation(childComplexity), true

	case "AuditLog.id":
		if e.complexity.AuditLog.RefID == nil {
			break
		}

		return e.complexity.AuditLog.RefID(childComplexity), true

	case "AuditLog.table":
		if e.complexity.AuditLog.Table == nil {
			break
		}

		return e.complexity.AuditLog.Table(childComplexity), true

	case "AuditLog.updatedBy":
		if e.complexity.AuditLog.UpdatedBy == nil {
			break
		}

		return e.complexity.AuditLog.UpdatedBy(childComplexity), true

	case "AuditLogConnection.edges":
		if e.complexity.AuditLogConnection.Edges == nil {
			break
		}

		return e.complexity.AuditLogConnection.Edges(childComplexity), true

	case "AuditLogConnection.pageInfo":
		if e.complexity.AuditLogConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuditLogConnection.PageInfo(childComplexity), true

	case "AuditLogConnection.totalCount":
		if e.complexity.AuditLogConnection.TotalCount == nil {
			break
		}

		return e.complexity.AuditLogConnection.TotalCount(childComplexity), true

	case "AuditLogEdge.cursor":
		if e.complexity.AuditLogEdge.Cursor == nil {
			break
		}

		return e.complexity.AuditLogEdge.Cursor(childComplexity), true

	case "AuditLogEdge.node":
		if e.complexity.AuditLogEdge.Node == nil {
			break
		}

		return e.complexity.AuditLogEdge.Node(childComplexity), true

	case "Contact.address":
		if e.complexity.Contact.Address == nil {
			break
		}

		return e.complexity.Contact.Address(childComplexity), true

	case "Contact.company":
		if e.complexity.Contact.Company == nil {
			break
		}

		return e.complexity.Contact.Company(childComplexity), true

	case "Contact.createdAt":
		if e.complexity.Contact.CreatedAt == nil {
			break
		}

		return e.complexity.Contact.CreatedAt(childComplexity), true

	case "Contact.createdBy":
		if e.complexity.Contact.CreatedBy == nil {
			break
		}

		return e.complexity.Contact.CreatedBy(childComplexity), true

	case "Contact.email":
		if e.complexity.Contact.Email == nil {
			break
		}

		return e.complexity.Contact.Email(childComplexity), true

	case "Contact.entities":
		if e.complexity.Contact.Entities == nil {
			break
		}

		args, err := ec.field_Contact_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Contact.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Contact.files":
		if e.complexity.Contact.Files == nil {
			break
		}

		args, err := ec.field_Contact_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Contact.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Contact.fullName":
		if e.complexity.Contact.FullName == nil {
			break
		}

		return e.complexity.Contact.FullName(childComplexity), true

	case "Contact.id":
		if e.complexity.Contact.ID == nil {
			break
		}

		return e.complexity.Contact.ID(childComplexity), true

	case "Contact.owner":
		if e.complexity.Contact.Owner == nil {
			break
		}

		return e.complexity.Contact.Owner(childComplexity), true

	case "Contact.ownerID":
		if e.complexity.Contact.OwnerID == nil {
			break
		}

		return e.complexity.Contact.OwnerID(childComplexity), true

	case "Contact.phoneNumber":
		if e.complexity.Contact.PhoneNumber == nil {
			break
		}

		return e.complexity.Contact.PhoneNumber(childComplexity), true

	case "Contact.status":
		if e.complexity.Contact.Status == nil {
			break
		}

		return e.complexity.Contact.Status(childComplexity), true

	case "Contact.tags":
		if e.complexity.Contact.Tags == nil {
			break
		}

		return e.complexity.Contact.Tags(childComplexity), true

	case "Contact.title":
		if e.complexity.Contact.Title == nil {
			break
		}

		return e.complexity.Contact.Title(childComplexity), true

	case "Contact.updatedAt":
		if e.complexity.Contact.UpdatedAt == nil {
			break
		}

		return e.complexity.Contact.UpdatedAt(childComplexity), true

	case "Contact.updatedBy":
		if e.complexity.Contact.UpdatedBy == nil {
			break
		}

		return e.complexity.Contact.UpdatedBy(childComplexity), true

	case "ContactBulkCreatePayload.contacts":
		if e.complexity.ContactBulkCreatePayload.Contacts == nil {
			break
		}

		return e.complexity.ContactBulkCreatePayload.Contacts(childComplexity), true

	case "ContactBulkUpdatePayload.contacts":
		if e.complexity.ContactBulkUpdatePayload.Contacts == nil {
			break
		}

		return e.complexity.ContactBulkUpdatePayload.Contacts(childComplexity), true

	case "ContactBulkUpdatePayload.updatedIDs":
		if e.complexity.ContactBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.ContactBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "ContactConnection.edges":
		if e.complexity.ContactConnection.Edges == nil {
			break
		}

		return e.complexity.ContactConnection.Edges(childComplexity), true

	case "ContactConnection.pageInfo":
		if e.complexity.ContactConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContactConnection.PageInfo(childComplexity), true

	case "ContactConnection.totalCount":
		if e.complexity.ContactConnection.TotalCount == nil {
			break
		}

		return e.complexity.ContactConnection.TotalCount(childComplexity), true

	case "ContactCreatePayload.contact":
		if e.complexity.ContactCreatePayload.Contact == nil {
			break
		}

		return e.complexity.ContactCreatePayload.Contact(childComplexity), true

	case "ContactDeletePayload.deletedID":
		if e.complexity.ContactDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ContactDeletePayload.DeletedID(childComplexity), true

	case "ContactEdge.cursor":
		if e.complexity.ContactEdge.Cursor == nil {
			break
		}

		return e.complexity.ContactEdge.Cursor(childComplexity), true

	case "ContactEdge.node":
		if e.complexity.ContactEdge.Node == nil {
			break
		}

		return e.complexity.ContactEdge.Node(childComplexity), true

	case "ContactHistory.address":
		if e.complexity.ContactHistory.Address == nil {
			break
		}

		return e.complexity.ContactHistory.Address(childComplexity), true

	case "ContactHistory.company":
		if e.complexity.ContactHistory.Company == nil {
			break
		}

		return e.complexity.ContactHistory.Company(childComplexity), true

	case "ContactHistory.createdAt":
		if e.complexity.ContactHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ContactHistory.CreatedAt(childComplexity), true

	case "ContactHistory.createdBy":
		if e.complexity.ContactHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ContactHistory.CreatedBy(childComplexity), true

	case "ContactHistory.email":
		if e.complexity.ContactHistory.Email == nil {
			break
		}

		return e.complexity.ContactHistory.Email(childComplexity), true

	case "ContactHistory.fullName":
		if e.complexity.ContactHistory.FullName == nil {
			break
		}

		return e.complexity.ContactHistory.FullName(childComplexity), true

	case "ContactHistory.historyTime":
		if e.complexity.ContactHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ContactHistory.HistoryTime(childComplexity), true

	case "ContactHistory.id":
		if e.complexity.ContactHistory.ID == nil {
			break
		}

		return e.complexity.ContactHistory.ID(childComplexity), true

	case "ContactHistory.operation":
		if e.complexity.ContactHistory.Operation == nil {
			break
		}

		return e.complexity.ContactHistory.Operation(childComplexity), true

	case "ContactHistory.ownerID":
		if e.complexity.ContactHistory.OwnerID == nil {
			break
		}

		return e.complexity.ContactHistory.OwnerID(childComplexity), true

	case "ContactHistory.phoneNumber":
		if e.complexity.ContactHistory.PhoneNumber == nil {
			break
		}

		return e.complexity.ContactHistory.PhoneNumber(childComplexity), true

	case "ContactHistory.ref":
		if e.complexity.ContactHistory.Ref == nil {
			break
		}

		return e.complexity.ContactHistory.Ref(childComplexity), true

	case "ContactHistory.status":
		if e.complexity.ContactHistory.Status == nil {
			break
		}

		return e.complexity.ContactHistory.Status(childComplexity), true

	case "ContactHistory.tags":
		if e.complexity.ContactHistory.Tags == nil {
			break
		}

		return e.complexity.ContactHistory.Tags(childComplexity), true

	case "ContactHistory.title":
		if e.complexity.ContactHistory.Title == nil {
			break
		}

		return e.complexity.ContactHistory.Title(childComplexity), true

	case "ContactHistory.updatedAt":
		if e.complexity.ContactHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ContactHistory.UpdatedAt(childComplexity), true

	case "ContactHistory.updatedBy":
		if e.complexity.ContactHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ContactHistory.UpdatedBy(childComplexity), true

	case "ContactHistoryConnection.edges":
		if e.complexity.ContactHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ContactHistoryConnection.Edges(childComplexity), true

	case "ContactHistoryConnection.pageInfo":
		if e.complexity.ContactHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContactHistoryConnection.PageInfo(childComplexity), true

	case "ContactHistoryConnection.totalCount":
		if e.complexity.ContactHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ContactHistoryConnection.TotalCount(childComplexity), true

	case "ContactHistoryEdge.cursor":
		if e.complexity.ContactHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ContactHistoryEdge.Cursor(childComplexity), true

	case "ContactHistoryEdge.node":
		if e.complexity.ContactHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ContactHistoryEdge.Node(childComplexity), true

	case "ContactUpdatePayload.contact":
		if e.complexity.ContactUpdatePayload.Contact == nil {
			break
		}

		return e.complexity.ContactUpdatePayload.Contact(childComplexity), true

	case "Control.actionPlans":
		if e.complexity.Control.ActionPlans == nil {
			break
		}

		args, err := ec.field_Control_actionPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ActionPlanOrder), args["where"].(*generated.ActionPlanWhereInput)), true

	case "Control.assessmentMethods":
		if e.complexity.Control.AssessmentMethods == nil {
			break
		}

		return e.complexity.Control.AssessmentMethods(childComplexity), true

	case "Control.assessmentObjectives":
		if e.complexity.Control.AssessmentObjectives == nil {
			break
		}

		return e.complexity.Control.AssessmentObjectives(childComplexity), true

	case "Control.assets":
		if e.complexity.Control.Assets == nil {
			break
		}

		args, err := ec.field_Control_assets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Assets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.AssetOrder), args["where"].(*generated.AssetWhereInput)), true

	case "Control.auditorReferenceID":
		if e.complexity.Control.AuditorReferenceID == nil {
			break
		}

		return e.complexity.Control.AuditorReferenceID(childComplexity), true

	case "Control.blockedGroups":
		if e.complexity.Control.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Control_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Control.category":
		if e.complexity.Control.Category == nil {
			break
		}

		return e.complexity.Control.Category(childComplexity), true

	case "Control.categoryID":
		if e.complexity.Control.CategoryID == nil {
			break
		}

		return e.complexity.Control.CategoryID(childComplexity), true

	case "Control.controlImplementations":
		if e.complexity.Control.ControlImplementations == nil {
			break
		}

		args, err := ec.field_Control_controlImplementations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.ControlImplementations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Control.controlObjectives":
		if e.complexity.Control.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Control_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Control.controlOwner":
		if e.complexity.Control.ControlOwner == nil {
			break
		}

		return e.complexity.Control.ControlOwner(childComplexity), true

	case "Control.controlOwnerID":
		if e.complexity.Control.ControlOwnerID == nil {
			break
		}

		return e.complexity.Control.ControlOwnerID(childComplexity), true

	case "Control.controlQuestions":
		if e.complexity.Control.ControlQuestions == nil {
			break
		}

		return e.complexity.Control.ControlQuestions(childComplexity), true

	case "Control.controlType":
		if e.complexity.Control.ControlType == nil {
			break
		}

		return e.complexity.Control.ControlType(childComplexity), true

	case "Control.createdAt":
		if e.complexity.Control.CreatedAt == nil {
			break
		}

		return e.complexity.Control.CreatedAt(childComplexity), true

	case "Control.createdBy":
		if e.complexity.Control.CreatedBy == nil {
			break
		}

		return e.complexity.Control.CreatedBy(childComplexity), true

	case "Control.delegate":
		if e.complexity.Control.Delegate == nil {
			break
		}

		return e.complexity.Control.Delegate(childComplexity), true

	case "Control.delegateID":
		if e.complexity.Control.DelegateID == nil {
			break
		}

		return e.complexity.Control.DelegateID(childComplexity), true

	case "Control.description":
		if e.complexity.Control.Description == nil {
			break
		}

		return e.complexity.Control.Description(childComplexity), true

	case "Control.displayID":
		if e.complexity.Control.DisplayID == nil {
			break
		}

		return e.complexity.Control.DisplayID(childComplexity), true

	case "Control.editors":
		if e.complexity.Control.Editors == nil {
			break
		}

		args, err := ec.field_Control_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Control.evidence":
		if e.complexity.Control.Evidence == nil {
			break
		}

		args, err := ec.field_Control_evidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Evidence(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EvidenceOrder), args["where"].(*generated.EvidenceWhereInput)), true

	case "Control.exampleEvidence":
		if e.complexity.Control.ExampleEvidence == nil {
			break
		}

		return e.complexity.Control.ExampleEvidence(childComplexity), true

	case "Control.id":
		if e.complexity.Control.ID == nil {
			break
		}

		return e.complexity.Control.ID(childComplexity), true

	case "Control.implementationGuidance":
		if e.complexity.Control.ImplementationGuidance == nil {
			break
		}

		return e.complexity.Control.ImplementationGuidance(childComplexity), true

	case "Control.internalPolicies":
		if e.complexity.Control.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Control_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Control.mappedCategories":
		if e.complexity.Control.MappedCategories == nil {
			break
		}

		return e.complexity.Control.MappedCategories(childComplexity), true

	case "Control.narratives":
		if e.complexity.Control.Narratives == nil {
			break
		}

		args, err := ec.field_Control_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Control.owner":
		if e.complexity.Control.Owner == nil {
			break
		}

		return e.complexity.Control.Owner(childComplexity), true

	case "Control.ownerID":
		if e.complexity.Control.OwnerID == nil {
			break
		}

		return e.complexity.Control.OwnerID(childComplexity), true

	case "Control.procedures":
		if e.complexity.Control.Procedures == nil {
			break
		}

		args, err := ec.field_Control_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Control.programs":
		if e.complexity.Control.Programs == nil {
			break
		}

		args, err := ec.field_Control_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Control.refCode":
		if e.complexity.Control.RefCode == nil {
			break
		}

		return e.complexity.Control.RefCode(childComplexity), true

	case "Control.referenceFramework":
		if e.complexity.Control.ReferenceFramework == nil {
			break
		}

		return e.complexity.Control.ReferenceFramework(childComplexity), true

	case "Control.referenceID":
		if e.complexity.Control.ReferenceID == nil {
			break
		}

		return e.complexity.Control.ReferenceID(childComplexity), true

	case "Control.references":
		if e.complexity.Control.References == nil {
			break
		}

		return e.complexity.Control.References(childComplexity), true

	case "Control.risks":
		if e.complexity.Control.Risks == nil {
			break
		}

		args, err := ec.field_Control_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Control.scans":
		if e.complexity.Control.Scans == nil {
			break
		}

		args, err := ec.field_Control_scans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Scans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Control.scheduledJobs":
		if e.complexity.Control.ScheduledJobs == nil {
			break
		}

		args, err := ec.field_Control_scheduledJobs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.ScheduledJobs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScheduledJobOrder), args["where"].(*generated.ScheduledJobWhereInput)), true

	case "Control.source":
		if e.complexity.Control.Source == nil {
			break
		}

		return e.complexity.Control.Source(childComplexity), true

	case "Control.standard":
		if e.complexity.Control.Standard == nil {
			break
		}

		return e.complexity.Control.Standard(childComplexity), true

	case "Control.standardID":
		if e.complexity.Control.StandardID == nil {
			break
		}

		return e.complexity.Control.StandardID(childComplexity), true

	case "Control.status":
		if e.complexity.Control.Status == nil {
			break
		}

		return e.complexity.Control.Status(childComplexity), true

	case "Control.subcategory":
		if e.complexity.Control.Subcategory == nil {
			break
		}

		return e.complexity.Control.Subcategory(childComplexity), true

	case "Control.subcontrols":
		if e.complexity.Control.Subcontrols == nil {
			break
		}

		args, err := ec.field_Control_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Control.tags":
		if e.complexity.Control.Tags == nil {
			break
		}

		return e.complexity.Control.Tags(childComplexity), true

	case "Control.tasks":
		if e.complexity.Control.Tasks == nil {
			break
		}

		args, err := ec.field_Control_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Control.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Control.updatedAt":
		if e.complexity.Control.UpdatedAt == nil {
			break
		}

		return e.complexity.Control.UpdatedAt(childComplexity), true

	case "Control.updatedBy":
		if e.complexity.Control.UpdatedBy == nil {
			break
		}

		return e.complexity.Control.UpdatedBy(childComplexity), true

	case "ControlBulkCreatePayload.controls":
		if e.complexity.ControlBulkCreatePayload.Controls == nil {
			break
		}

		return e.complexity.ControlBulkCreatePayload.Controls(childComplexity), true

	case "ControlBulkUpdatePayload.controls":
		if e.complexity.ControlBulkUpdatePayload.Controls == nil {
			break
		}

		return e.complexity.ControlBulkUpdatePayload.Controls(childComplexity), true

	case "ControlBulkUpdatePayload.updatedIDs":
		if e.complexity.ControlBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.ControlBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "ControlCategory.name":
		if e.complexity.ControlCategory.Name == nil {
			break
		}

		return e.complexity.ControlCategory.Name(childComplexity), true

	case "ControlCategory.referenceFramework":
		if e.complexity.ControlCategory.ReferenceFramework == nil {
			break
		}

		return e.complexity.ControlCategory.ReferenceFramework(childComplexity), true

	case "ControlCategoryConnection.edges":
		if e.complexity.ControlCategoryConnection.Edges == nil {
			break
		}

		return e.complexity.ControlCategoryConnection.Edges(childComplexity), true

	case "ControlCategoryConnection.pageInfo":
		if e.complexity.ControlCategoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlCategoryConnection.PageInfo(childComplexity), true

	case "ControlCategoryConnection.totalCount":
		if e.complexity.ControlCategoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlCategoryConnection.TotalCount(childComplexity), true

	case "ControlCategoryEdge.node":
		if e.complexity.ControlCategoryEdge.Node == nil {
			break
		}

		return e.complexity.ControlCategoryEdge.Node(childComplexity), true

	case "ControlConnection.edges":
		if e.complexity.ControlConnection.Edges == nil {
			break
		}

		return e.complexity.ControlConnection.Edges(childComplexity), true

	case "ControlConnection.pageInfo":
		if e.complexity.ControlConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlConnection.PageInfo(childComplexity), true

	case "ControlConnection.totalCount":
		if e.complexity.ControlConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlConnection.TotalCount(childComplexity), true

	case "ControlCreatePayload.control":
		if e.complexity.ControlCreatePayload.Control == nil {
			break
		}

		return e.complexity.ControlCreatePayload.Control(childComplexity), true

	case "ControlDeletePayload.deletedID":
		if e.complexity.ControlDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ControlDeletePayload.DeletedID(childComplexity), true

	case "ControlEdge.cursor":
		if e.complexity.ControlEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlEdge.Cursor(childComplexity), true

	case "ControlEdge.node":
		if e.complexity.ControlEdge.Node == nil {
			break
		}

		return e.complexity.ControlEdge.Node(childComplexity), true

	case "ControlGroup.category":
		if e.complexity.ControlGroup.Category == nil {
			break
		}

		return e.complexity.ControlGroup.Category(childComplexity), true

	case "ControlGroup.controls":
		if e.complexity.ControlGroup.Controls == nil {
			break
		}

		return e.complexity.ControlGroup.Controls(childComplexity), true

	case "ControlGroupConnection.edges":
		if e.complexity.ControlGroupConnection.Edges == nil {
			break
		}

		return e.complexity.ControlGroupConnection.Edges(childComplexity), true

	case "ControlGroupEdge.node":
		if e.complexity.ControlGroupEdge.Node == nil {
			break
		}

		return e.complexity.ControlGroupEdge.Node(childComplexity), true

	case "ControlGroupEdge.pageInfo":
		if e.complexity.ControlGroupEdge.PageInfo == nil {
			break
		}

		return e.complexity.ControlGroupEdge.PageInfo(childComplexity), true

	case "ControlHistory.assessmentMethods":
		if e.complexity.ControlHistory.AssessmentMethods == nil {
			break
		}

		return e.complexity.ControlHistory.AssessmentMethods(childComplexity), true

	case "ControlHistory.assessmentObjectives":
		if e.complexity.ControlHistory.AssessmentObjectives == nil {
			break
		}

		return e.complexity.ControlHistory.AssessmentObjectives(childComplexity), true

	case "ControlHistory.auditorReferenceID":
		if e.complexity.ControlHistory.AuditorReferenceID == nil {
			break
		}

		return e.complexity.ControlHistory.AuditorReferenceID(childComplexity), true

	case "ControlHistory.category":
		if e.complexity.ControlHistory.Category == nil {
			break
		}

		return e.complexity.ControlHistory.Category(childComplexity), true

	case "ControlHistory.categoryID":
		if e.complexity.ControlHistory.CategoryID == nil {
			break
		}

		return e.complexity.ControlHistory.CategoryID(childComplexity), true

	case "ControlHistory.controlOwnerID":
		if e.complexity.ControlHistory.ControlOwnerID == nil {
			break
		}

		return e.complexity.ControlHistory.ControlOwnerID(childComplexity), true

	case "ControlHistory.controlQuestions":
		if e.complexity.ControlHistory.ControlQuestions == nil {
			break
		}

		return e.complexity.ControlHistory.ControlQuestions(childComplexity), true

	case "ControlHistory.controlType":
		if e.complexity.ControlHistory.ControlType == nil {
			break
		}

		return e.complexity.ControlHistory.ControlType(childComplexity), true

	case "ControlHistory.createdAt":
		if e.complexity.ControlHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ControlHistory.CreatedAt(childComplexity), true

	case "ControlHistory.createdBy":
		if e.complexity.ControlHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ControlHistory.CreatedBy(childComplexity), true

	case "ControlHistory.delegateID":
		if e.complexity.ControlHistory.DelegateID == nil {
			break
		}

		return e.complexity.ControlHistory.DelegateID(childComplexity), true

	case "ControlHistory.description":
		if e.complexity.ControlHistory.Description == nil {
			break
		}

		return e.complexity.ControlHistory.Description(childComplexity), true

	case "ControlHistory.displayID":
		if e.complexity.ControlHistory.DisplayID == nil {
			break
		}

		return e.complexity.ControlHistory.DisplayID(childComplexity), true

	case "ControlHistory.exampleEvidence":
		if e.complexity.ControlHistory.ExampleEvidence == nil {
			break
		}

		return e.complexity.ControlHistory.ExampleEvidence(childComplexity), true

	case "ControlHistory.historyTime":
		if e.complexity.ControlHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ControlHistory.HistoryTime(childComplexity), true

	case "ControlHistory.id":
		if e.complexity.ControlHistory.ID == nil {
			break
		}

		return e.complexity.ControlHistory.ID(childComplexity), true

	case "ControlHistory.implementationGuidance":
		if e.complexity.ControlHistory.ImplementationGuidance == nil {
			break
		}

		return e.complexity.ControlHistory.ImplementationGuidance(childComplexity), true

	case "ControlHistory.mappedCategories":
		if e.complexity.ControlHistory.MappedCategories == nil {
			break
		}

		return e.complexity.ControlHistory.MappedCategories(childComplexity), true

	case "ControlHistory.operation":
		if e.complexity.ControlHistory.Operation == nil {
			break
		}

		return e.complexity.ControlHistory.Operation(childComplexity), true

	case "ControlHistory.ownerID":
		if e.complexity.ControlHistory.OwnerID == nil {
			break
		}

		return e.complexity.ControlHistory.OwnerID(childComplexity), true

	case "ControlHistory.ref":
		if e.complexity.ControlHistory.Ref == nil {
			break
		}

		return e.complexity.ControlHistory.Ref(childComplexity), true

	case "ControlHistory.refCode":
		if e.complexity.ControlHistory.RefCode == nil {
			break
		}

		return e.complexity.ControlHistory.RefCode(childComplexity), true

	case "ControlHistory.referenceFramework":
		if e.complexity.ControlHistory.ReferenceFramework == nil {
			break
		}

		return e.complexity.ControlHistory.ReferenceFramework(childComplexity), true

	case "ControlHistory.referenceID":
		if e.complexity.ControlHistory.ReferenceID == nil {
			break
		}

		return e.complexity.ControlHistory.ReferenceID(childComplexity), true

	case "ControlHistory.references":
		if e.complexity.ControlHistory.References == nil {
			break
		}

		return e.complexity.ControlHistory.References(childComplexity), true

	case "ControlHistory.source":
		if e.complexity.ControlHistory.Source == nil {
			break
		}

		return e.complexity.ControlHistory.Source(childComplexity), true

	case "ControlHistory.standardID":
		if e.complexity.ControlHistory.StandardID == nil {
			break
		}

		return e.complexity.ControlHistory.StandardID(childComplexity), true

	case "ControlHistory.status":
		if e.complexity.ControlHistory.Status == nil {
			break
		}

		return e.complexity.ControlHistory.Status(childComplexity), true

	case "ControlHistory.subcategory":
		if e.complexity.ControlHistory.Subcategory == nil {
			break
		}

		return e.complexity.ControlHistory.Subcategory(childComplexity), true

	case "ControlHistory.tags":
		if e.complexity.ControlHistory.Tags == nil {
			break
		}

		return e.complexity.ControlHistory.Tags(childComplexity), true

	case "ControlHistory.updatedAt":
		if e.complexity.ControlHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlHistory.UpdatedAt(childComplexity), true

	case "ControlHistory.updatedBy":
		if e.complexity.ControlHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlHistory.UpdatedBy(childComplexity), true

	case "ControlHistoryConnection.edges":
		if e.complexity.ControlHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ControlHistoryConnection.Edges(childComplexity), true

	case "ControlHistoryConnection.pageInfo":
		if e.complexity.ControlHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlHistoryConnection.PageInfo(childComplexity), true

	case "ControlHistoryConnection.totalCount":
		if e.complexity.ControlHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlHistoryConnection.TotalCount(childComplexity), true

	case "ControlHistoryEdge.cursor":
		if e.complexity.ControlHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlHistoryEdge.Cursor(childComplexity), true

	case "ControlHistoryEdge.node":
		if e.complexity.ControlHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ControlHistoryEdge.Node(childComplexity), true

	case "ControlImplementation.blockedGroups":
		if e.complexity.ControlImplementation.BlockedGroups == nil {
			break
		}

		args, err := ec.field_ControlImplementation_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlImplementation.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ControlImplementation.controls":
		if e.complexity.ControlImplementation.Controls == nil {
			break
		}

		args, err := ec.field_ControlImplementation_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlImplementation.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "ControlImplementation.createdAt":
		if e.complexity.ControlImplementation.CreatedAt == nil {
			break
		}

		return e.complexity.ControlImplementation.CreatedAt(childComplexity), true

	case "ControlImplementation.createdBy":
		if e.complexity.ControlImplementation.CreatedBy == nil {
			break
		}

		return e.complexity.ControlImplementation.CreatedBy(childComplexity), true

	case "ControlImplementation.details":
		if e.complexity.ControlImplementation.Details == nil {
			break
		}

		return e.complexity.ControlImplementation.Details(childComplexity), true

	case "ControlImplementation.editors":
		if e.complexity.ControlImplementation.Editors == nil {
			break
		}

		args, err := ec.field_ControlImplementation_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlImplementation.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ControlImplementation.id":
		if e.complexity.ControlImplementation.ID == nil {
			break
		}

		return e.complexity.ControlImplementation.ID(childComplexity), true

	case "ControlImplementation.implementationDate":
		if e.complexity.ControlImplementation.ImplementationDate == nil {
			break
		}

		return e.complexity.ControlImplementation.ImplementationDate(childComplexity), true

	case "ControlImplementation.owner":
		if e.complexity.ControlImplementation.Owner == nil {
			break
		}

		return e.complexity.ControlImplementation.Owner(childComplexity), true

	case "ControlImplementation.ownerID":
		if e.complexity.ControlImplementation.OwnerID == nil {
			break
		}

		return e.complexity.ControlImplementation.OwnerID(childComplexity), true

	case "ControlImplementation.status":
		if e.complexity.ControlImplementation.Status == nil {
			break
		}

		return e.complexity.ControlImplementation.Status(childComplexity), true

	case "ControlImplementation.subcontrols":
		if e.complexity.ControlImplementation.Subcontrols == nil {
			break
		}

		args, err := ec.field_ControlImplementation_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlImplementation.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "ControlImplementation.tags":
		if e.complexity.ControlImplementation.Tags == nil {
			break
		}

		return e.complexity.ControlImplementation.Tags(childComplexity), true

	case "ControlImplementation.tasks":
		if e.complexity.ControlImplementation.Tasks == nil {
			break
		}

		args, err := ec.field_ControlImplementation_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlImplementation.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "ControlImplementation.updatedAt":
		if e.complexity.ControlImplementation.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlImplementation.UpdatedAt(childComplexity), true

	case "ControlImplementation.updatedBy":
		if e.complexity.ControlImplementation.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlImplementation.UpdatedBy(childComplexity), true

	case "ControlImplementation.verificationDate":
		if e.complexity.ControlImplementation.VerificationDate == nil {
			break
		}

		return e.complexity.ControlImplementation.VerificationDate(childComplexity), true

	case "ControlImplementation.verified":
		if e.complexity.ControlImplementation.Verified == nil {
			break
		}

		return e.complexity.ControlImplementation.Verified(childComplexity), true

	case "ControlImplementation.viewers":
		if e.complexity.ControlImplementation.Viewers == nil {
			break
		}

		args, err := ec.field_ControlImplementation_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlImplementation.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ControlImplementationBulkCreatePayload.controlImplementations":
		if e.complexity.ControlImplementationBulkCreatePayload.ControlImplementations == nil {
			break
		}

		return e.complexity.ControlImplementationBulkCreatePayload.ControlImplementations(childComplexity), true

	case "ControlImplementationConnection.edges":
		if e.complexity.ControlImplementationConnection.Edges == nil {
			break
		}

		return e.complexity.ControlImplementationConnection.Edges(childComplexity), true

	case "ControlImplementationConnection.pageInfo":
		if e.complexity.ControlImplementationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlImplementationConnection.PageInfo(childComplexity), true

	case "ControlImplementationConnection.totalCount":
		if e.complexity.ControlImplementationConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlImplementationConnection.TotalCount(childComplexity), true

	case "ControlImplementationCreatePayload.controlImplementation":
		if e.complexity.ControlImplementationCreatePayload.ControlImplementation == nil {
			break
		}

		return e.complexity.ControlImplementationCreatePayload.ControlImplementation(childComplexity), true

	case "ControlImplementationDeletePayload.deletedID":
		if e.complexity.ControlImplementationDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ControlImplementationDeletePayload.DeletedID(childComplexity), true

	case "ControlImplementationEdge.cursor":
		if e.complexity.ControlImplementationEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlImplementationEdge.Cursor(childComplexity), true

	case "ControlImplementationEdge.node":
		if e.complexity.ControlImplementationEdge.Node == nil {
			break
		}

		return e.complexity.ControlImplementationEdge.Node(childComplexity), true

	case "ControlImplementationHistory.createdAt":
		if e.complexity.ControlImplementationHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.CreatedAt(childComplexity), true

	case "ControlImplementationHistory.createdBy":
		if e.complexity.ControlImplementationHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.CreatedBy(childComplexity), true

	case "ControlImplementationHistory.details":
		if e.complexity.ControlImplementationHistory.Details == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.Details(childComplexity), true

	case "ControlImplementationHistory.historyTime":
		if e.complexity.ControlImplementationHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.HistoryTime(childComplexity), true

	case "ControlImplementationHistory.id":
		if e.complexity.ControlImplementationHistory.ID == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.ID(childComplexity), true

	case "ControlImplementationHistory.implementationDate":
		if e.complexity.ControlImplementationHistory.ImplementationDate == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.ImplementationDate(childComplexity), true

	case "ControlImplementationHistory.operation":
		if e.complexity.ControlImplementationHistory.Operation == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.Operation(childComplexity), true

	case "ControlImplementationHistory.ownerID":
		if e.complexity.ControlImplementationHistory.OwnerID == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.OwnerID(childComplexity), true

	case "ControlImplementationHistory.ref":
		if e.complexity.ControlImplementationHistory.Ref == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.Ref(childComplexity), true

	case "ControlImplementationHistory.status":
		if e.complexity.ControlImplementationHistory.Status == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.Status(childComplexity), true

	case "ControlImplementationHistory.tags":
		if e.complexity.ControlImplementationHistory.Tags == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.Tags(childComplexity), true

	case "ControlImplementationHistory.updatedAt":
		if e.complexity.ControlImplementationHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.UpdatedAt(childComplexity), true

	case "ControlImplementationHistory.updatedBy":
		if e.complexity.ControlImplementationHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.UpdatedBy(childComplexity), true

	case "ControlImplementationHistory.verificationDate":
		if e.complexity.ControlImplementationHistory.VerificationDate == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.VerificationDate(childComplexity), true

	case "ControlImplementationHistory.verified":
		if e.complexity.ControlImplementationHistory.Verified == nil {
			break
		}

		return e.complexity.ControlImplementationHistory.Verified(childComplexity), true

	case "ControlImplementationHistoryConnection.edges":
		if e.complexity.ControlImplementationHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ControlImplementationHistoryConnection.Edges(childComplexity), true

	case "ControlImplementationHistoryConnection.pageInfo":
		if e.complexity.ControlImplementationHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlImplementationHistoryConnection.PageInfo(childComplexity), true

	case "ControlImplementationHistoryConnection.totalCount":
		if e.complexity.ControlImplementationHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlImplementationHistoryConnection.TotalCount(childComplexity), true

	case "ControlImplementationHistoryEdge.cursor":
		if e.complexity.ControlImplementationHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlImplementationHistoryEdge.Cursor(childComplexity), true

	case "ControlImplementationHistoryEdge.node":
		if e.complexity.ControlImplementationHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ControlImplementationHistoryEdge.Node(childComplexity), true

	case "ControlImplementationUpdatePayload.controlImplementation":
		if e.complexity.ControlImplementationUpdatePayload.ControlImplementation == nil {
			break
		}

		return e.complexity.ControlImplementationUpdatePayload.ControlImplementation(childComplexity), true

	case "ControlObjective.blockedGroups":
		if e.complexity.ControlObjective.BlockedGroups == nil {
			break
		}

		args, err := ec.field_ControlObjective_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ControlObjective.category":
		if e.complexity.ControlObjective.Category == nil {
			break
		}

		return e.complexity.ControlObjective.Category(childComplexity), true

	case "ControlObjective.controlObjectiveType":
		if e.complexity.ControlObjective.ControlObjectiveType == nil {
			break
		}

		return e.complexity.ControlObjective.ControlObjectiveType(childComplexity), true

	case "ControlObjective.controls":
		if e.complexity.ControlObjective.Controls == nil {
			break
		}

		args, err := ec.field_ControlObjective_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "ControlObjective.createdAt":
		if e.complexity.ControlObjective.CreatedAt == nil {
			break
		}

		return e.complexity.ControlObjective.CreatedAt(childComplexity), true

	case "ControlObjective.createdBy":
		if e.complexity.ControlObjective.CreatedBy == nil {
			break
		}

		return e.complexity.ControlObjective.CreatedBy(childComplexity), true

	case "ControlObjective.desiredOutcome":
		if e.complexity.ControlObjective.DesiredOutcome == nil {
			break
		}

		return e.complexity.ControlObjective.DesiredOutcome(childComplexity), true

	case "ControlObjective.displayID":
		if e.complexity.ControlObjective.DisplayID == nil {
			break
		}

		return e.complexity.ControlObjective.DisplayID(childComplexity), true

	case "ControlObjective.editors":
		if e.complexity.ControlObjective.Editors == nil {
			break
		}

		args, err := ec.field_ControlObjective_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ControlObjective.evidence":
		if e.complexity.ControlObjective.Evidence == nil {
			break
		}

		args, err := ec.field_ControlObjective_evidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Evidence(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EvidenceOrder), args["where"].(*generated.EvidenceWhereInput)), true

	case "ControlObjective.id":
		if e.complexity.ControlObjective.ID == nil {
			break
		}

		return e.complexity.ControlObjective.ID(childComplexity), true

	case "ControlObjective.internalPolicies":
		if e.complexity.ControlObjective.InternalPolicies == nil {
			break
		}

		args, err := ec.field_ControlObjective_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "ControlObjective.name":
		if e.complexity.ControlObjective.Name == nil {
			break
		}

		return e.complexity.ControlObjective.Name(childComplexity), true

	case "ControlObjective.narratives":
		if e.complexity.ControlObjective.Narratives == nil {
			break
		}

		args, err := ec.field_ControlObjective_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "ControlObjective.owner":
		if e.complexity.ControlObjective.Owner == nil {
			break
		}

		return e.complexity.ControlObjective.Owner(childComplexity), true

	case "ControlObjective.ownerID":
		if e.complexity.ControlObjective.OwnerID == nil {
			break
		}

		return e.complexity.ControlObjective.OwnerID(childComplexity), true

	case "ControlObjective.procedures":
		if e.complexity.ControlObjective.Procedures == nil {
			break
		}

		args, err := ec.field_ControlObjective_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "ControlObjective.programs":
		if e.complexity.ControlObjective.Programs == nil {
			break
		}

		args, err := ec.field_ControlObjective_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "ControlObjective.revision":
		if e.complexity.ControlObjective.Revision == nil {
			break
		}

		return e.complexity.ControlObjective.Revision(childComplexity), true

	case "ControlObjective.risks":
		if e.complexity.ControlObjective.Risks == nil {
			break
		}

		args, err := ec.field_ControlObjective_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "ControlObjective.source":
		if e.complexity.ControlObjective.Source == nil {
			break
		}

		return e.complexity.ControlObjective.Source(childComplexity), true

	case "ControlObjective.status":
		if e.complexity.ControlObjective.Status == nil {
			break
		}

		return e.complexity.ControlObjective.Status(childComplexity), true

	case "ControlObjective.subcategory":
		if e.complexity.ControlObjective.Subcategory == nil {
			break
		}

		return e.complexity.ControlObjective.Subcategory(childComplexity), true

	case "ControlObjective.subcontrols":
		if e.complexity.ControlObjective.Subcontrols == nil {
			break
		}

		args, err := ec.field_ControlObjective_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "ControlObjective.tags":
		if e.complexity.ControlObjective.Tags == nil {
			break
		}

		return e.complexity.ControlObjective.Tags(childComplexity), true

	case "ControlObjective.tasks":
		if e.complexity.ControlObjective.Tasks == nil {
			break
		}

		args, err := ec.field_ControlObjective_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "ControlObjective.updatedAt":
		if e.complexity.ControlObjective.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlObjective.UpdatedAt(childComplexity), true

	case "ControlObjective.updatedBy":
		if e.complexity.ControlObjective.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlObjective.UpdatedBy(childComplexity), true

	case "ControlObjective.viewers":
		if e.complexity.ControlObjective.Viewers == nil {
			break
		}

		args, err := ec.field_ControlObjective_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ControlObjective.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ControlObjectiveBulkCreatePayload.controlObjectives":
		if e.complexity.ControlObjectiveBulkCreatePayload.ControlObjectives == nil {
			break
		}

		return e.complexity.ControlObjectiveBulkCreatePayload.ControlObjectives(childComplexity), true

	case "ControlObjectiveConnection.edges":
		if e.complexity.ControlObjectiveConnection.Edges == nil {
			break
		}

		return e.complexity.ControlObjectiveConnection.Edges(childComplexity), true

	case "ControlObjectiveConnection.pageInfo":
		if e.complexity.ControlObjectiveConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlObjectiveConnection.PageInfo(childComplexity), true

	case "ControlObjectiveConnection.totalCount":
		if e.complexity.ControlObjectiveConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlObjectiveConnection.TotalCount(childComplexity), true

	case "ControlObjectiveCreatePayload.controlObjective":
		if e.complexity.ControlObjectiveCreatePayload.ControlObjective == nil {
			break
		}

		return e.complexity.ControlObjectiveCreatePayload.ControlObjective(childComplexity), true

	case "ControlObjectiveDeletePayload.deletedID":
		if e.complexity.ControlObjectiveDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ControlObjectiveDeletePayload.DeletedID(childComplexity), true

	case "ControlObjectiveEdge.cursor":
		if e.complexity.ControlObjectiveEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlObjectiveEdge.Cursor(childComplexity), true

	case "ControlObjectiveEdge.node":
		if e.complexity.ControlObjectiveEdge.Node == nil {
			break
		}

		return e.complexity.ControlObjectiveEdge.Node(childComplexity), true

	case "ControlObjectiveHistory.category":
		if e.complexity.ControlObjectiveHistory.Category == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Category(childComplexity), true

	case "ControlObjectiveHistory.controlObjectiveType":
		if e.complexity.ControlObjectiveHistory.ControlObjectiveType == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.ControlObjectiveType(childComplexity), true

	case "ControlObjectiveHistory.createdAt":
		if e.complexity.ControlObjectiveHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.CreatedAt(childComplexity), true

	case "ControlObjectiveHistory.createdBy":
		if e.complexity.ControlObjectiveHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.CreatedBy(childComplexity), true

	case "ControlObjectiveHistory.desiredOutcome":
		if e.complexity.ControlObjectiveHistory.DesiredOutcome == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.DesiredOutcome(childComplexity), true

	case "ControlObjectiveHistory.displayID":
		if e.complexity.ControlObjectiveHistory.DisplayID == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.DisplayID(childComplexity), true

	case "ControlObjectiveHistory.historyTime":
		if e.complexity.ControlObjectiveHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.HistoryTime(childComplexity), true

	case "ControlObjectiveHistory.id":
		if e.complexity.ControlObjectiveHistory.ID == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.ID(childComplexity), true

	case "ControlObjectiveHistory.name":
		if e.complexity.ControlObjectiveHistory.Name == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Name(childComplexity), true

	case "ControlObjectiveHistory.operation":
		if e.complexity.ControlObjectiveHistory.Operation == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Operation(childComplexity), true

	case "ControlObjectiveHistory.ownerID":
		if e.complexity.ControlObjectiveHistory.OwnerID == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.OwnerID(childComplexity), true

	case "ControlObjectiveHistory.ref":
		if e.complexity.ControlObjectiveHistory.Ref == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Ref(childComplexity), true

	case "ControlObjectiveHistory.revision":
		if e.complexity.ControlObjectiveHistory.Revision == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Revision(childComplexity), true

	case "ControlObjectiveHistory.source":
		if e.complexity.ControlObjectiveHistory.Source == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Source(childComplexity), true

	case "ControlObjectiveHistory.status":
		if e.complexity.ControlObjectiveHistory.Status == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Status(childComplexity), true

	case "ControlObjectiveHistory.subcategory":
		if e.complexity.ControlObjectiveHistory.Subcategory == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Subcategory(childComplexity), true

	case "ControlObjectiveHistory.tags":
		if e.complexity.ControlObjectiveHistory.Tags == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Tags(childComplexity), true

	case "ControlObjectiveHistory.updatedAt":
		if e.complexity.ControlObjectiveHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.UpdatedAt(childComplexity), true

	case "ControlObjectiveHistory.updatedBy":
		if e.complexity.ControlObjectiveHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.UpdatedBy(childComplexity), true

	case "ControlObjectiveHistoryConnection.edges":
		if e.complexity.ControlObjectiveHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryConnection.Edges(childComplexity), true

	case "ControlObjectiveHistoryConnection.pageInfo":
		if e.complexity.ControlObjectiveHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryConnection.PageInfo(childComplexity), true

	case "ControlObjectiveHistoryConnection.totalCount":
		if e.complexity.ControlObjectiveHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryConnection.TotalCount(childComplexity), true

	case "ControlObjectiveHistoryEdge.cursor":
		if e.complexity.ControlObjectiveHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryEdge.Cursor(childComplexity), true

	case "ControlObjectiveHistoryEdge.node":
		if e.complexity.ControlObjectiveHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryEdge.Node(childComplexity), true

	case "ControlObjectiveUpdatePayload.controlObjective":
		if e.complexity.ControlObjectiveUpdatePayload.ControlObjective == nil {
			break
		}

		return e.complexity.ControlObjectiveUpdatePayload.ControlObjective(childComplexity), true

	case "ControlUpdatePayload.control":
		if e.complexity.ControlUpdatePayload.Control == nil {
			break
		}

		return e.complexity.ControlUpdatePayload.Control(childComplexity), true

	case "CustomDomain.cnameRecord":
		if e.complexity.CustomDomain.CnameRecord == nil {
			break
		}

		return e.complexity.CustomDomain.CnameRecord(childComplexity), true

	case "CustomDomain.createdAt":
		if e.complexity.CustomDomain.CreatedAt == nil {
			break
		}

		return e.complexity.CustomDomain.CreatedAt(childComplexity), true

	case "CustomDomain.createdBy":
		if e.complexity.CustomDomain.CreatedBy == nil {
			break
		}

		return e.complexity.CustomDomain.CreatedBy(childComplexity), true

	case "CustomDomain.dnsVerification":
		if e.complexity.CustomDomain.DNSVerification == nil {
			break
		}

		return e.complexity.CustomDomain.DNSVerification(childComplexity), true

	case "CustomDomain.dnsVerificationID":
		if e.complexity.CustomDomain.DNSVerificationID == nil {
			break
		}

		return e.complexity.CustomDomain.DNSVerificationID(childComplexity), true

	case "CustomDomain.id":
		if e.complexity.CustomDomain.ID == nil {
			break
		}

		return e.complexity.CustomDomain.ID(childComplexity), true

	case "CustomDomain.mappableDomain":
		if e.complexity.CustomDomain.MappableDomain == nil {
			break
		}

		return e.complexity.CustomDomain.MappableDomain(childComplexity), true

	case "CustomDomain.mappableDomainID":
		if e.complexity.CustomDomain.MappableDomainID == nil {
			break
		}

		return e.complexity.CustomDomain.MappableDomainID(childComplexity), true

	case "CustomDomain.owner":
		if e.complexity.CustomDomain.Owner == nil {
			break
		}

		return e.complexity.CustomDomain.Owner(childComplexity), true

	case "CustomDomain.ownerID":
		if e.complexity.CustomDomain.OwnerID == nil {
			break
		}

		return e.complexity.CustomDomain.OwnerID(childComplexity), true

	case "CustomDomain.tags":
		if e.complexity.CustomDomain.Tags == nil {
			break
		}

		return e.complexity.CustomDomain.Tags(childComplexity), true

	case "CustomDomain.updatedAt":
		if e.complexity.CustomDomain.UpdatedAt == nil {
			break
		}

		return e.complexity.CustomDomain.UpdatedAt(childComplexity), true

	case "CustomDomain.updatedBy":
		if e.complexity.CustomDomain.UpdatedBy == nil {
			break
		}

		return e.complexity.CustomDomain.UpdatedBy(childComplexity), true

	case "CustomDomainBulkCreatePayload.customDomains":
		if e.complexity.CustomDomainBulkCreatePayload.CustomDomains == nil {
			break
		}

		return e.complexity.CustomDomainBulkCreatePayload.CustomDomains(childComplexity), true

	case "CustomDomainConnection.edges":
		if e.complexity.CustomDomainConnection.Edges == nil {
			break
		}

		return e.complexity.CustomDomainConnection.Edges(childComplexity), true

	case "CustomDomainConnection.pageInfo":
		if e.complexity.CustomDomainConnection.PageInfo == nil {
			break
		}

		return e.complexity.CustomDomainConnection.PageInfo(childComplexity), true

	case "CustomDomainConnection.totalCount":
		if e.complexity.CustomDomainConnection.TotalCount == nil {
			break
		}

		return e.complexity.CustomDomainConnection.TotalCount(childComplexity), true

	case "CustomDomainCreatePayload.customDomain":
		if e.complexity.CustomDomainCreatePayload.CustomDomain == nil {
			break
		}

		return e.complexity.CustomDomainCreatePayload.CustomDomain(childComplexity), true

	case "CustomDomainDeletePayload.deletedID":
		if e.complexity.CustomDomainDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.CustomDomainDeletePayload.DeletedID(childComplexity), true

	case "CustomDomainEdge.cursor":
		if e.complexity.CustomDomainEdge.Cursor == nil {
			break
		}

		return e.complexity.CustomDomainEdge.Cursor(childComplexity), true

	case "CustomDomainEdge.node":
		if e.complexity.CustomDomainEdge.Node == nil {
			break
		}

		return e.complexity.CustomDomainEdge.Node(childComplexity), true

	case "CustomDomainHistory.cnameRecord":
		if e.complexity.CustomDomainHistory.CnameRecord == nil {
			break
		}

		return e.complexity.CustomDomainHistory.CnameRecord(childComplexity), true

	case "CustomDomainHistory.createdAt":
		if e.complexity.CustomDomainHistory.CreatedAt == nil {
			break
		}

		return e.complexity.CustomDomainHistory.CreatedAt(childComplexity), true

	case "CustomDomainHistory.createdBy":
		if e.complexity.CustomDomainHistory.CreatedBy == nil {
			break
		}

		return e.complexity.CustomDomainHistory.CreatedBy(childComplexity), true

	case "CustomDomainHistory.dnsVerificationID":
		if e.complexity.CustomDomainHistory.DNSVerificationID == nil {
			break
		}

		return e.complexity.CustomDomainHistory.DNSVerificationID(childComplexity), true

	case "CustomDomainHistory.historyTime":
		if e.complexity.CustomDomainHistory.HistoryTime == nil {
			break
		}

		return e.complexity.CustomDomainHistory.HistoryTime(childComplexity), true

	case "CustomDomainHistory.id":
		if e.complexity.CustomDomainHistory.ID == nil {
			break
		}

		return e.complexity.CustomDomainHistory.ID(childComplexity), true

	case "CustomDomainHistory.mappableDomainID":
		if e.complexity.CustomDomainHistory.MappableDomainID == nil {
			break
		}

		return e.complexity.CustomDomainHistory.MappableDomainID(childComplexity), true

	case "CustomDomainHistory.operation":
		if e.complexity.CustomDomainHistory.Operation == nil {
			break
		}

		return e.complexity.CustomDomainHistory.Operation(childComplexity), true

	case "CustomDomainHistory.ownerID":
		if e.complexity.CustomDomainHistory.OwnerID == nil {
			break
		}

		return e.complexity.CustomDomainHistory.OwnerID(childComplexity), true

	case "CustomDomainHistory.ref":
		if e.complexity.CustomDomainHistory.Ref == nil {
			break
		}

		return e.complexity.CustomDomainHistory.Ref(childComplexity), true

	case "CustomDomainHistory.tags":
		if e.complexity.CustomDomainHistory.Tags == nil {
			break
		}

		return e.complexity.CustomDomainHistory.Tags(childComplexity), true

	case "CustomDomainHistory.updatedAt":
		if e.complexity.CustomDomainHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.CustomDomainHistory.UpdatedAt(childComplexity), true

	case "CustomDomainHistory.updatedBy":
		if e.complexity.CustomDomainHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.CustomDomainHistory.UpdatedBy(childComplexity), true

	case "CustomDomainHistoryConnection.edges":
		if e.complexity.CustomDomainHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.CustomDomainHistoryConnection.Edges(childComplexity), true

	case "CustomDomainHistoryConnection.pageInfo":
		if e.complexity.CustomDomainHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.CustomDomainHistoryConnection.PageInfo(childComplexity), true

	case "CustomDomainHistoryConnection.totalCount":
		if e.complexity.CustomDomainHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.CustomDomainHistoryConnection.TotalCount(childComplexity), true

	case "CustomDomainHistoryEdge.cursor":
		if e.complexity.CustomDomainHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.CustomDomainHistoryEdge.Cursor(childComplexity), true

	case "CustomDomainHistoryEdge.node":
		if e.complexity.CustomDomainHistoryEdge.Node == nil {
			break
		}

		return e.complexity.CustomDomainHistoryEdge.Node(childComplexity), true

	case "CustomDomainUpdatePayload.customDomain":
		if e.complexity.CustomDomainUpdatePayload.CustomDomain == nil {
			break
		}

		return e.complexity.CustomDomainUpdatePayload.CustomDomain(childComplexity), true

	case "DNSVerification.acmeChallengePath":
		if e.complexity.DNSVerification.AcmeChallengePath == nil {
			break
		}

		return e.complexity.DNSVerification.AcmeChallengePath(childComplexity), true

	case "DNSVerification.acmeChallengeStatus":
		if e.complexity.DNSVerification.AcmeChallengeStatus == nil {
			break
		}

		return e.complexity.DNSVerification.AcmeChallengeStatus(childComplexity), true

	case "DNSVerification.acmeChallengeStatusReason":
		if e.complexity.DNSVerification.AcmeChallengeStatusReason == nil {
			break
		}

		return e.complexity.DNSVerification.AcmeChallengeStatusReason(childComplexity), true

	case "DNSVerification.cloudflareHostnameID":
		if e.complexity.DNSVerification.CloudflareHostnameID == nil {
			break
		}

		return e.complexity.DNSVerification.CloudflareHostnameID(childComplexity), true

	case "DNSVerification.createdAt":
		if e.complexity.DNSVerification.CreatedAt == nil {
			break
		}

		return e.complexity.DNSVerification.CreatedAt(childComplexity), true

	case "DNSVerification.createdBy":
		if e.complexity.DNSVerification.CreatedBy == nil {
			break
		}

		return e.complexity.DNSVerification.CreatedBy(childComplexity), true

	case "DNSVerification.customDomains":
		if e.complexity.DNSVerification.CustomDomains == nil {
			break
		}

		args, err := ec.field_DNSVerification_customDomains_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DNSVerification.CustomDomains(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.CustomDomainOrder), args["where"].(*generated.CustomDomainWhereInput)), true

	case "DNSVerification.dnsTxtRecord":
		if e.complexity.DNSVerification.DNSTxtRecord == nil {
			break
		}

		return e.complexity.DNSVerification.DNSTxtRecord(childComplexity), true

	case "DNSVerification.dnsTxtValue":
		if e.complexity.DNSVerification.DNSTxtValue == nil {
			break
		}

		return e.complexity.DNSVerification.DNSTxtValue(childComplexity), true

	case "DNSVerification.dnsVerificationStatus":
		if e.complexity.DNSVerification.DNSVerificationStatus == nil {
			break
		}

		return e.complexity.DNSVerification.DNSVerificationStatus(childComplexity), true

	case "DNSVerification.dnsVerificationStatusReason":
		if e.complexity.DNSVerification.DNSVerificationStatusReason == nil {
			break
		}

		return e.complexity.DNSVerification.DNSVerificationStatusReason(childComplexity), true

	case "DNSVerification.expectedAcmeChallengeValue":
		if e.complexity.DNSVerification.ExpectedAcmeChallengeValue == nil {
			break
		}

		return e.complexity.DNSVerification.ExpectedAcmeChallengeValue(childComplexity), true

	case "DNSVerification.id":
		if e.complexity.DNSVerification.ID == nil {
			break
		}

		return e.complexity.DNSVerification.ID(childComplexity), true

	case "DNSVerification.owner":
		if e.complexity.DNSVerification.Owner == nil {
			break
		}

		return e.complexity.DNSVerification.Owner(childComplexity), true

	case "DNSVerification.ownerID":
		if e.complexity.DNSVerification.OwnerID == nil {
			break
		}

		return e.complexity.DNSVerification.OwnerID(childComplexity), true

	case "DNSVerification.tags":
		if e.complexity.DNSVerification.Tags == nil {
			break
		}

		return e.complexity.DNSVerification.Tags(childComplexity), true

	case "DNSVerification.updatedAt":
		if e.complexity.DNSVerification.UpdatedAt == nil {
			break
		}

		return e.complexity.DNSVerification.UpdatedAt(childComplexity), true

	case "DNSVerification.updatedBy":
		if e.complexity.DNSVerification.UpdatedBy == nil {
			break
		}

		return e.complexity.DNSVerification.UpdatedBy(childComplexity), true

	case "DNSVerificationBulkCreatePayload.dnsVerifications":
		if e.complexity.DNSVerificationBulkCreatePayload.DNSVerifications == nil {
			break
		}

		return e.complexity.DNSVerificationBulkCreatePayload.DNSVerifications(childComplexity), true

	case "DNSVerificationConnection.edges":
		if e.complexity.DNSVerificationConnection.Edges == nil {
			break
		}

		return e.complexity.DNSVerificationConnection.Edges(childComplexity), true

	case "DNSVerificationConnection.pageInfo":
		if e.complexity.DNSVerificationConnection.PageInfo == nil {
			break
		}

		return e.complexity.DNSVerificationConnection.PageInfo(childComplexity), true

	case "DNSVerificationConnection.totalCount":
		if e.complexity.DNSVerificationConnection.TotalCount == nil {
			break
		}

		return e.complexity.DNSVerificationConnection.TotalCount(childComplexity), true

	case "DNSVerificationCreatePayload.dnsVerification":
		if e.complexity.DNSVerificationCreatePayload.DNSVerification == nil {
			break
		}

		return e.complexity.DNSVerificationCreatePayload.DNSVerification(childComplexity), true

	case "DNSVerificationDeletePayload.deletedID":
		if e.complexity.DNSVerificationDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.DNSVerificationDeletePayload.DeletedID(childComplexity), true

	case "DNSVerificationEdge.cursor":
		if e.complexity.DNSVerificationEdge.Cursor == nil {
			break
		}

		return e.complexity.DNSVerificationEdge.Cursor(childComplexity), true

	case "DNSVerificationEdge.node":
		if e.complexity.DNSVerificationEdge.Node == nil {
			break
		}

		return e.complexity.DNSVerificationEdge.Node(childComplexity), true

	case "DNSVerificationHistory.acmeChallengePath":
		if e.complexity.DNSVerificationHistory.AcmeChallengePath == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.AcmeChallengePath(childComplexity), true

	case "DNSVerificationHistory.acmeChallengeStatus":
		if e.complexity.DNSVerificationHistory.AcmeChallengeStatus == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.AcmeChallengeStatus(childComplexity), true

	case "DNSVerificationHistory.acmeChallengeStatusReason":
		if e.complexity.DNSVerificationHistory.AcmeChallengeStatusReason == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.AcmeChallengeStatusReason(childComplexity), true

	case "DNSVerificationHistory.cloudflareHostnameID":
		if e.complexity.DNSVerificationHistory.CloudflareHostnameID == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.CloudflareHostnameID(childComplexity), true

	case "DNSVerificationHistory.createdAt":
		if e.complexity.DNSVerificationHistory.CreatedAt == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.CreatedAt(childComplexity), true

	case "DNSVerificationHistory.createdBy":
		if e.complexity.DNSVerificationHistory.CreatedBy == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.CreatedBy(childComplexity), true

	case "DNSVerificationHistory.dnsTxtRecord":
		if e.complexity.DNSVerificationHistory.DNSTxtRecord == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.DNSTxtRecord(childComplexity), true

	case "DNSVerificationHistory.dnsTxtValue":
		if e.complexity.DNSVerificationHistory.DNSTxtValue == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.DNSTxtValue(childComplexity), true

	case "DNSVerificationHistory.dnsVerificationStatus":
		if e.complexity.DNSVerificationHistory.DNSVerificationStatus == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.DNSVerificationStatus(childComplexity), true

	case "DNSVerificationHistory.dnsVerificationStatusReason":
		if e.complexity.DNSVerificationHistory.DNSVerificationStatusReason == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.DNSVerificationStatusReason(childComplexity), true

	case "DNSVerificationHistory.expectedAcmeChallengeValue":
		if e.complexity.DNSVerificationHistory.ExpectedAcmeChallengeValue == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.ExpectedAcmeChallengeValue(childComplexity), true

	case "DNSVerificationHistory.historyTime":
		if e.complexity.DNSVerificationHistory.HistoryTime == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.HistoryTime(childComplexity), true

	case "DNSVerificationHistory.id":
		if e.complexity.DNSVerificationHistory.ID == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.ID(childComplexity), true

	case "DNSVerificationHistory.operation":
		if e.complexity.DNSVerificationHistory.Operation == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.Operation(childComplexity), true

	case "DNSVerificationHistory.ownerID":
		if e.complexity.DNSVerificationHistory.OwnerID == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.OwnerID(childComplexity), true

	case "DNSVerificationHistory.ref":
		if e.complexity.DNSVerificationHistory.Ref == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.Ref(childComplexity), true

	case "DNSVerificationHistory.tags":
		if e.complexity.DNSVerificationHistory.Tags == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.Tags(childComplexity), true

	case "DNSVerificationHistory.updatedAt":
		if e.complexity.DNSVerificationHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.UpdatedAt(childComplexity), true

	case "DNSVerificationHistory.updatedBy":
		if e.complexity.DNSVerificationHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.DNSVerificationHistory.UpdatedBy(childComplexity), true

	case "DNSVerificationHistoryConnection.edges":
		if e.complexity.DNSVerificationHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.DNSVerificationHistoryConnection.Edges(childComplexity), true

	case "DNSVerificationHistoryConnection.pageInfo":
		if e.complexity.DNSVerificationHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.DNSVerificationHistoryConnection.PageInfo(childComplexity), true

	case "DNSVerificationHistoryConnection.totalCount":
		if e.complexity.DNSVerificationHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.DNSVerificationHistoryConnection.TotalCount(childComplexity), true

	case "DNSVerificationHistoryEdge.cursor":
		if e.complexity.DNSVerificationHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.DNSVerificationHistoryEdge.Cursor(childComplexity), true

	case "DNSVerificationHistoryEdge.node":
		if e.complexity.DNSVerificationHistoryEdge.Node == nil {
			break
		}

		return e.complexity.DNSVerificationHistoryEdge.Node(childComplexity), true

	case "DNSVerificationUpdatePayload.dnsVerification":
		if e.complexity.DNSVerificationUpdatePayload.DNSVerification == nil {
			break
		}

		return e.complexity.DNSVerificationUpdatePayload.DNSVerification(childComplexity), true

	case "DocumentData.createdAt":
		if e.complexity.DocumentData.CreatedAt == nil {
			break
		}

		return e.complexity.DocumentData.CreatedAt(childComplexity), true

	case "DocumentData.createdBy":
		if e.complexity.DocumentData.CreatedBy == nil {
			break
		}

		return e.complexity.DocumentData.CreatedBy(childComplexity), true

	case "DocumentData.data":
		if e.complexity.DocumentData.Data == nil {
			break
		}

		return e.complexity.DocumentData.Data(childComplexity), true

	case "DocumentData.entities":
		if e.complexity.DocumentData.Entities == nil {
			break
		}

		args, err := ec.field_DocumentData_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DocumentData.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "DocumentData.files":
		if e.complexity.DocumentData.Files == nil {
			break
		}

		args, err := ec.field_DocumentData_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DocumentData.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "DocumentData.id":
		if e.complexity.DocumentData.ID == nil {
			break
		}

		return e.complexity.DocumentData.ID(childComplexity), true

	case "DocumentData.owner":
		if e.complexity.DocumentData.Owner == nil {
			break
		}

		return e.complexity.DocumentData.Owner(childComplexity), true

	case "DocumentData.ownerID":
		if e.complexity.DocumentData.OwnerID == nil {
			break
		}

		return e.complexity.DocumentData.OwnerID(childComplexity), true

	case "DocumentData.tags":
		if e.complexity.DocumentData.Tags == nil {
			break
		}

		return e.complexity.DocumentData.Tags(childComplexity), true

	case "DocumentData.template":
		if e.complexity.DocumentData.Template == nil {
			break
		}

		return e.complexity.DocumentData.Template(childComplexity), true

	case "DocumentData.templateID":
		if e.complexity.DocumentData.TemplateID == nil {
			break
		}

		return e.complexity.DocumentData.TemplateID(childComplexity), true

	case "DocumentData.updatedAt":
		if e.complexity.DocumentData.UpdatedAt == nil {
			break
		}

		return e.complexity.DocumentData.UpdatedAt(childComplexity), true

	case "DocumentData.updatedBy":
		if e.complexity.DocumentData.UpdatedBy == nil {
			break
		}

		return e.complexity.DocumentData.UpdatedBy(childComplexity), true

	case "DocumentDataBulkCreatePayload.documentData":
		if e.complexity.DocumentDataBulkCreatePayload.DocumentData == nil {
			break
		}

		return e.complexity.DocumentDataBulkCreatePayload.DocumentData(childComplexity), true

	case "DocumentDataConnection.edges":
		if e.complexity.DocumentDataConnection.Edges == nil {
			break
		}

		return e.complexity.DocumentDataConnection.Edges(childComplexity), true

	case "DocumentDataConnection.pageInfo":
		if e.complexity.DocumentDataConnection.PageInfo == nil {
			break
		}

		return e.complexity.DocumentDataConnection.PageInfo(childComplexity), true

	case "DocumentDataConnection.totalCount":
		if e.complexity.DocumentDataConnection.TotalCount == nil {
			break
		}

		return e.complexity.DocumentDataConnection.TotalCount(childComplexity), true

	case "DocumentDataCreatePayload.documentData":
		if e.complexity.DocumentDataCreatePayload.DocumentData == nil {
			break
		}

		return e.complexity.DocumentDataCreatePayload.DocumentData(childComplexity), true

	case "DocumentDataDeletePayload.deletedID":
		if e.complexity.DocumentDataDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.DocumentDataDeletePayload.DeletedID(childComplexity), true

	case "DocumentDataEdge.cursor":
		if e.complexity.DocumentDataEdge.Cursor == nil {
			break
		}

		return e.complexity.DocumentDataEdge.Cursor(childComplexity), true

	case "DocumentDataEdge.node":
		if e.complexity.DocumentDataEdge.Node == nil {
			break
		}

		return e.complexity.DocumentDataEdge.Node(childComplexity), true

	case "DocumentDataHistory.createdAt":
		if e.complexity.DocumentDataHistory.CreatedAt == nil {
			break
		}

		return e.complexity.DocumentDataHistory.CreatedAt(childComplexity), true

	case "DocumentDataHistory.createdBy":
		if e.complexity.DocumentDataHistory.CreatedBy == nil {
			break
		}

		return e.complexity.DocumentDataHistory.CreatedBy(childComplexity), true

	case "DocumentDataHistory.data":
		if e.complexity.DocumentDataHistory.Data == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Data(childComplexity), true

	case "DocumentDataHistory.historyTime":
		if e.complexity.DocumentDataHistory.HistoryTime == nil {
			break
		}

		return e.complexity.DocumentDataHistory.HistoryTime(childComplexity), true

	case "DocumentDataHistory.id":
		if e.complexity.DocumentDataHistory.ID == nil {
			break
		}

		return e.complexity.DocumentDataHistory.ID(childComplexity), true

	case "DocumentDataHistory.operation":
		if e.complexity.DocumentDataHistory.Operation == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Operation(childComplexity), true

	case "DocumentDataHistory.ownerID":
		if e.complexity.DocumentDataHistory.OwnerID == nil {
			break
		}

		return e.complexity.DocumentDataHistory.OwnerID(childComplexity), true

	case "DocumentDataHistory.ref":
		if e.complexity.DocumentDataHistory.Ref == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Ref(childComplexity), true

	case "DocumentDataHistory.tags":
		if e.complexity.DocumentDataHistory.Tags == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Tags(childComplexity), true

	case "DocumentDataHistory.templateID":
		if e.complexity.DocumentDataHistory.TemplateID == nil {
			break
		}

		return e.complexity.DocumentDataHistory.TemplateID(childComplexity), true

	case "DocumentDataHistory.updatedAt":
		if e.complexity.DocumentDataHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.DocumentDataHistory.UpdatedAt(childComplexity), true

	case "DocumentDataHistory.updatedBy":
		if e.complexity.DocumentDataHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.DocumentDataHistory.UpdatedBy(childComplexity), true

	case "DocumentDataHistoryConnection.edges":
		if e.complexity.DocumentDataHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.DocumentDataHistoryConnection.Edges(childComplexity), true

	case "DocumentDataHistoryConnection.pageInfo":
		if e.complexity.DocumentDataHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.DocumentDataHistoryConnection.PageInfo(childComplexity), true

	case "DocumentDataHistoryConnection.totalCount":
		if e.complexity.DocumentDataHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.DocumentDataHistoryConnection.TotalCount(childComplexity), true

	case "DocumentDataHistoryEdge.cursor":
		if e.complexity.DocumentDataHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.DocumentDataHistoryEdge.Cursor(childComplexity), true

	case "DocumentDataHistoryEdge.node":
		if e.complexity.DocumentDataHistoryEdge.Node == nil {
			break
		}

		return e.complexity.DocumentDataHistoryEdge.Node(childComplexity), true

	case "DocumentDataUpdatePayload.documentData":
		if e.complexity.DocumentDataUpdatePayload.DocumentData == nil {
			break
		}

		return e.complexity.DocumentDataUpdatePayload.DocumentData(childComplexity), true

	case "Entity.assets":
		if e.complexity.Entity.Assets == nil {
			break
		}

		args, err := ec.field_Entity_assets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Assets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.AssetOrder), args["where"].(*generated.AssetWhereInput)), true

	case "Entity.blockedGroups":
		if e.complexity.Entity.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Entity_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Entity.contacts":
		if e.complexity.Entity.Contacts == nil {
			break
		}

		args, err := ec.field_Entity_contacts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Contacts(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ContactOrder), args["where"].(*generated.ContactWhereInput)), true

	case "Entity.createdAt":
		if e.complexity.Entity.CreatedAt == nil {
			break
		}

		return e.complexity.Entity.CreatedAt(childComplexity), true

	case "Entity.createdBy":
		if e.complexity.Entity.CreatedBy == nil {
			break
		}

		return e.complexity.Entity.CreatedBy(childComplexity), true

	case "Entity.description":
		if e.complexity.Entity.Description == nil {
			break
		}

		return e.complexity.Entity.Description(childComplexity), true

	case "Entity.displayName":
		if e.complexity.Entity.DisplayName == nil {
			break
		}

		return e.complexity.Entity.DisplayName(childComplexity), true

	case "Entity.documents":
		if e.complexity.Entity.Documents == nil {
			break
		}

		args, err := ec.field_Entity_documents_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Documents(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.DocumentDataOrder), args["where"].(*generated.DocumentDataWhereInput)), true

	case "Entity.domains":
		if e.complexity.Entity.Domains == nil {
			break
		}

		return e.complexity.Entity.Domains(childComplexity), true

	case "Entity.editors":
		if e.complexity.Entity.Editors == nil {
			break
		}

		args, err := ec.field_Entity_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Entity.entityType":
		if e.complexity.Entity.EntityType == nil {
			break
		}

		return e.complexity.Entity.EntityType(childComplexity), true

	case "Entity.entityTypeID":
		if e.complexity.Entity.EntityTypeID == nil {
			break
		}

		return e.complexity.Entity.EntityTypeID(childComplexity), true

	case "Entity.files":
		if e.complexity.Entity.Files == nil {
			break
		}

		args, err := ec.field_Entity_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Entity.id":
		if e.complexity.Entity.ID == nil {
			break
		}

		return e.complexity.Entity.ID(childComplexity), true

	case "Entity.name":
		if e.complexity.Entity.Name == nil {
			break
		}

		return e.complexity.Entity.Name(childComplexity), true

	case "Entity.notes":
		if e.complexity.Entity.Notes == nil {
			break
		}

		args, err := ec.field_Entity_notes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Notes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NoteOrder), args["where"].(*generated.NoteWhereInput)), true

	case "Entity.owner":
		if e.complexity.Entity.Owner == nil {
			break
		}

		return e.complexity.Entity.Owner(childComplexity), true

	case "Entity.ownerID":
		if e.complexity.Entity.OwnerID == nil {
			break
		}

		return e.complexity.Entity.OwnerID(childComplexity), true

	case "Entity.scans":
		if e.complexity.Entity.Scans == nil {
			break
		}

		args, err := ec.field_Entity_scans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Scans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Entity.status":
		if e.complexity.Entity.Status == nil {
			break
		}

		return e.complexity.Entity.Status(childComplexity), true

	case "Entity.tags":
		if e.complexity.Entity.Tags == nil {
			break
		}

		return e.complexity.Entity.Tags(childComplexity), true

	case "Entity.updatedAt":
		if e.complexity.Entity.UpdatedAt == nil {
			break
		}

		return e.complexity.Entity.UpdatedAt(childComplexity), true

	case "Entity.updatedBy":
		if e.complexity.Entity.UpdatedBy == nil {
			break
		}

		return e.complexity.Entity.UpdatedBy(childComplexity), true

	case "Entity.viewers":
		if e.complexity.Entity.Viewers == nil {
			break
		}

		args, err := ec.field_Entity_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "EntityBulkCreatePayload.entities":
		if e.complexity.EntityBulkCreatePayload.Entities == nil {
			break
		}

		return e.complexity.EntityBulkCreatePayload.Entities(childComplexity), true

	case "EntityConnection.edges":
		if e.complexity.EntityConnection.Edges == nil {
			break
		}

		return e.complexity.EntityConnection.Edges(childComplexity), true

	case "EntityConnection.pageInfo":
		if e.complexity.EntityConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityConnection.PageInfo(childComplexity), true

	case "EntityConnection.totalCount":
		if e.complexity.EntityConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityConnection.TotalCount(childComplexity), true

	case "EntityCreatePayload.entity":
		if e.complexity.EntityCreatePayload.Entity == nil {
			break
		}

		return e.complexity.EntityCreatePayload.Entity(childComplexity), true

	case "EntityDeletePayload.deletedID":
		if e.complexity.EntityDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.EntityDeletePayload.DeletedID(childComplexity), true

	case "EntityEdge.cursor":
		if e.complexity.EntityEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityEdge.Cursor(childComplexity), true

	case "EntityEdge.node":
		if e.complexity.EntityEdge.Node == nil {
			break
		}

		return e.complexity.EntityEdge.Node(childComplexity), true

	case "EntityHistory.createdAt":
		if e.complexity.EntityHistory.CreatedAt == nil {
			break
		}

		return e.complexity.EntityHistory.CreatedAt(childComplexity), true

	case "EntityHistory.createdBy":
		if e.complexity.EntityHistory.CreatedBy == nil {
			break
		}

		return e.complexity.EntityHistory.CreatedBy(childComplexity), true

	case "EntityHistory.description":
		if e.complexity.EntityHistory.Description == nil {
			break
		}

		return e.complexity.EntityHistory.Description(childComplexity), true

	case "EntityHistory.displayName":
		if e.complexity.EntityHistory.DisplayName == nil {
			break
		}

		return e.complexity.EntityHistory.DisplayName(childComplexity), true

	case "EntityHistory.domains":
		if e.complexity.EntityHistory.Domains == nil {
			break
		}

		return e.complexity.EntityHistory.Domains(childComplexity), true

	case "EntityHistory.entityTypeID":
		if e.complexity.EntityHistory.EntityTypeID == nil {
			break
		}

		return e.complexity.EntityHistory.EntityTypeID(childComplexity), true

	case "EntityHistory.historyTime":
		if e.complexity.EntityHistory.HistoryTime == nil {
			break
		}

		return e.complexity.EntityHistory.HistoryTime(childComplexity), true

	case "EntityHistory.id":
		if e.complexity.EntityHistory.ID == nil {
			break
		}

		return e.complexity.EntityHistory.ID(childComplexity), true

	case "EntityHistory.name":
		if e.complexity.EntityHistory.Name == nil {
			break
		}

		return e.complexity.EntityHistory.Name(childComplexity), true

	case "EntityHistory.operation":
		if e.complexity.EntityHistory.Operation == nil {
			break
		}

		return e.complexity.EntityHistory.Operation(childComplexity), true

	case "EntityHistory.ownerID":
		if e.complexity.EntityHistory.OwnerID == nil {
			break
		}

		return e.complexity.EntityHistory.OwnerID(childComplexity), true

	case "EntityHistory.ref":
		if e.complexity.EntityHistory.Ref == nil {
			break
		}

		return e.complexity.EntityHistory.Ref(childComplexity), true

	case "EntityHistory.status":
		if e.complexity.EntityHistory.Status == nil {
			break
		}

		return e.complexity.EntityHistory.Status(childComplexity), true

	case "EntityHistory.tags":
		if e.complexity.EntityHistory.Tags == nil {
			break
		}

		return e.complexity.EntityHistory.Tags(childComplexity), true

	case "EntityHistory.updatedAt":
		if e.complexity.EntityHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.EntityHistory.UpdatedAt(childComplexity), true

	case "EntityHistory.updatedBy":
		if e.complexity.EntityHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.EntityHistory.UpdatedBy(childComplexity), true

	case "EntityHistoryConnection.edges":
		if e.complexity.EntityHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.EntityHistoryConnection.Edges(childComplexity), true

	case "EntityHistoryConnection.pageInfo":
		if e.complexity.EntityHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityHistoryConnection.PageInfo(childComplexity), true

	case "EntityHistoryConnection.totalCount":
		if e.complexity.EntityHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityHistoryConnection.TotalCount(childComplexity), true

	case "EntityHistoryEdge.cursor":
		if e.complexity.EntityHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityHistoryEdge.Cursor(childComplexity), true

	case "EntityHistoryEdge.node":
		if e.complexity.EntityHistoryEdge.Node == nil {
			break
		}

		return e.complexity.EntityHistoryEdge.Node(childComplexity), true

	case "EntityType.createdAt":
		if e.complexity.EntityType.CreatedAt == nil {
			break
		}

		return e.complexity.EntityType.CreatedAt(childComplexity), true

	case "EntityType.createdBy":
		if e.complexity.EntityType.CreatedBy == nil {
			break
		}

		return e.complexity.EntityType.CreatedBy(childComplexity), true

	case "EntityType.entities":
		if e.complexity.EntityType.Entities == nil {
			break
		}

		args, err := ec.field_EntityType_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EntityType.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "EntityType.id":
		if e.complexity.EntityType.ID == nil {
			break
		}

		return e.complexity.EntityType.ID(childComplexity), true

	case "EntityType.name":
		if e.complexity.EntityType.Name == nil {
			break
		}

		return e.complexity.EntityType.Name(childComplexity), true

	case "EntityType.owner":
		if e.complexity.EntityType.Owner == nil {
			break
		}

		return e.complexity.EntityType.Owner(childComplexity), true

	case "EntityType.ownerID":
		if e.complexity.EntityType.OwnerID == nil {
			break
		}

		return e.complexity.EntityType.OwnerID(childComplexity), true

	case "EntityType.tags":
		if e.complexity.EntityType.Tags == nil {
			break
		}

		return e.complexity.EntityType.Tags(childComplexity), true

	case "EntityType.updatedAt":
		if e.complexity.EntityType.UpdatedAt == nil {
			break
		}

		return e.complexity.EntityType.UpdatedAt(childComplexity), true

	case "EntityType.updatedBy":
		if e.complexity.EntityType.UpdatedBy == nil {
			break
		}

		return e.complexity.EntityType.UpdatedBy(childComplexity), true

	case "EntityTypeBulkCreatePayload.entityTypes":
		if e.complexity.EntityTypeBulkCreatePayload.EntityTypes == nil {
			break
		}

		return e.complexity.EntityTypeBulkCreatePayload.EntityTypes(childComplexity), true

	case "EntityTypeConnection.edges":
		if e.complexity.EntityTypeConnection.Edges == nil {
			break
		}

		return e.complexity.EntityTypeConnection.Edges(childComplexity), true

	case "EntityTypeConnection.pageInfo":
		if e.complexity.EntityTypeConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityTypeConnection.PageInfo(childComplexity), true

	case "EntityTypeConnection.totalCount":
		if e.complexity.EntityTypeConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityTypeConnection.TotalCount(childComplexity), true

	case "EntityTypeCreatePayload.entityType":
		if e.complexity.EntityTypeCreatePayload.EntityType == nil {
			break
		}

		return e.complexity.EntityTypeCreatePayload.EntityType(childComplexity), true

	case "EntityTypeDeletePayload.deletedID":
		if e.complexity.EntityTypeDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.EntityTypeDeletePayload.DeletedID(childComplexity), true

	case "EntityTypeEdge.cursor":
		if e.complexity.EntityTypeEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityTypeEdge.Cursor(childComplexity), true

	case "EntityTypeEdge.node":
		if e.complexity.EntityTypeEdge.Node == nil {
			break
		}

		return e.complexity.EntityTypeEdge.Node(childComplexity), true

	case "EntityTypeHistory.createdAt":
		if e.complexity.EntityTypeHistory.CreatedAt == nil {
			break
		}

		return e.complexity.EntityTypeHistory.CreatedAt(childComplexity), true

	case "EntityTypeHistory.createdBy":
		if e.complexity.EntityTypeHistory.CreatedBy == nil {
			break
		}

		return e.complexity.EntityTypeHistory.CreatedBy(childComplexity), true

	case "EntityTypeHistory.historyTime":
		if e.complexity.EntityTypeHistory.HistoryTime == nil {
			break
		}

		return e.complexity.EntityTypeHistory.HistoryTime(childComplexity), true

	case "EntityTypeHistory.id":
		if e.complexity.EntityTypeHistory.ID == nil {
			break
		}

		return e.complexity.EntityTypeHistory.ID(childComplexity), true

	case "EntityTypeHistory.name":
		if e.complexity.EntityTypeHistory.Name == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Name(childComplexity), true

	case "EntityTypeHistory.operation":
		if e.complexity.EntityTypeHistory.Operation == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Operation(childComplexity), true

	case "EntityTypeHistory.ownerID":
		if e.complexity.EntityTypeHistory.OwnerID == nil {
			break
		}

		return e.complexity.EntityTypeHistory.OwnerID(childComplexity), true

	case "EntityTypeHistory.ref":
		if e.complexity.EntityTypeHistory.Ref == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Ref(childComplexity), true

	case "EntityTypeHistory.tags":
		if e.complexity.EntityTypeHistory.Tags == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Tags(childComplexity), true

	case "EntityTypeHistory.updatedAt":
		if e.complexity.EntityTypeHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.EntityTypeHistory.UpdatedAt(childComplexity), true

	case "EntityTypeHistory.updatedBy":
		if e.complexity.EntityTypeHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.EntityTypeHistory.UpdatedBy(childComplexity), true

	case "EntityTypeHistoryConnection.edges":
		if e.complexity.EntityTypeHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.EntityTypeHistoryConnection.Edges(childComplexity), true

	case "EntityTypeHistoryConnection.pageInfo":
		if e.complexity.EntityTypeHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityTypeHistoryConnection.PageInfo(childComplexity), true

	case "EntityTypeHistoryConnection.totalCount":
		if e.complexity.EntityTypeHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityTypeHistoryConnection.TotalCount(childComplexity), true

	case "EntityTypeHistoryEdge.cursor":
		if e.complexity.EntityTypeHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityTypeHistoryEdge.Cursor(childComplexity), true

	case "EntityTypeHistoryEdge.node":
		if e.complexity.EntityTypeHistoryEdge.Node == nil {
			break
		}

		return e.complexity.EntityTypeHistoryEdge.Node(childComplexity), true

	case "EntityTypeUpdatePayload.entityType":
		if e.complexity.EntityTypeUpdatePayload.EntityType == nil {
			break
		}

		return e.complexity.EntityTypeUpdatePayload.EntityType(childComplexity), true

	case "EntityUpdatePayload.entity":
		if e.complexity.EntityUpdatePayload.Entity == nil {
			break
		}

		return e.complexity.EntityUpdatePayload.Entity(childComplexity), true

	case "Event.correlationID":
		if e.complexity.Event.CorrelationID == nil {
			break
		}

		return e.complexity.Event.CorrelationID(childComplexity), true

	case "Event.createdAt":
		if e.complexity.Event.CreatedAt == nil {
			break
		}

		return e.complexity.Event.CreatedAt(childComplexity), true

	case "Event.createdBy":
		if e.complexity.Event.CreatedBy == nil {
			break
		}

		return e.complexity.Event.CreatedBy(childComplexity), true

	case "Event.eventID":
		if e.complexity.Event.EventID == nil {
			break
		}

		return e.complexity.Event.EventID(childComplexity), true

	case "Event.eventType":
		if e.complexity.Event.EventType == nil {
			break
		}

		return e.complexity.Event.EventType(childComplexity), true

	case "Event.files":
		if e.complexity.Event.Files == nil {
			break
		}

		args, err := ec.field_Event_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Event.groupMemberships":
		if e.complexity.Event.GroupMemberships == nil {
			break
		}

		args, err := ec.field_Event_groupMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.GroupMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupMembershipOrder), args["where"].(*generated.GroupMembershipWhereInput)), true

	case "Event.groups":
		if e.complexity.Event.Groups == nil {
			break
		}

		args, err := ec.field_Event_groups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Event.id":
		if e.complexity.Event.ID == nil {
			break
		}

		return e.complexity.Event.ID(childComplexity), true

	case "Event.integrations":
		if e.complexity.Event.Integrations == nil {
			break
		}

		args, err := ec.field_Event_integrations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Integrations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.IntegrationOrder), args["where"].(*generated.IntegrationWhereInput)), true

	case "Event.invites":
		if e.complexity.Event.Invites == nil {
			break
		}

		args, err := ec.field_Event_invites_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Invites(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InviteOrder), args["where"].(*generated.InviteWhereInput)), true

	case "Event.metadata":
		if e.complexity.Event.Metadata == nil {
			break
		}

		return e.complexity.Event.Metadata(childComplexity), true

	case "Event.orgMemberships":
		if e.complexity.Event.OrgMemberships == nil {
			break
		}

		args, err := ec.field_Event_orgMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.OrgMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrgMembershipOrder), args["where"].(*generated.OrgMembershipWhereInput)), true

	case "Event.orgSubscriptions":
		if e.complexity.Event.OrgSubscriptions == nil {
			break
		}

		args, err := ec.field_Event_orgSubscriptions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.OrgSubscriptions(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrgSubscriptionOrder), args["where"].(*generated.OrgSubscriptionWhereInput)), true

	case "Event.organizations":
		if e.complexity.Event.Organizations == nil {
			break
		}

		args, err := ec.field_Event_organizations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Organizations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrganizationOrder), args["where"].(*generated.OrganizationWhereInput)), true

	case "Event.personalAccessTokens":
		if e.complexity.Event.PersonalAccessTokens == nil {
			break
		}

		args, err := ec.field_Event_personalAccessTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.PersonalAccessTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.PersonalAccessTokenOrder), args["where"].(*generated.PersonalAccessTokenWhereInput)), true

	case "Event.secrets":
		if e.complexity.Event.Secrets == nil {
			break
		}

		args, err := ec.field_Event_secrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Secrets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.HushOrder), args["where"].(*generated.HushWhereInput)), true

	case "Event.subscribers":
		if e.complexity.Event.Subscribers == nil {
			break
		}

		args, err := ec.field_Event_subscribers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Subscribers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubscriberOrder), args["where"].(*generated.SubscriberWhereInput)), true

	case "Event.tags":
		if e.complexity.Event.Tags == nil {
			break
		}

		return e.complexity.Event.Tags(childComplexity), true

	case "Event.updatedAt":
		if e.complexity.Event.UpdatedAt == nil {
			break
		}

		return e.complexity.Event.UpdatedAt(childComplexity), true

	case "Event.updatedBy":
		if e.complexity.Event.UpdatedBy == nil {
			break
		}

		return e.complexity.Event.UpdatedBy(childComplexity), true

	case "Event.users":
		if e.complexity.Event.Users == nil {
			break
		}

		args, err := ec.field_Event_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Users(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.UserOrder), args["where"].(*generated.UserWhereInput)), true

	case "EventBulkCreatePayload.events":
		if e.complexity.EventBulkCreatePayload.Events == nil {
			break
		}

		return e.complexity.EventBulkCreatePayload.Events(childComplexity), true

	case "EventConnection.edges":
		if e.complexity.EventConnection.Edges == nil {
			break
		}

		return e.complexity.EventConnection.Edges(childComplexity), true

	case "EventConnection.pageInfo":
		if e.complexity.EventConnection.PageInfo == nil {
			break
		}

		return e.complexity.EventConnection.PageInfo(childComplexity), true

	case "EventConnection.totalCount":
		if e.complexity.EventConnection.TotalCount == nil {
			break
		}

		return e.complexity.EventConnection.TotalCount(childComplexity), true

	case "EventCreatePayload.event":
		if e.complexity.EventCreatePayload.Event == nil {
			break
		}

		return e.complexity.EventCreatePayload.Event(childComplexity), true

	case "EventDeletePayload.deletedID":
		if e.complexity.EventDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.EventDeletePayload.DeletedID(childComplexity), true

	case "EventEdge.cursor":
		if e.complexity.EventEdge.Cursor == nil {
			break
		}

		return e.complexity.EventEdge.Cursor(childComplexity), true

	case "EventEdge.node":
		if e.complexity.EventEdge.Node == nil {
			break
		}

		return e.complexity.EventEdge.Node(childComplexity), true

	case "EventUpdatePayload.event":
		if e.complexity.EventUpdatePayload.Event == nil {
			break
		}

		return e.complexity.EventUpdatePayload.Event(childComplexity), true

	case "Evidence.collectionProcedure":
		if e.complexity.Evidence.CollectionProcedure == nil {
			break
		}

		return e.complexity.Evidence.CollectionProcedure(childComplexity), true

	case "Evidence.controlImplementations":
		if e.complexity.Evidence.ControlImplementations == nil {
			break
		}

		args, err := ec.field_Evidence_controlImplementations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Evidence.ControlImplementations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Evidence.controlObjectives":
		if e.complexity.Evidence.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Evidence_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Evidence.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Evidence.controls":
		if e.complexity.Evidence.Controls == nil {
			break
		}

		args, err := ec.field_Evidence_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Evidence.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Evidence.createdAt":
		if e.complexity.Evidence.CreatedAt == nil {
			break
		}

		return e.complexity.Evidence.CreatedAt(childComplexity), true

	case "Evidence.createdBy":
		if e.complexity.Evidence.CreatedBy == nil {
			break
		}

		return e.complexity.Evidence.CreatedBy(childComplexity), true

	case "Evidence.creationDate":
		if e.complexity.Evidence.CreationDate == nil {
			break
		}

		return e.complexity.Evidence.CreationDate(childComplexity), true

	case "Evidence.description":
		if e.complexity.Evidence.Description == nil {
			break
		}

		return e.complexity.Evidence.Description(childComplexity), true

	case "Evidence.displayID":
		if e.complexity.Evidence.DisplayID == nil {
			break
		}

		return e.complexity.Evidence.DisplayID(childComplexity), true

	case "Evidence.files":
		if e.complexity.Evidence.Files == nil {
			break
		}

		args, err := ec.field_Evidence_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Evidence.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Evidence.id":
		if e.complexity.Evidence.ID == nil {
			break
		}

		return e.complexity.Evidence.ID(childComplexity), true

	case "Evidence.isAutomated":
		if e.complexity.Evidence.IsAutomated == nil {
			break
		}

		return e.complexity.Evidence.IsAutomated(childComplexity), true

	case "Evidence.name":
		if e.complexity.Evidence.Name == nil {
			break
		}

		return e.complexity.Evidence.Name(childComplexity), true

	case "Evidence.owner":
		if e.complexity.Evidence.Owner == nil {
			break
		}

		return e.complexity.Evidence.Owner(childComplexity), true

	case "Evidence.ownerID":
		if e.complexity.Evidence.OwnerID == nil {
			break
		}

		return e.complexity.Evidence.OwnerID(childComplexity), true

	case "Evidence.programs":
		if e.complexity.Evidence.Programs == nil {
			break
		}

		args, err := ec.field_Evidence_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Evidence.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Evidence.renewalDate":
		if e.complexity.Evidence.RenewalDate == nil {
			break
		}

		return e.complexity.Evidence.RenewalDate(childComplexity), true

	case "Evidence.source":
		if e.complexity.Evidence.Source == nil {
			break
		}

		return e.complexity.Evidence.Source(childComplexity), true

	case "Evidence.status":
		if e.complexity.Evidence.Status == nil {
			break
		}

		return e.complexity.Evidence.Status(childComplexity), true

	case "Evidence.subcontrols":
		if e.complexity.Evidence.Subcontrols == nil {
			break
		}

		args, err := ec.field_Evidence_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Evidence.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Evidence.tags":
		if e.complexity.Evidence.Tags == nil {
			break
		}

		return e.complexity.Evidence.Tags(childComplexity), true

	case "Evidence.tasks":
		if e.complexity.Evidence.Tasks == nil {
			break
		}

		args, err := ec.field_Evidence_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Evidence.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Evidence.url":
		if e.complexity.Evidence.URL == nil {
			break
		}

		return e.complexity.Evidence.URL(childComplexity), true

	case "Evidence.updatedAt":
		if e.complexity.Evidence.UpdatedAt == nil {
			break
		}

		return e.complexity.Evidence.UpdatedAt(childComplexity), true

	case "Evidence.updatedBy":
		if e.complexity.Evidence.UpdatedBy == nil {
			break
		}

		return e.complexity.Evidence.UpdatedBy(childComplexity), true

	case "EvidenceBulkCreatePayload.evidences":
		if e.complexity.EvidenceBulkCreatePayload.Evidences == nil {
			break
		}

		return e.complexity.EvidenceBulkCreatePayload.Evidences(childComplexity), true

	case "EvidenceConnection.edges":
		if e.complexity.EvidenceConnection.Edges == nil {
			break
		}

		return e.complexity.EvidenceConnection.Edges(childComplexity), true

	case "EvidenceConnection.pageInfo":
		if e.complexity.EvidenceConnection.PageInfo == nil {
			break
		}

		return e.complexity.EvidenceConnection.PageInfo(childComplexity), true

	case "EvidenceConnection.totalCount":
		if e.complexity.EvidenceConnection.TotalCount == nil {
			break
		}

		return e.complexity.EvidenceConnection.TotalCount(childComplexity), true

	case "EvidenceCreatePayload.evidence":
		if e.complexity.EvidenceCreatePayload.Evidence == nil {
			break
		}

		return e.complexity.EvidenceCreatePayload.Evidence(childComplexity), true

	case "EvidenceDeletePayload.deletedID":
		if e.complexity.EvidenceDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.EvidenceDeletePayload.DeletedID(childComplexity), true

	case "EvidenceEdge.cursor":
		if e.complexity.EvidenceEdge.Cursor == nil {
			break
		}

		return e.complexity.EvidenceEdge.Cursor(childComplexity), true

	case "EvidenceEdge.node":
		if e.complexity.EvidenceEdge.Node == nil {
			break
		}

		return e.complexity.EvidenceEdge.Node(childComplexity), true

	case "EvidenceHistory.collectionProcedure":
		if e.complexity.EvidenceHistory.CollectionProcedure == nil {
			break
		}

		return e.complexity.EvidenceHistory.CollectionProcedure(childComplexity), true

	case "EvidenceHistory.createdAt":
		if e.complexity.EvidenceHistory.CreatedAt == nil {
			break
		}

		return e.complexity.EvidenceHistory.CreatedAt(childComplexity), true

	case "EvidenceHistory.createdBy":
		if e.complexity.EvidenceHistory.CreatedBy == nil {
			break
		}

		return e.complexity.EvidenceHistory.CreatedBy(childComplexity), true

	case "EvidenceHistory.creationDate":
		if e.complexity.EvidenceHistory.CreationDate == nil {
			break
		}

		return e.complexity.EvidenceHistory.CreationDate(childComplexity), true

	case "EvidenceHistory.description":
		if e.complexity.EvidenceHistory.Description == nil {
			break
		}

		return e.complexity.EvidenceHistory.Description(childComplexity), true

	case "EvidenceHistory.displayID":
		if e.complexity.EvidenceHistory.DisplayID == nil {
			break
		}

		return e.complexity.EvidenceHistory.DisplayID(childComplexity), true

	case "EvidenceHistory.historyTime":
		if e.complexity.EvidenceHistory.HistoryTime == nil {
			break
		}

		return e.complexity.EvidenceHistory.HistoryTime(childComplexity), true

	case "EvidenceHistory.id":
		if e.complexity.EvidenceHistory.ID == nil {
			break
		}

		return e.complexity.EvidenceHistory.ID(childComplexity), true

	case "EvidenceHistory.isAutomated":
		if e.complexity.EvidenceHistory.IsAutomated == nil {
			break
		}

		return e.complexity.EvidenceHistory.IsAutomated(childComplexity), true

	case "EvidenceHistory.name":
		if e.complexity.EvidenceHistory.Name == nil {
			break
		}

		return e.complexity.EvidenceHistory.Name(childComplexity), true

	case "EvidenceHistory.operation":
		if e.complexity.EvidenceHistory.Operation == nil {
			break
		}

		return e.complexity.EvidenceHistory.Operation(childComplexity), true

	case "EvidenceHistory.ownerID":
		if e.complexity.EvidenceHistory.OwnerID == nil {
			break
		}

		return e.complexity.EvidenceHistory.OwnerID(childComplexity), true

	case "EvidenceHistory.ref":
		if e.complexity.EvidenceHistory.Ref == nil {
			break
		}

		return e.complexity.EvidenceHistory.Ref(childComplexity), true

	case "EvidenceHistory.renewalDate":
		if e.complexity.EvidenceHistory.RenewalDate == nil {
			break
		}

		return e.complexity.EvidenceHistory.RenewalDate(childComplexity), true

	case "EvidenceHistory.source":
		if e.complexity.EvidenceHistory.Source == nil {
			break
		}

		return e.complexity.EvidenceHistory.Source(childComplexity), true

	case "EvidenceHistory.status":
		if e.complexity.EvidenceHistory.Status == nil {
			break
		}

		return e.complexity.EvidenceHistory.Status(childComplexity), true

	case "EvidenceHistory.tags":
		if e.complexity.EvidenceHistory.Tags == nil {
			break
		}

		return e.complexity.EvidenceHistory.Tags(childComplexity), true

	case "EvidenceHistory.url":
		if e.complexity.EvidenceHistory.URL == nil {
			break
		}

		return e.complexity.EvidenceHistory.URL(childComplexity), true

	case "EvidenceHistory.updatedAt":
		if e.complexity.EvidenceHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.EvidenceHistory.UpdatedAt(childComplexity), true

	case "EvidenceHistory.updatedBy":
		if e.complexity.EvidenceHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.EvidenceHistory.UpdatedBy(childComplexity), true

	case "EvidenceHistoryConnection.edges":
		if e.complexity.EvidenceHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.EvidenceHistoryConnection.Edges(childComplexity), true

	case "EvidenceHistoryConnection.pageInfo":
		if e.complexity.EvidenceHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.EvidenceHistoryConnection.PageInfo(childComplexity), true

	case "EvidenceHistoryConnection.totalCount":
		if e.complexity.EvidenceHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.EvidenceHistoryConnection.TotalCount(childComplexity), true

	case "EvidenceHistoryEdge.cursor":
		if e.complexity.EvidenceHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.EvidenceHistoryEdge.Cursor(childComplexity), true

	case "EvidenceHistoryEdge.node":
		if e.complexity.EvidenceHistoryEdge.Node == nil {
			break
		}

		return e.complexity.EvidenceHistoryEdge.Node(childComplexity), true

	case "EvidenceUpdatePayload.evidence":
		if e.complexity.EvidenceUpdatePayload.Evidence == nil {
			break
		}

		return e.complexity.EvidenceUpdatePayload.Evidence(childComplexity), true

	case "Export.createdAt":
		if e.complexity.Export.CreatedAt == nil {
			break
		}

		return e.complexity.Export.CreatedAt(childComplexity), true

	case "Export.createdBy":
		if e.complexity.Export.CreatedBy == nil {
			break
		}

		return e.complexity.Export.CreatedBy(childComplexity), true

	case "Export.errorMessage":
		if e.complexity.Export.ErrorMessage == nil {
			break
		}

		return e.complexity.Export.ErrorMessage(childComplexity), true

	case "Export.events":
		if e.complexity.Export.Events == nil {
			break
		}

		args, err := ec.field_Export_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Export.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Export.exportType":
		if e.complexity.Export.ExportType == nil {
			break
		}

		return e.complexity.Export.ExportType(childComplexity), true

	case "Export.fields":
		if e.complexity.Export.Fields == nil {
			break
		}

		return e.complexity.Export.Fields(childComplexity), true

	case "Export.files":
		if e.complexity.Export.Files == nil {
			break
		}

		args, err := ec.field_Export_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Export.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Export.filters":
		if e.complexity.Export.Filters == nil {
			break
		}

		return e.complexity.Export.Filters(childComplexity), true

	case "Export.format":
		if e.complexity.Export.Format == nil {
			break
		}

		return e.complexity.Export.Format(childComplexity), true

	case "Export.id":
		if e.complexity.Export.ID == nil {
			break
		}

		return e.complexity.Export.ID(childComplexity), true

	case "Export.owner":
		if e.complexity.Export.Owner == nil {
			break
		}

		return e.complexity.Export.Owner(childComplexity), true

	case "Export.ownerID":
		if e.complexity.Export.OwnerID == nil {
			break
		}

		return e.complexity.Export.OwnerID(childComplexity), true

	case "Export.requestorID":
		if e.complexity.Export.RequestorID == nil {
			break
		}

		return e.complexity.Export.RequestorID(childComplexity), true

	case "Export.status":
		if e.complexity.Export.Status == nil {
			break
		}

		return e.complexity.Export.Status(childComplexity), true

	case "Export.updatedAt":
		if e.complexity.Export.UpdatedAt == nil {
			break
		}

		return e.complexity.Export.UpdatedAt(childComplexity), true

	case "Export.updatedBy":
		if e.complexity.Export.UpdatedBy == nil {
			break
		}

		return e.complexity.Export.UpdatedBy(childComplexity), true

	case "ExportBulkCreatePayload.exports":
		if e.complexity.ExportBulkCreatePayload.Exports == nil {
			break
		}

		return e.complexity.ExportBulkCreatePayload.Exports(childComplexity), true

	case "ExportBulkDeletePayload.deletedIDs":
		if e.complexity.ExportBulkDeletePayload.DeletedIDs == nil {
			break
		}

		return e.complexity.ExportBulkDeletePayload.DeletedIDs(childComplexity), true

	case "ExportConnection.edges":
		if e.complexity.ExportConnection.Edges == nil {
			break
		}

		return e.complexity.ExportConnection.Edges(childComplexity), true

	case "ExportConnection.pageInfo":
		if e.complexity.ExportConnection.PageInfo == nil {
			break
		}

		return e.complexity.ExportConnection.PageInfo(childComplexity), true

	case "ExportConnection.totalCount":
		if e.complexity.ExportConnection.TotalCount == nil {
			break
		}

		return e.complexity.ExportConnection.TotalCount(childComplexity), true

	case "ExportCreatePayload.export":
		if e.complexity.ExportCreatePayload.Export == nil {
			break
		}

		return e.complexity.ExportCreatePayload.Export(childComplexity), true

	case "ExportDeletePayload.deletedID":
		if e.complexity.ExportDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ExportDeletePayload.DeletedID(childComplexity), true

	case "ExportEdge.cursor":
		if e.complexity.ExportEdge.Cursor == nil {
			break
		}

		return e.complexity.ExportEdge.Cursor(childComplexity), true

	case "ExportEdge.node":
		if e.complexity.ExportEdge.Node == nil {
			break
		}

		return e.complexity.ExportEdge.Node(childComplexity), true

	case "ExportUpdatePayload.export":
		if e.complexity.ExportUpdatePayload.Export == nil {
			break
		}

		return e.complexity.ExportUpdatePayload.Export(childComplexity), true

	case "File.categoryType":
		if e.complexity.File.CategoryType == nil {
			break
		}

		return e.complexity.File.CategoryType(childComplexity), true

	case "File.contact":
		if e.complexity.File.Contact == nil {
			break
		}

		return e.complexity.File.Contact(childComplexity), true

	case "File.createdAt":
		if e.complexity.File.CreatedAt == nil {
			break
		}

		return e.complexity.File.CreatedAt(childComplexity), true

	case "File.createdBy":
		if e.complexity.File.CreatedBy == nil {
			break
		}

		return e.complexity.File.CreatedBy(childComplexity), true

	case "File.detectedContentType":
		if e.complexity.File.DetectedContentType == nil {
			break
		}

		return e.complexity.File.DetectedContentType(childComplexity), true

	case "File.detectedMimeType":
		if e.complexity.File.DetectedMimeType == nil {
			break
		}

		return e.complexity.File.DetectedMimeType(childComplexity), true

	case "File.document":
		if e.complexity.File.Document == nil {
			break
		}

		return e.complexity.File.Document(childComplexity), true

	case "File.entity":
		if e.complexity.File.Entity == nil {
			break
		}

		return e.complexity.File.Entity(childComplexity), true

	case "File.events":
		if e.complexity.File.Events == nil {
			break
		}

		args, err := ec.field_File_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.File.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "File.evidence":
		if e.complexity.File.Evidence == nil {
			break
		}

		return e.complexity.File.Evidence(childComplexity), true

	case "File.groups":
		if e.complexity.File.Groups == nil {
			break
		}

		args, err := ec.field_File_groups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.File.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.integrations":
		if e.complexity.File.Integrations == nil {
			break
		}

		args, err := ec.field_File_integrations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.File.Integrations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.IntegrationOrder), args["where"].(*generated.IntegrationWhereInput)), true

	case "File.lastAccessedAt":
		if e.complexity.File.LastAccessedAt == nil {
			break
		}

		return e.complexity.File.LastAccessedAt(childComplexity), true

	case "File.md5Hash":
		if e.complexity.File.Md5Hash == nil {
			break
		}

		return e.complexity.File.Md5Hash(childComplexity), true

	case "File.metadata":
		if e.complexity.File.Metadata == nil {
			break
		}

		return e.complexity.File.Metadata(childComplexity), true

	case "File.organization":
		if e.complexity.File.Organization == nil {
			break
		}

		return e.complexity.File.Organization(childComplexity), true

	case "File.organizationSetting":
		if e.complexity.File.OrganizationSetting == nil {
			break
		}

		return e.complexity.File.OrganizationSetting(childComplexity), true

	case "File.persistedFileSize":
		if e.complexity.File.PersistedFileSize == nil {
			break
		}

		return e.complexity.File.PersistedFileSize(childComplexity), true

	case "File.presignedURL":
		if e.complexity.File.PresignedURL == nil {
			break
		}

		return e.complexity.File.PresignedURL(childComplexity), true

	case "File.program":
		if e.complexity.File.Program == nil {
			break
		}

		return e.complexity.File.Program(childComplexity), true

	case "File.providedFileExtension":
		if e.complexity.File.ProvidedFileExtension == nil {
			break
		}

		return e.complexity.File.ProvidedFileExtension(childComplexity), true

	case "File.providedFileName":
		if e.complexity.File.ProvidedFileName == nil {
			break
		}

		return e.complexity.File.ProvidedFileName(childComplexity), true

	case "File.providedFileSize":
		if e.complexity.File.ProvidedFileSize == nil {
			break
		}

		return e.complexity.File.ProvidedFileSize(childComplexity), true

	case "File.secrets":
		if e.complexity.File.Secrets == nil {
			break
		}

		args, err := ec.field_File_secrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.File.Secrets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.HushOrder), args["where"].(*generated.HushWhereInput)), true

	case "File.storagePath":
		if e.complexity.File.StoragePath == nil {
			break
		}

		return e.complexity.File.StoragePath(childComplexity), true

	case "File.storageProvider":
		if e.complexity.File.StorageProvider == nil {
			break
		}

		return e.complexity.File.StorageProvider(childComplexity), true

	case "File.storageRegion":
		if e.complexity.File.StorageRegion == nil {
			break
		}

		return e.complexity.File.StorageRegion(childComplexity), true

	case "File.storageScheme":
		if e.complexity.File.StorageScheme == nil {
			break
		}

		return e.complexity.File.StorageScheme(childComplexity), true

	case "File.storageVolume":
		if e.complexity.File.StorageVolume == nil {
			break
		}

		return e.complexity.File.StorageVolume(childComplexity), true

	case "File.storeKey":
		if e.complexity.File.StoreKey == nil {
			break
		}

		return e.complexity.File.StoreKey(childComplexity), true

	case "File.subprocessor":
		if e.complexity.File.Subprocessor == nil {
			break
		}

		return e.complexity.File.Subprocessor(childComplexity), true

	case "File.tags":
		if e.complexity.File.Tags == nil {
			break
		}

		return e.complexity.File.Tags(childComplexity), true

	case "File.template":
		if e.complexity.File.Template == nil {
			break
		}

		return e.complexity.File.Template(childComplexity), true

	case "File.trustCenterSetting":
		if e.complexity.File.TrustCenterSetting == nil {
			break
		}

		return e.complexity.File.TrustCenterSetting(childComplexity), true

	case "File.uri":
		if e.complexity.File.URI == nil {
			break
		}

		return e.complexity.File.URI(childComplexity), true

	case "File.updatedAt":
		if e.complexity.File.UpdatedAt == nil {
			break
		}

		return e.complexity.File.UpdatedAt(childComplexity), true

	case "File.updatedBy":
		if e.complexity.File.UpdatedBy == nil {
			break
		}

		return e.complexity.File.UpdatedBy(childComplexity), true

	case "File.user":
		if e.complexity.File.User == nil {
			break
		}

		return e.complexity.File.User(childComplexity), true

	case "File.userSetting":
		if e.complexity.File.UserSetting == nil {
			break
		}

		return e.complexity.File.UserSetting(childComplexity), true

	case "FileConnection.edges":
		if e.complexity.FileConnection.Edges == nil {
			break
		}

		return e.complexity.FileConnection.Edges(childComplexity), true

	case "FileConnection.pageInfo":
		if e.complexity.FileConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileConnection.PageInfo(childComplexity), true

	case "FileConnection.totalCount":
		if e.complexity.FileConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileConnection.TotalCount(childComplexity), true

	case "FileDeletePayload.deletedID":
		if e.complexity.FileDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.FileDeletePayload.DeletedID(childComplexity), true

	case "FileEdge.cursor":
		if e.complexity.FileEdge.Cursor == nil {
			break
		}

		return e.complexity.FileEdge.Cursor(childComplexity), true

	case "FileEdge.node":
		if e.complexity.FileEdge.Node == nil {
			break
		}

		return e.complexity.FileEdge.Node(childComplexity), true

	case "FileHistory.categoryType":
		if e.complexity.FileHistory.CategoryType == nil {
			break
		}

		return e.complexity.FileHistory.CategoryType(childComplexity), true

	case "FileHistory.createdAt":
		if e.complexity.FileHistory.CreatedAt == nil {
			break
		}

		return e.complexity.FileHistory.CreatedAt(childComplexity), true

	case "FileHistory.createdBy":
		if e.complexity.FileHistory.CreatedBy == nil {
			break
		}

		return e.complexity.FileHistory.CreatedBy(childComplexity), true

	case "FileHistory.detectedContentType":
		if e.complexity.FileHistory.DetectedContentType == nil {
			break
		}

		return e.complexity.FileHistory.DetectedContentType(childComplexity), true

	case "FileHistory.detectedMimeType":
		if e.complexity.FileHistory.DetectedMimeType == nil {
			break
		}

		return e.complexity.FileHistory.DetectedMimeType(childComplexity), true

	case "FileHistory.historyTime":
		if e.complexity.FileHistory.HistoryTime == nil {
			break
		}

		return e.complexity.FileHistory.HistoryTime(childComplexity), true

	case "FileHistory.id":
		if e.complexity.FileHistory.ID == nil {
			break
		}

		return e.complexity.FileHistory.ID(childComplexity), true

	case "FileHistory.lastAccessedAt":
		if e.complexity.FileHistory.LastAccessedAt == nil {
			break
		}

		return e.complexity.FileHistory.LastAccessedAt(childComplexity), true

	case "FileHistory.md5Hash":
		if e.complexity.FileHistory.Md5Hash == nil {
			break
		}

		return e.complexity.FileHistory.Md5Hash(childComplexity), true

	case "FileHistory.metadata":
		if e.complexity.FileHistory.Metadata == nil {
			break
		}

		return e.complexity.FileHistory.Metadata(childComplexity), true

	case "FileHistory.operation":
		if e.complexity.FileHistory.Operation == nil {
			break
		}

		return e.complexity.FileHistory.Operation(childComplexity), true

	case "FileHistory.persistedFileSize":
		if e.complexity.FileHistory.PersistedFileSize == nil {
			break
		}

		return e.complexity.FileHistory.PersistedFileSize(childComplexity), true

	case "FileHistory.providedFileExtension":
		if e.complexity.FileHistory.ProvidedFileExtension == nil {
			break
		}

		return e.complexity.FileHistory.ProvidedFileExtension(childComplexity), true

	case "FileHistory.providedFileName":
		if e.complexity.FileHistory.ProvidedFileName == nil {
			break
		}

		return e.complexity.FileHistory.ProvidedFileName(childComplexity), true

	case "FileHistory.providedFileSize":
		if e.complexity.FileHistory.ProvidedFileSize == nil {
			break
		}

		return e.complexity.FileHistory.ProvidedFileSize(childComplexity), true

	case "FileHistory.ref":
		if e.complexity.FileHistory.Ref == nil {
			break
		}

		return e.complexity.FileHistory.Ref(childComplexity), true

	case "FileHistory.storagePath":
		if e.complexity.FileHistory.StoragePath == nil {
			break
		}

		return e.complexity.FileHistory.StoragePath(childComplexity), true

	case "FileHistory.storageProvider":
		if e.complexity.FileHistory.StorageProvider == nil {
			break
		}

		return e.complexity.FileHistory.StorageProvider(childComplexity), true

	case "FileHistory.storageRegion":
		if e.complexity.FileHistory.StorageRegion == nil {
			break
		}

		return e.complexity.FileHistory.StorageRegion(childComplexity), true

	case "FileHistory.storageScheme":
		if e.complexity.FileHistory.StorageScheme == nil {
			break
		}

		return e.complexity.FileHistory.StorageScheme(childComplexity), true

	case "FileHistory.storageVolume":
		if e.complexity.FileHistory.StorageVolume == nil {
			break
		}

		return e.complexity.FileHistory.StorageVolume(childComplexity), true

	case "FileHistory.storeKey":
		if e.complexity.FileHistory.StoreKey == nil {
			break
		}

		return e.complexity.FileHistory.StoreKey(childComplexity), true

	case "FileHistory.tags":
		if e.complexity.FileHistory.Tags == nil {
			break
		}

		return e.complexity.FileHistory.Tags(childComplexity), true

	case "FileHistory.uri":
		if e.complexity.FileHistory.URI == nil {
			break
		}

		return e.complexity.FileHistory.URI(childComplexity), true

	case "FileHistory.updatedAt":
		if e.complexity.FileHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.FileHistory.UpdatedAt(childComplexity), true

	case "FileHistory.updatedBy":
		if e.complexity.FileHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.FileHistory.UpdatedBy(childComplexity), true

	case "FileHistoryConnection.edges":
		if e.complexity.FileHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.FileHistoryConnection.Edges(childComplexity), true

	case "FileHistoryConnection.pageInfo":
		if e.complexity.FileHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileHistoryConnection.PageInfo(childComplexity), true

	case "FileHistoryConnection.totalCount":
		if e.complexity.FileHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileHistoryConnection.TotalCount(childComplexity), true

	case "FileHistoryEdge.cursor":
		if e.complexity.FileHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.FileHistoryEdge.Cursor(childComplexity), true

	case "FileHistoryEdge.node":
		if e.complexity.FileHistoryEdge.Node == nil {
			break
		}

		return e.complexity.FileHistoryEdge.Node(childComplexity), true

	case "Group.controlBlockedGroups":
		if e.complexity.Group.ControlBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_controlBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Group.controlEditors":
		if e.complexity.Group.ControlEditors == nil {
			break
		}

		args, err := ec.field_Group_controlEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Group.controlImplementationBlockedGroups":
		if e.complexity.Group.ControlImplementationBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_controlImplementationBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlImplementationBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Group.controlImplementationEditors":
		if e.complexity.Group.ControlImplementationEditors == nil {
			break
		}

		args, err := ec.field_Group_controlImplementationEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlImplementationEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Group.controlImplementationViewers":
		if e.complexity.Group.ControlImplementationViewers == nil {
			break
		}

		args, err := ec.field_Group_controlImplementationViewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlImplementationViewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Group.controlObjectiveBlockedGroups":
		if e.complexity.Group.ControlObjectiveBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_controlObjectiveBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlObjectiveBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Group.controlObjectiveEditors":
		if e.complexity.Group.ControlObjectiveEditors == nil {
			break
		}

		args, err := ec.field_Group_controlObjectiveEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlObjectiveEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Group.controlObjectiveViewers":
		if e.complexity.Group.ControlObjectiveViewers == nil {
			break
		}

		args, err := ec.field_Group_controlObjectiveViewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ControlObjectiveViewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Group.createdAt":
		if e.complexity.Group.CreatedAt == nil {
			break
		}

		return e.complexity.Group.CreatedAt(childComplexity), true

	case "Group.createdBy":
		if e.complexity.Group.CreatedBy == nil {
			break
		}

		return e.complexity.Group.CreatedBy(childComplexity), true

	case "Group.description":
		if e.complexity.Group.Description == nil {
			break
		}

		return e.complexity.Group.Description(childComplexity), true

	case "Group.displayID":
		if e.complexity.Group.DisplayID == nil {
			break
		}

		return e.complexity.Group.DisplayID(childComplexity), true

	case "Group.displayName":
		if e.complexity.Group.DisplayName == nil {
			break
		}

		return e.complexity.Group.DisplayName(childComplexity), true

	case "Group.entityBlockedGroups":
		if e.complexity.Group.EntityBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_entityBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.EntityBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Group.entityEditors":
		if e.complexity.Group.EntityEditors == nil {
			break
		}

		args, err := ec.field_Group_entityEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.EntityEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Group.entityViewers":
		if e.complexity.Group.EntityViewers == nil {
			break
		}

		args, err := ec.field_Group_entityViewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.EntityViewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Group.events":
		if e.complexity.Group.Events == nil {
			break
		}

		args, err := ec.field_Group_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Group.files":
		if e.complexity.Group.Files == nil {
			break
		}

		args, err := ec.field_Group_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Group.gravatarLogoURL":
		if e.complexity.Group.GravatarLogoURL == nil {
			break
		}

		return e.complexity.Group.GravatarLogoURL(childComplexity), true

	case "Group.id":
		if e.complexity.Group.ID == nil {
			break
		}

		return e.complexity.Group.ID(childComplexity), true

	case "Group.integrations":
		if e.complexity.Group.Integrations == nil {
			break
		}

		args, err := ec.field_Group_integrations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.Integrations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.IntegrationOrder), args["where"].(*generated.IntegrationWhereInput)), true

	case "Group.internalPolicyBlockedGroups":
		if e.complexity.Group.InternalPolicyBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_internalPolicyBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.InternalPolicyBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Group.internalPolicyEditors":
		if e.complexity.Group.InternalPolicyEditors == nil {
			break
		}

		args, err := ec.field_Group_internalPolicyEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.InternalPolicyEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Group.isManaged":
		if e.complexity.Group.IsManaged == nil {
			break
		}

		return e.complexity.Group.IsManaged(childComplexity), true

	case "Group.logoURL":
		if e.complexity.Group.LogoURL == nil {
			break
		}

		return e.complexity.Group.LogoURL(childComplexity), true

	case "Group.mappedControlBlockedGroups":
		if e.complexity.Group.MappedControlBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_mappedControlBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.MappedControlBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.MappedControlOrder), args["where"].(*generated.MappedControlWhereInput)), true

	case "Group.mappedControlEditors":
		if e.complexity.Group.MappedControlEditors == nil {
			break
		}

		args, err := ec.field_Group_mappedControlEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.MappedControlEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.MappedControlOrder), args["where"].(*generated.MappedControlWhereInput)), true

	case "Group.members":
		if e.complexity.Group.Members == nil {
			break
		}

		args, err := ec.field_Group_members_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.Members(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupMembershipOrder), args["where"].(*generated.GroupMembershipWhereInput)), true

	case "Group.name":
		if e.complexity.Group.Name == nil {
			break
		}

		return e.complexity.Group.Name(childComplexity), true

	case "Group.narrativeBlockedGroups":
		if e.complexity.Group.NarrativeBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_narrativeBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.NarrativeBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Group.narrativeEditors":
		if e.complexity.Group.NarrativeEditors == nil {
			break
		}

		args, err := ec.field_Group_narrativeEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.NarrativeEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Group.narrativeViewers":
		if e.complexity.Group.NarrativeViewers == nil {
			break
		}

		args, err := ec.field_Group_narrativeViewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.NarrativeViewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Group.owner":
		if e.complexity.Group.Owner == nil {
			break
		}

		return e.complexity.Group.Owner(childComplexity), true

	case "Group.ownerID":
		if e.complexity.Group.OwnerID == nil {
			break
		}

		return e.complexity.Group.OwnerID(childComplexity), true

	case "Group.permissions":
		if e.complexity.Group.Permissions == nil {
			break
		}

		args, err := ec.field_Group_permissions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.Permissions(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Group.procedureBlockedGroups":
		if e.complexity.Group.ProcedureBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_procedureBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ProcedureBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Group.procedureEditors":
		if e.complexity.Group.ProcedureEditors == nil {
			break
		}

		args, err := ec.field_Group_procedureEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ProcedureEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Group.programBlockedGroups":
		if e.complexity.Group.ProgramBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_programBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ProgramBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Group.programEditors":
		if e.complexity.Group.ProgramEditors == nil {
			break
		}

		args, err := ec.field_Group_programEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ProgramEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Group.programViewers":
		if e.complexity.Group.ProgramViewers == nil {
			break
		}

		args, err := ec.field_Group_programViewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ProgramViewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Group.riskBlockedGroups":
		if e.complexity.Group.RiskBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_riskBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.RiskBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Group.riskEditors":
		if e.complexity.Group.RiskEditors == nil {
			break
		}

		args, err := ec.field_Group_riskEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.RiskEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Group.riskViewers":
		if e.complexity.Group.RiskViewers == nil {
			break
		}

		args, err := ec.field_Group_riskViewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.RiskViewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Group.scanBlockedGroups":
		if e.complexity.Group.ScanBlockedGroups == nil {
			break
		}

		args, err := ec.field_Group_scanBlockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ScanBlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Group.scanEditors":
		if e.complexity.Group.ScanEditors == nil {
			break
		}

		args, err := ec.field_Group_scanEditors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ScanEditors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Group.scanViewers":
		if e.complexity.Group.ScanViewers == nil {
			break
		}

		args, err := ec.field_Group_scanViewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.ScanViewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Group.setting":
		if e.complexity.Group.Setting == nil {
			break
		}

		return e.complexity.Group.Setting(childComplexity), true

	case "Group.tags":
		if e.complexity.Group.Tags == nil {
			break
		}

		return e.complexity.Group.Tags(childComplexity), true

	case "Group.tasks":
		if e.complexity.Group.Tasks == nil {
			break
		}

		args, err := ec.field_Group_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Group.updatedAt":
		if e.complexity.Group.UpdatedAt == nil {
			break
		}

		return e.complexity.Group.UpdatedAt(childComplexity), true

	case "Group.updatedBy":
		if e.complexity.Group.UpdatedBy == nil {
			break
		}

		return e.complexity.Group.UpdatedBy(childComplexity), true

	case "Group.users":
		if e.complexity.Group.Users == nil {
			break
		}

		args, err := ec.field_Group_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Group.Users(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.UserOrder), args["where"].(*generated.UserWhereInput)), true

	case "GroupBulkCreatePayload.groups":
		if e.complexity.GroupBulkCreatePayload.Groups == nil {
			break
		}

		return e.complexity.GroupBulkCreatePayload.Groups(childComplexity), true

	case "GroupConnection.edges":
		if e.complexity.GroupConnection.Edges == nil {
			break
		}

		return e.complexity.GroupConnection.Edges(childComplexity), true

	case "GroupConnection.pageInfo":
		if e.complexity.GroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupConnection.PageInfo(childComplexity), true

	case "GroupConnection.totalCount":
		if e.complexity.GroupConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupConnection.TotalCount(childComplexity), true

	case "GroupCreatePayload.group":
		if e.complexity.GroupCreatePayload.Group == nil {
			break
		}

		return e.complexity.GroupCreatePayload.Group(childComplexity), true

	case "GroupDeletePayload.deletedID":
		if e.complexity.GroupDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.GroupDeletePayload.DeletedID(childComplexity), true

	case "GroupEdge.cursor":
		if e.complexity.GroupEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupEdge.Cursor(childComplexity), true

	case "GroupEdge.node":
		if e.complexity.GroupEdge.Node == nil {
			break
		}

		return e.complexity.GroupEdge.Node(childComplexity), true

	case "GroupHistory.createdAt":
		if e.complexity.GroupHistory.CreatedAt == nil {
			break
		}

		return e.complexity.GroupHistory.CreatedAt(childComplexity), true

	case "GroupHistory.createdBy":
		if e.complexity.GroupHistory.CreatedBy == nil {
			break
		}

		return e.complexity.GroupHistory.CreatedBy(childComplexity), true

	case "GroupHistory.description":
		if e.complexity.GroupHistory.Description == nil {
			break
		}

		return e.complexity.GroupHistory.Description(childComplexity), true

	case "GroupHistory.displayID":
		if e.complexity.GroupHistory.DisplayID == nil {
			break
		}

		return e.complexity.GroupHistory.DisplayID(childComplexity), true

	case "GroupHistory.displayName":
		if e.complexity.GroupHistory.DisplayName == nil {
			break
		}

		return e.complexity.GroupHistory.DisplayName(childComplexity), true

	case "GroupHistory.gravatarLogoURL":
		if e.complexity.GroupHistory.GravatarLogoURL == nil {
			break
		}

		return e.complexity.GroupHistory.GravatarLogoURL(childComplexity), true

	case "GroupHistory.historyTime":
		if e.complexity.GroupHistory.HistoryTime == nil {
			break
		}

		return e.complexity.GroupHistory.HistoryTime(childComplexity), true

	case "GroupHistory.id":
		if e.complexity.GroupHistory.ID == nil {
			break
		}

		return e.complexity.GroupHistory.ID(childComplexity), true

	case "GroupHistory.isManaged":
		if e.complexity.GroupHistory.IsManaged == nil {
			break
		}

		return e.complexity.GroupHistory.IsManaged(childComplexity), true

	case "GroupHistory.logoURL":
		if e.complexity.GroupHistory.LogoURL == nil {
			break
		}

		return e.complexity.GroupHistory.LogoURL(childComplexity), true

	case "GroupHistory.name":
		if e.complexity.GroupHistory.Name == nil {
			break
		}

		return e.complexity.GroupHistory.Name(childComplexity), true

	case "GroupHistory.operation":
		if e.complexity.GroupHistory.Operation == nil {
			break
		}

		return e.complexity.GroupHistory.Operation(childComplexity), true

	case "GroupHistory.ownerID":
		if e.complexity.GroupHistory.OwnerID == nil {
			break
		}

		return e.complexity.GroupHistory.OwnerID(childComplexity), true

	case "GroupHistory.ref":
		if e.complexity.GroupHistory.Ref == nil {
			break
		}

		return e.complexity.GroupHistory.Ref(childComplexity), true

	case "GroupHistory.tags":
		if e.complexity.GroupHistory.Tags == nil {
			break
		}

		return e.complexity.GroupHistory.Tags(childComplexity), true

	case "GroupHistory.updatedAt":
		if e.complexity.GroupHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupHistory.UpdatedAt(childComplexity), true

	case "GroupHistory.updatedBy":
		if e.complexity.GroupHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupHistory.UpdatedBy(childComplexity), true

	case "GroupHistoryConnection.edges":
		if e.complexity.GroupHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.GroupHistoryConnection.Edges(childComplexity), true

	case "GroupHistoryConnection.pageInfo":
		if e.complexity.GroupHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupHistoryConnection.PageInfo(childComplexity), true

	case "GroupHistoryConnection.totalCount":
		if e.complexity.GroupHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupHistoryConnection.TotalCount(childComplexity), true

	case "GroupHistoryEdge.cursor":
		if e.complexity.GroupHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupHistoryEdge.Cursor(childComplexity), true

	case "GroupHistoryEdge.node":
		if e.complexity.GroupHistoryEdge.Node == nil {
			break
		}

		return e.complexity.GroupHistoryEdge.Node(childComplexity), true

	case "GroupMembership.createdAt":
		if e.complexity.GroupMembership.CreatedAt == nil {
			break
		}

		return e.complexity.GroupMembership.CreatedAt(childComplexity), true

	case "GroupMembership.createdBy":
		if e.complexity.GroupMembership.CreatedBy == nil {
			break
		}

		return e.complexity.GroupMembership.CreatedBy(childComplexity), true

	case "GroupMembership.events":
		if e.complexity.GroupMembership.Events == nil {
			break
		}

		args, err := ec.field_GroupMembership_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GroupMembership.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "GroupMembership.group":
		if e.complexity.GroupMembership.Group == nil {
			break
		}

		return e.complexity.GroupMembership.Group(childComplexity), true

	case "GroupMembership.groupID":
		if e.complexity.GroupMembership.GroupID == nil {
			break
		}

		return e.complexity.GroupMembership.GroupID(childComplexity), true

	case "GroupMembership.id":
		if e.complexity.GroupMembership.ID == nil {
			break
		}

		return e.complexity.GroupMembership.ID(childComplexity), true

	case "GroupMembership.role":
		if e.complexity.GroupMembership.Role == nil {
			break
		}

		return e.complexity.GroupMembership.Role(childComplexity), true

	case "GroupMembership.updatedAt":
		if e.complexity.GroupMembership.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupMembership.UpdatedAt(childComplexity), true

	case "GroupMembership.updatedBy":
		if e.complexity.GroupMembership.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupMembership.UpdatedBy(childComplexity), true

	case "GroupMembership.user":
		if e.complexity.GroupMembership.User == nil {
			break
		}

		return e.complexity.GroupMembership.User(childComplexity), true

	case "GroupMembership.userID":
		if e.complexity.GroupMembership.UserID == nil {
			break
		}

		return e.complexity.GroupMembership.UserID(childComplexity), true

	case "GroupMembershipBulkCreatePayload.groupMemberships":
		if e.complexity.GroupMembershipBulkCreatePayload.GroupMemberships == nil {
			break
		}

		return e.complexity.GroupMembershipBulkCreatePayload.GroupMemberships(childComplexity), true

	case "GroupMembershipConnection.edges":
		if e.complexity.GroupMembershipConnection.Edges == nil {
			break
		}

		return e.complexity.GroupMembershipConnection.Edges(childComplexity), true

	case "GroupMembershipConnection.pageInfo":
		if e.complexity.GroupMembershipConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupMembershipConnection.PageInfo(childComplexity), true

	case "GroupMembershipConnection.totalCount":
		if e.complexity.GroupMembershipConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupMembershipConnection.TotalCount(childComplexity), true

	case "GroupMembershipCreatePayload.groupMembership":
		if e.complexity.GroupMembershipCreatePayload.GroupMembership == nil {
			break
		}

		return e.complexity.GroupMembershipCreatePayload.GroupMembership(childComplexity), true

	case "GroupMembershipDeletePayload.deletedID":
		if e.complexity.GroupMembershipDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.GroupMembershipDeletePayload.DeletedID(childComplexity), true

	case "GroupMembershipEdge.cursor":
		if e.complexity.GroupMembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupMembershipEdge.Cursor(childComplexity), true

	case "GroupMembershipEdge.node":
		if e.complexity.GroupMembershipEdge.Node == nil {
			break
		}

		return e.complexity.GroupMembershipEdge.Node(childComplexity), true

	case "GroupMembershipHistory.createdAt":
		if e.complexity.GroupMembershipHistory.CreatedAt == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.CreatedAt(childComplexity), true

	case "GroupMembershipHistory.createdBy":
		if e.complexity.GroupMembershipHistory.CreatedBy == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.CreatedBy(childComplexity), true

	case "GroupMembershipHistory.groupID":
		if e.complexity.GroupMembershipHistory.GroupID == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.GroupID(childComplexity), true

	case "GroupMembershipHistory.historyTime":
		if e.complexity.GroupMembershipHistory.HistoryTime == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.HistoryTime(childComplexity), true

	case "GroupMembershipHistory.id":
		if e.complexity.GroupMembershipHistory.ID == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.ID(childComplexity), true

	case "GroupMembershipHistory.operation":
		if e.complexity.GroupMembershipHistory.Operation == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.Operation(childComplexity), true

	case "GroupMembershipHistory.ref":
		if e.complexity.GroupMembershipHistory.Ref == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.Ref(childComplexity), true

	case "GroupMembershipHistory.role":
		if e.complexity.GroupMembershipHistory.Role == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.Role(childComplexity), true

	case "GroupMembershipHistory.updatedAt":
		if e.complexity.GroupMembershipHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.UpdatedAt(childComplexity), true

	case "GroupMembershipHistory.updatedBy":
		if e.complexity.GroupMembershipHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.UpdatedBy(childComplexity), true

	case "GroupMembershipHistory.userID":
		if e.complexity.GroupMembershipHistory.UserID == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.UserID(childComplexity), true

	case "GroupMembershipHistoryConnection.edges":
		if e.complexity.GroupMembershipHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryConnection.Edges(childComplexity), true

	case "GroupMembershipHistoryConnection.pageInfo":
		if e.complexity.GroupMembershipHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryConnection.PageInfo(childComplexity), true

	case "GroupMembershipHistoryConnection.totalCount":
		if e.complexity.GroupMembershipHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryConnection.TotalCount(childComplexity), true

	case "GroupMembershipHistoryEdge.cursor":
		if e.complexity.GroupMembershipHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryEdge.Cursor(childComplexity), true

	case "GroupMembershipHistoryEdge.node":
		if e.complexity.GroupMembershipHistoryEdge.Node == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryEdge.Node(childComplexity), true

	case "GroupMembershipUpdatePayload.groupMembership":
		if e.complexity.GroupMembershipUpdatePayload.GroupMembership == nil {
			break
		}

		return e.complexity.GroupMembershipUpdatePayload.GroupMembership(childComplexity), true

	case "GroupPermission.displayID":
		if e.complexity.GroupPermission.DisplayID == nil {
			break
		}

		return e.complexity.GroupPermission.DisplayID(childComplexity), true

	case "GroupPermission.id":
		if e.complexity.GroupPermission.ID == nil {
			break
		}

		return e.complexity.GroupPermission.ID(childComplexity), true

	case "GroupPermission.name":
		if e.complexity.GroupPermission.Name == nil {
			break
		}

		return e.complexity.GroupPermission.Name(childComplexity), true

	case "GroupPermission.objectType":
		if e.complexity.GroupPermission.ObjectType == nil {
			break
		}

		return e.complexity.GroupPermission.ObjectType(childComplexity), true

	case "GroupPermission.permissions":
		if e.complexity.GroupPermission.Permissions == nil {
			break
		}

		return e.complexity.GroupPermission.Permissions(childComplexity), true

	case "GroupPermissionConnection.edges":
		if e.complexity.GroupPermissionConnection.Edges == nil {
			break
		}

		return e.complexity.GroupPermissionConnection.Edges(childComplexity), true

	case "GroupPermissionConnection.pageInfo":
		if e.complexity.GroupPermissionConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupPermissionConnection.PageInfo(childComplexity), true

	case "GroupPermissionConnection.totalCount":
		if e.complexity.GroupPermissionConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupPermissionConnection.TotalCount(childComplexity), true

	case "GroupPermissionEdge.cursor":
		if e.complexity.GroupPermissionEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupPermissionEdge.Cursor(childComplexity), true

	case "GroupPermissionEdge.node":
		if e.complexity.GroupPermissionEdge.Node == nil {
			break
		}

		return e.complexity.GroupPermissionEdge.Node(childComplexity), true

	case "GroupSetting.createdAt":
		if e.complexity.GroupSetting.CreatedAt == nil {
			break
		}

		return e.complexity.GroupSetting.CreatedAt(childComplexity), true

	case "GroupSetting.createdBy":
		if e.complexity.GroupSetting.CreatedBy == nil {
			break
		}

		return e.complexity.GroupSetting.CreatedBy(childComplexity), true

	case "GroupSetting.group":
		if e.complexity.GroupSetting.Group == nil {
			break
		}

		return e.complexity.GroupSetting.Group(childComplexity), true

	case "GroupSetting.groupID":
		if e.complexity.GroupSetting.GroupID == nil {
			break
		}

		return e.complexity.GroupSetting.GroupID(childComplexity), true

	case "GroupSetting.id":
		if e.complexity.GroupSetting.ID == nil {
			break
		}

		return e.complexity.GroupSetting.ID(childComplexity), true

	case "GroupSetting.joinPolicy":
		if e.complexity.GroupSetting.JoinPolicy == nil {
			break
		}

		return e.complexity.GroupSetting.JoinPolicy(childComplexity), true

	case "GroupSetting.syncToGithub":
		if e.complexity.GroupSetting.SyncToGithub == nil {
			break
		}

		return e.complexity.GroupSetting.SyncToGithub(childComplexity), true

	case "GroupSetting.syncToSlack":
		if e.complexity.GroupSetting.SyncToSlack == nil {
			break
		}

		return e.complexity.GroupSetting.SyncToSlack(childComplexity), true

	case "GroupSetting.updatedAt":
		if e.complexity.GroupSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupSetting.UpdatedAt(childComplexity), true

	case "GroupSetting.updatedBy":
		if e.complexity.GroupSetting.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupSetting.UpdatedBy(childComplexity), true

	case "GroupSetting.visibility":
		if e.complexity.GroupSetting.Visibility == nil {
			break
		}

		return e.complexity.GroupSetting.Visibility(childComplexity), true

	case "GroupSettingBulkCreatePayload.groupSettings":
		if e.complexity.GroupSettingBulkCreatePayload.GroupSettings == nil {
			break
		}

		return e.complexity.GroupSettingBulkCreatePayload.GroupSettings(childComplexity), true

	case "GroupSettingConnection.edges":
		if e.complexity.GroupSettingConnection.Edges == nil {
			break
		}

		return e.complexity.GroupSettingConnection.Edges(childComplexity), true

	case "GroupSettingConnection.pageInfo":
		if e.complexity.GroupSettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupSettingConnection.PageInfo(childComplexity), true

	case "GroupSettingConnection.totalCount":
		if e.complexity.GroupSettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupSettingConnection.TotalCount(childComplexity), true

	case "GroupSettingCreatePayload.groupSetting":
		if e.complexity.GroupSettingCreatePayload.GroupSetting == nil {
			break
		}

		return e.complexity.GroupSettingCreatePayload.GroupSetting(childComplexity), true

	case "GroupSettingDeletePayload.deletedID":
		if e.complexity.GroupSettingDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.GroupSettingDeletePayload.DeletedID(childComplexity), true

	case "GroupSettingEdge.cursor":
		if e.complexity.GroupSettingEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupSettingEdge.Cursor(childComplexity), true

	case "GroupSettingEdge.node":
		if e.complexity.GroupSettingEdge.Node == nil {
			break
		}

		return e.complexity.GroupSettingEdge.Node(childComplexity), true

	case "GroupSettingHistory.createdAt":
		if e.complexity.GroupSettingHistory.CreatedAt == nil {
			break
		}

		return e.complexity.GroupSettingHistory.CreatedAt(childComplexity), true

	case "GroupSettingHistory.createdBy":
		if e.complexity.GroupSettingHistory.CreatedBy == nil {
			break
		}

		return e.complexity.GroupSettingHistory.CreatedBy(childComplexity), true

	case "GroupSettingHistory.groupID":
		if e.complexity.GroupSettingHistory.GroupID == nil {
			break
		}

		return e.complexity.GroupSettingHistory.GroupID(childComplexity), true

	case "GroupSettingHistory.historyTime":
		if e.complexity.GroupSettingHistory.HistoryTime == nil {
			break
		}

		return e.complexity.GroupSettingHistory.HistoryTime(childComplexity), true

	case "GroupSettingHistory.id":
		if e.complexity.GroupSettingHistory.ID == nil {
			break
		}

		return e.complexity.GroupSettingHistory.ID(childComplexity), true

	case "GroupSettingHistory.joinPolicy":
		if e.complexity.GroupSettingHistory.JoinPolicy == nil {
			break
		}

		return e.complexity.GroupSettingHistory.JoinPolicy(childComplexity), true

	case "GroupSettingHistory.operation":
		if e.complexity.GroupSettingHistory.Operation == nil {
			break
		}

		return e.complexity.GroupSettingHistory.Operation(childComplexity), true

	case "GroupSettingHistory.ref":
		if e.complexity.GroupSettingHistory.Ref == nil {
			break
		}

		return e.complexity.GroupSettingHistory.Ref(childComplexity), true

	case "GroupSettingHistory.syncToGithub":
		if e.complexity.GroupSettingHistory.SyncToGithub == nil {
			break
		}

		return e.complexity.GroupSettingHistory.SyncToGithub(childComplexity), true

	case "GroupSettingHistory.syncToSlack":
		if e.complexity.GroupSettingHistory.SyncToSlack == nil {
			break
		}

		return e.complexity.GroupSettingHistory.SyncToSlack(childComplexity), true

	case "GroupSettingHistory.updatedAt":
		if e.complexity.GroupSettingHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupSettingHistory.UpdatedAt(childComplexity), true

	case "GroupSettingHistory.updatedBy":
		if e.complexity.GroupSettingHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupSettingHistory.UpdatedBy(childComplexity), true

	case "GroupSettingHistory.visibility":
		if e.complexity.GroupSettingHistory.Visibility == nil {
			break
		}

		return e.complexity.GroupSettingHistory.Visibility(childComplexity), true

	case "GroupSettingHistoryConnection.edges":
		if e.complexity.GroupSettingHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.GroupSettingHistoryConnection.Edges(childComplexity), true

	case "GroupSettingHistoryConnection.pageInfo":
		if e.complexity.GroupSettingHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupSettingHistoryConnection.PageInfo(childComplexity), true

	case "GroupSettingHistoryConnection.totalCount":
		if e.complexity.GroupSettingHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupSettingHistoryConnection.TotalCount(childComplexity), true

	case "GroupSettingHistoryEdge.cursor":
		if e.complexity.GroupSettingHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupSettingHistoryEdge.Cursor(childComplexity), true

	case "GroupSettingHistoryEdge.node":
		if e.complexity.GroupSettingHistoryEdge.Node == nil {
			break
		}

		return e.complexity.GroupSettingHistoryEdge.Node(childComplexity), true

	case "GroupSettingUpdatePayload.groupSetting":
		if e.complexity.GroupSettingUpdatePayload.GroupSetting == nil {
			break
		}

		return e.complexity.GroupSettingUpdatePayload.GroupSetting(childComplexity), true

	case "GroupUpdatePayload.group":
		if e.complexity.GroupUpdatePayload.Group == nil {
			break
		}

		return e.complexity.GroupUpdatePayload.Group(childComplexity), true

	case "Hush.createdAt":
		if e.complexity.Hush.CreatedAt == nil {
			break
		}

		return e.complexity.Hush.CreatedAt(childComplexity), true

	case "Hush.createdBy":
		if e.complexity.Hush.CreatedBy == nil {
			break
		}

		return e.complexity.Hush.CreatedBy(childComplexity), true

	case "Hush.credentialSet":
		if e.complexity.Hush.CredentialSet == nil {
			break
		}

		return e.complexity.Hush.CredentialSet(childComplexity), true

	case "Hush.description":
		if e.complexity.Hush.Description == nil {
			break
		}

		return e.complexity.Hush.Description(childComplexity), true

	case "Hush.events":
		if e.complexity.Hush.Events == nil {
			break
		}

		args, err := ec.field_Hush_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Hush.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Hush.expiresAt":
		if e.complexity.Hush.ExpiresAt == nil {
			break
		}

		return e.complexity.Hush.ExpiresAt(childComplexity), true

	case "Hush.files":
		if e.complexity.Hush.Files == nil {
			break
		}

		args, err := ec.field_Hush_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Hush.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Hush.id":
		if e.complexity.Hush.ID == nil {
			break
		}

		return e.complexity.Hush.ID(childComplexity), true

	case "Hush.integrations":
		if e.complexity.Hush.Integrations == nil {
			break
		}

		args, err := ec.field_Hush_integrations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Hush.Integrations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.IntegrationOrder), args["where"].(*generated.IntegrationWhereInput)), true

	case "Hush.kind":
		if e.complexity.Hush.Kind == nil {
			break
		}

		return e.complexity.Hush.Kind(childComplexity), true

	case "Hush.lastUsedAt":
		if e.complexity.Hush.LastUsedAt == nil {
			break
		}

		return e.complexity.Hush.LastUsedAt(childComplexity), true

	case "Hush.metadata":
		if e.complexity.Hush.Metadata == nil {
			break
		}

		return e.complexity.Hush.Metadata(childComplexity), true

	case "Hush.name":
		if e.complexity.Hush.Name == nil {
			break
		}

		return e.complexity.Hush.Name(childComplexity), true

	case "Hush.owner":
		if e.complexity.Hush.Owner == nil {
			break
		}

		return e.complexity.Hush.Owner(childComplexity), true

	case "Hush.ownerID":
		if e.complexity.Hush.OwnerID == nil {
			break
		}

		return e.complexity.Hush.OwnerID(childComplexity), true

	case "Hush.secretName":
		if e.complexity.Hush.SecretName == nil {
			break
		}

		return e.complexity.Hush.SecretName(childComplexity), true

	case "Hush.updatedAt":
		if e.complexity.Hush.UpdatedAt == nil {
			break
		}

		return e.complexity.Hush.UpdatedAt(childComplexity), true

	case "Hush.updatedBy":
		if e.complexity.Hush.UpdatedBy == nil {
			break
		}

		return e.complexity.Hush.UpdatedBy(childComplexity), true

	case "HushBulkCreatePayload.hushes":
		if e.complexity.HushBulkCreatePayload.Hushes == nil {
			break
		}

		return e.complexity.HushBulkCreatePayload.Hushes(childComplexity), true

	case "HushBulkUpdatePayload.hushes":
		if e.complexity.HushBulkUpdatePayload.Hushes == nil {
			break
		}

		return e.complexity.HushBulkUpdatePayload.Hushes(childComplexity), true

	case "HushBulkUpdatePayload.updatedIDs":
		if e.complexity.HushBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.HushBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "HushConnection.edges":
		if e.complexity.HushConnection.Edges == nil {
			break
		}

		return e.complexity.HushConnection.Edges(childComplexity), true

	case "HushConnection.pageInfo":
		if e.complexity.HushConnection.PageInfo == nil {
			break
		}

		return e.complexity.HushConnection.PageInfo(childComplexity), true

	case "HushConnection.totalCount":
		if e.complexity.HushConnection.TotalCount == nil {
			break
		}

		return e.complexity.HushConnection.TotalCount(childComplexity), true

	case "HushCreatePayload.hush":
		if e.complexity.HushCreatePayload.Hush == nil {
			break
		}

		return e.complexity.HushCreatePayload.Hush(childComplexity), true

	case "HushDeletePayload.deletedID":
		if e.complexity.HushDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.HushDeletePayload.DeletedID(childComplexity), true

	case "HushEdge.cursor":
		if e.complexity.HushEdge.Cursor == nil {
			break
		}

		return e.complexity.HushEdge.Cursor(childComplexity), true

	case "HushEdge.node":
		if e.complexity.HushEdge.Node == nil {
			break
		}

		return e.complexity.HushEdge.Node(childComplexity), true

	case "HushHistory.createdAt":
		if e.complexity.HushHistory.CreatedAt == nil {
			break
		}

		return e.complexity.HushHistory.CreatedAt(childComplexity), true

	case "HushHistory.createdBy":
		if e.complexity.HushHistory.CreatedBy == nil {
			break
		}

		return e.complexity.HushHistory.CreatedBy(childComplexity), true

	case "HushHistory.credentialSet":
		if e.complexity.HushHistory.CredentialSet == nil {
			break
		}

		return e.complexity.HushHistory.CredentialSet(childComplexity), true

	case "HushHistory.description":
		if e.complexity.HushHistory.Description == nil {
			break
		}

		return e.complexity.HushHistory.Description(childComplexity), true

	case "HushHistory.expiresAt":
		if e.complexity.HushHistory.ExpiresAt == nil {
			break
		}

		return e.complexity.HushHistory.ExpiresAt(childComplexity), true

	case "HushHistory.historyTime":
		if e.complexity.HushHistory.HistoryTime == nil {
			break
		}

		return e.complexity.HushHistory.HistoryTime(childComplexity), true

	case "HushHistory.id":
		if e.complexity.HushHistory.ID == nil {
			break
		}

		return e.complexity.HushHistory.ID(childComplexity), true

	case "HushHistory.kind":
		if e.complexity.HushHistory.Kind == nil {
			break
		}

		return e.complexity.HushHistory.Kind(childComplexity), true

	case "HushHistory.lastUsedAt":
		if e.complexity.HushHistory.LastUsedAt == nil {
			break
		}

		return e.complexity.HushHistory.LastUsedAt(childComplexity), true

	case "HushHistory.metadata":
		if e.complexity.HushHistory.Metadata == nil {
			break
		}

		return e.complexity.HushHistory.Metadata(childComplexity), true

	case "HushHistory.name":
		if e.complexity.HushHistory.Name == nil {
			break
		}

		return e.complexity.HushHistory.Name(childComplexity), true

	case "HushHistory.operation":
		if e.complexity.HushHistory.Operation == nil {
			break
		}

		return e.complexity.HushHistory.Operation(childComplexity), true

	case "HushHistory.ownerID":
		if e.complexity.HushHistory.OwnerID == nil {
			break
		}

		return e.complexity.HushHistory.OwnerID(childComplexity), true

	case "HushHistory.ref":
		if e.complexity.HushHistory.Ref == nil {
			break
		}

		return e.complexity.HushHistory.Ref(childComplexity), true

	case "HushHistory.secretName":
		if e.complexity.HushHistory.SecretName == nil {
			break
		}

		return e.complexity.HushHistory.SecretName(childComplexity), true

	case "HushHistory.updatedAt":
		if e.complexity.HushHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.HushHistory.UpdatedAt(childComplexity), true

	case "HushHistory.updatedBy":
		if e.complexity.HushHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.HushHistory.UpdatedBy(childComplexity), true

	case "HushHistoryConnection.edges":
		if e.complexity.HushHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.HushHistoryConnection.Edges(childComplexity), true

	case "HushHistoryConnection.pageInfo":
		if e.complexity.HushHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.HushHistoryConnection.PageInfo(childComplexity), true

	case "HushHistoryConnection.totalCount":
		if e.complexity.HushHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.HushHistoryConnection.TotalCount(childComplexity), true

	case "HushHistoryEdge.cursor":
		if e.complexity.HushHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.HushHistoryEdge.Cursor(childComplexity), true

	case "HushHistoryEdge.node":
		if e.complexity.HushHistoryEdge.Node == nil {
			break
		}

		return e.complexity.HushHistoryEdge.Node(childComplexity), true

	case "HushUpdatePayload.hush":
		if e.complexity.HushUpdatePayload.Hush == nil {
			break
		}

		return e.complexity.HushUpdatePayload.Hush(childComplexity), true

	case "Integration.createdAt":
		if e.complexity.Integration.CreatedAt == nil {
			break
		}

		return e.complexity.Integration.CreatedAt(childComplexity), true

	case "Integration.createdBy":
		if e.complexity.Integration.CreatedBy == nil {
			break
		}

		return e.complexity.Integration.CreatedBy(childComplexity), true

	case "Integration.description":
		if e.complexity.Integration.Description == nil {
			break
		}

		return e.complexity.Integration.Description(childComplexity), true

	case "Integration.events":
		if e.complexity.Integration.Events == nil {
			break
		}

		args, err := ec.field_Integration_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Integration.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Integration.files":
		if e.complexity.Integration.Files == nil {
			break
		}

		args, err := ec.field_Integration_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Integration.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Integration.id":
		if e.complexity.Integration.ID == nil {
			break
		}

		return e.complexity.Integration.ID(childComplexity), true

	case "Integration.integrationType":
		if e.complexity.Integration.IntegrationType == nil {
			break
		}

		return e.complexity.Integration.IntegrationType(childComplexity), true

	case "Integration.kind":
		if e.complexity.Integration.Kind == nil {
			break
		}

		return e.complexity.Integration.Kind(childComplexity), true

	case "Integration.metadata":
		if e.complexity.Integration.Metadata == nil {
			break
		}

		return e.complexity.Integration.Metadata(childComplexity), true

	case "Integration.name":
		if e.complexity.Integration.Name == nil {
			break
		}

		return e.complexity.Integration.Name(childComplexity), true

	case "Integration.owner":
		if e.complexity.Integration.Owner == nil {
			break
		}

		return e.complexity.Integration.Owner(childComplexity), true

	case "Integration.ownerID":
		if e.complexity.Integration.OwnerID == nil {
			break
		}

		return e.complexity.Integration.OwnerID(childComplexity), true

	case "Integration.secrets":
		if e.complexity.Integration.Secrets == nil {
			break
		}

		args, err := ec.field_Integration_secrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Integration.Secrets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.HushOrder), args["where"].(*generated.HushWhereInput)), true

	case "Integration.tags":
		if e.complexity.Integration.Tags == nil {
			break
		}

		return e.complexity.Integration.Tags(childComplexity), true

	case "Integration.updatedAt":
		if e.complexity.Integration.UpdatedAt == nil {
			break
		}

		return e.complexity.Integration.UpdatedAt(childComplexity), true

	case "Integration.updatedBy":
		if e.complexity.Integration.UpdatedBy == nil {
			break
		}

		return e.complexity.Integration.UpdatedBy(childComplexity), true

	case "IntegrationConnection.edges":
		if e.complexity.IntegrationConnection.Edges == nil {
			break
		}

		return e.complexity.IntegrationConnection.Edges(childComplexity), true

	case "IntegrationConnection.pageInfo":
		if e.complexity.IntegrationConnection.PageInfo == nil {
			break
		}

		return e.complexity.IntegrationConnection.PageInfo(childComplexity), true

	case "IntegrationConnection.totalCount":
		if e.complexity.IntegrationConnection.TotalCount == nil {
			break
		}

		return e.complexity.IntegrationConnection.TotalCount(childComplexity), true

	case "IntegrationDeletePayload.deletedID":
		if e.complexity.IntegrationDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.IntegrationDeletePayload.DeletedID(childComplexity), true

	case "IntegrationEdge.cursor":
		if e.complexity.IntegrationEdge.Cursor == nil {
			break
		}

		return e.complexity.IntegrationEdge.Cursor(childComplexity), true

	case "IntegrationEdge.node":
		if e.complexity.IntegrationEdge.Node == nil {
			break
		}

		return e.complexity.IntegrationEdge.Node(childComplexity), true

	case "IntegrationHistory.createdAt":
		if e.complexity.IntegrationHistory.CreatedAt == nil {
			break
		}

		return e.complexity.IntegrationHistory.CreatedAt(childComplexity), true

	case "IntegrationHistory.createdBy":
		if e.complexity.IntegrationHistory.CreatedBy == nil {
			break
		}

		return e.complexity.IntegrationHistory.CreatedBy(childComplexity), true

	case "IntegrationHistory.description":
		if e.complexity.IntegrationHistory.Description == nil {
			break
		}

		return e.complexity.IntegrationHistory.Description(childComplexity), true

	case "IntegrationHistory.historyTime":
		if e.complexity.IntegrationHistory.HistoryTime == nil {
			break
		}

		return e.complexity.IntegrationHistory.HistoryTime(childComplexity), true

	case "IntegrationHistory.id":
		if e.complexity.IntegrationHistory.ID == nil {
			break
		}

		return e.complexity.IntegrationHistory.ID(childComplexity), true

	case "IntegrationHistory.integrationType":
		if e.complexity.IntegrationHistory.IntegrationType == nil {
			break
		}

		return e.complexity.IntegrationHistory.IntegrationType(childComplexity), true

	case "IntegrationHistory.kind":
		if e.complexity.IntegrationHistory.Kind == nil {
			break
		}

		return e.complexity.IntegrationHistory.Kind(childComplexity), true

	case "IntegrationHistory.metadata":
		if e.complexity.IntegrationHistory.Metadata == nil {
			break
		}

		return e.complexity.IntegrationHistory.Metadata(childComplexity), true

	case "IntegrationHistory.name":
		if e.complexity.IntegrationHistory.Name == nil {
			break
		}

		return e.complexity.IntegrationHistory.Name(childComplexity), true

	case "IntegrationHistory.operation":
		if e.complexity.IntegrationHistory.Operation == nil {
			break
		}

		return e.complexity.IntegrationHistory.Operation(childComplexity), true

	case "IntegrationHistory.ownerID":
		if e.complexity.IntegrationHistory.OwnerID == nil {
			break
		}

		return e.complexity.IntegrationHistory.OwnerID(childComplexity), true

	case "IntegrationHistory.ref":
		if e.complexity.IntegrationHistory.Ref == nil {
			break
		}

		return e.complexity.IntegrationHistory.Ref(childComplexity), true

	case "IntegrationHistory.tags":
		if e.complexity.IntegrationHistory.Tags == nil {
			break
		}

		return e.complexity.IntegrationHistory.Tags(childComplexity), true

	case "IntegrationHistory.updatedAt":
		if e.complexity.IntegrationHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.IntegrationHistory.UpdatedAt(childComplexity), true

	case "IntegrationHistory.updatedBy":
		if e.complexity.IntegrationHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.IntegrationHistory.UpdatedBy(childComplexity), true

	case "IntegrationHistoryConnection.edges":
		if e.complexity.IntegrationHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.IntegrationHistoryConnection.Edges(childComplexity), true

	case "IntegrationHistoryConnection.pageInfo":
		if e.complexity.IntegrationHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.IntegrationHistoryConnection.PageInfo(childComplexity), true

	case "IntegrationHistoryConnection.totalCount":
		if e.complexity.IntegrationHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.IntegrationHistoryConnection.TotalCount(childComplexity), true

	case "IntegrationHistoryEdge.cursor":
		if e.complexity.IntegrationHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.IntegrationHistoryEdge.Cursor(childComplexity), true

	case "IntegrationHistoryEdge.node":
		if e.complexity.IntegrationHistoryEdge.Node == nil {
			break
		}

		return e.complexity.IntegrationHistoryEdge.Node(childComplexity), true

	case "InternalPolicy.approvalRequired":
		if e.complexity.InternalPolicy.ApprovalRequired == nil {
			break
		}

		return e.complexity.InternalPolicy.ApprovalRequired(childComplexity), true

	case "InternalPolicy.approver":
		if e.complexity.InternalPolicy.Approver == nil {
			break
		}

		return e.complexity.InternalPolicy.Approver(childComplexity), true

	case "InternalPolicy.approverID":
		if e.complexity.InternalPolicy.ApproverID == nil {
			break
		}

		return e.complexity.InternalPolicy.ApproverID(childComplexity), true

	case "InternalPolicy.blockedGroups":
		if e.complexity.InternalPolicy.BlockedGroups == nil {
			break
		}

		args, err := ec.field_InternalPolicy_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "InternalPolicy.controlImplementations":
		if e.complexity.InternalPolicy.ControlImplementations == nil {
			break
		}

		args, err := ec.field_InternalPolicy_controlImplementations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.ControlImplementations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "InternalPolicy.controlObjectives":
		if e.complexity.InternalPolicy.ControlObjectives == nil {
			break
		}

		args, err := ec.field_InternalPolicy_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "InternalPolicy.controlSuggestions":
		if e.complexity.InternalPolicy.ControlSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicy.ControlSuggestions(childComplexity), true

	case "InternalPolicy.controls":
		if e.complexity.InternalPolicy.Controls == nil {
			break
		}

		args, err := ec.field_InternalPolicy_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "InternalPolicy.createdAt":
		if e.complexity.InternalPolicy.CreatedAt == nil {
			break
		}

		return e.complexity.InternalPolicy.CreatedAt(childComplexity), true

	case "InternalPolicy.createdBy":
		if e.complexity.InternalPolicy.CreatedBy == nil {
			break
		}

		return e.complexity.InternalPolicy.CreatedBy(childComplexity), true

	case "InternalPolicy.delegate":
		if e.complexity.InternalPolicy.Delegate == nil {
			break
		}

		return e.complexity.InternalPolicy.Delegate(childComplexity), true

	case "InternalPolicy.delegateID":
		if e.complexity.InternalPolicy.DelegateID == nil {
			break
		}

		return e.complexity.InternalPolicy.DelegateID(childComplexity), true

	case "InternalPolicy.details":
		if e.complexity.InternalPolicy.Details == nil {
			break
		}

		return e.complexity.InternalPolicy.Details(childComplexity), true

	case "InternalPolicy.dismissedControlSuggestions":
		if e.complexity.InternalPolicy.DismissedControlSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicy.DismissedControlSuggestions(childComplexity), true

	case "InternalPolicy.dismissedImprovementSuggestions":
		if e.complexity.InternalPolicy.DismissedImprovementSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicy.DismissedImprovementSuggestions(childComplexity), true

	case "InternalPolicy.dismissedTagSuggestions":
		if e.complexity.InternalPolicy.DismissedTagSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicy.DismissedTagSuggestions(childComplexity), true

	case "InternalPolicy.displayID":
		if e.complexity.InternalPolicy.DisplayID == nil {
			break
		}

		return e.complexity.InternalPolicy.DisplayID(childComplexity), true

	case "InternalPolicy.editors":
		if e.complexity.InternalPolicy.Editors == nil {
			break
		}

		args, err := ec.field_InternalPolicy_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "InternalPolicy.file":
		if e.complexity.InternalPolicy.File == nil {
			break
		}

		return e.complexity.InternalPolicy.File(childComplexity), true

	case "InternalPolicy.fileID":
		if e.complexity.InternalPolicy.FileID == nil {
			break
		}

		return e.complexity.InternalPolicy.FileID(childComplexity), true

	case "InternalPolicy.id":
		if e.complexity.InternalPolicy.ID == nil {
			break
		}

		return e.complexity.InternalPolicy.ID(childComplexity), true

	case "InternalPolicy.improvementSuggestions":
		if e.complexity.InternalPolicy.ImprovementSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicy.ImprovementSuggestions(childComplexity), true

	case "InternalPolicy.name":
		if e.complexity.InternalPolicy.Name == nil {
			break
		}

		return e.complexity.InternalPolicy.Name(childComplexity), true

	case "InternalPolicy.narratives":
		if e.complexity.InternalPolicy.Narratives == nil {
			break
		}

		args, err := ec.field_InternalPolicy_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "InternalPolicy.owner":
		if e.complexity.InternalPolicy.Owner == nil {
			break
		}

		return e.complexity.InternalPolicy.Owner(childComplexity), true

	case "InternalPolicy.ownerID":
		if e.complexity.InternalPolicy.OwnerID == nil {
			break
		}

		return e.complexity.InternalPolicy.OwnerID(childComplexity), true

	case "InternalPolicy.policyType":
		if e.complexity.InternalPolicy.PolicyType == nil {
			break
		}

		return e.complexity.InternalPolicy.PolicyType(childComplexity), true

	case "InternalPolicy.procedures":
		if e.complexity.InternalPolicy.Procedures == nil {
			break
		}

		args, err := ec.field_InternalPolicy_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "InternalPolicy.programs":
		if e.complexity.InternalPolicy.Programs == nil {
			break
		}

		args, err := ec.field_InternalPolicy_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "InternalPolicy.reviewDue":
		if e.complexity.InternalPolicy.ReviewDue == nil {
			break
		}

		return e.complexity.InternalPolicy.ReviewDue(childComplexity), true

	case "InternalPolicy.reviewFrequency":
		if e.complexity.InternalPolicy.ReviewFrequency == nil {
			break
		}

		return e.complexity.InternalPolicy.ReviewFrequency(childComplexity), true

	case "InternalPolicy.revision":
		if e.complexity.InternalPolicy.Revision == nil {
			break
		}

		return e.complexity.InternalPolicy.Revision(childComplexity), true

	case "InternalPolicy.risks":
		if e.complexity.InternalPolicy.Risks == nil {
			break
		}

		args, err := ec.field_InternalPolicy_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "InternalPolicy.status":
		if e.complexity.InternalPolicy.Status == nil {
			break
		}

		return e.complexity.InternalPolicy.Status(childComplexity), true

	case "InternalPolicy.subcontrols":
		if e.complexity.InternalPolicy.Subcontrols == nil {
			break
		}

		args, err := ec.field_InternalPolicy_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "InternalPolicy.summary":
		if e.complexity.InternalPolicy.Summary == nil {
			break
		}

		return e.complexity.InternalPolicy.Summary(childComplexity), true

	case "InternalPolicy.tagSuggestions":
		if e.complexity.InternalPolicy.TagSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicy.TagSuggestions(childComplexity), true

	case "InternalPolicy.tags":
		if e.complexity.InternalPolicy.Tags == nil {
			break
		}

		return e.complexity.InternalPolicy.Tags(childComplexity), true

	case "InternalPolicy.tasks":
		if e.complexity.InternalPolicy.Tasks == nil {
			break
		}

		args, err := ec.field_InternalPolicy_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.InternalPolicy.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "InternalPolicy.url":
		if e.complexity.InternalPolicy.URL == nil {
			break
		}

		return e.complexity.InternalPolicy.URL(childComplexity), true

	case "InternalPolicy.updatedAt":
		if e.complexity.InternalPolicy.UpdatedAt == nil {
			break
		}

		return e.complexity.InternalPolicy.UpdatedAt(childComplexity), true

	case "InternalPolicy.updatedBy":
		if e.complexity.InternalPolicy.UpdatedBy == nil {
			break
		}

		return e.complexity.InternalPolicy.UpdatedBy(childComplexity), true

	case "InternalPolicyBulkCreatePayload.internalPolicies":
		if e.complexity.InternalPolicyBulkCreatePayload.InternalPolicies == nil {
			break
		}

		return e.complexity.InternalPolicyBulkCreatePayload.InternalPolicies(childComplexity), true

	case "InternalPolicyBulkUpdatePayload.internalPolicies":
		if e.complexity.InternalPolicyBulkUpdatePayload.InternalPolicies == nil {
			break
		}

		return e.complexity.InternalPolicyBulkUpdatePayload.InternalPolicies(childComplexity), true

	case "InternalPolicyBulkUpdatePayload.updatedIDs":
		if e.complexity.InternalPolicyBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.InternalPolicyBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "InternalPolicyConnection.edges":
		if e.complexity.InternalPolicyConnection.Edges == nil {
			break
		}

		return e.complexity.InternalPolicyConnection.Edges(childComplexity), true

	case "InternalPolicyConnection.pageInfo":
		if e.complexity.InternalPolicyConnection.PageInfo == nil {
			break
		}

		return e.complexity.InternalPolicyConnection.PageInfo(childComplexity), true

	case "InternalPolicyConnection.totalCount":
		if e.complexity.InternalPolicyConnection.TotalCount == nil {
			break
		}

		return e.complexity.InternalPolicyConnection.TotalCount(childComplexity), true

	case "InternalPolicyCreatePayload.internalPolicy":
		if e.complexity.InternalPolicyCreatePayload.InternalPolicy == nil {
			break
		}

		return e.complexity.InternalPolicyCreatePayload.InternalPolicy(childComplexity), true

	case "InternalPolicyDeletePayload.deletedID":
		if e.complexity.InternalPolicyDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.InternalPolicyDeletePayload.DeletedID(childComplexity), true

	case "InternalPolicyEdge.cursor":
		if e.complexity.InternalPolicyEdge.Cursor == nil {
			break
		}

		return e.complexity.InternalPolicyEdge.Cursor(childComplexity), true

	case "InternalPolicyEdge.node":
		if e.complexity.InternalPolicyEdge.Node == nil {
			break
		}

		return e.complexity.InternalPolicyEdge.Node(childComplexity), true

	case "InternalPolicyHistory.approvalRequired":
		if e.complexity.InternalPolicyHistory.ApprovalRequired == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ApprovalRequired(childComplexity), true

	case "InternalPolicyHistory.approverID":
		if e.complexity.InternalPolicyHistory.ApproverID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ApproverID(childComplexity), true

	case "InternalPolicyHistory.controlSuggestions":
		if e.complexity.InternalPolicyHistory.ControlSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ControlSuggestions(childComplexity), true

	case "InternalPolicyHistory.createdAt":
		if e.complexity.InternalPolicyHistory.CreatedAt == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.CreatedAt(childComplexity), true

	case "InternalPolicyHistory.createdBy":
		if e.complexity.InternalPolicyHistory.CreatedBy == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.CreatedBy(childComplexity), true

	case "InternalPolicyHistory.delegateID":
		if e.complexity.InternalPolicyHistory.DelegateID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.DelegateID(childComplexity), true

	case "InternalPolicyHistory.details":
		if e.complexity.InternalPolicyHistory.Details == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Details(childComplexity), true

	case "InternalPolicyHistory.dismissedControlSuggestions":
		if e.complexity.InternalPolicyHistory.DismissedControlSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.DismissedControlSuggestions(childComplexity), true

	case "InternalPolicyHistory.dismissedImprovementSuggestions":
		if e.complexity.InternalPolicyHistory.DismissedImprovementSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.DismissedImprovementSuggestions(childComplexity), true

	case "InternalPolicyHistory.dismissedTagSuggestions":
		if e.complexity.InternalPolicyHistory.DismissedTagSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.DismissedTagSuggestions(childComplexity), true

	case "InternalPolicyHistory.displayID":
		if e.complexity.InternalPolicyHistory.DisplayID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.DisplayID(childComplexity), true

	case "InternalPolicyHistory.fileID":
		if e.complexity.InternalPolicyHistory.FileID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.FileID(childComplexity), true

	case "InternalPolicyHistory.historyTime":
		if e.complexity.InternalPolicyHistory.HistoryTime == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.HistoryTime(childComplexity), true

	case "InternalPolicyHistory.id":
		if e.complexity.InternalPolicyHistory.ID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ID(childComplexity), true

	case "InternalPolicyHistory.improvementSuggestions":
		if e.complexity.InternalPolicyHistory.ImprovementSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ImprovementSuggestions(childComplexity), true

	case "InternalPolicyHistory.name":
		if e.complexity.InternalPolicyHistory.Name == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Name(childComplexity), true

	case "InternalPolicyHistory.operation":
		if e.complexity.InternalPolicyHistory.Operation == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Operation(childComplexity), true

	case "InternalPolicyHistory.ownerID":
		if e.complexity.InternalPolicyHistory.OwnerID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.OwnerID(childComplexity), true

	case "InternalPolicyHistory.policyType":
		if e.complexity.InternalPolicyHistory.PolicyType == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.PolicyType(childComplexity), true

	case "InternalPolicyHistory.ref":
		if e.complexity.InternalPolicyHistory.Ref == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Ref(childComplexity), true

	case "InternalPolicyHistory.reviewDue":
		if e.complexity.InternalPolicyHistory.ReviewDue == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ReviewDue(childComplexity), true

	case "InternalPolicyHistory.reviewFrequency":
		if e.complexity.InternalPolicyHistory.ReviewFrequency == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ReviewFrequency(childComplexity), true

	case "InternalPolicyHistory.revision":
		if e.complexity.InternalPolicyHistory.Revision == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Revision(childComplexity), true

	case "InternalPolicyHistory.status":
		if e.complexity.InternalPolicyHistory.Status == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Status(childComplexity), true

	case "InternalPolicyHistory.summary":
		if e.complexity.InternalPolicyHistory.Summary == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Summary(childComplexity), true

	case "InternalPolicyHistory.tagSuggestions":
		if e.complexity.InternalPolicyHistory.TagSuggestions == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.TagSuggestions(childComplexity), true

	case "InternalPolicyHistory.tags":
		if e.complexity.InternalPolicyHistory.Tags == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Tags(childComplexity), true

	case "InternalPolicyHistory.url":
		if e.complexity.InternalPolicyHistory.URL == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.URL(childComplexity), true

	case "InternalPolicyHistory.updatedAt":
		if e.complexity.InternalPolicyHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.UpdatedAt(childComplexity), true

	case "InternalPolicyHistory.updatedBy":
		if e.complexity.InternalPolicyHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.UpdatedBy(childComplexity), true

	case "InternalPolicyHistoryConnection.edges":
		if e.complexity.InternalPolicyHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryConnection.Edges(childComplexity), true

	case "InternalPolicyHistoryConnection.pageInfo":
		if e.complexity.InternalPolicyHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryConnection.PageInfo(childComplexity), true

	case "InternalPolicyHistoryConnection.totalCount":
		if e.complexity.InternalPolicyHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryConnection.TotalCount(childComplexity), true

	case "InternalPolicyHistoryEdge.cursor":
		if e.complexity.InternalPolicyHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryEdge.Cursor(childComplexity), true

	case "InternalPolicyHistoryEdge.node":
		if e.complexity.InternalPolicyHistoryEdge.Node == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryEdge.Node(childComplexity), true

	case "InternalPolicyUpdatePayload.internalPolicy":
		if e.complexity.InternalPolicyUpdatePayload.InternalPolicy == nil {
			break
		}

		return e.complexity.InternalPolicyUpdatePayload.InternalPolicy(childComplexity), true

	case "Invite.createdAt":
		if e.complexity.Invite.CreatedAt == nil {
			break
		}

		return e.complexity.Invite.CreatedAt(childComplexity), true

	case "Invite.createdBy":
		if e.complexity.Invite.CreatedBy == nil {
			break
		}

		return e.complexity.Invite.CreatedBy(childComplexity), true

	case "Invite.events":
		if e.complexity.Invite.Events == nil {
			break
		}

		args, err := ec.field_Invite_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Invite.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Invite.expires":
		if e.complexity.Invite.Expires == nil {
			break
		}

		return e.complexity.Invite.Expires(childComplexity), true

	case "Invite.groups":
		if e.complexity.Invite.Groups == nil {
			break
		}

		args, err := ec.field_Invite_groups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Invite.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Invite.id":
		if e.complexity.Invite.ID == nil {
			break
		}

		return e.complexity.Invite.ID(childComplexity), true

	case "Invite.owner":
		if e.complexity.Invite.Owner == nil {
			break
		}

		return e.complexity.Invite.Owner(childComplexity), true

	case "Invite.ownerID":
		if e.complexity.Invite.OwnerID == nil {
			break
		}

		return e.complexity.Invite.OwnerID(childComplexity), true

	case "Invite.recipient":
		if e.complexity.Invite.Recipient == nil {
			break
		}

		return e.complexity.Invite.Recipient(childComplexity), true

	case "Invite.requestorID":
		if e.complexity.Invite.RequestorID == nil {
			break
		}

		return e.complexity.Invite.RequestorID(childComplexity), true

	case "Invite.role":
		if e.complexity.Invite.Role == nil {
			break
		}

		return e.complexity.Invite.Role(childComplexity), true

	case "Invite.sendAttempts":
		if e.complexity.Invite.SendAttempts == nil {
			break
		}

		return e.complexity.Invite.SendAttempts(childComplexity), true

	case "Invite.status":
		if e.complexity.Invite.Status == nil {
			break
		}

		return e.complexity.Invite.Status(childComplexity), true

	case "Invite.updatedAt":
		if e.complexity.Invite.UpdatedAt == nil {
			break
		}

		return e.complexity.Invite.UpdatedAt(childComplexity), true

	case "Invite.updatedBy":
		if e.complexity.Invite.UpdatedBy == nil {
			break
		}

		return e.complexity.Invite.UpdatedBy(childComplexity), true

	case "InviteBulkCreatePayload.invites":
		if e.complexity.InviteBulkCreatePayload.Invites == nil {
			break
		}

		return e.complexity.InviteBulkCreatePayload.Invites(childComplexity), true

	case "InviteConnection.edges":
		if e.complexity.InviteConnection.Edges == nil {
			break
		}

		return e.complexity.InviteConnection.Edges(childComplexity), true

	case "InviteConnection.pageInfo":
		if e.complexity.InviteConnection.PageInfo == nil {
			break
		}

		return e.complexity.InviteConnection.PageInfo(childComplexity), true

	case "InviteConnection.totalCount":
		if e.complexity.InviteConnection.TotalCount == nil {
			break
		}

		return e.complexity.InviteConnection.TotalCount(childComplexity), true

	case "InviteCreatePayload.invite":
		if e.complexity.InviteCreatePayload.Invite == nil {
			break
		}

		return e.complexity.InviteCreatePayload.Invite(childComplexity), true

	case "InviteDeletePayload.deletedID":
		if e.complexity.InviteDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.InviteDeletePayload.DeletedID(childComplexity), true

	case "InviteEdge.cursor":
		if e.complexity.InviteEdge.Cursor == nil {
			break
		}

		return e.complexity.InviteEdge.Cursor(childComplexity), true

	case "InviteEdge.node":
		if e.complexity.InviteEdge.Node == nil {
			break
		}

		return e.complexity.InviteEdge.Node(childComplexity), true

	case "InviteUpdatePayload.invite":
		if e.complexity.InviteUpdatePayload.Invite == nil {
			break
		}

		return e.complexity.InviteUpdatePayload.Invite(childComplexity), true

	case "JobResult.createdAt":
		if e.complexity.JobResult.CreatedAt == nil {
			break
		}

		return e.complexity.JobResult.CreatedAt(childComplexity), true

	case "JobResult.createdBy":
		if e.complexity.JobResult.CreatedBy == nil {
			break
		}

		return e.complexity.JobResult.CreatedBy(childComplexity), true

	case "JobResult.exitCode":
		if e.complexity.JobResult.ExitCode == nil {
			break
		}

		return e.complexity.JobResult.ExitCode(childComplexity), true

	case "JobResult.file":
		if e.complexity.JobResult.File == nil {
			break
		}

		return e.complexity.JobResult.File(childComplexity), true

	case "JobResult.fileID":
		if e.complexity.JobResult.FileID == nil {
			break
		}

		return e.complexity.JobResult.FileID(childComplexity), true

	case "JobResult.finishedAt":
		if e.complexity.JobResult.FinishedAt == nil {
			break
		}

		return e.complexity.JobResult.FinishedAt(childComplexity), true

	case "JobResult.id":
		if e.complexity.JobResult.ID == nil {
			break
		}

		return e.complexity.JobResult.ID(childComplexity), true

	case "JobResult.log":
		if e.complexity.JobResult.Log == nil {
			break
		}

		return e.complexity.JobResult.Log(childComplexity), true

	case "JobResult.owner":
		if e.complexity.JobResult.Owner == nil {
			break
		}

		return e.complexity.JobResult.Owner(childComplexity), true

	case "JobResult.ownerID":
		if e.complexity.JobResult.OwnerID == nil {
			break
		}

		return e.complexity.JobResult.OwnerID(childComplexity), true

	case "JobResult.scheduledJob":
		if e.complexity.JobResult.ScheduledJob == nil {
			break
		}

		return e.complexity.JobResult.ScheduledJob(childComplexity), true

	case "JobResult.scheduledJobID":
		if e.complexity.JobResult.ScheduledJobID == nil {
			break
		}

		return e.complexity.JobResult.ScheduledJobID(childComplexity), true

	case "JobResult.startedAt":
		if e.complexity.JobResult.StartedAt == nil {
			break
		}

		return e.complexity.JobResult.StartedAt(childComplexity), true

	case "JobResult.status":
		if e.complexity.JobResult.Status == nil {
			break
		}

		return e.complexity.JobResult.Status(childComplexity), true

	case "JobResult.updatedAt":
		if e.complexity.JobResult.UpdatedAt == nil {
			break
		}

		return e.complexity.JobResult.UpdatedAt(childComplexity), true

	case "JobResult.updatedBy":
		if e.complexity.JobResult.UpdatedBy == nil {
			break
		}

		return e.complexity.JobResult.UpdatedBy(childComplexity), true

	case "JobResultConnection.edges":
		if e.complexity.JobResultConnection.Edges == nil {
			break
		}

		return e.complexity.JobResultConnection.Edges(childComplexity), true

	case "JobResultConnection.pageInfo":
		if e.complexity.JobResultConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobResultConnection.PageInfo(childComplexity), true

	case "JobResultConnection.totalCount":
		if e.complexity.JobResultConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobResultConnection.TotalCount(childComplexity), true

	case "JobResultCreatePayload.jobResult":
		if e.complexity.JobResultCreatePayload.JobResult == nil {
			break
		}

		return e.complexity.JobResultCreatePayload.JobResult(childComplexity), true

	case "JobResultDeletePayload.deletedID":
		if e.complexity.JobResultDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.JobResultDeletePayload.DeletedID(childComplexity), true

	case "JobResultEdge.cursor":
		if e.complexity.JobResultEdge.Cursor == nil {
			break
		}

		return e.complexity.JobResultEdge.Cursor(childComplexity), true

	case "JobResultEdge.node":
		if e.complexity.JobResultEdge.Node == nil {
			break
		}

		return e.complexity.JobResultEdge.Node(childComplexity), true

	case "JobResultUpdatePayload.jobResult":
		if e.complexity.JobResultUpdatePayload.JobResult == nil {
			break
		}

		return e.complexity.JobResultUpdatePayload.JobResult(childComplexity), true

	case "JobRunner.createdAt":
		if e.complexity.JobRunner.CreatedAt == nil {
			break
		}

		return e.complexity.JobRunner.CreatedAt(childComplexity), true

	case "JobRunner.createdBy":
		if e.complexity.JobRunner.CreatedBy == nil {
			break
		}

		return e.complexity.JobRunner.CreatedBy(childComplexity), true

	case "JobRunner.displayID":
		if e.complexity.JobRunner.DisplayID == nil {
			break
		}

		return e.complexity.JobRunner.DisplayID(childComplexity), true

	case "JobRunner.id":
		if e.complexity.JobRunner.ID == nil {
			break
		}

		return e.complexity.JobRunner.ID(childComplexity), true

	case "JobRunner.ipAddress":
		if e.complexity.JobRunner.IPAddress == nil {
			break
		}

		return e.complexity.JobRunner.IPAddress(childComplexity), true

	case "JobRunner.jobRunnerTokens":
		if e.complexity.JobRunner.JobRunnerTokens == nil {
			break
		}

		args, err := ec.field_JobRunner_jobRunnerTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.JobRunner.JobRunnerTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerTokenOrder), args["where"].(*generated.JobRunnerTokenWhereInput)), true

	case "JobRunner.lastSeen":
		if e.complexity.JobRunner.LastSeen == nil {
			break
		}

		return e.complexity.JobRunner.LastSeen(childComplexity), true

	case "JobRunner.name":
		if e.complexity.JobRunner.Name == nil {
			break
		}

		return e.complexity.JobRunner.Name(childComplexity), true

	case "JobRunner.os":
		if e.complexity.JobRunner.Os == nil {
			break
		}

		return e.complexity.JobRunner.Os(childComplexity), true

	case "JobRunner.owner":
		if e.complexity.JobRunner.Owner == nil {
			break
		}

		return e.complexity.JobRunner.Owner(childComplexity), true

	case "JobRunner.ownerID":
		if e.complexity.JobRunner.OwnerID == nil {
			break
		}

		return e.complexity.JobRunner.OwnerID(childComplexity), true

	case "JobRunner.status":
		if e.complexity.JobRunner.Status == nil {
			break
		}

		return e.complexity.JobRunner.Status(childComplexity), true

	case "JobRunner.systemOwned":
		if e.complexity.JobRunner.SystemOwned == nil {
			break
		}

		return e.complexity.JobRunner.SystemOwned(childComplexity), true

	case "JobRunner.tags":
		if e.complexity.JobRunner.Tags == nil {
			break
		}

		return e.complexity.JobRunner.Tags(childComplexity), true

	case "JobRunner.updatedAt":
		if e.complexity.JobRunner.UpdatedAt == nil {
			break
		}

		return e.complexity.JobRunner.UpdatedAt(childComplexity), true

	case "JobRunner.updatedBy":
		if e.complexity.JobRunner.UpdatedBy == nil {
			break
		}

		return e.complexity.JobRunner.UpdatedBy(childComplexity), true

	case "JobRunner.version":
		if e.complexity.JobRunner.Version == nil {
			break
		}

		return e.complexity.JobRunner.Version(childComplexity), true

	case "JobRunnerConnection.edges":
		if e.complexity.JobRunnerConnection.Edges == nil {
			break
		}

		return e.complexity.JobRunnerConnection.Edges(childComplexity), true

	case "JobRunnerConnection.pageInfo":
		if e.complexity.JobRunnerConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobRunnerConnection.PageInfo(childComplexity), true

	case "JobRunnerConnection.totalCount":
		if e.complexity.JobRunnerConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobRunnerConnection.TotalCount(childComplexity), true

	case "JobRunnerCreatePayload.jobRunner":
		if e.complexity.JobRunnerCreatePayload.JobRunner == nil {
			break
		}

		return e.complexity.JobRunnerCreatePayload.JobRunner(childComplexity), true

	case "JobRunnerDeletePayload.deletedID":
		if e.complexity.JobRunnerDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.JobRunnerDeletePayload.DeletedID(childComplexity), true

	case "JobRunnerEdge.cursor":
		if e.complexity.JobRunnerEdge.Cursor == nil {
			break
		}

		return e.complexity.JobRunnerEdge.Cursor(childComplexity), true

	case "JobRunnerEdge.node":
		if e.complexity.JobRunnerEdge.Node == nil {
			break
		}

		return e.complexity.JobRunnerEdge.Node(childComplexity), true

	case "JobRunnerRegistrationToken.createdAt":
		if e.complexity.JobRunnerRegistrationToken.CreatedAt == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.CreatedAt(childComplexity), true

	case "JobRunnerRegistrationToken.createdBy":
		if e.complexity.JobRunnerRegistrationToken.CreatedBy == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.CreatedBy(childComplexity), true

	case "JobRunnerRegistrationToken.expiresAt":
		if e.complexity.JobRunnerRegistrationToken.ExpiresAt == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.ExpiresAt(childComplexity), true

	case "JobRunnerRegistrationToken.id":
		if e.complexity.JobRunnerRegistrationToken.ID == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.ID(childComplexity), true

	case "JobRunnerRegistrationToken.jobRunner":
		if e.complexity.JobRunnerRegistrationToken.JobRunner == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.JobRunner(childComplexity), true

	case "JobRunnerRegistrationToken.jobRunnerID":
		if e.complexity.JobRunnerRegistrationToken.JobRunnerID == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.JobRunnerID(childComplexity), true

	case "JobRunnerRegistrationToken.lastUsedAt":
		if e.complexity.JobRunnerRegistrationToken.LastUsedAt == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.LastUsedAt(childComplexity), true

	case "JobRunnerRegistrationToken.owner":
		if e.complexity.JobRunnerRegistrationToken.Owner == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.Owner(childComplexity), true

	case "JobRunnerRegistrationToken.ownerID":
		if e.complexity.JobRunnerRegistrationToken.OwnerID == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.OwnerID(childComplexity), true

	case "JobRunnerRegistrationToken.tags":
		if e.complexity.JobRunnerRegistrationToken.Tags == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.Tags(childComplexity), true

	case "JobRunnerRegistrationToken.token":
		if e.complexity.JobRunnerRegistrationToken.Token == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.Token(childComplexity), true

	case "JobRunnerRegistrationToken.updatedAt":
		if e.complexity.JobRunnerRegistrationToken.UpdatedAt == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.UpdatedAt(childComplexity), true

	case "JobRunnerRegistrationToken.updatedBy":
		if e.complexity.JobRunnerRegistrationToken.UpdatedBy == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationToken.UpdatedBy(childComplexity), true

	case "JobRunnerRegistrationTokenBulkCreatePayload.jobRunnerRegistrationTokens":
		if e.complexity.JobRunnerRegistrationTokenBulkCreatePayload.JobRunnerRegistrationTokens == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenBulkCreatePayload.JobRunnerRegistrationTokens(childComplexity), true

	case "JobRunnerRegistrationTokenConnection.edges":
		if e.complexity.JobRunnerRegistrationTokenConnection.Edges == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenConnection.Edges(childComplexity), true

	case "JobRunnerRegistrationTokenConnection.pageInfo":
		if e.complexity.JobRunnerRegistrationTokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenConnection.PageInfo(childComplexity), true

	case "JobRunnerRegistrationTokenConnection.totalCount":
		if e.complexity.JobRunnerRegistrationTokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenConnection.TotalCount(childComplexity), true

	case "JobRunnerRegistrationTokenCreatePayload.jobRunnerRegistrationToken":
		if e.complexity.JobRunnerRegistrationTokenCreatePayload.JobRunnerRegistrationToken == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenCreatePayload.JobRunnerRegistrationToken(childComplexity), true

	case "JobRunnerRegistrationTokenDeletePayload.deletedID":
		if e.complexity.JobRunnerRegistrationTokenDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenDeletePayload.DeletedID(childComplexity), true

	case "JobRunnerRegistrationTokenEdge.cursor":
		if e.complexity.JobRunnerRegistrationTokenEdge.Cursor == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenEdge.Cursor(childComplexity), true

	case "JobRunnerRegistrationTokenEdge.node":
		if e.complexity.JobRunnerRegistrationTokenEdge.Node == nil {
			break
		}

		return e.complexity.JobRunnerRegistrationTokenEdge.Node(childComplexity), true

	case "JobRunnerToken.createdAt":
		if e.complexity.JobRunnerToken.CreatedAt == nil {
			break
		}

		return e.complexity.JobRunnerToken.CreatedAt(childComplexity), true

	case "JobRunnerToken.createdBy":
		if e.complexity.JobRunnerToken.CreatedBy == nil {
			break
		}

		return e.complexity.JobRunnerToken.CreatedBy(childComplexity), true

	case "JobRunnerToken.expiresAt":
		if e.complexity.JobRunnerToken.ExpiresAt == nil {
			break
		}

		return e.complexity.JobRunnerToken.ExpiresAt(childComplexity), true

	case "JobRunnerToken.id":
		if e.complexity.JobRunnerToken.ID == nil {
			break
		}

		return e.complexity.JobRunnerToken.ID(childComplexity), true

	case "JobRunnerToken.isActive":
		if e.complexity.JobRunnerToken.IsActive == nil {
			break
		}

		return e.complexity.JobRunnerToken.IsActive(childComplexity), true

	case "JobRunnerToken.jobRunners":
		if e.complexity.JobRunnerToken.JobRunners == nil {
			break
		}

		args, err := ec.field_JobRunnerToken_jobRunners_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.JobRunnerToken.JobRunners(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerOrder), args["where"].(*generated.JobRunnerWhereInput)), true

	case "JobRunnerToken.lastUsedAt":
		if e.complexity.JobRunnerToken.LastUsedAt == nil {
			break
		}

		return e.complexity.JobRunnerToken.LastUsedAt(childComplexity), true

	case "JobRunnerToken.owner":
		if e.complexity.JobRunnerToken.Owner == nil {
			break
		}

		return e.complexity.JobRunnerToken.Owner(childComplexity), true

	case "JobRunnerToken.ownerID":
		if e.complexity.JobRunnerToken.OwnerID == nil {
			break
		}

		return e.complexity.JobRunnerToken.OwnerID(childComplexity), true

	case "JobRunnerToken.revokedAt":
		if e.complexity.JobRunnerToken.RevokedAt == nil {
			break
		}

		return e.complexity.JobRunnerToken.RevokedAt(childComplexity), true

	case "JobRunnerToken.revokedBy":
		if e.complexity.JobRunnerToken.RevokedBy == nil {
			break
		}

		return e.complexity.JobRunnerToken.RevokedBy(childComplexity), true

	case "JobRunnerToken.revokedReason":
		if e.complexity.JobRunnerToken.RevokedReason == nil {
			break
		}

		return e.complexity.JobRunnerToken.RevokedReason(childComplexity), true

	case "JobRunnerToken.tags":
		if e.complexity.JobRunnerToken.Tags == nil {
			break
		}

		return e.complexity.JobRunnerToken.Tags(childComplexity), true

	case "JobRunnerToken.token":
		if e.complexity.JobRunnerToken.Token == nil {
			break
		}

		return e.complexity.JobRunnerToken.Token(childComplexity), true

	case "JobRunnerToken.updatedAt":
		if e.complexity.JobRunnerToken.UpdatedAt == nil {
			break
		}

		return e.complexity.JobRunnerToken.UpdatedAt(childComplexity), true

	case "JobRunnerToken.updatedBy":
		if e.complexity.JobRunnerToken.UpdatedBy == nil {
			break
		}

		return e.complexity.JobRunnerToken.UpdatedBy(childComplexity), true

	case "JobRunnerTokenConnection.edges":
		if e.complexity.JobRunnerTokenConnection.Edges == nil {
			break
		}

		return e.complexity.JobRunnerTokenConnection.Edges(childComplexity), true

	case "JobRunnerTokenConnection.pageInfo":
		if e.complexity.JobRunnerTokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobRunnerTokenConnection.PageInfo(childComplexity), true

	case "JobRunnerTokenConnection.totalCount":
		if e.complexity.JobRunnerTokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobRunnerTokenConnection.TotalCount(childComplexity), true

	case "JobRunnerTokenCreatePayload.jobRunnerToken":
		if e.complexity.JobRunnerTokenCreatePayload.JobRunnerToken == nil {
			break
		}

		return e.complexity.JobRunnerTokenCreatePayload.JobRunnerToken(childComplexity), true

	case "JobRunnerTokenDeletePayload.deletedID":
		if e.complexity.JobRunnerTokenDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.JobRunnerTokenDeletePayload.DeletedID(childComplexity), true

	case "JobRunnerTokenEdge.cursor":
		if e.complexity.JobRunnerTokenEdge.Cursor == nil {
			break
		}

		return e.complexity.JobRunnerTokenEdge.Cursor(childComplexity), true

	case "JobRunnerTokenEdge.node":
		if e.complexity.JobRunnerTokenEdge.Node == nil {
			break
		}

		return e.complexity.JobRunnerTokenEdge.Node(childComplexity), true

	case "JobRunnerTokenUpdatePayload.jobRunnerToken":
		if e.complexity.JobRunnerTokenUpdatePayload.JobRunnerToken == nil {
			break
		}

		return e.complexity.JobRunnerTokenUpdatePayload.JobRunnerToken(childComplexity), true

	case "JobRunnerUpdatePayload.jobRunner":
		if e.complexity.JobRunnerUpdatePayload.JobRunner == nil {
			break
		}

		return e.complexity.JobRunnerUpdatePayload.JobRunner(childComplexity), true

	case "JobTemplate.configuration":
		if e.complexity.JobTemplate.Configuration == nil {
			break
		}

		return e.complexity.JobTemplate.Configuration(childComplexity), true

	case "JobTemplate.createdAt":
		if e.complexity.JobTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.JobTemplate.CreatedAt(childComplexity), true

	case "JobTemplate.createdBy":
		if e.complexity.JobTemplate.CreatedBy == nil {
			break
		}

		return e.complexity.JobTemplate.CreatedBy(childComplexity), true

	case "JobTemplate.cron":
		if e.complexity.JobTemplate.Cron == nil {
			break
		}

		return e.complexity.JobTemplate.Cron(childComplexity), true

	case "JobTemplate.description":
		if e.complexity.JobTemplate.Description == nil {
			break
		}

		return e.complexity.JobTemplate.Description(childComplexity), true

	case "JobTemplate.displayID":
		if e.complexity.JobTemplate.DisplayID == nil {
			break
		}

		return e.complexity.JobTemplate.DisplayID(childComplexity), true

	case "JobTemplate.downloadURL":
		if e.complexity.JobTemplate.DownloadURL == nil {
			break
		}

		return e.complexity.JobTemplate.DownloadURL(childComplexity), true

	case "JobTemplate.id":
		if e.complexity.JobTemplate.ID == nil {
			break
		}

		return e.complexity.JobTemplate.ID(childComplexity), true

	case "JobTemplate.owner":
		if e.complexity.JobTemplate.Owner == nil {
			break
		}

		return e.complexity.JobTemplate.Owner(childComplexity), true

	case "JobTemplate.ownerID":
		if e.complexity.JobTemplate.OwnerID == nil {
			break
		}

		return e.complexity.JobTemplate.OwnerID(childComplexity), true

	case "JobTemplate.platform":
		if e.complexity.JobTemplate.Platform == nil {
			break
		}

		return e.complexity.JobTemplate.Platform(childComplexity), true

	case "JobTemplate.scheduledJobs":
		if e.complexity.JobTemplate.ScheduledJobs == nil {
			break
		}

		args, err := ec.field_JobTemplate_scheduledJobs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.JobTemplate.ScheduledJobs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScheduledJobOrder), args["where"].(*generated.ScheduledJobWhereInput)), true

	case "JobTemplate.systemOwned":
		if e.complexity.JobTemplate.SystemOwned == nil {
			break
		}

		return e.complexity.JobTemplate.SystemOwned(childComplexity), true

	case "JobTemplate.tags":
		if e.complexity.JobTemplate.Tags == nil {
			break
		}

		return e.complexity.JobTemplate.Tags(childComplexity), true

	case "JobTemplate.title":
		if e.complexity.JobTemplate.Title == nil {
			break
		}

		return e.complexity.JobTemplate.Title(childComplexity), true

	case "JobTemplate.updatedAt":
		if e.complexity.JobTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.JobTemplate.UpdatedAt(childComplexity), true

	case "JobTemplate.updatedBy":
		if e.complexity.JobTemplate.UpdatedBy == nil {
			break
		}

		return e.complexity.JobTemplate.UpdatedBy(childComplexity), true

	case "JobTemplateBulkCreatePayload.jobTemplates":
		if e.complexity.JobTemplateBulkCreatePayload.JobTemplates == nil {
			break
		}

		return e.complexity.JobTemplateBulkCreatePayload.JobTemplates(childComplexity), true

	case "JobTemplateConnection.edges":
		if e.complexity.JobTemplateConnection.Edges == nil {
			break
		}

		return e.complexity.JobTemplateConnection.Edges(childComplexity), true

	case "JobTemplateConnection.pageInfo":
		if e.complexity.JobTemplateConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobTemplateConnection.PageInfo(childComplexity), true

	case "JobTemplateConnection.totalCount":
		if e.complexity.JobTemplateConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobTemplateConnection.TotalCount(childComplexity), true

	case "JobTemplateCreatePayload.jobTemplate":
		if e.complexity.JobTemplateCreatePayload.JobTemplate == nil {
			break
		}

		return e.complexity.JobTemplateCreatePayload.JobTemplate(childComplexity), true

	case "JobTemplateDeletePayload.deletedID":
		if e.complexity.JobTemplateDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.JobTemplateDeletePayload.DeletedID(childComplexity), true

	case "JobTemplateEdge.cursor":
		if e.complexity.JobTemplateEdge.Cursor == nil {
			break
		}

		return e.complexity.JobTemplateEdge.Cursor(childComplexity), true

	case "JobTemplateEdge.node":
		if e.complexity.JobTemplateEdge.Node == nil {
			break
		}

		return e.complexity.JobTemplateEdge.Node(childComplexity), true

	case "JobTemplateHistory.configuration":
		if e.complexity.JobTemplateHistory.Configuration == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Configuration(childComplexity), true

	case "JobTemplateHistory.createdAt":
		if e.complexity.JobTemplateHistory.CreatedAt == nil {
			break
		}

		return e.complexity.JobTemplateHistory.CreatedAt(childComplexity), true

	case "JobTemplateHistory.createdBy":
		if e.complexity.JobTemplateHistory.CreatedBy == nil {
			break
		}

		return e.complexity.JobTemplateHistory.CreatedBy(childComplexity), true

	case "JobTemplateHistory.cron":
		if e.complexity.JobTemplateHistory.Cron == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Cron(childComplexity), true

	case "JobTemplateHistory.description":
		if e.complexity.JobTemplateHistory.Description == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Description(childComplexity), true

	case "JobTemplateHistory.displayID":
		if e.complexity.JobTemplateHistory.DisplayID == nil {
			break
		}

		return e.complexity.JobTemplateHistory.DisplayID(childComplexity), true

	case "JobTemplateHistory.downloadURL":
		if e.complexity.JobTemplateHistory.DownloadURL == nil {
			break
		}

		return e.complexity.JobTemplateHistory.DownloadURL(childComplexity), true

	case "JobTemplateHistory.historyTime":
		if e.complexity.JobTemplateHistory.HistoryTime == nil {
			break
		}

		return e.complexity.JobTemplateHistory.HistoryTime(childComplexity), true

	case "JobTemplateHistory.id":
		if e.complexity.JobTemplateHistory.ID == nil {
			break
		}

		return e.complexity.JobTemplateHistory.ID(childComplexity), true

	case "JobTemplateHistory.operation":
		if e.complexity.JobTemplateHistory.Operation == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Operation(childComplexity), true

	case "JobTemplateHistory.ownerID":
		if e.complexity.JobTemplateHistory.OwnerID == nil {
			break
		}

		return e.complexity.JobTemplateHistory.OwnerID(childComplexity), true

	case "JobTemplateHistory.platform":
		if e.complexity.JobTemplateHistory.Platform == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Platform(childComplexity), true

	case "JobTemplateHistory.ref":
		if e.complexity.JobTemplateHistory.Ref == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Ref(childComplexity), true

	case "JobTemplateHistory.systemOwned":
		if e.complexity.JobTemplateHistory.SystemOwned == nil {
			break
		}

		return e.complexity.JobTemplateHistory.SystemOwned(childComplexity), true

	case "JobTemplateHistory.tags":
		if e.complexity.JobTemplateHistory.Tags == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Tags(childComplexity), true

	case "JobTemplateHistory.title":
		if e.complexity.JobTemplateHistory.Title == nil {
			break
		}

		return e.complexity.JobTemplateHistory.Title(childComplexity), true

	case "JobTemplateHistory.updatedAt":
		if e.complexity.JobTemplateHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.JobTemplateHistory.UpdatedAt(childComplexity), true

	case "JobTemplateHistory.updatedBy":
		if e.complexity.JobTemplateHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.JobTemplateHistory.UpdatedBy(childComplexity), true

	case "JobTemplateHistoryConnection.edges":
		if e.complexity.JobTemplateHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.JobTemplateHistoryConnection.Edges(childComplexity), true

	case "JobTemplateHistoryConnection.pageInfo":
		if e.complexity.JobTemplateHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobTemplateHistoryConnection.PageInfo(childComplexity), true

	case "JobTemplateHistoryConnection.totalCount":
		if e.complexity.JobTemplateHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobTemplateHistoryConnection.TotalCount(childComplexity), true

	case "JobTemplateHistoryEdge.cursor":
		if e.complexity.JobTemplateHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.JobTemplateHistoryEdge.Cursor(childComplexity), true

	case "JobTemplateHistoryEdge.node":
		if e.complexity.JobTemplateHistoryEdge.Node == nil {
			break
		}

		return e.complexity.JobTemplateHistoryEdge.Node(childComplexity), true

	case "JobTemplateUpdatePayload.jobTemplate":
		if e.complexity.JobTemplateUpdatePayload.JobTemplate == nil {
			break
		}

		return e.complexity.JobTemplateUpdatePayload.JobTemplate(childComplexity), true

	case "MappableDomain.createdAt":
		if e.complexity.MappableDomain.CreatedAt == nil {
			break
		}

		return e.complexity.MappableDomain.CreatedAt(childComplexity), true

	case "MappableDomain.createdBy":
		if e.complexity.MappableDomain.CreatedBy == nil {
			break
		}

		return e.complexity.MappableDomain.CreatedBy(childComplexity), true

	case "MappableDomain.customDomains":
		if e.complexity.MappableDomain.CustomDomains == nil {
			break
		}

		args, err := ec.field_MappableDomain_customDomains_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MappableDomain.CustomDomains(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.CustomDomainOrder), args["where"].(*generated.CustomDomainWhereInput)), true

	case "MappableDomain.id":
		if e.complexity.MappableDomain.ID == nil {
			break
		}

		return e.complexity.MappableDomain.ID(childComplexity), true

	case "MappableDomain.name":
		if e.complexity.MappableDomain.Name == nil {
			break
		}

		return e.complexity.MappableDomain.Name(childComplexity), true

	case "MappableDomain.tags":
		if e.complexity.MappableDomain.Tags == nil {
			break
		}

		return e.complexity.MappableDomain.Tags(childComplexity), true

	case "MappableDomain.updatedAt":
		if e.complexity.MappableDomain.UpdatedAt == nil {
			break
		}

		return e.complexity.MappableDomain.UpdatedAt(childComplexity), true

	case "MappableDomain.updatedBy":
		if e.complexity.MappableDomain.UpdatedBy == nil {
			break
		}

		return e.complexity.MappableDomain.UpdatedBy(childComplexity), true

	case "MappableDomain.zoneID":
		if e.complexity.MappableDomain.ZoneID == nil {
			break
		}

		return e.complexity.MappableDomain.ZoneID(childComplexity), true

	case "MappableDomainBulkCreatePayload.mappableDomains":
		if e.complexity.MappableDomainBulkCreatePayload.MappableDomains == nil {
			break
		}

		return e.complexity.MappableDomainBulkCreatePayload.MappableDomains(childComplexity), true

	case "MappableDomainConnection.edges":
		if e.complexity.MappableDomainConnection.Edges == nil {
			break
		}

		return e.complexity.MappableDomainConnection.Edges(childComplexity), true

	case "MappableDomainConnection.pageInfo":
		if e.complexity.MappableDomainConnection.PageInfo == nil {
			break
		}

		return e.complexity.MappableDomainConnection.PageInfo(childComplexity), true

	case "MappableDomainConnection.totalCount":
		if e.complexity.MappableDomainConnection.TotalCount == nil {
			break
		}

		return e.complexity.MappableDomainConnection.TotalCount(childComplexity), true

	case "MappableDomainCreatePayload.mappableDomain":
		if e.complexity.MappableDomainCreatePayload.MappableDomain == nil {
			break
		}

		return e.complexity.MappableDomainCreatePayload.MappableDomain(childComplexity), true

	case "MappableDomainDeletePayload.deletedID":
		if e.complexity.MappableDomainDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.MappableDomainDeletePayload.DeletedID(childComplexity), true

	case "MappableDomainEdge.cursor":
		if e.complexity.MappableDomainEdge.Cursor == nil {
			break
		}

		return e.complexity.MappableDomainEdge.Cursor(childComplexity), true

	case "MappableDomainEdge.node":
		if e.complexity.MappableDomainEdge.Node == nil {
			break
		}

		return e.complexity.MappableDomainEdge.Node(childComplexity), true

	case "MappableDomainHistory.createdAt":
		if e.complexity.MappableDomainHistory.CreatedAt == nil {
			break
		}

		return e.complexity.MappableDomainHistory.CreatedAt(childComplexity), true

	case "MappableDomainHistory.createdBy":
		if e.complexity.MappableDomainHistory.CreatedBy == nil {
			break
		}

		return e.complexity.MappableDomainHistory.CreatedBy(childComplexity), true

	case "MappableDomainHistory.historyTime":
		if e.complexity.MappableDomainHistory.HistoryTime == nil {
			break
		}

		return e.complexity.MappableDomainHistory.HistoryTime(childComplexity), true

	case "MappableDomainHistory.id":
		if e.complexity.MappableDomainHistory.ID == nil {
			break
		}

		return e.complexity.MappableDomainHistory.ID(childComplexity), true

	case "MappableDomainHistory.name":
		if e.complexity.MappableDomainHistory.Name == nil {
			break
		}

		return e.complexity.MappableDomainHistory.Name(childComplexity), true

	case "MappableDomainHistory.operation":
		if e.complexity.MappableDomainHistory.Operation == nil {
			break
		}

		return e.complexity.MappableDomainHistory.Operation(childComplexity), true

	case "MappableDomainHistory.ref":
		if e.complexity.MappableDomainHistory.Ref == nil {
			break
		}

		return e.complexity.MappableDomainHistory.Ref(childComplexity), true

	case "MappableDomainHistory.tags":
		if e.complexity.MappableDomainHistory.Tags == nil {
			break
		}

		return e.complexity.MappableDomainHistory.Tags(childComplexity), true

	case "MappableDomainHistory.updatedAt":
		if e.complexity.MappableDomainHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.MappableDomainHistory.UpdatedAt(childComplexity), true

	case "MappableDomainHistory.updatedBy":
		if e.complexity.MappableDomainHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.MappableDomainHistory.UpdatedBy(childComplexity), true

	case "MappableDomainHistory.zoneID":
		if e.complexity.MappableDomainHistory.ZoneID == nil {
			break
		}

		return e.complexity.MappableDomainHistory.ZoneID(childComplexity), true

	case "MappableDomainHistoryConnection.edges":
		if e.complexity.MappableDomainHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.MappableDomainHistoryConnection.Edges(childComplexity), true

	case "MappableDomainHistoryConnection.pageInfo":
		if e.complexity.MappableDomainHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.MappableDomainHistoryConnection.PageInfo(childComplexity), true

	case "MappableDomainHistoryConnection.totalCount":
		if e.complexity.MappableDomainHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.MappableDomainHistoryConnection.TotalCount(childComplexity), true

	case "MappableDomainHistoryEdge.cursor":
		if e.complexity.MappableDomainHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.MappableDomainHistoryEdge.Cursor(childComplexity), true

	case "MappableDomainHistoryEdge.node":
		if e.complexity.MappableDomainHistoryEdge.Node == nil {
			break
		}

		return e.complexity.MappableDomainHistoryEdge.Node(childComplexity), true

	case "MappableDomainUpdatePayload.mappableDomain":
		if e.complexity.MappableDomainUpdatePayload.MappableDomain == nil {
			break
		}

		return e.complexity.MappableDomainUpdatePayload.MappableDomain(childComplexity), true

	case "MappedControl.blockedGroups":
		if e.complexity.MappedControl.BlockedGroups == nil {
			break
		}

		args, err := ec.field_MappedControl_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MappedControl.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "MappedControl.confidence":
		if e.complexity.MappedControl.Confidence == nil {
			break
		}

		return e.complexity.MappedControl.Confidence(childComplexity), true

	case "MappedControl.createdAt":
		if e.complexity.MappedControl.CreatedAt == nil {
			break
		}

		return e.complexity.MappedControl.CreatedAt(childComplexity), true

	case "MappedControl.createdBy":
		if e.complexity.MappedControl.CreatedBy == nil {
			break
		}

		return e.complexity.MappedControl.CreatedBy(childComplexity), true

	case "MappedControl.editors":
		if e.complexity.MappedControl.Editors == nil {
			break
		}

		args, err := ec.field_MappedControl_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MappedControl.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "MappedControl.fromControls":
		if e.complexity.MappedControl.FromControls == nil {
			break
		}

		args, err := ec.field_MappedControl_fromControls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MappedControl.FromControls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "MappedControl.fromSubcontrols":
		if e.complexity.MappedControl.FromSubcontrols == nil {
			break
		}

		args, err := ec.field_MappedControl_fromSubcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MappedControl.FromSubcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "MappedControl.id":
		if e.complexity.MappedControl.ID == nil {
			break
		}

		return e.complexity.MappedControl.ID(childComplexity), true

	case "MappedControl.mappingType":
		if e.complexity.MappedControl.MappingType == nil {
			break
		}

		return e.complexity.MappedControl.MappingType(childComplexity), true

	case "MappedControl.owner":
		if e.complexity.MappedControl.Owner == nil {
			break
		}

		return e.complexity.MappedControl.Owner(childComplexity), true

	case "MappedControl.ownerID":
		if e.complexity.MappedControl.OwnerID == nil {
			break
		}

		return e.complexity.MappedControl.OwnerID(childComplexity), true

	case "MappedControl.relation":
		if e.complexity.MappedControl.Relation == nil {
			break
		}

		return e.complexity.MappedControl.Relation(childComplexity), true

	case "MappedControl.source":
		if e.complexity.MappedControl.Source == nil {
			break
		}

		return e.complexity.MappedControl.Source(childComplexity), true

	case "MappedControl.tags":
		if e.complexity.MappedControl.Tags == nil {
			break
		}

		return e.complexity.MappedControl.Tags(childComplexity), true

	case "MappedControl.toControls":
		if e.complexity.MappedControl.ToControls == nil {
			break
		}

		args, err := ec.field_MappedControl_toControls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MappedControl.ToControls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "MappedControl.toSubcontrols":
		if e.complexity.MappedControl.ToSubcontrols == nil {
			break
		}

		args, err := ec.field_MappedControl_toSubcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MappedControl.ToSubcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "MappedControl.updatedAt":
		if e.complexity.MappedControl.UpdatedAt == nil {
			break
		}

		return e.complexity.MappedControl.UpdatedAt(childComplexity), true

	case "MappedControl.updatedBy":
		if e.complexity.MappedControl.UpdatedBy == nil {
			break
		}

		return e.complexity.MappedControl.UpdatedBy(childComplexity), true

	case "MappedControlBulkCreatePayload.mappedControls":
		if e.complexity.MappedControlBulkCreatePayload.MappedControls == nil {
			break
		}

		return e.complexity.MappedControlBulkCreatePayload.MappedControls(childComplexity), true

	case "MappedControlConnection.edges":
		if e.complexity.MappedControlConnection.Edges == nil {
			break
		}

		return e.complexity.MappedControlConnection.Edges(childComplexity), true

	case "MappedControlConnection.pageInfo":
		if e.complexity.MappedControlConnection.PageInfo == nil {
			break
		}

		return e.complexity.MappedControlConnection.PageInfo(childComplexity), true

	case "MappedControlConnection.totalCount":
		if e.complexity.MappedControlConnection.TotalCount == nil {
			break
		}

		return e.complexity.MappedControlConnection.TotalCount(childComplexity), true

	case "MappedControlCreatePayload.mappedControl":
		if e.complexity.MappedControlCreatePayload.MappedControl == nil {
			break
		}

		return e.complexity.MappedControlCreatePayload.MappedControl(childComplexity), true

	case "MappedControlDeletePayload.deletedID":
		if e.complexity.MappedControlDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.MappedControlDeletePayload.DeletedID(childComplexity), true

	case "MappedControlEdge.cursor":
		if e.complexity.MappedControlEdge.Cursor == nil {
			break
		}

		return e.complexity.MappedControlEdge.Cursor(childComplexity), true

	case "MappedControlEdge.node":
		if e.complexity.MappedControlEdge.Node == nil {
			break
		}

		return e.complexity.MappedControlEdge.Node(childComplexity), true

	case "MappedControlHistory.confidence":
		if e.complexity.MappedControlHistory.Confidence == nil {
			break
		}

		return e.complexity.MappedControlHistory.Confidence(childComplexity), true

	case "MappedControlHistory.createdAt":
		if e.complexity.MappedControlHistory.CreatedAt == nil {
			break
		}

		return e.complexity.MappedControlHistory.CreatedAt(childComplexity), true

	case "MappedControlHistory.createdBy":
		if e.complexity.MappedControlHistory.CreatedBy == nil {
			break
		}

		return e.complexity.MappedControlHistory.CreatedBy(childComplexity), true

	case "MappedControlHistory.historyTime":
		if e.complexity.MappedControlHistory.HistoryTime == nil {
			break
		}

		return e.complexity.MappedControlHistory.HistoryTime(childComplexity), true

	case "MappedControlHistory.id":
		if e.complexity.MappedControlHistory.ID == nil {
			break
		}

		return e.complexity.MappedControlHistory.ID(childComplexity), true

	case "MappedControlHistory.mappingType":
		if e.complexity.MappedControlHistory.MappingType == nil {
			break
		}

		return e.complexity.MappedControlHistory.MappingType(childComplexity), true

	case "MappedControlHistory.operation":
		if e.complexity.MappedControlHistory.Operation == nil {
			break
		}

		return e.complexity.MappedControlHistory.Operation(childComplexity), true

	case "MappedControlHistory.ownerID":
		if e.complexity.MappedControlHistory.OwnerID == nil {
			break
		}

		return e.complexity.MappedControlHistory.OwnerID(childComplexity), true

	case "MappedControlHistory.ref":
		if e.complexity.MappedControlHistory.Ref == nil {
			break
		}

		return e.complexity.MappedControlHistory.Ref(childComplexity), true

	case "MappedControlHistory.relation":
		if e.complexity.MappedControlHistory.Relation == nil {
			break
		}

		return e.complexity.MappedControlHistory.Relation(childComplexity), true

	case "MappedControlHistory.source":
		if e.complexity.MappedControlHistory.Source == nil {
			break
		}

		return e.complexity.MappedControlHistory.Source(childComplexity), true

	case "MappedControlHistory.tags":
		if e.complexity.MappedControlHistory.Tags == nil {
			break
		}

		return e.complexity.MappedControlHistory.Tags(childComplexity), true

	case "MappedControlHistory.updatedAt":
		if e.complexity.MappedControlHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.MappedControlHistory.UpdatedAt(childComplexity), true

	case "MappedControlHistory.updatedBy":
		if e.complexity.MappedControlHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.MappedControlHistory.UpdatedBy(childComplexity), true

	case "MappedControlHistoryConnection.edges":
		if e.complexity.MappedControlHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.MappedControlHistoryConnection.Edges(childComplexity), true

	case "MappedControlHistoryConnection.pageInfo":
		if e.complexity.MappedControlHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.MappedControlHistoryConnection.PageInfo(childComplexity), true

	case "MappedControlHistoryConnection.totalCount":
		if e.complexity.MappedControlHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.MappedControlHistoryConnection.TotalCount(childComplexity), true

	case "MappedControlHistoryEdge.cursor":
		if e.complexity.MappedControlHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.MappedControlHistoryEdge.Cursor(childComplexity), true

	case "MappedControlHistoryEdge.node":
		if e.complexity.MappedControlHistoryEdge.Node == nil {
			break
		}

		return e.complexity.MappedControlHistoryEdge.Node(childComplexity), true

	case "MappedControlUpdatePayload.mappedControl":
		if e.complexity.MappedControlUpdatePayload.MappedControl == nil {
			break
		}

		return e.complexity.MappedControlUpdatePayload.MappedControl(childComplexity), true

	case "Mutation.createAPIToken":
		if e.complexity.Mutation.CreateAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_createAPIToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAPIToken(childComplexity, args["input"].(generated.CreateAPITokenInput)), true

	case "Mutation.createActionPlan":
		if e.complexity.Mutation.CreateActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createActionPlan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateActionPlan(childComplexity, args["input"].(generated.CreateActionPlanInput)), true

	case "Mutation.createAsset":
		if e.complexity.Mutation.CreateAsset == nil {
			break
		}

		args, err := ec.field_Mutation_createAsset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAsset(childComplexity, args["input"].(generated.CreateAssetInput)), true

	case "Mutation.createBulkAPIToken":
		if e.complexity.Mutation.CreateBulkAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkAPIToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkAPIToken(childComplexity, args["input"].([]*generated.CreateAPITokenInput)), true

	case "Mutation.createBulkActionPlan":
		if e.complexity.Mutation.CreateBulkActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkActionPlan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkActionPlan(childComplexity, args["input"].([]*generated.CreateActionPlanInput)), true

	case "Mutation.createBulkAsset":
		if e.complexity.Mutation.CreateBulkAsset == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkAsset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkAsset(childComplexity, args["input"].([]*generated.CreateAssetInput)), true

	case "Mutation.createBulkCSVAPIToken":
		if e.complexity.Mutation.CreateBulkCSVAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVAPIToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVAPIToken(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVActionPlan":
		if e.complexity.Mutation.CreateBulkCSVActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVActionPlan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVActionPlan(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVAsset":
		if e.complexity.Mutation.CreateBulkCSVAsset == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVAsset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVAsset(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVContact":
		if e.complexity.Mutation.CreateBulkCSVContact == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVContact_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVContact(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVControl":
		if e.complexity.Mutation.CreateBulkCSVControl == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVControl(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVControlImplementation":
		if e.complexity.Mutation.CreateBulkCSVControlImplementation == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVControlImplementation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVControlImplementation(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVControlObjective":
		if e.complexity.Mutation.CreateBulkCSVControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVControlObjective_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVControlObjective(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVCustomDomain":
		if e.complexity.Mutation.CreateBulkCSVCustomDomain == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVCustomDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVCustomDomain(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVDNSVerification":
		if e.complexity.Mutation.CreateBulkCSVDNSVerification == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVDNSVerification_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVDNSVerification(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVDocumentData":
		if e.complexity.Mutation.CreateBulkCSVDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVDocumentData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVDocumentData(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVEntity":
		if e.complexity.Mutation.CreateBulkCSVEntity == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVEntity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVEntity(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVEntityType":
		if e.complexity.Mutation.CreateBulkCSVEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVEntityType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVEntityType(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVEvent":
		if e.complexity.Mutation.CreateBulkCSVEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVEvent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVEvent(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVGroup":
		if e.complexity.Mutation.CreateBulkCSVGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVGroup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVGroup(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVGroupMembership":
		if e.complexity.Mutation.CreateBulkCSVGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVGroupMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVGroupMembership(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVGroupSetting":
		if e.complexity.Mutation.CreateBulkCSVGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVGroupSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVGroupSetting(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVHush":
		if e.complexity.Mutation.CreateBulkCSVHush == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVHush_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVHush(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVInternalPolicy":
		if e.complexity.Mutation.CreateBulkCSVInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVInternalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVInternalPolicy(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVInvite":
		if e.complexity.Mutation.CreateBulkCSVInvite == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVInvite_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVInvite(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVJobTemplate":
		if e.complexity.Mutation.CreateBulkCSVJobTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVJobTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVJobTemplate(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVMappableDomain":
		if e.complexity.Mutation.CreateBulkCSVMappableDomain == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVMappableDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVMappableDomain(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVMappedControl":
		if e.complexity.Mutation.CreateBulkCSVMappedControl == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVMappedControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVMappedControl(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVNarrative":
		if e.complexity.Mutation.CreateBulkCSVNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVNarrative_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVNarrative(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVOrgMembership":
		if e.complexity.Mutation.CreateBulkCSVOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVOrgMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVOrgMembership(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVOrganizationSetting":
		if e.complexity.Mutation.CreateBulkCSVOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVOrganizationSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVOrganizationSetting(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVProcedure":
		if e.complexity.Mutation.CreateBulkCSVProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVProcedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVProcedure(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVProgram":
		if e.complexity.Mutation.CreateBulkCSVProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVProgram(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVProgramMembership":
		if e.complexity.Mutation.CreateBulkCSVProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVProgramMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVProgramMembership(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVRisk":
		if e.complexity.Mutation.CreateBulkCSVRisk == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVRisk_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVRisk(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVScan":
		if e.complexity.Mutation.CreateBulkCSVScan == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVScan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVScan(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVScheduledJob":
		if e.complexity.Mutation.CreateBulkCSVScheduledJob == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVScheduledJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVScheduledJob(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVSubcontrol":
		if e.complexity.Mutation.CreateBulkCSVSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVSubcontrol_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVSubcontrol(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVSubprocessor":
		if e.complexity.Mutation.CreateBulkCSVSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVSubprocessor(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVSubscriber":
		if e.complexity.Mutation.CreateBulkCSVSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVSubscriber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVSubscriber(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVTask":
		if e.complexity.Mutation.CreateBulkCSVTask == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVTask(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVTemplate":
		if e.complexity.Mutation.CreateBulkCSVTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVTemplate(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVTrustCenterCompliance":
		if e.complexity.Mutation.CreateBulkCSVTrustCenterCompliance == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVTrustCenterCompliance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVTrustCenterCompliance(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVTrustCenterDoc":
		if e.complexity.Mutation.CreateBulkCSVTrustCenterDoc == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVTrustCenterDoc_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVTrustCenterDoc(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVTrustCenterSubprocessor":
		if e.complexity.Mutation.CreateBulkCSVTrustCenterSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVTrustCenterSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVTrustCenterSubprocessor(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVUserSetting":
		if e.complexity.Mutation.CreateBulkCSVUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVUserSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVUserSetting(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkContact":
		if e.complexity.Mutation.CreateBulkContact == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkContact_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkContact(childComplexity, args["input"].([]*generated.CreateContactInput)), true

	case "Mutation.createBulkControl":
		if e.complexity.Mutation.CreateBulkControl == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkControl(childComplexity, args["input"].([]*generated.CreateControlInput)), true

	case "Mutation.createBulkControlImplementation":
		if e.complexity.Mutation.CreateBulkControlImplementation == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkControlImplementation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkControlImplementation(childComplexity, args["input"].([]*generated.CreateControlImplementationInput)), true

	case "Mutation.createBulkControlObjective":
		if e.complexity.Mutation.CreateBulkControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkControlObjective_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkControlObjective(childComplexity, args["input"].([]*generated.CreateControlObjectiveInput)), true

	case "Mutation.createBulkCustomDomain":
		if e.complexity.Mutation.CreateBulkCustomDomain == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCustomDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCustomDomain(childComplexity, args["input"].([]*generated.CreateCustomDomainInput)), true

	case "Mutation.createBulkDNSVerification":
		if e.complexity.Mutation.CreateBulkDNSVerification == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkDNSVerification_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkDNSVerification(childComplexity, args["input"].([]*generated.CreateDNSVerificationInput)), true

	case "Mutation.createBulkDocumentData":
		if e.complexity.Mutation.CreateBulkDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkDocumentData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkDocumentData(childComplexity, args["input"].([]*generated.CreateDocumentDataInput)), true

	case "Mutation.createBulkEntity":
		if e.complexity.Mutation.CreateBulkEntity == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkEntity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkEntity(childComplexity, args["input"].([]*generated.CreateEntityInput)), true

	case "Mutation.createBulkEntityType":
		if e.complexity.Mutation.CreateBulkEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkEntityType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkEntityType(childComplexity, args["input"].([]*generated.CreateEntityTypeInput)), true

	case "Mutation.createBulkEvent":
		if e.complexity.Mutation.CreateBulkEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkEvent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkEvent(childComplexity, args["input"].([]*generated.CreateEventInput)), true

	case "Mutation.createBulkGroup":
		if e.complexity.Mutation.CreateBulkGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkGroup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkGroup(childComplexity, args["input"].([]*generated.CreateGroupInput)), true

	case "Mutation.createBulkGroupMembership":
		if e.complexity.Mutation.CreateBulkGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkGroupMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkGroupMembership(childComplexity, args["input"].([]*generated.CreateGroupMembershipInput)), true

	case "Mutation.createBulkGroupSetting":
		if e.complexity.Mutation.CreateBulkGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkGroupSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkGroupSetting(childComplexity, args["input"].([]*generated.CreateGroupSettingInput)), true

	case "Mutation.createBulkHush":
		if e.complexity.Mutation.CreateBulkHush == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkHush_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkHush(childComplexity, args["input"].([]*generated.CreateHushInput)), true

	case "Mutation.createBulkInternalPolicy":
		if e.complexity.Mutation.CreateBulkInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkInternalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkInternalPolicy(childComplexity, args["input"].([]*generated.CreateInternalPolicyInput)), true

	case "Mutation.createBulkInvite":
		if e.complexity.Mutation.CreateBulkInvite == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkInvite_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkInvite(childComplexity, args["input"].([]*generated.CreateInviteInput)), true

	case "Mutation.createBulkJobTemplate":
		if e.complexity.Mutation.CreateBulkJobTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkJobTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkJobTemplate(childComplexity, args["input"].([]*generated.CreateJobTemplateInput)), true

	case "Mutation.createBulkMappableDomain":
		if e.complexity.Mutation.CreateBulkMappableDomain == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkMappableDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkMappableDomain(childComplexity, args["input"].([]*generated.CreateMappableDomainInput)), true

	case "Mutation.createBulkMappedControl":
		if e.complexity.Mutation.CreateBulkMappedControl == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkMappedControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkMappedControl(childComplexity, args["input"].([]*generated.CreateMappedControlInput)), true

	case "Mutation.createBulkNarrative":
		if e.complexity.Mutation.CreateBulkNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkNarrative_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkNarrative(childComplexity, args["input"].([]*generated.CreateNarrativeInput)), true

	case "Mutation.createBulkOrgMembership":
		if e.complexity.Mutation.CreateBulkOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkOrgMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkOrgMembership(childComplexity, args["input"].([]*generated.CreateOrgMembershipInput)), true

	case "Mutation.createBulkOrganizationSetting":
		if e.complexity.Mutation.CreateBulkOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkOrganizationSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkOrganizationSetting(childComplexity, args["input"].([]*generated.CreateOrganizationSettingInput)), true

	case "Mutation.createBulkProcedure":
		if e.complexity.Mutation.CreateBulkProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkProcedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkProcedure(childComplexity, args["input"].([]*generated.CreateProcedureInput)), true

	case "Mutation.createBulkProgram":
		if e.complexity.Mutation.CreateBulkProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkProgram(childComplexity, args["input"].([]*generated.CreateProgramInput)), true

	case "Mutation.createBulkProgramMembership":
		if e.complexity.Mutation.CreateBulkProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkProgramMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkProgramMembership(childComplexity, args["input"].([]*generated.CreateProgramMembershipInput)), true

	case "Mutation.createBulkRisk":
		if e.complexity.Mutation.CreateBulkRisk == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkRisk_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkRisk(childComplexity, args["input"].([]*generated.CreateRiskInput)), true

	case "Mutation.createBulkScan":
		if e.complexity.Mutation.CreateBulkScan == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkScan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkScan(childComplexity, args["input"].([]*generated.CreateScanInput)), true

	case "Mutation.createBulkScheduledJob":
		if e.complexity.Mutation.CreateBulkScheduledJob == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkScheduledJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkScheduledJob(childComplexity, args["input"].([]*generated.CreateScheduledJobInput)), true

	case "Mutation.createBulkSubcontrol":
		if e.complexity.Mutation.CreateBulkSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkSubcontrol_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkSubcontrol(childComplexity, args["input"].([]*generated.CreateSubcontrolInput)), true

	case "Mutation.createBulkSubprocessor":
		if e.complexity.Mutation.CreateBulkSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkSubprocessor(childComplexity, args["input"].([]*generated.CreateSubprocessorInput)), true

	case "Mutation.createBulkSubscriber":
		if e.complexity.Mutation.CreateBulkSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkSubscriber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkSubscriber(childComplexity, args["input"].([]*generated.CreateSubscriberInput)), true

	case "Mutation.createBulkTask":
		if e.complexity.Mutation.CreateBulkTask == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkTask(childComplexity, args["input"].([]*generated.CreateTaskInput)), true

	case "Mutation.createBulkTemplate":
		if e.complexity.Mutation.CreateBulkTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkTemplate(childComplexity, args["input"].([]*generated.CreateTemplateInput)), true

	case "Mutation.createBulkTrustCenterCompliance":
		if e.complexity.Mutation.CreateBulkTrustCenterCompliance == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkTrustCenterCompliance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkTrustCenterCompliance(childComplexity, args["input"].([]*generated.CreateTrustCenterComplianceInput)), true

	case "Mutation.createBulkTrustCenterDoc":
		if e.complexity.Mutation.CreateBulkTrustCenterDoc == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkTrustCenterDoc_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkTrustCenterDoc(childComplexity, args["input"].([]*generated.CreateTrustCenterDocInput)), true

	case "Mutation.createBulkTrustCenterSubprocessor":
		if e.complexity.Mutation.CreateBulkTrustCenterSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkTrustCenterSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkTrustCenterSubprocessor(childComplexity, args["input"].([]*generated.CreateTrustCenterSubprocessorInput)), true

	case "Mutation.createBulkUserSetting":
		if e.complexity.Mutation.CreateBulkUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkUserSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkUserSetting(childComplexity, args["input"].([]*generated.CreateUserSettingInput)), true

	case "Mutation.createContact":
		if e.complexity.Mutation.CreateContact == nil {
			break
		}

		args, err := ec.field_Mutation_createContact_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateContact(childComplexity, args["input"].(generated.CreateContactInput)), true

	case "Mutation.createControl":
		if e.complexity.Mutation.CreateControl == nil {
			break
		}

		args, err := ec.field_Mutation_createControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControl(childComplexity, args["input"].(generated.CreateControlInput)), true

	case "Mutation.createControlImplementation":
		if e.complexity.Mutation.CreateControlImplementation == nil {
			break
		}

		args, err := ec.field_Mutation_createControlImplementation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControlImplementation(childComplexity, args["input"].(generated.CreateControlImplementationInput)), true

	case "Mutation.createControlObjective":
		if e.complexity.Mutation.CreateControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_createControlObjective_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControlObjective(childComplexity, args["input"].(generated.CreateControlObjectiveInput)), true

	case "Mutation.createControlWithSubcontrols":
		if e.complexity.Mutation.CreateControlWithSubcontrols == nil {
			break
		}

		args, err := ec.field_Mutation_createControlWithSubcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControlWithSubcontrols(childComplexity, args["input"].(model.CreateControlWithSubcontrolsInput)), true

	case "Mutation.createControlsByClone":
		if e.complexity.Mutation.CreateControlsByClone == nil {
			break
		}

		args, err := ec.field_Mutation_createControlsByClone_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControlsByClone(childComplexity, args["input"].(*model.CloneControlInput)), true

	case "Mutation.createCustomDomain":
		if e.complexity.Mutation.CreateCustomDomain == nil {
			break
		}

		args, err := ec.field_Mutation_createCustomDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCustomDomain(childComplexity, args["input"].(generated.CreateCustomDomainInput)), true

	case "Mutation.createDNSVerification":
		if e.complexity.Mutation.CreateDNSVerification == nil {
			break
		}

		args, err := ec.field_Mutation_createDNSVerification_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDNSVerification(childComplexity, args["input"].(generated.CreateDNSVerificationInput)), true

	case "Mutation.createDocumentData":
		if e.complexity.Mutation.CreateDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_createDocumentData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDocumentData(childComplexity, args["input"].(generated.CreateDocumentDataInput)), true

	case "Mutation.createEntity":
		if e.complexity.Mutation.CreateEntity == nil {
			break
		}

		args, err := ec.field_Mutation_createEntity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEntity(childComplexity, args["input"].(generated.CreateEntityInput)), true

	case "Mutation.createEntityType":
		if e.complexity.Mutation.CreateEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_createEntityType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEntityType(childComplexity, args["input"].(generated.CreateEntityTypeInput)), true

	case "Mutation.createEvent":
		if e.complexity.Mutation.CreateEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createEvent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEvent(childComplexity, args["input"].(generated.CreateEventInput)), true

	case "Mutation.createEvidence":
		if e.complexity.Mutation.CreateEvidence == nil {
			break
		}

		args, err := ec.field_Mutation_createEvidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEvidence(childComplexity, args["input"].(generated.CreateEvidenceInput), args["evidenceFiles"].([]*graphql.Upload)), true

	case "Mutation.createExport":
		if e.complexity.Mutation.CreateExport == nil {
			break
		}

		args, err := ec.field_Mutation_createExport_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateExport(childComplexity, args["input"].(generated.CreateExportInput)), true

	case "Mutation.createFullProgram":
		if e.complexity.Mutation.CreateFullProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createFullProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFullProgram(childComplexity, args["input"].(model.CreateFullProgramInput)), true

	case "Mutation.createGroup":
		if e.complexity.Mutation.CreateGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createGroup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroup(childComplexity, args["input"].(generated.CreateGroupInput)), true

	case "Mutation.createGroupByClone":
		if e.complexity.Mutation.CreateGroupByClone == nil {
			break
		}

		args, err := ec.field_Mutation_createGroupByClone_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroupByClone(childComplexity, args["groupInput"].(generated.CreateGroupInput), args["members"].([]*model.GroupMembersInput), args["inheritGroupPermissions"].(*string), args["cloneGroupMembers"].(*string)), true

	case "Mutation.createGroupMembership":
		if e.complexity.Mutation.CreateGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createGroupMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroupMembership(childComplexity, args["input"].(generated.CreateGroupMembershipInput)), true

	case "Mutation.createGroupSetting":
		if e.complexity.Mutation.CreateGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createGroupSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroupSetting(childComplexity, args["input"].(generated.CreateGroupSettingInput)), true

	case "Mutation.createGroupWithMembers":
		if e.complexity.Mutation.CreateGroupWithMembers == nil {
			break
		}

		args, err := ec.field_Mutation_createGroupWithMembers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroupWithMembers(childComplexity, args["groupInput"].(generated.CreateGroupInput), args["members"].([]*model.GroupMembersInput)), true

	case "Mutation.createHush":
		if e.complexity.Mutation.CreateHush == nil {
			break
		}

		args, err := ec.field_Mutation_createHush_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHush(childComplexity, args["input"].(generated.CreateHushInput)), true

	case "Mutation.createInternalPolicy":
		if e.complexity.Mutation.CreateInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createInternalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateInternalPolicy(childComplexity, args["input"].(generated.CreateInternalPolicyInput)), true

	case "Mutation.createInvite":
		if e.complexity.Mutation.CreateInvite == nil {
			break
		}

		args, err := ec.field_Mutation_createInvite_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateInvite(childComplexity, args["input"].(generated.CreateInviteInput)), true

	case "Mutation.createJobResult":
		if e.complexity.Mutation.CreateJobResult == nil {
			break
		}

		args, err := ec.field_Mutation_createJobResult_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJobResult(childComplexity, args["input"].(generated.CreateJobResultInput), args["jobResultFiles"].([]*graphql.Upload)), true

	case "Mutation.createJobRunner":
		if e.complexity.Mutation.CreateJobRunner == nil {
			break
		}

		args, err := ec.field_Mutation_createJobRunner_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJobRunner(childComplexity, args["input"].(generated.CreateJobRunnerInput)), true

	case "Mutation.createJobRunnerRegistrationToken":
		if e.complexity.Mutation.CreateJobRunnerRegistrationToken == nil {
			break
		}

		args, err := ec.field_Mutation_createJobRunnerRegistrationToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJobRunnerRegistrationToken(childComplexity, args["input"].(generated.CreateJobRunnerRegistrationTokenInput)), true

	case "Mutation.createJobRunnerToken":
		if e.complexity.Mutation.CreateJobRunnerToken == nil {
			break
		}

		args, err := ec.field_Mutation_createJobRunnerToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJobRunnerToken(childComplexity, args["input"].(generated.CreateJobRunnerTokenInput)), true

	case "Mutation.createJobTemplate":
		if e.complexity.Mutation.CreateJobTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createJobTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJobTemplate(childComplexity, args["input"].(generated.CreateJobTemplateInput)), true

	case "Mutation.createMappableDomain":
		if e.complexity.Mutation.CreateMappableDomain == nil {
			break
		}

		args, err := ec.field_Mutation_createMappableDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMappableDomain(childComplexity, args["input"].(generated.CreateMappableDomainInput)), true

	case "Mutation.createMappedControl":
		if e.complexity.Mutation.CreateMappedControl == nil {
			break
		}

		args, err := ec.field_Mutation_createMappedControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMappedControl(childComplexity, args["input"].(generated.CreateMappedControlInput)), true

	case "Mutation.createNarrative":
		if e.complexity.Mutation.CreateNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_createNarrative_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNarrative(childComplexity, args["input"].(generated.CreateNarrativeInput)), true

	case "Mutation.createOnboarding":
		if e.complexity.Mutation.CreateOnboarding == nil {
			break
		}

		args, err := ec.field_Mutation_createOnboarding_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOnboarding(childComplexity, args["input"].(generated.CreateOnboardingInput)), true

	case "Mutation.createOrgMembership":
		if e.complexity.Mutation.CreateOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createOrgMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrgMembership(childComplexity, args["input"].(generated.CreateOrgMembershipInput)), true

	case "Mutation.createOrganization":
		if e.complexity.Mutation.CreateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganization_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganization(childComplexity, args["input"].(generated.CreateOrganizationInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.createOrganizationSetting":
		if e.complexity.Mutation.CreateOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationSetting(childComplexity, args["input"].(generated.CreateOrganizationSettingInput)), true

	case "Mutation.createOrganizationWithMembers":
		if e.complexity.Mutation.CreateOrganizationWithMembers == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationWithMembers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationWithMembers(childComplexity, args["organizationInput"].(generated.CreateOrganizationInput), args["avatarFile"].(*graphql.Upload), args["members"].([]*model.OrgMembersInput)), true

	case "Mutation.createPersonalAccessToken":
		if e.complexity.Mutation.CreatePersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_createPersonalAccessToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePersonalAccessToken(childComplexity, args["input"].(generated.CreatePersonalAccessTokenInput)), true

	case "Mutation.createProcedure":
		if e.complexity.Mutation.CreateProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_createProcedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProcedure(childComplexity, args["input"].(generated.CreateProcedureInput)), true

	case "Mutation.createProgram":
		if e.complexity.Mutation.CreateProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProgram(childComplexity, args["input"].(generated.CreateProgramInput)), true

	case "Mutation.createProgramMembership":
		if e.complexity.Mutation.CreateProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createProgramMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProgramMembership(childComplexity, args["input"].(generated.CreateProgramMembershipInput)), true

	case "Mutation.createProgramWithMembers":
		if e.complexity.Mutation.CreateProgramWithMembers == nil {
			break
		}

		args, err := ec.field_Mutation_createProgramWithMembers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProgramWithMembers(childComplexity, args["input"].(model.CreateProgramWithMembersInput)), true

	case "Mutation.createRisk":
		if e.complexity.Mutation.CreateRisk == nil {
			break
		}

		args, err := ec.field_Mutation_createRisk_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRisk(childComplexity, args["input"].(generated.CreateRiskInput)), true

	case "Mutation.createScan":
		if e.complexity.Mutation.CreateScan == nil {
			break
		}

		args, err := ec.field_Mutation_createScan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateScan(childComplexity, args["input"].(generated.CreateScanInput)), true

	case "Mutation.createScheduledJob":
		if e.complexity.Mutation.CreateScheduledJob == nil {
			break
		}

		args, err := ec.field_Mutation_createScheduledJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateScheduledJob(childComplexity, args["input"].(generated.CreateScheduledJobInput)), true

	case "Mutation.createScheduledJobRun":
		if e.complexity.Mutation.CreateScheduledJobRun == nil {
			break
		}

		args, err := ec.field_Mutation_createScheduledJobRun_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateScheduledJobRun(childComplexity, args["input"].(generated.CreateScheduledJobRunInput)), true

	case "Mutation.createStandard":
		if e.complexity.Mutation.CreateStandard == nil {
			break
		}

		args, err := ec.field_Mutation_createStandard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateStandard(childComplexity, args["input"].(generated.CreateStandardInput)), true

	case "Mutation.createSubcontrol":
		if e.complexity.Mutation.CreateSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_createSubcontrol_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubcontrol(childComplexity, args["input"].(generated.CreateSubcontrolInput)), true

	case "Mutation.createSubprocessor":
		if e.complexity.Mutation.CreateSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_createSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubprocessor(childComplexity, args["input"].(generated.CreateSubprocessorInput), args["logoFile"].(*graphql.Upload)), true

	case "Mutation.createSubscriber":
		if e.complexity.Mutation.CreateSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_createSubscriber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubscriber(childComplexity, args["input"].(generated.CreateSubscriberInput)), true

	case "Mutation.createTFASetting":
		if e.complexity.Mutation.CreateTFASetting == nil {
			break
		}

		args, err := ec.field_Mutation_createTFASetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTFASetting(childComplexity, args["input"].(generated.CreateTFASettingInput)), true

	case "Mutation.createTask":
		if e.complexity.Mutation.CreateTask == nil {
			break
		}

		args, err := ec.field_Mutation_createTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTask(childComplexity, args["input"].(generated.CreateTaskInput)), true

	case "Mutation.createTemplate":
		if e.complexity.Mutation.CreateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTemplate(childComplexity, args["input"].(generated.CreateTemplateInput)), true

	case "Mutation.createTrustCenter":
		if e.complexity.Mutation.CreateTrustCenter == nil {
			break
		}

		args, err := ec.field_Mutation_createTrustCenter_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrustCenter(childComplexity, args["input"].(generated.CreateTrustCenterInput)), true

	case "Mutation.createTrustCenterCompliance":
		if e.complexity.Mutation.CreateTrustCenterCompliance == nil {
			break
		}

		args, err := ec.field_Mutation_createTrustCenterCompliance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrustCenterCompliance(childComplexity, args["input"].(generated.CreateTrustCenterComplianceInput)), true

	case "Mutation.createTrustCenterDoc":
		if e.complexity.Mutation.CreateTrustCenterDoc == nil {
			break
		}

		args, err := ec.field_Mutation_createTrustCenterDoc_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrustCenterDoc(childComplexity, args["input"].(generated.CreateTrustCenterDocInput)), true

	case "Mutation.createTrustCenterDomain":
		if e.complexity.Mutation.CreateTrustCenterDomain == nil {
			break
		}

		args, err := ec.field_Mutation_createTrustCenterDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrustCenterDomain(childComplexity, args["input"].(model.CreateTrustCenterDomainInput)), true

	case "Mutation.createTrustCenterSetting":
		if e.complexity.Mutation.CreateTrustCenterSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createTrustCenterSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrustCenterSetting(childComplexity, args["input"].(generated.CreateTrustCenterSettingInput), args["logoFile"].(*graphql.Upload), args["faviconFile"].(*graphql.Upload)), true

	case "Mutation.createTrustCenterSubprocessor":
		if e.complexity.Mutation.CreateTrustCenterSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_createTrustCenterSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrustCenterSubprocessor(childComplexity, args["input"].(generated.CreateTrustCenterSubprocessorInput)), true

	case "Mutation.createUploadInternalPolicy":
		if e.complexity.Mutation.CreateUploadInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createUploadInternalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUploadInternalPolicy(childComplexity, args["policyFile"].(graphql.Upload), args["ownerID"].(*string)), true

	case "Mutation.createUploadProcedure":
		if e.complexity.Mutation.CreateUploadProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_createUploadProcedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUploadProcedure(childComplexity, args["procedureFile"].(graphql.Upload), args["ownerID"].(*string)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(generated.CreateUserInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.createUserSetting":
		if e.complexity.Mutation.CreateUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createUserSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserSetting(childComplexity, args["input"].(generated.CreateUserSettingInput)), true

	case "Mutation.deleteAPIToken":
		if e.complexity.Mutation.DeleteAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAPIToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAPIToken(childComplexity, args["id"].(string)), true

	case "Mutation.deleteActionPlan":
		if e.complexity.Mutation.DeleteActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_deleteActionPlan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteActionPlan(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAsset":
		if e.complexity.Mutation.DeleteAsset == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAsset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAsset(childComplexity, args["id"].(string)), true

	case "Mutation.deleteBulkExport":
		if e.complexity.Mutation.DeleteBulkExport == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBulkExport_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBulkExport(childComplexity, args["ids"].([]string)), true

	case "Mutation.deleteContact":
		if e.complexity.Mutation.DeleteContact == nil {
			break
		}

		args, err := ec.field_Mutation_deleteContact_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteContact(childComplexity, args["id"].(string)), true

	case "Mutation.deleteControl":
		if e.complexity.Mutation.DeleteControl == nil {
			break
		}

		args, err := ec.field_Mutation_deleteControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControl(childComplexity, args["id"].(string)), true

	case "Mutation.deleteControlImplementation":
		if e.complexity.Mutation.DeleteControlImplementation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteControlImplementation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlImplementation(childComplexity, args["id"].(string)), true

	case "Mutation.deleteControlObjective":
		if e.complexity.Mutation.DeleteControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_deleteControlObjective_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlObjective(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCustomDomain":
		if e.complexity.Mutation.DeleteCustomDomain == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCustomDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCustomDomain(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDNSVerification":
		if e.complexity.Mutation.DeleteDNSVerification == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDNSVerification_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDNSVerification(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDocumentData":
		if e.complexity.Mutation.DeleteDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDocumentData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDocumentData(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEntity":
		if e.complexity.Mutation.DeleteEntity == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEntity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEntity(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEntityType":
		if e.complexity.Mutation.DeleteEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEntityType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEntityType(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEvent":
		if e.complexity.Mutation.DeleteEvent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEvent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEvent(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEvidence":
		if e.complexity.Mutation.DeleteEvidence == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEvidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEvidence(childComplexity, args["id"].(string)), true

	case "Mutation.deleteExport":
		if e.complexity.Mutation.DeleteExport == nil {
			break
		}

		args, err := ec.field_Mutation_deleteExport_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteExport(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFile":
		if e.complexity.Mutation.DeleteFile == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFile_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFile(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGroup":
		if e.complexity.Mutation.DeleteGroup == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGroup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGroup(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGroupMembership":
		if e.complexity.Mutation.DeleteGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGroupMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGroupMembership(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGroupSetting":
		if e.complexity.Mutation.DeleteGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGroupSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGroupSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deleteHush":
		if e.complexity.Mutation.DeleteHush == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHush_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHush(childComplexity, args["id"].(string)), true

	case "Mutation.deleteIntegration":
		if e.complexity.Mutation.DeleteIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIntegration_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIntegration(childComplexity, args["id"].(string)), true

	case "Mutation.deleteInternalPolicy":
		if e.complexity.Mutation.DeleteInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInternalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInternalPolicy(childComplexity, args["id"].(string)), true

	case "Mutation.deleteInvite":
		if e.complexity.Mutation.DeleteInvite == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInvite_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInvite(childComplexity, args["id"].(string)), true

	case "Mutation.deleteJobResult":
		if e.complexity.Mutation.DeleteJobResult == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJobResult_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJobResult(childComplexity, args["id"].(string)), true

	case "Mutation.deleteJobRunner":
		if e.complexity.Mutation.DeleteJobRunner == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJobRunner_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJobRunner(childComplexity, args["id"].(string)), true

	case "Mutation.deleteJobRunnerRegistrationToken":
		if e.complexity.Mutation.DeleteJobRunnerRegistrationToken == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJobRunnerRegistrationToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJobRunnerRegistrationToken(childComplexity, args["id"].(string)), true

	case "Mutation.deleteJobRunnerToken":
		if e.complexity.Mutation.DeleteJobRunnerToken == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJobRunnerToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJobRunnerToken(childComplexity, args["id"].(string)), true

	case "Mutation.deleteJobTemplate":
		if e.complexity.Mutation.DeleteJobTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJobTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJobTemplate(childComplexity, args["id"].(string)), true

	case "Mutation.deleteMappableDomain":
		if e.complexity.Mutation.DeleteMappableDomain == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMappableDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMappableDomain(childComplexity, args["id"].(string)), true

	case "Mutation.deleteMappedControl":
		if e.complexity.Mutation.DeleteMappedControl == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMappedControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMappedControl(childComplexity, args["id"].(string)), true

	case "Mutation.deleteNarrative":
		if e.complexity.Mutation.DeleteNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNarrative_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNarrative(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrgMembership":
		if e.complexity.Mutation.DeleteOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrgMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrgMembership(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrganization":
		if e.complexity.Mutation.DeleteOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganization_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganization(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrganizationSetting":
		if e.complexity.Mutation.DeleteOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganizationSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganizationSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deletePersonalAccessToken":
		if e.complexity.Mutation.DeletePersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_deletePersonalAccessToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePersonalAccessToken(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProcedure":
		if e.complexity.Mutation.DeleteProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProcedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProcedure(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProgram":
		if e.complexity.Mutation.DeleteProgram == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProgram(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProgramMembership":
		if e.complexity.Mutation.DeleteProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProgramMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProgramMembership(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRisk":
		if e.complexity.Mutation.DeleteRisk == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRisk_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRisk(childComplexity, args["id"].(string)), true

	case "Mutation.deleteScan":
		if e.complexity.Mutation.DeleteScan == nil {
			break
		}

		args, err := ec.field_Mutation_deleteScan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteScan(childComplexity, args["id"].(string)), true

	case "Mutation.deleteScheduledJob":
		if e.complexity.Mutation.DeleteScheduledJob == nil {
			break
		}

		args, err := ec.field_Mutation_deleteScheduledJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteScheduledJob(childComplexity, args["id"].(string)), true

	case "Mutation.deleteScheduledJobRun":
		if e.complexity.Mutation.DeleteScheduledJobRun == nil {
			break
		}

		args, err := ec.field_Mutation_deleteScheduledJobRun_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteScheduledJobRun(childComplexity, args["id"].(string)), true

	case "Mutation.deleteStandard":
		if e.complexity.Mutation.DeleteStandard == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStandard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStandard(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSubcontrol":
		if e.complexity.Mutation.DeleteSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubcontrol_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubcontrol(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSubprocessor":
		if e.complexity.Mutation.DeleteSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubprocessor(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSubscriber":
		if e.complexity.Mutation.DeleteSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubscriber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubscriber(childComplexity, args["email"].(string), args["ownerID"].(*string)), true

	case "Mutation.deleteTask":
		if e.complexity.Mutation.DeleteTask == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTask(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTemplate":
		if e.complexity.Mutation.DeleteTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTemplate(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTrustCenter":
		if e.complexity.Mutation.DeleteTrustCenter == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTrustCenter_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTrustCenter(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTrustCenterCompliance":
		if e.complexity.Mutation.DeleteTrustCenterCompliance == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTrustCenterCompliance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTrustCenterCompliance(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTrustCenterDoc":
		if e.complexity.Mutation.DeleteTrustCenterDoc == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTrustCenterDoc_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTrustCenterDoc(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTrustCenterSetting":
		if e.complexity.Mutation.DeleteTrustCenterSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTrustCenterSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTrustCenterSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTrustCenterSubprocessor":
		if e.complexity.Mutation.DeleteTrustCenterSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTrustCenterSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTrustCenterSubprocessor(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.deleteWebauthn":
		if e.complexity.Mutation.DeleteWebauthn == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWebauthn_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWebauthn(childComplexity, args["id"].(string)), true

	case "Mutation.updateAPIToken":
		if e.complexity.Mutation.UpdateAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateAPIToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAPIToken(childComplexity, args["id"].(string), args["input"].(generated.UpdateAPITokenInput)), true

	case "Mutation.updateActionPlan":
		if e.complexity.Mutation.UpdateActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_updateActionPlan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateActionPlan(childComplexity, args["id"].(string), args["input"].(generated.UpdateActionPlanInput)), true

	case "Mutation.updateAsset":
		if e.complexity.Mutation.UpdateAsset == nil {
			break
		}

		args, err := ec.field_Mutation_updateAsset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAsset(childComplexity, args["id"].(string), args["input"].(generated.UpdateAssetInput)), true

	case "Mutation.updateBulkActionPlan":
		if e.complexity.Mutation.UpdateBulkActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkActionPlan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkActionPlan(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateActionPlanInput)), true

	case "Mutation.updateBulkContact":
		if e.complexity.Mutation.UpdateBulkContact == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkContact_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkContact(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateContactInput)), true

	case "Mutation.updateBulkControl":
		if e.complexity.Mutation.UpdateBulkControl == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkControl(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateControlInput)), true

	case "Mutation.updateBulkHush":
		if e.complexity.Mutation.UpdateBulkHush == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkHush_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkHush(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateHushInput)), true

	case "Mutation.updateBulkInternalPolicy":
		if e.complexity.Mutation.UpdateBulkInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkInternalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkInternalPolicy(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateInternalPolicyInput)), true

	case "Mutation.updateBulkProcedure":
		if e.complexity.Mutation.UpdateBulkProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkProcedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkProcedure(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateProcedureInput)), true

	case "Mutation.updateBulkRisk":
		if e.complexity.Mutation.UpdateBulkRisk == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkRisk_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkRisk(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateRiskInput)), true

	case "Mutation.updateBulkScan":
		if e.complexity.Mutation.UpdateBulkScan == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkScan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkScan(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateScanInput)), true

	case "Mutation.updateBulkTask":
		if e.complexity.Mutation.UpdateBulkTask == nil {
			break
		}

		args, err := ec.field_Mutation_updateBulkTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBulkTask(childComplexity, args["ids"].([]string), args["input"].(generated.UpdateTaskInput)), true

	case "Mutation.updateContact":
		if e.complexity.Mutation.UpdateContact == nil {
			break
		}

		args, err := ec.field_Mutation_updateContact_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateContact(childComplexity, args["id"].(string), args["input"].(generated.UpdateContactInput)), true

	case "Mutation.updateControl":
		if e.complexity.Mutation.UpdateControl == nil {
			break
		}

		args, err := ec.field_Mutation_updateControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControl(childComplexity, args["id"].(string), args["input"].(generated.UpdateControlInput)), true

	case "Mutation.updateControlImplementation":
		if e.complexity.Mutation.UpdateControlImplementation == nil {
			break
		}

		args, err := ec.field_Mutation_updateControlImplementation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlImplementation(childComplexity, args["id"].(string), args["input"].(generated.UpdateControlImplementationInput)), true

	case "Mutation.updateControlObjective":
		if e.complexity.Mutation.UpdateControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_updateControlObjective_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlObjective(childComplexity, args["id"].(string), args["input"].(generated.UpdateControlObjectiveInput)), true

	case "Mutation.updateCustomDomain":
		if e.complexity.Mutation.UpdateCustomDomain == nil {
			break
		}

		args, err := ec.field_Mutation_updateCustomDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCustomDomain(childComplexity, args["id"].(string), args["input"].(generated.UpdateCustomDomainInput)), true

	case "Mutation.updateDNSVerification":
		if e.complexity.Mutation.UpdateDNSVerification == nil {
			break
		}

		args, err := ec.field_Mutation_updateDNSVerification_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDNSVerification(childComplexity, args["id"].(string), args["input"].(generated.UpdateDNSVerificationInput)), true

	case "Mutation.updateDocumentData":
		if e.complexity.Mutation.UpdateDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_updateDocumentData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDocumentData(childComplexity, args["id"].(string), args["input"].(generated.UpdateDocumentDataInput)), true

	case "Mutation.updateEntity":
		if e.complexity.Mutation.UpdateEntity == nil {
			break
		}

		args, err := ec.field_Mutation_updateEntity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEntity(childComplexity, args["id"].(string), args["input"].(generated.UpdateEntityInput)), true

	case "Mutation.updateEntityType":
		if e.complexity.Mutation.UpdateEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_updateEntityType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEntityType(childComplexity, args["id"].(string), args["input"].(generated.UpdateEntityTypeInput)), true

	case "Mutation.updateEvent":
		if e.complexity.Mutation.UpdateEvent == nil {
			break
		}

		args, err := ec.field_Mutation_updateEvent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEvent(childComplexity, args["id"].(string), args["input"].(generated.UpdateEventInput)), true

	case "Mutation.updateEvidence":
		if e.complexity.Mutation.UpdateEvidence == nil {
			break
		}

		args, err := ec.field_Mutation_updateEvidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEvidence(childComplexity, args["id"].(string), args["input"].(generated.UpdateEvidenceInput), args["evidenceFiles"].([]*graphql.Upload)), true

	case "Mutation.updateExport":
		if e.complexity.Mutation.UpdateExport == nil {
			break
		}

		args, err := ec.field_Mutation_updateExport_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateExport(childComplexity, args["id"].(string), args["input"].(generated.UpdateExportInput), args["exportFiles"].([]*graphql.Upload)), true

	case "Mutation.updateGroup":
		if e.complexity.Mutation.UpdateGroup == nil {
			break
		}

		args, err := ec.field_Mutation_updateGroup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGroup(childComplexity, args["id"].(string), args["input"].(generated.UpdateGroupInput)), true

	case "Mutation.updateGroupMembership":
		if e.complexity.Mutation.UpdateGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_updateGroupMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGroupMembership(childComplexity, args["id"].(string), args["input"].(generated.UpdateGroupMembershipInput)), true

	case "Mutation.updateGroupSetting":
		if e.complexity.Mutation.UpdateGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateGroupSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGroupSetting(childComplexity, args["id"].(string), args["input"].(generated.UpdateGroupSettingInput)), true

	case "Mutation.updateHush":
		if e.complexity.Mutation.UpdateHush == nil {
			break
		}

		args, err := ec.field_Mutation_updateHush_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHush(childComplexity, args["id"].(string), args["input"].(generated.UpdateHushInput)), true

	case "Mutation.updateInternalPolicy":
		if e.complexity.Mutation.UpdateInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_updateInternalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateInternalPolicy(childComplexity, args["id"].(string), args["input"].(generated.UpdateInternalPolicyInput)), true

	case "Mutation.updateInvite":
		if e.complexity.Mutation.UpdateInvite == nil {
			break
		}

		args, err := ec.field_Mutation_updateInvite_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateInvite(childComplexity, args["id"].(string), args["input"].(generated.UpdateInviteInput)), true

	case "Mutation.updateJobResult":
		if e.complexity.Mutation.UpdateJobResult == nil {
			break
		}

		args, err := ec.field_Mutation_updateJobResult_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJobResult(childComplexity, args["id"].(string), args["input"].(generated.UpdateJobResultInput), args["jobResultFiles"].([]*graphql.Upload)), true

	case "Mutation.updateJobRunner":
		if e.complexity.Mutation.UpdateJobRunner == nil {
			break
		}

		args, err := ec.field_Mutation_updateJobRunner_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJobRunner(childComplexity, args["id"].(string), args["input"].(generated.UpdateJobRunnerInput)), true

	case "Mutation.updateJobTemplate":
		if e.complexity.Mutation.UpdateJobTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateJobTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJobTemplate(childComplexity, args["id"].(string), args["input"].(generated.UpdateJobTemplateInput)), true

	case "Mutation.updateMappableDomain":
		if e.complexity.Mutation.UpdateMappableDomain == nil {
			break
		}

		args, err := ec.field_Mutation_updateMappableDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMappableDomain(childComplexity, args["id"].(string), args["input"].(generated.UpdateMappableDomainInput)), true

	case "Mutation.updateMappedControl":
		if e.complexity.Mutation.UpdateMappedControl == nil {
			break
		}

		args, err := ec.field_Mutation_updateMappedControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMappedControl(childComplexity, args["id"].(string), args["input"].(generated.UpdateMappedControlInput)), true

	case "Mutation.updateNarrative":
		if e.complexity.Mutation.UpdateNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_updateNarrative_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNarrative(childComplexity, args["id"].(string), args["input"].(generated.UpdateNarrativeInput)), true

	case "Mutation.updateOrgMembership":
		if e.complexity.Mutation.UpdateOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgMembership(childComplexity, args["id"].(string), args["input"].(generated.UpdateOrgMembershipInput)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["id"].(string), args["input"].(generated.UpdateOrganizationInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.updateOrganizationSetting":
		if e.complexity.Mutation.UpdateOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationSetting(childComplexity, args["id"].(string), args["input"].(generated.UpdateOrganizationSettingInput)), true

	case "Mutation.updatePersonalAccessToken":
		if e.complexity.Mutation.UpdatePersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_updatePersonalAccessToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePersonalAccessToken(childComplexity, args["id"].(string), args["input"].(generated.UpdatePersonalAccessTokenInput)), true

	case "Mutation.updateProcedure":
		if e.complexity.Mutation.UpdateProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_updateProcedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProcedure(childComplexity, args["id"].(string), args["input"].(generated.UpdateProcedureInput)), true

	case "Mutation.updateProgram":
		if e.complexity.Mutation.UpdateProgram == nil {
			break
		}

		args, err := ec.field_Mutation_updateProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProgram(childComplexity, args["id"].(string), args["input"].(generated.UpdateProgramInput)), true

	case "Mutation.updateProgramMembership":
		if e.complexity.Mutation.UpdateProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_updateProgramMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProgramMembership(childComplexity, args["id"].(string), args["input"].(generated.UpdateProgramMembershipInput)), true

	case "Mutation.updateRisk":
		if e.complexity.Mutation.UpdateRisk == nil {
			break
		}

		args, err := ec.field_Mutation_updateRisk_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRisk(childComplexity, args["id"].(string), args["input"].(generated.UpdateRiskInput)), true

	case "Mutation.updateScan":
		if e.complexity.Mutation.UpdateScan == nil {
			break
		}

		args, err := ec.field_Mutation_updateScan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateScan(childComplexity, args["id"].(string), args["input"].(generated.UpdateScanInput)), true

	case "Mutation.updateScheduledJob":
		if e.complexity.Mutation.UpdateScheduledJob == nil {
			break
		}

		args, err := ec.field_Mutation_updateScheduledJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateScheduledJob(childComplexity, args["id"].(string), args["input"].(generated.UpdateScheduledJobInput)), true

	case "Mutation.updateScheduledJobRun":
		if e.complexity.Mutation.UpdateScheduledJobRun == nil {
			break
		}

		args, err := ec.field_Mutation_updateScheduledJobRun_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateScheduledJobRun(childComplexity, args["id"].(string), args["input"].(generated.UpdateScheduledJobRunInput)), true

	case "Mutation.updateStandard":
		if e.complexity.Mutation.UpdateStandard == nil {
			break
		}

		args, err := ec.field_Mutation_updateStandard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateStandard(childComplexity, args["id"].(string), args["input"].(generated.UpdateStandardInput)), true

	case "Mutation.updateSubcontrol":
		if e.complexity.Mutation.UpdateSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubcontrol_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubcontrol(childComplexity, args["id"].(string), args["input"].(generated.UpdateSubcontrolInput)), true

	case "Mutation.updateSubprocessor":
		if e.complexity.Mutation.UpdateSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubprocessor(childComplexity, args["id"].(string), args["input"].(generated.UpdateSubprocessorInput), args["logoFile"].(*graphql.Upload)), true

	case "Mutation.updateSubscriber":
		if e.complexity.Mutation.UpdateSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubscriber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubscriber(childComplexity, args["email"].(string), args["input"].(generated.UpdateSubscriberInput)), true

	case "Mutation.updateTFASetting":
		if e.complexity.Mutation.UpdateTFASetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateTFASetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTFASetting(childComplexity, args["input"].(generated.UpdateTFASettingInput)), true

	case "Mutation.updateTask":
		if e.complexity.Mutation.UpdateTask == nil {
			break
		}

		args, err := ec.field_Mutation_updateTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTask(childComplexity, args["id"].(string), args["input"].(generated.UpdateTaskInput)), true

	case "Mutation.updateTaskComment":
		if e.complexity.Mutation.UpdateTaskComment == nil {
			break
		}

		args, err := ec.field_Mutation_updateTaskComment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTaskComment(childComplexity, args["id"].(string), args["input"].(generated.UpdateNoteInput), args["noteFiles"].([]*graphql.Upload)), true

	case "Mutation.updateTemplate":
		if e.complexity.Mutation.UpdateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTemplate(childComplexity, args["id"].(string), args["input"].(generated.UpdateTemplateInput)), true

	case "Mutation.updateTrustCenter":
		if e.complexity.Mutation.UpdateTrustCenter == nil {
			break
		}

		args, err := ec.field_Mutation_updateTrustCenter_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTrustCenter(childComplexity, args["id"].(string), args["input"].(generated.UpdateTrustCenterInput)), true

	case "Mutation.updateTrustCenterCompliance":
		if e.complexity.Mutation.UpdateTrustCenterCompliance == nil {
			break
		}

		args, err := ec.field_Mutation_updateTrustCenterCompliance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTrustCenterCompliance(childComplexity, args["id"].(string), args["input"].(generated.UpdateTrustCenterComplianceInput)), true

	case "Mutation.updateTrustCenterDoc":
		if e.complexity.Mutation.UpdateTrustCenterDoc == nil {
			break
		}

		args, err := ec.field_Mutation_updateTrustCenterDoc_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTrustCenterDoc(childComplexity, args["id"].(string), args["input"].(generated.UpdateTrustCenterDocInput)), true

	case "Mutation.updateTrustCenterSetting":
		if e.complexity.Mutation.UpdateTrustCenterSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateTrustCenterSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTrustCenterSetting(childComplexity, args["id"].(string), args["input"].(generated.UpdateTrustCenterSettingInput), args["logoFile"].(*graphql.Upload), args["faviconFile"].(*graphql.Upload)), true

	case "Mutation.updateTrustCenterSubprocessor":
		if e.complexity.Mutation.UpdateTrustCenterSubprocessor == nil {
			break
		}

		args, err := ec.field_Mutation_updateTrustCenterSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTrustCenterSubprocessor(childComplexity, args["id"].(string), args["input"].(generated.UpdateTrustCenterSubprocessorInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(string), args["input"].(generated.UpdateUserInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.updateUserSetting":
		if e.complexity.Mutation.UpdateUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserSetting(childComplexity, args["id"].(string), args["input"].(generated.UpdateUserSettingInput)), true

	case "Narrative.blockedGroups":
		if e.complexity.Narrative.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Narrative_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Narrative.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Narrative.createdAt":
		if e.complexity.Narrative.CreatedAt == nil {
			break
		}

		return e.complexity.Narrative.CreatedAt(childComplexity), true

	case "Narrative.createdBy":
		if e.complexity.Narrative.CreatedBy == nil {
			break
		}

		return e.complexity.Narrative.CreatedBy(childComplexity), true

	case "Narrative.description":
		if e.complexity.Narrative.Description == nil {
			break
		}

		return e.complexity.Narrative.Description(childComplexity), true

	case "Narrative.details":
		if e.complexity.Narrative.Details == nil {
			break
		}

		return e.complexity.Narrative.Details(childComplexity), true

	case "Narrative.displayID":
		if e.complexity.Narrative.DisplayID == nil {
			break
		}

		return e.complexity.Narrative.DisplayID(childComplexity), true

	case "Narrative.editors":
		if e.complexity.Narrative.Editors == nil {
			break
		}

		args, err := ec.field_Narrative_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Narrative.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Narrative.id":
		if e.complexity.Narrative.ID == nil {
			break
		}

		return e.complexity.Narrative.ID(childComplexity), true

	case "Narrative.internalPolicies":
		if e.complexity.Narrative.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Narrative_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Narrative.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Narrative.name":
		if e.complexity.Narrative.Name == nil {
			break
		}

		return e.complexity.Narrative.Name(childComplexity), true

	case "Narrative.owner":
		if e.complexity.Narrative.Owner == nil {
			break
		}

		return e.complexity.Narrative.Owner(childComplexity), true

	case "Narrative.ownerID":
		if e.complexity.Narrative.OwnerID == nil {
			break
		}

		return e.complexity.Narrative.OwnerID(childComplexity), true

	case "Narrative.procedures":
		if e.complexity.Narrative.Procedures == nil {
			break
		}

		args, err := ec.field_Narrative_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Narrative.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Narrative.programs":
		if e.complexity.Narrative.Programs == nil {
			break
		}

		args, err := ec.field_Narrative_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Narrative.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Narrative.satisfies":
		if e.complexity.Narrative.Satisfies == nil {
			break
		}

		args, err := ec.field_Narrative_satisfies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Narrative.Satisfies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Narrative.tags":
		if e.complexity.Narrative.Tags == nil {
			break
		}

		return e.complexity.Narrative.Tags(childComplexity), true

	case "Narrative.updatedAt":
		if e.complexity.Narrative.UpdatedAt == nil {
			break
		}

		return e.complexity.Narrative.UpdatedAt(childComplexity), true

	case "Narrative.updatedBy":
		if e.complexity.Narrative.UpdatedBy == nil {
			break
		}

		return e.complexity.Narrative.UpdatedBy(childComplexity), true

	case "Narrative.viewers":
		if e.complexity.Narrative.Viewers == nil {
			break
		}

		args, err := ec.field_Narrative_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Narrative.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "NarrativeBulkCreatePayload.narratives":
		if e.complexity.NarrativeBulkCreatePayload.Narratives == nil {
			break
		}

		return e.complexity.NarrativeBulkCreatePayload.Narratives(childComplexity), true

	case "NarrativeConnection.edges":
		if e.complexity.NarrativeConnection.Edges == nil {
			break
		}

		return e.complexity.NarrativeConnection.Edges(childComplexity), true

	case "NarrativeConnection.pageInfo":
		if e.complexity.NarrativeConnection.PageInfo == nil {
			break
		}

		return e.complexity.NarrativeConnection.PageInfo(childComplexity), true

	case "NarrativeConnection.totalCount":
		if e.complexity.NarrativeConnection.TotalCount == nil {
			break
		}

		return e.complexity.NarrativeConnection.TotalCount(childComplexity), true

	case "NarrativeCreatePayload.narrative":
		if e.complexity.NarrativeCreatePayload.Narrative == nil {
			break
		}

		return e.complexity.NarrativeCreatePayload.Narrative(childComplexity), true

	case "NarrativeDeletePayload.deletedID":
		if e.complexity.NarrativeDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.NarrativeDeletePayload.DeletedID(childComplexity), true

	case "NarrativeEdge.cursor":
		if e.complexity.NarrativeEdge.Cursor == nil {
			break
		}

		return e.complexity.NarrativeEdge.Cursor(childComplexity), true

	case "NarrativeEdge.node":
		if e.complexity.NarrativeEdge.Node == nil {
			break
		}

		return e.complexity.NarrativeEdge.Node(childComplexity), true

	case "NarrativeHistory.createdAt":
		if e.complexity.NarrativeHistory.CreatedAt == nil {
			break
		}

		return e.complexity.NarrativeHistory.CreatedAt(childComplexity), true

	case "NarrativeHistory.createdBy":
		if e.complexity.NarrativeHistory.CreatedBy == nil {
			break
		}

		return e.complexity.NarrativeHistory.CreatedBy(childComplexity), true

	case "NarrativeHistory.description":
		if e.complexity.NarrativeHistory.Description == nil {
			break
		}

		return e.complexity.NarrativeHistory.Description(childComplexity), true

	case "NarrativeHistory.details":
		if e.complexity.NarrativeHistory.Details == nil {
			break
		}

		return e.complexity.NarrativeHistory.Details(childComplexity), true

	case "NarrativeHistory.displayID":
		if e.complexity.NarrativeHistory.DisplayID == nil {
			break
		}

		return e.complexity.NarrativeHistory.DisplayID(childComplexity), true

	case "NarrativeHistory.historyTime":
		if e.complexity.NarrativeHistory.HistoryTime == nil {
			break
		}

		return e.complexity.NarrativeHistory.HistoryTime(childComplexity), true

	case "NarrativeHistory.id":
		if e.complexity.NarrativeHistory.ID == nil {
			break
		}

		return e.complexity.NarrativeHistory.ID(childComplexity), true

	case "NarrativeHistory.name":
		if e.complexity.NarrativeHistory.Name == nil {
			break
		}

		return e.complexity.NarrativeHistory.Name(childComplexity), true

	case "NarrativeHistory.operation":
		if e.complexity.NarrativeHistory.Operation == nil {
			break
		}

		return e.complexity.NarrativeHistory.Operation(childComplexity), true

	case "NarrativeHistory.ownerID":
		if e.complexity.NarrativeHistory.OwnerID == nil {
			break
		}

		return e.complexity.NarrativeHistory.OwnerID(childComplexity), true

	case "NarrativeHistory.ref":
		if e.complexity.NarrativeHistory.Ref == nil {
			break
		}

		return e.complexity.NarrativeHistory.Ref(childComplexity), true

	case "NarrativeHistory.tags":
		if e.complexity.NarrativeHistory.Tags == nil {
			break
		}

		return e.complexity.NarrativeHistory.Tags(childComplexity), true

	case "NarrativeHistory.updatedAt":
		if e.complexity.NarrativeHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.NarrativeHistory.UpdatedAt(childComplexity), true

	case "NarrativeHistory.updatedBy":
		if e.complexity.NarrativeHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.NarrativeHistory.UpdatedBy(childComplexity), true

	case "NarrativeHistoryConnection.edges":
		if e.complexity.NarrativeHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.NarrativeHistoryConnection.Edges(childComplexity), true

	case "NarrativeHistoryConnection.pageInfo":
		if e.complexity.NarrativeHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.NarrativeHistoryConnection.PageInfo(childComplexity), true

	case "NarrativeHistoryConnection.totalCount":
		if e.complexity.NarrativeHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.NarrativeHistoryConnection.TotalCount(childComplexity), true

	case "NarrativeHistoryEdge.cursor":
		if e.complexity.NarrativeHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.NarrativeHistoryEdge.Cursor(childComplexity), true

	case "NarrativeHistoryEdge.node":
		if e.complexity.NarrativeHistoryEdge.Node == nil {
			break
		}

		return e.complexity.NarrativeHistoryEdge.Node(childComplexity), true

	case "NarrativeUpdatePayload.narrative":
		if e.complexity.NarrativeUpdatePayload.Narrative == nil {
			break
		}

		return e.complexity.NarrativeUpdatePayload.Narrative(childComplexity), true

	case "Note.createdAt":
		if e.complexity.Note.CreatedAt == nil {
			break
		}

		return e.complexity.Note.CreatedAt(childComplexity), true

	case "Note.createdBy":
		if e.complexity.Note.CreatedBy == nil {
			break
		}

		return e.complexity.Note.CreatedBy(childComplexity), true

	case "Note.displayID":
		if e.complexity.Note.DisplayID == nil {
			break
		}

		return e.complexity.Note.DisplayID(childComplexity), true

	case "Note.files":
		if e.complexity.Note.Files == nil {
			break
		}

		args, err := ec.field_Note_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Note.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Note.id":
		if e.complexity.Note.ID == nil {
			break
		}

		return e.complexity.Note.ID(childComplexity), true

	case "Note.owner":
		if e.complexity.Note.Owner == nil {
			break
		}

		return e.complexity.Note.Owner(childComplexity), true

	case "Note.ownerID":
		if e.complexity.Note.OwnerID == nil {
			break
		}

		return e.complexity.Note.OwnerID(childComplexity), true

	case "Note.task":
		if e.complexity.Note.Task == nil {
			break
		}

		return e.complexity.Note.Task(childComplexity), true

	case "Note.text":
		if e.complexity.Note.Text == nil {
			break
		}

		return e.complexity.Note.Text(childComplexity), true

	case "Note.updatedAt":
		if e.complexity.Note.UpdatedAt == nil {
			break
		}

		return e.complexity.Note.UpdatedAt(childComplexity), true

	case "Note.updatedBy":
		if e.complexity.Note.UpdatedBy == nil {
			break
		}

		return e.complexity.Note.UpdatedBy(childComplexity), true

	case "NoteConnection.edges":
		if e.complexity.NoteConnection.Edges == nil {
			break
		}

		return e.complexity.NoteConnection.Edges(childComplexity), true

	case "NoteConnection.pageInfo":
		if e.complexity.NoteConnection.PageInfo == nil {
			break
		}

		return e.complexity.NoteConnection.PageInfo(childComplexity), true

	case "NoteConnection.totalCount":
		if e.complexity.NoteConnection.TotalCount == nil {
			break
		}

		return e.complexity.NoteConnection.TotalCount(childComplexity), true

	case "NoteEdge.cursor":
		if e.complexity.NoteEdge.Cursor == nil {
			break
		}

		return e.complexity.NoteEdge.Cursor(childComplexity), true

	case "NoteEdge.node":
		if e.complexity.NoteEdge.Node == nil {
			break
		}

		return e.complexity.NoteEdge.Node(childComplexity), true

	case "NoteHistory.createdAt":
		if e.complexity.NoteHistory.CreatedAt == nil {
			break
		}

		return e.complexity.NoteHistory.CreatedAt(childComplexity), true

	case "NoteHistory.createdBy":
		if e.complexity.NoteHistory.CreatedBy == nil {
			break
		}

		return e.complexity.NoteHistory.CreatedBy(childComplexity), true

	case "NoteHistory.displayID":
		if e.complexity.NoteHistory.DisplayID == nil {
			break
		}

		return e.complexity.NoteHistory.DisplayID(childComplexity), true

	case "NoteHistory.historyTime":
		if e.complexity.NoteHistory.HistoryTime == nil {
			break
		}

		return e.complexity.NoteHistory.HistoryTime(childComplexity), true

	case "NoteHistory.id":
		if e.complexity.NoteHistory.ID == nil {
			break
		}

		return e.complexity.NoteHistory.ID(childComplexity), true

	case "NoteHistory.operation":
		if e.complexity.NoteHistory.Operation == nil {
			break
		}

		return e.complexity.NoteHistory.Operation(childComplexity), true

	case "NoteHistory.ownerID":
		if e.complexity.NoteHistory.OwnerID == nil {
			break
		}

		return e.complexity.NoteHistory.OwnerID(childComplexity), true

	case "NoteHistory.ref":
		if e.complexity.NoteHistory.Ref == nil {
			break
		}

		return e.complexity.NoteHistory.Ref(childComplexity), true

	case "NoteHistory.text":
		if e.complexity.NoteHistory.Text == nil {
			break
		}

		return e.complexity.NoteHistory.Text(childComplexity), true

	case "NoteHistory.updatedAt":
		if e.complexity.NoteHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.NoteHistory.UpdatedAt(childComplexity), true

	case "NoteHistory.updatedBy":
		if e.complexity.NoteHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.NoteHistory.UpdatedBy(childComplexity), true

	case "NoteHistoryConnection.edges":
		if e.complexity.NoteHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.NoteHistoryConnection.Edges(childComplexity), true

	case "NoteHistoryConnection.pageInfo":
		if e.complexity.NoteHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.NoteHistoryConnection.PageInfo(childComplexity), true

	case "NoteHistoryConnection.totalCount":
		if e.complexity.NoteHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.NoteHistoryConnection.TotalCount(childComplexity), true

	case "NoteHistoryEdge.cursor":
		if e.complexity.NoteHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.NoteHistoryEdge.Cursor(childComplexity), true

	case "NoteHistoryEdge.node":
		if e.complexity.NoteHistoryEdge.Node == nil {
			break
		}

		return e.complexity.NoteHistoryEdge.Node(childComplexity), true

	case "Onboarding.companyDetails":
		if e.complexity.Onboarding.CompanyDetails == nil {
			break
		}

		return e.complexity.Onboarding.CompanyDetails(childComplexity), true

	case "Onboarding.companyName":
		if e.complexity.Onboarding.CompanyName == nil {
			break
		}

		return e.complexity.Onboarding.CompanyName(childComplexity), true

	case "Onboarding.compliance":
		if e.complexity.Onboarding.Compliance == nil {
			break
		}

		return e.complexity.Onboarding.Compliance(childComplexity), true

	case "Onboarding.domains":
		if e.complexity.Onboarding.Domains == nil {
			break
		}

		return e.complexity.Onboarding.Domains(childComplexity), true

	case "Onboarding.id":
		if e.complexity.Onboarding.ID == nil {
			break
		}

		return e.complexity.Onboarding.ID(childComplexity), true

	case "Onboarding.organization":
		if e.complexity.Onboarding.Organization == nil {
			break
		}

		return e.complexity.Onboarding.Organization(childComplexity), true

	case "Onboarding.organizationID":
		if e.complexity.Onboarding.OrganizationID == nil {
			break
		}

		return e.complexity.Onboarding.OrganizationID(childComplexity), true

	case "Onboarding.userDetails":
		if e.complexity.Onboarding.UserDetails == nil {
			break
		}

		return e.complexity.Onboarding.UserDetails(childComplexity), true

	case "OnboardingCreatePayload.onboarding":
		if e.complexity.OnboardingCreatePayload.Onboarding == nil {
			break
		}

		return e.complexity.OnboardingCreatePayload.Onboarding(childComplexity), true

	case "OrgMembership.createdAt":
		if e.complexity.OrgMembership.CreatedAt == nil {
			break
		}

		return e.complexity.OrgMembership.CreatedAt(childComplexity), true

	case "OrgMembership.createdBy":
		if e.complexity.OrgMembership.CreatedBy == nil {
			break
		}

		return e.complexity.OrgMembership.CreatedBy(childComplexity), true

	case "OrgMembership.events":
		if e.complexity.OrgMembership.Events == nil {
			break
		}

		args, err := ec.field_OrgMembership_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgMembership.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "OrgMembership.id":
		if e.complexity.OrgMembership.ID == nil {
			break
		}

		return e.complexity.OrgMembership.ID(childComplexity), true

	case "OrgMembership.organization":
		if e.complexity.OrgMembership.Organization == nil {
			break
		}

		return e.complexity.OrgMembership.Organization(childComplexity), true

	case "OrgMembership.organizationID":
		if e.complexity.OrgMembership.OrganizationID == nil {
			break
		}

		return e.complexity.OrgMembership.OrganizationID(childComplexity), true

	case "OrgMembership.role":
		if e.complexity.OrgMembership.Role == nil {
			break
		}

		return e.complexity.OrgMembership.Role(childComplexity), true

	case "OrgMembership.updatedAt":
		if e.complexity.OrgMembership.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgMembership.UpdatedAt(childComplexity), true

	case "OrgMembership.updatedBy":
		if e.complexity.OrgMembership.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgMembership.UpdatedBy(childComplexity), true

	case "OrgMembership.user":
		if e.complexity.OrgMembership.User == nil {
			break
		}

		return e.complexity.OrgMembership.User(childComplexity), true

	case "OrgMembership.userID":
		if e.complexity.OrgMembership.UserID == nil {
			break
		}

		return e.complexity.OrgMembership.UserID(childComplexity), true

	case "OrgMembershipBulkCreatePayload.orgMemberships":
		if e.complexity.OrgMembershipBulkCreatePayload.OrgMemberships == nil {
			break
		}

		return e.complexity.OrgMembershipBulkCreatePayload.OrgMemberships(childComplexity), true

	case "OrgMembershipConnection.edges":
		if e.complexity.OrgMembershipConnection.Edges == nil {
			break
		}

		return e.complexity.OrgMembershipConnection.Edges(childComplexity), true

	case "OrgMembershipConnection.pageInfo":
		if e.complexity.OrgMembershipConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgMembershipConnection.PageInfo(childComplexity), true

	case "OrgMembershipConnection.totalCount":
		if e.complexity.OrgMembershipConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgMembershipConnection.TotalCount(childComplexity), true

	case "OrgMembershipCreatePayload.orgMembership":
		if e.complexity.OrgMembershipCreatePayload.OrgMembership == nil {
			break
		}

		return e.complexity.OrgMembershipCreatePayload.OrgMembership(childComplexity), true

	case "OrgMembershipDeletePayload.deletedID":
		if e.complexity.OrgMembershipDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.OrgMembershipDeletePayload.DeletedID(childComplexity), true

	case "OrgMembershipEdge.cursor":
		if e.complexity.OrgMembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgMembershipEdge.Cursor(childComplexity), true

	case "OrgMembershipEdge.node":
		if e.complexity.OrgMembershipEdge.Node == nil {
			break
		}

		return e.complexity.OrgMembershipEdge.Node(childComplexity), true

	case "OrgMembershipHistory.createdAt":
		if e.complexity.OrgMembershipHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.CreatedAt(childComplexity), true

	case "OrgMembershipHistory.createdBy":
		if e.complexity.OrgMembershipHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.CreatedBy(childComplexity), true

	case "OrgMembershipHistory.historyTime":
		if e.complexity.OrgMembershipHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.HistoryTime(childComplexity), true

	case "OrgMembershipHistory.id":
		if e.complexity.OrgMembershipHistory.ID == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.ID(childComplexity), true

	case "OrgMembershipHistory.operation":
		if e.complexity.OrgMembershipHistory.Operation == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.Operation(childComplexity), true

	case "OrgMembershipHistory.organizationID":
		if e.complexity.OrgMembershipHistory.OrganizationID == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.OrganizationID(childComplexity), true

	case "OrgMembershipHistory.ref":
		if e.complexity.OrgMembershipHistory.Ref == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.Ref(childComplexity), true

	case "OrgMembershipHistory.role":
		if e.complexity.OrgMembershipHistory.Role == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.Role(childComplexity), true

	case "OrgMembershipHistory.updatedAt":
		if e.complexity.OrgMembershipHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.UpdatedAt(childComplexity), true

	case "OrgMembershipHistory.updatedBy":
		if e.complexity.OrgMembershipHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.UpdatedBy(childComplexity), true

	case "OrgMembershipHistory.userID":
		if e.complexity.OrgMembershipHistory.UserID == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.UserID(childComplexity), true

	case "OrgMembershipHistoryConnection.edges":
		if e.complexity.OrgMembershipHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryConnection.Edges(childComplexity), true

	case "OrgMembershipHistoryConnection.pageInfo":
		if e.complexity.OrgMembershipHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryConnection.PageInfo(childComplexity), true

	case "OrgMembershipHistoryConnection.totalCount":
		if e.complexity.OrgMembershipHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryConnection.TotalCount(childComplexity), true

	case "OrgMembershipHistoryEdge.cursor":
		if e.complexity.OrgMembershipHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryEdge.Cursor(childComplexity), true

	case "OrgMembershipHistoryEdge.node":
		if e.complexity.OrgMembershipHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryEdge.Node(childComplexity), true

	case "OrgMembershipUpdatePayload.orgMembership":
		if e.complexity.OrgMembershipUpdatePayload.OrgMembership == nil {
			break
		}

		return e.complexity.OrgMembershipUpdatePayload.OrgMembership(childComplexity), true

	case "OrgSubscription.active":
		if e.complexity.OrgSubscription.Active == nil {
			break
		}

		return e.complexity.OrgSubscription.Active(childComplexity), true

	case "OrgSubscription.cancellation":
		if e.complexity.OrgSubscription.Cancellation == nil {
			break
		}

		return e.complexity.OrgSubscription.Cancellation(childComplexity), true

	case "OrgSubscription.createdAt":
		if e.complexity.OrgSubscription.CreatedAt == nil {
			break
		}

		return e.complexity.OrgSubscription.CreatedAt(childComplexity), true

	case "OrgSubscription.createdBy":
		if e.complexity.OrgSubscription.CreatedBy == nil {
			break
		}

		return e.complexity.OrgSubscription.CreatedBy(childComplexity), true

	case "OrgSubscription.daysUntilDue":
		if e.complexity.OrgSubscription.DaysUntilDue == nil {
			break
		}

		return e.complexity.OrgSubscription.DaysUntilDue(childComplexity), true

	case "OrgSubscription.events":
		if e.complexity.OrgSubscription.Events == nil {
			break
		}

		args, err := ec.field_OrgSubscription_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgSubscription.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "OrgSubscription.expiresAt":
		if e.complexity.OrgSubscription.ExpiresAt == nil {
			break
		}

		return e.complexity.OrgSubscription.ExpiresAt(childComplexity), true

	case "OrgSubscription.featureLookupKeys":
		if e.complexity.OrgSubscription.FeatureLookupKeys == nil {
			break
		}

		return e.complexity.OrgSubscription.FeatureLookupKeys(childComplexity), true

	case "OrgSubscription.features":
		if e.complexity.OrgSubscription.Features == nil {
			break
		}

		return e.complexity.OrgSubscription.Features(childComplexity), true

	case "OrgSubscription.id":
		if e.complexity.OrgSubscription.ID == nil {
			break
		}

		return e.complexity.OrgSubscription.ID(childComplexity), true

	case "OrgSubscription.managePaymentMethods":
		if e.complexity.OrgSubscription.ManagePaymentMethods == nil {
			break
		}

		return e.complexity.OrgSubscription.ManagePaymentMethods(childComplexity), true

	case "OrgSubscription.owner":
		if e.complexity.OrgSubscription.Owner == nil {
			break
		}

		return e.complexity.OrgSubscription.Owner(childComplexity), true

	case "OrgSubscription.ownerID":
		if e.complexity.OrgSubscription.OwnerID == nil {
			break
		}

		return e.complexity.OrgSubscription.OwnerID(childComplexity), true

	case "OrgSubscription.productPrice":
		if e.complexity.OrgSubscription.ProductPrice == nil {
			break
		}

		return e.complexity.OrgSubscription.ProductPrice(childComplexity), true

	case "OrgSubscription.stripeSubscriptionID":
		if e.complexity.OrgSubscription.StripeSubscriptionID == nil {
			break
		}

		return e.complexity.OrgSubscription.StripeSubscriptionID(childComplexity), true

	case "OrgSubscription.stripeSubscriptionStatus":
		if e.complexity.OrgSubscription.StripeSubscriptionStatus == nil {
			break
		}

		return e.complexity.OrgSubscription.StripeSubscriptionStatus(childComplexity), true

	case "OrgSubscription.tags":
		if e.complexity.OrgSubscription.Tags == nil {
			break
		}

		return e.complexity.OrgSubscription.Tags(childComplexity), true

	case "OrgSubscription.trialExpiresAt":
		if e.complexity.OrgSubscription.TrialExpiresAt == nil {
			break
		}

		return e.complexity.OrgSubscription.TrialExpiresAt(childComplexity), true

	case "OrgSubscription.updatedAt":
		if e.complexity.OrgSubscription.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgSubscription.UpdatedAt(childComplexity), true

	case "OrgSubscription.updatedBy":
		if e.complexity.OrgSubscription.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgSubscription.UpdatedBy(childComplexity), true

	case "OrgSubscriptionConnection.edges":
		if e.complexity.OrgSubscriptionConnection.Edges == nil {
			break
		}

		return e.complexity.OrgSubscriptionConnection.Edges(childComplexity), true

	case "OrgSubscriptionConnection.pageInfo":
		if e.complexity.OrgSubscriptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgSubscriptionConnection.PageInfo(childComplexity), true

	case "OrgSubscriptionConnection.totalCount":
		if e.complexity.OrgSubscriptionConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgSubscriptionConnection.TotalCount(childComplexity), true

	case "OrgSubscriptionEdge.cursor":
		if e.complexity.OrgSubscriptionEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgSubscriptionEdge.Cursor(childComplexity), true

	case "OrgSubscriptionEdge.node":
		if e.complexity.OrgSubscriptionEdge.Node == nil {
			break
		}

		return e.complexity.OrgSubscriptionEdge.Node(childComplexity), true

	case "OrgSubscriptionHistory.active":
		if e.complexity.OrgSubscriptionHistory.Active == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Active(childComplexity), true

	case "OrgSubscriptionHistory.createdAt":
		if e.complexity.OrgSubscriptionHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.CreatedAt(childComplexity), true

	case "OrgSubscriptionHistory.createdBy":
		if e.complexity.OrgSubscriptionHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.CreatedBy(childComplexity), true

	case "OrgSubscriptionHistory.daysUntilDue":
		if e.complexity.OrgSubscriptionHistory.DaysUntilDue == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.DaysUntilDue(childComplexity), true

	case "OrgSubscriptionHistory.expiresAt":
		if e.complexity.OrgSubscriptionHistory.ExpiresAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.ExpiresAt(childComplexity), true

	case "OrgSubscriptionHistory.featureLookupKeys":
		if e.complexity.OrgSubscriptionHistory.FeatureLookupKeys == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.FeatureLookupKeys(childComplexity), true

	case "OrgSubscriptionHistory.features":
		if e.complexity.OrgSubscriptionHistory.Features == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Features(childComplexity), true

	case "OrgSubscriptionHistory.historyTime":
		if e.complexity.OrgSubscriptionHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.HistoryTime(childComplexity), true

	case "OrgSubscriptionHistory.id":
		if e.complexity.OrgSubscriptionHistory.ID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.ID(childComplexity), true

	case "OrgSubscriptionHistory.operation":
		if e.complexity.OrgSubscriptionHistory.Operation == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Operation(childComplexity), true

	case "OrgSubscriptionHistory.ownerID":
		if e.complexity.OrgSubscriptionHistory.OwnerID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.OwnerID(childComplexity), true

	case "OrgSubscriptionHistory.productPrice":
		if e.complexity.OrgSubscriptionHistory.ProductPrice == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.ProductPrice(childComplexity), true

	case "OrgSubscriptionHistory.ref":
		if e.complexity.OrgSubscriptionHistory.Ref == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Ref(childComplexity), true

	case "OrgSubscriptionHistory.stripeSubscriptionID":
		if e.complexity.OrgSubscriptionHistory.StripeSubscriptionID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.StripeSubscriptionID(childComplexity), true

	case "OrgSubscriptionHistory.stripeSubscriptionStatus":
		if e.complexity.OrgSubscriptionHistory.StripeSubscriptionStatus == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.StripeSubscriptionStatus(childComplexity), true

	case "OrgSubscriptionHistory.tags":
		if e.complexity.OrgSubscriptionHistory.Tags == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Tags(childComplexity), true

	case "OrgSubscriptionHistory.trialExpiresAt":
		if e.complexity.OrgSubscriptionHistory.TrialExpiresAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.TrialExpiresAt(childComplexity), true

	case "OrgSubscriptionHistory.updatedAt":
		if e.complexity.OrgSubscriptionHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.UpdatedAt(childComplexity), true

	case "OrgSubscriptionHistory.updatedBy":
		if e.complexity.OrgSubscriptionHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.UpdatedBy(childComplexity), true

	case "OrgSubscriptionHistoryConnection.edges":
		if e.complexity.OrgSubscriptionHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryConnection.Edges(childComplexity), true

	case "OrgSubscriptionHistoryConnection.pageInfo":
		if e.complexity.OrgSubscriptionHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryConnection.PageInfo(childComplexity), true

	case "OrgSubscriptionHistoryConnection.totalCount":
		if e.complexity.OrgSubscriptionHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryConnection.TotalCount(childComplexity), true

	case "OrgSubscriptionHistoryEdge.cursor":
		if e.complexity.OrgSubscriptionHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryEdge.Cursor(childComplexity), true

	case "OrgSubscriptionHistoryEdge.node":
		if e.complexity.OrgSubscriptionHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryEdge.Node(childComplexity), true

	case "Organization.apiTokens":
		if e.complexity.Organization.APITokens == nil {
			break
		}

		args, err := ec.field_Organization_apiTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.APITokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.APITokenOrder), args["where"].(*generated.APITokenWhereInput)), true

	case "Organization.actionPlans":
		if e.complexity.Organization.ActionPlans == nil {
			break
		}

		args, err := ec.field_Organization_actionPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ActionPlanOrder), args["where"].(*generated.ActionPlanWhereInput)), true

	case "Organization.assets":
		if e.complexity.Organization.Assets == nil {
			break
		}

		args, err := ec.field_Organization_assets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Assets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.AssetOrder), args["where"].(*generated.AssetWhereInput)), true

	case "Organization.avatarFile":
		if e.complexity.Organization.AvatarFile == nil {
			break
		}

		return e.complexity.Organization.AvatarFile(childComplexity), true

	case "Organization.avatarLocalFileID":
		if e.complexity.Organization.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.Organization.AvatarLocalFileID(childComplexity), true

	case "Organization.avatarRemoteURL":
		if e.complexity.Organization.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.Organization.AvatarRemoteURL(childComplexity), true

	case "Organization.avatarUpdatedAt":
		if e.complexity.Organization.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.Organization.AvatarUpdatedAt(childComplexity), true

	case "Organization.children":
		if e.complexity.Organization.Children == nil {
			break
		}

		args, err := ec.field_Organization_children_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Children(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrganizationOrder), args["where"].(*generated.OrganizationWhereInput)), true

	case "Organization.contacts":
		if e.complexity.Organization.Contacts == nil {
			break
		}

		args, err := ec.field_Organization_contacts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Contacts(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ContactOrder), args["where"].(*generated.ContactWhereInput)), true

	case "Organization.controlCreators":
		if e.complexity.Organization.ControlCreators == nil {
			break
		}

		args, err := ec.field_Organization_controlCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ControlCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.controlImplementationCreators":
		if e.complexity.Organization.ControlImplementationCreators == nil {
			break
		}

		args, err := ec.field_Organization_controlImplementationCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ControlImplementationCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.controlImplementations":
		if e.complexity.Organization.ControlImplementations == nil {
			break
		}

		args, err := ec.field_Organization_controlImplementations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ControlImplementations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Organization.controlObjectiveCreators":
		if e.complexity.Organization.ControlObjectiveCreators == nil {
			break
		}

		args, err := ec.field_Organization_controlObjectiveCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ControlObjectiveCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.controlObjectives":
		if e.complexity.Organization.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Organization_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Organization.controls":
		if e.complexity.Organization.Controls == nil {
			break
		}

		args, err := ec.field_Organization_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Organization.createdAt":
		if e.complexity.Organization.CreatedAt == nil {
			break
		}

		return e.complexity.Organization.CreatedAt(childComplexity), true

	case "Organization.createdBy":
		if e.complexity.Organization.CreatedBy == nil {
			break
		}

		return e.complexity.Organization.CreatedBy(childComplexity), true

	case "Organization.customDomains":
		if e.complexity.Organization.CustomDomains == nil {
			break
		}

		args, err := ec.field_Organization_customDomains_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.CustomDomains(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.CustomDomainOrder), args["where"].(*generated.CustomDomainWhereInput)), true

	case "Organization.dnsVerifications":
		if e.complexity.Organization.DNSVerifications == nil {
			break
		}

		args, err := ec.field_Organization_dnsVerifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.DNSVerifications(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.DNSVerificationOrder), args["where"].(*generated.DNSVerificationWhereInput)), true

	case "Organization.dedicatedDb":
		if e.complexity.Organization.DedicatedDb == nil {
			break
		}

		return e.complexity.Organization.DedicatedDb(childComplexity), true

	case "Organization.description":
		if e.complexity.Organization.Description == nil {
			break
		}

		return e.complexity.Organization.Description(childComplexity), true

	case "Organization.displayName":
		if e.complexity.Organization.DisplayName == nil {
			break
		}

		return e.complexity.Organization.DisplayName(childComplexity), true

	case "Organization.documents":
		if e.complexity.Organization.Documents == nil {
			break
		}

		args, err := ec.field_Organization_documents_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Documents(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.DocumentDataOrder), args["where"].(*generated.DocumentDataWhereInput)), true

	case "Organization.entities":
		if e.complexity.Organization.Entities == nil {
			break
		}

		args, err := ec.field_Organization_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Organization.entityTypes":
		if e.complexity.Organization.EntityTypes == nil {
			break
		}

		args, err := ec.field_Organization_entityTypes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.EntityTypes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityTypeOrder), args["where"].(*generated.EntityTypeWhereInput)), true

	case "Organization.events":
		if e.complexity.Organization.Events == nil {
			break
		}

		args, err := ec.field_Organization_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Organization.evidence":
		if e.complexity.Organization.Evidence == nil {
			break
		}

		args, err := ec.field_Organization_evidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Evidence(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EvidenceOrder), args["where"].(*generated.EvidenceWhereInput)), true

	case "Organization.evidenceCreators":
		if e.complexity.Organization.EvidenceCreators == nil {
			break
		}

		args, err := ec.field_Organization_evidenceCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.EvidenceCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.exports":
		if e.complexity.Organization.Exports == nil {
			break
		}

		args, err := ec.field_Organization_exports_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Exports(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ExportOrder), args["where"].(*generated.ExportWhereInput)), true

	case "Organization.files":
		if e.complexity.Organization.Files == nil {
			break
		}

		args, err := ec.field_Organization_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Organization.groupCreators":
		if e.complexity.Organization.GroupCreators == nil {
			break
		}

		args, err := ec.field_Organization_groupCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.GroupCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.groups":
		if e.complexity.Organization.Groups == nil {
			break
		}

		args, err := ec.field_Organization_groups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.integrations":
		if e.complexity.Organization.Integrations == nil {
			break
		}

		args, err := ec.field_Organization_integrations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Integrations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.IntegrationOrder), args["where"].(*generated.IntegrationWhereInput)), true

	case "Organization.internalPolicies":
		if e.complexity.Organization.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Organization_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Organization.internalPolicyCreators":
		if e.complexity.Organization.InternalPolicyCreators == nil {
			break
		}

		args, err := ec.field_Organization_internalPolicyCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.InternalPolicyCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.invites":
		if e.complexity.Organization.Invites == nil {
			break
		}

		args, err := ec.field_Organization_invites_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Invites(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InviteOrder), args["where"].(*generated.InviteWhereInput)), true

	case "Organization.jobResults":
		if e.complexity.Organization.JobResults == nil {
			break
		}

		args, err := ec.field_Organization_jobResults_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.JobResults(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobResultOrder), args["where"].(*generated.JobResultWhereInput)), true

	case "Organization.jobRunnerRegistrationTokens":
		if e.complexity.Organization.JobRunnerRegistrationTokens == nil {
			break
		}

		args, err := ec.field_Organization_jobRunnerRegistrationTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.JobRunnerRegistrationTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerRegistrationTokenOrder), args["where"].(*generated.JobRunnerRegistrationTokenWhereInput)), true

	case "Organization.jobRunnerTokens":
		if e.complexity.Organization.JobRunnerTokens == nil {
			break
		}

		args, err := ec.field_Organization_jobRunnerTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.JobRunnerTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerTokenOrder), args["where"].(*generated.JobRunnerTokenWhereInput)), true

	case "Organization.jobRunners":
		if e.complexity.Organization.JobRunners == nil {
			break
		}

		args, err := ec.field_Organization_jobRunners_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.JobRunners(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerOrder), args["where"].(*generated.JobRunnerWhereInput)), true

	case "Organization.jobTemplates":
		if e.complexity.Organization.JobTemplates == nil {
			break
		}

		args, err := ec.field_Organization_jobTemplates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.JobTemplates(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobTemplateOrder), args["where"].(*generated.JobTemplateWhereInput)), true

	case "Organization.mappedControlCreators":
		if e.complexity.Organization.MappedControlCreators == nil {
			break
		}

		args, err := ec.field_Organization_mappedControlCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.MappedControlCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.mappedControls":
		if e.complexity.Organization.MappedControls == nil {
			break
		}

		args, err := ec.field_Organization_mappedControls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.MappedControls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.MappedControlOrder), args["where"].(*generated.MappedControlWhereInput)), true

	case "Organization.members":
		if e.complexity.Organization.Members == nil {
			break
		}

		args, err := ec.field_Organization_members_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Members(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrgMembershipOrder), args["where"].(*generated.OrgMembershipWhereInput)), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.narrativeCreators":
		if e.complexity.Organization.NarrativeCreators == nil {
			break
		}

		args, err := ec.field_Organization_narrativeCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.NarrativeCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.narratives":
		if e.complexity.Organization.Narratives == nil {
			break
		}

		args, err := ec.field_Organization_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Organization.notes":
		if e.complexity.Organization.Notes == nil {
			break
		}

		args, err := ec.field_Organization_notes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Notes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NoteOrder), args["where"].(*generated.NoteWhereInput)), true

	case "Organization.orgSubscriptions":
		if e.complexity.Organization.OrgSubscriptions == nil {
			break
		}

		return e.complexity.Organization.OrgSubscriptions(childComplexity), true

	case "Organization.parent":
		if e.complexity.Organization.Parent == nil {
			break
		}

		return e.complexity.Organization.Parent(childComplexity), true

	case "Organization.personalAccessTokens":
		if e.complexity.Organization.PersonalAccessTokens == nil {
			break
		}

		args, err := ec.field_Organization_personalAccessTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.PersonalAccessTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.PersonalAccessTokenOrder), args["where"].(*generated.PersonalAccessTokenWhereInput)), true

	case "Organization.personalOrg":
		if e.complexity.Organization.PersonalOrg == nil {
			break
		}

		return e.complexity.Organization.PersonalOrg(childComplexity), true

	case "Organization.procedureCreators":
		if e.complexity.Organization.ProcedureCreators == nil {
			break
		}

		args, err := ec.field_Organization_procedureCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ProcedureCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.procedures":
		if e.complexity.Organization.Procedures == nil {
			break
		}

		args, err := ec.field_Organization_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Organization.programCreators":
		if e.complexity.Organization.ProgramCreators == nil {
			break
		}

		args, err := ec.field_Organization_programCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ProgramCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.programs":
		if e.complexity.Organization.Programs == nil {
			break
		}

		args, err := ec.field_Organization_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Organization.riskCreators":
		if e.complexity.Organization.RiskCreators == nil {
			break
		}

		args, err := ec.field_Organization_riskCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.RiskCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.risks":
		if e.complexity.Organization.Risks == nil {
			break
		}

		args, err := ec.field_Organization_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Organization.scans":
		if e.complexity.Organization.Scans == nil {
			break
		}

		args, err := ec.field_Organization_scans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Scans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Organization.scheduledJobCreators":
		if e.complexity.Organization.ScheduledJobCreators == nil {
			break
		}

		args, err := ec.field_Organization_scheduledJobCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ScheduledJobCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.scheduledJobRuns":
		if e.complexity.Organization.ScheduledJobRuns == nil {
			break
		}

		args, err := ec.field_Organization_scheduledJobRuns_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ScheduledJobRuns(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScheduledJobRunOrder), args["where"].(*generated.ScheduledJobRunWhereInput)), true

	case "Organization.scheduledJobs":
		if e.complexity.Organization.ScheduledJobs == nil {
			break
		}

		args, err := ec.field_Organization_scheduledJobs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.ScheduledJobs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScheduledJobOrder), args["where"].(*generated.ScheduledJobWhereInput)), true

	case "Organization.secrets":
		if e.complexity.Organization.Secrets == nil {
			break
		}

		args, err := ec.field_Organization_secrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Secrets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.HushOrder), args["where"].(*generated.HushWhereInput)), true

	case "Organization.setting":
		if e.complexity.Organization.Setting == nil {
			break
		}

		return e.complexity.Organization.Setting(childComplexity), true

	case "Organization.standardCreators":
		if e.complexity.Organization.StandardCreators == nil {
			break
		}

		args, err := ec.field_Organization_standardCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.StandardCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.standards":
		if e.complexity.Organization.Standards == nil {
			break
		}

		args, err := ec.field_Organization_standards_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Standards(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.StandardOrder), args["where"].(*generated.StandardWhereInput)), true

	case "Organization.stripeCustomerID":
		if e.complexity.Organization.StripeCustomerID == nil {
			break
		}

		return e.complexity.Organization.StripeCustomerID(childComplexity), true

	case "Organization.subcontrols":
		if e.complexity.Organization.Subcontrols == nil {
			break
		}

		args, err := ec.field_Organization_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Organization.subprocessors":
		if e.complexity.Organization.Subprocessors == nil {
			break
		}

		args, err := ec.field_Organization_subprocessors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Subprocessors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubprocessorOrder), args["where"].(*generated.SubprocessorWhereInput)), true

	case "Organization.subscribers":
		if e.complexity.Organization.Subscribers == nil {
			break
		}

		args, err := ec.field_Organization_subscribers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Subscribers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubscriberOrder), args["where"].(*generated.SubscriberWhereInput)), true

	case "Organization.tags":
		if e.complexity.Organization.Tags == nil {
			break
		}

		return e.complexity.Organization.Tags(childComplexity), true

	case "Organization.tasks":
		if e.complexity.Organization.Tasks == nil {
			break
		}

		args, err := ec.field_Organization_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Organization.templateCreators":
		if e.complexity.Organization.TemplateCreators == nil {
			break
		}

		args, err := ec.field_Organization_templateCreators_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.TemplateCreators(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Organization.templates":
		if e.complexity.Organization.Templates == nil {
			break
		}

		args, err := ec.field_Organization_templates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Templates(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TemplateOrder), args["where"].(*generated.TemplateWhereInput)), true

	case "Organization.trustCenters":
		if e.complexity.Organization.TrustCenters == nil {
			break
		}

		args, err := ec.field_Organization_trustCenters_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.TrustCenters(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterOrder), args["where"].(*generated.TrustCenterWhereInput)), true

	case "Organization.updatedAt":
		if e.complexity.Organization.UpdatedAt == nil {
			break
		}

		return e.complexity.Organization.UpdatedAt(childComplexity), true

	case "Organization.updatedBy":
		if e.complexity.Organization.UpdatedBy == nil {
			break
		}

		return e.complexity.Organization.UpdatedBy(childComplexity), true

	case "Organization.users":
		if e.complexity.Organization.Users == nil {
			break
		}

		args, err := ec.field_Organization_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Users(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.UserOrder), args["where"].(*generated.UserWhereInput)), true

	case "OrganizationBulkCreatePayload.organizations":
		if e.complexity.OrganizationBulkCreatePayload.Organizations == nil {
			break
		}

		return e.complexity.OrganizationBulkCreatePayload.Organizations(childComplexity), true

	case "OrganizationConnection.edges":
		if e.complexity.OrganizationConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationConnection.Edges(childComplexity), true

	case "OrganizationConnection.pageInfo":
		if e.complexity.OrganizationConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationConnection.PageInfo(childComplexity), true

	case "OrganizationConnection.totalCount":
		if e.complexity.OrganizationConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationConnection.TotalCount(childComplexity), true

	case "OrganizationCreatePayload.organization":
		if e.complexity.OrganizationCreatePayload.Organization == nil {
			break
		}

		return e.complexity.OrganizationCreatePayload.Organization(childComplexity), true

	case "OrganizationDeletePayload.deletedID":
		if e.complexity.OrganizationDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.OrganizationDeletePayload.DeletedID(childComplexity), true

	case "OrganizationEdge.cursor":
		if e.complexity.OrganizationEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationEdge.Cursor(childComplexity), true

	case "OrganizationEdge.node":
		if e.complexity.OrganizationEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationEdge.Node(childComplexity), true

	case "OrganizationHistory.avatarLocalFileID":
		if e.complexity.OrganizationHistory.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.OrganizationHistory.AvatarLocalFileID(childComplexity), true

	case "OrganizationHistory.avatarRemoteURL":
		if e.complexity.OrganizationHistory.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.OrganizationHistory.AvatarRemoteURL(childComplexity), true

	case "OrganizationHistory.avatarUpdatedAt":
		if e.complexity.OrganizationHistory.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationHistory.AvatarUpdatedAt(childComplexity), true

	case "OrganizationHistory.createdAt":
		if e.complexity.OrganizationHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationHistory.CreatedAt(childComplexity), true

	case "OrganizationHistory.createdBy":
		if e.complexity.OrganizationHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrganizationHistory.CreatedBy(childComplexity), true

	case "OrganizationHistory.dedicatedDb":
		if e.complexity.OrganizationHistory.DedicatedDb == nil {
			break
		}

		return e.complexity.OrganizationHistory.DedicatedDb(childComplexity), true

	case "OrganizationHistory.description":
		if e.complexity.OrganizationHistory.Description == nil {
			break
		}

		return e.complexity.OrganizationHistory.Description(childComplexity), true

	case "OrganizationHistory.displayName":
		if e.complexity.OrganizationHistory.DisplayName == nil {
			break
		}

		return e.complexity.OrganizationHistory.DisplayName(childComplexity), true

	case "OrganizationHistory.historyTime":
		if e.complexity.OrganizationHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrganizationHistory.HistoryTime(childComplexity), true

	case "OrganizationHistory.id":
		if e.complexity.OrganizationHistory.ID == nil {
			break
		}

		return e.complexity.OrganizationHistory.ID(childComplexity), true

	case "OrganizationHistory.name":
		if e.complexity.OrganizationHistory.Name == nil {
			break
		}

		return e.complexity.OrganizationHistory.Name(childComplexity), true

	case "OrganizationHistory.operation":
		if e.complexity.OrganizationHistory.Operation == nil {
			break
		}

		return e.complexity.OrganizationHistory.Operation(childComplexity), true

	case "OrganizationHistory.personalOrg":
		if e.complexity.OrganizationHistory.PersonalOrg == nil {
			break
		}

		return e.complexity.OrganizationHistory.PersonalOrg(childComplexity), true

	case "OrganizationHistory.ref":
		if e.complexity.OrganizationHistory.Ref == nil {
			break
		}

		return e.complexity.OrganizationHistory.Ref(childComplexity), true

	case "OrganizationHistory.stripeCustomerID":
		if e.complexity.OrganizationHistory.StripeCustomerID == nil {
			break
		}

		return e.complexity.OrganizationHistory.StripeCustomerID(childComplexity), true

	case "OrganizationHistory.tags":
		if e.complexity.OrganizationHistory.Tags == nil {
			break
		}

		return e.complexity.OrganizationHistory.Tags(childComplexity), true

	case "OrganizationHistory.updatedAt":
		if e.complexity.OrganizationHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationHistory.UpdatedAt(childComplexity), true

	case "OrganizationHistory.updatedBy":
		if e.complexity.OrganizationHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrganizationHistory.UpdatedBy(childComplexity), true

	case "OrganizationHistoryConnection.edges":
		if e.complexity.OrganizationHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationHistoryConnection.Edges(childComplexity), true

	case "OrganizationHistoryConnection.pageInfo":
		if e.complexity.OrganizationHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationHistoryConnection.PageInfo(childComplexity), true

	case "OrganizationHistoryConnection.totalCount":
		if e.complexity.OrganizationHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationHistoryConnection.TotalCount(childComplexity), true

	case "OrganizationHistoryEdge.cursor":
		if e.complexity.OrganizationHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationHistoryEdge.Cursor(childComplexity), true

	case "OrganizationHistoryEdge.node":
		if e.complexity.OrganizationHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationHistoryEdge.Node(childComplexity), true

	case "OrganizationSetting.allowedEmailDomains":
		if e.complexity.OrganizationSetting.AllowedEmailDomains == nil {
			break
		}

		return e.complexity.OrganizationSetting.AllowedEmailDomains(childComplexity), true

	case "OrganizationSetting.billingAddress":
		if e.complexity.OrganizationSetting.BillingAddress == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingAddress(childComplexity), true

	case "OrganizationSetting.billingContact":
		if e.complexity.OrganizationSetting.BillingContact == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingContact(childComplexity), true

	case "OrganizationSetting.billingEmail":
		if e.complexity.OrganizationSetting.BillingEmail == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingEmail(childComplexity), true

	case "OrganizationSetting.billingNotificationsEnabled":
		if e.complexity.OrganizationSetting.BillingNotificationsEnabled == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingNotificationsEnabled(childComplexity), true

	case "OrganizationSetting.billingPhone":
		if e.complexity.OrganizationSetting.BillingPhone == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingPhone(childComplexity), true

	case "OrganizationSetting.complianceWebhookToken":
		if e.complexity.OrganizationSetting.ComplianceWebhookToken == nil {
			break
		}

		return e.complexity.OrganizationSetting.ComplianceWebhookToken(childComplexity), true

	case "OrganizationSetting.createdAt":
		if e.complexity.OrganizationSetting.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationSetting.CreatedAt(childComplexity), true

	case "OrganizationSetting.createdBy":
		if e.complexity.OrganizationSetting.CreatedBy == nil {
			break
		}

		return e.complexity.OrganizationSetting.CreatedBy(childComplexity), true

	case "OrganizationSetting.domains":
		if e.complexity.OrganizationSetting.Domains == nil {
			break
		}

		return e.complexity.OrganizationSetting.Domains(childComplexity), true

	case "OrganizationSetting.files":
		if e.complexity.OrganizationSetting.Files == nil {
			break
		}

		args, err := ec.field_OrganizationSetting_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrganizationSetting.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "OrganizationSetting.geoLocation":
		if e.complexity.OrganizationSetting.GeoLocation == nil {
			break
		}

		return e.complexity.OrganizationSetting.GeoLocation(childComplexity), true

	case "OrganizationSetting.id":
		if e.complexity.OrganizationSetting.ID == nil {
			break
		}

		return e.complexity.OrganizationSetting.ID(childComplexity), true

	case "OrganizationSetting.identityProvider":
		if e.complexity.OrganizationSetting.IdentityProvider == nil {
			break
		}

		return e.complexity.OrganizationSetting.IdentityProvider(childComplexity), true

	case "OrganizationSetting.identityProviderAuthTested":
		if e.complexity.OrganizationSetting.IdentityProviderAuthTested == nil {
			break
		}

		return e.complexity.OrganizationSetting.IdentityProviderAuthTested(childComplexity), true

	case "OrganizationSetting.identityProviderClientID":
		if e.complexity.OrganizationSetting.IdentityProviderClientID == nil {
			break
		}

		return e.complexity.OrganizationSetting.IdentityProviderClientID(childComplexity), true

	case "OrganizationSetting.identityProviderClientSecret":
		if e.complexity.OrganizationSetting.IdentityProviderClientSecret == nil {
			break
		}

		return e.complexity.OrganizationSetting.IdentityProviderClientSecret(childComplexity), true

	case "OrganizationSetting.identityProviderEntityID":
		if e.complexity.OrganizationSetting.IdentityProviderEntityID == nil {
			break
		}

		return e.complexity.OrganizationSetting.IdentityProviderEntityID(childComplexity), true

	case "OrganizationSetting.identityProviderLoginEnforced":
		if e.complexity.OrganizationSetting.IdentityProviderLoginEnforced == nil {
			break
		}

		return e.complexity.OrganizationSetting.IdentityProviderLoginEnforced(childComplexity), true

	case "OrganizationSetting.identityProviderMetadataEndpoint":
		if e.complexity.OrganizationSetting.IdentityProviderMetadataEndpoint == nil {
			break
		}

		return e.complexity.OrganizationSetting.IdentityProviderMetadataEndpoint(childComplexity), true

	case "OrganizationSetting.oidcDiscoveryEndpoint":
		if e.complexity.OrganizationSetting.OidcDiscoveryEndpoint == nil {
			break
		}

		return e.complexity.OrganizationSetting.OidcDiscoveryEndpoint(childComplexity), true

	case "OrganizationSetting.organization":
		if e.complexity.OrganizationSetting.Organization == nil {
			break
		}

		return e.complexity.OrganizationSetting.Organization(childComplexity), true

	case "OrganizationSetting.organizationID":
		if e.complexity.OrganizationSetting.OrganizationID == nil {
			break
		}

		return e.complexity.OrganizationSetting.OrganizationID(childComplexity), true

	case "OrganizationSetting.paymentMethodAdded":
		if e.complexity.OrganizationSetting.PaymentMethodAdded == nil {
			break
		}

		return e.complexity.OrganizationSetting.PaymentMethodAdded(childComplexity), true

	case "OrganizationSetting.tags":
		if e.complexity.OrganizationSetting.Tags == nil {
			break
		}

		return e.complexity.OrganizationSetting.Tags(childComplexity), true

	case "OrganizationSetting.taxIdentifier":
		if e.complexity.OrganizationSetting.TaxIdentifier == nil {
			break
		}

		return e.complexity.OrganizationSetting.TaxIdentifier(childComplexity), true

	case "OrganizationSetting.updatedAt":
		if e.complexity.OrganizationSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationSetting.UpdatedAt(childComplexity), true

	case "OrganizationSetting.updatedBy":
		if e.complexity.OrganizationSetting.UpdatedBy == nil {
			break
		}

		return e.complexity.OrganizationSetting.UpdatedBy(childComplexity), true

	case "OrganizationSettingBulkCreatePayload.organizationSettings":
		if e.complexity.OrganizationSettingBulkCreatePayload.OrganizationSettings == nil {
			break
		}

		return e.complexity.OrganizationSettingBulkCreatePayload.OrganizationSettings(childComplexity), true

	case "OrganizationSettingConnection.edges":
		if e.complexity.OrganizationSettingConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationSettingConnection.Edges(childComplexity), true

	case "OrganizationSettingConnection.pageInfo":
		if e.complexity.OrganizationSettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationSettingConnection.PageInfo(childComplexity), true

	case "OrganizationSettingConnection.totalCount":
		if e.complexity.OrganizationSettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationSettingConnection.TotalCount(childComplexity), true

	case "OrganizationSettingCreatePayload.organizationSetting":
		if e.complexity.OrganizationSettingCreatePayload.OrganizationSetting == nil {
			break
		}

		return e.complexity.OrganizationSettingCreatePayload.OrganizationSetting(childComplexity), true

	case "OrganizationSettingDeletePayload.deletedID":
		if e.complexity.OrganizationSettingDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.OrganizationSettingDeletePayload.DeletedID(childComplexity), true

	case "OrganizationSettingEdge.cursor":
		if e.complexity.OrganizationSettingEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationSettingEdge.Cursor(childComplexity), true

	case "OrganizationSettingEdge.node":
		if e.complexity.OrganizationSettingEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationSettingEdge.Node(childComplexity), true

	case "OrganizationSettingHistory.allowedEmailDomains":
		if e.complexity.OrganizationSettingHistory.AllowedEmailDomains == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.AllowedEmailDomains(childComplexity), true

	case "OrganizationSettingHistory.billingAddress":
		if e.complexity.OrganizationSettingHistory.BillingAddress == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingAddress(childComplexity), true

	case "OrganizationSettingHistory.billingContact":
		if e.complexity.OrganizationSettingHistory.BillingContact == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingContact(childComplexity), true

	case "OrganizationSettingHistory.billingEmail":
		if e.complexity.OrganizationSettingHistory.BillingEmail == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingEmail(childComplexity), true

	case "OrganizationSettingHistory.billingNotificationsEnabled":
		if e.complexity.OrganizationSettingHistory.BillingNotificationsEnabled == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingNotificationsEnabled(childComplexity), true

	case "OrganizationSettingHistory.billingPhone":
		if e.complexity.OrganizationSettingHistory.BillingPhone == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingPhone(childComplexity), true

	case "OrganizationSettingHistory.complianceWebhookToken":
		if e.complexity.OrganizationSettingHistory.ComplianceWebhookToken == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.ComplianceWebhookToken(childComplexity), true

	case "OrganizationSettingHistory.createdAt":
		if e.complexity.OrganizationSettingHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.CreatedAt(childComplexity), true

	case "OrganizationSettingHistory.createdBy":
		if e.complexity.OrganizationSettingHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.CreatedBy(childComplexity), true

	case "OrganizationSettingHistory.domains":
		if e.complexity.OrganizationSettingHistory.Domains == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Domains(childComplexity), true

	case "OrganizationSettingHistory.geoLocation":
		if e.complexity.OrganizationSettingHistory.GeoLocation == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.GeoLocation(childComplexity), true

	case "OrganizationSettingHistory.historyTime":
		if e.complexity.OrganizationSettingHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.HistoryTime(childComplexity), true

	case "OrganizationSettingHistory.id":
		if e.complexity.OrganizationSettingHistory.ID == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.ID(childComplexity), true

	case "OrganizationSettingHistory.identityProvider":
		if e.complexity.OrganizationSettingHistory.IdentityProvider == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.IdentityProvider(childComplexity), true

	case "OrganizationSettingHistory.identityProviderAuthTested":
		if e.complexity.OrganizationSettingHistory.IdentityProviderAuthTested == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.IdentityProviderAuthTested(childComplexity), true

	case "OrganizationSettingHistory.identityProviderClientID":
		if e.complexity.OrganizationSettingHistory.IdentityProviderClientID == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.IdentityProviderClientID(childComplexity), true

	case "OrganizationSettingHistory.identityProviderClientSecret":
		if e.complexity.OrganizationSettingHistory.IdentityProviderClientSecret == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.IdentityProviderClientSecret(childComplexity), true

	case "OrganizationSettingHistory.identityProviderEntityID":
		if e.complexity.OrganizationSettingHistory.IdentityProviderEntityID == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.IdentityProviderEntityID(childComplexity), true

	case "OrganizationSettingHistory.identityProviderLoginEnforced":
		if e.complexity.OrganizationSettingHistory.IdentityProviderLoginEnforced == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.IdentityProviderLoginEnforced(childComplexity), true

	case "OrganizationSettingHistory.identityProviderMetadataEndpoint":
		if e.complexity.OrganizationSettingHistory.IdentityProviderMetadataEndpoint == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.IdentityProviderMetadataEndpoint(childComplexity), true

	case "OrganizationSettingHistory.oidcDiscoveryEndpoint":
		if e.complexity.OrganizationSettingHistory.OidcDiscoveryEndpoint == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.OidcDiscoveryEndpoint(childComplexity), true

	case "OrganizationSettingHistory.operation":
		if e.complexity.OrganizationSettingHistory.Operation == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Operation(childComplexity), true

	case "OrganizationSettingHistory.organizationID":
		if e.complexity.OrganizationSettingHistory.OrganizationID == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.OrganizationID(childComplexity), true

	case "OrganizationSettingHistory.paymentMethodAdded":
		if e.complexity.OrganizationSettingHistory.PaymentMethodAdded == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.PaymentMethodAdded(childComplexity), true

	case "OrganizationSettingHistory.ref":
		if e.complexity.OrganizationSettingHistory.Ref == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Ref(childComplexity), true

	case "OrganizationSettingHistory.tags":
		if e.complexity.OrganizationSettingHistory.Tags == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Tags(childComplexity), true

	case "OrganizationSettingHistory.taxIdentifier":
		if e.complexity.OrganizationSettingHistory.TaxIdentifier == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.TaxIdentifier(childComplexity), true

	case "OrganizationSettingHistory.updatedAt":
		if e.complexity.OrganizationSettingHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.UpdatedAt(childComplexity), true

	case "OrganizationSettingHistory.updatedBy":
		if e.complexity.OrganizationSettingHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.UpdatedBy(childComplexity), true

	case "OrganizationSettingHistoryConnection.edges":
		if e.complexity.OrganizationSettingHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryConnection.Edges(childComplexity), true

	case "OrganizationSettingHistoryConnection.pageInfo":
		if e.complexity.OrganizationSettingHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryConnection.PageInfo(childComplexity), true

	case "OrganizationSettingHistoryConnection.totalCount":
		if e.complexity.OrganizationSettingHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryConnection.TotalCount(childComplexity), true

	case "OrganizationSettingHistoryEdge.cursor":
		if e.complexity.OrganizationSettingHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryEdge.Cursor(childComplexity), true

	case "OrganizationSettingHistoryEdge.node":
		if e.complexity.OrganizationSettingHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryEdge.Node(childComplexity), true

	case "OrganizationSettingUpdatePayload.organizationSetting":
		if e.complexity.OrganizationSettingUpdatePayload.OrganizationSetting == nil {
			break
		}

		return e.complexity.OrganizationSettingUpdatePayload.OrganizationSetting(childComplexity), true

	case "OrganizationUpdatePayload.organization":
		if e.complexity.OrganizationUpdatePayload.Organization == nil {
			break
		}

		return e.complexity.OrganizationUpdatePayload.Organization(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PersonalAccessToken.createdAt":
		if e.complexity.PersonalAccessToken.CreatedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.CreatedAt(childComplexity), true

	case "PersonalAccessToken.createdBy":
		if e.complexity.PersonalAccessToken.CreatedBy == nil {
			break
		}

		return e.complexity.PersonalAccessToken.CreatedBy(childComplexity), true

	case "PersonalAccessToken.description":
		if e.complexity.PersonalAccessToken.Description == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Description(childComplexity), true

	case "PersonalAccessToken.events":
		if e.complexity.PersonalAccessToken.Events == nil {
			break
		}

		args, err := ec.field_PersonalAccessToken_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PersonalAccessToken.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "PersonalAccessToken.expiresAt":
		if e.complexity.PersonalAccessToken.ExpiresAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.ExpiresAt(childComplexity), true

	case "PersonalAccessToken.id":
		if e.complexity.PersonalAccessToken.ID == nil {
			break
		}

		return e.complexity.PersonalAccessToken.ID(childComplexity), true

	case "PersonalAccessToken.isActive":
		if e.complexity.PersonalAccessToken.IsActive == nil {
			break
		}

		return e.complexity.PersonalAccessToken.IsActive(childComplexity), true

	case "PersonalAccessToken.lastUsedAt":
		if e.complexity.PersonalAccessToken.LastUsedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.LastUsedAt(childComplexity), true

	case "PersonalAccessToken.name":
		if e.complexity.PersonalAccessToken.Name == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Name(childComplexity), true

	case "PersonalAccessToken.organizations":
		if e.complexity.PersonalAccessToken.Organizations == nil {
			break
		}

		args, err := ec.field_PersonalAccessToken_organizations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PersonalAccessToken.Organizations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrganizationOrder), args["where"].(*generated.OrganizationWhereInput)), true

	case "PersonalAccessToken.owner":
		if e.complexity.PersonalAccessToken.Owner == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Owner(childComplexity), true

	case "PersonalAccessToken.revokedAt":
		if e.complexity.PersonalAccessToken.RevokedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.RevokedAt(childComplexity), true

	case "PersonalAccessToken.revokedBy":
		if e.complexity.PersonalAccessToken.RevokedBy == nil {
			break
		}

		return e.complexity.PersonalAccessToken.RevokedBy(childComplexity), true

	case "PersonalAccessToken.revokedReason":
		if e.complexity.PersonalAccessToken.RevokedReason == nil {
			break
		}

		return e.complexity.PersonalAccessToken.RevokedReason(childComplexity), true

	case "PersonalAccessToken.ssoAuthorizations":
		if e.complexity.PersonalAccessToken.SSOAuthorizations == nil {
			break
		}

		return e.complexity.PersonalAccessToken.SSOAuthorizations(childComplexity), true

	case "PersonalAccessToken.scopes":
		if e.complexity.PersonalAccessToken.Scopes == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Scopes(childComplexity), true

	case "PersonalAccessToken.tags":
		if e.complexity.PersonalAccessToken.Tags == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Tags(childComplexity), true

	case "PersonalAccessToken.token":
		if e.complexity.PersonalAccessToken.Token == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Token(childComplexity), true

	case "PersonalAccessToken.updatedAt":
		if e.complexity.PersonalAccessToken.UpdatedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.UpdatedAt(childComplexity), true

	case "PersonalAccessToken.updatedBy":
		if e.complexity.PersonalAccessToken.UpdatedBy == nil {
			break
		}

		return e.complexity.PersonalAccessToken.UpdatedBy(childComplexity), true

	case "PersonalAccessTokenBulkCreatePayload.personalAccessTokens":
		if e.complexity.PersonalAccessTokenBulkCreatePayload.PersonalAccessTokens == nil {
			break
		}

		return e.complexity.PersonalAccessTokenBulkCreatePayload.PersonalAccessTokens(childComplexity), true

	case "PersonalAccessTokenConnection.edges":
		if e.complexity.PersonalAccessTokenConnection.Edges == nil {
			break
		}

		return e.complexity.PersonalAccessTokenConnection.Edges(childComplexity), true

	case "PersonalAccessTokenConnection.pageInfo":
		if e.complexity.PersonalAccessTokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.PersonalAccessTokenConnection.PageInfo(childComplexity), true

	case "PersonalAccessTokenConnection.totalCount":
		if e.complexity.PersonalAccessTokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.PersonalAccessTokenConnection.TotalCount(childComplexity), true

	case "PersonalAccessTokenCreatePayload.personalAccessToken":
		if e.complexity.PersonalAccessTokenCreatePayload.PersonalAccessToken == nil {
			break
		}

		return e.complexity.PersonalAccessTokenCreatePayload.PersonalAccessToken(childComplexity), true

	case "PersonalAccessTokenDeletePayload.deletedID":
		if e.complexity.PersonalAccessTokenDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.PersonalAccessTokenDeletePayload.DeletedID(childComplexity), true

	case "PersonalAccessTokenEdge.cursor":
		if e.complexity.PersonalAccessTokenEdge.Cursor == nil {
			break
		}

		return e.complexity.PersonalAccessTokenEdge.Cursor(childComplexity), true

	case "PersonalAccessTokenEdge.node":
		if e.complexity.PersonalAccessTokenEdge.Node == nil {
			break
		}

		return e.complexity.PersonalAccessTokenEdge.Node(childComplexity), true

	case "PersonalAccessTokenUpdatePayload.personalAccessToken":
		if e.complexity.PersonalAccessTokenUpdatePayload.PersonalAccessToken == nil {
			break
		}

		return e.complexity.PersonalAccessTokenUpdatePayload.PersonalAccessToken(childComplexity), true

	case "Procedure.approvalRequired":
		if e.complexity.Procedure.ApprovalRequired == nil {
			break
		}

		return e.complexity.Procedure.ApprovalRequired(childComplexity), true

	case "Procedure.approver":
		if e.complexity.Procedure.Approver == nil {
			break
		}

		return e.complexity.Procedure.Approver(childComplexity), true

	case "Procedure.approverID":
		if e.complexity.Procedure.ApproverID == nil {
			break
		}

		return e.complexity.Procedure.ApproverID(childComplexity), true

	case "Procedure.blockedGroups":
		if e.complexity.Procedure.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Procedure_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Procedure.controlSuggestions":
		if e.complexity.Procedure.ControlSuggestions == nil {
			break
		}

		return e.complexity.Procedure.ControlSuggestions(childComplexity), true

	case "Procedure.controls":
		if e.complexity.Procedure.Controls == nil {
			break
		}

		args, err := ec.field_Procedure_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Procedure.createdAt":
		if e.complexity.Procedure.CreatedAt == nil {
			break
		}

		return e.complexity.Procedure.CreatedAt(childComplexity), true

	case "Procedure.createdBy":
		if e.complexity.Procedure.CreatedBy == nil {
			break
		}

		return e.complexity.Procedure.CreatedBy(childComplexity), true

	case "Procedure.delegate":
		if e.complexity.Procedure.Delegate == nil {
			break
		}

		return e.complexity.Procedure.Delegate(childComplexity), true

	case "Procedure.delegateID":
		if e.complexity.Procedure.DelegateID == nil {
			break
		}

		return e.complexity.Procedure.DelegateID(childComplexity), true

	case "Procedure.details":
		if e.complexity.Procedure.Details == nil {
			break
		}

		return e.complexity.Procedure.Details(childComplexity), true

	case "Procedure.dismissedControlSuggestions":
		if e.complexity.Procedure.DismissedControlSuggestions == nil {
			break
		}

		return e.complexity.Procedure.DismissedControlSuggestions(childComplexity), true

	case "Procedure.dismissedImprovementSuggestions":
		if e.complexity.Procedure.DismissedImprovementSuggestions == nil {
			break
		}

		return e.complexity.Procedure.DismissedImprovementSuggestions(childComplexity), true

	case "Procedure.dismissedTagSuggestions":
		if e.complexity.Procedure.DismissedTagSuggestions == nil {
			break
		}

		return e.complexity.Procedure.DismissedTagSuggestions(childComplexity), true

	case "Procedure.displayID":
		if e.complexity.Procedure.DisplayID == nil {
			break
		}

		return e.complexity.Procedure.DisplayID(childComplexity), true

	case "Procedure.editors":
		if e.complexity.Procedure.Editors == nil {
			break
		}

		args, err := ec.field_Procedure_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Procedure.file":
		if e.complexity.Procedure.File == nil {
			break
		}

		return e.complexity.Procedure.File(childComplexity), true

	case "Procedure.fileID":
		if e.complexity.Procedure.FileID == nil {
			break
		}

		return e.complexity.Procedure.FileID(childComplexity), true

	case "Procedure.id":
		if e.complexity.Procedure.ID == nil {
			break
		}

		return e.complexity.Procedure.ID(childComplexity), true

	case "Procedure.improvementSuggestions":
		if e.complexity.Procedure.ImprovementSuggestions == nil {
			break
		}

		return e.complexity.Procedure.ImprovementSuggestions(childComplexity), true

	case "Procedure.internalPolicies":
		if e.complexity.Procedure.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Procedure_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Procedure.name":
		if e.complexity.Procedure.Name == nil {
			break
		}

		return e.complexity.Procedure.Name(childComplexity), true

	case "Procedure.narratives":
		if e.complexity.Procedure.Narratives == nil {
			break
		}

		args, err := ec.field_Procedure_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Procedure.owner":
		if e.complexity.Procedure.Owner == nil {
			break
		}

		return e.complexity.Procedure.Owner(childComplexity), true

	case "Procedure.ownerID":
		if e.complexity.Procedure.OwnerID == nil {
			break
		}

		return e.complexity.Procedure.OwnerID(childComplexity), true

	case "Procedure.procedureType":
		if e.complexity.Procedure.ProcedureType == nil {
			break
		}

		return e.complexity.Procedure.ProcedureType(childComplexity), true

	case "Procedure.programs":
		if e.complexity.Procedure.Programs == nil {
			break
		}

		args, err := ec.field_Procedure_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Procedure.reviewDue":
		if e.complexity.Procedure.ReviewDue == nil {
			break
		}

		return e.complexity.Procedure.ReviewDue(childComplexity), true

	case "Procedure.reviewFrequency":
		if e.complexity.Procedure.ReviewFrequency == nil {
			break
		}

		return e.complexity.Procedure.ReviewFrequency(childComplexity), true

	case "Procedure.revision":
		if e.complexity.Procedure.Revision == nil {
			break
		}

		return e.complexity.Procedure.Revision(childComplexity), true

	case "Procedure.risks":
		if e.complexity.Procedure.Risks == nil {
			break
		}

		args, err := ec.field_Procedure_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Procedure.status":
		if e.complexity.Procedure.Status == nil {
			break
		}

		return e.complexity.Procedure.Status(childComplexity), true

	case "Procedure.subcontrols":
		if e.complexity.Procedure.Subcontrols == nil {
			break
		}

		args, err := ec.field_Procedure_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Procedure.summary":
		if e.complexity.Procedure.Summary == nil {
			break
		}

		return e.complexity.Procedure.Summary(childComplexity), true

	case "Procedure.tagSuggestions":
		if e.complexity.Procedure.TagSuggestions == nil {
			break
		}

		return e.complexity.Procedure.TagSuggestions(childComplexity), true

	case "Procedure.tags":
		if e.complexity.Procedure.Tags == nil {
			break
		}

		return e.complexity.Procedure.Tags(childComplexity), true

	case "Procedure.tasks":
		if e.complexity.Procedure.Tasks == nil {
			break
		}

		args, err := ec.field_Procedure_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Procedure.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Procedure.url":
		if e.complexity.Procedure.URL == nil {
			break
		}

		return e.complexity.Procedure.URL(childComplexity), true

	case "Procedure.updatedAt":
		if e.complexity.Procedure.UpdatedAt == nil {
			break
		}

		return e.complexity.Procedure.UpdatedAt(childComplexity), true

	case "Procedure.updatedBy":
		if e.complexity.Procedure.UpdatedBy == nil {
			break
		}

		return e.complexity.Procedure.UpdatedBy(childComplexity), true

	case "ProcedureBulkCreatePayload.procedures":
		if e.complexity.ProcedureBulkCreatePayload.Procedures == nil {
			break
		}

		return e.complexity.ProcedureBulkCreatePayload.Procedures(childComplexity), true

	case "ProcedureBulkUpdatePayload.procedures":
		if e.complexity.ProcedureBulkUpdatePayload.Procedures == nil {
			break
		}

		return e.complexity.ProcedureBulkUpdatePayload.Procedures(childComplexity), true

	case "ProcedureBulkUpdatePayload.updatedIDs":
		if e.complexity.ProcedureBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.ProcedureBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "ProcedureConnection.edges":
		if e.complexity.ProcedureConnection.Edges == nil {
			break
		}

		return e.complexity.ProcedureConnection.Edges(childComplexity), true

	case "ProcedureConnection.pageInfo":
		if e.complexity.ProcedureConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProcedureConnection.PageInfo(childComplexity), true

	case "ProcedureConnection.totalCount":
		if e.complexity.ProcedureConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProcedureConnection.TotalCount(childComplexity), true

	case "ProcedureCreatePayload.procedure":
		if e.complexity.ProcedureCreatePayload.Procedure == nil {
			break
		}

		return e.complexity.ProcedureCreatePayload.Procedure(childComplexity), true

	case "ProcedureDeletePayload.deletedID":
		if e.complexity.ProcedureDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ProcedureDeletePayload.DeletedID(childComplexity), true

	case "ProcedureEdge.cursor":
		if e.complexity.ProcedureEdge.Cursor == nil {
			break
		}

		return e.complexity.ProcedureEdge.Cursor(childComplexity), true

	case "ProcedureEdge.node":
		if e.complexity.ProcedureEdge.Node == nil {
			break
		}

		return e.complexity.ProcedureEdge.Node(childComplexity), true

	case "ProcedureHistory.approvalRequired":
		if e.complexity.ProcedureHistory.ApprovalRequired == nil {
			break
		}

		return e.complexity.ProcedureHistory.ApprovalRequired(childComplexity), true

	case "ProcedureHistory.approverID":
		if e.complexity.ProcedureHistory.ApproverID == nil {
			break
		}

		return e.complexity.ProcedureHistory.ApproverID(childComplexity), true

	case "ProcedureHistory.controlSuggestions":
		if e.complexity.ProcedureHistory.ControlSuggestions == nil {
			break
		}

		return e.complexity.ProcedureHistory.ControlSuggestions(childComplexity), true

	case "ProcedureHistory.createdAt":
		if e.complexity.ProcedureHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ProcedureHistory.CreatedAt(childComplexity), true

	case "ProcedureHistory.createdBy":
		if e.complexity.ProcedureHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ProcedureHistory.CreatedBy(childComplexity), true

	case "ProcedureHistory.delegateID":
		if e.complexity.ProcedureHistory.DelegateID == nil {
			break
		}

		return e.complexity.ProcedureHistory.DelegateID(childComplexity), true

	case "ProcedureHistory.details":
		if e.complexity.ProcedureHistory.Details == nil {
			break
		}

		return e.complexity.ProcedureHistory.Details(childComplexity), true

	case "ProcedureHistory.dismissedControlSuggestions":
		if e.complexity.ProcedureHistory.DismissedControlSuggestions == nil {
			break
		}

		return e.complexity.ProcedureHistory.DismissedControlSuggestions(childComplexity), true

	case "ProcedureHistory.dismissedImprovementSuggestions":
		if e.complexity.ProcedureHistory.DismissedImprovementSuggestions == nil {
			break
		}

		return e.complexity.ProcedureHistory.DismissedImprovementSuggestions(childComplexity), true

	case "ProcedureHistory.dismissedTagSuggestions":
		if e.complexity.ProcedureHistory.DismissedTagSuggestions == nil {
			break
		}

		return e.complexity.ProcedureHistory.DismissedTagSuggestions(childComplexity), true

	case "ProcedureHistory.displayID":
		if e.complexity.ProcedureHistory.DisplayID == nil {
			break
		}

		return e.complexity.ProcedureHistory.DisplayID(childComplexity), true

	case "ProcedureHistory.fileID":
		if e.complexity.ProcedureHistory.FileID == nil {
			break
		}

		return e.complexity.ProcedureHistory.FileID(childComplexity), true

	case "ProcedureHistory.historyTime":
		if e.complexity.ProcedureHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ProcedureHistory.HistoryTime(childComplexity), true

	case "ProcedureHistory.id":
		if e.complexity.ProcedureHistory.ID == nil {
			break
		}

		return e.complexity.ProcedureHistory.ID(childComplexity), true

	case "ProcedureHistory.improvementSuggestions":
		if e.complexity.ProcedureHistory.ImprovementSuggestions == nil {
			break
		}

		return e.complexity.ProcedureHistory.ImprovementSuggestions(childComplexity), true

	case "ProcedureHistory.name":
		if e.complexity.ProcedureHistory.Name == nil {
			break
		}

		return e.complexity.ProcedureHistory.Name(childComplexity), true

	case "ProcedureHistory.operation":
		if e.complexity.ProcedureHistory.Operation == nil {
			break
		}

		return e.complexity.ProcedureHistory.Operation(childComplexity), true

	case "ProcedureHistory.ownerID":
		if e.complexity.ProcedureHistory.OwnerID == nil {
			break
		}

		return e.complexity.ProcedureHistory.OwnerID(childComplexity), true

	case "ProcedureHistory.procedureType":
		if e.complexity.ProcedureHistory.ProcedureType == nil {
			break
		}

		return e.complexity.ProcedureHistory.ProcedureType(childComplexity), true

	case "ProcedureHistory.ref":
		if e.complexity.ProcedureHistory.Ref == nil {
			break
		}

		return e.complexity.ProcedureHistory.Ref(childComplexity), true

	case "ProcedureHistory.reviewDue":
		if e.complexity.ProcedureHistory.ReviewDue == nil {
			break
		}

		return e.complexity.ProcedureHistory.ReviewDue(childComplexity), true

	case "ProcedureHistory.reviewFrequency":
		if e.complexity.ProcedureHistory.ReviewFrequency == nil {
			break
		}

		return e.complexity.ProcedureHistory.ReviewFrequency(childComplexity), true

	case "ProcedureHistory.revision":
		if e.complexity.ProcedureHistory.Revision == nil {
			break
		}

		return e.complexity.ProcedureHistory.Revision(childComplexity), true

	case "ProcedureHistory.status":
		if e.complexity.ProcedureHistory.Status == nil {
			break
		}

		return e.complexity.ProcedureHistory.Status(childComplexity), true

	case "ProcedureHistory.summary":
		if e.complexity.ProcedureHistory.Summary == nil {
			break
		}

		return e.complexity.ProcedureHistory.Summary(childComplexity), true

	case "ProcedureHistory.tagSuggestions":
		if e.complexity.ProcedureHistory.TagSuggestions == nil {
			break
		}

		return e.complexity.ProcedureHistory.TagSuggestions(childComplexity), true

	case "ProcedureHistory.tags":
		if e.complexity.ProcedureHistory.Tags == nil {
			break
		}

		return e.complexity.ProcedureHistory.Tags(childComplexity), true

	case "ProcedureHistory.url":
		if e.complexity.ProcedureHistory.URL == nil {
			break
		}

		return e.complexity.ProcedureHistory.URL(childComplexity), true

	case "ProcedureHistory.updatedAt":
		if e.complexity.ProcedureHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProcedureHistory.UpdatedAt(childComplexity), true

	case "ProcedureHistory.updatedBy":
		if e.complexity.ProcedureHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ProcedureHistory.UpdatedBy(childComplexity), true

	case "ProcedureHistoryConnection.edges":
		if e.complexity.ProcedureHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ProcedureHistoryConnection.Edges(childComplexity), true

	case "ProcedureHistoryConnection.pageInfo":
		if e.complexity.ProcedureHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProcedureHistoryConnection.PageInfo(childComplexity), true

	case "ProcedureHistoryConnection.totalCount":
		if e.complexity.ProcedureHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProcedureHistoryConnection.TotalCount(childComplexity), true

	case "ProcedureHistoryEdge.cursor":
		if e.complexity.ProcedureHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ProcedureHistoryEdge.Cursor(childComplexity), true

	case "ProcedureHistoryEdge.node":
		if e.complexity.ProcedureHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ProcedureHistoryEdge.Node(childComplexity), true

	case "ProcedureUpdatePayload.procedure":
		if e.complexity.ProcedureUpdatePayload.Procedure == nil {
			break
		}

		return e.complexity.ProcedureUpdatePayload.Procedure(childComplexity), true

	case "Program.actionPlans":
		if e.complexity.Program.ActionPlans == nil {
			break
		}

		args, err := ec.field_Program_actionPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ActionPlanOrder), args["where"].(*generated.ActionPlanWhereInput)), true

	case "Program.auditFirm":
		if e.complexity.Program.AuditFirm == nil {
			break
		}

		return e.complexity.Program.AuditFirm(childComplexity), true

	case "Program.auditor":
		if e.complexity.Program.Auditor == nil {
			break
		}

		return e.complexity.Program.Auditor(childComplexity), true

	case "Program.auditorEmail":
		if e.complexity.Program.AuditorEmail == nil {
			break
		}

		return e.complexity.Program.AuditorEmail(childComplexity), true

	case "Program.auditorReadComments":
		if e.complexity.Program.AuditorReadComments == nil {
			break
		}

		return e.complexity.Program.AuditorReadComments(childComplexity), true

	case "Program.auditorReady":
		if e.complexity.Program.AuditorReady == nil {
			break
		}

		return e.complexity.Program.AuditorReady(childComplexity), true

	case "Program.auditorWriteComments":
		if e.complexity.Program.AuditorWriteComments == nil {
			break
		}

		return e.complexity.Program.AuditorWriteComments(childComplexity), true

	case "Program.blockedGroups":
		if e.complexity.Program.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Program_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Program.controlObjectives":
		if e.complexity.Program.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Program_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Program.controls":
		if e.complexity.Program.Controls == nil {
			break
		}

		args, err := ec.field_Program_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Program.createdAt":
		if e.complexity.Program.CreatedAt == nil {
			break
		}

		return e.complexity.Program.CreatedAt(childComplexity), true

	case "Program.createdBy":
		if e.complexity.Program.CreatedBy == nil {
			break
		}

		return e.complexity.Program.CreatedBy(childComplexity), true

	case "Program.description":
		if e.complexity.Program.Description == nil {
			break
		}

		return e.complexity.Program.Description(childComplexity), true

	case "Program.displayID":
		if e.complexity.Program.DisplayID == nil {
			break
		}

		return e.complexity.Program.DisplayID(childComplexity), true

	case "Program.editors":
		if e.complexity.Program.Editors == nil {
			break
		}

		args, err := ec.field_Program_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Program.endDate":
		if e.complexity.Program.EndDate == nil {
			break
		}

		return e.complexity.Program.EndDate(childComplexity), true

	case "Program.evidence":
		if e.complexity.Program.Evidence == nil {
			break
		}

		args, err := ec.field_Program_evidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Evidence(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EvidenceOrder), args["where"].(*generated.EvidenceWhereInput)), true

	case "Program.files":
		if e.complexity.Program.Files == nil {
			break
		}

		args, err := ec.field_Program_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Program.frameworkName":
		if e.complexity.Program.FrameworkName == nil {
			break
		}

		return e.complexity.Program.FrameworkName(childComplexity), true

	case "Program.id":
		if e.complexity.Program.ID == nil {
			break
		}

		return e.complexity.Program.ID(childComplexity), true

	case "Program.internalPolicies":
		if e.complexity.Program.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Program_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Program.members":
		if e.complexity.Program.Members == nil {
			break
		}

		args, err := ec.field_Program_members_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Members(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramMembershipOrder), args["where"].(*generated.ProgramMembershipWhereInput)), true

	case "Program.name":
		if e.complexity.Program.Name == nil {
			break
		}

		return e.complexity.Program.Name(childComplexity), true

	case "Program.narratives":
		if e.complexity.Program.Narratives == nil {
			break
		}

		args, err := ec.field_Program_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Program.notes":
		if e.complexity.Program.Notes == nil {
			break
		}

		args, err := ec.field_Program_notes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Notes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NoteOrder), args["where"].(*generated.NoteWhereInput)), true

	case "Program.owner":
		if e.complexity.Program.Owner == nil {
			break
		}

		return e.complexity.Program.Owner(childComplexity), true

	case "Program.ownerID":
		if e.complexity.Program.OwnerID == nil {
			break
		}

		return e.complexity.Program.OwnerID(childComplexity), true

	case "Program.procedures":
		if e.complexity.Program.Procedures == nil {
			break
		}

		args, err := ec.field_Program_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Program.programType":
		if e.complexity.Program.ProgramType == nil {
			break
		}

		return e.complexity.Program.ProgramType(childComplexity), true

	case "Program.risks":
		if e.complexity.Program.Risks == nil {
			break
		}

		args, err := ec.field_Program_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Program.startDate":
		if e.complexity.Program.StartDate == nil {
			break
		}

		return e.complexity.Program.StartDate(childComplexity), true

	case "Program.status":
		if e.complexity.Program.Status == nil {
			break
		}

		return e.complexity.Program.Status(childComplexity), true

	case "Program.subcontrols":
		if e.complexity.Program.Subcontrols == nil {
			break
		}

		args, err := ec.field_Program_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Program.tags":
		if e.complexity.Program.Tags == nil {
			break
		}

		return e.complexity.Program.Tags(childComplexity), true

	case "Program.tasks":
		if e.complexity.Program.Tasks == nil {
			break
		}

		args, err := ec.field_Program_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Program.updatedAt":
		if e.complexity.Program.UpdatedAt == nil {
			break
		}

		return e.complexity.Program.UpdatedAt(childComplexity), true

	case "Program.updatedBy":
		if e.complexity.Program.UpdatedBy == nil {
			break
		}

		return e.complexity.Program.UpdatedBy(childComplexity), true

	case "Program.users":
		if e.complexity.Program.Users == nil {
			break
		}

		args, err := ec.field_Program_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Users(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.UserOrder), args["where"].(*generated.UserWhereInput)), true

	case "Program.viewers":
		if e.complexity.Program.Viewers == nil {
			break
		}

		args, err := ec.field_Program_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ProgramBulkCreatePayload.programs":
		if e.complexity.ProgramBulkCreatePayload.Programs == nil {
			break
		}

		return e.complexity.ProgramBulkCreatePayload.Programs(childComplexity), true

	case "ProgramConnection.edges":
		if e.complexity.ProgramConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramConnection.Edges(childComplexity), true

	case "ProgramConnection.pageInfo":
		if e.complexity.ProgramConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramConnection.PageInfo(childComplexity), true

	case "ProgramConnection.totalCount":
		if e.complexity.ProgramConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramConnection.TotalCount(childComplexity), true

	case "ProgramCreatePayload.program":
		if e.complexity.ProgramCreatePayload.Program == nil {
			break
		}

		return e.complexity.ProgramCreatePayload.Program(childComplexity), true

	case "ProgramDeletePayload.deletedID":
		if e.complexity.ProgramDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ProgramDeletePayload.DeletedID(childComplexity), true

	case "ProgramEdge.cursor":
		if e.complexity.ProgramEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramEdge.Cursor(childComplexity), true

	case "ProgramEdge.node":
		if e.complexity.ProgramEdge.Node == nil {
			break
		}

		return e.complexity.ProgramEdge.Node(childComplexity), true

	case "ProgramHistory.auditFirm":
		if e.complexity.ProgramHistory.AuditFirm == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditFirm(childComplexity), true

	case "ProgramHistory.auditor":
		if e.complexity.ProgramHistory.Auditor == nil {
			break
		}

		return e.complexity.ProgramHistory.Auditor(childComplexity), true

	case "ProgramHistory.auditorEmail":
		if e.complexity.ProgramHistory.AuditorEmail == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditorEmail(childComplexity), true

	case "ProgramHistory.auditorReadComments":
		if e.complexity.ProgramHistory.AuditorReadComments == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditorReadComments(childComplexity), true

	case "ProgramHistory.auditorReady":
		if e.complexity.ProgramHistory.AuditorReady == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditorReady(childComplexity), true

	case "ProgramHistory.auditorWriteComments":
		if e.complexity.ProgramHistory.AuditorWriteComments == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditorWriteComments(childComplexity), true

	case "ProgramHistory.createdAt":
		if e.complexity.ProgramHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ProgramHistory.CreatedAt(childComplexity), true

	case "ProgramHistory.createdBy":
		if e.complexity.ProgramHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ProgramHistory.CreatedBy(childComplexity), true

	case "ProgramHistory.description":
		if e.complexity.ProgramHistory.Description == nil {
			break
		}

		return e.complexity.ProgramHistory.Description(childComplexity), true

	case "ProgramHistory.displayID":
		if e.complexity.ProgramHistory.DisplayID == nil {
			break
		}

		return e.complexity.ProgramHistory.DisplayID(childComplexity), true

	case "ProgramHistory.endDate":
		if e.complexity.ProgramHistory.EndDate == nil {
			break
		}

		return e.complexity.ProgramHistory.EndDate(childComplexity), true

	case "ProgramHistory.frameworkName":
		if e.complexity.ProgramHistory.FrameworkName == nil {
			break
		}

		return e.complexity.ProgramHistory.FrameworkName(childComplexity), true

	case "ProgramHistory.historyTime":
		if e.complexity.ProgramHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ProgramHistory.HistoryTime(childComplexity), true

	case "ProgramHistory.id":
		if e.complexity.ProgramHistory.ID == nil {
			break
		}

		return e.complexity.ProgramHistory.ID(childComplexity), true

	case "ProgramHistory.name":
		if e.complexity.ProgramHistory.Name == nil {
			break
		}

		return e.complexity.ProgramHistory.Name(childComplexity), true

	case "ProgramHistory.operation":
		if e.complexity.ProgramHistory.Operation == nil {
			break
		}

		return e.complexity.ProgramHistory.Operation(childComplexity), true

	case "ProgramHistory.ownerID":
		if e.complexity.ProgramHistory.OwnerID == nil {
			break
		}

		return e.complexity.ProgramHistory.OwnerID(childComplexity), true

	case "ProgramHistory.programType":
		if e.complexity.ProgramHistory.ProgramType == nil {
			break
		}

		return e.complexity.ProgramHistory.ProgramType(childComplexity), true

	case "ProgramHistory.ref":
		if e.complexity.ProgramHistory.Ref == nil {
			break
		}

		return e.complexity.ProgramHistory.Ref(childComplexity), true

	case "ProgramHistory.startDate":
		if e.complexity.ProgramHistory.StartDate == nil {
			break
		}

		return e.complexity.ProgramHistory.StartDate(childComplexity), true

	case "ProgramHistory.status":
		if e.complexity.ProgramHistory.Status == nil {
			break
		}

		return e.complexity.ProgramHistory.Status(childComplexity), true

	case "ProgramHistory.tags":
		if e.complexity.ProgramHistory.Tags == nil {
			break
		}

		return e.complexity.ProgramHistory.Tags(childComplexity), true

	case "ProgramHistory.updatedAt":
		if e.complexity.ProgramHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProgramHistory.UpdatedAt(childComplexity), true

	case "ProgramHistory.updatedBy":
		if e.complexity.ProgramHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ProgramHistory.UpdatedBy(childComplexity), true

	case "ProgramHistoryConnection.edges":
		if e.complexity.ProgramHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramHistoryConnection.Edges(childComplexity), true

	case "ProgramHistoryConnection.pageInfo":
		if e.complexity.ProgramHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramHistoryConnection.PageInfo(childComplexity), true

	case "ProgramHistoryConnection.totalCount":
		if e.complexity.ProgramHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramHistoryConnection.TotalCount(childComplexity), true

	case "ProgramHistoryEdge.cursor":
		if e.complexity.ProgramHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramHistoryEdge.Cursor(childComplexity), true

	case "ProgramHistoryEdge.node":
		if e.complexity.ProgramHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ProgramHistoryEdge.Node(childComplexity), true

	case "ProgramMembership.createdAt":
		if e.complexity.ProgramMembership.CreatedAt == nil {
			break
		}

		return e.complexity.ProgramMembership.CreatedAt(childComplexity), true

	case "ProgramMembership.createdBy":
		if e.complexity.ProgramMembership.CreatedBy == nil {
			break
		}

		return e.complexity.ProgramMembership.CreatedBy(childComplexity), true

	case "ProgramMembership.id":
		if e.complexity.ProgramMembership.ID == nil {
			break
		}

		return e.complexity.ProgramMembership.ID(childComplexity), true

	case "ProgramMembership.program":
		if e.complexity.ProgramMembership.Program == nil {
			break
		}

		return e.complexity.ProgramMembership.Program(childComplexity), true

	case "ProgramMembership.programID":
		if e.complexity.ProgramMembership.ProgramID == nil {
			break
		}

		return e.complexity.ProgramMembership.ProgramID(childComplexity), true

	case "ProgramMembership.role":
		if e.complexity.ProgramMembership.Role == nil {
			break
		}

		return e.complexity.ProgramMembership.Role(childComplexity), true

	case "ProgramMembership.updatedAt":
		if e.complexity.ProgramMembership.UpdatedAt == nil {
			break
		}

		return e.complexity.ProgramMembership.UpdatedAt(childComplexity), true

	case "ProgramMembership.updatedBy":
		if e.complexity.ProgramMembership.UpdatedBy == nil {
			break
		}

		return e.complexity.ProgramMembership.UpdatedBy(childComplexity), true

	case "ProgramMembership.user":
		if e.complexity.ProgramMembership.User == nil {
			break
		}

		return e.complexity.ProgramMembership.User(childComplexity), true

	case "ProgramMembership.userID":
		if e.complexity.ProgramMembership.UserID == nil {
			break
		}

		return e.complexity.ProgramMembership.UserID(childComplexity), true

	case "ProgramMembershipBulkCreatePayload.programMemberships":
		if e.complexity.ProgramMembershipBulkCreatePayload.ProgramMemberships == nil {
			break
		}

		return e.complexity.ProgramMembershipBulkCreatePayload.ProgramMemberships(childComplexity), true

	case "ProgramMembershipConnection.edges":
		if e.complexity.ProgramMembershipConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramMembershipConnection.Edges(childComplexity), true

	case "ProgramMembershipConnection.pageInfo":
		if e.complexity.ProgramMembershipConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramMembershipConnection.PageInfo(childComplexity), true

	case "ProgramMembershipConnection.totalCount":
		if e.complexity.ProgramMembershipConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramMembershipConnection.TotalCount(childComplexity), true

	case "ProgramMembershipCreatePayload.programMembership":
		if e.complexity.ProgramMembershipCreatePayload.ProgramMembership == nil {
			break
		}

		return e.complexity.ProgramMembershipCreatePayload.ProgramMembership(childComplexity), true

	case "ProgramMembershipDeletePayload.deletedID":
		if e.complexity.ProgramMembershipDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ProgramMembershipDeletePayload.DeletedID(childComplexity), true

	case "ProgramMembershipEdge.cursor":
		if e.complexity.ProgramMembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramMembershipEdge.Cursor(childComplexity), true

	case "ProgramMembershipEdge.node":
		if e.complexity.ProgramMembershipEdge.Node == nil {
			break
		}

		return e.complexity.ProgramMembershipEdge.Node(childComplexity), true

	case "ProgramMembershipHistory.createdAt":
		if e.complexity.ProgramMembershipHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.CreatedAt(childComplexity), true

	case "ProgramMembershipHistory.createdBy":
		if e.complexity.ProgramMembershipHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.CreatedBy(childComplexity), true

	case "ProgramMembershipHistory.historyTime":
		if e.complexity.ProgramMembershipHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.HistoryTime(childComplexity), true

	case "ProgramMembershipHistory.id":
		if e.complexity.ProgramMembershipHistory.ID == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.ID(childComplexity), true

	case "ProgramMembershipHistory.operation":
		if e.complexity.ProgramMembershipHistory.Operation == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.Operation(childComplexity), true

	case "ProgramMembershipHistory.programID":
		if e.complexity.ProgramMembershipHistory.ProgramID == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.ProgramID(childComplexity), true

	case "ProgramMembershipHistory.ref":
		if e.complexity.ProgramMembershipHistory.Ref == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.Ref(childComplexity), true

	case "ProgramMembershipHistory.role":
		if e.complexity.ProgramMembershipHistory.Role == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.Role(childComplexity), true

	case "ProgramMembershipHistory.updatedAt":
		if e.complexity.ProgramMembershipHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.UpdatedAt(childComplexity), true

	case "ProgramMembershipHistory.updatedBy":
		if e.complexity.ProgramMembershipHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.UpdatedBy(childComplexity), true

	case "ProgramMembershipHistory.userID":
		if e.complexity.ProgramMembershipHistory.UserID == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.UserID(childComplexity), true

	case "ProgramMembershipHistoryConnection.edges":
		if e.complexity.ProgramMembershipHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryConnection.Edges(childComplexity), true

	case "ProgramMembershipHistoryConnection.pageInfo":
		if e.complexity.ProgramMembershipHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryConnection.PageInfo(childComplexity), true

	case "ProgramMembershipHistoryConnection.totalCount":
		if e.complexity.ProgramMembershipHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryConnection.TotalCount(childComplexity), true

	case "ProgramMembershipHistoryEdge.cursor":
		if e.complexity.ProgramMembershipHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryEdge.Cursor(childComplexity), true

	case "ProgramMembershipHistoryEdge.node":
		if e.complexity.ProgramMembershipHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryEdge.Node(childComplexity), true

	case "ProgramMembershipUpdatePayload.programMembership":
		if e.complexity.ProgramMembershipUpdatePayload.ProgramMembership == nil {
			break
		}

		return e.complexity.ProgramMembershipUpdatePayload.ProgramMembership(childComplexity), true

	case "ProgramUpdatePayload.program":
		if e.complexity.ProgramUpdatePayload.Program == nil {
			break
		}

		return e.complexity.ProgramUpdatePayload.Program(childComplexity), true

	case "Query.apiToken":
		if e.complexity.Query.APIToken == nil {
			break
		}

		args, err := ec.field_Query_apiToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APIToken(childComplexity, args["id"].(string)), true

	case "Query.apiTokenSearch":
		if e.complexity.Query.APITokenSearch == nil {
			break
		}

		args, err := ec.field_Query_apiTokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APITokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.apiTokens":
		if e.complexity.Query.APITokens == nil {
			break
		}

		args, err := ec.field_Query_apiTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APITokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.APITokenOrder), args["where"].(*generated.APITokenWhereInput)), true

	case "Query.actionPlan":
		if e.complexity.Query.ActionPlan == nil {
			break
		}

		args, err := ec.field_Query_actionPlan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlan(childComplexity, args["id"].(string)), true

	case "Query.actionPlanHistories":
		if e.complexity.Query.ActionPlanHistories == nil {
			break
		}

		args, err := ec.field_Query_actionPlanHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlanHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ActionPlanHistoryOrder), args["where"].(*generated.ActionPlanHistoryWhereInput)), true

	case "Query.actionPlanSearch":
		if e.complexity.Query.ActionPlanSearch == nil {
			break
		}

		args, err := ec.field_Query_actionPlanSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlanSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.actionPlans":
		if e.complexity.Query.ActionPlans == nil {
			break
		}

		args, err := ec.field_Query_actionPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ActionPlanOrder), args["where"].(*generated.ActionPlanWhereInput)), true

	case "Query.adminAPITokenSearch":
		if e.complexity.Query.AdminAPITokenSearch == nil {
			break
		}

		args, err := ec.field_Query_adminAPITokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminAPITokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminActionPlanSearch":
		if e.complexity.Query.AdminActionPlanSearch == nil {
			break
		}

		args, err := ec.field_Query_adminActionPlanSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminActionPlanSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminAssetSearch":
		if e.complexity.Query.AdminAssetSearch == nil {
			break
		}

		args, err := ec.field_Query_adminAssetSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminAssetSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminContactSearch":
		if e.complexity.Query.AdminContactSearch == nil {
			break
		}

		args, err := ec.field_Query_adminContactSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminContactSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminControlImplementationSearch":
		if e.complexity.Query.AdminControlImplementationSearch == nil {
			break
		}

		args, err := ec.field_Query_adminControlImplementationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminControlImplementationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminControlObjectiveSearch":
		if e.complexity.Query.AdminControlObjectiveSearch == nil {
			break
		}

		args, err := ec.field_Query_adminControlObjectiveSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminControlObjectiveSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminControlSearch":
		if e.complexity.Query.AdminControlSearch == nil {
			break
		}

		args, err := ec.field_Query_adminControlSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminControlSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminCustomDomainSearch":
		if e.complexity.Query.AdminCustomDomainSearch == nil {
			break
		}

		args, err := ec.field_Query_adminCustomDomainSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminCustomDomainSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminDNSVerificationSearch":
		if e.complexity.Query.AdminDNSVerificationSearch == nil {
			break
		}

		args, err := ec.field_Query_adminDNSVerificationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminDNSVerificationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminDocumentDataSearch":
		if e.complexity.Query.AdminDocumentDataSearch == nil {
			break
		}

		args, err := ec.field_Query_adminDocumentDataSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminDocumentDataSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminEntitySearch":
		if e.complexity.Query.AdminEntitySearch == nil {
			break
		}

		args, err := ec.field_Query_adminEntitySearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminEntitySearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminEntityTypeSearch":
		if e.complexity.Query.AdminEntityTypeSearch == nil {
			break
		}

		args, err := ec.field_Query_adminEntityTypeSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminEntityTypeSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminEventSearch":
		if e.complexity.Query.AdminEventSearch == nil {
			break
		}

		args, err := ec.field_Query_adminEventSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminEventSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminEvidenceSearch":
		if e.complexity.Query.AdminEvidenceSearch == nil {
			break
		}

		args, err := ec.field_Query_adminEvidenceSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminEvidenceSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminFileSearch":
		if e.complexity.Query.AdminFileSearch == nil {
			break
		}

		args, err := ec.field_Query_adminFileSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminFileSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminGroupSearch":
		if e.complexity.Query.AdminGroupSearch == nil {
			break
		}

		args, err := ec.field_Query_adminGroupSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminGroupSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminIntegrationSearch":
		if e.complexity.Query.AdminIntegrationSearch == nil {
			break
		}

		args, err := ec.field_Query_adminIntegrationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminIntegrationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminInternalPolicySearch":
		if e.complexity.Query.AdminInternalPolicySearch == nil {
			break
		}

		args, err := ec.field_Query_adminInternalPolicySearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminInternalPolicySearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminInviteSearch":
		if e.complexity.Query.AdminInviteSearch == nil {
			break
		}

		args, err := ec.field_Query_adminInviteSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminInviteSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminJobRunnerRegistrationTokenSearch":
		if e.complexity.Query.AdminJobRunnerRegistrationTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_adminJobRunnerRegistrationTokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminJobRunnerRegistrationTokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminJobRunnerSearch":
		if e.complexity.Query.AdminJobRunnerSearch == nil {
			break
		}

		args, err := ec.field_Query_adminJobRunnerSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminJobRunnerSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminJobRunnerTokenSearch":
		if e.complexity.Query.AdminJobRunnerTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_adminJobRunnerTokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminJobRunnerTokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminJobTemplateSearch":
		if e.complexity.Query.AdminJobTemplateSearch == nil {
			break
		}

		args, err := ec.field_Query_adminJobTemplateSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminJobTemplateSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminMappableDomainSearch":
		if e.complexity.Query.AdminMappableDomainSearch == nil {
			break
		}

		args, err := ec.field_Query_adminMappableDomainSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminMappableDomainSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminMappedControlSearch":
		if e.complexity.Query.AdminMappedControlSearch == nil {
			break
		}

		args, err := ec.field_Query_adminMappedControlSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminMappedControlSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminNarrativeSearch":
		if e.complexity.Query.AdminNarrativeSearch == nil {
			break
		}

		args, err := ec.field_Query_adminNarrativeSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminNarrativeSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminOrgSubscriptionSearch":
		if e.complexity.Query.AdminOrgSubscriptionSearch == nil {
			break
		}

		args, err := ec.field_Query_adminOrgSubscriptionSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminOrgSubscriptionSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminOrganizationSearch":
		if e.complexity.Query.AdminOrganizationSearch == nil {
			break
		}

		args, err := ec.field_Query_adminOrganizationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminOrganizationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminOrganizationSettingSearch":
		if e.complexity.Query.AdminOrganizationSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_adminOrganizationSettingSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminOrganizationSettingSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminPersonalAccessTokenSearch":
		if e.complexity.Query.AdminPersonalAccessTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_adminPersonalAccessTokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminPersonalAccessTokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminProcedureSearch":
		if e.complexity.Query.AdminProcedureSearch == nil {
			break
		}

		args, err := ec.field_Query_adminProcedureSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminProcedureSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminProgramSearch":
		if e.complexity.Query.AdminProgramSearch == nil {
			break
		}

		args, err := ec.field_Query_adminProgramSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminProgramSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminRiskSearch":
		if e.complexity.Query.AdminRiskSearch == nil {
			break
		}

		args, err := ec.field_Query_adminRiskSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminRiskSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminScanSearch":
		if e.complexity.Query.AdminScanSearch == nil {
			break
		}

		args, err := ec.field_Query_adminScanSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminScanSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminSearch":
		if e.complexity.Query.AdminSearch == nil {
			break
		}

		args, err := ec.field_Query_adminSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminStandardSearch":
		if e.complexity.Query.AdminStandardSearch == nil {
			break
		}

		args, err := ec.field_Query_adminStandardSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminStandardSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminSubcontrolSearch":
		if e.complexity.Query.AdminSubcontrolSearch == nil {
			break
		}

		args, err := ec.field_Query_adminSubcontrolSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminSubcontrolSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminSubprocessorSearch":
		if e.complexity.Query.AdminSubprocessorSearch == nil {
			break
		}

		args, err := ec.field_Query_adminSubprocessorSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminSubprocessorSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminSubscriberSearch":
		if e.complexity.Query.AdminSubscriberSearch == nil {
			break
		}

		args, err := ec.field_Query_adminSubscriberSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminSubscriberSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminTaskSearch":
		if e.complexity.Query.AdminTaskSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTaskSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTaskSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminTemplateSearch":
		if e.complexity.Query.AdminTemplateSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTemplateSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTemplateSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminTrustCenterComplianceSearch":
		if e.complexity.Query.AdminTrustCenterComplianceSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTrustCenterComplianceSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTrustCenterComplianceSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminTrustCenterDocSearch":
		if e.complexity.Query.AdminTrustCenterDocSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTrustCenterDocSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTrustCenterDocSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminTrustCenterSearch":
		if e.complexity.Query.AdminTrustCenterSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTrustCenterSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTrustCenterSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminUserSearch":
		if e.complexity.Query.AdminUserSearch == nil {
			break
		}

		args, err := ec.field_Query_adminUserSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminUserSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminUserSettingSearch":
		if e.complexity.Query.AdminUserSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_adminUserSettingSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminUserSettingSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.adminWebauthnSearch":
		if e.complexity.Query.AdminWebauthnSearch == nil {
			break
		}

		args, err := ec.field_Query_adminWebauthnSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminWebauthnSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.asset":
		if e.complexity.Query.Asset == nil {
			break
		}

		args, err := ec.field_Query_asset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Asset(childComplexity, args["id"].(string)), true

	case "Query.assetHistories":
		if e.complexity.Query.AssetHistories == nil {
			break
		}

		args, err := ec.field_Query_assetHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AssetHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.AssetHistoryOrder), args["where"].(*generated.AssetHistoryWhereInput)), true

	case "Query.assetSearch":
		if e.complexity.Query.AssetSearch == nil {
			break
		}

		args, err := ec.field_Query_assetSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AssetSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.assets":
		if e.complexity.Query.Assets == nil {
			break
		}

		args, err := ec.field_Query_assets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Assets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.AssetOrder), args["where"].(*generated.AssetWhereInput)), true

	case "Query.auditLogs":
		if e.complexity.Query.AuditLogs == nil {
			break
		}

		args, err := ec.field_Query_auditLogs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuditLogs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.AuditLogWhereInput), args["orderBy"].(*generated.AuditLogOrder)), true

	case "Query.contact":
		if e.complexity.Query.Contact == nil {
			break
		}

		args, err := ec.field_Query_contact_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contact(childComplexity, args["id"].(string)), true

	case "Query.contactHistories":
		if e.complexity.Query.ContactHistories == nil {
			break
		}

		args, err := ec.field_Query_contactHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ContactHistoryOrder), args["where"].(*generated.ContactHistoryWhereInput)), true

	case "Query.contactSearch":
		if e.complexity.Query.ContactSearch == nil {
			break
		}

		args, err := ec.field_Query_contactSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.contacts":
		if e.complexity.Query.Contacts == nil {
			break
		}

		args, err := ec.field_Query_contacts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contacts(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ContactOrder), args["where"].(*generated.ContactWhereInput)), true

	case "Query.control":
		if e.complexity.Query.Control == nil {
			break
		}

		args, err := ec.field_Query_control_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Control(childComplexity, args["id"].(string)), true

	case "Query.controlCategories":
		if e.complexity.Query.ControlCategories == nil {
			break
		}

		return e.complexity.Query.ControlCategories(childComplexity), true

	case "Query.controlCategoriesByFramework":
		if e.complexity.Query.ControlCategoriesByFramework == nil {
			break
		}

		args, err := ec.field_Query_controlCategoriesByFramework_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlCategoriesByFramework(childComplexity, args["orderBy"].([]*model.ControlCategoryOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Query.controlHistories":
		if e.complexity.Query.ControlHistories == nil {
			break
		}

		args, err := ec.field_Query_controlHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ControlHistoryOrder), args["where"].(*generated.ControlHistoryWhereInput)), true

	case "Query.controlImplementation":
		if e.complexity.Query.ControlImplementation == nil {
			break
		}

		args, err := ec.field_Query_controlImplementation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlImplementation(childComplexity, args["id"].(string)), true

	case "Query.controlImplementationHistories":
		if e.complexity.Query.ControlImplementationHistories == nil {
			break
		}

		args, err := ec.field_Query_controlImplementationHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlImplementationHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ControlImplementationHistoryOrder), args["where"].(*generated.ControlImplementationHistoryWhereInput)), true

	case "Query.controlImplementationSearch":
		if e.complexity.Query.ControlImplementationSearch == nil {
			break
		}

		args, err := ec.field_Query_controlImplementationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlImplementationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.controlImplementations":
		if e.complexity.Query.ControlImplementations == nil {
			break
		}

		args, err := ec.field_Query_controlImplementations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlImplementations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Query.controlObjective":
		if e.complexity.Query.ControlObjective == nil {
			break
		}

		args, err := ec.field_Query_controlObjective_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjective(childComplexity, args["id"].(string)), true

	case "Query.controlObjectiveHistories":
		if e.complexity.Query.ControlObjectiveHistories == nil {
			break
		}

		args, err := ec.field_Query_controlObjectiveHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjectiveHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ControlObjectiveHistoryOrder), args["where"].(*generated.ControlObjectiveHistoryWhereInput)), true

	case "Query.controlObjectiveSearch":
		if e.complexity.Query.ControlObjectiveSearch == nil {
			break
		}

		args, err := ec.field_Query_controlObjectiveSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjectiveSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.controlObjectives":
		if e.complexity.Query.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Query_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Query.controlSearch":
		if e.complexity.Query.ControlSearch == nil {
			break
		}

		args, err := ec.field_Query_controlSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.controlSubcategories":
		if e.complexity.Query.ControlSubcategories == nil {
			break
		}

		return e.complexity.Query.ControlSubcategories(childComplexity), true

	case "Query.controlSubcategoriesByFramework":
		if e.complexity.Query.ControlSubcategoriesByFramework == nil {
			break
		}

		args, err := ec.field_Query_controlSubcategoriesByFramework_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlSubcategoriesByFramework(childComplexity, args["orderBy"].([]*model.ControlCategoryOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Query.controls":
		if e.complexity.Query.Controls == nil {
			break
		}

		args, err := ec.field_Query_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Query.controlsGroupByCategory":
		if e.complexity.Query.ControlsGroupByCategory == nil {
			break
		}

		args, err := ec.field_Query_controlsGroupByCategory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlsGroupByCategory(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput), args["category"].(*string)), true

	case "Query.customDomain":
		if e.complexity.Query.CustomDomain == nil {
			break
		}

		args, err := ec.field_Query_customDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CustomDomain(childComplexity, args["id"].(string)), true

	case "Query.customDomainHistories":
		if e.complexity.Query.CustomDomainHistories == nil {
			break
		}

		args, err := ec.field_Query_customDomainHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CustomDomainHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.CustomDomainHistoryOrder), args["where"].(*generated.CustomDomainHistoryWhereInput)), true

	case "Query.customDomainSearch":
		if e.complexity.Query.CustomDomainSearch == nil {
			break
		}

		args, err := ec.field_Query_customDomainSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CustomDomainSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.customDomains":
		if e.complexity.Query.CustomDomains == nil {
			break
		}

		args, err := ec.field_Query_customDomains_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CustomDomains(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.CustomDomainOrder), args["where"].(*generated.CustomDomainWhereInput)), true

	case "Query.dnsVerification":
		if e.complexity.Query.DNSVerification == nil {
			break
		}

		args, err := ec.field_Query_dnsVerification_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DNSVerification(childComplexity, args["id"].(string)), true

	case "Query.dnsVerificationHistories":
		if e.complexity.Query.DNSVerificationHistories == nil {
			break
		}

		args, err := ec.field_Query_dnsVerificationHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DNSVerificationHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.DNSVerificationHistoryOrder), args["where"].(*generated.DNSVerificationHistoryWhereInput)), true

	case "Query.dnsVerificationSearch":
		if e.complexity.Query.DNSVerificationSearch == nil {
			break
		}

		args, err := ec.field_Query_dnsVerificationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DNSVerificationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.dnsVerifications":
		if e.complexity.Query.DNSVerifications == nil {
			break
		}

		args, err := ec.field_Query_dnsVerifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DNSVerifications(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.DNSVerificationOrder), args["where"].(*generated.DNSVerificationWhereInput)), true

	case "Query.documentData":
		if e.complexity.Query.DocumentData == nil {
			break
		}

		args, err := ec.field_Query_documentData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentData(childComplexity, args["id"].(string)), true

	case "Query.documentDataHistories":
		if e.complexity.Query.DocumentDataHistories == nil {
			break
		}

		args, err := ec.field_Query_documentDataHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentDataHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.DocumentDataHistoryOrder), args["where"].(*generated.DocumentDataHistoryWhereInput)), true

	case "Query.documentDataSearch":
		if e.complexity.Query.DocumentDataSearch == nil {
			break
		}

		args, err := ec.field_Query_documentDataSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentDataSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.documentDataSlice":
		if e.complexity.Query.DocumentDataSlice == nil {
			break
		}

		args, err := ec.field_Query_documentDataSlice_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentDataSlice(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.DocumentDataOrder), args["where"].(*generated.DocumentDataWhereInput)), true

	case "Query.entities":
		if e.complexity.Query.Entities == nil {
			break
		}

		args, err := ec.field_Query_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Query.entity":
		if e.complexity.Query.Entity == nil {
			break
		}

		args, err := ec.field_Query_entity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Entity(childComplexity, args["id"].(string)), true

	case "Query.entityHistories":
		if e.complexity.Query.EntityHistories == nil {
			break
		}

		args, err := ec.field_Query_entityHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.EntityHistoryOrder), args["where"].(*generated.EntityHistoryWhereInput)), true

	case "Query.entitySearch":
		if e.complexity.Query.EntitySearch == nil {
			break
		}

		args, err := ec.field_Query_entitySearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntitySearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.entityType":
		if e.complexity.Query.EntityType == nil {
			break
		}

		args, err := ec.field_Query_entityType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityType(childComplexity, args["id"].(string)), true

	case "Query.entityTypeHistories":
		if e.complexity.Query.EntityTypeHistories == nil {
			break
		}

		args, err := ec.field_Query_entityTypeHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityTypeHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.EntityTypeHistoryOrder), args["where"].(*generated.EntityTypeHistoryWhereInput)), true

	case "Query.entityTypeSearch":
		if e.complexity.Query.EntityTypeSearch == nil {
			break
		}

		args, err := ec.field_Query_entityTypeSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityTypeSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.entityTypes":
		if e.complexity.Query.EntityTypes == nil {
			break
		}

		args, err := ec.field_Query_entityTypes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityTypes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityTypeOrder), args["where"].(*generated.EntityTypeWhereInput)), true

	case "Query.event":
		if e.complexity.Query.Event == nil {
			break
		}

		args, err := ec.field_Query_event_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Event(childComplexity, args["id"].(string)), true

	case "Query.eventSearch":
		if e.complexity.Query.EventSearch == nil {
			break
		}

		args, err := ec.field_Query_eventSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EventSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.events":
		if e.complexity.Query.Events == nil {
			break
		}

		args, err := ec.field_Query_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Query.evidence":
		if e.complexity.Query.Evidence == nil {
			break
		}

		args, err := ec.field_Query_evidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Evidence(childComplexity, args["id"].(string)), true

	case "Query.evidenceHistories":
		if e.complexity.Query.EvidenceHistories == nil {
			break
		}

		args, err := ec.field_Query_evidenceHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EvidenceHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.EvidenceHistoryOrder), args["where"].(*generated.EvidenceHistoryWhereInput)), true

	case "Query.evidenceSearch":
		if e.complexity.Query.EvidenceSearch == nil {
			break
		}

		args, err := ec.field_Query_evidenceSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EvidenceSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.evidences":
		if e.complexity.Query.Evidences == nil {
			break
		}

		args, err := ec.field_Query_evidences_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Evidences(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EvidenceOrder), args["where"].(*generated.EvidenceWhereInput)), true

	case "Query.export":
		if e.complexity.Query.Export == nil {
			break
		}

		args, err := ec.field_Query_export_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Export(childComplexity, args["id"].(string)), true

	case "Query.exports":
		if e.complexity.Query.Exports == nil {
			break
		}

		args, err := ec.field_Query_exports_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Exports(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ExportOrder), args["where"].(*generated.ExportWhereInput)), true

	case "Query.file":
		if e.complexity.Query.File == nil {
			break
		}

		args, err := ec.field_Query_file_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.File(childComplexity, args["id"].(string)), true

	case "Query.fileHistories":
		if e.complexity.Query.FileHistories == nil {
			break
		}

		args, err := ec.field_Query_fileHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.FileHistoryOrder), args["where"].(*generated.FileHistoryWhereInput)), true

	case "Query.fileSearch":
		if e.complexity.Query.FileSearch == nil {
			break
		}

		args, err := ec.field_Query_fileSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.files":
		if e.complexity.Query.Files == nil {
			break
		}

		args, err := ec.field_Query_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Query.group":
		if e.complexity.Query.Group == nil {
			break
		}

		args, err := ec.field_Query_group_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Group(childComplexity, args["id"].(string)), true

	case "Query.groupHistories":
		if e.complexity.Query.GroupHistories == nil {
			break
		}

		args, err := ec.field_Query_groupHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.GroupHistoryOrder), args["where"].(*generated.GroupHistoryWhereInput)), true

	case "Query.groupMembership":
		if e.complexity.Query.GroupMembership == nil {
			break
		}

		args, err := ec.field_Query_groupMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupMembership(childComplexity, args["id"].(string)), true

	case "Query.groupMembershipHistories":
		if e.complexity.Query.GroupMembershipHistories == nil {
			break
		}

		args, err := ec.field_Query_groupMembershipHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupMembershipHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.GroupMembershipHistoryOrder), args["where"].(*generated.GroupMembershipHistoryWhereInput)), true

	case "Query.groupMemberships":
		if e.complexity.Query.GroupMemberships == nil {
			break
		}

		args, err := ec.field_Query_groupMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupMembershipOrder), args["where"].(*generated.GroupMembershipWhereInput)), true

	case "Query.groupSearch":
		if e.complexity.Query.GroupSearch == nil {
			break
		}

		args, err := ec.field_Query_groupSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.groupSetting":
		if e.complexity.Query.GroupSetting == nil {
			break
		}

		args, err := ec.field_Query_groupSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSetting(childComplexity, args["id"].(string)), true

	case "Query.groupSettingHistories":
		if e.complexity.Query.GroupSettingHistories == nil {
			break
		}

		args, err := ec.field_Query_groupSettingHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSettingHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.GroupSettingHistoryOrder), args["where"].(*generated.GroupSettingHistoryWhereInput)), true

	case "Query.groupSettings":
		if e.complexity.Query.GroupSettings == nil {
			break
		}

		args, err := ec.field_Query_groupSettings_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupSettingOrder), args["where"].(*generated.GroupSettingWhereInput)), true

	case "Query.groups":
		if e.complexity.Query.Groups == nil {
			break
		}

		args, err := ec.field_Query_groups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Query.hush":
		if e.complexity.Query.Hush == nil {
			break
		}

		args, err := ec.field_Query_hush_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Hush(childComplexity, args["id"].(string)), true

	case "Query.hushHistories":
		if e.complexity.Query.HushHistories == nil {
			break
		}

		args, err := ec.field_Query_hushHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HushHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.HushHistoryOrder), args["where"].(*generated.HushHistoryWhereInput)), true

	case "Query.hushes":
		if e.complexity.Query.Hushes == nil {
			break
		}

		args, err := ec.field_Query_hushes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Hushes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.HushOrder), args["where"].(*generated.HushWhereInput)), true

	case "Query.integration":
		if e.complexity.Query.Integration == nil {
			break
		}

		args, err := ec.field_Query_integration_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Integration(childComplexity, args["id"].(string)), true

	case "Query.integrationHistories":
		if e.complexity.Query.IntegrationHistories == nil {
			break
		}

		args, err := ec.field_Query_integrationHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IntegrationHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.IntegrationHistoryOrder), args["where"].(*generated.IntegrationHistoryWhereInput)), true

	case "Query.integrationSearch":
		if e.complexity.Query.IntegrationSearch == nil {
			break
		}

		args, err := ec.field_Query_integrationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IntegrationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.integrations":
		if e.complexity.Query.Integrations == nil {
			break
		}

		args, err := ec.field_Query_integrations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Integrations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.IntegrationOrder), args["where"].(*generated.IntegrationWhereInput)), true

	case "Query.internalPolicies":
		if e.complexity.Query.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Query_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Query.internalPolicy":
		if e.complexity.Query.InternalPolicy == nil {
			break
		}

		args, err := ec.field_Query_internalPolicy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicy(childComplexity, args["id"].(string)), true

	case "Query.internalPolicyHistories":
		if e.complexity.Query.InternalPolicyHistories == nil {
			break
		}

		args, err := ec.field_Query_internalPolicyHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicyHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.InternalPolicyHistoryOrder), args["where"].(*generated.InternalPolicyHistoryWhereInput)), true

	case "Query.internalPolicySearch":
		if e.complexity.Query.InternalPolicySearch == nil {
			break
		}

		args, err := ec.field_Query_internalPolicySearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicySearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.invite":
		if e.complexity.Query.Invite == nil {
			break
		}

		args, err := ec.field_Query_invite_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invite(childComplexity, args["id"].(string)), true

	case "Query.inviteSearch":
		if e.complexity.Query.InviteSearch == nil {
			break
		}

		args, err := ec.field_Query_inviteSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InviteSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.invites":
		if e.complexity.Query.Invites == nil {
			break
		}

		args, err := ec.field_Query_invites_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invites(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InviteOrder), args["where"].(*generated.InviteWhereInput)), true

	case "Query.jobResult":
		if e.complexity.Query.JobResult == nil {
			break
		}

		args, err := ec.field_Query_jobResult_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobResult(childComplexity, args["id"].(string)), true

	case "Query.jobResults":
		if e.complexity.Query.JobResults == nil {
			break
		}

		args, err := ec.field_Query_jobResults_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobResults(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobResultOrder), args["where"].(*generated.JobResultWhereInput)), true

	case "Query.jobRunner":
		if e.complexity.Query.JobRunner == nil {
			break
		}

		args, err := ec.field_Query_jobRunner_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunner(childComplexity, args["id"].(string)), true

	case "Query.jobRunnerRegistrationToken":
		if e.complexity.Query.JobRunnerRegistrationToken == nil {
			break
		}

		args, err := ec.field_Query_jobRunnerRegistrationToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunnerRegistrationToken(childComplexity, args["id"].(string)), true

	case "Query.jobRunnerRegistrationTokenSearch":
		if e.complexity.Query.JobRunnerRegistrationTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_jobRunnerRegistrationTokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunnerRegistrationTokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.jobRunnerRegistrationTokens":
		if e.complexity.Query.JobRunnerRegistrationTokens == nil {
			break
		}

		args, err := ec.field_Query_jobRunnerRegistrationTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunnerRegistrationTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerRegistrationTokenOrder), args["where"].(*generated.JobRunnerRegistrationTokenWhereInput)), true

	case "Query.jobRunnerSearch":
		if e.complexity.Query.JobRunnerSearch == nil {
			break
		}

		args, err := ec.field_Query_jobRunnerSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunnerSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.jobRunnerToken":
		if e.complexity.Query.JobRunnerToken == nil {
			break
		}

		args, err := ec.field_Query_jobRunnerToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunnerToken(childComplexity, args["id"].(string)), true

	case "Query.jobRunnerTokenSearch":
		if e.complexity.Query.JobRunnerTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_jobRunnerTokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunnerTokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.jobRunnerTokens":
		if e.complexity.Query.JobRunnerTokens == nil {
			break
		}

		args, err := ec.field_Query_jobRunnerTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunnerTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerTokenOrder), args["where"].(*generated.JobRunnerTokenWhereInput)), true

	case "Query.jobRunners":
		if e.complexity.Query.JobRunners == nil {
			break
		}

		args, err := ec.field_Query_jobRunners_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobRunners(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobRunnerOrder), args["where"].(*generated.JobRunnerWhereInput)), true

	case "Query.jobTemplate":
		if e.complexity.Query.JobTemplate == nil {
			break
		}

		args, err := ec.field_Query_jobTemplate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobTemplate(childComplexity, args["id"].(string)), true

	case "Query.jobTemplateHistories":
		if e.complexity.Query.JobTemplateHistories == nil {
			break
		}

		args, err := ec.field_Query_jobTemplateHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobTemplateHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.JobTemplateHistoryOrder), args["where"].(*generated.JobTemplateHistoryWhereInput)), true

	case "Query.jobTemplateSearch":
		if e.complexity.Query.JobTemplateSearch == nil {
			break
		}

		args, err := ec.field_Query_jobTemplateSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobTemplateSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.jobTemplates":
		if e.complexity.Query.JobTemplates == nil {
			break
		}

		args, err := ec.field_Query_jobTemplates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JobTemplates(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.JobTemplateOrder), args["where"].(*generated.JobTemplateWhereInput)), true

	case "Query.mappableDomain":
		if e.complexity.Query.MappableDomain == nil {
			break
		}

		args, err := ec.field_Query_mappableDomain_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappableDomain(childComplexity, args["id"].(string)), true

	case "Query.mappableDomainHistories":
		if e.complexity.Query.MappableDomainHistories == nil {
			break
		}

		args, err := ec.field_Query_mappableDomainHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappableDomainHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.MappableDomainHistoryOrder), args["where"].(*generated.MappableDomainHistoryWhereInput)), true

	case "Query.mappableDomainSearch":
		if e.complexity.Query.MappableDomainSearch == nil {
			break
		}

		args, err := ec.field_Query_mappableDomainSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappableDomainSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.mappableDomains":
		if e.complexity.Query.MappableDomains == nil {
			break
		}

		args, err := ec.field_Query_mappableDomains_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappableDomains(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.MappableDomainOrder), args["where"].(*generated.MappableDomainWhereInput)), true

	case "Query.mappedControl":
		if e.complexity.Query.MappedControl == nil {
			break
		}

		args, err := ec.field_Query_mappedControl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappedControl(childComplexity, args["id"].(string)), true

	case "Query.mappedControlHistories":
		if e.complexity.Query.MappedControlHistories == nil {
			break
		}

		args, err := ec.field_Query_mappedControlHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappedControlHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.MappedControlHistoryOrder), args["where"].(*generated.MappedControlHistoryWhereInput)), true

	case "Query.mappedControlSearch":
		if e.complexity.Query.MappedControlSearch == nil {
			break
		}

		args, err := ec.field_Query_mappedControlSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappedControlSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.mappedControls":
		if e.complexity.Query.MappedControls == nil {
			break
		}

		args, err := ec.field_Query_mappedControls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MappedControls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.MappedControlOrder), args["where"].(*generated.MappedControlWhereInput)), true

	case "Query.narrative":
		if e.complexity.Query.Narrative == nil {
			break
		}

		args, err := ec.field_Query_narrative_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Narrative(childComplexity, args["id"].(string)), true

	case "Query.narrativeHistories":
		if e.complexity.Query.NarrativeHistories == nil {
			break
		}

		args, err := ec.field_Query_narrativeHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NarrativeHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.NarrativeHistoryOrder), args["where"].(*generated.NarrativeHistoryWhereInput)), true

	case "Query.narrativeSearch":
		if e.complexity.Query.NarrativeSearch == nil {
			break
		}

		args, err := ec.field_Query_narrativeSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NarrativeSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.narratives":
		if e.complexity.Query.Narratives == nil {
			break
		}

		args, err := ec.field_Query_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Query.note":
		if e.complexity.Query.Note == nil {
			break
		}

		args, err := ec.field_Query_note_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Note(childComplexity, args["id"].(string)), true

	case "Query.noteHistories":
		if e.complexity.Query.NoteHistories == nil {
			break
		}

		args, err := ec.field_Query_noteHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NoteHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.NoteHistoryOrder), args["where"].(*generated.NoteHistoryWhereInput)), true

	case "Query.notes":
		if e.complexity.Query.Notes == nil {
			break
		}

		args, err := ec.field_Query_notes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NoteOrder), args["where"].(*generated.NoteWhereInput)), true

	case "Query.orgMembership":
		if e.complexity.Query.OrgMembership == nil {
			break
		}

		args, err := ec.field_Query_orgMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgMembership(childComplexity, args["id"].(string)), true

	case "Query.orgMembershipHistories":
		if e.complexity.Query.OrgMembershipHistories == nil {
			break
		}

		args, err := ec.field_Query_orgMembershipHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgMembershipHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrgMembershipHistoryOrder), args["where"].(*generated.OrgMembershipHistoryWhereInput)), true

	case "Query.orgMemberships":
		if e.complexity.Query.OrgMemberships == nil {
			break
		}

		args, err := ec.field_Query_orgMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrgMembershipOrder), args["where"].(*generated.OrgMembershipWhereInput)), true

	case "Query.orgSubscription":
		if e.complexity.Query.OrgSubscription == nil {
			break
		}

		args, err := ec.field_Query_orgSubscription_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscription(childComplexity, args["id"].(string)), true

	case "Query.orgSubscriptionHistories":
		if e.complexity.Query.OrgSubscriptionHistories == nil {
			break
		}

		args, err := ec.field_Query_orgSubscriptionHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscriptionHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrgSubscriptionHistoryOrder), args["where"].(*generated.OrgSubscriptionHistoryWhereInput)), true

	case "Query.orgSubscriptionSearch":
		if e.complexity.Query.OrgSubscriptionSearch == nil {
			break
		}

		args, err := ec.field_Query_orgSubscriptionSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscriptionSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.orgSubscriptions":
		if e.complexity.Query.OrgSubscriptions == nil {
			break
		}

		args, err := ec.field_Query_orgSubscriptions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscriptions(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrgSubscriptionOrder), args["where"].(*generated.OrgSubscriptionWhereInput)), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["id"].(string)), true

	case "Query.organizationHistories":
		if e.complexity.Query.OrganizationHistories == nil {
			break
		}

		args, err := ec.field_Query_organizationHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrganizationHistoryOrder), args["where"].(*generated.OrganizationHistoryWhereInput)), true

	case "Query.organizationSearch":
		if e.complexity.Query.OrganizationSearch == nil {
			break
		}

		args, err := ec.field_Query_organizationSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.organizationSetting":
		if e.complexity.Query.OrganizationSetting == nil {
			break
		}

		args, err := ec.field_Query_organizationSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSetting(childComplexity, args["id"].(string)), true

	case "Query.organizationSettingHistories":
		if e.complexity.Query.OrganizationSettingHistories == nil {
			break
		}

		args, err := ec.field_Query_organizationSettingHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSettingHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrganizationSettingHistoryOrder), args["where"].(*generated.OrganizationSettingHistoryWhereInput)), true

	case "Query.organizationSettingSearch":
		if e.complexity.Query.OrganizationSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_organizationSettingSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSettingSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.organizationSettings":
		if e.complexity.Query.OrganizationSettings == nil {
			break
		}

		args, err := ec.field_Query_organizationSettings_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrganizationSettingOrder), args["where"].(*generated.OrganizationSettingWhereInput)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		args, err := ec.field_Query_organizations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organizations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrganizationOrder), args["where"].(*generated.OrganizationWhereInput)), true

	case "Query.personalAccessToken":
		if e.complexity.Query.PersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Query_personalAccessToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonalAccessToken(childComplexity, args["id"].(string)), true

	case "Query.personalAccessTokenSearch":
		if e.complexity.Query.PersonalAccessTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_personalAccessTokenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonalAccessTokenSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.personalAccessTokens":
		if e.complexity.Query.PersonalAccessTokens == nil {
			break
		}

		args, err := ec.field_Query_personalAccessTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonalAccessTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.PersonalAccessTokenOrder), args["where"].(*generated.PersonalAccessTokenWhereInput)), true

	case "Query.procedure":
		if e.complexity.Query.Procedure == nil {
			break
		}

		args, err := ec.field_Query_procedure_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Procedure(childComplexity, args["id"].(string)), true

	case "Query.procedureHistories":
		if e.complexity.Query.ProcedureHistories == nil {
			break
		}

		args, err := ec.field_Query_procedureHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProcedureHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ProcedureHistoryOrder), args["where"].(*generated.ProcedureHistoryWhereInput)), true

	case "Query.procedureSearch":
		if e.complexity.Query.ProcedureSearch == nil {
			break
		}

		args, err := ec.field_Query_procedureSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProcedureSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.procedures":
		if e.complexity.Query.Procedures == nil {
			break
		}

		args, err := ec.field_Query_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Query.program":
		if e.complexity.Query.Program == nil {
			break
		}

		args, err := ec.field_Query_program_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Program(childComplexity, args["id"].(string)), true

	case "Query.programHistories":
		if e.complexity.Query.ProgramHistories == nil {
			break
		}

		args, err := ec.field_Query_programHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ProgramHistoryOrder), args["where"].(*generated.ProgramHistoryWhereInput)), true

	case "Query.programMembership":
		if e.complexity.Query.ProgramMembership == nil {
			break
		}

		args, err := ec.field_Query_programMembership_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramMembership(childComplexity, args["id"].(string)), true

	case "Query.programMembershipHistories":
		if e.complexity.Query.ProgramMembershipHistories == nil {
			break
		}

		args, err := ec.field_Query_programMembershipHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramMembershipHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ProgramMembershipHistoryOrder), args["where"].(*generated.ProgramMembershipHistoryWhereInput)), true

	case "Query.programMemberships":
		if e.complexity.Query.ProgramMemberships == nil {
			break
		}

		args, err := ec.field_Query_programMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramMembershipOrder), args["where"].(*generated.ProgramMembershipWhereInput)), true

	case "Query.programSearch":
		if e.complexity.Query.ProgramSearch == nil {
			break
		}

		args, err := ec.field_Query_programSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.programs":
		if e.complexity.Query.Programs == nil {
			break
		}

		args, err := ec.field_Query_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Query.risk":
		if e.complexity.Query.Risk == nil {
			break
		}

		args, err := ec.field_Query_risk_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Risk(childComplexity, args["id"].(string)), true

	case "Query.riskHistories":
		if e.complexity.Query.RiskHistories == nil {
			break
		}

		args, err := ec.field_Query_riskHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RiskHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.RiskHistoryOrder), args["where"].(*generated.RiskHistoryWhereInput)), true

	case "Query.riskSearch":
		if e.complexity.Query.RiskSearch == nil {
			break
		}

		args, err := ec.field_Query_riskSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RiskSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.risks":
		if e.complexity.Query.Risks == nil {
			break
		}

		args, err := ec.field_Query_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Query.scan":
		if e.complexity.Query.Scan == nil {
			break
		}

		args, err := ec.field_Query_scan_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Scan(childComplexity, args["id"].(string)), true

	case "Query.scanHistories":
		if e.complexity.Query.ScanHistories == nil {
			break
		}

		args, err := ec.field_Query_scanHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScanHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ScanHistoryOrder), args["where"].(*generated.ScanHistoryWhereInput)), true

	case "Query.scanSearch":
		if e.complexity.Query.ScanSearch == nil {
			break
		}

		args, err := ec.field_Query_scanSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScanSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.scans":
		if e.complexity.Query.Scans == nil {
			break
		}

		args, err := ec.field_Query_scans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Scans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Query.scheduledJob":
		if e.complexity.Query.ScheduledJob == nil {
			break
		}

		args, err := ec.field_Query_scheduledJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScheduledJob(childComplexity, args["id"].(string)), true

	case "Query.scheduledJobHistories":
		if e.complexity.Query.ScheduledJobHistories == nil {
			break
		}

		args, err := ec.field_Query_scheduledJobHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScheduledJobHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.ScheduledJobHistoryOrder), args["where"].(*generated.ScheduledJobHistoryWhereInput)), true

	case "Query.scheduledJobRun":
		if e.complexity.Query.ScheduledJobRun == nil {
			break
		}

		args, err := ec.field_Query_scheduledJobRun_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScheduledJobRun(childComplexity, args["id"].(string)), true

	case "Query.scheduledJobRuns":
		if e.complexity.Query.ScheduledJobRuns == nil {
			break
		}

		args, err := ec.field_Query_scheduledJobRuns_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScheduledJobRuns(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScheduledJobRunOrder), args["where"].(*generated.ScheduledJobRunWhereInput)), true

	case "Query.scheduledJobs":
		if e.complexity.Query.ScheduledJobs == nil {
			break
		}

		args, err := ec.field_Query_scheduledJobs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScheduledJobs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScheduledJobOrder), args["where"].(*generated.ScheduledJobWhereInput)), true

	case "Query.search":
		if e.complexity.Query.Search == nil {
			break
		}

		args, err := ec.field_Query_search_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Search(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.self":
		if e.complexity.Query.Self == nil {
			break
		}

		return e.complexity.Query.Self(childComplexity), true

	case "Query.standard":
		if e.complexity.Query.Standard == nil {
			break
		}

		args, err := ec.field_Query_standard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Standard(childComplexity, args["id"].(string)), true

	case "Query.standardHistories":
		if e.complexity.Query.StandardHistories == nil {
			break
		}

		args, err := ec.field_Query_standardHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StandardHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.StandardHistoryOrder), args["where"].(*generated.StandardHistoryWhereInput)), true

	case "Query.standardSearch":
		if e.complexity.Query.StandardSearch == nil {
			break
		}

		args, err := ec.field_Query_standardSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StandardSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.standards":
		if e.complexity.Query.Standards == nil {
			break
		}

		args, err := ec.field_Query_standards_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Standards(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.StandardOrder), args["where"].(*generated.StandardWhereInput)), true

	case "Query.subcontrol":
		if e.complexity.Query.Subcontrol == nil {
			break
		}

		args, err := ec.field_Query_subcontrol_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subcontrol(childComplexity, args["id"].(string)), true

	case "Query.subcontrolHistories":
		if e.complexity.Query.SubcontrolHistories == nil {
			break
		}

		args, err := ec.field_Query_subcontrolHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubcontrolHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.SubcontrolHistoryOrder), args["where"].(*generated.SubcontrolHistoryWhereInput)), true

	case "Query.subcontrolSearch":
		if e.complexity.Query.SubcontrolSearch == nil {
			break
		}

		args, err := ec.field_Query_subcontrolSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubcontrolSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.subcontrols":
		if e.complexity.Query.Subcontrols == nil {
			break
		}

		args, err := ec.field_Query_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Query.subprocessor":
		if e.complexity.Query.Subprocessor == nil {
			break
		}

		args, err := ec.field_Query_subprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subprocessor(childComplexity, args["id"].(string)), true

	case "Query.subprocessorHistories":
		if e.complexity.Query.SubprocessorHistories == nil {
			break
		}

		args, err := ec.field_Query_subprocessorHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubprocessorHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.SubprocessorHistoryOrder), args["where"].(*generated.SubprocessorHistoryWhereInput)), true

	case "Query.subprocessorSearch":
		if e.complexity.Query.SubprocessorSearch == nil {
			break
		}

		args, err := ec.field_Query_subprocessorSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubprocessorSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.subprocessors":
		if e.complexity.Query.Subprocessors == nil {
			break
		}

		args, err := ec.field_Query_subprocessors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subprocessors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubprocessorOrder), args["where"].(*generated.SubprocessorWhereInput)), true

	case "Query.subscriber":
		if e.complexity.Query.Subscriber == nil {
			break
		}

		args, err := ec.field_Query_subscriber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subscriber(childComplexity, args["email"].(string)), true

	case "Query.subscriberSearch":
		if e.complexity.Query.SubscriberSearch == nil {
			break
		}

		args, err := ec.field_Query_subscriberSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubscriberSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.subscribers":
		if e.complexity.Query.Subscribers == nil {
			break
		}

		args, err := ec.field_Query_subscribers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subscribers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubscriberOrder), args["where"].(*generated.SubscriberWhereInput)), true

	case "Query.task":
		if e.complexity.Query.Task == nil {
			break
		}

		args, err := ec.field_Query_task_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Task(childComplexity, args["id"].(string)), true

	case "Query.taskHistories":
		if e.complexity.Query.TaskHistories == nil {
			break
		}

		args, err := ec.field_Query_taskHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TaskHistoryOrder), args["where"].(*generated.TaskHistoryWhereInput)), true

	case "Query.taskSearch":
		if e.complexity.Query.TaskSearch == nil {
			break
		}

		args, err := ec.field_Query_taskSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.tasks":
		if e.complexity.Query.Tasks == nil {
			break
		}

		args, err := ec.field_Query_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Query.template":
		if e.complexity.Query.Template == nil {
			break
		}

		args, err := ec.field_Query_template_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Template(childComplexity, args["id"].(string)), true

	case "Query.templateHistories":
		if e.complexity.Query.TemplateHistories == nil {
			break
		}

		args, err := ec.field_Query_templateHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TemplateHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TemplateHistoryOrder), args["where"].(*generated.TemplateHistoryWhereInput)), true

	case "Query.templateSearch":
		if e.complexity.Query.TemplateSearch == nil {
			break
		}

		args, err := ec.field_Query_templateSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TemplateSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.templates":
		if e.complexity.Query.Templates == nil {
			break
		}

		args, err := ec.field_Query_templates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Templates(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TemplateOrder), args["where"].(*generated.TemplateWhereInput)), true

	case "Query.tfaSetting":
		if e.complexity.Query.TfaSetting == nil {
			break
		}

		args, err := ec.field_Query_tfaSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TfaSetting(childComplexity, args["id"].(*string)), true

	case "Query.tfaSettings":
		if e.complexity.Query.TfaSettings == nil {
			break
		}

		args, err := ec.field_Query_tfaSettings_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TfaSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TFASettingOrder), args["where"].(*generated.TFASettingWhereInput)), true

	case "Query.trustCenter":
		if e.complexity.Query.TrustCenter == nil {
			break
		}

		args, err := ec.field_Query_trustCenter_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenter(childComplexity, args["id"].(string)), true

	case "Query.trustCenterCompliance":
		if e.complexity.Query.TrustCenterCompliance == nil {
			break
		}

		args, err := ec.field_Query_trustCenterCompliance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterCompliance(childComplexity, args["id"].(string)), true

	case "Query.trustCenterComplianceHistories":
		if e.complexity.Query.TrustCenterComplianceHistories == nil {
			break
		}

		args, err := ec.field_Query_trustCenterComplianceHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterComplianceHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TrustCenterComplianceHistoryOrder), args["where"].(*generated.TrustCenterComplianceHistoryWhereInput)), true

	case "Query.trustCenterComplianceSearch":
		if e.complexity.Query.TrustCenterComplianceSearch == nil {
			break
		}

		args, err := ec.field_Query_trustCenterComplianceSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterComplianceSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.trustCenterCompliances":
		if e.complexity.Query.TrustCenterCompliances == nil {
			break
		}

		args, err := ec.field_Query_trustCenterCompliances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterCompliances(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterComplianceOrder), args["where"].(*generated.TrustCenterComplianceWhereInput)), true

	case "Query.trustCenterDoc":
		if e.complexity.Query.TrustCenterDoc == nil {
			break
		}

		args, err := ec.field_Query_trustCenterDoc_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterDoc(childComplexity, args["id"].(string)), true

	case "Query.trustCenterDocHistories":
		if e.complexity.Query.TrustCenterDocHistories == nil {
			break
		}

		args, err := ec.field_Query_trustCenterDocHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterDocHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TrustCenterDocHistoryOrder), args["where"].(*generated.TrustCenterDocHistoryWhereInput)), true

	case "Query.trustCenterDocSearch":
		if e.complexity.Query.TrustCenterDocSearch == nil {
			break
		}

		args, err := ec.field_Query_trustCenterDocSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterDocSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.trustCenterDocs":
		if e.complexity.Query.TrustCenterDocs == nil {
			break
		}

		args, err := ec.field_Query_trustCenterDocs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterDocs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterDocOrder), args["where"].(*generated.TrustCenterDocWhereInput)), true

	case "Query.trustCenterHistories":
		if e.complexity.Query.TrustCenterHistories == nil {
			break
		}

		args, err := ec.field_Query_trustCenterHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TrustCenterHistoryOrder), args["where"].(*generated.TrustCenterHistoryWhereInput)), true

	case "Query.trustCenterSearch":
		if e.complexity.Query.TrustCenterSearch == nil {
			break
		}

		args, err := ec.field_Query_trustCenterSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.trustCenterSetting":
		if e.complexity.Query.TrustCenterSetting == nil {
			break
		}

		args, err := ec.field_Query_trustCenterSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterSetting(childComplexity, args["id"].(string)), true

	case "Query.trustCenterSettingHistories":
		if e.complexity.Query.TrustCenterSettingHistories == nil {
			break
		}

		args, err := ec.field_Query_trustCenterSettingHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterSettingHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TrustCenterSettingHistoryOrder), args["where"].(*generated.TrustCenterSettingHistoryWhereInput)), true

	case "Query.trustCenterSettings":
		if e.complexity.Query.TrustCenterSettings == nil {
			break
		}

		args, err := ec.field_Query_trustCenterSettings_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterSettingOrder), args["where"].(*generated.TrustCenterSettingWhereInput)), true

	case "Query.trustCenterSubprocessor":
		if e.complexity.Query.TrustCenterSubprocessor == nil {
			break
		}

		args, err := ec.field_Query_trustCenterSubprocessor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterSubprocessor(childComplexity, args["id"].(string)), true

	case "Query.trustCenterSubprocessorHistories":
		if e.complexity.Query.TrustCenterSubprocessorHistories == nil {
			break
		}

		args, err := ec.field_Query_trustCenterSubprocessorHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterSubprocessorHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TrustCenterSubprocessorHistoryOrder), args["where"].(*generated.TrustCenterSubprocessorHistoryWhereInput)), true

	case "Query.trustCenterSubprocessors":
		if e.complexity.Query.TrustCenterSubprocessors == nil {
			break
		}

		args, err := ec.field_Query_trustCenterSubprocessors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenterSubprocessors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterSubprocessorOrder), args["where"].(*generated.TrustCenterSubprocessorWhereInput)), true

	case "Query.trustCenters":
		if e.complexity.Query.TrustCenters == nil {
			break
		}

		args, err := ec.field_Query_trustCenters_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrustCenters(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterOrder), args["where"].(*generated.TrustCenterWhereInput)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.userHistories":
		if e.complexity.Query.UserHistories == nil {
			break
		}

		args, err := ec.field_Query_userHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.UserHistoryOrder), args["where"].(*generated.UserHistoryWhereInput)), true

	case "Query.userSearch":
		if e.complexity.Query.UserSearch == nil {
			break
		}

		args, err := ec.field_Query_userSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.userSetting":
		if e.complexity.Query.UserSetting == nil {
			break
		}

		args, err := ec.field_Query_userSetting_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSetting(childComplexity, args["id"].(string)), true

	case "Query.userSettingHistories":
		if e.complexity.Query.UserSettingHistories == nil {
			break
		}

		args, err := ec.field_Query_userSettingHistories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSettingHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.UserSettingHistoryOrder), args["where"].(*generated.UserSettingHistoryWhereInput)), true

	case "Query.userSettingSearch":
		if e.complexity.Query.UserSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_userSettingSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSettingSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.userSettings":
		if e.complexity.Query.UserSettings == nil {
			break
		}

		args, err := ec.field_Query_userSettings_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.UserSettingOrder), args["where"].(*generated.UserSettingWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.UserOrder), args["where"].(*generated.UserWhereInput)), true

	case "Query.webauthnSearch":
		if e.complexity.Query.WebauthnSearch == nil {
			break
		}

		args, err := ec.field_Query_webauthnSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WebauthnSearch(childComplexity, args["query"].(string), args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int)), true

	case "Query.webauthns":
		if e.complexity.Query.Webauthns == nil {
			break
		}

		args, err := ec.field_Query_webauthns_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Webauthns(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.WebauthnOrder), args["where"].(*generated.WebauthnWhereInput)), true

	case "Risk.actionPlans":
		if e.complexity.Risk.ActionPlans == nil {
			break
		}

		args, err := ec.field_Risk_actionPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ActionPlanOrder), args["where"].(*generated.ActionPlanWhereInput)), true

	case "Risk.assets":
		if e.complexity.Risk.Assets == nil {
			break
		}

		args, err := ec.field_Risk_assets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Assets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.AssetOrder), args["where"].(*generated.AssetWhereInput)), true

	case "Risk.blockedGroups":
		if e.complexity.Risk.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Risk_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Risk.businessCosts":
		if e.complexity.Risk.BusinessCosts == nil {
			break
		}

		return e.complexity.Risk.BusinessCosts(childComplexity), true

	case "Risk.category":
		if e.complexity.Risk.Category == nil {
			break
		}

		return e.complexity.Risk.Category(childComplexity), true

	case "Risk.controls":
		if e.complexity.Risk.Controls == nil {
			break
		}

		args, err := ec.field_Risk_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Risk.createdAt":
		if e.complexity.Risk.CreatedAt == nil {
			break
		}

		return e.complexity.Risk.CreatedAt(childComplexity), true

	case "Risk.createdBy":
		if e.complexity.Risk.CreatedBy == nil {
			break
		}

		return e.complexity.Risk.CreatedBy(childComplexity), true

	case "Risk.delegate":
		if e.complexity.Risk.Delegate == nil {
			break
		}

		return e.complexity.Risk.Delegate(childComplexity), true

	case "Risk.delegateID":
		if e.complexity.Risk.DelegateID == nil {
			break
		}

		return e.complexity.Risk.DelegateID(childComplexity), true

	case "Risk.details":
		if e.complexity.Risk.Details == nil {
			break
		}

		return e.complexity.Risk.Details(childComplexity), true

	case "Risk.displayID":
		if e.complexity.Risk.DisplayID == nil {
			break
		}

		return e.complexity.Risk.DisplayID(childComplexity), true

	case "Risk.editors":
		if e.complexity.Risk.Editors == nil {
			break
		}

		args, err := ec.field_Risk_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Risk.entities":
		if e.complexity.Risk.Entities == nil {
			break
		}

		args, err := ec.field_Risk_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Risk.id":
		if e.complexity.Risk.ID == nil {
			break
		}

		return e.complexity.Risk.ID(childComplexity), true

	case "Risk.impact":
		if e.complexity.Risk.Impact == nil {
			break
		}

		return e.complexity.Risk.Impact(childComplexity), true

	case "Risk.internalPolicies":
		if e.complexity.Risk.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Risk_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Risk.likelihood":
		if e.complexity.Risk.Likelihood == nil {
			break
		}

		return e.complexity.Risk.Likelihood(childComplexity), true

	case "Risk.mitigation":
		if e.complexity.Risk.Mitigation == nil {
			break
		}

		return e.complexity.Risk.Mitigation(childComplexity), true

	case "Risk.name":
		if e.complexity.Risk.Name == nil {
			break
		}

		return e.complexity.Risk.Name(childComplexity), true

	case "Risk.owner":
		if e.complexity.Risk.Owner == nil {
			break
		}

		return e.complexity.Risk.Owner(childComplexity), true

	case "Risk.ownerID":
		if e.complexity.Risk.OwnerID == nil {
			break
		}

		return e.complexity.Risk.OwnerID(childComplexity), true

	case "Risk.procedures":
		if e.complexity.Risk.Procedures == nil {
			break
		}

		args, err := ec.field_Risk_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Risk.programs":
		if e.complexity.Risk.Programs == nil {
			break
		}

		args, err := ec.field_Risk_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Risk.riskType":
		if e.complexity.Risk.RiskType == nil {
			break
		}

		return e.complexity.Risk.RiskType(childComplexity), true

	case "Risk.scans":
		if e.complexity.Risk.Scans == nil {
			break
		}

		args, err := ec.field_Risk_scans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Scans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScanOrder), args["where"].(*generated.ScanWhereInput)), true

	case "Risk.score":
		if e.complexity.Risk.Score == nil {
			break
		}

		return e.complexity.Risk.Score(childComplexity), true

	case "Risk.stakeholder":
		if e.complexity.Risk.Stakeholder == nil {
			break
		}

		return e.complexity.Risk.Stakeholder(childComplexity), true

	case "Risk.stakeholderID":
		if e.complexity.Risk.StakeholderID == nil {
			break
		}

		return e.complexity.Risk.StakeholderID(childComplexity), true

	case "Risk.status":
		if e.complexity.Risk.Status == nil {
			break
		}

		return e.complexity.Risk.Status(childComplexity), true

	case "Risk.subcontrols":
		if e.complexity.Risk.Subcontrols == nil {
			break
		}

		args, err := ec.field_Risk_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Risk.tags":
		if e.complexity.Risk.Tags == nil {
			break
		}

		return e.complexity.Risk.Tags(childComplexity), true

	case "Risk.tasks":
		if e.complexity.Risk.Tasks == nil {
			break
		}

		args, err := ec.field_Risk_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Risk.updatedAt":
		if e.complexity.Risk.UpdatedAt == nil {
			break
		}

		return e.complexity.Risk.UpdatedAt(childComplexity), true

	case "Risk.updatedBy":
		if e.complexity.Risk.UpdatedBy == nil {
			break
		}

		return e.complexity.Risk.UpdatedBy(childComplexity), true

	case "Risk.viewers":
		if e.complexity.Risk.Viewers == nil {
			break
		}

		args, err := ec.field_Risk_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Risk.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "RiskBulkCreatePayload.risks":
		if e.complexity.RiskBulkCreatePayload.Risks == nil {
			break
		}

		return e.complexity.RiskBulkCreatePayload.Risks(childComplexity), true

	case "RiskBulkUpdatePayload.risks":
		if e.complexity.RiskBulkUpdatePayload.Risks == nil {
			break
		}

		return e.complexity.RiskBulkUpdatePayload.Risks(childComplexity), true

	case "RiskBulkUpdatePayload.updatedIDs":
		if e.complexity.RiskBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.RiskBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "RiskConnection.edges":
		if e.complexity.RiskConnection.Edges == nil {
			break
		}

		return e.complexity.RiskConnection.Edges(childComplexity), true

	case "RiskConnection.pageInfo":
		if e.complexity.RiskConnection.PageInfo == nil {
			break
		}

		return e.complexity.RiskConnection.PageInfo(childComplexity), true

	case "RiskConnection.totalCount":
		if e.complexity.RiskConnection.TotalCount == nil {
			break
		}

		return e.complexity.RiskConnection.TotalCount(childComplexity), true

	case "RiskCreatePayload.risk":
		if e.complexity.RiskCreatePayload.Risk == nil {
			break
		}

		return e.complexity.RiskCreatePayload.Risk(childComplexity), true

	case "RiskDeletePayload.deletedID":
		if e.complexity.RiskDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.RiskDeletePayload.DeletedID(childComplexity), true

	case "RiskEdge.cursor":
		if e.complexity.RiskEdge.Cursor == nil {
			break
		}

		return e.complexity.RiskEdge.Cursor(childComplexity), true

	case "RiskEdge.node":
		if e.complexity.RiskEdge.Node == nil {
			break
		}

		return e.complexity.RiskEdge.Node(childComplexity), true

	case "RiskHistory.businessCosts":
		if e.complexity.RiskHistory.BusinessCosts == nil {
			break
		}

		return e.complexity.RiskHistory.BusinessCosts(childComplexity), true

	case "RiskHistory.category":
		if e.complexity.RiskHistory.Category == nil {
			break
		}

		return e.complexity.RiskHistory.Category(childComplexity), true

	case "RiskHistory.createdAt":
		if e.complexity.RiskHistory.CreatedAt == nil {
			break
		}

		return e.complexity.RiskHistory.CreatedAt(childComplexity), true

	case "RiskHistory.createdBy":
		if e.complexity.RiskHistory.CreatedBy == nil {
			break
		}

		return e.complexity.RiskHistory.CreatedBy(childComplexity), true

	case "RiskHistory.delegateID":
		if e.complexity.RiskHistory.DelegateID == nil {
			break
		}

		return e.complexity.RiskHistory.DelegateID(childComplexity), true

	case "RiskHistory.details":
		if e.complexity.RiskHistory.Details == nil {
			break
		}

		return e.complexity.RiskHistory.Details(childComplexity), true

	case "RiskHistory.displayID":
		if e.complexity.RiskHistory.DisplayID == nil {
			break
		}

		return e.complexity.RiskHistory.DisplayID(childComplexity), true

	case "RiskHistory.historyTime":
		if e.complexity.RiskHistory.HistoryTime == nil {
			break
		}

		return e.complexity.RiskHistory.HistoryTime(childComplexity), true

	case "RiskHistory.id":
		if e.complexity.RiskHistory.ID == nil {
			break
		}

		return e.complexity.RiskHistory.ID(childComplexity), true

	case "RiskHistory.impact":
		if e.complexity.RiskHistory.Impact == nil {
			break
		}

		return e.complexity.RiskHistory.Impact(childComplexity), true

	case "RiskHistory.likelihood":
		if e.complexity.RiskHistory.Likelihood == nil {
			break
		}

		return e.complexity.RiskHistory.Likelihood(childComplexity), true

	case "RiskHistory.mitigation":
		if e.complexity.RiskHistory.Mitigation == nil {
			break
		}

		return e.complexity.RiskHistory.Mitigation(childComplexity), true

	case "RiskHistory.name":
		if e.complexity.RiskHistory.Name == nil {
			break
		}

		return e.complexity.RiskHistory.Name(childComplexity), true

	case "RiskHistory.operation":
		if e.complexity.RiskHistory.Operation == nil {
			break
		}

		return e.complexity.RiskHistory.Operation(childComplexity), true

	case "RiskHistory.ownerID":
		if e.complexity.RiskHistory.OwnerID == nil {
			break
		}

		return e.complexity.RiskHistory.OwnerID(childComplexity), true

	case "RiskHistory.ref":
		if e.complexity.RiskHistory.Ref == nil {
			break
		}

		return e.complexity.RiskHistory.Ref(childComplexity), true

	case "RiskHistory.riskType":
		if e.complexity.RiskHistory.RiskType == nil {
			break
		}

		return e.complexity.RiskHistory.RiskType(childComplexity), true

	case "RiskHistory.score":
		if e.complexity.RiskHistory.Score == nil {
			break
		}

		return e.complexity.RiskHistory.Score(childComplexity), true

	case "RiskHistory.stakeholderID":
		if e.complexity.RiskHistory.StakeholderID == nil {
			break
		}

		return e.complexity.RiskHistory.StakeholderID(childComplexity), true

	case "RiskHistory.status":
		if e.complexity.RiskHistory.Status == nil {
			break
		}

		return e.complexity.RiskHistory.Status(childComplexity), true

	case "RiskHistory.tags":
		if e.complexity.RiskHistory.Tags == nil {
			break
		}

		return e.complexity.RiskHistory.Tags(childComplexity), true

	case "RiskHistory.updatedAt":
		if e.complexity.RiskHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.RiskHistory.UpdatedAt(childComplexity), true

	case "RiskHistory.updatedBy":
		if e.complexity.RiskHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.RiskHistory.UpdatedBy(childComplexity), true

	case "RiskHistoryConnection.edges":
		if e.complexity.RiskHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.RiskHistoryConnection.Edges(childComplexity), true

	case "RiskHistoryConnection.pageInfo":
		if e.complexity.RiskHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.RiskHistoryConnection.PageInfo(childComplexity), true

	case "RiskHistoryConnection.totalCount":
		if e.complexity.RiskHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.RiskHistoryConnection.TotalCount(childComplexity), true

	case "RiskHistoryEdge.cursor":
		if e.complexity.RiskHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.RiskHistoryEdge.Cursor(childComplexity), true

	case "RiskHistoryEdge.node":
		if e.complexity.RiskHistoryEdge.Node == nil {
			break
		}

		return e.complexity.RiskHistoryEdge.Node(childComplexity), true

	case "RiskUpdatePayload.risk":
		if e.complexity.RiskUpdatePayload.Risk == nil {
			break
		}

		return e.complexity.RiskUpdatePayload.Risk(childComplexity), true

	case "Scan.assets":
		if e.complexity.Scan.Assets == nil {
			break
		}

		args, err := ec.field_Scan_assets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Scan.Assets(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.AssetOrder), args["where"].(*generated.AssetWhereInput)), true

	case "Scan.blockedGroups":
		if e.complexity.Scan.BlockedGroups == nil {
			break
		}

		args, err := ec.field_Scan_blockedGroups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Scan.BlockedGroups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Scan.createdAt":
		if e.complexity.Scan.CreatedAt == nil {
			break
		}

		return e.complexity.Scan.CreatedAt(childComplexity), true

	case "Scan.createdBy":
		if e.complexity.Scan.CreatedBy == nil {
			break
		}

		return e.complexity.Scan.CreatedBy(childComplexity), true

	case "Scan.editors":
		if e.complexity.Scan.Editors == nil {
			break
		}

		args, err := ec.field_Scan_editors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Scan.Editors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Scan.entities":
		if e.complexity.Scan.Entities == nil {
			break
		}

		args, err := ec.field_Scan_entities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Scan.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Scan.id":
		if e.complexity.Scan.ID == nil {
			break
		}

		return e.complexity.Scan.ID(childComplexity), true

	case "Scan.metadata":
		if e.complexity.Scan.Metadata == nil {
			break
		}

		return e.complexity.Scan.Metadata(childComplexity), true

	case "Scan.owner":
		if e.complexity.Scan.Owner == nil {
			break
		}

		return e.complexity.Scan.Owner(childComplexity), true

	case "Scan.ownerID":
		if e.complexity.Scan.OwnerID == nil {
			break
		}

		return e.complexity.Scan.OwnerID(childComplexity), true

	case "Scan.scanType":
		if e.complexity.Scan.ScanType == nil {
			break
		}

		return e.complexity.Scan.ScanType(childComplexity), true

	case "Scan.status":
		if e.complexity.Scan.Status == nil {
			break
		}

		return e.complexity.Scan.Status(childComplexity), true

	case "Scan.tags":
		if e.complexity.Scan.Tags == nil {
			break
		}

		return e.complexity.Scan.Tags(childComplexity), true

	case "Scan.target":
		if e.complexity.Scan.Target == nil {
			break
		}

		return e.complexity.Scan.Target(childComplexity), true

	case "Scan.updatedAt":
		if e.complexity.Scan.UpdatedAt == nil {
			break
		}

		return e.complexity.Scan.UpdatedAt(childComplexity), true

	case "Scan.updatedBy":
		if e.complexity.Scan.UpdatedBy == nil {
			break
		}

		return e.complexity.Scan.UpdatedBy(childComplexity), true

	case "Scan.viewers":
		if e.complexity.Scan.Viewers == nil {
			break
		}

		args, err := ec.field_Scan_viewers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Scan.Viewers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "ScanBulkCreatePayload.scans":
		if e.complexity.ScanBulkCreatePayload.Scans == nil {
			break
		}

		return e.complexity.ScanBulkCreatePayload.Scans(childComplexity), true

	case "ScanBulkUpdatePayload.scans":
		if e.complexity.ScanBulkUpdatePayload.Scans == nil {
			break
		}

		return e.complexity.ScanBulkUpdatePayload.Scans(childComplexity), true

	case "ScanBulkUpdatePayload.updatedIDs":
		if e.complexity.ScanBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.ScanBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "ScanConnection.edges":
		if e.complexity.ScanConnection.Edges == nil {
			break
		}

		return e.complexity.ScanConnection.Edges(childComplexity), true

	case "ScanConnection.pageInfo":
		if e.complexity.ScanConnection.PageInfo == nil {
			break
		}

		return e.complexity.ScanConnection.PageInfo(childComplexity), true

	case "ScanConnection.totalCount":
		if e.complexity.ScanConnection.TotalCount == nil {
			break
		}

		return e.complexity.ScanConnection.TotalCount(childComplexity), true

	case "ScanCreatePayload.scan":
		if e.complexity.ScanCreatePayload.Scan == nil {
			break
		}

		return e.complexity.ScanCreatePayload.Scan(childComplexity), true

	case "ScanDeletePayload.deletedID":
		if e.complexity.ScanDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ScanDeletePayload.DeletedID(childComplexity), true

	case "ScanEdge.cursor":
		if e.complexity.ScanEdge.Cursor == nil {
			break
		}

		return e.complexity.ScanEdge.Cursor(childComplexity), true

	case "ScanEdge.node":
		if e.complexity.ScanEdge.Node == nil {
			break
		}

		return e.complexity.ScanEdge.Node(childComplexity), true

	case "ScanHistory.createdAt":
		if e.complexity.ScanHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ScanHistory.CreatedAt(childComplexity), true

	case "ScanHistory.createdBy":
		if e.complexity.ScanHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ScanHistory.CreatedBy(childComplexity), true

	case "ScanHistory.historyTime":
		if e.complexity.ScanHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ScanHistory.HistoryTime(childComplexity), true

	case "ScanHistory.id":
		if e.complexity.ScanHistory.ID == nil {
			break
		}

		return e.complexity.ScanHistory.ID(childComplexity), true

	case "ScanHistory.metadata":
		if e.complexity.ScanHistory.Metadata == nil {
			break
		}

		return e.complexity.ScanHistory.Metadata(childComplexity), true

	case "ScanHistory.operation":
		if e.complexity.ScanHistory.Operation == nil {
			break
		}

		return e.complexity.ScanHistory.Operation(childComplexity), true

	case "ScanHistory.ownerID":
		if e.complexity.ScanHistory.OwnerID == nil {
			break
		}

		return e.complexity.ScanHistory.OwnerID(childComplexity), true

	case "ScanHistory.ref":
		if e.complexity.ScanHistory.Ref == nil {
			break
		}

		return e.complexity.ScanHistory.Ref(childComplexity), true

	case "ScanHistory.scanType":
		if e.complexity.ScanHistory.ScanType == nil {
			break
		}

		return e.complexity.ScanHistory.ScanType(childComplexity), true

	case "ScanHistory.status":
		if e.complexity.ScanHistory.Status == nil {
			break
		}

		return e.complexity.ScanHistory.Status(childComplexity), true

	case "ScanHistory.tags":
		if e.complexity.ScanHistory.Tags == nil {
			break
		}

		return e.complexity.ScanHistory.Tags(childComplexity), true

	case "ScanHistory.target":
		if e.complexity.ScanHistory.Target == nil {
			break
		}

		return e.complexity.ScanHistory.Target(childComplexity), true

	case "ScanHistory.updatedAt":
		if e.complexity.ScanHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ScanHistory.UpdatedAt(childComplexity), true

	case "ScanHistory.updatedBy":
		if e.complexity.ScanHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ScanHistory.UpdatedBy(childComplexity), true

	case "ScanHistoryConnection.edges":
		if e.complexity.ScanHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ScanHistoryConnection.Edges(childComplexity), true

	case "ScanHistoryConnection.pageInfo":
		if e.complexity.ScanHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ScanHistoryConnection.PageInfo(childComplexity), true

	case "ScanHistoryConnection.totalCount":
		if e.complexity.ScanHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ScanHistoryConnection.TotalCount(childComplexity), true

	case "ScanHistoryEdge.cursor":
		if e.complexity.ScanHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ScanHistoryEdge.Cursor(childComplexity), true

	case "ScanHistoryEdge.node":
		if e.complexity.ScanHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ScanHistoryEdge.Node(childComplexity), true

	case "ScanUpdatePayload.scan":
		if e.complexity.ScanUpdatePayload.Scan == nil {
			break
		}

		return e.complexity.ScanUpdatePayload.Scan(childComplexity), true

	case "ScheduledJob.active":
		if e.complexity.ScheduledJob.Active == nil {
			break
		}

		return e.complexity.ScheduledJob.Active(childComplexity), true

	case "ScheduledJob.configuration":
		if e.complexity.ScheduledJob.Configuration == nil {
			break
		}

		return e.complexity.ScheduledJob.Configuration(childComplexity), true

	case "ScheduledJob.controls":
		if e.complexity.ScheduledJob.Controls == nil {
			break
		}

		args, err := ec.field_ScheduledJob_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ScheduledJob.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "ScheduledJob.createdAt":
		if e.complexity.ScheduledJob.CreatedAt == nil {
			break
		}

		return e.complexity.ScheduledJob.CreatedAt(childComplexity), true

	case "ScheduledJob.createdBy":
		if e.complexity.ScheduledJob.CreatedBy == nil {
			break
		}

		return e.complexity.ScheduledJob.CreatedBy(childComplexity), true

	case "ScheduledJob.cron":
		if e.complexity.ScheduledJob.Cron == nil {
			break
		}

		return e.complexity.ScheduledJob.Cron(childComplexity), true

	case "ScheduledJob.displayID":
		if e.complexity.ScheduledJob.DisplayID == nil {
			break
		}

		return e.complexity.ScheduledJob.DisplayID(childComplexity), true

	case "ScheduledJob.id":
		if e.complexity.ScheduledJob.ID == nil {
			break
		}

		return e.complexity.ScheduledJob.ID(childComplexity), true

	case "ScheduledJob.jobID":
		if e.complexity.ScheduledJob.JobID == nil {
			break
		}

		return e.complexity.ScheduledJob.JobID(childComplexity), true

	case "ScheduledJob.jobRunner":
		if e.complexity.ScheduledJob.JobRunner == nil {
			break
		}

		return e.complexity.ScheduledJob.JobRunner(childComplexity), true

	case "ScheduledJob.jobRunnerID":
		if e.complexity.ScheduledJob.JobRunnerID == nil {
			break
		}

		return e.complexity.ScheduledJob.JobRunnerID(childComplexity), true

	case "ScheduledJob.jobTemplate":
		if e.complexity.ScheduledJob.JobTemplate == nil {
			break
		}

		return e.complexity.ScheduledJob.JobTemplate(childComplexity), true

	case "ScheduledJob.owner":
		if e.complexity.ScheduledJob.Owner == nil {
			break
		}

		return e.complexity.ScheduledJob.Owner(childComplexity), true

	case "ScheduledJob.ownerID":
		if e.complexity.ScheduledJob.OwnerID == nil {
			break
		}

		return e.complexity.ScheduledJob.OwnerID(childComplexity), true

	case "ScheduledJob.subcontrols":
		if e.complexity.ScheduledJob.Subcontrols == nil {
			break
		}

		args, err := ec.field_ScheduledJob_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ScheduledJob.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "ScheduledJob.updatedAt":
		if e.complexity.ScheduledJob.UpdatedAt == nil {
			break
		}

		return e.complexity.ScheduledJob.UpdatedAt(childComplexity), true

	case "ScheduledJob.updatedBy":
		if e.complexity.ScheduledJob.UpdatedBy == nil {
			break
		}

		return e.complexity.ScheduledJob.UpdatedBy(childComplexity), true

	case "ScheduledJobBulkCreatePayload.scheduledJobs":
		if e.complexity.ScheduledJobBulkCreatePayload.ScheduledJobs == nil {
			break
		}

		return e.complexity.ScheduledJobBulkCreatePayload.ScheduledJobs(childComplexity), true

	case "ScheduledJobConnection.edges":
		if e.complexity.ScheduledJobConnection.Edges == nil {
			break
		}

		return e.complexity.ScheduledJobConnection.Edges(childComplexity), true

	case "ScheduledJobConnection.pageInfo":
		if e.complexity.ScheduledJobConnection.PageInfo == nil {
			break
		}

		return e.complexity.ScheduledJobConnection.PageInfo(childComplexity), true

	case "ScheduledJobConnection.totalCount":
		if e.complexity.ScheduledJobConnection.TotalCount == nil {
			break
		}

		return e.complexity.ScheduledJobConnection.TotalCount(childComplexity), true

	case "ScheduledJobCreatePayload.scheduledJob":
		if e.complexity.ScheduledJobCreatePayload.ScheduledJob == nil {
			break
		}

		return e.complexity.ScheduledJobCreatePayload.ScheduledJob(childComplexity), true

	case "ScheduledJobDeletePayload.deletedID":
		if e.complexity.ScheduledJobDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ScheduledJobDeletePayload.DeletedID(childComplexity), true

	case "ScheduledJobEdge.cursor":
		if e.complexity.ScheduledJobEdge.Cursor == nil {
			break
		}

		return e.complexity.ScheduledJobEdge.Cursor(childComplexity), true

	case "ScheduledJobEdge.node":
		if e.complexity.ScheduledJobEdge.Node == nil {
			break
		}

		return e.complexity.ScheduledJobEdge.Node(childComplexity), true

	case "ScheduledJobHistory.active":
		if e.complexity.ScheduledJobHistory.Active == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.Active(childComplexity), true

	case "ScheduledJobHistory.configuration":
		if e.complexity.ScheduledJobHistory.Configuration == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.Configuration(childComplexity), true

	case "ScheduledJobHistory.createdAt":
		if e.complexity.ScheduledJobHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.CreatedAt(childComplexity), true

	case "ScheduledJobHistory.createdBy":
		if e.complexity.ScheduledJobHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.CreatedBy(childComplexity), true

	case "ScheduledJobHistory.cron":
		if e.complexity.ScheduledJobHistory.Cron == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.Cron(childComplexity), true

	case "ScheduledJobHistory.displayID":
		if e.complexity.ScheduledJobHistory.DisplayID == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.DisplayID(childComplexity), true

	case "ScheduledJobHistory.historyTime":
		if e.complexity.ScheduledJobHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.HistoryTime(childComplexity), true

	case "ScheduledJobHistory.id":
		if e.complexity.ScheduledJobHistory.ID == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.ID(childComplexity), true

	case "ScheduledJobHistory.jobID":
		if e.complexity.ScheduledJobHistory.JobID == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.JobID(childComplexity), true

	case "ScheduledJobHistory.jobRunnerID":
		if e.complexity.ScheduledJobHistory.JobRunnerID == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.JobRunnerID(childComplexity), true

	case "ScheduledJobHistory.operation":
		if e.complexity.ScheduledJobHistory.Operation == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.Operation(childComplexity), true

	case "ScheduledJobHistory.ownerID":
		if e.complexity.ScheduledJobHistory.OwnerID == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.OwnerID(childComplexity), true

	case "ScheduledJobHistory.ref":
		if e.complexity.ScheduledJobHistory.Ref == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.Ref(childComplexity), true

	case "ScheduledJobHistory.updatedAt":
		if e.complexity.ScheduledJobHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.UpdatedAt(childComplexity), true

	case "ScheduledJobHistory.updatedBy":
		if e.complexity.ScheduledJobHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ScheduledJobHistory.UpdatedBy(childComplexity), true

	case "ScheduledJobHistoryConnection.edges":
		if e.complexity.ScheduledJobHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ScheduledJobHistoryConnection.Edges(childComplexity), true

	case "ScheduledJobHistoryConnection.pageInfo":
		if e.complexity.ScheduledJobHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ScheduledJobHistoryConnection.PageInfo(childComplexity), true

	case "ScheduledJobHistoryConnection.totalCount":
		if e.complexity.ScheduledJobHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ScheduledJobHistoryConnection.TotalCount(childComplexity), true

	case "ScheduledJobHistoryEdge.cursor":
		if e.complexity.ScheduledJobHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ScheduledJobHistoryEdge.Cursor(childComplexity), true

	case "ScheduledJobHistoryEdge.node":
		if e.complexity.ScheduledJobHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ScheduledJobHistoryEdge.Node(childComplexity), true

	case "ScheduledJobRun.createdAt":
		if e.complexity.ScheduledJobRun.CreatedAt == nil {
			break
		}

		return e.complexity.ScheduledJobRun.CreatedAt(childComplexity), true

	case "ScheduledJobRun.createdBy":
		if e.complexity.ScheduledJobRun.CreatedBy == nil {
			break
		}

		return e.complexity.ScheduledJobRun.CreatedBy(childComplexity), true

	case "ScheduledJobRun.expectedExecutionTime":
		if e.complexity.ScheduledJobRun.ExpectedExecutionTime == nil {
			break
		}

		return e.complexity.ScheduledJobRun.ExpectedExecutionTime(childComplexity), true

	case "ScheduledJobRun.id":
		if e.complexity.ScheduledJobRun.ID == nil {
			break
		}

		return e.complexity.ScheduledJobRun.ID(childComplexity), true

	case "ScheduledJobRun.jobRunner":
		if e.complexity.ScheduledJobRun.JobRunner == nil {
			break
		}

		return e.complexity.ScheduledJobRun.JobRunner(childComplexity), true

	case "ScheduledJobRun.jobRunnerID":
		if e.complexity.ScheduledJobRun.JobRunnerID == nil {
			break
		}

		return e.complexity.ScheduledJobRun.JobRunnerID(childComplexity), true

	case "ScheduledJobRun.owner":
		if e.complexity.ScheduledJobRun.Owner == nil {
			break
		}

		return e.complexity.ScheduledJobRun.Owner(childComplexity), true

	case "ScheduledJobRun.ownerID":
		if e.complexity.ScheduledJobRun.OwnerID == nil {
			break
		}

		return e.complexity.ScheduledJobRun.OwnerID(childComplexity), true

	case "ScheduledJobRun.scheduledJob":
		if e.complexity.ScheduledJobRun.ScheduledJob == nil {
			break
		}

		return e.complexity.ScheduledJobRun.ScheduledJob(childComplexity), true

	case "ScheduledJobRun.scheduledJobID":
		if e.complexity.ScheduledJobRun.ScheduledJobID == nil {
			break
		}

		return e.complexity.ScheduledJobRun.ScheduledJobID(childComplexity), true

	case "ScheduledJobRun.script":
		if e.complexity.ScheduledJobRun.Script == nil {
			break
		}

		return e.complexity.ScheduledJobRun.Script(childComplexity), true

	case "ScheduledJobRun.status":
		if e.complexity.ScheduledJobRun.Status == nil {
			break
		}

		return e.complexity.ScheduledJobRun.Status(childComplexity), true

	case "ScheduledJobRun.updatedAt":
		if e.complexity.ScheduledJobRun.UpdatedAt == nil {
			break
		}

		return e.complexity.ScheduledJobRun.UpdatedAt(childComplexity), true

	case "ScheduledJobRun.updatedBy":
		if e.complexity.ScheduledJobRun.UpdatedBy == nil {
			break
		}

		return e.complexity.ScheduledJobRun.UpdatedBy(childComplexity), true

	case "ScheduledJobRunConnection.edges":
		if e.complexity.ScheduledJobRunConnection.Edges == nil {
			break
		}

		return e.complexity.ScheduledJobRunConnection.Edges(childComplexity), true

	case "ScheduledJobRunConnection.pageInfo":
		if e.complexity.ScheduledJobRunConnection.PageInfo == nil {
			break
		}

		return e.complexity.ScheduledJobRunConnection.PageInfo(childComplexity), true

	case "ScheduledJobRunConnection.totalCount":
		if e.complexity.ScheduledJobRunConnection.TotalCount == nil {
			break
		}

		return e.complexity.ScheduledJobRunConnection.TotalCount(childComplexity), true

	case "ScheduledJobRunCreatePayload.scheduledJobRun":
		if e.complexity.ScheduledJobRunCreatePayload.ScheduledJobRun == nil {
			break
		}

		return e.complexity.ScheduledJobRunCreatePayload.ScheduledJobRun(childComplexity), true

	case "ScheduledJobRunDeletePayload.deletedID":
		if e.complexity.ScheduledJobRunDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ScheduledJobRunDeletePayload.DeletedID(childComplexity), true

	case "ScheduledJobRunEdge.cursor":
		if e.complexity.ScheduledJobRunEdge.Cursor == nil {
			break
		}

		return e.complexity.ScheduledJobRunEdge.Cursor(childComplexity), true

	case "ScheduledJobRunEdge.node":
		if e.complexity.ScheduledJobRunEdge.Node == nil {
			break
		}

		return e.complexity.ScheduledJobRunEdge.Node(childComplexity), true

	case "ScheduledJobRunUpdatePayload.scheduledJobRun":
		if e.complexity.ScheduledJobRunUpdatePayload.ScheduledJobRun == nil {
			break
		}

		return e.complexity.ScheduledJobRunUpdatePayload.ScheduledJobRun(childComplexity), true

	case "ScheduledJobUpdatePayload.scheduledJob":
		if e.complexity.ScheduledJobUpdatePayload.ScheduledJob == nil {
			break
		}

		return e.complexity.ScheduledJobUpdatePayload.ScheduledJob(childComplexity), true

	case "SearchResults.apiTokens":
		if e.complexity.SearchResults.APITokens == nil {
			break
		}

		return e.complexity.SearchResults.APITokens(childComplexity), true

	case "SearchResults.actionPlans":
		if e.complexity.SearchResults.ActionPlans == nil {
			break
		}

		return e.complexity.SearchResults.ActionPlans(childComplexity), true

	case "SearchResults.assets":
		if e.complexity.SearchResults.Assets == nil {
			break
		}

		return e.complexity.SearchResults.Assets(childComplexity), true

	case "SearchResults.contacts":
		if e.complexity.SearchResults.Contacts == nil {
			break
		}

		return e.complexity.SearchResults.Contacts(childComplexity), true

	case "SearchResults.controlImplementations":
		if e.complexity.SearchResults.ControlImplementations == nil {
			break
		}

		return e.complexity.SearchResults.ControlImplementations(childComplexity), true

	case "SearchResults.controlObjectives":
		if e.complexity.SearchResults.ControlObjectives == nil {
			break
		}

		return e.complexity.SearchResults.ControlObjectives(childComplexity), true

	case "SearchResults.controls":
		if e.complexity.SearchResults.Controls == nil {
			break
		}

		return e.complexity.SearchResults.Controls(childComplexity), true

	case "SearchResults.customDomains":
		if e.complexity.SearchResults.CustomDomains == nil {
			break
		}

		return e.complexity.SearchResults.CustomDomains(childComplexity), true

	case "SearchResults.dnsVerifications":
		if e.complexity.SearchResults.DNSVerifications == nil {
			break
		}

		return e.complexity.SearchResults.DNSVerifications(childComplexity), true

	case "SearchResults.documentData":
		if e.complexity.SearchResults.DocumentData == nil {
			break
		}

		return e.complexity.SearchResults.DocumentData(childComplexity), true

	case "SearchResults.entities":
		if e.complexity.SearchResults.Entities == nil {
			break
		}

		return e.complexity.SearchResults.Entities(childComplexity), true

	case "SearchResults.entityTypes":
		if e.complexity.SearchResults.EntityTypes == nil {
			break
		}

		return e.complexity.SearchResults.EntityTypes(childComplexity), true

	case "SearchResults.events":
		if e.complexity.SearchResults.Events == nil {
			break
		}

		return e.complexity.SearchResults.Events(childComplexity), true

	case "SearchResults.evidences":
		if e.complexity.SearchResults.Evidences == nil {
			break
		}

		return e.complexity.SearchResults.Evidences(childComplexity), true

	case "SearchResults.files":
		if e.complexity.SearchResults.Files == nil {
			break
		}

		return e.complexity.SearchResults.Files(childComplexity), true

	case "SearchResults.groups":
		if e.complexity.SearchResults.Groups == nil {
			break
		}

		return e.complexity.SearchResults.Groups(childComplexity), true

	case "SearchResults.integrations":
		if e.complexity.SearchResults.Integrations == nil {
			break
		}

		return e.complexity.SearchResults.Integrations(childComplexity), true

	case "SearchResults.internalPolicies":
		if e.complexity.SearchResults.InternalPolicies == nil {
			break
		}

		return e.complexity.SearchResults.InternalPolicies(childComplexity), true

	case "SearchResults.invites":
		if e.complexity.SearchResults.Invites == nil {
			break
		}

		return e.complexity.SearchResults.Invites(childComplexity), true

	case "SearchResults.jobRunnerRegistrationTokens":
		if e.complexity.SearchResults.JobRunnerRegistrationTokens == nil {
			break
		}

		return e.complexity.SearchResults.JobRunnerRegistrationTokens(childComplexity), true

	case "SearchResults.jobRunnerTokens":
		if e.complexity.SearchResults.JobRunnerTokens == nil {
			break
		}

		return e.complexity.SearchResults.JobRunnerTokens(childComplexity), true

	case "SearchResults.jobRunners":
		if e.complexity.SearchResults.JobRunners == nil {
			break
		}

		return e.complexity.SearchResults.JobRunners(childComplexity), true

	case "SearchResults.jobTemplates":
		if e.complexity.SearchResults.JobTemplates == nil {
			break
		}

		return e.complexity.SearchResults.JobTemplates(childComplexity), true

	case "SearchResults.mappableDomains":
		if e.complexity.SearchResults.MappableDomains == nil {
			break
		}

		return e.complexity.SearchResults.MappableDomains(childComplexity), true

	case "SearchResults.mappedControls":
		if e.complexity.SearchResults.MappedControls == nil {
			break
		}

		return e.complexity.SearchResults.MappedControls(childComplexity), true

	case "SearchResults.narratives":
		if e.complexity.SearchResults.Narratives == nil {
			break
		}

		return e.complexity.SearchResults.Narratives(childComplexity), true

	case "SearchResults.orgSubscriptions":
		if e.complexity.SearchResults.OrgSubscriptions == nil {
			break
		}

		return e.complexity.SearchResults.OrgSubscriptions(childComplexity), true

	case "SearchResults.organizationSettings":
		if e.complexity.SearchResults.OrganizationSettings == nil {
			break
		}

		return e.complexity.SearchResults.OrganizationSettings(childComplexity), true

	case "SearchResults.organizations":
		if e.complexity.SearchResults.Organizations == nil {
			break
		}

		return e.complexity.SearchResults.Organizations(childComplexity), true

	case "SearchResults.page":
		if e.complexity.SearchResults.Page == nil {
			break
		}

		return e.complexity.SearchResults.Page(childComplexity), true

	case "SearchResults.personalAccessTokens":
		if e.complexity.SearchResults.PersonalAccessTokens == nil {
			break
		}

		return e.complexity.SearchResults.PersonalAccessTokens(childComplexity), true

	case "SearchResults.procedures":
		if e.complexity.SearchResults.Procedures == nil {
			break
		}

		return e.complexity.SearchResults.Procedures(childComplexity), true

	case "SearchResults.programs":
		if e.complexity.SearchResults.Programs == nil {
			break
		}

		return e.complexity.SearchResults.Programs(childComplexity), true

	case "SearchResults.risks":
		if e.complexity.SearchResults.Risks == nil {
			break
		}

		return e.complexity.SearchResults.Risks(childComplexity), true

	case "SearchResults.scans":
		if e.complexity.SearchResults.Scans == nil {
			break
		}

		return e.complexity.SearchResults.Scans(childComplexity), true

	case "SearchResults.standards":
		if e.complexity.SearchResults.Standards == nil {
			break
		}

		return e.complexity.SearchResults.Standards(childComplexity), true

	case "SearchResults.subcontrols":
		if e.complexity.SearchResults.Subcontrols == nil {
			break
		}

		return e.complexity.SearchResults.Subcontrols(childComplexity), true

	case "SearchResults.subprocessors":
		if e.complexity.SearchResults.Subprocessors == nil {
			break
		}

		return e.complexity.SearchResults.Subprocessors(childComplexity), true

	case "SearchResults.subscribers":
		if e.complexity.SearchResults.Subscribers == nil {
			break
		}

		return e.complexity.SearchResults.Subscribers(childComplexity), true

	case "SearchResults.tasks":
		if e.complexity.SearchResults.Tasks == nil {
			break
		}

		return e.complexity.SearchResults.Tasks(childComplexity), true

	case "SearchResults.templates":
		if e.complexity.SearchResults.Templates == nil {
			break
		}

		return e.complexity.SearchResults.Templates(childComplexity), true

	case "SearchResults.totalCount":
		if e.complexity.SearchResults.TotalCount == nil {
			break
		}

		return e.complexity.SearchResults.TotalCount(childComplexity), true

	case "SearchResults.trustCenterCompliances":
		if e.complexity.SearchResults.TrustCenterCompliances == nil {
			break
		}

		return e.complexity.SearchResults.TrustCenterCompliances(childComplexity), true

	case "SearchResults.trustCenterDocs":
		if e.complexity.SearchResults.TrustCenterDocs == nil {
			break
		}

		return e.complexity.SearchResults.TrustCenterDocs(childComplexity), true

	case "SearchResults.trustCenters":
		if e.complexity.SearchResults.TrustCenters == nil {
			break
		}

		return e.complexity.SearchResults.TrustCenters(childComplexity), true

	case "SearchResults.userSettings":
		if e.complexity.SearchResults.UserSettings == nil {
			break
		}

		return e.complexity.SearchResults.UserSettings(childComplexity), true

	case "SearchResults.users":
		if e.complexity.SearchResults.Users == nil {
			break
		}

		return e.complexity.SearchResults.Users(childComplexity), true

	case "SearchResults.webauthns":
		if e.complexity.SearchResults.Webauthns == nil {
			break
		}

		return e.complexity.SearchResults.Webauthns(childComplexity), true

	case "Standard.controls":
		if e.complexity.Standard.Controls == nil {
			break
		}

		args, err := ec.field_Standard_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Standard.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Standard.createdAt":
		if e.complexity.Standard.CreatedAt == nil {
			break
		}

		return e.complexity.Standard.CreatedAt(childComplexity), true

	case "Standard.createdBy":
		if e.complexity.Standard.CreatedBy == nil {
			break
		}

		return e.complexity.Standard.CreatedBy(childComplexity), true

	case "Standard.description":
		if e.complexity.Standard.Description == nil {
			break
		}

		return e.complexity.Standard.Description(childComplexity), true

	case "Standard.domains":
		if e.complexity.Standard.Domains == nil {
			break
		}

		return e.complexity.Standard.Domains(childComplexity), true

	case "Standard.framework":
		if e.complexity.Standard.Framework == nil {
			break
		}

		return e.complexity.Standard.Framework(childComplexity), true

	case "Standard.freeToUse":
		if e.complexity.Standard.FreeToUse == nil {
			break
		}

		return e.complexity.Standard.FreeToUse(childComplexity), true

	case "Standard.governingBody":
		if e.complexity.Standard.GoverningBody == nil {
			break
		}

		return e.complexity.Standard.GoverningBody(childComplexity), true

	case "Standard.governingBodyLogoURL":
		if e.complexity.Standard.GoverningBodyLogoURL == nil {
			break
		}

		return e.complexity.Standard.GoverningBodyLogoURL(childComplexity), true

	case "Standard.id":
		if e.complexity.Standard.ID == nil {
			break
		}

		return e.complexity.Standard.ID(childComplexity), true

	case "Standard.isPublic":
		if e.complexity.Standard.IsPublic == nil {
			break
		}

		return e.complexity.Standard.IsPublic(childComplexity), true

	case "Standard.link":
		if e.complexity.Standard.Link == nil {
			break
		}

		return e.complexity.Standard.Link(childComplexity), true

	case "Standard.name":
		if e.complexity.Standard.Name == nil {
			break
		}

		return e.complexity.Standard.Name(childComplexity), true

	case "Standard.owner":
		if e.complexity.Standard.Owner == nil {
			break
		}

		return e.complexity.Standard.Owner(childComplexity), true

	case "Standard.ownerID":
		if e.complexity.Standard.OwnerID == nil {
			break
		}

		return e.complexity.Standard.OwnerID(childComplexity), true

	case "Standard.revision":
		if e.complexity.Standard.Revision == nil {
			break
		}

		return e.complexity.Standard.Revision(childComplexity), true

	case "Standard.shortName":
		if e.complexity.Standard.ShortName == nil {
			break
		}

		return e.complexity.Standard.ShortName(childComplexity), true

	case "Standard.standardType":
		if e.complexity.Standard.StandardType == nil {
			break
		}

		return e.complexity.Standard.StandardType(childComplexity), true

	case "Standard.status":
		if e.complexity.Standard.Status == nil {
			break
		}

		return e.complexity.Standard.Status(childComplexity), true

	case "Standard.systemOwned":
		if e.complexity.Standard.SystemOwned == nil {
			break
		}

		return e.complexity.Standard.SystemOwned(childComplexity), true

	case "Standard.tags":
		if e.complexity.Standard.Tags == nil {
			break
		}

		return e.complexity.Standard.Tags(childComplexity), true

	case "Standard.trustCenterCompliances":
		if e.complexity.Standard.TrustCenterCompliances == nil {
			break
		}

		args, err := ec.field_Standard_trustCenterCompliances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Standard.TrustCenterCompliances(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterComplianceOrder), args["where"].(*generated.TrustCenterComplianceWhereInput)), true

	case "Standard.updatedAt":
		if e.complexity.Standard.UpdatedAt == nil {
			break
		}

		return e.complexity.Standard.UpdatedAt(childComplexity), true

	case "Standard.updatedBy":
		if e.complexity.Standard.UpdatedBy == nil {
			break
		}

		return e.complexity.Standard.UpdatedBy(childComplexity), true

	case "Standard.version":
		if e.complexity.Standard.Version == nil {
			break
		}

		return e.complexity.Standard.Version(childComplexity), true

	case "StandardBulkCreatePayload.standards":
		if e.complexity.StandardBulkCreatePayload.Standards == nil {
			break
		}

		return e.complexity.StandardBulkCreatePayload.Standards(childComplexity), true

	case "StandardConnection.edges":
		if e.complexity.StandardConnection.Edges == nil {
			break
		}

		return e.complexity.StandardConnection.Edges(childComplexity), true

	case "StandardConnection.pageInfo":
		if e.complexity.StandardConnection.PageInfo == nil {
			break
		}

		return e.complexity.StandardConnection.PageInfo(childComplexity), true

	case "StandardConnection.totalCount":
		if e.complexity.StandardConnection.TotalCount == nil {
			break
		}

		return e.complexity.StandardConnection.TotalCount(childComplexity), true

	case "StandardCreatePayload.standard":
		if e.complexity.StandardCreatePayload.Standard == nil {
			break
		}

		return e.complexity.StandardCreatePayload.Standard(childComplexity), true

	case "StandardDeletePayload.deletedID":
		if e.complexity.StandardDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.StandardDeletePayload.DeletedID(childComplexity), true

	case "StandardEdge.cursor":
		if e.complexity.StandardEdge.Cursor == nil {
			break
		}

		return e.complexity.StandardEdge.Cursor(childComplexity), true

	case "StandardEdge.node":
		if e.complexity.StandardEdge.Node == nil {
			break
		}

		return e.complexity.StandardEdge.Node(childComplexity), true

	case "StandardHistory.createdAt":
		if e.complexity.StandardHistory.CreatedAt == nil {
			break
		}

		return e.complexity.StandardHistory.CreatedAt(childComplexity), true

	case "StandardHistory.createdBy":
		if e.complexity.StandardHistory.CreatedBy == nil {
			break
		}

		return e.complexity.StandardHistory.CreatedBy(childComplexity), true

	case "StandardHistory.description":
		if e.complexity.StandardHistory.Description == nil {
			break
		}

		return e.complexity.StandardHistory.Description(childComplexity), true

	case "StandardHistory.domains":
		if e.complexity.StandardHistory.Domains == nil {
			break
		}

		return e.complexity.StandardHistory.Domains(childComplexity), true

	case "StandardHistory.framework":
		if e.complexity.StandardHistory.Framework == nil {
			break
		}

		return e.complexity.StandardHistory.Framework(childComplexity), true

	case "StandardHistory.freeToUse":
		if e.complexity.StandardHistory.FreeToUse == nil {
			break
		}

		return e.complexity.StandardHistory.FreeToUse(childComplexity), true

	case "StandardHistory.governingBody":
		if e.complexity.StandardHistory.GoverningBody == nil {
			break
		}

		return e.complexity.StandardHistory.GoverningBody(childComplexity), true

	case "StandardHistory.governingBodyLogoURL":
		if e.complexity.StandardHistory.GoverningBodyLogoURL == nil {
			break
		}

		return e.complexity.StandardHistory.GoverningBodyLogoURL(childComplexity), true

	case "StandardHistory.historyTime":
		if e.complexity.StandardHistory.HistoryTime == nil {
			break
		}

		return e.complexity.StandardHistory.HistoryTime(childComplexity), true

	case "StandardHistory.id":
		if e.complexity.StandardHistory.ID == nil {
			break
		}

		return e.complexity.StandardHistory.ID(childComplexity), true

	case "StandardHistory.isPublic":
		if e.complexity.StandardHistory.IsPublic == nil {
			break
		}

		return e.complexity.StandardHistory.IsPublic(childComplexity), true

	case "StandardHistory.link":
		if e.complexity.StandardHistory.Link == nil {
			break
		}

		return e.complexity.StandardHistory.Link(childComplexity), true

	case "StandardHistory.name":
		if e.complexity.StandardHistory.Name == nil {
			break
		}

		return e.complexity.StandardHistory.Name(childComplexity), true

	case "StandardHistory.operation":
		if e.complexity.StandardHistory.Operation == nil {
			break
		}

		return e.complexity.StandardHistory.Operation(childComplexity), true

	case "StandardHistory.ownerID":
		if e.complexity.StandardHistory.OwnerID == nil {
			break
		}

		return e.complexity.StandardHistory.OwnerID(childComplexity), true

	case "StandardHistory.ref":
		if e.complexity.StandardHistory.Ref == nil {
			break
		}

		return e.complexity.StandardHistory.Ref(childComplexity), true

	case "StandardHistory.revision":
		if e.complexity.StandardHistory.Revision == nil {
			break
		}

		return e.complexity.StandardHistory.Revision(childComplexity), true

	case "StandardHistory.shortName":
		if e.complexity.StandardHistory.ShortName == nil {
			break
		}

		return e.complexity.StandardHistory.ShortName(childComplexity), true

	case "StandardHistory.standardType":
		if e.complexity.StandardHistory.StandardType == nil {
			break
		}

		return e.complexity.StandardHistory.StandardType(childComplexity), true

	case "StandardHistory.status":
		if e.complexity.StandardHistory.Status == nil {
			break
		}

		return e.complexity.StandardHistory.Status(childComplexity), true

	case "StandardHistory.systemOwned":
		if e.complexity.StandardHistory.SystemOwned == nil {
			break
		}

		return e.complexity.StandardHistory.SystemOwned(childComplexity), true

	case "StandardHistory.tags":
		if e.complexity.StandardHistory.Tags == nil {
			break
		}

		return e.complexity.StandardHistory.Tags(childComplexity), true

	case "StandardHistory.updatedAt":
		if e.complexity.StandardHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.StandardHistory.UpdatedAt(childComplexity), true

	case "StandardHistory.updatedBy":
		if e.complexity.StandardHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.StandardHistory.UpdatedBy(childComplexity), true

	case "StandardHistory.version":
		if e.complexity.StandardHistory.Version == nil {
			break
		}

		return e.complexity.StandardHistory.Version(childComplexity), true

	case "StandardHistoryConnection.edges":
		if e.complexity.StandardHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.StandardHistoryConnection.Edges(childComplexity), true

	case "StandardHistoryConnection.pageInfo":
		if e.complexity.StandardHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.StandardHistoryConnection.PageInfo(childComplexity), true

	case "StandardHistoryConnection.totalCount":
		if e.complexity.StandardHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.StandardHistoryConnection.TotalCount(childComplexity), true

	case "StandardHistoryEdge.cursor":
		if e.complexity.StandardHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.StandardHistoryEdge.Cursor(childComplexity), true

	case "StandardHistoryEdge.node":
		if e.complexity.StandardHistoryEdge.Node == nil {
			break
		}

		return e.complexity.StandardHistoryEdge.Node(childComplexity), true

	case "StandardUpdatePayload.standard":
		if e.complexity.StandardUpdatePayload.Standard == nil {
			break
		}

		return e.complexity.StandardUpdatePayload.Standard(childComplexity), true

	case "Subcontrol.actionPlans":
		if e.complexity.Subcontrol.ActionPlans == nil {
			break
		}

		args, err := ec.field_Subcontrol_actionPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ActionPlanOrder), args["where"].(*generated.ActionPlanWhereInput)), true

	case "Subcontrol.assessmentMethods":
		if e.complexity.Subcontrol.AssessmentMethods == nil {
			break
		}

		return e.complexity.Subcontrol.AssessmentMethods(childComplexity), true

	case "Subcontrol.assessmentObjectives":
		if e.complexity.Subcontrol.AssessmentObjectives == nil {
			break
		}

		return e.complexity.Subcontrol.AssessmentObjectives(childComplexity), true

	case "Subcontrol.auditorReferenceID":
		if e.complexity.Subcontrol.AuditorReferenceID == nil {
			break
		}

		return e.complexity.Subcontrol.AuditorReferenceID(childComplexity), true

	case "Subcontrol.category":
		if e.complexity.Subcontrol.Category == nil {
			break
		}

		return e.complexity.Subcontrol.Category(childComplexity), true

	case "Subcontrol.categoryID":
		if e.complexity.Subcontrol.CategoryID == nil {
			break
		}

		return e.complexity.Subcontrol.CategoryID(childComplexity), true

	case "Subcontrol.control":
		if e.complexity.Subcontrol.Control == nil {
			break
		}

		return e.complexity.Subcontrol.Control(childComplexity), true

	case "Subcontrol.controlID":
		if e.complexity.Subcontrol.ControlID == nil {
			break
		}

		return e.complexity.Subcontrol.ControlID(childComplexity), true

	case "Subcontrol.controlImplementations":
		if e.complexity.Subcontrol.ControlImplementations == nil {
			break
		}

		args, err := ec.field_Subcontrol_controlImplementations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.ControlImplementations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Subcontrol.controlObjectives":
		if e.complexity.Subcontrol.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Subcontrol_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Subcontrol.controlOwner":
		if e.complexity.Subcontrol.ControlOwner == nil {
			break
		}

		return e.complexity.Subcontrol.ControlOwner(childComplexity), true

	case "Subcontrol.controlOwnerID":
		if e.complexity.Subcontrol.ControlOwnerID == nil {
			break
		}

		return e.complexity.Subcontrol.ControlOwnerID(childComplexity), true

	case "Subcontrol.controlQuestions":
		if e.complexity.Subcontrol.ControlQuestions == nil {
			break
		}

		return e.complexity.Subcontrol.ControlQuestions(childComplexity), true

	case "Subcontrol.controlType":
		if e.complexity.Subcontrol.ControlType == nil {
			break
		}

		return e.complexity.Subcontrol.ControlType(childComplexity), true

	case "Subcontrol.createdAt":
		if e.complexity.Subcontrol.CreatedAt == nil {
			break
		}

		return e.complexity.Subcontrol.CreatedAt(childComplexity), true

	case "Subcontrol.createdBy":
		if e.complexity.Subcontrol.CreatedBy == nil {
			break
		}

		return e.complexity.Subcontrol.CreatedBy(childComplexity), true

	case "Subcontrol.delegate":
		if e.complexity.Subcontrol.Delegate == nil {
			break
		}

		return e.complexity.Subcontrol.Delegate(childComplexity), true

	case "Subcontrol.delegateID":
		if e.complexity.Subcontrol.DelegateID == nil {
			break
		}

		return e.complexity.Subcontrol.DelegateID(childComplexity), true

	case "Subcontrol.description":
		if e.complexity.Subcontrol.Description == nil {
			break
		}

		return e.complexity.Subcontrol.Description(childComplexity), true

	case "Subcontrol.displayID":
		if e.complexity.Subcontrol.DisplayID == nil {
			break
		}

		return e.complexity.Subcontrol.DisplayID(childComplexity), true

	case "Subcontrol.evidence":
		if e.complexity.Subcontrol.Evidence == nil {
			break
		}

		args, err := ec.field_Subcontrol_evidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.Evidence(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EvidenceOrder), args["where"].(*generated.EvidenceWhereInput)), true

	case "Subcontrol.exampleEvidence":
		if e.complexity.Subcontrol.ExampleEvidence == nil {
			break
		}

		return e.complexity.Subcontrol.ExampleEvidence(childComplexity), true

	case "Subcontrol.id":
		if e.complexity.Subcontrol.ID == nil {
			break
		}

		return e.complexity.Subcontrol.ID(childComplexity), true

	case "Subcontrol.implementationGuidance":
		if e.complexity.Subcontrol.ImplementationGuidance == nil {
			break
		}

		return e.complexity.Subcontrol.ImplementationGuidance(childComplexity), true

	case "Subcontrol.internalPolicies":
		if e.complexity.Subcontrol.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Subcontrol_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Subcontrol.mappedCategories":
		if e.complexity.Subcontrol.MappedCategories == nil {
			break
		}

		return e.complexity.Subcontrol.MappedCategories(childComplexity), true

	case "Subcontrol.narratives":
		if e.complexity.Subcontrol.Narratives == nil {
			break
		}

		args, err := ec.field_Subcontrol_narratives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NarrativeOrder), args["where"].(*generated.NarrativeWhereInput)), true

	case "Subcontrol.owner":
		if e.complexity.Subcontrol.Owner == nil {
			break
		}

		return e.complexity.Subcontrol.Owner(childComplexity), true

	case "Subcontrol.ownerID":
		if e.complexity.Subcontrol.OwnerID == nil {
			break
		}

		return e.complexity.Subcontrol.OwnerID(childComplexity), true

	case "Subcontrol.procedures":
		if e.complexity.Subcontrol.Procedures == nil {
			break
		}

		args, err := ec.field_Subcontrol_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Subcontrol.refCode":
		if e.complexity.Subcontrol.RefCode == nil {
			break
		}

		return e.complexity.Subcontrol.RefCode(childComplexity), true

	case "Subcontrol.referenceFramework":
		if e.complexity.Subcontrol.ReferenceFramework == nil {
			break
		}

		return e.complexity.Subcontrol.ReferenceFramework(childComplexity), true

	case "Subcontrol.referenceID":
		if e.complexity.Subcontrol.ReferenceID == nil {
			break
		}

		return e.complexity.Subcontrol.ReferenceID(childComplexity), true

	case "Subcontrol.references":
		if e.complexity.Subcontrol.References == nil {
			break
		}

		return e.complexity.Subcontrol.References(childComplexity), true

	case "Subcontrol.risks":
		if e.complexity.Subcontrol.Risks == nil {
			break
		}

		args, err := ec.field_Subcontrol_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Subcontrol.scheduledJobs":
		if e.complexity.Subcontrol.ScheduledJobs == nil {
			break
		}

		args, err := ec.field_Subcontrol_scheduledJobs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.ScheduledJobs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ScheduledJobOrder), args["where"].(*generated.ScheduledJobWhereInput)), true

	case "Subcontrol.source":
		if e.complexity.Subcontrol.Source == nil {
			break
		}

		return e.complexity.Subcontrol.Source(childComplexity), true

	case "Subcontrol.status":
		if e.complexity.Subcontrol.Status == nil {
			break
		}

		return e.complexity.Subcontrol.Status(childComplexity), true

	case "Subcontrol.subcategory":
		if e.complexity.Subcontrol.Subcategory == nil {
			break
		}

		return e.complexity.Subcontrol.Subcategory(childComplexity), true

	case "Subcontrol.tags":
		if e.complexity.Subcontrol.Tags == nil {
			break
		}

		return e.complexity.Subcontrol.Tags(childComplexity), true

	case "Subcontrol.tasks":
		if e.complexity.Subcontrol.Tasks == nil {
			break
		}

		args, err := ec.field_Subcontrol_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subcontrol.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "Subcontrol.updatedAt":
		if e.complexity.Subcontrol.UpdatedAt == nil {
			break
		}

		return e.complexity.Subcontrol.UpdatedAt(childComplexity), true

	case "Subcontrol.updatedBy":
		if e.complexity.Subcontrol.UpdatedBy == nil {
			break
		}

		return e.complexity.Subcontrol.UpdatedBy(childComplexity), true

	case "SubcontrolBulkCreatePayload.subcontrols":
		if e.complexity.SubcontrolBulkCreatePayload.Subcontrols == nil {
			break
		}

		return e.complexity.SubcontrolBulkCreatePayload.Subcontrols(childComplexity), true

	case "SubcontrolConnection.edges":
		if e.complexity.SubcontrolConnection.Edges == nil {
			break
		}

		return e.complexity.SubcontrolConnection.Edges(childComplexity), true

	case "SubcontrolConnection.pageInfo":
		if e.complexity.SubcontrolConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubcontrolConnection.PageInfo(childComplexity), true

	case "SubcontrolConnection.totalCount":
		if e.complexity.SubcontrolConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubcontrolConnection.TotalCount(childComplexity), true

	case "SubcontrolCreatePayload.subcontrol":
		if e.complexity.SubcontrolCreatePayload.Subcontrol == nil {
			break
		}

		return e.complexity.SubcontrolCreatePayload.Subcontrol(childComplexity), true

	case "SubcontrolDeletePayload.deletedID":
		if e.complexity.SubcontrolDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.SubcontrolDeletePayload.DeletedID(childComplexity), true

	case "SubcontrolEdge.cursor":
		if e.complexity.SubcontrolEdge.Cursor == nil {
			break
		}

		return e.complexity.SubcontrolEdge.Cursor(childComplexity), true

	case "SubcontrolEdge.node":
		if e.complexity.SubcontrolEdge.Node == nil {
			break
		}

		return e.complexity.SubcontrolEdge.Node(childComplexity), true

	case "SubcontrolHistory.assessmentMethods":
		if e.complexity.SubcontrolHistory.AssessmentMethods == nil {
			break
		}

		return e.complexity.SubcontrolHistory.AssessmentMethods(childComplexity), true

	case "SubcontrolHistory.assessmentObjectives":
		if e.complexity.SubcontrolHistory.AssessmentObjectives == nil {
			break
		}

		return e.complexity.SubcontrolHistory.AssessmentObjectives(childComplexity), true

	case "SubcontrolHistory.auditorReferenceID":
		if e.complexity.SubcontrolHistory.AuditorReferenceID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.AuditorReferenceID(childComplexity), true

	case "SubcontrolHistory.category":
		if e.complexity.SubcontrolHistory.Category == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Category(childComplexity), true

	case "SubcontrolHistory.categoryID":
		if e.complexity.SubcontrolHistory.CategoryID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.CategoryID(childComplexity), true

	case "SubcontrolHistory.controlID":
		if e.complexity.SubcontrolHistory.ControlID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ControlID(childComplexity), true

	case "SubcontrolHistory.controlOwnerID":
		if e.complexity.SubcontrolHistory.ControlOwnerID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ControlOwnerID(childComplexity), true

	case "SubcontrolHistory.controlQuestions":
		if e.complexity.SubcontrolHistory.ControlQuestions == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ControlQuestions(childComplexity), true

	case "SubcontrolHistory.controlType":
		if e.complexity.SubcontrolHistory.ControlType == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ControlType(childComplexity), true

	case "SubcontrolHistory.createdAt":
		if e.complexity.SubcontrolHistory.CreatedAt == nil {
			break
		}

		return e.complexity.SubcontrolHistory.CreatedAt(childComplexity), true

	case "SubcontrolHistory.createdBy":
		if e.complexity.SubcontrolHistory.CreatedBy == nil {
			break
		}

		return e.complexity.SubcontrolHistory.CreatedBy(childComplexity), true

	case "SubcontrolHistory.delegateID":
		if e.complexity.SubcontrolHistory.DelegateID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.DelegateID(childComplexity), true

	case "SubcontrolHistory.description":
		if e.complexity.SubcontrolHistory.Description == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Description(childComplexity), true

	case "SubcontrolHistory.displayID":
		if e.complexity.SubcontrolHistory.DisplayID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.DisplayID(childComplexity), true

	case "SubcontrolHistory.exampleEvidence":
		if e.complexity.SubcontrolHistory.ExampleEvidence == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ExampleEvidence(childComplexity), true

	case "SubcontrolHistory.historyTime":
		if e.complexity.SubcontrolHistory.HistoryTime == nil {
			break
		}

		return e.complexity.SubcontrolHistory.HistoryTime(childComplexity), true

	case "SubcontrolHistory.id":
		if e.complexity.SubcontrolHistory.ID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ID(childComplexity), true

	case "SubcontrolHistory.implementationGuidance":
		if e.complexity.SubcontrolHistory.ImplementationGuidance == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ImplementationGuidance(childComplexity), true

	case "SubcontrolHistory.mappedCategories":
		if e.complexity.SubcontrolHistory.MappedCategories == nil {
			break
		}

		return e.complexity.SubcontrolHistory.MappedCategories(childComplexity), true

	case "SubcontrolHistory.operation":
		if e.complexity.SubcontrolHistory.Operation == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Operation(childComplexity), true

	case "SubcontrolHistory.ownerID":
		if e.complexity.SubcontrolHistory.OwnerID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.OwnerID(childComplexity), true

	case "SubcontrolHistory.ref":
		if e.complexity.SubcontrolHistory.Ref == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Ref(childComplexity), true

	case "SubcontrolHistory.refCode":
		if e.complexity.SubcontrolHistory.RefCode == nil {
			break
		}

		return e.complexity.SubcontrolHistory.RefCode(childComplexity), true

	case "SubcontrolHistory.referenceFramework":
		if e.complexity.SubcontrolHistory.ReferenceFramework == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ReferenceFramework(childComplexity), true

	case "SubcontrolHistory.referenceID":
		if e.complexity.SubcontrolHistory.ReferenceID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ReferenceID(childComplexity), true

	case "SubcontrolHistory.references":
		if e.complexity.SubcontrolHistory.References == nil {
			break
		}

		return e.complexity.SubcontrolHistory.References(childComplexity), true

	case "SubcontrolHistory.source":
		if e.complexity.SubcontrolHistory.Source == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Source(childComplexity), true

	case "SubcontrolHistory.status":
		if e.complexity.SubcontrolHistory.Status == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Status(childComplexity), true

	case "SubcontrolHistory.subcategory":
		if e.complexity.SubcontrolHistory.Subcategory == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Subcategory(childComplexity), true

	case "SubcontrolHistory.tags":
		if e.complexity.SubcontrolHistory.Tags == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Tags(childComplexity), true

	case "SubcontrolHistory.updatedAt":
		if e.complexity.SubcontrolHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.SubcontrolHistory.UpdatedAt(childComplexity), true

	case "SubcontrolHistory.updatedBy":
		if e.complexity.SubcontrolHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.SubcontrolHistory.UpdatedBy(childComplexity), true

	case "SubcontrolHistoryConnection.edges":
		if e.complexity.SubcontrolHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.SubcontrolHistoryConnection.Edges(childComplexity), true

	case "SubcontrolHistoryConnection.pageInfo":
		if e.complexity.SubcontrolHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubcontrolHistoryConnection.PageInfo(childComplexity), true

	case "SubcontrolHistoryConnection.totalCount":
		if e.complexity.SubcontrolHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubcontrolHistoryConnection.TotalCount(childComplexity), true

	case "SubcontrolHistoryEdge.cursor":
		if e.complexity.SubcontrolHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.SubcontrolHistoryEdge.Cursor(childComplexity), true

	case "SubcontrolHistoryEdge.node":
		if e.complexity.SubcontrolHistoryEdge.Node == nil {
			break
		}

		return e.complexity.SubcontrolHistoryEdge.Node(childComplexity), true

	case "SubcontrolUpdatePayload.subcontrol":
		if e.complexity.SubcontrolUpdatePayload.Subcontrol == nil {
			break
		}

		return e.complexity.SubcontrolUpdatePayload.Subcontrol(childComplexity), true

	case "Subprocessor.createdAt":
		if e.complexity.Subprocessor.CreatedAt == nil {
			break
		}

		return e.complexity.Subprocessor.CreatedAt(childComplexity), true

	case "Subprocessor.createdBy":
		if e.complexity.Subprocessor.CreatedBy == nil {
			break
		}

		return e.complexity.Subprocessor.CreatedBy(childComplexity), true

	case "Subprocessor.description":
		if e.complexity.Subprocessor.Description == nil {
			break
		}

		return e.complexity.Subprocessor.Description(childComplexity), true

	case "Subprocessor.files":
		if e.complexity.Subprocessor.Files == nil {
			break
		}

		args, err := ec.field_Subprocessor_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subprocessor.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Subprocessor.id":
		if e.complexity.Subprocessor.ID == nil {
			break
		}

		return e.complexity.Subprocessor.ID(childComplexity), true

	case "Subprocessor.logoFile":
		if e.complexity.Subprocessor.LogoFile == nil {
			break
		}

		return e.complexity.Subprocessor.LogoFile(childComplexity), true

	case "Subprocessor.logoLocalFileID":
		if e.complexity.Subprocessor.LogoLocalFileID == nil {
			break
		}

		return e.complexity.Subprocessor.LogoLocalFileID(childComplexity), true

	case "Subprocessor.logoRemoteURL":
		if e.complexity.Subprocessor.LogoRemoteURL == nil {
			break
		}

		return e.complexity.Subprocessor.LogoRemoteURL(childComplexity), true

	case "Subprocessor.name":
		if e.complexity.Subprocessor.Name == nil {
			break
		}

		return e.complexity.Subprocessor.Name(childComplexity), true

	case "Subprocessor.owner":
		if e.complexity.Subprocessor.Owner == nil {
			break
		}

		return e.complexity.Subprocessor.Owner(childComplexity), true

	case "Subprocessor.ownerID":
		if e.complexity.Subprocessor.OwnerID == nil {
			break
		}

		return e.complexity.Subprocessor.OwnerID(childComplexity), true

	case "Subprocessor.systemOwned":
		if e.complexity.Subprocessor.SystemOwned == nil {
			break
		}

		return e.complexity.Subprocessor.SystemOwned(childComplexity), true

	case "Subprocessor.tags":
		if e.complexity.Subprocessor.Tags == nil {
			break
		}

		return e.complexity.Subprocessor.Tags(childComplexity), true

	case "Subprocessor.trustCenterSubprocessors":
		if e.complexity.Subprocessor.TrustCenterSubprocessors == nil {
			break
		}

		args, err := ec.field_Subprocessor_trustCenterSubprocessors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subprocessor.TrustCenterSubprocessors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterSubprocessorOrder), args["where"].(*generated.TrustCenterSubprocessorWhereInput)), true

	case "Subprocessor.updatedAt":
		if e.complexity.Subprocessor.UpdatedAt == nil {
			break
		}

		return e.complexity.Subprocessor.UpdatedAt(childComplexity), true

	case "Subprocessor.updatedBy":
		if e.complexity.Subprocessor.UpdatedBy == nil {
			break
		}

		return e.complexity.Subprocessor.UpdatedBy(childComplexity), true

	case "SubprocessorBulkCreatePayload.subprocessors":
		if e.complexity.SubprocessorBulkCreatePayload.Subprocessors == nil {
			break
		}

		return e.complexity.SubprocessorBulkCreatePayload.Subprocessors(childComplexity), true

	case "SubprocessorConnection.edges":
		if e.complexity.SubprocessorConnection.Edges == nil {
			break
		}

		return e.complexity.SubprocessorConnection.Edges(childComplexity), true

	case "SubprocessorConnection.pageInfo":
		if e.complexity.SubprocessorConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubprocessorConnection.PageInfo(childComplexity), true

	case "SubprocessorConnection.totalCount":
		if e.complexity.SubprocessorConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubprocessorConnection.TotalCount(childComplexity), true

	case "SubprocessorCreatePayload.subprocessor":
		if e.complexity.SubprocessorCreatePayload.Subprocessor == nil {
			break
		}

		return e.complexity.SubprocessorCreatePayload.Subprocessor(childComplexity), true

	case "SubprocessorDeletePayload.deletedID":
		if e.complexity.SubprocessorDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.SubprocessorDeletePayload.DeletedID(childComplexity), true

	case "SubprocessorEdge.cursor":
		if e.complexity.SubprocessorEdge.Cursor == nil {
			break
		}

		return e.complexity.SubprocessorEdge.Cursor(childComplexity), true

	case "SubprocessorEdge.node":
		if e.complexity.SubprocessorEdge.Node == nil {
			break
		}

		return e.complexity.SubprocessorEdge.Node(childComplexity), true

	case "SubprocessorHistory.createdAt":
		if e.complexity.SubprocessorHistory.CreatedAt == nil {
			break
		}

		return e.complexity.SubprocessorHistory.CreatedAt(childComplexity), true

	case "SubprocessorHistory.createdBy":
		if e.complexity.SubprocessorHistory.CreatedBy == nil {
			break
		}

		return e.complexity.SubprocessorHistory.CreatedBy(childComplexity), true

	case "SubprocessorHistory.description":
		if e.complexity.SubprocessorHistory.Description == nil {
			break
		}

		return e.complexity.SubprocessorHistory.Description(childComplexity), true

	case "SubprocessorHistory.historyTime":
		if e.complexity.SubprocessorHistory.HistoryTime == nil {
			break
		}

		return e.complexity.SubprocessorHistory.HistoryTime(childComplexity), true

	case "SubprocessorHistory.id":
		if e.complexity.SubprocessorHistory.ID == nil {
			break
		}

		return e.complexity.SubprocessorHistory.ID(childComplexity), true

	case "SubprocessorHistory.logoLocalFileID":
		if e.complexity.SubprocessorHistory.LogoLocalFileID == nil {
			break
		}

		return e.complexity.SubprocessorHistory.LogoLocalFileID(childComplexity), true

	case "SubprocessorHistory.logoRemoteURL":
		if e.complexity.SubprocessorHistory.LogoRemoteURL == nil {
			break
		}

		return e.complexity.SubprocessorHistory.LogoRemoteURL(childComplexity), true

	case "SubprocessorHistory.name":
		if e.complexity.SubprocessorHistory.Name == nil {
			break
		}

		return e.complexity.SubprocessorHistory.Name(childComplexity), true

	case "SubprocessorHistory.operation":
		if e.complexity.SubprocessorHistory.Operation == nil {
			break
		}

		return e.complexity.SubprocessorHistory.Operation(childComplexity), true

	case "SubprocessorHistory.ownerID":
		if e.complexity.SubprocessorHistory.OwnerID == nil {
			break
		}

		return e.complexity.SubprocessorHistory.OwnerID(childComplexity), true

	case "SubprocessorHistory.ref":
		if e.complexity.SubprocessorHistory.Ref == nil {
			break
		}

		return e.complexity.SubprocessorHistory.Ref(childComplexity), true

	case "SubprocessorHistory.systemOwned":
		if e.complexity.SubprocessorHistory.SystemOwned == nil {
			break
		}

		return e.complexity.SubprocessorHistory.SystemOwned(childComplexity), true

	case "SubprocessorHistory.tags":
		if e.complexity.SubprocessorHistory.Tags == nil {
			break
		}

		return e.complexity.SubprocessorHistory.Tags(childComplexity), true

	case "SubprocessorHistory.updatedAt":
		if e.complexity.SubprocessorHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.SubprocessorHistory.UpdatedAt(childComplexity), true

	case "SubprocessorHistory.updatedBy":
		if e.complexity.SubprocessorHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.SubprocessorHistory.UpdatedBy(childComplexity), true

	case "SubprocessorHistoryConnection.edges":
		if e.complexity.SubprocessorHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.SubprocessorHistoryConnection.Edges(childComplexity), true

	case "SubprocessorHistoryConnection.pageInfo":
		if e.complexity.SubprocessorHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubprocessorHistoryConnection.PageInfo(childComplexity), true

	case "SubprocessorHistoryConnection.totalCount":
		if e.complexity.SubprocessorHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubprocessorHistoryConnection.TotalCount(childComplexity), true

	case "SubprocessorHistoryEdge.cursor":
		if e.complexity.SubprocessorHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.SubprocessorHistoryEdge.Cursor(childComplexity), true

	case "SubprocessorHistoryEdge.node":
		if e.complexity.SubprocessorHistoryEdge.Node == nil {
			break
		}

		return e.complexity.SubprocessorHistoryEdge.Node(childComplexity), true

	case "SubprocessorUpdatePayload.subprocessor":
		if e.complexity.SubprocessorUpdatePayload.Subprocessor == nil {
			break
		}

		return e.complexity.SubprocessorUpdatePayload.Subprocessor(childComplexity), true

	case "Subscriber.active":
		if e.complexity.Subscriber.Active == nil {
			break
		}

		return e.complexity.Subscriber.Active(childComplexity), true

	case "Subscriber.createdAt":
		if e.complexity.Subscriber.CreatedAt == nil {
			break
		}

		return e.complexity.Subscriber.CreatedAt(childComplexity), true

	case "Subscriber.createdBy":
		if e.complexity.Subscriber.CreatedBy == nil {
			break
		}

		return e.complexity.Subscriber.CreatedBy(childComplexity), true

	case "Subscriber.email":
		if e.complexity.Subscriber.Email == nil {
			break
		}

		return e.complexity.Subscriber.Email(childComplexity), true

	case "Subscriber.events":
		if e.complexity.Subscriber.Events == nil {
			break
		}

		args, err := ec.field_Subscriber_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscriber.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "Subscriber.id":
		if e.complexity.Subscriber.ID == nil {
			break
		}

		return e.complexity.Subscriber.ID(childComplexity), true

	case "Subscriber.owner":
		if e.complexity.Subscriber.Owner == nil {
			break
		}

		return e.complexity.Subscriber.Owner(childComplexity), true

	case "Subscriber.ownerID":
		if e.complexity.Subscriber.OwnerID == nil {
			break
		}

		return e.complexity.Subscriber.OwnerID(childComplexity), true

	case "Subscriber.phoneNumber":
		if e.complexity.Subscriber.PhoneNumber == nil {
			break
		}

		return e.complexity.Subscriber.PhoneNumber(childComplexity), true

	case "Subscriber.sendAttempts":
		if e.complexity.Subscriber.SendAttempts == nil {
			break
		}

		return e.complexity.Subscriber.SendAttempts(childComplexity), true

	case "Subscriber.tags":
		if e.complexity.Subscriber.Tags == nil {
			break
		}

		return e.complexity.Subscriber.Tags(childComplexity), true

	case "Subscriber.unsubscribed":
		if e.complexity.Subscriber.Unsubscribed == nil {
			break
		}

		return e.complexity.Subscriber.Unsubscribed(childComplexity), true

	case "Subscriber.updatedAt":
		if e.complexity.Subscriber.UpdatedAt == nil {
			break
		}

		return e.complexity.Subscriber.UpdatedAt(childComplexity), true

	case "Subscriber.updatedBy":
		if e.complexity.Subscriber.UpdatedBy == nil {
			break
		}

		return e.complexity.Subscriber.UpdatedBy(childComplexity), true

	case "Subscriber.verifiedEmail":
		if e.complexity.Subscriber.VerifiedEmail == nil {
			break
		}

		return e.complexity.Subscriber.VerifiedEmail(childComplexity), true

	case "Subscriber.verifiedPhone":
		if e.complexity.Subscriber.VerifiedPhone == nil {
			break
		}

		return e.complexity.Subscriber.VerifiedPhone(childComplexity), true

	case "SubscriberBulkCreatePayload.subscribers":
		if e.complexity.SubscriberBulkCreatePayload.Subscribers == nil {
			break
		}

		return e.complexity.SubscriberBulkCreatePayload.Subscribers(childComplexity), true

	case "SubscriberConnection.edges":
		if e.complexity.SubscriberConnection.Edges == nil {
			break
		}

		return e.complexity.SubscriberConnection.Edges(childComplexity), true

	case "SubscriberConnection.pageInfo":
		if e.complexity.SubscriberConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubscriberConnection.PageInfo(childComplexity), true

	case "SubscriberConnection.totalCount":
		if e.complexity.SubscriberConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubscriberConnection.TotalCount(childComplexity), true

	case "SubscriberCreatePayload.subscriber":
		if e.complexity.SubscriberCreatePayload.Subscriber == nil {
			break
		}

		return e.complexity.SubscriberCreatePayload.Subscriber(childComplexity), true

	case "SubscriberDeletePayload.email":
		if e.complexity.SubscriberDeletePayload.Email == nil {
			break
		}

		return e.complexity.SubscriberDeletePayload.Email(childComplexity), true

	case "SubscriberEdge.cursor":
		if e.complexity.SubscriberEdge.Cursor == nil {
			break
		}

		return e.complexity.SubscriberEdge.Cursor(childComplexity), true

	case "SubscriberEdge.node":
		if e.complexity.SubscriberEdge.Node == nil {
			break
		}

		return e.complexity.SubscriberEdge.Node(childComplexity), true

	case "SubscriberUpdatePayload.subscriber":
		if e.complexity.SubscriberUpdatePayload.Subscriber == nil {
			break
		}

		return e.complexity.SubscriberUpdatePayload.Subscriber(childComplexity), true

	case "TFASetting.createdAt":
		if e.complexity.TFASetting.CreatedAt == nil {
			break
		}

		return e.complexity.TFASetting.CreatedAt(childComplexity), true

	case "TFASetting.createdBy":
		if e.complexity.TFASetting.CreatedBy == nil {
			break
		}

		return e.complexity.TFASetting.CreatedBy(childComplexity), true

	case "TFASetting.id":
		if e.complexity.TFASetting.ID == nil {
			break
		}

		return e.complexity.TFASetting.ID(childComplexity), true

	case "TFASetting.owner":
		if e.complexity.TFASetting.Owner == nil {
			break
		}

		return e.complexity.TFASetting.Owner(childComplexity), true

	case "TFASetting.totpAllowed":
		if e.complexity.TFASetting.TotpAllowed == nil {
			break
		}

		return e.complexity.TFASetting.TotpAllowed(childComplexity), true

	case "TFASetting.updatedAt":
		if e.complexity.TFASetting.UpdatedAt == nil {
			break
		}

		return e.complexity.TFASetting.UpdatedAt(childComplexity), true

	case "TFASetting.updatedBy":
		if e.complexity.TFASetting.UpdatedBy == nil {
			break
		}

		return e.complexity.TFASetting.UpdatedBy(childComplexity), true

	case "TFASetting.verified":
		if e.complexity.TFASetting.Verified == nil {
			break
		}

		return e.complexity.TFASetting.Verified(childComplexity), true

	case "TFASettingConnection.edges":
		if e.complexity.TFASettingConnection.Edges == nil {
			break
		}

		return e.complexity.TFASettingConnection.Edges(childComplexity), true

	case "TFASettingConnection.pageInfo":
		if e.complexity.TFASettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.TFASettingConnection.PageInfo(childComplexity), true

	case "TFASettingConnection.totalCount":
		if e.complexity.TFASettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.TFASettingConnection.TotalCount(childComplexity), true

	case "TFASettingCreatePayload.qrCode":
		if e.complexity.TFASettingCreatePayload.QRCode == nil {
			break
		}

		return e.complexity.TFASettingCreatePayload.QRCode(childComplexity), true

	case "TFASettingCreatePayload.tfaSecret":
		if e.complexity.TFASettingCreatePayload.TfaSecret == nil {
			break
		}

		return e.complexity.TFASettingCreatePayload.TfaSecret(childComplexity), true

	case "TFASettingCreatePayload.tfaSetting":
		if e.complexity.TFASettingCreatePayload.TfaSetting == nil {
			break
		}

		return e.complexity.TFASettingCreatePayload.TfaSetting(childComplexity), true

	case "TFASettingEdge.cursor":
		if e.complexity.TFASettingEdge.Cursor == nil {
			break
		}

		return e.complexity.TFASettingEdge.Cursor(childComplexity), true

	case "TFASettingEdge.node":
		if e.complexity.TFASettingEdge.Node == nil {
			break
		}

		return e.complexity.TFASettingEdge.Node(childComplexity), true

	case "TFASettingUpdatePayload.qrCode":
		if e.complexity.TFASettingUpdatePayload.QRCode == nil {
			break
		}

		return e.complexity.TFASettingUpdatePayload.QRCode(childComplexity), true

	case "TFASettingUpdatePayload.recoveryCodes":
		if e.complexity.TFASettingUpdatePayload.RecoveryCodes == nil {
			break
		}

		return e.complexity.TFASettingUpdatePayload.RecoveryCodes(childComplexity), true

	case "TFASettingUpdatePayload.tfaSecret":
		if e.complexity.TFASettingUpdatePayload.TfaSecret == nil {
			break
		}

		return e.complexity.TFASettingUpdatePayload.TfaSecret(childComplexity), true

	case "TFASettingUpdatePayload.tfaSetting":
		if e.complexity.TFASettingUpdatePayload.TfaSetting == nil {
			break
		}

		return e.complexity.TFASettingUpdatePayload.TfaSetting(childComplexity), true

	case "Task.assignee":
		if e.complexity.Task.Assignee == nil {
			break
		}

		return e.complexity.Task.Assignee(childComplexity), true

	case "Task.assigneeID":
		if e.complexity.Task.AssigneeID == nil {
			break
		}

		return e.complexity.Task.AssigneeID(childComplexity), true

	case "Task.assigner":
		if e.complexity.Task.Assigner == nil {
			break
		}

		return e.complexity.Task.Assigner(childComplexity), true

	case "Task.assignerID":
		if e.complexity.Task.AssignerID == nil {
			break
		}

		return e.complexity.Task.AssignerID(childComplexity), true

	case "Task.category":
		if e.complexity.Task.Category == nil {
			break
		}

		return e.complexity.Task.Category(childComplexity), true

	case "Task.comments":
		if e.complexity.Task.Comments == nil {
			break
		}

		args, err := ec.field_Task_comments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Comments(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.NoteOrder), args["where"].(*generated.NoteWhereInput)), true

	case "Task.completed":
		if e.complexity.Task.Completed == nil {
			break
		}

		return e.complexity.Task.Completed(childComplexity), true

	case "Task.controlImplementations":
		if e.complexity.Task.ControlImplementations == nil {
			break
		}

		args, err := ec.field_Task_controlImplementations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.ControlImplementations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlImplementationOrder), args["where"].(*generated.ControlImplementationWhereInput)), true

	case "Task.controlObjectives":
		if e.complexity.Task.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Task_controlObjectives_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlObjectiveOrder), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Task.controls":
		if e.complexity.Task.Controls == nil {
			break
		}

		args, err := ec.field_Task_controls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ControlOrder), args["where"].(*generated.ControlWhereInput)), true

	case "Task.createdAt":
		if e.complexity.Task.CreatedAt == nil {
			break
		}

		return e.complexity.Task.CreatedAt(childComplexity), true

	case "Task.createdBy":
		if e.complexity.Task.CreatedBy == nil {
			break
		}

		return e.complexity.Task.CreatedBy(childComplexity), true

	case "Task.details":
		if e.complexity.Task.Details == nil {
			break
		}

		return e.complexity.Task.Details(childComplexity), true

	case "Task.displayID":
		if e.complexity.Task.DisplayID == nil {
			break
		}

		return e.complexity.Task.DisplayID(childComplexity), true

	case "Task.due":
		if e.complexity.Task.Due == nil {
			break
		}

		return e.complexity.Task.Due(childComplexity), true

	case "Task.evidence":
		if e.complexity.Task.Evidence == nil {
			break
		}

		args, err := ec.field_Task_evidence_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Evidence(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EvidenceOrder), args["where"].(*generated.EvidenceWhereInput)), true

	case "Task.groups":
		if e.complexity.Task.Groups == nil {
			break
		}

		args, err := ec.field_Task_groups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true

	case "Task.internalPolicies":
		if e.complexity.Task.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Task_internalPolicies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.InternalPolicyOrder), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Task.owner":
		if e.complexity.Task.Owner == nil {
			break
		}

		return e.complexity.Task.Owner(childComplexity), true

	case "Task.ownerID":
		if e.complexity.Task.OwnerID == nil {
			break
		}

		return e.complexity.Task.OwnerID(childComplexity), true

	case "Task.procedures":
		if e.complexity.Task.Procedures == nil {
			break
		}

		args, err := ec.field_Task_procedures_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProcedureOrder), args["where"].(*generated.ProcedureWhereInput)), true

	case "Task.programs":
		if e.complexity.Task.Programs == nil {
			break
		}

		args, err := ec.field_Task_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "Task.risks":
		if e.complexity.Task.Risks == nil {
			break
		}

		args, err := ec.field_Task_risks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.RiskOrder), args["where"].(*generated.RiskWhereInput)), true

	case "Task.status":
		if e.complexity.Task.Status == nil {
			break
		}

		return e.complexity.Task.Status(childComplexity), true

	case "Task.subcontrols":
		if e.complexity.Task.Subcontrols == nil {
			break
		}

		args, err := ec.field_Task_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Task.tags":
		if e.complexity.Task.Tags == nil {
			break
		}

		return e.complexity.Task.Tags(childComplexity), true

	case "Task.title":
		if e.complexity.Task.Title == nil {
			break
		}

		return e.complexity.Task.Title(childComplexity), true

	case "Task.updatedAt":
		if e.complexity.Task.UpdatedAt == nil {
			break
		}

		return e.complexity.Task.UpdatedAt(childComplexity), true

	case "Task.updatedBy":
		if e.complexity.Task.UpdatedBy == nil {
			break
		}

		return e.complexity.Task.UpdatedBy(childComplexity), true

	case "TaskBulkCreatePayload.tasks":
		if e.complexity.TaskBulkCreatePayload.Tasks == nil {
			break
		}

		return e.complexity.TaskBulkCreatePayload.Tasks(childComplexity), true

	case "TaskBulkUpdatePayload.tasks":
		if e.complexity.TaskBulkUpdatePayload.Tasks == nil {
			break
		}

		return e.complexity.TaskBulkUpdatePayload.Tasks(childComplexity), true

	case "TaskBulkUpdatePayload.updatedIDs":
		if e.complexity.TaskBulkUpdatePayload.UpdatedIDs == nil {
			break
		}

		return e.complexity.TaskBulkUpdatePayload.UpdatedIDs(childComplexity), true

	case "TaskConnection.edges":
		if e.complexity.TaskConnection.Edges == nil {
			break
		}

		return e.complexity.TaskConnection.Edges(childComplexity), true

	case "TaskConnection.pageInfo":
		if e.complexity.TaskConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskConnection.PageInfo(childComplexity), true

	case "TaskConnection.totalCount":
		if e.complexity.TaskConnection.TotalCount == nil {
			break
		}

		return e.complexity.TaskConnection.TotalCount(childComplexity), true

	case "TaskCreatePayload.task":
		if e.complexity.TaskCreatePayload.Task == nil {
			break
		}

		return e.complexity.TaskCreatePayload.Task(childComplexity), true

	case "TaskDeletePayload.deletedID":
		if e.complexity.TaskDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TaskDeletePayload.DeletedID(childComplexity), true

	case "TaskEdge.cursor":
		if e.complexity.TaskEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskEdge.Cursor(childComplexity), true

	case "TaskEdge.node":
		if e.complexity.TaskEdge.Node == nil {
			break
		}

		return e.complexity.TaskEdge.Node(childComplexity), true

	case "TaskHistory.assigneeID":
		if e.complexity.TaskHistory.AssigneeID == nil {
			break
		}

		return e.complexity.TaskHistory.AssigneeID(childComplexity), true

	case "TaskHistory.assignerID":
		if e.complexity.TaskHistory.AssignerID == nil {
			break
		}

		return e.complexity.TaskHistory.AssignerID(childComplexity), true

	case "TaskHistory.category":
		if e.complexity.TaskHistory.Category == nil {
			break
		}

		return e.complexity.TaskHistory.Category(childComplexity), true

	case "TaskHistory.completed":
		if e.complexity.TaskHistory.Completed == nil {
			break
		}

		return e.complexity.TaskHistory.Completed(childComplexity), true

	case "TaskHistory.createdAt":
		if e.complexity.TaskHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TaskHistory.CreatedAt(childComplexity), true

	case "TaskHistory.createdBy":
		if e.complexity.TaskHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TaskHistory.CreatedBy(childComplexity), true

	case "TaskHistory.details":
		if e.complexity.TaskHistory.Details == nil {
			break
		}

		return e.complexity.TaskHistory.Details(childComplexity), true

	case "TaskHistory.displayID":
		if e.complexity.TaskHistory.DisplayID == nil {
			break
		}

		return e.complexity.TaskHistory.DisplayID(childComplexity), true

	case "TaskHistory.due":
		if e.complexity.TaskHistory.Due == nil {
			break
		}

		return e.complexity.TaskHistory.Due(childComplexity), true

	case "TaskHistory.historyTime":
		if e.complexity.TaskHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TaskHistory.HistoryTime(childComplexity), true

	case "TaskHistory.id":
		if e.complexity.TaskHistory.ID == nil {
			break
		}

		return e.complexity.TaskHistory.ID(childComplexity), true

	case "TaskHistory.operation":
		if e.complexity.TaskHistory.Operation == nil {
			break
		}

		return e.complexity.TaskHistory.Operation(childComplexity), true

	case "TaskHistory.ownerID":
		if e.complexity.TaskHistory.OwnerID == nil {
			break
		}

		return e.complexity.TaskHistory.OwnerID(childComplexity), true

	case "TaskHistory.ref":
		if e.complexity.TaskHistory.Ref == nil {
			break
		}

		return e.complexity.TaskHistory.Ref(childComplexity), true

	case "TaskHistory.status":
		if e.complexity.TaskHistory.Status == nil {
			break
		}

		return e.complexity.TaskHistory.Status(childComplexity), true

	case "TaskHistory.tags":
		if e.complexity.TaskHistory.Tags == nil {
			break
		}

		return e.complexity.TaskHistory.Tags(childComplexity), true

	case "TaskHistory.title":
		if e.complexity.TaskHistory.Title == nil {
			break
		}

		return e.complexity.TaskHistory.Title(childComplexity), true

	case "TaskHistory.updatedAt":
		if e.complexity.TaskHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TaskHistory.UpdatedAt(childComplexity), true

	case "TaskHistory.updatedBy":
		if e.complexity.TaskHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TaskHistory.UpdatedBy(childComplexity), true

	case "TaskHistoryConnection.edges":
		if e.complexity.TaskHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TaskHistoryConnection.Edges(childComplexity), true

	case "TaskHistoryConnection.pageInfo":
		if e.complexity.TaskHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskHistoryConnection.PageInfo(childComplexity), true

	case "TaskHistoryConnection.totalCount":
		if e.complexity.TaskHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TaskHistoryConnection.TotalCount(childComplexity), true

	case "TaskHistoryEdge.cursor":
		if e.complexity.TaskHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskHistoryEdge.Cursor(childComplexity), true

	case "TaskHistoryEdge.node":
		if e.complexity.TaskHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TaskHistoryEdge.Node(childComplexity), true

	case "TaskUpdatePayload.task":
		if e.complexity.TaskUpdatePayload.Task == nil {
			break
		}

		return e.complexity.TaskUpdatePayload.Task(childComplexity), true

	case "Template.createdAt":
		if e.complexity.Template.CreatedAt == nil {
			break
		}

		return e.complexity.Template.CreatedAt(childComplexity), true

	case "Template.createdBy":
		if e.complexity.Template.CreatedBy == nil {
			break
		}

		return e.complexity.Template.CreatedBy(childComplexity), true

	case "Template.description":
		if e.complexity.Template.Description == nil {
			break
		}

		return e.complexity.Template.Description(childComplexity), true

	case "Template.documents":
		if e.complexity.Template.Documents == nil {
			break
		}

		args, err := ec.field_Template_documents_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Template.Documents(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.DocumentDataOrder), args["where"].(*generated.DocumentDataWhereInput)), true

	case "Template.files":
		if e.complexity.Template.Files == nil {
			break
		}

		args, err := ec.field_Template_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Template.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "Template.id":
		if e.complexity.Template.ID == nil {
			break
		}

		return e.complexity.Template.ID(childComplexity), true

	case "Template.jsonconfig":
		if e.complexity.Template.Jsonconfig == nil {
			break
		}

		return e.complexity.Template.Jsonconfig(childComplexity), true

	case "Template.kind":
		if e.complexity.Template.Kind == nil {
			break
		}

		return e.complexity.Template.Kind(childComplexity), true

	case "Template.name":
		if e.complexity.Template.Name == nil {
			break
		}

		return e.complexity.Template.Name(childComplexity), true

	case "Template.owner":
		if e.complexity.Template.Owner == nil {
			break
		}

		return e.complexity.Template.Owner(childComplexity), true

	case "Template.ownerID":
		if e.complexity.Template.OwnerID == nil {
			break
		}

		return e.complexity.Template.OwnerID(childComplexity), true

	case "Template.tags":
		if e.complexity.Template.Tags == nil {
			break
		}

		return e.complexity.Template.Tags(childComplexity), true

	case "Template.templateType":
		if e.complexity.Template.TemplateType == nil {
			break
		}

		return e.complexity.Template.TemplateType(childComplexity), true

	case "Template.uischema":
		if e.complexity.Template.Uischema == nil {
			break
		}

		return e.complexity.Template.Uischema(childComplexity), true

	case "Template.updatedAt":
		if e.complexity.Template.UpdatedAt == nil {
			break
		}

		return e.complexity.Template.UpdatedAt(childComplexity), true

	case "Template.updatedBy":
		if e.complexity.Template.UpdatedBy == nil {
			break
		}

		return e.complexity.Template.UpdatedBy(childComplexity), true

	case "TemplateBulkCreatePayload.templates":
		if e.complexity.TemplateBulkCreatePayload.Templates == nil {
			break
		}

		return e.complexity.TemplateBulkCreatePayload.Templates(childComplexity), true

	case "TemplateConnection.edges":
		if e.complexity.TemplateConnection.Edges == nil {
			break
		}

		return e.complexity.TemplateConnection.Edges(childComplexity), true

	case "TemplateConnection.pageInfo":
		if e.complexity.TemplateConnection.PageInfo == nil {
			break
		}

		return e.complexity.TemplateConnection.PageInfo(childComplexity), true

	case "TemplateConnection.totalCount":
		if e.complexity.TemplateConnection.TotalCount == nil {
			break
		}

		return e.complexity.TemplateConnection.TotalCount(childComplexity), true

	case "TemplateCreatePayload.template":
		if e.complexity.TemplateCreatePayload.Template == nil {
			break
		}

		return e.complexity.TemplateCreatePayload.Template(childComplexity), true

	case "TemplateDeletePayload.deletedID":
		if e.complexity.TemplateDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TemplateDeletePayload.DeletedID(childComplexity), true

	case "TemplateEdge.cursor":
		if e.complexity.TemplateEdge.Cursor == nil {
			break
		}

		return e.complexity.TemplateEdge.Cursor(childComplexity), true

	case "TemplateEdge.node":
		if e.complexity.TemplateEdge.Node == nil {
			break
		}

		return e.complexity.TemplateEdge.Node(childComplexity), true

	case "TemplateHistory.createdAt":
		if e.complexity.TemplateHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TemplateHistory.CreatedAt(childComplexity), true

	case "TemplateHistory.createdBy":
		if e.complexity.TemplateHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TemplateHistory.CreatedBy(childComplexity), true

	case "TemplateHistory.description":
		if e.complexity.TemplateHistory.Description == nil {
			break
		}

		return e.complexity.TemplateHistory.Description(childComplexity), true

	case "TemplateHistory.historyTime":
		if e.complexity.TemplateHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TemplateHistory.HistoryTime(childComplexity), true

	case "TemplateHistory.id":
		if e.complexity.TemplateHistory.ID == nil {
			break
		}

		return e.complexity.TemplateHistory.ID(childComplexity), true

	case "TemplateHistory.jsonconfig":
		if e.complexity.TemplateHistory.Jsonconfig == nil {
			break
		}

		return e.complexity.TemplateHistory.Jsonconfig(childComplexity), true

	case "TemplateHistory.kind":
		if e.complexity.TemplateHistory.Kind == nil {
			break
		}

		return e.complexity.TemplateHistory.Kind(childComplexity), true

	case "TemplateHistory.name":
		if e.complexity.TemplateHistory.Name == nil {
			break
		}

		return e.complexity.TemplateHistory.Name(childComplexity), true

	case "TemplateHistory.operation":
		if e.complexity.TemplateHistory.Operation == nil {
			break
		}

		return e.complexity.TemplateHistory.Operation(childComplexity), true

	case "TemplateHistory.ownerID":
		if e.complexity.TemplateHistory.OwnerID == nil {
			break
		}

		return e.complexity.TemplateHistory.OwnerID(childComplexity), true

	case "TemplateHistory.ref":
		if e.complexity.TemplateHistory.Ref == nil {
			break
		}

		return e.complexity.TemplateHistory.Ref(childComplexity), true

	case "TemplateHistory.tags":
		if e.complexity.TemplateHistory.Tags == nil {
			break
		}

		return e.complexity.TemplateHistory.Tags(childComplexity), true

	case "TemplateHistory.templateType":
		if e.complexity.TemplateHistory.TemplateType == nil {
			break
		}

		return e.complexity.TemplateHistory.TemplateType(childComplexity), true

	case "TemplateHistory.uischema":
		if e.complexity.TemplateHistory.Uischema == nil {
			break
		}

		return e.complexity.TemplateHistory.Uischema(childComplexity), true

	case "TemplateHistory.updatedAt":
		if e.complexity.TemplateHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TemplateHistory.UpdatedAt(childComplexity), true

	case "TemplateHistory.updatedBy":
		if e.complexity.TemplateHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TemplateHistory.UpdatedBy(childComplexity), true

	case "TemplateHistoryConnection.edges":
		if e.complexity.TemplateHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TemplateHistoryConnection.Edges(childComplexity), true

	case "TemplateHistoryConnection.pageInfo":
		if e.complexity.TemplateHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TemplateHistoryConnection.PageInfo(childComplexity), true

	case "TemplateHistoryConnection.totalCount":
		if e.complexity.TemplateHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TemplateHistoryConnection.TotalCount(childComplexity), true

	case "TemplateHistoryEdge.cursor":
		if e.complexity.TemplateHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TemplateHistoryEdge.Cursor(childComplexity), true

	case "TemplateHistoryEdge.node":
		if e.complexity.TemplateHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TemplateHistoryEdge.Node(childComplexity), true

	case "TemplateUpdatePayload.template":
		if e.complexity.TemplateUpdatePayload.Template == nil {
			break
		}

		return e.complexity.TemplateUpdatePayload.Template(childComplexity), true

	case "TrustCenter.createdAt":
		if e.complexity.TrustCenter.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenter.CreatedAt(childComplexity), true

	case "TrustCenter.createdBy":
		if e.complexity.TrustCenter.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenter.CreatedBy(childComplexity), true

	case "TrustCenter.customDomain":
		if e.complexity.TrustCenter.CustomDomain == nil {
			break
		}

		return e.complexity.TrustCenter.CustomDomain(childComplexity), true

	case "TrustCenter.customDomainID":
		if e.complexity.TrustCenter.CustomDomainID == nil {
			break
		}

		return e.complexity.TrustCenter.CustomDomainID(childComplexity), true

	case "TrustCenter.id":
		if e.complexity.TrustCenter.ID == nil {
			break
		}

		return e.complexity.TrustCenter.ID(childComplexity), true

	case "TrustCenter.owner":
		if e.complexity.TrustCenter.Owner == nil {
			break
		}

		return e.complexity.TrustCenter.Owner(childComplexity), true

	case "TrustCenter.ownerID":
		if e.complexity.TrustCenter.OwnerID == nil {
			break
		}

		return e.complexity.TrustCenter.OwnerID(childComplexity), true

	case "TrustCenter.setting":
		if e.complexity.TrustCenter.Setting == nil {
			break
		}

		return e.complexity.TrustCenter.Setting(childComplexity), true

	case "TrustCenter.slug":
		if e.complexity.TrustCenter.Slug == nil {
			break
		}

		return e.complexity.TrustCenter.Slug(childComplexity), true

	case "TrustCenter.tags":
		if e.complexity.TrustCenter.Tags == nil {
			break
		}

		return e.complexity.TrustCenter.Tags(childComplexity), true

	case "TrustCenter.trustCenterCompliances":
		if e.complexity.TrustCenter.TrustCenterCompliances == nil {
			break
		}

		args, err := ec.field_TrustCenter_trustCenterCompliances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrustCenter.TrustCenterCompliances(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterComplianceOrder), args["where"].(*generated.TrustCenterComplianceWhereInput)), true

	case "TrustCenter.trustCenterSubprocessors":
		if e.complexity.TrustCenter.TrustCenterSubprocessors == nil {
			break
		}

		args, err := ec.field_TrustCenter_trustCenterSubprocessors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrustCenter.TrustCenterSubprocessors(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TrustCenterSubprocessorOrder), args["where"].(*generated.TrustCenterSubprocessorWhereInput)), true

	case "TrustCenter.updatedAt":
		if e.complexity.TrustCenter.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenter.UpdatedAt(childComplexity), true

	case "TrustCenter.updatedBy":
		if e.complexity.TrustCenter.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenter.UpdatedBy(childComplexity), true

	case "TrustCenterCompliance.createdAt":
		if e.complexity.TrustCenterCompliance.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.CreatedAt(childComplexity), true

	case "TrustCenterCompliance.createdBy":
		if e.complexity.TrustCenterCompliance.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.CreatedBy(childComplexity), true

	case "TrustCenterCompliance.id":
		if e.complexity.TrustCenterCompliance.ID == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.ID(childComplexity), true

	case "TrustCenterCompliance.standard":
		if e.complexity.TrustCenterCompliance.Standard == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.Standard(childComplexity), true

	case "TrustCenterCompliance.standardID":
		if e.complexity.TrustCenterCompliance.StandardID == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.StandardID(childComplexity), true

	case "TrustCenterCompliance.tags":
		if e.complexity.TrustCenterCompliance.Tags == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.Tags(childComplexity), true

	case "TrustCenterCompliance.trustCenter":
		if e.complexity.TrustCenterCompliance.TrustCenter == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.TrustCenter(childComplexity), true

	case "TrustCenterCompliance.trustCenterID":
		if e.complexity.TrustCenterCompliance.TrustCenterID == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.TrustCenterID(childComplexity), true

	case "TrustCenterCompliance.updatedAt":
		if e.complexity.TrustCenterCompliance.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.UpdatedAt(childComplexity), true

	case "TrustCenterCompliance.updatedBy":
		if e.complexity.TrustCenterCompliance.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterCompliance.UpdatedBy(childComplexity), true

	case "TrustCenterComplianceBulkCreatePayload.trustCenterCompliances":
		if e.complexity.TrustCenterComplianceBulkCreatePayload.TrustCenterCompliances == nil {
			break
		}

		return e.complexity.TrustCenterComplianceBulkCreatePayload.TrustCenterCompliances(childComplexity), true

	case "TrustCenterComplianceConnection.edges":
		if e.complexity.TrustCenterComplianceConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterComplianceConnection.Edges(childComplexity), true

	case "TrustCenterComplianceConnection.pageInfo":
		if e.complexity.TrustCenterComplianceConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterComplianceConnection.PageInfo(childComplexity), true

	case "TrustCenterComplianceConnection.totalCount":
		if e.complexity.TrustCenterComplianceConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterComplianceConnection.TotalCount(childComplexity), true

	case "TrustCenterComplianceCreatePayload.trustCenterCompliance":
		if e.complexity.TrustCenterComplianceCreatePayload.TrustCenterCompliance == nil {
			break
		}

		return e.complexity.TrustCenterComplianceCreatePayload.TrustCenterCompliance(childComplexity), true

	case "TrustCenterComplianceDeletePayload.deletedID":
		if e.complexity.TrustCenterComplianceDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TrustCenterComplianceDeletePayload.DeletedID(childComplexity), true

	case "TrustCenterComplianceEdge.cursor":
		if e.complexity.TrustCenterComplianceEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterComplianceEdge.Cursor(childComplexity), true

	case "TrustCenterComplianceEdge.node":
		if e.complexity.TrustCenterComplianceEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterComplianceEdge.Node(childComplexity), true

	case "TrustCenterComplianceHistory.createdAt":
		if e.complexity.TrustCenterComplianceHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.CreatedAt(childComplexity), true

	case "TrustCenterComplianceHistory.createdBy":
		if e.complexity.TrustCenterComplianceHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.CreatedBy(childComplexity), true

	case "TrustCenterComplianceHistory.historyTime":
		if e.complexity.TrustCenterComplianceHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.HistoryTime(childComplexity), true

	case "TrustCenterComplianceHistory.id":
		if e.complexity.TrustCenterComplianceHistory.ID == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.ID(childComplexity), true

	case "TrustCenterComplianceHistory.operation":
		if e.complexity.TrustCenterComplianceHistory.Operation == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.Operation(childComplexity), true

	case "TrustCenterComplianceHistory.ref":
		if e.complexity.TrustCenterComplianceHistory.Ref == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.Ref(childComplexity), true

	case "TrustCenterComplianceHistory.standardID":
		if e.complexity.TrustCenterComplianceHistory.StandardID == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.StandardID(childComplexity), true

	case "TrustCenterComplianceHistory.tags":
		if e.complexity.TrustCenterComplianceHistory.Tags == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.Tags(childComplexity), true

	case "TrustCenterComplianceHistory.trustCenterID":
		if e.complexity.TrustCenterComplianceHistory.TrustCenterID == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.TrustCenterID(childComplexity), true

	case "TrustCenterComplianceHistory.updatedAt":
		if e.complexity.TrustCenterComplianceHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.UpdatedAt(childComplexity), true

	case "TrustCenterComplianceHistory.updatedBy":
		if e.complexity.TrustCenterComplianceHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistory.UpdatedBy(childComplexity), true

	case "TrustCenterComplianceHistoryConnection.edges":
		if e.complexity.TrustCenterComplianceHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistoryConnection.Edges(childComplexity), true

	case "TrustCenterComplianceHistoryConnection.pageInfo":
		if e.complexity.TrustCenterComplianceHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistoryConnection.PageInfo(childComplexity), true

	case "TrustCenterComplianceHistoryConnection.totalCount":
		if e.complexity.TrustCenterComplianceHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistoryConnection.TotalCount(childComplexity), true

	case "TrustCenterComplianceHistoryEdge.cursor":
		if e.complexity.TrustCenterComplianceHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistoryEdge.Cursor(childComplexity), true

	case "TrustCenterComplianceHistoryEdge.node":
		if e.complexity.TrustCenterComplianceHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterComplianceHistoryEdge.Node(childComplexity), true

	case "TrustCenterComplianceUpdatePayload.trustCenterCompliance":
		if e.complexity.TrustCenterComplianceUpdatePayload.TrustCenterCompliance == nil {
			break
		}

		return e.complexity.TrustCenterComplianceUpdatePayload.TrustCenterCompliance(childComplexity), true

	case "TrustCenterConnection.edges":
		if e.complexity.TrustCenterConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterConnection.Edges(childComplexity), true

	case "TrustCenterConnection.pageInfo":
		if e.complexity.TrustCenterConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterConnection.PageInfo(childComplexity), true

	case "TrustCenterConnection.totalCount":
		if e.complexity.TrustCenterConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterConnection.TotalCount(childComplexity), true

	case "TrustCenterCreatePayload.trustCenter":
		if e.complexity.TrustCenterCreatePayload.TrustCenter == nil {
			break
		}

		return e.complexity.TrustCenterCreatePayload.TrustCenter(childComplexity), true

	case "TrustCenterDeletePayload.deletedID":
		if e.complexity.TrustCenterDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TrustCenterDeletePayload.DeletedID(childComplexity), true

	case "TrustCenterDoc.createdAt":
		if e.complexity.TrustCenterDoc.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterDoc.CreatedAt(childComplexity), true

	case "TrustCenterDoc.createdBy":
		if e.complexity.TrustCenterDoc.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterDoc.CreatedBy(childComplexity), true

	case "TrustCenterDoc.id":
		if e.complexity.TrustCenterDoc.ID == nil {
			break
		}

		return e.complexity.TrustCenterDoc.ID(childComplexity), true

	case "TrustCenterDoc.tags":
		if e.complexity.TrustCenterDoc.Tags == nil {
			break
		}

		return e.complexity.TrustCenterDoc.Tags(childComplexity), true

	case "TrustCenterDoc.updatedAt":
		if e.complexity.TrustCenterDoc.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterDoc.UpdatedAt(childComplexity), true

	case "TrustCenterDoc.updatedBy":
		if e.complexity.TrustCenterDoc.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterDoc.UpdatedBy(childComplexity), true

	case "TrustCenterDocBulkCreatePayload.trustCenterDocs":
		if e.complexity.TrustCenterDocBulkCreatePayload.TrustCenterDocs == nil {
			break
		}

		return e.complexity.TrustCenterDocBulkCreatePayload.TrustCenterDocs(childComplexity), true

	case "TrustCenterDocConnection.edges":
		if e.complexity.TrustCenterDocConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterDocConnection.Edges(childComplexity), true

	case "TrustCenterDocConnection.pageInfo":
		if e.complexity.TrustCenterDocConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterDocConnection.PageInfo(childComplexity), true

	case "TrustCenterDocConnection.totalCount":
		if e.complexity.TrustCenterDocConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterDocConnection.TotalCount(childComplexity), true

	case "TrustCenterDocCreatePayload.trustCenterDoc":
		if e.complexity.TrustCenterDocCreatePayload.TrustCenterDoc == nil {
			break
		}

		return e.complexity.TrustCenterDocCreatePayload.TrustCenterDoc(childComplexity), true

	case "TrustCenterDocDeletePayload.deletedID":
		if e.complexity.TrustCenterDocDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TrustCenterDocDeletePayload.DeletedID(childComplexity), true

	case "TrustCenterDocEdge.cursor":
		if e.complexity.TrustCenterDocEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterDocEdge.Cursor(childComplexity), true

	case "TrustCenterDocEdge.node":
		if e.complexity.TrustCenterDocEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterDocEdge.Node(childComplexity), true

	case "TrustCenterDocHistory.createdAt":
		if e.complexity.TrustCenterDocHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.CreatedAt(childComplexity), true

	case "TrustCenterDocHistory.createdBy":
		if e.complexity.TrustCenterDocHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.CreatedBy(childComplexity), true

	case "TrustCenterDocHistory.historyTime":
		if e.complexity.TrustCenterDocHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.HistoryTime(childComplexity), true

	case "TrustCenterDocHistory.id":
		if e.complexity.TrustCenterDocHistory.ID == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.ID(childComplexity), true

	case "TrustCenterDocHistory.operation":
		if e.complexity.TrustCenterDocHistory.Operation == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.Operation(childComplexity), true

	case "TrustCenterDocHistory.ref":
		if e.complexity.TrustCenterDocHistory.Ref == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.Ref(childComplexity), true

	case "TrustCenterDocHistory.tags":
		if e.complexity.TrustCenterDocHistory.Tags == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.Tags(childComplexity), true

	case "TrustCenterDocHistory.updatedAt":
		if e.complexity.TrustCenterDocHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.UpdatedAt(childComplexity), true

	case "TrustCenterDocHistory.updatedBy":
		if e.complexity.TrustCenterDocHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterDocHistory.UpdatedBy(childComplexity), true

	case "TrustCenterDocHistoryConnection.edges":
		if e.complexity.TrustCenterDocHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterDocHistoryConnection.Edges(childComplexity), true

	case "TrustCenterDocHistoryConnection.pageInfo":
		if e.complexity.TrustCenterDocHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterDocHistoryConnection.PageInfo(childComplexity), true

	case "TrustCenterDocHistoryConnection.totalCount":
		if e.complexity.TrustCenterDocHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterDocHistoryConnection.TotalCount(childComplexity), true

	case "TrustCenterDocHistoryEdge.cursor":
		if e.complexity.TrustCenterDocHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterDocHistoryEdge.Cursor(childComplexity), true

	case "TrustCenterDocHistoryEdge.node":
		if e.complexity.TrustCenterDocHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterDocHistoryEdge.Node(childComplexity), true

	case "TrustCenterDocUpdatePayload.trustCenterDoc":
		if e.complexity.TrustCenterDocUpdatePayload.TrustCenterDoc == nil {
			break
		}

		return e.complexity.TrustCenterDocUpdatePayload.TrustCenterDoc(childComplexity), true

	case "TrustCenterDomainCreatePayload.customDomain":
		if e.complexity.TrustCenterDomainCreatePayload.CustomDomain == nil {
			break
		}

		return e.complexity.TrustCenterDomainCreatePayload.CustomDomain(childComplexity), true

	case "TrustCenterEdge.cursor":
		if e.complexity.TrustCenterEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterEdge.Cursor(childComplexity), true

	case "TrustCenterEdge.node":
		if e.complexity.TrustCenterEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterEdge.Node(childComplexity), true

	case "TrustCenterHistory.createdAt":
		if e.complexity.TrustCenterHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterHistory.CreatedAt(childComplexity), true

	case "TrustCenterHistory.createdBy":
		if e.complexity.TrustCenterHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterHistory.CreatedBy(childComplexity), true

	case "TrustCenterHistory.customDomainID":
		if e.complexity.TrustCenterHistory.CustomDomainID == nil {
			break
		}

		return e.complexity.TrustCenterHistory.CustomDomainID(childComplexity), true

	case "TrustCenterHistory.historyTime":
		if e.complexity.TrustCenterHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TrustCenterHistory.HistoryTime(childComplexity), true

	case "TrustCenterHistory.id":
		if e.complexity.TrustCenterHistory.ID == nil {
			break
		}

		return e.complexity.TrustCenterHistory.ID(childComplexity), true

	case "TrustCenterHistory.operation":
		if e.complexity.TrustCenterHistory.Operation == nil {
			break
		}

		return e.complexity.TrustCenterHistory.Operation(childComplexity), true

	case "TrustCenterHistory.ownerID":
		if e.complexity.TrustCenterHistory.OwnerID == nil {
			break
		}

		return e.complexity.TrustCenterHistory.OwnerID(childComplexity), true

	case "TrustCenterHistory.ref":
		if e.complexity.TrustCenterHistory.Ref == nil {
			break
		}

		return e.complexity.TrustCenterHistory.Ref(childComplexity), true

	case "TrustCenterHistory.slug":
		if e.complexity.TrustCenterHistory.Slug == nil {
			break
		}

		return e.complexity.TrustCenterHistory.Slug(childComplexity), true

	case "TrustCenterHistory.tags":
		if e.complexity.TrustCenterHistory.Tags == nil {
			break
		}

		return e.complexity.TrustCenterHistory.Tags(childComplexity), true

	case "TrustCenterHistory.updatedAt":
		if e.complexity.TrustCenterHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterHistory.UpdatedAt(childComplexity), true

	case "TrustCenterHistory.updatedBy":
		if e.complexity.TrustCenterHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterHistory.UpdatedBy(childComplexity), true

	case "TrustCenterHistoryConnection.edges":
		if e.complexity.TrustCenterHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterHistoryConnection.Edges(childComplexity), true

	case "TrustCenterHistoryConnection.pageInfo":
		if e.complexity.TrustCenterHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterHistoryConnection.PageInfo(childComplexity), true

	case "TrustCenterHistoryConnection.totalCount":
		if e.complexity.TrustCenterHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterHistoryConnection.TotalCount(childComplexity), true

	case "TrustCenterHistoryEdge.cursor":
		if e.complexity.TrustCenterHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterHistoryEdge.Cursor(childComplexity), true

	case "TrustCenterHistoryEdge.node":
		if e.complexity.TrustCenterHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterHistoryEdge.Node(childComplexity), true

	case "TrustCenterSetting.accentColor":
		if e.complexity.TrustCenterSetting.AccentColor == nil {
			break
		}

		return e.complexity.TrustCenterSetting.AccentColor(childComplexity), true

	case "TrustCenterSetting.backgroundColor":
		if e.complexity.TrustCenterSetting.BackgroundColor == nil {
			break
		}

		return e.complexity.TrustCenterSetting.BackgroundColor(childComplexity), true

	case "TrustCenterSetting.createdAt":
		if e.complexity.TrustCenterSetting.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSetting.CreatedAt(childComplexity), true

	case "TrustCenterSetting.createdBy":
		if e.complexity.TrustCenterSetting.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSetting.CreatedBy(childComplexity), true

	case "TrustCenterSetting.faviconFile":
		if e.complexity.TrustCenterSetting.FaviconFile == nil {
			break
		}

		return e.complexity.TrustCenterSetting.FaviconFile(childComplexity), true

	case "TrustCenterSetting.faviconLocalFileID":
		if e.complexity.TrustCenterSetting.FaviconLocalFileID == nil {
			break
		}

		return e.complexity.TrustCenterSetting.FaviconLocalFileID(childComplexity), true

	case "TrustCenterSetting.faviconRemoteURL":
		if e.complexity.TrustCenterSetting.FaviconRemoteURL == nil {
			break
		}

		return e.complexity.TrustCenterSetting.FaviconRemoteURL(childComplexity), true

	case "TrustCenterSetting.files":
		if e.complexity.TrustCenterSetting.Files == nil {
			break
		}

		args, err := ec.field_TrustCenterSetting_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrustCenterSetting.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "TrustCenterSetting.font":
		if e.complexity.TrustCenterSetting.Font == nil {
			break
		}

		return e.complexity.TrustCenterSetting.Font(childComplexity), true

	case "TrustCenterSetting.foregroundColor":
		if e.complexity.TrustCenterSetting.ForegroundColor == nil {
			break
		}

		return e.complexity.TrustCenterSetting.ForegroundColor(childComplexity), true

	case "TrustCenterSetting.id":
		if e.complexity.TrustCenterSetting.ID == nil {
			break
		}

		return e.complexity.TrustCenterSetting.ID(childComplexity), true

	case "TrustCenterSetting.logoFile":
		if e.complexity.TrustCenterSetting.LogoFile == nil {
			break
		}

		return e.complexity.TrustCenterSetting.LogoFile(childComplexity), true

	case "TrustCenterSetting.logoLocalFileID":
		if e.complexity.TrustCenterSetting.LogoLocalFileID == nil {
			break
		}

		return e.complexity.TrustCenterSetting.LogoLocalFileID(childComplexity), true

	case "TrustCenterSetting.logoRemoteURL":
		if e.complexity.TrustCenterSetting.LogoRemoteURL == nil {
			break
		}

		return e.complexity.TrustCenterSetting.LogoRemoteURL(childComplexity), true

	case "TrustCenterSetting.overview":
		if e.complexity.TrustCenterSetting.Overview == nil {
			break
		}

		return e.complexity.TrustCenterSetting.Overview(childComplexity), true

	case "TrustCenterSetting.primaryColor":
		if e.complexity.TrustCenterSetting.PrimaryColor == nil {
			break
		}

		return e.complexity.TrustCenterSetting.PrimaryColor(childComplexity), true

	case "TrustCenterSetting.themeMode":
		if e.complexity.TrustCenterSetting.ThemeMode == nil {
			break
		}

		return e.complexity.TrustCenterSetting.ThemeMode(childComplexity), true

	case "TrustCenterSetting.title":
		if e.complexity.TrustCenterSetting.Title == nil {
			break
		}

		return e.complexity.TrustCenterSetting.Title(childComplexity), true

	case "TrustCenterSetting.trustCenter":
		if e.complexity.TrustCenterSetting.TrustCenter == nil {
			break
		}

		return e.complexity.TrustCenterSetting.TrustCenter(childComplexity), true

	case "TrustCenterSetting.trustCenterID":
		if e.complexity.TrustCenterSetting.TrustCenterID == nil {
			break
		}

		return e.complexity.TrustCenterSetting.TrustCenterID(childComplexity), true

	case "TrustCenterSetting.updatedAt":
		if e.complexity.TrustCenterSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSetting.UpdatedAt(childComplexity), true

	case "TrustCenterSetting.updatedBy":
		if e.complexity.TrustCenterSetting.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSetting.UpdatedBy(childComplexity), true

	case "TrustCenterSettingBulkCreatePayload.trustCenterSettings":
		if e.complexity.TrustCenterSettingBulkCreatePayload.TrustCenterSettings == nil {
			break
		}

		return e.complexity.TrustCenterSettingBulkCreatePayload.TrustCenterSettings(childComplexity), true

	case "TrustCenterSettingConnection.edges":
		if e.complexity.TrustCenterSettingConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterSettingConnection.Edges(childComplexity), true

	case "TrustCenterSettingConnection.pageInfo":
		if e.complexity.TrustCenterSettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterSettingConnection.PageInfo(childComplexity), true

	case "TrustCenterSettingConnection.totalCount":
		if e.complexity.TrustCenterSettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterSettingConnection.TotalCount(childComplexity), true

	case "TrustCenterSettingCreatePayload.trustCenterSetting":
		if e.complexity.TrustCenterSettingCreatePayload.TrustCenterSetting == nil {
			break
		}

		return e.complexity.TrustCenterSettingCreatePayload.TrustCenterSetting(childComplexity), true

	case "TrustCenterSettingDeletePayload.deletedID":
		if e.complexity.TrustCenterSettingDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TrustCenterSettingDeletePayload.DeletedID(childComplexity), true

	case "TrustCenterSettingEdge.cursor":
		if e.complexity.TrustCenterSettingEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterSettingEdge.Cursor(childComplexity), true

	case "TrustCenterSettingEdge.node":
		if e.complexity.TrustCenterSettingEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterSettingEdge.Node(childComplexity), true

	case "TrustCenterSettingHistory.accentColor":
		if e.complexity.TrustCenterSettingHistory.AccentColor == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.AccentColor(childComplexity), true

	case "TrustCenterSettingHistory.backgroundColor":
		if e.complexity.TrustCenterSettingHistory.BackgroundColor == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.BackgroundColor(childComplexity), true

	case "TrustCenterSettingHistory.createdAt":
		if e.complexity.TrustCenterSettingHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.CreatedAt(childComplexity), true

	case "TrustCenterSettingHistory.createdBy":
		if e.complexity.TrustCenterSettingHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.CreatedBy(childComplexity), true

	case "TrustCenterSettingHistory.faviconLocalFileID":
		if e.complexity.TrustCenterSettingHistory.FaviconLocalFileID == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.FaviconLocalFileID(childComplexity), true

	case "TrustCenterSettingHistory.faviconRemoteURL":
		if e.complexity.TrustCenterSettingHistory.FaviconRemoteURL == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.FaviconRemoteURL(childComplexity), true

	case "TrustCenterSettingHistory.font":
		if e.complexity.TrustCenterSettingHistory.Font == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.Font(childComplexity), true

	case "TrustCenterSettingHistory.foregroundColor":
		if e.complexity.TrustCenterSettingHistory.ForegroundColor == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.ForegroundColor(childComplexity), true

	case "TrustCenterSettingHistory.historyTime":
		if e.complexity.TrustCenterSettingHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.HistoryTime(childComplexity), true

	case "TrustCenterSettingHistory.id":
		if e.complexity.TrustCenterSettingHistory.ID == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.ID(childComplexity), true

	case "TrustCenterSettingHistory.logoLocalFileID":
		if e.complexity.TrustCenterSettingHistory.LogoLocalFileID == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.LogoLocalFileID(childComplexity), true

	case "TrustCenterSettingHistory.logoRemoteURL":
		if e.complexity.TrustCenterSettingHistory.LogoRemoteURL == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.LogoRemoteURL(childComplexity), true

	case "TrustCenterSettingHistory.operation":
		if e.complexity.TrustCenterSettingHistory.Operation == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.Operation(childComplexity), true

	case "TrustCenterSettingHistory.overview":
		if e.complexity.TrustCenterSettingHistory.Overview == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.Overview(childComplexity), true

	case "TrustCenterSettingHistory.primaryColor":
		if e.complexity.TrustCenterSettingHistory.PrimaryColor == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.PrimaryColor(childComplexity), true

	case "TrustCenterSettingHistory.ref":
		if e.complexity.TrustCenterSettingHistory.Ref == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.Ref(childComplexity), true

	case "TrustCenterSettingHistory.themeMode":
		if e.complexity.TrustCenterSettingHistory.ThemeMode == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.ThemeMode(childComplexity), true

	case "TrustCenterSettingHistory.title":
		if e.complexity.TrustCenterSettingHistory.Title == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.Title(childComplexity), true

	case "TrustCenterSettingHistory.trustCenterID":
		if e.complexity.TrustCenterSettingHistory.TrustCenterID == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.TrustCenterID(childComplexity), true

	case "TrustCenterSettingHistory.updatedAt":
		if e.complexity.TrustCenterSettingHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.UpdatedAt(childComplexity), true

	case "TrustCenterSettingHistory.updatedBy":
		if e.complexity.TrustCenterSettingHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistory.UpdatedBy(childComplexity), true

	case "TrustCenterSettingHistoryConnection.edges":
		if e.complexity.TrustCenterSettingHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistoryConnection.Edges(childComplexity), true

	case "TrustCenterSettingHistoryConnection.pageInfo":
		if e.complexity.TrustCenterSettingHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistoryConnection.PageInfo(childComplexity), true

	case "TrustCenterSettingHistoryConnection.totalCount":
		if e.complexity.TrustCenterSettingHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistoryConnection.TotalCount(childComplexity), true

	case "TrustCenterSettingHistoryEdge.cursor":
		if e.complexity.TrustCenterSettingHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistoryEdge.Cursor(childComplexity), true

	case "TrustCenterSettingHistoryEdge.node":
		if e.complexity.TrustCenterSettingHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterSettingHistoryEdge.Node(childComplexity), true

	case "TrustCenterSettingUpdatePayload.trustCenterSetting":
		if e.complexity.TrustCenterSettingUpdatePayload.TrustCenterSetting == nil {
			break
		}

		return e.complexity.TrustCenterSettingUpdatePayload.TrustCenterSetting(childComplexity), true

	case "TrustCenterSubprocessor.category":
		if e.complexity.TrustCenterSubprocessor.Category == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.Category(childComplexity), true

	case "TrustCenterSubprocessor.countries":
		if e.complexity.TrustCenterSubprocessor.Countries == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.Countries(childComplexity), true

	case "TrustCenterSubprocessor.createdAt":
		if e.complexity.TrustCenterSubprocessor.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.CreatedAt(childComplexity), true

	case "TrustCenterSubprocessor.createdBy":
		if e.complexity.TrustCenterSubprocessor.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.CreatedBy(childComplexity), true

	case "TrustCenterSubprocessor.id":
		if e.complexity.TrustCenterSubprocessor.ID == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.ID(childComplexity), true

	case "TrustCenterSubprocessor.subprocessor":
		if e.complexity.TrustCenterSubprocessor.Subprocessor == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.Subprocessor(childComplexity), true

	case "TrustCenterSubprocessor.subprocessorID":
		if e.complexity.TrustCenterSubprocessor.SubprocessorID == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.SubprocessorID(childComplexity), true

	case "TrustCenterSubprocessor.trustCenter":
		if e.complexity.TrustCenterSubprocessor.TrustCenter == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.TrustCenter(childComplexity), true

	case "TrustCenterSubprocessor.trustCenterID":
		if e.complexity.TrustCenterSubprocessor.TrustCenterID == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.TrustCenterID(childComplexity), true

	case "TrustCenterSubprocessor.updatedAt":
		if e.complexity.TrustCenterSubprocessor.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.UpdatedAt(childComplexity), true

	case "TrustCenterSubprocessor.updatedBy":
		if e.complexity.TrustCenterSubprocessor.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessor.UpdatedBy(childComplexity), true

	case "TrustCenterSubprocessorBulkCreatePayload.trustCenterSubprocessors":
		if e.complexity.TrustCenterSubprocessorBulkCreatePayload.TrustCenterSubprocessors == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorBulkCreatePayload.TrustCenterSubprocessors(childComplexity), true

	case "TrustCenterSubprocessorConnection.edges":
		if e.complexity.TrustCenterSubprocessorConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorConnection.Edges(childComplexity), true

	case "TrustCenterSubprocessorConnection.pageInfo":
		if e.complexity.TrustCenterSubprocessorConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorConnection.PageInfo(childComplexity), true

	case "TrustCenterSubprocessorConnection.totalCount":
		if e.complexity.TrustCenterSubprocessorConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorConnection.TotalCount(childComplexity), true

	case "TrustCenterSubprocessorCreatePayload.trustCenterSubprocessor":
		if e.complexity.TrustCenterSubprocessorCreatePayload.TrustCenterSubprocessor == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorCreatePayload.TrustCenterSubprocessor(childComplexity), true

	case "TrustCenterSubprocessorDeletePayload.deletedID":
		if e.complexity.TrustCenterSubprocessorDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorDeletePayload.DeletedID(childComplexity), true

	case "TrustCenterSubprocessorEdge.cursor":
		if e.complexity.TrustCenterSubprocessorEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorEdge.Cursor(childComplexity), true

	case "TrustCenterSubprocessorEdge.node":
		if e.complexity.TrustCenterSubprocessorEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorEdge.Node(childComplexity), true

	case "TrustCenterSubprocessorHistory.category":
		if e.complexity.TrustCenterSubprocessorHistory.Category == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.Category(childComplexity), true

	case "TrustCenterSubprocessorHistory.countries":
		if e.complexity.TrustCenterSubprocessorHistory.Countries == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.Countries(childComplexity), true

	case "TrustCenterSubprocessorHistory.createdAt":
		if e.complexity.TrustCenterSubprocessorHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.CreatedAt(childComplexity), true

	case "TrustCenterSubprocessorHistory.createdBy":
		if e.complexity.TrustCenterSubprocessorHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.CreatedBy(childComplexity), true

	case "TrustCenterSubprocessorHistory.historyTime":
		if e.complexity.TrustCenterSubprocessorHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.HistoryTime(childComplexity), true

	case "TrustCenterSubprocessorHistory.id":
		if e.complexity.TrustCenterSubprocessorHistory.ID == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.ID(childComplexity), true

	case "TrustCenterSubprocessorHistory.operation":
		if e.complexity.TrustCenterSubprocessorHistory.Operation == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.Operation(childComplexity), true

	case "TrustCenterSubprocessorHistory.ref":
		if e.complexity.TrustCenterSubprocessorHistory.Ref == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.Ref(childComplexity), true

	case "TrustCenterSubprocessorHistory.subprocessorID":
		if e.complexity.TrustCenterSubprocessorHistory.SubprocessorID == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.SubprocessorID(childComplexity), true

	case "TrustCenterSubprocessorHistory.trustCenterID":
		if e.complexity.TrustCenterSubprocessorHistory.TrustCenterID == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.TrustCenterID(childComplexity), true

	case "TrustCenterSubprocessorHistory.updatedAt":
		if e.complexity.TrustCenterSubprocessorHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.UpdatedAt(childComplexity), true

	case "TrustCenterSubprocessorHistory.updatedBy":
		if e.complexity.TrustCenterSubprocessorHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistory.UpdatedBy(childComplexity), true

	case "TrustCenterSubprocessorHistoryConnection.edges":
		if e.complexity.TrustCenterSubprocessorHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistoryConnection.Edges(childComplexity), true

	case "TrustCenterSubprocessorHistoryConnection.pageInfo":
		if e.complexity.TrustCenterSubprocessorHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistoryConnection.PageInfo(childComplexity), true

	case "TrustCenterSubprocessorHistoryConnection.totalCount":
		if e.complexity.TrustCenterSubprocessorHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistoryConnection.TotalCount(childComplexity), true

	case "TrustCenterSubprocessorHistoryEdge.cursor":
		if e.complexity.TrustCenterSubprocessorHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistoryEdge.Cursor(childComplexity), true

	case "TrustCenterSubprocessorHistoryEdge.node":
		if e.complexity.TrustCenterSubprocessorHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorHistoryEdge.Node(childComplexity), true

	case "TrustCenterSubprocessorUpdatePayload.trustCenterSubprocessor":
		if e.complexity.TrustCenterSubprocessorUpdatePayload.TrustCenterSubprocessor == nil {
			break
		}

		return e.complexity.TrustCenterSubprocessorUpdatePayload.TrustCenterSubprocessor(childComplexity), true

	case "TrustCenterUpdatePayload.trustCenter":
		if e.complexity.TrustCenterUpdatePayload.TrustCenter == nil {
			break
		}

		return e.complexity.TrustCenterUpdatePayload.TrustCenter(childComplexity), true

	case "User.actionPlans":
		if e.complexity.User.ActionPlans == nil {
			break
		}

		args, err := ec.field_User_actionPlans_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ActionPlanOrder), args["where"].(*generated.ActionPlanWhereInput)), true

	case "User.assigneeTasks":
		if e.complexity.User.AssigneeTasks == nil {
			break
		}

		args, err := ec.field_User_assigneeTasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.AssigneeTasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "User.assignerTasks":
		if e.complexity.User.AssignerTasks == nil {
			break
		}

		args, err := ec.field_User_assignerTasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.AssignerTasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TaskOrder), args["where"].(*generated.TaskWhereInput)), true

	case "User.authProvider":
		if e.complexity.User.AuthProvider == nil {
			break
		}

		return e.complexity.User.AuthProvider(childComplexity), true

	case "User.avatarFile":
		if e.complexity.User.AvatarFile == nil {
			break
		}

		return e.complexity.User.AvatarFile(childComplexity), true

	case "User.avatarLocalFileID":
		if e.complexity.User.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.User.AvatarLocalFileID(childComplexity), true

	case "User.avatarRemoteURL":
		if e.complexity.User.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.User.AvatarRemoteURL(childComplexity), true

	case "User.avatarUpdatedAt":
		if e.complexity.User.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.User.AvatarUpdatedAt(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.createdBy":
		if e.complexity.User.CreatedBy == nil {
			break
		}

		return e.complexity.User.CreatedBy(childComplexity), true

	case "User.displayID":
		if e.complexity.User.DisplayID == nil {
			break
		}

		return e.complexity.User.DisplayID(childComplexity), true

	case "User.displayName":
		if e.complexity.User.DisplayName == nil {
			break
		}

		return e.complexity.User.DisplayName(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.events":
		if e.complexity.User.Events == nil {
			break
		}

		args, err := ec.field_User_events_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.EventOrder), args["where"].(*generated.EventWhereInput)), true

	case "User.files":
		if e.complexity.User.Files == nil {
			break
		}

		args, err := ec.field_User_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.groupMemberships":
		if e.complexity.User.GroupMemberships == nil {
			break
		}

		args, err := ec.field_User_groupMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.GroupMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupMembershipOrder), args["where"].(*generated.GroupMembershipWhereInput)), true

	case "User.groups":
		if e.complexity.User.Groups == nil {
			break
		}

		args, err := ec.field_User_groups_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastLoginProvider":
		if e.complexity.User.LastLoginProvider == nil {
			break
		}

		return e.complexity.User.LastLoginProvider(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.lastSeen":
		if e.complexity.User.LastSeen == nil {
			break
		}

		return e.complexity.User.LastSeen(childComplexity), true

	case "User.orgMemberships":
		if e.complexity.User.OrgMemberships == nil {
			break
		}

		args, err := ec.field_User_orgMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.OrgMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrgMembershipOrder), args["where"].(*generated.OrgMembershipWhereInput)), true

	case "User.organizations":
		if e.complexity.User.Organizations == nil {
			break
		}

		args, err := ec.field_User_organizations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Organizations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.OrganizationOrder), args["where"].(*generated.OrganizationWhereInput)), true

	case "User.personalAccessTokens":
		if e.complexity.User.PersonalAccessTokens == nil {
			break
		}

		args, err := ec.field_User_personalAccessTokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.PersonalAccessTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.PersonalAccessTokenOrder), args["where"].(*generated.PersonalAccessTokenWhereInput)), true

	case "User.programMemberships":
		if e.complexity.User.ProgramMemberships == nil {
			break
		}

		args, err := ec.field_User_programMemberships_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.ProgramMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramMembershipOrder), args["where"].(*generated.ProgramMembershipWhereInput)), true

	case "User.programs":
		if e.complexity.User.Programs == nil {
			break
		}

		args, err := ec.field_User_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.ProgramOrder), args["where"].(*generated.ProgramWhereInput)), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.setting":
		if e.complexity.User.Setting == nil {
			break
		}

		return e.complexity.User.Setting(childComplexity), true

	case "User.sub":
		if e.complexity.User.Sub == nil {
			break
		}

		return e.complexity.User.Sub(childComplexity), true

	case "User.subcontrols":
		if e.complexity.User.Subcontrols == nil {
			break
		}

		args, err := ec.field_User_subcontrols_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.SubcontrolOrder), args["where"].(*generated.SubcontrolWhereInput)), true

	case "User.tags":
		if e.complexity.User.Tags == nil {
			break
		}

		return e.complexity.User.Tags(childComplexity), true

	case "User.tfaSettings":
		if e.complexity.User.TfaSettings == nil {
			break
		}

		args, err := ec.field_User_tfaSettings_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.TfaSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.TFASettingOrder), args["where"].(*generated.TFASettingWhereInput)), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.updatedBy":
		if e.complexity.User.UpdatedBy == nil {
			break
		}

		return e.complexity.User.UpdatedBy(childComplexity), true

	case "User.webauthns":
		if e.complexity.User.Webauthns == nil {
			break
		}

		args, err := ec.field_User_webauthns_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Webauthns(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.WebauthnOrder), args["where"].(*generated.WebauthnWhereInput)), true

	case "UserBulkCreatePayload.users":
		if e.complexity.UserBulkCreatePayload.Users == nil {
			break
		}

		return e.complexity.UserBulkCreatePayload.Users(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserCreatePayload.user":
		if e.complexity.UserCreatePayload.User == nil {
			break
		}

		return e.complexity.UserCreatePayload.User(childComplexity), true

	case "UserDeletePayload.deletedID":
		if e.complexity.UserDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.UserDeletePayload.DeletedID(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserHistory.authProvider":
		if e.complexity.UserHistory.AuthProvider == nil {
			break
		}

		return e.complexity.UserHistory.AuthProvider(childComplexity), true

	case "UserHistory.avatarLocalFileID":
		if e.complexity.UserHistory.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.UserHistory.AvatarLocalFileID(childComplexity), true

	case "UserHistory.avatarRemoteURL":
		if e.complexity.UserHistory.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.UserHistory.AvatarRemoteURL(childComplexity), true

	case "UserHistory.avatarUpdatedAt":
		if e.complexity.UserHistory.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.UserHistory.AvatarUpdatedAt(childComplexity), true

	case "UserHistory.createdAt":
		if e.complexity.UserHistory.CreatedAt == nil {
			break
		}

		return e.complexity.UserHistory.CreatedAt(childComplexity), true

	case "UserHistory.createdBy":
		if e.complexity.UserHistory.CreatedBy == nil {
			break
		}

		return e.complexity.UserHistory.CreatedBy(childComplexity), true

	case "UserHistory.displayID":
		if e.complexity.UserHistory.DisplayID == nil {
			break
		}

		return e.complexity.UserHistory.DisplayID(childComplexity), true

	case "UserHistory.displayName":
		if e.complexity.UserHistory.DisplayName == nil {
			break
		}

		return e.complexity.UserHistory.DisplayName(childComplexity), true

	case "UserHistory.email":
		if e.complexity.UserHistory.Email == nil {
			break
		}

		return e.complexity.UserHistory.Email(childComplexity), true

	case "UserHistory.firstName":
		if e.complexity.UserHistory.FirstName == nil {
			break
		}

		return e.complexity.UserHistory.FirstName(childComplexity), true

	case "UserHistory.historyTime":
		if e.complexity.UserHistory.HistoryTime == nil {
			break
		}

		return e.complexity.UserHistory.HistoryTime(childComplexity), true

	case "UserHistory.id":
		if e.complexity.UserHistory.ID == nil {
			break
		}

		return e.complexity.UserHistory.ID(childComplexity), true

	case "UserHistory.lastLoginProvider":
		if e.complexity.UserHistory.LastLoginProvider == nil {
			break
		}

		return e.complexity.UserHistory.LastLoginProvider(childComplexity), true

	case "UserHistory.lastName":
		if e.complexity.UserHistory.LastName == nil {
			break
		}

		return e.complexity.UserHistory.LastName(childComplexity), true

	case "UserHistory.lastSeen":
		if e.complexity.UserHistory.LastSeen == nil {
			break
		}

		return e.complexity.UserHistory.LastSeen(childComplexity), true

	case "UserHistory.operation":
		if e.complexity.UserHistory.Operation == nil {
			break
		}

		return e.complexity.UserHistory.Operation(childComplexity), true

	case "UserHistory.ref":
		if e.complexity.UserHistory.Ref == nil {
			break
		}

		return e.complexity.UserHistory.Ref(childComplexity), true

	case "UserHistory.role":
		if e.complexity.UserHistory.Role == nil {
			break
		}

		return e.complexity.UserHistory.Role(childComplexity), true

	case "UserHistory.sub":
		if e.complexity.UserHistory.Sub == nil {
			break
		}

		return e.complexity.UserHistory.Sub(childComplexity), true

	case "UserHistory.tags":
		if e.complexity.UserHistory.Tags == nil {
			break
		}

		return e.complexity.UserHistory.Tags(childComplexity), true

	case "UserHistory.updatedAt":
		if e.complexity.UserHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.UserHistory.UpdatedAt(childComplexity), true

	case "UserHistory.updatedBy":
		if e.complexity.UserHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.UserHistory.UpdatedBy(childComplexity), true

	case "UserHistoryConnection.edges":
		if e.complexity.UserHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.UserHistoryConnection.Edges(childComplexity), true

	case "UserHistoryConnection.pageInfo":
		if e.complexity.UserHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserHistoryConnection.PageInfo(childComplexity), true

	case "UserHistoryConnection.totalCount":
		if e.complexity.UserHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserHistoryConnection.TotalCount(childComplexity), true

	case "UserHistoryEdge.cursor":
		if e.complexity.UserHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.UserHistoryEdge.Cursor(childComplexity), true

	case "UserHistoryEdge.node":
		if e.complexity.UserHistoryEdge.Node == nil {
			break
		}

		return e.complexity.UserHistoryEdge.Node(childComplexity), true

	case "UserSetting.createdAt":
		if e.complexity.UserSetting.CreatedAt == nil {
			break
		}

		return e.complexity.UserSetting.CreatedAt(childComplexity), true

	case "UserSetting.createdBy":
		if e.complexity.UserSetting.CreatedBy == nil {
			break
		}

		return e.complexity.UserSetting.CreatedBy(childComplexity), true

	case "UserSetting.defaultOrg":
		if e.complexity.UserSetting.DefaultOrg == nil {
			break
		}

		return e.complexity.UserSetting.DefaultOrg(childComplexity), true

	case "UserSetting.emailConfirmed":
		if e.complexity.UserSetting.EmailConfirmed == nil {
			break
		}

		return e.complexity.UserSetting.EmailConfirmed(childComplexity), true

	case "UserSetting.files":
		if e.complexity.UserSetting.Files == nil {
			break
		}

		args, err := ec.field_UserSetting_files_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserSetting.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*generated.FileOrder), args["where"].(*generated.FileWhereInput)), true

	case "UserSetting.id":
		if e.complexity.UserSetting.ID == nil {
			break
		}

		return e.complexity.UserSetting.ID(childComplexity), true

	case "UserSetting.isTfaEnabled":
		if e.complexity.UserSetting.IsTfaEnabled == nil {
			break
		}

		return e.complexity.UserSetting.IsTfaEnabled(childComplexity), true

	case "UserSetting.isWebauthnAllowed":
		if e.complexity.UserSetting.IsWebauthnAllowed == nil {
			break
		}

		return e.complexity.UserSetting.IsWebauthnAllowed(childComplexity), true

	case "UserSetting.locked":
		if e.complexity.UserSetting.Locked == nil {
			break
		}

		return e.complexity.UserSetting.Locked(childComplexity), true

	case "UserSetting.silencedAt":
		if e.complexity.UserSetting.SilencedAt == nil {
			break
		}

		return e.complexity.UserSetting.SilencedAt(childComplexity), true

	case "UserSetting.status":
		if e.complexity.UserSetting.Status == nil {
			break
		}

		return e.complexity.UserSetting.Status(childComplexity), true

	case "UserSetting.suspendedAt":
		if e.complexity.UserSetting.SuspendedAt == nil {
			break
		}

		return e.complexity.UserSetting.SuspendedAt(childComplexity), true

	case "UserSetting.tags":
		if e.complexity.UserSetting.Tags == nil {
			break
		}

		return e.complexity.UserSetting.Tags(childComplexity), true

	case "UserSetting.updatedAt":
		if e.complexity.UserSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.UserSetting.UpdatedAt(childComplexity), true

	case "UserSetting.updatedBy":
		if e.complexity.UserSetting.UpdatedBy == nil {
			break
		}

		return e.complexity.UserSetting.UpdatedBy(childComplexity), true

	case "UserSetting.user":
		if e.complexity.UserSetting.User == nil {
			break
		}

		return e.complexity.UserSetting.User(childComplexity), true

	case "UserSetting.userID":
		if e.complexity.UserSetting.UserID == nil {
			break
		}

		return e.complexity.UserSetting.UserID(childComplexity), true

	case "UserSettingBulkCreatePayload.userSettings":
		if e.complexity.UserSettingBulkCreatePayload.UserSettings == nil {
			break
		}

		return e.complexity.UserSettingBulkCreatePayload.UserSettings(childComplexity), true

	case "UserSettingConnection.edges":
		if e.complexity.UserSettingConnection.Edges == nil {
			break
		}

		return e.complexity.UserSettingConnection.Edges(childComplexity), true

	case "UserSettingConnection.pageInfo":
		if e.complexity.UserSettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserSettingConnection.PageInfo(childComplexity), true

	case "UserSettingConnection.totalCount":
		if e.complexity.UserSettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserSettingConnection.TotalCount(childComplexity), true

	case "UserSettingCreatePayload.userSetting":
		if e.complexity.UserSettingCreatePayload.UserSetting == nil {
			break
		}

		return e.complexity.UserSettingCreatePayload.UserSetting(childComplexity), true

	case "UserSettingEdge.cursor":
		if e.complexity.UserSettingEdge.Cursor == nil {
			break
		}

		return e.complexity.UserSettingEdge.Cursor(childComplexity), true

	case "UserSettingEdge.node":
		if e.complexity.UserSettingEdge.Node == nil {
			break
		}

		return e.complexity.UserSettingEdge.Node(childComplexity), true

	case "UserSettingHistory.createdAt":
		if e.complexity.UserSettingHistory.CreatedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.CreatedAt(childComplexity), true

	case "UserSettingHistory.createdBy":
		if e.complexity.UserSettingHistory.CreatedBy == nil {
			break
		}

		return e.complexity.UserSettingHistory.CreatedBy(childComplexity), true

	case "UserSettingHistory.emailConfirmed":
		if e.complexity.UserSettingHistory.EmailConfirmed == nil {
			break
		}

		return e.complexity.UserSettingHistory.EmailConfirmed(childComplexity), true

	case "UserSettingHistory.historyTime":
		if e.complexity.UserSettingHistory.HistoryTime == nil {
			break
		}

		return e.complexity.UserSettingHistory.HistoryTime(childComplexity), true

	case "UserSettingHistory.id":
		if e.complexity.UserSettingHistory.ID == nil {
			break
		}

		return e.complexity.UserSettingHistory.ID(childComplexity), true

	case "UserSettingHistory.isTfaEnabled":
		if e.complexity.UserSettingHistory.IsTfaEnabled == nil {
			break
		}

		return e.complexity.UserSettingHistory.IsTfaEnabled(childComplexity), true

	case "UserSettingHistory.isWebauthnAllowed":
		if e.complexity.UserSettingHistory.IsWebauthnAllowed == nil {
			break
		}

		return e.complexity.UserSettingHistory.IsWebauthnAllowed(childComplexity), true

	case "UserSettingHistory.locked":
		if e.complexity.UserSettingHistory.Locked == nil {
			break
		}

		return e.complexity.UserSettingHistory.Locked(childComplexity), true

	case "UserSettingHistory.operation":
		if e.complexity.UserSettingHistory.Operation == nil {
			break
		}

		return e.complexity.UserSettingHistory.Operation(childComplexity), true

	case "UserSettingHistory.ref":
		if e.complexity.UserSettingHistory.Ref == nil {
			break
		}

		return e.complexity.UserSettingHistory.Ref(childComplexity), true

	case "UserSettingHistory.silencedAt":
		if e.complexity.UserSettingHistory.SilencedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.SilencedAt(childComplexity), true

	case "UserSettingHistory.status":
		if e.complexity.UserSettingHistory.Status == nil {
			break
		}

		return e.complexity.UserSettingHistory.Status(childComplexity), true

	case "UserSettingHistory.suspendedAt":
		if e.complexity.UserSettingHistory.SuspendedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.SuspendedAt(childComplexity), true

	case "UserSettingHistory.tags":
		if e.complexity.UserSettingHistory.Tags == nil {
			break
		}

		return e.complexity.UserSettingHistory.Tags(childComplexity), true

	case "UserSettingHistory.updatedAt":
		if e.complexity.UserSettingHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.UpdatedAt(childComplexity), true

	case "UserSettingHistory.updatedBy":
		if e.complexity.UserSettingHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.UserSettingHistory.UpdatedBy(childComplexity), true

	case "UserSettingHistory.userID":
		if e.complexity.UserSettingHistory.UserID == nil {
			break
		}

		return e.complexity.UserSettingHistory.UserID(childComplexity), true

	case "UserSettingHistoryConnection.edges":
		if e.complexity.UserSettingHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.UserSettingHistoryConnection.Edges(childComplexity), true

	case "UserSettingHistoryConnection.pageInfo":
		if e.complexity.UserSettingHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserSettingHistoryConnection.PageInfo(childComplexity), true

	case "UserSettingHistoryConnection.totalCount":
		if e.complexity.UserSettingHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserSettingHistoryConnection.TotalCount(childComplexity), true

	case "UserSettingHistoryEdge.cursor":
		if e.complexity.UserSettingHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.UserSettingHistoryEdge.Cursor(childComplexity), true

	case "UserSettingHistoryEdge.node":
		if e.complexity.UserSettingHistoryEdge.Node == nil {
			break
		}

		return e.complexity.UserSettingHistoryEdge.Node(childComplexity), true

	case "UserSettingUpdatePayload.userSetting":
		if e.complexity.UserSettingUpdatePayload.UserSetting == nil {
			break
		}

		return e.complexity.UserSettingUpdatePayload.UserSetting(childComplexity), true

	case "UserUpdatePayload.user":
		if e.complexity.UserUpdatePayload.User == nil {
			break
		}

		return e.complexity.UserUpdatePayload.User(childComplexity), true

	case "Webauthn.aaguid":
		if e.complexity.Webauthn.Aaguid == nil {
			break
		}

		return e.complexity.Webauthn.Aaguid(childComplexity), true

	case "Webauthn.backupEligible":
		if e.complexity.Webauthn.BackupEligible == nil {
			break
		}

		return e.complexity.Webauthn.BackupEligible(childComplexity), true

	case "Webauthn.backupState":
		if e.complexity.Webauthn.BackupState == nil {
			break
		}

		return e.complexity.Webauthn.BackupState(childComplexity), true

	case "Webauthn.createdAt":
		if e.complexity.Webauthn.CreatedAt == nil {
			break
		}

		return e.complexity.Webauthn.CreatedAt(childComplexity), true

	case "Webauthn.createdBy":
		if e.complexity.Webauthn.CreatedBy == nil {
			break
		}

		return e.complexity.Webauthn.CreatedBy(childComplexity), true

	case "Webauthn.id":
		if e.complexity.Webauthn.ID == nil {
			break
		}

		return e.complexity.Webauthn.ID(childComplexity), true

	case "Webauthn.owner":
		if e.complexity.Webauthn.Owner == nil {
			break
		}

		return e.complexity.Webauthn.Owner(childComplexity), true

	case "Webauthn.tags":
		if e.complexity.Webauthn.Tags == nil {
			break
		}

		return e.complexity.Webauthn.Tags(childComplexity), true

	case "Webauthn.updatedAt":
		if e.complexity.Webauthn.UpdatedAt == nil {
			break
		}

		return e.complexity.Webauthn.UpdatedAt(childComplexity), true

	case "Webauthn.updatedBy":
		if e.complexity.Webauthn.UpdatedBy == nil {
			break
		}

		return e.complexity.Webauthn.UpdatedBy(childComplexity), true

	case "WebauthnConnection.edges":
		if e.complexity.WebauthnConnection.Edges == nil {
			break
		}

		return e.complexity.WebauthnConnection.Edges(childComplexity), true

	case "WebauthnConnection.pageInfo":
		if e.complexity.WebauthnConnection.PageInfo == nil {
			break
		}

		return e.complexity.WebauthnConnection.PageInfo(childComplexity), true

	case "WebauthnConnection.totalCount":
		if e.complexity.WebauthnConnection.TotalCount == nil {
			break
		}

		return e.complexity.WebauthnConnection.TotalCount(childComplexity), true

	case "WebauthnDeletePayload.deletedID":
		if e.complexity.WebauthnDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.WebauthnDeletePayload.DeletedID(childComplexity), true

	case "WebauthnEdge.cursor":
		if e.complexity.WebauthnEdge.Cursor == nil {
			break
		}

		return e.complexity.WebauthnEdge.Cursor(childComplexity), true

	case "WebauthnEdge.node":
		if e.complexity.WebauthnEdge.Node == nil {
			break
		}

		return e.complexity.WebauthnEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAPITokenOrder,
		ec.unmarshalInputAPITokenWhereInput,
		ec.unmarshalInputActionPlanHistoryOrder,
		ec.unmarshalInputActionPlanHistoryWhereInput,
		ec.unmarshalInputActionPlanOrder,
		ec.unmarshalInputActionPlanWhereInput,
		ec.unmarshalInputAddProgramMembershipInput,
		ec.unmarshalInputAssetHistoryOrder,
		ec.unmarshalInputAssetHistoryWhereInput,
		ec.unmarshalInputAssetOrder,
		ec.unmarshalInputAssetWhereInput,
		ec.unmarshalInputAuditLogOrder,
		ec.unmarshalInputAuditLogWhereInput,
		ec.unmarshalInputCloneControlInput,
		ec.unmarshalInputContactHistoryOrder,
		ec.unmarshalInputContactHistoryWhereInput,
		ec.unmarshalInputContactOrder,
		ec.unmarshalInputContactWhereInput,
		ec.unmarshalInputControlCategoryOrder,
		ec.unmarshalInputControlHistoryOrder,
		ec.unmarshalInputControlHistoryWhereInput,
		ec.unmarshalInputControlImplementationHistoryOrder,
		ec.unmarshalInputControlImplementationHistoryWhereInput,
		ec.unmarshalInputControlImplementationOrder,
		ec.unmarshalInputControlImplementationWhereInput,
		ec.unmarshalInputControlObjectiveHistoryOrder,
		ec.unmarshalInputControlObjectiveHistoryWhereInput,
		ec.unmarshalInputControlObjectiveOrder,
		ec.unmarshalInputControlObjectiveWhereInput,
		ec.unmarshalInputControlOrder,
		ec.unmarshalInputControlWhereInput,
		ec.unmarshalInputCreateAPITokenInput,
		ec.unmarshalInputCreateActionPlanInput,
		ec.unmarshalInputCreateAssetInput,
		ec.unmarshalInputCreateContactInput,
		ec.unmarshalInputCreateControlImplementationInput,
		ec.unmarshalInputCreateControlInput,
		ec.unmarshalInputCreateControlObjectiveInput,
		ec.unmarshalInputCreateControlWithSubcontrolsInput,
		ec.unmarshalInputCreateCustomDomainInput,
		ec.unmarshalInputCreateDNSVerificationInput,
		ec.unmarshalInputCreateDocumentDataInput,
		ec.unmarshalInputCreateEntityInput,
		ec.unmarshalInputCreateEntityTypeInput,
		ec.unmarshalInputCreateEventInput,
		ec.unmarshalInputCreateEvidenceInput,
		ec.unmarshalInputCreateExportInput,
		ec.unmarshalInputCreateFileInput,
		ec.unmarshalInputCreateFullProgramInput,
		ec.unmarshalInputCreateGroupInput,
		ec.unmarshalInputCreateGroupMembershipInput,
		ec.unmarshalInputCreateGroupSettingInput,
		ec.unmarshalInputCreateHushInput,
		ec.unmarshalInputCreateInternalPolicyInput,
		ec.unmarshalInputCreateInviteInput,
		ec.unmarshalInputCreateJobResultInput,
		ec.unmarshalInputCreateJobRunnerInput,
		ec.unmarshalInputCreateJobRunnerRegistrationTokenInput,
		ec.unmarshalInputCreateJobRunnerTokenInput,
		ec.unmarshalInputCreateJobTemplateInput,
		ec.unmarshalInputCreateMappableDomainInput,
		ec.unmarshalInputCreateMappedControlInput,
		ec.unmarshalInputCreateMemberWithProgramInput,
		ec.unmarshalInputCreateNarrativeInput,
		ec.unmarshalInputCreateNoteInput,
		ec.unmarshalInputCreateOnboardingInput,
		ec.unmarshalInputCreateOrgMembershipInput,
		ec.unmarshalInputCreateOrganizationInput,
		ec.unmarshalInputCreateOrganizationSettingInput,
		ec.unmarshalInputCreatePersonalAccessTokenInput,
		ec.unmarshalInputCreateProcedureInput,
		ec.unmarshalInputCreateProgramInput,
		ec.unmarshalInputCreateProgramMembershipInput,
		ec.unmarshalInputCreateProgramWithMembersInput,
		ec.unmarshalInputCreateRiskInput,
		ec.unmarshalInputCreateScanInput,
		ec.unmarshalInputCreateScheduledJobInput,
		ec.unmarshalInputCreateScheduledJobRunInput,
		ec.unmarshalInputCreateStandardInput,
		ec.unmarshalInputCreateSubcontrolInput,
		ec.unmarshalInputCreateSubprocessorInput,
		ec.unmarshalInputCreateSubscriberInput,
		ec.unmarshalInputCreateTFASettingInput,
		ec.unmarshalInputCreateTaskInput,
		ec.unmarshalInputCreateTemplateInput,
		ec.unmarshalInputCreateTrustCenterComplianceInput,
		ec.unmarshalInputCreateTrustCenterDocInput,
		ec.unmarshalInputCreateTrustCenterDomainInput,
		ec.unmarshalInputCreateTrustCenterInput,
		ec.unmarshalInputCreateTrustCenterSettingInput,
		ec.unmarshalInputCreateTrustCenterSubprocessorInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateUserSettingInput,
		ec.unmarshalInputCustomDomainHistoryOrder,
		ec.unmarshalInputCustomDomainHistoryWhereInput,
		ec.unmarshalInputCustomDomainOrder,
		ec.unmarshalInputCustomDomainWhereInput,
		ec.unmarshalInputDNSVerificationHistoryOrder,
		ec.unmarshalInputDNSVerificationHistoryWhereInput,
		ec.unmarshalInputDNSVerificationOrder,
		ec.unmarshalInputDNSVerificationWhereInput,
		ec.unmarshalInputDocumentDataHistoryOrder,
		ec.unmarshalInputDocumentDataHistoryWhereInput,
		ec.unmarshalInputDocumentDataOrder,
		ec.unmarshalInputDocumentDataWhereInput,
		ec.unmarshalInputEntityHistoryOrder,
		ec.unmarshalInputEntityHistoryWhereInput,
		ec.unmarshalInputEntityOrder,
		ec.unmarshalInputEntityTypeHistoryOrder,
		ec.unmarshalInputEntityTypeHistoryWhereInput,
		ec.unmarshalInputEntityTypeOrder,
		ec.unmarshalInputEntityTypeWhereInput,
		ec.unmarshalInputEntityWhereInput,
		ec.unmarshalInputEventOrder,
		ec.unmarshalInputEventWhereInput,
		ec.unmarshalInputEvidenceHistoryOrder,
		ec.unmarshalInputEvidenceHistoryWhereInput,
		ec.unmarshalInputEvidenceOrder,
		ec.unmarshalInputEvidenceWhereInput,
		ec.unmarshalInputExportOrder,
		ec.unmarshalInputExportWhereInput,
		ec.unmarshalInputFileHistoryOrder,
		ec.unmarshalInputFileHistoryWhereInput,
		ec.unmarshalInputFileOrder,
		ec.unmarshalInputFileWhereInput,
		ec.unmarshalInputGroupHistoryOrder,
		ec.unmarshalInputGroupHistoryWhereInput,
		ec.unmarshalInputGroupMembersInput,
		ec.unmarshalInputGroupMembershipHistoryOrder,
		ec.unmarshalInputGroupMembershipHistoryWhereInput,
		ec.unmarshalInputGroupMembershipOrder,
		ec.unmarshalInputGroupMembershipWhereInput,
		ec.unmarshalInputGroupOrder,
		ec.unmarshalInputGroupPermissionOrder,
		ec.unmarshalInputGroupPermissionWhereInput,
		ec.unmarshalInputGroupSettingHistoryOrder,
		ec.unmarshalInputGroupSettingHistoryWhereInput,
		ec.unmarshalInputGroupSettingOrder,
		ec.unmarshalInputGroupSettingWhereInput,
		ec.unmarshalInputGroupWhereInput,
		ec.unmarshalInputHushHistoryOrder,
		ec.unmarshalInputHushHistoryWhereInput,
		ec.unmarshalInputHushOrder,
		ec.unmarshalInputHushWhereInput,
		ec.unmarshalInputIntegrationHistoryOrder,
		ec.unmarshalInputIntegrationHistoryWhereInput,
		ec.unmarshalInputIntegrationOrder,
		ec.unmarshalInputIntegrationWhereInput,
		ec.unmarshalInputInternalPolicyHistoryOrder,
		ec.unmarshalInputInternalPolicyHistoryWhereInput,
		ec.unmarshalInputInternalPolicyOrder,
		ec.unmarshalInputInternalPolicyWhereInput,
		ec.unmarshalInputInviteOrder,
		ec.unmarshalInputInviteWhereInput,
		ec.unmarshalInputJobResultOrder,
		ec.unmarshalInputJobResultWhereInput,
		ec.unmarshalInputJobRunnerOrder,
		ec.unmarshalInputJobRunnerRegistrationTokenOrder,
		ec.unmarshalInputJobRunnerRegistrationTokenWhereInput,
		ec.unmarshalInputJobRunnerTokenOrder,
		ec.unmarshalInputJobRunnerTokenWhereInput,
		ec.unmarshalInputJobRunnerWhereInput,
		ec.unmarshalInputJobTemplateHistoryOrder,
		ec.unmarshalInputJobTemplateHistoryWhereInput,
		ec.unmarshalInputJobTemplateOrder,
		ec.unmarshalInputJobTemplateWhereInput,
		ec.unmarshalInputMappableDomainHistoryOrder,
		ec.unmarshalInputMappableDomainHistoryWhereInput,
		ec.unmarshalInputMappableDomainOrder,
		ec.unmarshalInputMappableDomainWhereInput,
		ec.unmarshalInputMappedControlHistoryOrder,
		ec.unmarshalInputMappedControlHistoryWhereInput,
		ec.unmarshalInputMappedControlOrder,
		ec.unmarshalInputMappedControlWhereInput,
		ec.unmarshalInputNarrativeHistoryOrder,
		ec.unmarshalInputNarrativeHistoryWhereInput,
		ec.unmarshalInputNarrativeOrder,
		ec.unmarshalInputNarrativeWhereInput,
		ec.unmarshalInputNoteHistoryOrder,
		ec.unmarshalInputNoteHistoryWhereInput,
		ec.unmarshalInputNoteOrder,
		ec.unmarshalInputNoteWhereInput,
		ec.unmarshalInputOnboardingWhereInput,
		ec.unmarshalInputOrgMembersInput,
		ec.unmarshalInputOrgMembershipHistoryOrder,
		ec.unmarshalInputOrgMembershipHistoryWhereInput,
		ec.unmarshalInputOrgMembershipOrder,
		ec.unmarshalInputOrgMembershipWhereInput,
		ec.unmarshalInputOrgSubscriptionHistoryOrder,
		ec.unmarshalInputOrgSubscriptionHistoryWhereInput,
		ec.unmarshalInputOrgSubscriptionOrder,
		ec.unmarshalInputOrgSubscriptionWhereInput,
		ec.unmarshalInputOrganizationHistoryOrder,
		ec.unmarshalInputOrganizationHistoryWhereInput,
		ec.unmarshalInputOrganizationOrder,
		ec.unmarshalInputOrganizationSettingHistoryOrder,
		ec.unmarshalInputOrganizationSettingHistoryWhereInput,
		ec.unmarshalInputOrganizationSettingOrder,
		ec.unmarshalInputOrganizationSettingWhereInput,
		ec.unmarshalInputOrganizationWhereInput,
		ec.unmarshalInputPersonalAccessTokenOrder,
		ec.unmarshalInputPersonalAccessTokenWhereInput,
		ec.unmarshalInputProcedureHistoryOrder,
		ec.unmarshalInputProcedureHistoryWhereInput,
		ec.unmarshalInputProcedureOrder,
		ec.unmarshalInputProcedureWhereInput,
		ec.unmarshalInputProgramHistoryOrder,
		ec.unmarshalInputProgramHistoryWhereInput,
		ec.unmarshalInputProgramMembershipHistoryOrder,
		ec.unmarshalInputProgramMembershipHistoryWhereInput,
		ec.unmarshalInputProgramMembershipOrder,
		ec.unmarshalInputProgramMembershipWhereInput,
		ec.unmarshalInputProgramOrder,
		ec.unmarshalInputProgramWhereInput,
		ec.unmarshalInputRiskHistoryOrder,
		ec.unmarshalInputRiskHistoryWhereInput,
		ec.unmarshalInputRiskOrder,
		ec.unmarshalInputRiskWhereInput,
		ec.unmarshalInputScanHistoryOrder,
		ec.unmarshalInputScanHistoryWhereInput,
		ec.unmarshalInputScanOrder,
		ec.unmarshalInputScanWhereInput,
		ec.unmarshalInputScheduledJobHistoryOrder,
		ec.unmarshalInputScheduledJobHistoryWhereInput,
		ec.unmarshalInputScheduledJobOrder,
		ec.unmarshalInputScheduledJobRunOrder,
		ec.unmarshalInputScheduledJobRunWhereInput,
		ec.unmarshalInputScheduledJobWhereInput,
		ec.unmarshalInputStandardHistoryOrder,
		ec.unmarshalInputStandardHistoryWhereInput,
		ec.unmarshalInputStandardOrder,
		ec.unmarshalInputStandardWhereInput,
		ec.unmarshalInputSubcontrolHistoryOrder,
		ec.unmarshalInputSubcontrolHistoryWhereInput,
		ec.unmarshalInputSubcontrolOrder,
		ec.unmarshalInputSubcontrolWhereInput,
		ec.unmarshalInputSubprocessorHistoryOrder,
		ec.unmarshalInputSubprocessorHistoryWhereInput,
		ec.unmarshalInputSubprocessorOrder,
		ec.unmarshalInputSubprocessorWhereInput,
		ec.unmarshalInputSubscriberOrder,
		ec.unmarshalInputSubscriberWhereInput,
		ec.unmarshalInputTFASettingOrder,
		ec.unmarshalInputTFASettingWhereInput,
		ec.unmarshalInputTaskHistoryOrder,
		ec.unmarshalInputTaskHistoryWhereInput,
		ec.unmarshalInputTaskOrder,
		ec.unmarshalInputTaskWhereInput,
		ec.unmarshalInputTemplateHistoryOrder,
		ec.unmarshalInputTemplateHistoryWhereInput,
		ec.unmarshalInputTemplateOrder,
		ec.unmarshalInputTemplateWhereInput,
		ec.unmarshalInputTrustCenterComplianceHistoryOrder,
		ec.unmarshalInputTrustCenterComplianceHistoryWhereInput,
		ec.unmarshalInputTrustCenterComplianceOrder,
		ec.unmarshalInputTrustCenterComplianceWhereInput,
		ec.unmarshalInputTrustCenterDocHistoryOrder,
		ec.unmarshalInputTrustCenterDocHistoryWhereInput,
		ec.unmarshalInputTrustCenterDocOrder,
		ec.unmarshalInputTrustCenterDocWhereInput,
		ec.unmarshalInputTrustCenterHistoryOrder,
		ec.unmarshalInputTrustCenterHistoryWhereInput,
		ec.unmarshalInputTrustCenterOrder,
		ec.unmarshalInputTrustCenterSettingHistoryOrder,
		ec.unmarshalInputTrustCenterSettingHistoryWhereInput,
		ec.unmarshalInputTrustCenterSettingOrder,
		ec.unmarshalInputTrustCenterSettingWhereInput,
		ec.unmarshalInputTrustCenterSubprocessorHistoryOrder,
		ec.unmarshalInputTrustCenterSubprocessorHistoryWhereInput,
		ec.unmarshalInputTrustCenterSubprocessorOrder,
		ec.unmarshalInputTrustCenterSubprocessorWhereInput,
		ec.unmarshalInputTrustCenterWhereInput,
		ec.unmarshalInputUpdateAPITokenInput,
		ec.unmarshalInputUpdateActionPlanInput,
		ec.unmarshalInputUpdateAssetInput,
		ec.unmarshalInputUpdateContactInput,
		ec.unmarshalInputUpdateControlImplementationInput,
		ec.unmarshalInputUpdateControlInput,
		ec.unmarshalInputUpdateControlObjectiveInput,
		ec.unmarshalInputUpdateCustomDomainInput,
		ec.unmarshalInputUpdateDNSVerificationInput,
		ec.unmarshalInputUpdateDocumentDataInput,
		ec.unmarshalInputUpdateEntityInput,
		ec.unmarshalInputUpdateEntityTypeInput,
		ec.unmarshalInputUpdateEventInput,
		ec.unmarshalInputUpdateEvidenceInput,
		ec.unmarshalInputUpdateExportInput,
		ec.unmarshalInputUpdateFileInput,
		ec.unmarshalInputUpdateGroupInput,
		ec.unmarshalInputUpdateGroupMembershipInput,
		ec.unmarshalInputUpdateGroupSettingInput,
		ec.unmarshalInputUpdateHushInput,
		ec.unmarshalInputUpdateInternalPolicyInput,
		ec.unmarshalInputUpdateInviteInput,
		ec.unmarshalInputUpdateJobResultInput,
		ec.unmarshalInputUpdateJobRunnerInput,
		ec.unmarshalInputUpdateJobRunnerRegistrationTokenInput,
		ec.unmarshalInputUpdateJobRunnerTokenInput,
		ec.unmarshalInputUpdateJobTemplateInput,
		ec.unmarshalInputUpdateMappableDomainInput,
		ec.unmarshalInputUpdateMappedControlInput,
		ec.unmarshalInputUpdateNarrativeInput,
		ec.unmarshalInputUpdateNoteInput,
		ec.unmarshalInputUpdateOrgMembershipInput,
		ec.unmarshalInputUpdateOrganizationInput,
		ec.unmarshalInputUpdateOrganizationSettingInput,
		ec.unmarshalInputUpdatePersonalAccessTokenInput,
		ec.unmarshalInputUpdateProcedureInput,
		ec.unmarshalInputUpdateProgramInput,
		ec.unmarshalInputUpdateProgramMembershipInput,
		ec.unmarshalInputUpdateRiskInput,
		ec.unmarshalInputUpdateScanInput,
		ec.unmarshalInputUpdateScheduledJobInput,
		ec.unmarshalInputUpdateScheduledJobRunInput,
		ec.unmarshalInputUpdateStandardInput,
		ec.unmarshalInputUpdateSubcontrolInput,
		ec.unmarshalInputUpdateSubprocessorInput,
		ec.unmarshalInputUpdateSubscriberInput,
		ec.unmarshalInputUpdateTFASettingInput,
		ec.unmarshalInputUpdateTaskInput,
		ec.unmarshalInputUpdateTemplateInput,
		ec.unmarshalInputUpdateTrustCenterComplianceInput,
		ec.unmarshalInputUpdateTrustCenterDocInput,
		ec.unmarshalInputUpdateTrustCenterInput,
		ec.unmarshalInputUpdateTrustCenterSettingInput,
		ec.unmarshalInputUpdateTrustCenterSubprocessorInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserSettingInput,
		ec.unmarshalInputUserHistoryOrder,
		ec.unmarshalInputUserHistoryWhereInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserSettingHistoryOrder,
		ec.unmarshalInputUserSettingHistoryWhereInput,
		ec.unmarshalInputUserSettingOrder,
		ec.unmarshalInputUserSettingWhereInput,
		ec.unmarshalInputUserWhereInput,
		ec.unmarshalInputWebauthnOrder,
		ec.unmarshalInputWebauthnWhereInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/actionplan.graphql", Input: `extend type Query {
    """
    Look up actionPlan by ID
    """
     actionPlan(
        """
        ID of the actionPlan
        """
        id: ID!
    ):  ActionPlan!
}



extend type Mutation{
    """
    Create a new actionPlan
    """
    createActionPlan(
        """
        values of the actionPlan
        """
        input: CreateActionPlanInput!
    ): ActionPlanCreatePayload!
    """
    Create multiple new actionPlans
    """
    createBulkActionPlan(
        """
        values of the actionPlan
        """
        input: [CreateActionPlanInput!]
    ): ActionPlanBulkCreatePayload!
    """
    Create multiple new actionPlans via file upload
    """
    createBulkCSVActionPlan(
        """
        csv file containing values of the actionPlan
        """
        input: Upload!
    ): ActionPlanBulkCreatePayload!
    """
    Update multiple existing actionPlans
    """
    updateBulkActionPlan(
        """
        IDs of the actionPlans to update
        """
        ids: [ID!]!
        """
        values to update the actionPlans with
        """
        input: UpdateActionPlanInput!
    ): ActionPlanBulkUpdatePayload!
    """
    Update an existing actionPlan
    """
    updateActionPlan(
        """
        ID of the actionPlan
        """
        id: ID!
        """
        New values for the actionPlan
        """
        input: UpdateActionPlanInput!
    ): ActionPlanUpdatePayload!
    """
    Delete an existing actionPlan
    """
    deleteActionPlan(
        """
        ID of the actionPlan
        """
        id: ID!
    ): ActionPlanDeletePayload!
}

"""
Return response for createActionPlan mutation
"""
type ActionPlanCreatePayload {
    """
    Created actionPlan
    """
    actionPlan: ActionPlan!
}

"""
Return response for updateActionPlan mutation
"""
type ActionPlanUpdatePayload {
    """
    Updated actionPlan
    """
    actionPlan: ActionPlan!
}

"""
Return response for deleteActionPlan mutation
"""
type ActionPlanDeletePayload {
    """
    Deleted actionPlan ID
    """
    deletedID: ID!
}

"""
Return response for createBulkActionPlan mutation
"""
type ActionPlanBulkCreatePayload {
    """
    Created actionPlans
    """
    actionPlans: [ActionPlan!]
}

"""
Return response for updateBulkActionPlan mutation
"""
type ActionPlanBulkUpdatePayload {
    """
    Updated actionPlans
    """
    actionPlans: [ActionPlan!]
    """
    IDs of the updated actionPlans
    """
    updatedIDs: [ID!]
}`, BuiltIn: false},
	{Name: "../schema/adminsearch.graphql", Input: `extend type Query{
    """
    Search across APIToken objects
    """
    adminAPITokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): APITokenConnection
    """
    Search across ActionPlan objects
    """
    adminActionPlanSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ActionPlanConnection
    """
    Search across Asset objects
    """
    adminAssetSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): AssetConnection
    """
    Search across Contact objects
    """
    adminContactSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ContactConnection
    """
    Search across Control objects
    """
    adminControlSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ControlConnection
    """
    Search across ControlImplementation objects
    """
    adminControlImplementationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ControlImplementationConnection
    """
    Search across ControlObjective objects
    """
    adminControlObjectiveSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ControlObjectiveConnection
    """
    Search across CustomDomain objects
    """
    adminCustomDomainSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): CustomDomainConnection
    """
    Search across DNSVerification objects
    """
    adminDNSVerificationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): DNSVerificationConnection
    """
    Search across DocumentData objects
    """
    adminDocumentDataSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): DocumentDataConnection
    """
    Search across Entity objects
    """
    adminEntitySearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EntityConnection
    """
    Search across EntityType objects
    """
    adminEntityTypeSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EntityTypeConnection
    """
    Search across Event objects
    """
    adminEventSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EventConnection
    """
    Search across Evidence objects
    """
    adminEvidenceSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EvidenceConnection
    """
    Search across File objects
    """
    adminFileSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): FileConnection
    """
    Search across Group objects
    """
    adminGroupSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): GroupConnection
    """
    Search across Integration objects
    """
    adminIntegrationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): IntegrationConnection
    """
    Search across InternalPolicy objects
    """
    adminInternalPolicySearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): InternalPolicyConnection
    """
    Search across Invite objects
    """
    adminInviteSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): InviteConnection
    """
    Search across JobRunner objects
    """
    adminJobRunnerSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobRunnerConnection
    """
    Search across JobRunnerRegistrationToken objects
    """
    adminJobRunnerRegistrationTokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobRunnerRegistrationTokenConnection
    """
    Search across JobRunnerToken objects
    """
    adminJobRunnerTokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobRunnerTokenConnection
    """
    Search across JobTemplate objects
    """
    adminJobTemplateSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobTemplateConnection
    """
    Search across MappableDomain objects
    """
    adminMappableDomainSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): MappableDomainConnection
    """
    Search across MappedControl objects
    """
    adminMappedControlSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): MappedControlConnection
    """
    Search across Narrative objects
    """
    adminNarrativeSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): NarrativeConnection
    """
    Search across OrgSubscription objects
    """
    adminOrgSubscriptionSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): OrgSubscriptionConnection
    """
    Search across Organization objects
    """
    adminOrganizationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): OrganizationConnection
    """
    Search across OrganizationSetting objects
    """
    adminOrganizationSettingSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): OrganizationSettingConnection
    """
    Search across PersonalAccessToken objects
    """
    adminPersonalAccessTokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): PersonalAccessTokenConnection
    """
    Search across Procedure objects
    """
    adminProcedureSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ProcedureConnection
    """
    Search across Program objects
    """
    adminProgramSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ProgramConnection
    """
    Search across Risk objects
    """
    adminRiskSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): RiskConnection
    """
    Search across Scan objects
    """
    adminScanSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ScanConnection
    """
    Search across Standard objects
    """
    adminStandardSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): StandardConnection
    """
    Search across Subcontrol objects
    """
    adminSubcontrolSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SubcontrolConnection
    """
    Search across Subprocessor objects
    """
    adminSubprocessorSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SubprocessorConnection
    """
    Search across Subscriber objects
    """
    adminSubscriberSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SubscriberConnection
    """
    Search across Task objects
    """
    adminTaskSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TaskConnection
    """
    Search across Template objects
    """
    adminTemplateSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TemplateConnection
    """
    Search across TrustCenter objects
    """
    adminTrustCenterSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TrustCenterConnection
    """
    Search across TrustCenterCompliance objects
    """
    adminTrustCenterComplianceSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TrustCenterComplianceConnection
    """
    Search across TrustCenterDoc objects
    """
    adminTrustCenterDocSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TrustCenterDocConnection
    """
    Search across User objects
    """
    adminUserSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): UserConnection
    """
    Search across UserSetting objects
    """
    adminUserSettingSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): UserSettingConnection
    """
    Search across Webauthn objects
    """
    adminWebauthnSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): WebauthnConnection
}`, BuiltIn: false},
	{Name: "../schema/apitoken.graphql", Input: `extend type Query {
    """
    Look up apiToken by ID
    """
     apiToken(
        """
        ID of the apiToken
        """
        id: ID!
    ):  APIToken!
}


extend type Mutation{
    """
    Create a new apiToken
    """
    createAPIToken(
        """
        values of the apiToken
        """
        input: CreateAPITokenInput!
    ): APITokenCreatePayload!
    """
    Create multiple new apiTokens
    """
    createBulkAPIToken(
        """
        values of the apiToken
        """
        input: [CreateAPITokenInput!]
    ): APITokenBulkCreatePayload!
    """
    Create multiple new apiTokens via file upload
    """
    createBulkCSVAPIToken(
        """
        csv file containing values of the apiToken
        """
        input: Upload!
    ): APITokenBulkCreatePayload!
    """
    Update an existing apiToken
    """
    updateAPIToken(
        """
        ID of the apiToken
        """
        id: ID!
        """
        New values for the apiToken
        """
        input: UpdateAPITokenInput!
    ): APITokenUpdatePayload!
    """
    Delete an existing apiToken
    """
    deleteAPIToken(
        """
        ID of the apiToken
        """
        id: ID!
    ): APITokenDeletePayload!
}

"""
Return response for createAPIToken mutation
"""
type APITokenCreatePayload {
    """
    Created apiToken
    """
    apiToken: APIToken!
}

"""
Return response for updateAPIToken mutation
"""
type APITokenUpdatePayload {
    """
    Updated apiToken
    """
    apiToken: APIToken!
}

"""
Return response for deleteAPIToken mutation
"""
type APITokenDeletePayload {
    """
    Deleted apiToken ID
    """
    deletedID: ID!
}

"""
Return response for createBulkAPIToken mutation
"""
type APITokenBulkCreatePayload {
    """
    Created apiTokens
    """
    apiTokens: [APIToken!]
}

`, BuiltIn: false},
	{Name: "../schema/asset.graphql", Input: `extend type Query {
    """
    Look up asset by ID
    """
     asset(
        """
        ID of the asset
        """
        id: ID!
    ):  Asset!
}

extend type Mutation{
    """
    Create a new asset
    """
    createAsset(
        """
        values of the asset
        """
        input: CreateAssetInput!
    ): AssetCreatePayload!
    """
    Create multiple new assets
    """
    createBulkAsset(
        """
        values of the asset
        """
        input: [CreateAssetInput!]
    ): AssetBulkCreatePayload!
    """
    Create multiple new assets via file upload
    """
    createBulkCSVAsset(
        """
        csv file containing values of the asset
        """
        input: Upload!
    ): AssetBulkCreatePayload!
    """
    Update an existing asset
    """
    updateAsset(
        """
        ID of the asset
        """
        id: ID!
        """
        New values for the asset
        """
        input: UpdateAssetInput!
    ): AssetUpdatePayload!
    """
    Delete an existing asset
    """
    deleteAsset(
        """
        ID of the asset
        """
        id: ID!
    ): AssetDeletePayload!
}

"""
Return response for createAsset mutation
"""
type AssetCreatePayload {
    """
    Created asset
    """
    asset: Asset!
}

"""
Return response for updateAsset mutation
"""
type AssetUpdatePayload {
    """
    Updated asset
    """
    asset: Asset!
}

"""
Return response for deleteAsset mutation
"""
type AssetDeletePayload {
    """
    Deleted asset ID
    """
    deletedID: ID!
}

"""
Return response for createBulkAsset mutation
"""
type AssetBulkCreatePayload {
    """
    Created assets
    """
    assets: [Asset!]
}`, BuiltIn: false},
	{Name: "../schema/audit.graphql", Input: `extend type Query {
  auditLogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for AuditLogs returned from the connection.
    """
    where: AuditLogWhereInput
    """
    Ordering options for AuditLogs returned from the connection.
    """
    orderBy: AuditLogOrder
  ): AuditLogConnection!
}

"""
A connection to a list of items.
"""
type AuditLogConnection {
  """
  A list of edges.
  """
  edges: [AuditLogEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AuditLogEdge {
  """
  The item at the end of the edge.
  """
  node: AuditLog
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

type AuditLog implements Node {
    table: String
    time: Time
    id: ID!
    operation: String
    changes: [Change!]
    updatedBy: ID
}

extend input AuditLogWhereInput {
  """
  reference ID from the main object table unique ID
  """
  refID: ID
  """
  User or service ID that made the update
  """
  updatedBy: ID
  """
  Operation of the entry, INSERT, DELETE, or UPDATE
  """
  operation: String
  """
  Table (Object) that was updated. Required.
  """
  table: String!
  """
  Before time to look for results
  """
  before: Time
  """
  After time to look for results
  """
  after: Time
}

"""
Ordering options for AuditLog connections
"""
input AuditLogOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order AuditLogs.
	"""
	field: AuditLogOrderField!
}

"""
Properties by which AuditLog connections can be ordered.
"""
enum AuditLogOrderField {
	history_time
}`, BuiltIn: false},
	{Name: "../schema/contact.graphql", Input: `extend type Query {
    """
    Look up contact by ID
    """
     contact(
        """
        ID of the contact
        """
        id: ID!
    ):  Contact!
}



extend type Mutation{
    """
    Create a new contact
    """
    createContact(
        """
        values of the contact
        """
        input: CreateContactInput!
    ): ContactCreatePayload!
    """
    Create multiple new contacts
    """
    createBulkContact(
        """
        values of the contact
        """
        input: [CreateContactInput!]
    ): ContactBulkCreatePayload!
    """
    Create multiple new contacts via file upload
    """
    createBulkCSVContact(
        """
        csv file containing values of the contact
        """
        input: Upload!
    ): ContactBulkCreatePayload!
    """
    Update multiple existing contacts
    """
    updateBulkContact(
        """
        IDs of the contacts to update
        """
        ids: [ID!]!
        """
        values to update the contacts with
        """
        input: UpdateContactInput!
    ): ContactBulkUpdatePayload!
    """
    Update an existing contact
    """
    updateContact(
        """
        ID of the contact
        """
        id: ID!
        """
        New values for the contact
        """
        input: UpdateContactInput!
    ): ContactUpdatePayload!
    """
    Delete an existing contact
    """
    deleteContact(
        """
        ID of the contact
        """
        id: ID!
    ): ContactDeletePayload!
}

"""
Return response for createContact mutation
"""
type ContactCreatePayload {
    """
    Created contact
    """
    contact: Contact!
}

"""
Return response for updateContact mutation
"""
type ContactUpdatePayload {
    """
    Updated contact
    """
    contact: Contact!
}

"""
Return response for deleteContact mutation
"""
type ContactDeletePayload {
    """
    Deleted contact ID
    """
    deletedID: ID!
}

"""
Return response for createBulkContact mutation
"""
type ContactBulkCreatePayload {
    """
    Created contacts
    """
    contacts: [Contact!]
}

"""
Return response for updateBulkContact mutation
"""
type ContactBulkUpdatePayload {
    """
    Updated contacts
    """
    contacts: [Contact!]
    """
    IDs of the updated contacts
    """
    updatedIDs: [ID!]
}`, BuiltIn: false},
	{Name: "../schema/control.graphql", Input: `extend type Query {
    """
    Look up control by ID
    """
     control(
        """
        ID of the control
        """
        id: ID!
    ):  Control!
}



extend type Mutation{
    """
    Create a new control
    """
    createControl(
        """
        values of the control
        """
        input: CreateControlInput!
    ): ControlCreatePayload!
    """
    Create multiple new controls
    """
    createBulkControl(
        """
        values of the control
        """
        input: [CreateControlInput!]
    ): ControlBulkCreatePayload!
    """
    Create multiple new controls via file upload
    """
    createBulkCSVControl(
        """
        csv file containing values of the control
        """
        input: Upload!
    ): ControlBulkCreatePayload!
    """
    Update multiple existing controls
    """
    updateBulkControl(
        """
        IDs of the controls to update
        """
        ids: [ID!]!
        """
        values to update the controls with
        """
        input: UpdateControlInput!
    ): ControlBulkUpdatePayload!
    """
    Update an existing control
    """
    updateControl(
        """
        ID of the control
        """
        id: ID!
        """
        New values for the control
        """
        input: UpdateControlInput!
    ): ControlUpdatePayload!
    """
    Delete an existing control
    """
    deleteControl(
        """
        ID of the control
        """
        id: ID!
    ): ControlDeletePayload!
}

"""
Return response for createControl mutation
"""
type ControlCreatePayload {
    """
    Created control
    """
    control: Control!
}

"""
Return response for updateControl mutation
"""
type ControlUpdatePayload {
    """
    Updated control
    """
    control: Control!
}

"""
Return response for deleteControl mutation
"""
type ControlDeletePayload {
    """
    Deleted control ID
    """
    deletedID: ID!
}

"""
Return response for createBulkControl mutation
"""
type ControlBulkCreatePayload {
    """
    Created controls
    """
    controls: [Control!]
}

"""
Return response for updateBulkControl mutation
"""
type ControlBulkUpdatePayload {
    """
    Updated controls
    """
    controls: [Control!]
    """
    IDs of the updated controls
    """
    updatedIDs: [ID!]
}`, BuiltIn: false},
	{Name: "../schema/controlextended.graphql", Input: `"""
CloneControlInput is used to clone controls and their subcontrols
under an organization (ownerID)
"""
input CloneControlInput {
    """
    controlIDs are the ids of the control to clone. If standardID is passed, this is ignored
    """
    controlIDs: [ID!]
    """
    standardID to clone all controls from into the organization
    """
    standardID: ID
    """
    organization ID that the controls will be under
    """
    ownerID: ID
    """
    optional program ID to associate to the controls
    """
    programID: ID
}

extend type Mutation{
  """
  Create a new controls based on existing control ID(s)
  """
  createControlsByClone(
      input: CloneControlInput
  ): ControlBulkCreatePayload!
}

extend type Query {
    """
    All existing categories or domains used in the organization @deprecated
    """
    controlCategories: [String!]
    """
    All existing subcategories or domains used in the organization @deprecated
    """
    controlSubcategories: [String!]
    """
    Existing categories or domains for controls used in the organization
    """
    controlCategoriesByFramework(
        """
        Ordering options for APITokens returned from the connection.
        """
        orderBy: [ControlCategoryOrder!]

        """
        Filtering options for APITokens returned from the connection.
        """
        where: ControlWhereInput
    ): [ControlCategoryEdge!]
    """
    Existing subcategories or subdomains for controls used in the organization
    """
    controlSubcategoriesByFramework(
        """
        Ordering options for APITokens returned from the connection.
        """
        orderBy: [ControlCategoryOrder!]
        """
        Filtering options for APITokens returned from the connection.
        """
        where: ControlWhereInput
    ): [ControlCategoryEdge!]

    """
    Get controls grouped by category
    """
    controlsGroupByCategory(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Control returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
    """
    Filter by category, used for paginated requests to pull more data per category
    """
    category: String
  ): ControlGroupConnection!
}

type ControlCategory {
  name: String!
  referenceFramework: String
}

type ControlGroupConnection {
  edges: [ControlGroupEdge!]!
}

type ControlGroupEdge {
  pageInfo: PageInfo!
  node: ControlGroup!
}

type ControlGroup {
  category: String!
  controls: ControlConnection!
}

"""
A connection to a list of items.
"""
type ControlCategoryConnection {
  """
  A list of edges.
  """
  edges: [ControlCategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ControlCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: ControlCategory!
}
"""
Ordering options for ControlCategory connections
"""
input ControlCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ControlCategories.
  """
  field: ControlCategoryOrderField!
}
"""
Properties by which ControlCategory connections can be ordered.
"""
enum ControlCategoryOrderField {
  category
  referenceFramework
}`, BuiltIn: false},
	{Name: "../schema/controlimplementation.graphql", Input: `extend type Query {
    """
    Look up controlImplementation by ID
    """
     controlImplementation(
        """
        ID of the controlImplementation
        """
        id: ID!
    ):  ControlImplementation!
}

extend type Mutation{
    """
    Create a new controlImplementation
    """
    createControlImplementation(
        """
        values of the controlImplementation
        """
        input: CreateControlImplementationInput!
    ): ControlImplementationCreatePayload!
    """
    Create multiple new controlImplementations
    """
    createBulkControlImplementation(
        """
        values of the controlImplementation
        """
        input: [CreateControlImplementationInput!]
    ): ControlImplementationBulkCreatePayload!
    """
    Create multiple new controlImplementations via file upload
    """
    createBulkCSVControlImplementation(
        """
        csv file containing values of the controlImplementation
        """
        input: Upload!
    ): ControlImplementationBulkCreatePayload!
    """
    Update an existing controlImplementation
    """
    updateControlImplementation(
        """
        ID of the controlImplementation
        """
        id: ID!
        """
        New values for the controlImplementation
        """
        input: UpdateControlImplementationInput!
    ): ControlImplementationUpdatePayload!
    """
    Delete an existing controlImplementation
    """
    deleteControlImplementation(
        """
        ID of the controlImplementation
        """
        id: ID!
    ): ControlImplementationDeletePayload!
}

"""
Return response for createControlImplementation mutation
"""
type ControlImplementationCreatePayload {
    """
    Created controlImplementation
    """
    controlImplementation: ControlImplementation!
}

"""
Return response for updateControlImplementation mutation
"""
type ControlImplementationUpdatePayload {
    """
    Updated controlImplementation
    """
    controlImplementation: ControlImplementation!
}

"""
Return response for deleteControlImplementation mutation
"""
type ControlImplementationDeletePayload {
    """
    Deleted controlImplementation ID
    """
    deletedID: ID!
}

"""
Return response for createBulkControlImplementation mutation
"""
type ControlImplementationBulkCreatePayload {
    """
    Created controlImplementations
    """
    controlImplementations: [ControlImplementation!]
}`, BuiltIn: false},
	{Name: "../schema/controlobjective.graphql", Input: `extend type Query {
    """
    Look up controlObjective by ID
    """
     controlObjective(
        """
        ID of the controlObjective
        """
        id: ID!
    ):  ControlObjective!
}

extend type Mutation{
    """
    Create a new controlObjective
    """
    createControlObjective(
        """
        values of the controlObjective
        """
        input: CreateControlObjectiveInput!
    ): ControlObjectiveCreatePayload!
    """
    Create multiple new controlObjectives
    """
    createBulkControlObjective(
        """
        values of the controlObjective
        """
        input: [CreateControlObjectiveInput!]
    ): ControlObjectiveBulkCreatePayload!
    """
    Create multiple new controlObjectives via file upload
    """
    createBulkCSVControlObjective(
        """
        csv file containing values of the controlObjective
        """
        input: Upload!
    ): ControlObjectiveBulkCreatePayload!
    """
    Update an existing controlObjective
    """
    updateControlObjective(
        """
        ID of the controlObjective
        """
        id: ID!
        """
        New values for the controlObjective
        """
        input: UpdateControlObjectiveInput!
    ): ControlObjectiveUpdatePayload!
    """
    Delete an existing controlObjective
    """
    deleteControlObjective(
        """
        ID of the controlObjective
        """
        id: ID!
    ): ControlObjectiveDeletePayload!
}

"""
Return response for createControlObjective mutation
"""
type ControlObjectiveCreatePayload {
    """
    Created controlObjective
    """
    controlObjective: ControlObjective!
}

"""
Return response for updateControlObjective mutation
"""
type ControlObjectiveUpdatePayload {
    """
    Updated controlObjective
    """
    controlObjective: ControlObjective!
}

"""
Return response for deleteControlObjective mutation
"""
type ControlObjectiveDeletePayload {
    """
    Deleted controlObjective ID
    """
    deletedID: ID!
}

"""
Return response for createBulkControlObjective mutation
"""
type ControlObjectiveBulkCreatePayload {
    """
    Created controlObjectives
    """
    controlObjectives: [ControlObjective!]
}`, BuiltIn: false},
	{Name: "../schema/customdomain.graphql", Input: `extend type Query {
    """
    Look up customDomain by ID
    """
     customDomain(
        """
        ID of the customDomain
        """
        id: ID!
    ):  CustomDomain!
}

extend type Mutation{
    """
    Create a new customDomain
    """
    createCustomDomain(
        """
        values of the customDomain
        """
        input: CreateCustomDomainInput!
    ): CustomDomainCreatePayload!
    """
    Create multiple new customDomains
    """
    createBulkCustomDomain(
        """
        values of the customDomain
        """
        input: [CreateCustomDomainInput!]
    ): CustomDomainBulkCreatePayload!
    """
    Create multiple new customDomains via file upload
    """
    createBulkCSVCustomDomain(
        """
        csv file containing values of the customDomain
        """
        input: Upload!
    ): CustomDomainBulkCreatePayload!
    """
    Update an existing customDomain
    """
    updateCustomDomain(
        """
        ID of the customDomain
        """
        id: ID!
        """
        New values for the customDomain
        """
        input: UpdateCustomDomainInput!
    ): CustomDomainUpdatePayload!
    """
    Delete an existing customDomain
    """
    deleteCustomDomain(
        """
        ID of the customDomain
        """
        id: ID!
    ): CustomDomainDeletePayload!
}

"""
Return response for createCustomDomain mutation
"""
type CustomDomainCreatePayload {
    """
    Created customDomain
    """
    customDomain: CustomDomain!
}

"""
Return response for updateCustomDomain mutation
"""
type CustomDomainUpdatePayload {
    """
    Updated customDomain
    """
    customDomain: CustomDomain!
}

"""
Return response for deleteCustomDomain mutation
"""
type CustomDomainDeletePayload {
    """
    Deleted customDomain ID
    """
    deletedID: ID!
}

"""
Return response for createBulkCustomDomain mutation
"""
type CustomDomainBulkCreatePayload {
    """
    Created customDomains
    """
    customDomains: [CustomDomain!]
}`, BuiltIn: false},
	{Name: "../schema/directives.graphql", Input: `directive @hidden(if: Boolean) on OBJECT | FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "../schema/dnsverification.graphql", Input: `extend type Query {
    """
    Look up dnsVerification by ID
    """
     dnsVerification(
        """
        ID of the dnsVerification
        """
        id: ID!
    ):  DNSVerification!
}

extend type Mutation{
    """
    Create a new dnsVerification
    """
    createDNSVerification(
        """
        values of the dnsVerification
        """
        input: CreateDNSVerificationInput!
    ): DNSVerificationCreatePayload!
    """
    Create multiple new dnsVerifications
    """
    createBulkDNSVerification(
        """
        values of the dnsVerification
        """
        input: [CreateDNSVerificationInput!]
    ): DNSVerificationBulkCreatePayload!
    """
    Create multiple new dnsVerifications via file upload
    """
    createBulkCSVDNSVerification(
        """
        csv file containing values of the dnsVerification
        """
        input: Upload!
    ): DNSVerificationBulkCreatePayload!
    """
    Update an existing dnsVerification
    """
    updateDNSVerification(
        """
        ID of the dnsVerification
        """
        id: ID!
        """
        New values for the dnsVerification
        """
        input: UpdateDNSVerificationInput!
    ): DNSVerificationUpdatePayload!
    """
    Delete an existing dnsVerification
    """
    deleteDNSVerification(
        """
        ID of the dnsVerification
        """
        id: ID!
    ): DNSVerificationDeletePayload!
}

"""
Return response for createDNSVerification mutation
"""
type DNSVerificationCreatePayload {
    """
    Created dnsVerification
    """
    dnsVerification: DNSVerification!
}

"""
Return response for updateDNSVerification mutation
"""
type DNSVerificationUpdatePayload {
    """
    Updated dnsVerification
    """
    dnsVerification: DNSVerification!
}

"""
Return response for deleteDNSVerification mutation
"""
type DNSVerificationDeletePayload {
    """
    Deleted dnsVerification ID
    """
    deletedID: ID!
}

"""
Return response for createBulkDNSVerification mutation
"""
type DNSVerificationBulkCreatePayload {
    """
    Created dnsVerifications
    """
    dnsVerifications: [DNSVerification!]
}`, BuiltIn: false},
	{Name: "../schema/documentdata.graphql", Input: `extend type Query {
    """
    Look up documentData by ID
    """
     documentData(
        """
        ID of the documentData
        """
        id: ID!
    ):  DocumentData!
}

extend type Mutation{
    """
    Create a new documentData
    """
    createDocumentData(
        """
        values of the documentData
        """
        input: CreateDocumentDataInput!
    ): DocumentDataCreatePayload!
    """
    Create multiple new documentData
    """
    createBulkDocumentData(
        """
        values of the documentData
        """
        input: [CreateDocumentDataInput!]
    ): DocumentDataBulkCreatePayload!
    """
    Create multiple new documentData via file upload
    """
    createBulkCSVDocumentData(
        """
        csv file containing values of the documentData
        """
        input: Upload!
    ): DocumentDataBulkCreatePayload!
    """
    Update an existing documentData
    """
    updateDocumentData(
        """
        ID of the documentData
        """
        id: ID!
        """
        New values for the documentData
        """
        input: UpdateDocumentDataInput!
    ): DocumentDataUpdatePayload!
    """
    Delete an existing documentData
    """
    deleteDocumentData(
        """
        ID of the documentData
        """
        id: ID!
    ): DocumentDataDeletePayload!
}

"""
Return response for createDocumentData mutation
"""
type DocumentDataCreatePayload {
    """
    Created documentData
    """
    documentData: DocumentData!
}

"""
Return response for updateDocumentData mutation
"""
type DocumentDataUpdatePayload {
    """
    Updated documentData
    """
    documentData: DocumentData!
}

"""
Return response for deleteDocumentData mutation
"""
type DocumentDataDeletePayload {
    """
    Deleted documentData ID
    """
    deletedID: ID!
}

"""
Return response for createBulkDocumentData mutation
"""
type DocumentDataBulkCreatePayload {
    """
    Created documentData
    """
    documentData: [DocumentData!]
}`, BuiltIn: false},
	{Name: "../schema/ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type APIToken implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name associated with the token
  """
  name: String!
  token: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  lastUsedAt: Time
  """
  whether the token is active
  """
  isActive: Boolean
  """
  the reason the token was revoked
  """
  revokedReason: String
  """
  the user who revoked the token
  """
  revokedBy: String
  """
  when the token was revoked
  """
  revokedAt: Time
  """
  SSO verification time for the owning organization
  """
  ssoAuthorizations: SSOAuthorizationMap
  owner: Organization
}
"""
A connection to a list of items.
"""
type APITokenConnection {
  """
  A list of edges.
  """
  edges: [APITokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type APITokenEdge {
  """
  The item at the end of the edge.
  """
  node: APIToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for APIToken connections
"""
input APITokenOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order APITokens.
  """
  field: APITokenOrderField!
}
"""
Properties by which APIToken connections can be ordered.
"""
enum APITokenOrderField {
  created_at
  updated_at
  name
  expires_at
  last_used_at
  is_active
}
"""
APITokenWhereInput is used for filtering APIToken objects.
Input was generated by ent.
"""
input APITokenWhereInput {
  not: APITokenWhereInput
  and: [APITokenWhereInput!]
  or: [APITokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  is_active field predicates
  """
  isActive: Boolean
  isActiveNEQ: Boolean
  isActiveIsNil: Boolean
  isActiveNotNil: Boolean
  """
  revoked_reason field predicates
  """
  revokedReason: String
  revokedReasonNEQ: String
  revokedReasonIn: [String!]
  revokedReasonNotIn: [String!]
  revokedReasonGT: String
  revokedReasonGTE: String
  revokedReasonLT: String
  revokedReasonLTE: String
  revokedReasonContains: String
  revokedReasonHasPrefix: String
  revokedReasonHasSuffix: String
  revokedReasonIsNil: Boolean
  revokedReasonNotNil: Boolean
  revokedReasonEqualFold: String
  revokedReasonContainsFold: String
  """
  revoked_by field predicates
  """
  revokedBy: String
  revokedByNEQ: String
  revokedByIn: [String!]
  revokedByNotIn: [String!]
  revokedByGT: String
  revokedByGTE: String
  revokedByLT: String
  revokedByLTE: String
  revokedByContains: String
  revokedByHasPrefix: String
  revokedByHasSuffix: String
  revokedByIsNil: Boolean
  revokedByNotNil: Boolean
  revokedByEqualFold: String
  revokedByContainsFold: String
  """
  revoked_at field predicates
  """
  revokedAt: Time
  revokedAtNEQ: Time
  revokedAtIn: [Time!]
  revokedAtNotIn: [Time!]
  revokedAtGT: Time
  revokedAtGTE: Time
  revokedAtLT: Time
  revokedAtLTE: Time
  revokedAtIsNil: Boolean
  revokedAtNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
type ActionPlan implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the name of the action_plan
  """
  name: String!
  """
  status of the action_plan, e.g. draft, published, archived, etc.
  """
  status: ActionPlanDocumentStatus
  """
  type of the action_plan, e.g. compliance, operational, health and safety, etc.
  """
  actionPlanType: String
  """
  details of the action_plan
  """
  details: String
  """
  whether approval is required for edits to the action_plan
  """
  approvalRequired: Boolean
  """
  the date the action_plan should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the action_plan should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ActionPlanFrequency
  """
  the id of the group responsible for approving the action_plan
  """
  approverID: ID
  """
  the id of the group responsible for approving the action_plan
  """
  delegateID: ID
  summary: String
  """
  auto-generated tag suggestions for the action_plan
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the action_plan
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the action_plan
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the action_plan
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the action_plan
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the action_plan
  """
  dismissedImprovementSuggestions: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  due date of the action plan
  """
  dueDate: Time
  """
  priority of the action plan
  """
  priority: ActionPlanPriority
  """
  source of the action plan
  """
  source: String
  """
  the group of users who are responsible for approving the action_plan
  """
  approver: Group
  """
  temporary delegates for the action_plan, used for temporary approval
  """
  delegate: Group
  owner: Organization
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
}
"""
A connection to a list of items.
"""
type ActionPlanConnection {
  """
  A list of edges.
  """
  edges: [ActionPlanEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ActionPlanDocumentStatus is enum for the field status
"""
enum ActionPlanDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type ActionPlanEdge {
  """
  The item at the end of the edge.
  """
  node: ActionPlan
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ActionPlanFrequency is enum for the field review_frequency
"""
enum ActionPlanFrequency @goModel(model: "github.com/theopenlane/core/pkg/enums.Frequency") {
  YEARLY
  QUARTERLY
  BIANNUALLY
  MONTHLY
}
type ActionPlanHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ActionPlanHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the name of the action_plan
  """
  name: String!
  """
  status of the action_plan, e.g. draft, published, archived, etc.
  """
  status: ActionPlanHistoryDocumentStatus
  """
  type of the action_plan, e.g. compliance, operational, health and safety, etc.
  """
  actionPlanType: String
  """
  details of the action_plan
  """
  details: String
  """
  whether approval is required for edits to the action_plan
  """
  approvalRequired: Boolean
  """
  the date the action_plan should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the action_plan should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ActionPlanHistoryFrequency
  """
  the id of the group responsible for approving the action_plan
  """
  approverID: String
  """
  the id of the group responsible for approving the action_plan
  """
  delegateID: String
  summary: String
  """
  auto-generated tag suggestions for the action_plan
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the action_plan
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the action_plan
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the action_plan
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the action_plan
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the action_plan
  """
  dismissedImprovementSuggestions: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  due date of the action plan
  """
  dueDate: Time
  """
  priority of the action plan
  """
  priority: ActionPlanHistoryPriority
  """
  source of the action plan
  """
  source: String
}
"""
A connection to a list of items.
"""
type ActionPlanHistoryConnection {
  """
  A list of edges.
  """
  edges: [ActionPlanHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ActionPlanHistoryDocumentStatus is enum for the field status
"""
enum ActionPlanHistoryDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type ActionPlanHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ActionPlanHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ActionPlanHistoryFrequency is enum for the field review_frequency
"""
enum ActionPlanHistoryFrequency @goModel(model: "github.com/theopenlane/core/pkg/enums.Frequency") {
  YEARLY
  QUARTERLY
  BIANNUALLY
  MONTHLY
}
"""
ActionPlanHistoryOpType is enum for the field operation
"""
enum ActionPlanHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ActionPlanHistory connections
"""
input ActionPlanHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ActionPlanHistories.
  """
  field: ActionPlanHistoryOrderField!
}
"""
Properties by which ActionPlanHistory connections can be ordered.
"""
enum ActionPlanHistoryOrderField {
  history_time
  created_at
  updated_at
  revision
  name
  STATUS
  review_due
  REVIEW_FREQUENCY
  due_date
  PRIORITY
  source
}
"""
ActionPlanHistoryPriority is enum for the field priority
"""
enum ActionPlanHistoryPriority @goModel(model: "github.com/theopenlane/core/pkg/enums.Priority") {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
"""
ActionPlanHistoryWhereInput is used for filtering ActionPlanHistory objects.
Input was generated by ent.
"""
input ActionPlanHistoryWhereInput {
  not: ActionPlanHistoryWhereInput
  and: [ActionPlanHistoryWhereInput!]
  or: [ActionPlanHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ActionPlanHistoryOpType
  operationNEQ: ActionPlanHistoryOpType
  operationIn: [ActionPlanHistoryOpType!]
  operationNotIn: [ActionPlanHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: ActionPlanHistoryDocumentStatus
  statusNEQ: ActionPlanHistoryDocumentStatus
  statusIn: [ActionPlanHistoryDocumentStatus!]
  statusNotIn: [ActionPlanHistoryDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  action_plan_type field predicates
  """
  actionPlanType: String
  actionPlanTypeNEQ: String
  actionPlanTypeIn: [String!]
  actionPlanTypeNotIn: [String!]
  actionPlanTypeGT: String
  actionPlanTypeGTE: String
  actionPlanTypeLT: String
  actionPlanTypeLTE: String
  actionPlanTypeContains: String
  actionPlanTypeHasPrefix: String
  actionPlanTypeHasSuffix: String
  actionPlanTypeIsNil: Boolean
  actionPlanTypeNotNil: Boolean
  actionPlanTypeEqualFold: String
  actionPlanTypeContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  approval_required field predicates
  """
  approvalRequired: Boolean
  approvalRequiredNEQ: Boolean
  approvalRequiredIsNil: Boolean
  approvalRequiredNotNil: Boolean
  """
  review_due field predicates
  """
  reviewDue: Time
  reviewDueNEQ: Time
  reviewDueIn: [Time!]
  reviewDueNotIn: [Time!]
  reviewDueGT: Time
  reviewDueGTE: Time
  reviewDueLT: Time
  reviewDueLTE: Time
  reviewDueIsNil: Boolean
  reviewDueNotNil: Boolean
  """
  review_frequency field predicates
  """
  reviewFrequency: ActionPlanHistoryFrequency
  reviewFrequencyNEQ: ActionPlanHistoryFrequency
  reviewFrequencyIn: [ActionPlanHistoryFrequency!]
  reviewFrequencyNotIn: [ActionPlanHistoryFrequency!]
  reviewFrequencyIsNil: Boolean
  reviewFrequencyNotNil: Boolean
  """
  approver_id field predicates
  """
  approverID: String
  approverIDNEQ: String
  approverIDIn: [String!]
  approverIDNotIn: [String!]
  approverIDGT: String
  approverIDGTE: String
  approverIDLT: String
  approverIDLTE: String
  approverIDContains: String
  approverIDHasPrefix: String
  approverIDHasSuffix: String
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: String
  approverIDContainsFold: String
  """
  delegate_id field predicates
  """
  delegateID: String
  delegateIDNEQ: String
  delegateIDIn: [String!]
  delegateIDNotIn: [String!]
  delegateIDGT: String
  delegateIDGTE: String
  delegateIDLT: String
  delegateIDLTE: String
  delegateIDContains: String
  delegateIDHasPrefix: String
  delegateIDHasSuffix: String
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: String
  delegateIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  due_date field predicates
  """
  dueDate: Time
  dueDateNEQ: Time
  dueDateIn: [Time!]
  dueDateNotIn: [Time!]
  dueDateGT: Time
  dueDateGTE: Time
  dueDateLT: Time
  dueDateLTE: Time
  dueDateIsNil: Boolean
  dueDateNotNil: Boolean
  """
  priority field predicates
  """
  priority: ActionPlanHistoryPriority
  priorityNEQ: ActionPlanHistoryPriority
  priorityIn: [ActionPlanHistoryPriority!]
  priorityNotIn: [ActionPlanHistoryPriority!]
  priorityIsNil: Boolean
  priorityNotNil: Boolean
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
}
"""
Ordering options for ActionPlan connections
"""
input ActionPlanOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ActionPlans.
  """
  field: ActionPlanOrderField!
}
"""
Properties by which ActionPlan connections can be ordered.
"""
enum ActionPlanOrderField {
  created_at
  updated_at
  revision
  name
  STATUS
  review_due
  REVIEW_FREQUENCY
  due_date
  PRIORITY
  source
}
"""
ActionPlanPriority is enum for the field priority
"""
enum ActionPlanPriority @goModel(model: "github.com/theopenlane/core/pkg/enums.Priority") {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
"""
ActionPlanWhereInput is used for filtering ActionPlan objects.
Input was generated by ent.
"""
input ActionPlanWhereInput {
  not: ActionPlanWhereInput
  and: [ActionPlanWhereInput!]
  or: [ActionPlanWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: ActionPlanDocumentStatus
  statusNEQ: ActionPlanDocumentStatus
  statusIn: [ActionPlanDocumentStatus!]
  statusNotIn: [ActionPlanDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  action_plan_type field predicates
  """
  actionPlanType: String
  actionPlanTypeNEQ: String
  actionPlanTypeIn: [String!]
  actionPlanTypeNotIn: [String!]
  actionPlanTypeGT: String
  actionPlanTypeGTE: String
  actionPlanTypeLT: String
  actionPlanTypeLTE: String
  actionPlanTypeContains: String
  actionPlanTypeHasPrefix: String
  actionPlanTypeHasSuffix: String
  actionPlanTypeIsNil: Boolean
  actionPlanTypeNotNil: Boolean
  actionPlanTypeEqualFold: String
  actionPlanTypeContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  approval_required field predicates
  """
  approvalRequired: Boolean
  approvalRequiredNEQ: Boolean
  approvalRequiredIsNil: Boolean
  approvalRequiredNotNil: Boolean
  """
  review_due field predicates
  """
  reviewDue: Time
  reviewDueNEQ: Time
  reviewDueIn: [Time!]
  reviewDueNotIn: [Time!]
  reviewDueGT: Time
  reviewDueGTE: Time
  reviewDueLT: Time
  reviewDueLTE: Time
  reviewDueIsNil: Boolean
  reviewDueNotNil: Boolean
  """
  review_frequency field predicates
  """
  reviewFrequency: ActionPlanFrequency
  reviewFrequencyNEQ: ActionPlanFrequency
  reviewFrequencyIn: [ActionPlanFrequency!]
  reviewFrequencyNotIn: [ActionPlanFrequency!]
  reviewFrequencyIsNil: Boolean
  reviewFrequencyNotNil: Boolean
  """
  approver_id field predicates
  """
  approverID: ID
  approverIDNEQ: ID
  approverIDIn: [ID!]
  approverIDNotIn: [ID!]
  approverIDGT: ID
  approverIDGTE: ID
  approverIDLT: ID
  approverIDLTE: ID
  approverIDContains: ID
  approverIDHasPrefix: ID
  approverIDHasSuffix: ID
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: ID
  approverIDContainsFold: ID
  """
  delegate_id field predicates
  """
  delegateID: ID
  delegateIDNEQ: ID
  delegateIDIn: [ID!]
  delegateIDNotIn: [ID!]
  delegateIDGT: ID
  delegateIDGTE: ID
  delegateIDLT: ID
  delegateIDLTE: ID
  delegateIDContains: ID
  delegateIDHasPrefix: ID
  delegateIDHasSuffix: ID
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: ID
  delegateIDContainsFold: ID
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  due_date field predicates
  """
  dueDate: Time
  dueDateNEQ: Time
  dueDateIn: [Time!]
  dueDateNotIn: [Time!]
  dueDateGT: Time
  dueDateGTE: Time
  dueDateLT: Time
  dueDateLTE: Time
  dueDateIsNil: Boolean
  dueDateNotNil: Boolean
  """
  priority field predicates
  """
  priority: ActionPlanPriority
  priorityNEQ: ActionPlanPriority
  priorityIn: [ActionPlanPriority!]
  priorityNotIn: [ActionPlanPriority!]
  priorityIsNil: Boolean
  priorityNotNil: Boolean
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  approver edge predicates
  """
  hasApprover: Boolean
  hasApproverWith: [GroupWhereInput!]
  """
  delegate edge predicates
  """
  hasDelegate: Boolean
  hasDelegateWith: [GroupWhereInput!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
type Asset implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the type of the asset, e.g. technology, domain, device, etc
  """
  assetType: AssetAssetType!
  """
  the name of the asset, e.g. matts computer, office router, IP address, etc
  """
  name: String!
  description: String
  """
  unique identifier like domain, device id, etc
  """
  identifier: String
  """
  the website of the asset, if applicable
  """
  website: String
  """
  the CPE (Common Platform Enumeration) of the asset, if applicable
  """
  cpe: String
  """
  the categories of the asset, e.g. web server, database, etc
  """
  categories: [String!]
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  scans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
}
"""
AssetAssetType is enum for the field asset_type
"""
enum AssetAssetType @goModel(model: "github.com/theopenlane/core/pkg/enums.AssetType") {
  TECHNOLOGY
  DOMAIN
  DEVICE
  TELEPHONE
}
"""
A connection to a list of items.
"""
type AssetConnection {
  """
  A list of edges.
  """
  edges: [AssetEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AssetEdge {
  """
  The item at the end of the edge.
  """
  node: Asset
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type AssetHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: AssetHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the type of the asset, e.g. technology, domain, device, etc
  """
  assetType: AssetHistoryAssetType!
  """
  the name of the asset, e.g. matts computer, office router, IP address, etc
  """
  name: String!
  description: String
  """
  unique identifier like domain, device id, etc
  """
  identifier: String
  """
  the website of the asset, if applicable
  """
  website: String
  """
  the CPE (Common Platform Enumeration) of the asset, if applicable
  """
  cpe: String
  """
  the categories of the asset, e.g. web server, database, etc
  """
  categories: [String!]
}
"""
AssetHistoryAssetType is enum for the field asset_type
"""
enum AssetHistoryAssetType @goModel(model: "github.com/theopenlane/core/pkg/enums.AssetType") {
  TECHNOLOGY
  DOMAIN
  DEVICE
  TELEPHONE
}
"""
A connection to a list of items.
"""
type AssetHistoryConnection {
  """
  A list of edges.
  """
  edges: [AssetHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AssetHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: AssetHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AssetHistoryOpType is enum for the field operation
"""
enum AssetHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for AssetHistory connections
"""
input AssetHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AssetHistories.
  """
  field: AssetHistoryOrderField!
}
"""
Properties by which AssetHistory connections can be ordered.
"""
enum AssetHistoryOrderField {
  history_time
  created_at
  updated_at
  ASSET_TYPE
  name
}
"""
AssetHistoryWhereInput is used for filtering AssetHistory objects.
Input was generated by ent.
"""
input AssetHistoryWhereInput {
  not: AssetHistoryWhereInput
  and: [AssetHistoryWhereInput!]
  or: [AssetHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: AssetHistoryOpType
  operationNEQ: AssetHistoryOpType
  operationIn: [AssetHistoryOpType!]
  operationNotIn: [AssetHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  asset_type field predicates
  """
  assetType: AssetHistoryAssetType
  assetTypeNEQ: AssetHistoryAssetType
  assetTypeIn: [AssetHistoryAssetType!]
  assetTypeNotIn: [AssetHistoryAssetType!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  identifier field predicates
  """
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierIsNil: Boolean
  identifierNotNil: Boolean
  identifierEqualFold: String
  identifierContainsFold: String
  """
  website field predicates
  """
  website: String
  websiteNEQ: String
  websiteIn: [String!]
  websiteNotIn: [String!]
  websiteGT: String
  websiteGTE: String
  websiteLT: String
  websiteLTE: String
  websiteContains: String
  websiteHasPrefix: String
  websiteHasSuffix: String
  websiteIsNil: Boolean
  websiteNotNil: Boolean
  websiteEqualFold: String
  websiteContainsFold: String
}
"""
Ordering options for Asset connections
"""
input AssetOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Assets.
  """
  field: AssetOrderField!
}
"""
Properties by which Asset connections can be ordered.
"""
enum AssetOrderField {
  created_at
  updated_at
  ASSET_TYPE
  name
}
"""
AssetWhereInput is used for filtering Asset objects.
Input was generated by ent.
"""
input AssetWhereInput {
  not: AssetWhereInput
  and: [AssetWhereInput!]
  or: [AssetWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  asset_type field predicates
  """
  assetType: AssetAssetType
  assetTypeNEQ: AssetAssetType
  assetTypeIn: [AssetAssetType!]
  assetTypeNotIn: [AssetAssetType!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  identifier field predicates
  """
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierIsNil: Boolean
  identifierNotNil: Boolean
  identifierEqualFold: String
  identifierContainsFold: String
  """
  website field predicates
  """
  website: String
  websiteNEQ: String
  websiteIn: [String!]
  websiteNotIn: [String!]
  websiteGT: String
  websiteGTE: String
  websiteLT: String
  websiteLTE: String
  websiteContains: String
  websiteHasPrefix: String
  websiteHasSuffix: String
  websiteIsNil: Boolean
  websiteNotNil: Boolean
  websiteEqualFold: String
  websiteContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  scans edge predicates
  """
  hasScans: Boolean
  hasScansWith: [ScanWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
}
type Contact implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the full name of the contact
  """
  fullName: String!
  """
  the title of the contact
  """
  title: String
  """
  the company of the contact
  """
  company: String
  """
  the email of the contact
  """
  email: String
  """
  the phone number of the contact
  """
  phoneNumber: String
  """
  the address of the contact
  """
  address: String
  """
  status of the contact
  """
  status: ContactUserStatus!
  owner: Organization
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
A connection to a list of items.
"""
type ContactConnection {
  """
  A list of edges.
  """
  edges: [ContactEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ContactEdge {
  """
  The item at the end of the edge.
  """
  node: Contact
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ContactHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ContactHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the full name of the contact
  """
  fullName: String!
  """
  the title of the contact
  """
  title: String
  """
  the company of the contact
  """
  company: String
  """
  the email of the contact
  """
  email: String
  """
  the phone number of the contact
  """
  phoneNumber: String
  """
  the address of the contact
  """
  address: String
  """
  status of the contact
  """
  status: ContactHistoryUserStatus!
}
"""
A connection to a list of items.
"""
type ContactHistoryConnection {
  """
  A list of edges.
  """
  edges: [ContactHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ContactHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ContactHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ContactHistoryOpType is enum for the field operation
"""
enum ContactHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ContactHistory connections
"""
input ContactHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ContactHistories.
  """
  field: ContactHistoryOrderField!
}
"""
Properties by which ContactHistory connections can be ordered.
"""
enum ContactHistoryOrderField {
  history_time
  created_at
  updated_at
  full_name
  title
  company
  email
  STATUS
}
"""
ContactHistoryUserStatus is enum for the field status
"""
enum ContactHistoryUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
ContactHistoryWhereInput is used for filtering ContactHistory objects.
Input was generated by ent.
"""
input ContactHistoryWhereInput {
  not: ContactHistoryWhereInput
  and: [ContactHistoryWhereInput!]
  or: [ContactHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ContactHistoryOpType
  operationNEQ: ContactHistoryOpType
  operationIn: [ContactHistoryOpType!]
  operationNotIn: [ContactHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  full_name field predicates
  """
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  company field predicates
  """
  company: String
  companyNEQ: String
  companyIn: [String!]
  companyNotIn: [String!]
  companyGT: String
  companyGTE: String
  companyLT: String
  companyLTE: String
  companyContains: String
  companyHasPrefix: String
  companyHasSuffix: String
  companyIsNil: Boolean
  companyNotNil: Boolean
  companyEqualFold: String
  companyContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIsNil: Boolean
  phoneNumberNotNil: Boolean
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  status field predicates
  """
  status: ContactHistoryUserStatus
  statusNEQ: ContactHistoryUserStatus
  statusIn: [ContactHistoryUserStatus!]
  statusNotIn: [ContactHistoryUserStatus!]
}
"""
Ordering options for Contact connections
"""
input ContactOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Contacts.
  """
  field: ContactOrderField!
}
"""
Properties by which Contact connections can be ordered.
"""
enum ContactOrderField {
  created_at
  updated_at
  full_name
  title
  company
  email
  STATUS
}
"""
ContactUserStatus is enum for the field status
"""
enum ContactUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
ContactWhereInput is used for filtering Contact objects.
Input was generated by ent.
"""
input ContactWhereInput {
  not: ContactWhereInput
  and: [ContactWhereInput!]
  or: [ContactWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  full_name field predicates
  """
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  company field predicates
  """
  company: String
  companyNEQ: String
  companyIn: [String!]
  companyNotIn: [String!]
  companyGT: String
  companyGTE: String
  companyLT: String
  companyLTE: String
  companyContains: String
  companyHasPrefix: String
  companyHasSuffix: String
  companyIsNil: Boolean
  companyNotNil: Boolean
  companyEqualFold: String
  companyContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIsNil: Boolean
  phoneNumberNotNil: Boolean
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  status field predicates
  """
  status: ContactUserStatus
  statusNEQ: ContactUserStatus
  statusIn: [ContactUserStatus!]
  statusNotIn: [ContactUserStatus!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
type Control implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  description of what the control is supposed to accomplish
  """
  description: String
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  """
  status of the control
  """
  status: ControlControlStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlControlSource
  """
  the reference framework for the control if it came from a standard, empty if not associated with a standard
  """
  referenceFramework: String
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: ControlControlType
  """
  category of the control
  """
  category: String
  """
  category id of the control
  """
  categoryID: String
  """
  subcategory of the control
  """
  subcategory: String
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  """
  references for the control
  """
  references: [Reference!]
  """
  the id of the group that owns the control
  """
  controlOwnerID: ID
  """
  the id of the group that is temporarily delegated to own the control
  """
  delegateID: ID
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the unique reference code for the control
  """
  refCode: String!
  """
  the id of the standard that the control belongs to, if applicable
  """
  standardID: ID
  evidence(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Evidences returned from the connection.
    """
    orderBy: [EvidenceOrder!]

    """
    Filtering options for Evidences returned from the connection.
    """
    where: EvidenceWhereInput
  ): EvidenceConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlans returned from the connection.
    """
    orderBy: [ActionPlanOrder!]

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  """
  the group of users who are responsible for the control, will be assigned tasks, approval, etc.
  """
  controlOwner: Group
  """
  temporary delegate for the control, used for temporary control ownership
  """
  delegate: Group
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  standard: Standard
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  assets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Assets returned from the connection.
    """
    orderBy: [AssetOrder!]

    """
    Filtering options for Assets returned from the connection.
    """
    where: AssetWhereInput
  ): AssetConnection!
  scans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  controlImplementations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  scheduledJobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobs returned from the connection.
    """
    orderBy: [ScheduledJobOrder!]

    """
    Filtering options for ScheduledJobs returned from the connection.
    """
    where: ScheduledJobWhereInput
  ): ScheduledJobConnection!
}
"""
A connection to a list of items.
"""
type ControlConnection {
  """
  A list of edges.
  """
  edges: [ControlEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ControlControlSource is enum for the field source
"""
enum ControlControlSource @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlSource") {
  FRAMEWORK
  TEMPLATE
  USER_DEFINED
  IMPORTED
}
"""
ControlControlStatus is enum for the field status
"""
enum ControlControlStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlStatus") {
  PREPARING
  NEEDS_APPROVAL
  CHANGES_REQUESTED
  APPROVED
  ARCHIVED
  NOT_IMPLEMENTED
}
"""
ControlControlType is enum for the field control_type
"""
enum ControlControlType @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlType") {
  PREVENTATIVE
  DETECTIVE
  CORRECTIVE
  DETERRENT
}
"""
An edge in a connection.
"""
type ControlEdge {
  """
  The item at the end of the edge.
  """
  node: Control
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ControlHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ControlHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  description of what the control is supposed to accomplish
  """
  description: String
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  """
  status of the control
  """
  status: ControlHistoryControlStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlHistoryControlSource
  """
  the reference framework for the control if it came from a standard, empty if not associated with a standard
  """
  referenceFramework: String
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: ControlHistoryControlType
  """
  category of the control
  """
  category: String
  """
  category id of the control
  """
  categoryID: String
  """
  subcategory of the control
  """
  subcategory: String
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  """
  references for the control
  """
  references: [Reference!]
  """
  the id of the group that owns the control
  """
  controlOwnerID: String
  """
  the id of the group that is temporarily delegated to own the control
  """
  delegateID: String
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the unique reference code for the control
  """
  refCode: String!
  """
  the id of the standard that the control belongs to, if applicable
  """
  standardID: String
}
"""
A connection to a list of items.
"""
type ControlHistoryConnection {
  """
  A list of edges.
  """
  edges: [ControlHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ControlHistoryControlSource is enum for the field source
"""
enum ControlHistoryControlSource @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlSource") {
  FRAMEWORK
  TEMPLATE
  USER_DEFINED
  IMPORTED
}
"""
ControlHistoryControlStatus is enum for the field status
"""
enum ControlHistoryControlStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlStatus") {
  PREPARING
  NEEDS_APPROVAL
  CHANGES_REQUESTED
  APPROVED
  ARCHIVED
  NOT_IMPLEMENTED
}
"""
ControlHistoryControlType is enum for the field control_type
"""
enum ControlHistoryControlType @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlType") {
  PREVENTATIVE
  DETECTIVE
  CORRECTIVE
  DETERRENT
}
"""
An edge in a connection.
"""
type ControlHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ControlHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ControlHistoryOpType is enum for the field operation
"""
enum ControlHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ControlHistory connections
"""
input ControlHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ControlHistories.
  """
  field: ControlHistoryOrderField!
}
"""
Properties by which ControlHistory connections can be ordered.
"""
enum ControlHistoryOrderField {
  history_time
  created_at
  updated_at
  STATUS
  SOURCE
  REFERENCE_FRAMEWORK
  CONTROL_TYPE
  category
  subcategory
  ref_code
}
"""
ControlHistoryWhereInput is used for filtering ControlHistory objects.
Input was generated by ent.
"""
input ControlHistoryWhereInput {
  not: ControlHistoryWhereInput
  and: [ControlHistoryWhereInput!]
  or: [ControlHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ControlHistoryOpType
  operationNEQ: ControlHistoryOpType
  operationIn: [ControlHistoryOpType!]
  operationNotIn: [ControlHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  reference_id field predicates
  """
  referenceID: String
  referenceIDNEQ: String
  referenceIDIn: [String!]
  referenceIDNotIn: [String!]
  referenceIDGT: String
  referenceIDGTE: String
  referenceIDLT: String
  referenceIDLTE: String
  referenceIDContains: String
  referenceIDHasPrefix: String
  referenceIDHasSuffix: String
  referenceIDIsNil: Boolean
  referenceIDNotNil: Boolean
  referenceIDEqualFold: String
  referenceIDContainsFold: String
  """
  auditor_reference_id field predicates
  """
  auditorReferenceID: String
  auditorReferenceIDNEQ: String
  auditorReferenceIDIn: [String!]
  auditorReferenceIDNotIn: [String!]
  auditorReferenceIDGT: String
  auditorReferenceIDGTE: String
  auditorReferenceIDLT: String
  auditorReferenceIDLTE: String
  auditorReferenceIDContains: String
  auditorReferenceIDHasPrefix: String
  auditorReferenceIDHasSuffix: String
  auditorReferenceIDIsNil: Boolean
  auditorReferenceIDNotNil: Boolean
  auditorReferenceIDEqualFold: String
  auditorReferenceIDContainsFold: String
  """
  status field predicates
  """
  status: ControlHistoryControlStatus
  statusNEQ: ControlHistoryControlStatus
  statusIn: [ControlHistoryControlStatus!]
  statusNotIn: [ControlHistoryControlStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  source field predicates
  """
  source: ControlHistoryControlSource
  sourceNEQ: ControlHistoryControlSource
  sourceIn: [ControlHistoryControlSource!]
  sourceNotIn: [ControlHistoryControlSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  """
  reference_framework field predicates
  """
  referenceFramework: String
  referenceFrameworkNEQ: String
  referenceFrameworkIn: [String!]
  referenceFrameworkNotIn: [String!]
  referenceFrameworkGT: String
  referenceFrameworkGTE: String
  referenceFrameworkLT: String
  referenceFrameworkLTE: String
  referenceFrameworkContains: String
  referenceFrameworkHasPrefix: String
  referenceFrameworkHasSuffix: String
  referenceFrameworkIsNil: Boolean
  referenceFrameworkNotNil: Boolean
  referenceFrameworkEqualFold: String
  referenceFrameworkContainsFold: String
  """
  control_type field predicates
  """
  controlType: ControlHistoryControlType
  controlTypeNEQ: ControlHistoryControlType
  controlTypeIn: [ControlHistoryControlType!]
  controlTypeNotIn: [ControlHistoryControlType!]
  controlTypeIsNil: Boolean
  controlTypeNotNil: Boolean
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  category_id field predicates
  """
  categoryID: String
  categoryIDNEQ: String
  categoryIDIn: [String!]
  categoryIDNotIn: [String!]
  categoryIDGT: String
  categoryIDGTE: String
  categoryIDLT: String
  categoryIDLTE: String
  categoryIDContains: String
  categoryIDHasPrefix: String
  categoryIDHasSuffix: String
  categoryIDIsNil: Boolean
  categoryIDNotNil: Boolean
  categoryIDEqualFold: String
  categoryIDContainsFold: String
  """
  subcategory field predicates
  """
  subcategory: String
  subcategoryNEQ: String
  subcategoryIn: [String!]
  subcategoryNotIn: [String!]
  subcategoryGT: String
  subcategoryGTE: String
  subcategoryLT: String
  subcategoryLTE: String
  subcategoryContains: String
  subcategoryHasPrefix: String
  subcategoryHasSuffix: String
  subcategoryIsNil: Boolean
  subcategoryNotNil: Boolean
  subcategoryEqualFold: String
  subcategoryContainsFold: String
  """
  control_owner_id field predicates
  """
  controlOwnerID: String
  controlOwnerIDNEQ: String
  controlOwnerIDIn: [String!]
  controlOwnerIDNotIn: [String!]
  controlOwnerIDGT: String
  controlOwnerIDGTE: String
  controlOwnerIDLT: String
  controlOwnerIDLTE: String
  controlOwnerIDContains: String
  controlOwnerIDHasPrefix: String
  controlOwnerIDHasSuffix: String
  controlOwnerIDIsNil: Boolean
  controlOwnerIDNotNil: Boolean
  controlOwnerIDEqualFold: String
  controlOwnerIDContainsFold: String
  """
  delegate_id field predicates
  """
  delegateID: String
  delegateIDNEQ: String
  delegateIDIn: [String!]
  delegateIDNotIn: [String!]
  delegateIDGT: String
  delegateIDGTE: String
  delegateIDLT: String
  delegateIDLTE: String
  delegateIDContains: String
  delegateIDHasPrefix: String
  delegateIDHasSuffix: String
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: String
  delegateIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  ref_code field predicates
  """
  refCode: String
  refCodeNEQ: String
  refCodeIn: [String!]
  refCodeNotIn: [String!]
  refCodeGT: String
  refCodeGTE: String
  refCodeLT: String
  refCodeLTE: String
  refCodeContains: String
  refCodeHasPrefix: String
  refCodeHasSuffix: String
  refCodeEqualFold: String
  refCodeContainsFold: String
  """
  standard_id field predicates
  """
  standardID: String
  standardIDNEQ: String
  standardIDIn: [String!]
  standardIDNotIn: [String!]
  standardIDGT: String
  standardIDGTE: String
  standardIDLT: String
  standardIDLTE: String
  standardIDContains: String
  standardIDHasPrefix: String
  standardIDHasSuffix: String
  standardIDIsNil: Boolean
  standardIDNotNil: Boolean
  standardIDEqualFold: String
  standardIDContainsFold: String
}
type ControlImplementation implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  status of the %s, e.g. draft, published, archived, etc.
  """
  status: ControlImplementationDocumentStatus
  """
  date the control was implemented
  """
  implementationDate: Time
  """
  set to true if the control implementation has been verified
  """
  verified: Boolean
  """
  date the control implementation was verified
  """
  verificationDate: Time
  """
  details of the control implementation
  """
  details: String
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
}
"""
A connection to a list of items.
"""
type ControlImplementationConnection {
  """
  A list of edges.
  """
  edges: [ControlImplementationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ControlImplementationDocumentStatus is enum for the field status
"""
enum ControlImplementationDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type ControlImplementationEdge {
  """
  The item at the end of the edge.
  """
  node: ControlImplementation
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ControlImplementationHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ControlImplementationHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  status of the %s, e.g. draft, published, archived, etc.
  """
  status: ControlImplementationHistoryDocumentStatus
  """
  date the control was implemented
  """
  implementationDate: Time
  """
  set to true if the control implementation has been verified
  """
  verified: Boolean
  """
  date the control implementation was verified
  """
  verificationDate: Time
  """
  details of the control implementation
  """
  details: String
}
"""
A connection to a list of items.
"""
type ControlImplementationHistoryConnection {
  """
  A list of edges.
  """
  edges: [ControlImplementationHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ControlImplementationHistoryDocumentStatus is enum for the field status
"""
enum ControlImplementationHistoryDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type ControlImplementationHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ControlImplementationHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ControlImplementationHistoryOpType is enum for the field operation
"""
enum ControlImplementationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ControlImplementationHistory connections
"""
input ControlImplementationHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ControlImplementationHistories.
  """
  field: ControlImplementationHistoryOrderField!
}
"""
Properties by which ControlImplementationHistory connections can be ordered.
"""
enum ControlImplementationHistoryOrderField {
  history_time
  created_at
  updated_at
  STATUS
  implementation_date
  verified
  verification_date
}
"""
ControlImplementationHistoryWhereInput is used for filtering ControlImplementationHistory objects.
Input was generated by ent.
"""
input ControlImplementationHistoryWhereInput {
  not: ControlImplementationHistoryWhereInput
  and: [ControlImplementationHistoryWhereInput!]
  or: [ControlImplementationHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ControlImplementationHistoryOpType
  operationNEQ: ControlImplementationHistoryOpType
  operationIn: [ControlImplementationHistoryOpType!]
  operationNotIn: [ControlImplementationHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  status field predicates
  """
  status: ControlImplementationHistoryDocumentStatus
  statusNEQ: ControlImplementationHistoryDocumentStatus
  statusIn: [ControlImplementationHistoryDocumentStatus!]
  statusNotIn: [ControlImplementationHistoryDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  implementation_date field predicates
  """
  implementationDate: Time
  implementationDateNEQ: Time
  implementationDateIn: [Time!]
  implementationDateNotIn: [Time!]
  implementationDateGT: Time
  implementationDateGTE: Time
  implementationDateLT: Time
  implementationDateLTE: Time
  implementationDateIsNil: Boolean
  implementationDateNotNil: Boolean
  """
  verified field predicates
  """
  verified: Boolean
  verifiedNEQ: Boolean
  verifiedIsNil: Boolean
  verifiedNotNil: Boolean
  """
  verification_date field predicates
  """
  verificationDate: Time
  verificationDateNEQ: Time
  verificationDateIn: [Time!]
  verificationDateNotIn: [Time!]
  verificationDateGT: Time
  verificationDateGTE: Time
  verificationDateLT: Time
  verificationDateLTE: Time
  verificationDateIsNil: Boolean
  verificationDateNotNil: Boolean
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
}
"""
Ordering options for ControlImplementation connections
"""
input ControlImplementationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ControlImplementations.
  """
  field: ControlImplementationOrderField!
}
"""
Properties by which ControlImplementation connections can be ordered.
"""
enum ControlImplementationOrderField {
  created_at
  updated_at
  STATUS
  implementation_date
  verified
  verification_date
}
"""
ControlImplementationWhereInput is used for filtering ControlImplementation objects.
Input was generated by ent.
"""
input ControlImplementationWhereInput {
  not: ControlImplementationWhereInput
  and: [ControlImplementationWhereInput!]
  or: [ControlImplementationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  status field predicates
  """
  status: ControlImplementationDocumentStatus
  statusNEQ: ControlImplementationDocumentStatus
  statusIn: [ControlImplementationDocumentStatus!]
  statusNotIn: [ControlImplementationDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  implementation_date field predicates
  """
  implementationDate: Time
  implementationDateNEQ: Time
  implementationDateIn: [Time!]
  implementationDateNotIn: [Time!]
  implementationDateGT: Time
  implementationDateGTE: Time
  implementationDateLT: Time
  implementationDateLTE: Time
  implementationDateIsNil: Boolean
  implementationDateNotNil: Boolean
  """
  verified field predicates
  """
  verified: Boolean
  verifiedNEQ: Boolean
  verifiedIsNil: Boolean
  verifiedNotNil: Boolean
  """
  verification_date field predicates
  """
  verificationDate: Time
  verificationDateNEQ: Time
  verificationDateIn: [Time!]
  verificationDateNotIn: [Time!]
  verificationDateGT: Time
  verificationDateGTE: Time
  verificationDateLT: Time
  verificationDateLTE: Time
  verificationDateIsNil: Boolean
  verificationDateNotNil: Boolean
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
type ControlObjective implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the name of the control objective
  """
  name: String!
  """
  the desired outcome or target of the control objective
  """
  desiredOutcome: String
  """
  status of the control objective
  """
  status: ControlObjectiveObjectiveStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlObjectiveControlSource
  """
  type of the control objective e.g. compliance, financial, operational, etc.
  """
  controlObjectiveType: String
  """
  category of the control
  """
  category: String
  """
  subcategory of the control
  """
  subcategory: String
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  evidence(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Evidences returned from the connection.
    """
    orderBy: [EvidenceOrder!]

    """
    Filtering options for Evidences returned from the connection.
    """
    where: EvidenceWhereInput
  ): EvidenceConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
}
"""
A connection to a list of items.
"""
type ControlObjectiveConnection {
  """
  A list of edges.
  """
  edges: [ControlObjectiveEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ControlObjectiveControlSource is enum for the field source
"""
enum ControlObjectiveControlSource @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlSource") {
  FRAMEWORK
  TEMPLATE
  USER_DEFINED
  IMPORTED
}
"""
An edge in a connection.
"""
type ControlObjectiveEdge {
  """
  The item at the end of the edge.
  """
  node: ControlObjective
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ControlObjectiveHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ControlObjectiveHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the name of the control objective
  """
  name: String!
  """
  the desired outcome or target of the control objective
  """
  desiredOutcome: String
  """
  status of the control objective
  """
  status: ControlObjectiveHistoryObjectiveStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlObjectiveHistoryControlSource
  """
  type of the control objective e.g. compliance, financial, operational, etc.
  """
  controlObjectiveType: String
  """
  category of the control
  """
  category: String
  """
  subcategory of the control
  """
  subcategory: String
}
"""
A connection to a list of items.
"""
type ControlObjectiveHistoryConnection {
  """
  A list of edges.
  """
  edges: [ControlObjectiveHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ControlObjectiveHistoryControlSource is enum for the field source
"""
enum ControlObjectiveHistoryControlSource @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlSource") {
  FRAMEWORK
  TEMPLATE
  USER_DEFINED
  IMPORTED
}
"""
An edge in a connection.
"""
type ControlObjectiveHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ControlObjectiveHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ControlObjectiveHistoryObjectiveStatus is enum for the field status
"""
enum ControlObjectiveHistoryObjectiveStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ObjectiveStatus") {
  ACTIVE
  ARCHIVED
  DRAFT
}
"""
ControlObjectiveHistoryOpType is enum for the field operation
"""
enum ControlObjectiveHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ControlObjectiveHistory connections
"""
input ControlObjectiveHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ControlObjectiveHistories.
  """
  field: ControlObjectiveHistoryOrderField!
}
"""
Properties by which ControlObjectiveHistory connections can be ordered.
"""
enum ControlObjectiveHistoryOrderField {
  history_time
  created_at
  updated_at
  revision
  name
  status
  SOURCE
  control_objective_type
  category
  subcategory
}
"""
ControlObjectiveHistoryWhereInput is used for filtering ControlObjectiveHistory objects.
Input was generated by ent.
"""
input ControlObjectiveHistoryWhereInput {
  not: ControlObjectiveHistoryWhereInput
  and: [ControlObjectiveHistoryWhereInput!]
  or: [ControlObjectiveHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ControlObjectiveHistoryOpType
  operationNEQ: ControlObjectiveHistoryOpType
  operationIn: [ControlObjectiveHistoryOpType!]
  operationNotIn: [ControlObjectiveHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  desired_outcome field predicates
  """
  desiredOutcome: String
  desiredOutcomeNEQ: String
  desiredOutcomeIn: [String!]
  desiredOutcomeNotIn: [String!]
  desiredOutcomeGT: String
  desiredOutcomeGTE: String
  desiredOutcomeLT: String
  desiredOutcomeLTE: String
  desiredOutcomeContains: String
  desiredOutcomeHasPrefix: String
  desiredOutcomeHasSuffix: String
  desiredOutcomeIsNil: Boolean
  desiredOutcomeNotNil: Boolean
  desiredOutcomeEqualFold: String
  desiredOutcomeContainsFold: String
  """
  status field predicates
  """
  status: ControlObjectiveHistoryObjectiveStatus
  statusNEQ: ControlObjectiveHistoryObjectiveStatus
  statusIn: [ControlObjectiveHistoryObjectiveStatus!]
  statusNotIn: [ControlObjectiveHistoryObjectiveStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  source field predicates
  """
  source: ControlObjectiveHistoryControlSource
  sourceNEQ: ControlObjectiveHistoryControlSource
  sourceIn: [ControlObjectiveHistoryControlSource!]
  sourceNotIn: [ControlObjectiveHistoryControlSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  """
  control_objective_type field predicates
  """
  controlObjectiveType: String
  controlObjectiveTypeNEQ: String
  controlObjectiveTypeIn: [String!]
  controlObjectiveTypeNotIn: [String!]
  controlObjectiveTypeGT: String
  controlObjectiveTypeGTE: String
  controlObjectiveTypeLT: String
  controlObjectiveTypeLTE: String
  controlObjectiveTypeContains: String
  controlObjectiveTypeHasPrefix: String
  controlObjectiveTypeHasSuffix: String
  controlObjectiveTypeIsNil: Boolean
  controlObjectiveTypeNotNil: Boolean
  controlObjectiveTypeEqualFold: String
  controlObjectiveTypeContainsFold: String
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  subcategory field predicates
  """
  subcategory: String
  subcategoryNEQ: String
  subcategoryIn: [String!]
  subcategoryNotIn: [String!]
  subcategoryGT: String
  subcategoryGTE: String
  subcategoryLT: String
  subcategoryLTE: String
  subcategoryContains: String
  subcategoryHasPrefix: String
  subcategoryHasSuffix: String
  subcategoryIsNil: Boolean
  subcategoryNotNil: Boolean
  subcategoryEqualFold: String
  subcategoryContainsFold: String
}
"""
ControlObjectiveObjectiveStatus is enum for the field status
"""
enum ControlObjectiveObjectiveStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ObjectiveStatus") {
  ACTIVE
  ARCHIVED
  DRAFT
}
"""
Ordering options for ControlObjective connections
"""
input ControlObjectiveOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ControlObjectives.
  """
  field: ControlObjectiveOrderField!
}
"""
Properties by which ControlObjective connections can be ordered.
"""
enum ControlObjectiveOrderField {
  created_at
  updated_at
  revision
  name
  status
  SOURCE
  control_objective_type
  category
  subcategory
}
"""
ControlObjectiveWhereInput is used for filtering ControlObjective objects.
Input was generated by ent.
"""
input ControlObjectiveWhereInput {
  not: ControlObjectiveWhereInput
  and: [ControlObjectiveWhereInput!]
  or: [ControlObjectiveWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  desired_outcome field predicates
  """
  desiredOutcome: String
  desiredOutcomeNEQ: String
  desiredOutcomeIn: [String!]
  desiredOutcomeNotIn: [String!]
  desiredOutcomeGT: String
  desiredOutcomeGTE: String
  desiredOutcomeLT: String
  desiredOutcomeLTE: String
  desiredOutcomeContains: String
  desiredOutcomeHasPrefix: String
  desiredOutcomeHasSuffix: String
  desiredOutcomeIsNil: Boolean
  desiredOutcomeNotNil: Boolean
  desiredOutcomeEqualFold: String
  desiredOutcomeContainsFold: String
  """
  status field predicates
  """
  status: ControlObjectiveObjectiveStatus
  statusNEQ: ControlObjectiveObjectiveStatus
  statusIn: [ControlObjectiveObjectiveStatus!]
  statusNotIn: [ControlObjectiveObjectiveStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  source field predicates
  """
  source: ControlObjectiveControlSource
  sourceNEQ: ControlObjectiveControlSource
  sourceIn: [ControlObjectiveControlSource!]
  sourceNotIn: [ControlObjectiveControlSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  """
  control_objective_type field predicates
  """
  controlObjectiveType: String
  controlObjectiveTypeNEQ: String
  controlObjectiveTypeIn: [String!]
  controlObjectiveTypeNotIn: [String!]
  controlObjectiveTypeGT: String
  controlObjectiveTypeGTE: String
  controlObjectiveTypeLT: String
  controlObjectiveTypeLTE: String
  controlObjectiveTypeContains: String
  controlObjectiveTypeHasPrefix: String
  controlObjectiveTypeHasSuffix: String
  controlObjectiveTypeIsNil: Boolean
  controlObjectiveTypeNotNil: Boolean
  controlObjectiveTypeEqualFold: String
  controlObjectiveTypeContainsFold: String
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  subcategory field predicates
  """
  subcategory: String
  subcategoryNEQ: String
  subcategoryIn: [String!]
  subcategoryNotIn: [String!]
  subcategoryGT: String
  subcategoryGTE: String
  subcategoryLT: String
  subcategoryLTE: String
  subcategoryContains: String
  subcategoryHasPrefix: String
  subcategoryHasSuffix: String
  subcategoryIsNil: Boolean
  subcategoryNotNil: Boolean
  subcategoryEqualFold: String
  subcategoryContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  evidence edge predicates
  """
  hasEvidence: Boolean
  hasEvidenceWith: [EvidenceWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
"""
Ordering options for Control connections
"""
input ControlOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Controls.
  """
  field: ControlOrderField!
}
"""
Properties by which Control connections can be ordered.
"""
enum ControlOrderField {
  created_at
  updated_at
  STATUS
  SOURCE
  REFERENCE_FRAMEWORK
  CONTROL_TYPE
  category
  subcategory
  ref_code
  CONTROL_OWNER_name
  DELEGATE_name
}
"""
ControlWhereInput is used for filtering Control objects.
Input was generated by ent.
"""
input ControlWhereInput {
  not: ControlWhereInput
  and: [ControlWhereInput!]
  or: [ControlWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  reference_id field predicates
  """
  referenceID: String
  referenceIDNEQ: String
  referenceIDIn: [String!]
  referenceIDNotIn: [String!]
  referenceIDGT: String
  referenceIDGTE: String
  referenceIDLT: String
  referenceIDLTE: String
  referenceIDContains: String
  referenceIDHasPrefix: String
  referenceIDHasSuffix: String
  referenceIDIsNil: Boolean
  referenceIDNotNil: Boolean
  referenceIDEqualFold: String
  referenceIDContainsFold: String
  """
  auditor_reference_id field predicates
  """
  auditorReferenceID: String
  auditorReferenceIDNEQ: String
  auditorReferenceIDIn: [String!]
  auditorReferenceIDNotIn: [String!]
  auditorReferenceIDGT: String
  auditorReferenceIDGTE: String
  auditorReferenceIDLT: String
  auditorReferenceIDLTE: String
  auditorReferenceIDContains: String
  auditorReferenceIDHasPrefix: String
  auditorReferenceIDHasSuffix: String
  auditorReferenceIDIsNil: Boolean
  auditorReferenceIDNotNil: Boolean
  auditorReferenceIDEqualFold: String
  auditorReferenceIDContainsFold: String
  """
  status field predicates
  """
  status: ControlControlStatus
  statusNEQ: ControlControlStatus
  statusIn: [ControlControlStatus!]
  statusNotIn: [ControlControlStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  source field predicates
  """
  source: ControlControlSource
  sourceNEQ: ControlControlSource
  sourceIn: [ControlControlSource!]
  sourceNotIn: [ControlControlSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  """
  reference_framework field predicates
  """
  referenceFramework: String
  referenceFrameworkNEQ: String
  referenceFrameworkIn: [String!]
  referenceFrameworkNotIn: [String!]
  referenceFrameworkGT: String
  referenceFrameworkGTE: String
  referenceFrameworkLT: String
  referenceFrameworkLTE: String
  referenceFrameworkContains: String
  referenceFrameworkHasPrefix: String
  referenceFrameworkHasSuffix: String
  referenceFrameworkIsNil: Boolean
  referenceFrameworkNotNil: Boolean
  referenceFrameworkEqualFold: String
  referenceFrameworkContainsFold: String
  """
  control_type field predicates
  """
  controlType: ControlControlType
  controlTypeNEQ: ControlControlType
  controlTypeIn: [ControlControlType!]
  controlTypeNotIn: [ControlControlType!]
  controlTypeIsNil: Boolean
  controlTypeNotNil: Boolean
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  category_id field predicates
  """
  categoryID: String
  categoryIDNEQ: String
  categoryIDIn: [String!]
  categoryIDNotIn: [String!]
  categoryIDGT: String
  categoryIDGTE: String
  categoryIDLT: String
  categoryIDLTE: String
  categoryIDContains: String
  categoryIDHasPrefix: String
  categoryIDHasSuffix: String
  categoryIDIsNil: Boolean
  categoryIDNotNil: Boolean
  categoryIDEqualFold: String
  categoryIDContainsFold: String
  """
  subcategory field predicates
  """
  subcategory: String
  subcategoryNEQ: String
  subcategoryIn: [String!]
  subcategoryNotIn: [String!]
  subcategoryGT: String
  subcategoryGTE: String
  subcategoryLT: String
  subcategoryLTE: String
  subcategoryContains: String
  subcategoryHasPrefix: String
  subcategoryHasSuffix: String
  subcategoryIsNil: Boolean
  subcategoryNotNil: Boolean
  subcategoryEqualFold: String
  subcategoryContainsFold: String
  """
  control_owner_id field predicates
  """
  controlOwnerID: ID
  controlOwnerIDNEQ: ID
  controlOwnerIDIn: [ID!]
  controlOwnerIDNotIn: [ID!]
  controlOwnerIDGT: ID
  controlOwnerIDGTE: ID
  controlOwnerIDLT: ID
  controlOwnerIDLTE: ID
  controlOwnerIDContains: ID
  controlOwnerIDHasPrefix: ID
  controlOwnerIDHasSuffix: ID
  controlOwnerIDIsNil: Boolean
  controlOwnerIDNotNil: Boolean
  controlOwnerIDEqualFold: ID
  controlOwnerIDContainsFold: ID
  """
  delegate_id field predicates
  """
  delegateID: ID
  delegateIDNEQ: ID
  delegateIDIn: [ID!]
  delegateIDNotIn: [ID!]
  delegateIDGT: ID
  delegateIDGTE: ID
  delegateIDLT: ID
  delegateIDLTE: ID
  delegateIDContains: ID
  delegateIDHasPrefix: ID
  delegateIDHasSuffix: ID
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: ID
  delegateIDContainsFold: ID
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  ref_code field predicates
  """
  refCode: String
  refCodeNEQ: String
  refCodeIn: [String!]
  refCodeNotIn: [String!]
  refCodeGT: String
  refCodeGTE: String
  refCodeLT: String
  refCodeLTE: String
  refCodeContains: String
  refCodeHasPrefix: String
  refCodeHasSuffix: String
  refCodeEqualFold: String
  refCodeContainsFold: String
  """
  standard_id field predicates
  """
  standardID: ID
  standardIDNEQ: ID
  standardIDIn: [ID!]
  standardIDNotIn: [ID!]
  standardIDGT: ID
  standardIDGTE: ID
  standardIDLT: ID
  standardIDLTE: ID
  standardIDContains: ID
  standardIDHasPrefix: ID
  standardIDHasSuffix: ID
  standardIDIsNil: Boolean
  standardIDNotNil: Boolean
  standardIDEqualFold: ID
  standardIDContainsFold: ID
  """
  evidence edge predicates
  """
  hasEvidence: Boolean
  hasEvidenceWith: [EvidenceWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  control_owner edge predicates
  """
  hasControlOwner: Boolean
  hasControlOwnerWith: [GroupWhereInput!]
  """
  delegate edge predicates
  """
  hasDelegate: Boolean
  hasDelegateWith: [GroupWhereInput!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  standard edge predicates
  """
  hasStandard: Boolean
  hasStandardWith: [StandardWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  assets edge predicates
  """
  hasAssets: Boolean
  hasAssetsWith: [AssetWhereInput!]
  """
  scans edge predicates
  """
  hasScans: Boolean
  hasScansWith: [ScanWhereInput!]
  """
  control_implementations edge predicates
  """
  hasControlImplementations: Boolean
  hasControlImplementationsWith: [ControlImplementationWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  scheduled_jobs edge predicates
  """
  hasScheduledJobs: Boolean
  hasScheduledJobsWith: [ScheduledJobWhereInput!]
}
"""
CreateAPITokenInput is used for create APIToken object.
Input was generated by ent.
"""
input CreateAPITokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name associated with the token
  """
  name: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  lastUsedAt: Time
  """
  whether the token is active
  """
  isActive: Boolean
  """
  the reason the token was revoked
  """
  revokedReason: String
  """
  the user who revoked the token
  """
  revokedBy: String
  """
  when the token was revoked
  """
  revokedAt: Time
  """
  SSO verification time for the owning organization
  """
  ssoAuthorizations: SSOAuthorizationMap
  ownerID: ID
}
"""
CreateActionPlanInput is used for create ActionPlan object.
Input was generated by ent.
"""
input CreateActionPlanInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the name of the action_plan
  """
  name: String!
  """
  status of the action_plan, e.g. draft, published, archived, etc.
  """
  status: ActionPlanDocumentStatus
  """
  type of the action_plan, e.g. compliance, operational, health and safety, etc.
  """
  actionPlanType: String
  """
  details of the action_plan
  """
  details: String
  """
  whether approval is required for edits to the action_plan
  """
  approvalRequired: Boolean
  """
  the date the action_plan should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the action_plan should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ActionPlanFrequency
  """
  auto-generated tag suggestions for the action_plan
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the action_plan
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the action_plan
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the action_plan
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the action_plan
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the action_plan
  """
  dismissedImprovementSuggestions: [String!]
  """
  due date of the action plan
  """
  dueDate: Time
  """
  priority of the action plan
  """
  priority: ActionPlanPriority
  """
  source of the action plan
  """
  source: String
  approverID: ID
  delegateID: ID
  ownerID: ID
  riskIDs: [ID!]
  controlIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateAssetInput is used for create Asset object.
Input was generated by ent.
"""
input CreateAssetInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the type of the asset, e.g. technology, domain, device, etc
  """
  assetType: AssetAssetType
  """
  the name of the asset, e.g. matts computer, office router, IP address, etc
  """
  name: String!
  description: String
  """
  unique identifier like domain, device id, etc
  """
  identifier: String
  """
  the website of the asset, if applicable
  """
  website: String
  """
  the CPE (Common Platform Enumeration) of the asset, if applicable
  """
  cpe: String
  """
  the categories of the asset, e.g. web server, database, etc
  """
  categories: [String!]
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  scanIDs: [ID!]
  entityIDs: [ID!]
  controlIDs: [ID!]
}
"""
CreateContactInput is used for create Contact object.
Input was generated by ent.
"""
input CreateContactInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the full name of the contact
  """
  fullName: String!
  """
  the title of the contact
  """
  title: String
  """
  the company of the contact
  """
  company: String
  """
  the email of the contact
  """
  email: String
  """
  the phone number of the contact
  """
  phoneNumber: String
  """
  the address of the contact
  """
  address: String
  """
  status of the contact
  """
  status: ContactUserStatus
  ownerID: ID
  entityIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateControlImplementationInput is used for create ControlImplementation object.
Input was generated by ent.
"""
input CreateControlImplementationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  status of the %s, e.g. draft, published, archived, etc.
  """
  status: ControlImplementationDocumentStatus
  """
  date the control was implemented
  """
  implementationDate: Time
  """
  set to true if the control implementation has been verified
  """
  verified: Boolean
  """
  date the control implementation was verified
  """
  verificationDate: Time
  """
  details of the control implementation
  """
  details: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  taskIDs: [ID!]
}
"""
CreateControlInput is used for create Control object.
Input was generated by ent.
"""
input CreateControlInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  description of what the control is supposed to accomplish
  """
  description: String
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  """
  status of the control
  """
  status: ControlControlStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlControlSource
  """
  the reference framework for the control if it came from a standard, empty if not associated with a standard
  """
  referenceFramework: String
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: ControlControlType
  """
  category of the control
  """
  category: String
  """
  category id of the control
  """
  categoryID: String
  """
  subcategory of the control
  """
  subcategory: String
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  """
  references for the control
  """
  references: [Reference!]
  """
  the unique reference code for the control
  """
  refCode: String!
  evidenceIDs: [ID!]
  controlObjectiveIDs: [ID!]
  taskIDs: [ID!]
  narrativeIDs: [ID!]
  riskIDs: [ID!]
  actionPlanIDs: [ID!]
  procedureIDs: [ID!]
  internalPolicyIDs: [ID!]
  controlOwnerID: ID
  delegateID: ID
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  standardID: ID
  programIDs: [ID!]
  assetIDs: [ID!]
  scanIDs: [ID!]
  controlImplementationIDs: [ID!]
  subcontrolIDs: [ID!]
  scheduledJobIDs: [ID!]
}
"""
CreateControlObjectiveInput is used for create ControlObjective object.
Input was generated by ent.
"""
input CreateControlObjectiveInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the name of the control objective
  """
  name: String!
  """
  the desired outcome or target of the control objective
  """
  desiredOutcome: String
  """
  status of the control objective
  """
  status: ControlObjectiveObjectiveStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlObjectiveControlSource
  """
  type of the control objective e.g. compliance, financial, operational, etc.
  """
  controlObjectiveType: String
  """
  category of the control
  """
  category: String
  """
  subcategory of the control
  """
  subcategory: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  programIDs: [ID!]
  evidenceIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  internalPolicyIDs: [ID!]
  procedureIDs: [ID!]
  riskIDs: [ID!]
  narrativeIDs: [ID!]
  taskIDs: [ID!]
}
"""
CreateCustomDomainInput is used for create CustomDomain object.
Input was generated by ent.
"""
input CreateCustomDomainInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the custom domain
  """
  cnameRecord: String!
  ownerID: ID
  mappableDomainID: ID!
  dnsVerificationID: ID
}
"""
CreateDNSVerificationInput is used for create DNSVerification object.
Input was generated by ent.
"""
input CreateDNSVerificationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  The ID of the custom domain in cloudflare
  """
  cloudflareHostnameID: String!
  """
  the name of the dns txt record
  """
  dnsTxtRecord: String!
  """
  the expected value of the dns txt record
  """
  dnsTxtValue: String!
  """
  Status of the domain verification
  """
  dnsVerificationStatus: DNSVerificationDNSVerificationStatus
  """
  Reason of the dns verification status, for giving the user diagnostic info
  """
  dnsVerificationStatusReason: String
  """
  Path under /.well-known/acme-challenge/ to serve the ACME challenge
  """
  acmeChallengePath: String
  """
  the expected value of the acme challenge record
  """
  expectedAcmeChallengeValue: String
  """
  Status of the ACME challenge validation
  """
  acmeChallengeStatus: DNSVerificationSSLVerificationStatus
  ownerID: ID
  customDomainIDs: [ID!]
}
"""
CreateDocumentDataInput is used for create DocumentData object.
Input was generated by ent.
"""
input CreateDocumentDataInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the json data of the document
  """
  data: Map!
  ownerID: ID
  templateID: ID!
  entityIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateEntityInput is used for create Entity object.
Input was generated by ent.
"""
input CreateEntityInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the entity
  """
  name: String
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the entity
  """
  description: String
  """
  domains associated with the entity
  """
  domains: [String!]
  """
  status of the entity
  """
  status: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  contactIDs: [ID!]
  documentIDs: [ID!]
  noteIDs: [ID!]
  fileIDs: [ID!]
  assetIDs: [ID!]
  scanIDs: [ID!]
  entityTypeID: ID
}
"""
CreateEntityTypeInput is used for create EntityType object.
Input was generated by ent.
"""
input CreateEntityTypeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the entity
  """
  name: String!
  ownerID: ID
  entityIDs: [ID!]
}
"""
CreateEventInput is used for create Event object.
Input was generated by ent.
"""
input CreateEventInput {
  """
  tags associated with the object
  """
  tags: [String!]
  eventID: String
  correlationID: String
  eventType: String!
  metadata: Map
  userIDs: [ID!]
  groupIDs: [ID!]
  integrationIDs: [ID!]
  organizationIDs: [ID!]
  inviteIDs: [ID!]
  personalAccessTokenIDs: [ID!]
  secretIDs: [ID!]
  subscriberIDs: [ID!]
  fileIDs: [ID!]
  orgSubscriptionIDs: [ID!]
}
"""
CreateEvidenceInput is used for create Evidence object.
Input was generated by ent.
"""
input CreateEvidenceInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the evidence
  """
  name: String!
  """
  the description of the evidence, what is contained in the uploaded file(s) or url(s)
  """
  description: String
  """
  description of how the evidence was collected
  """
  collectionProcedure: String
  """
  the date the evidence was retrieved
  """
  creationDate: Time
  """
  the date the evidence should be renewed, defaults to a year from entry date
  """
  renewalDate: Time
  """
  the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
  """
  source: String
  """
  whether the evidence was automatically generated
  """
  isAutomated: Boolean
  """
  the url of the evidence if not uploaded directly to the system
  """
  url: String
  """
  the status of the evidence, ready, approved, needs renewal, missing artifact, rejected
  """
  status: EvidenceEvidenceStatus
  ownerID: ID
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  controlObjectiveIDs: [ID!]
  controlImplementationIDs: [ID!]
  fileIDs: [ID!]
  programIDs: [ID!]
  taskIDs: [ID!]
}
"""
CreateExportInput is used for create Export object.
Input was generated by ent.
"""
input CreateExportInput {
  """
  the type of export, e.g., control, policy, etc.
  """
  exportType: ExportExportType!
  """
  the format of export, e.g., csv and others
  """
  format: ExportExportFormat!
  """
  the specific fields to include in the export (defaults to only the id if not provided)
  """
  fields: [String!]
  """
  the specific filters to run against the exported data. This should be a well formatted graphql query
  """
  filters: String
  ownerID: ID
  eventIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateFileInput is used for create File object.
Input was generated by ent.
"""
input CreateFileInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String!
  """
  the extension of the file provided
  """
  providedFileExtension: String!
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  persistedFileSize: Int
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String!
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  """
  the full URI of the file
  """
  uri: String
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
  """
  additional metadata about the file
  """
  metadata: Map
  """
  the region the file is stored in, if applicable
  """
  storageRegion: String
  """
  the storage provider the file is stored in, if applicable
  """
  storageProvider: String
  lastAccessedAt: Time
  userIDs: [ID!]
  organizationIDs: [ID!]
  groupIDs: [ID!]
  contactIDs: [ID!]
  entityIDs: [ID!]
  userSettingIDs: [ID!]
  organizationSettingIDs: [ID!]
  templateIDs: [ID!]
  documentIDs: [ID!]
  programIDs: [ID!]
  evidenceIDs: [ID!]
  eventIDs: [ID!]
  trustCenterSettingIDs: [ID!]
  subprocessorIDs: [ID!]
  integrationIDs: [ID!]
  secretIDs: [ID!]
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the group - must be unique within the organization
  """
  name: String!
  """
  the groups description
  """
  description: String
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  """
  The group's displayed 'friendly' name
  """
  displayName: String
  ownerID: ID
  programEditorIDs: [ID!]
  programBlockedGroupIDs: [ID!]
  programViewerIDs: [ID!]
  riskEditorIDs: [ID!]
  riskBlockedGroupIDs: [ID!]
  riskViewerIDs: [ID!]
  controlObjectiveEditorIDs: [ID!]
  controlObjectiveBlockedGroupIDs: [ID!]
  controlObjectiveViewerIDs: [ID!]
  narrativeEditorIDs: [ID!]
  narrativeBlockedGroupIDs: [ID!]
  narrativeViewerIDs: [ID!]
  controlImplementationEditorIDs: [ID!]
  controlImplementationBlockedGroupIDs: [ID!]
  controlImplementationViewerIDs: [ID!]
  scanEditorIDs: [ID!]
  scanBlockedGroupIDs: [ID!]
  scanViewerIDs: [ID!]
  entityEditorIDs: [ID!]
  entityBlockedGroupIDs: [ID!]
  entityViewerIDs: [ID!]
  procedureEditorIDs: [ID!]
  procedureBlockedGroupIDs: [ID!]
  internalPolicyEditorIDs: [ID!]
  internalPolicyBlockedGroupIDs: [ID!]
  controlEditorIDs: [ID!]
  controlBlockedGroupIDs: [ID!]
  mappedControlEditorIDs: [ID!]
  mappedControlBlockedGroupIDs: [ID!]
  settingID: ID
  eventIDs: [ID!]
  integrationIDs: [ID!]
  fileIDs: [ID!]
  taskIDs: [ID!]
}
"""
CreateGroupMembershipInput is used for create GroupMembership object.
Input was generated by ent.
"""
input CreateGroupMembershipInput {
  role: GroupMembershipRole
  groupID: ID!
  userID: ID!
  eventIDs: [ID!]
}
"""
CreateGroupSettingInput is used for create GroupSetting object.
Input was generated by ent.
"""
input CreateGroupSettingInput {
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingVisibility
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingJoinPolicy
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  groupID: ID
}
"""
CreateHushInput is used for create Hush object.
Input was generated by ent.
"""
input CreateHushInput {
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String!
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  """
  the generic name of a secret associated with the organization
  """
  secretName: String
  """
  the secret value
  """
  secretValue: String
  """
  a credential set, typically where you have multiple tokens or keys that compose one credential such as when accessing s3 and using access key ID, secret key, etc.
  """
  credentialSet: CredentialSet
  """
  additional metadata about the credential
  """
  metadata: Map
  lastUsedAt: Time
  """
  when the token expires
  """
  expiresAt: Time
  ownerID: ID
  integrationIDs: [ID!]
  fileIDs: [ID!]
  eventIDs: [ID!]
}
"""
CreateInternalPolicyInput is used for create InternalPolicy object.
Input was generated by ent.
"""
input CreateInternalPolicyInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the name of the policy
  """
  name: String!
  """
  status of the policy, e.g. draft, published, archived, etc.
  """
  status: InternalPolicyDocumentStatus
  """
  type of the policy, e.g. compliance, operational, health and safety, etc.
  """
  policyType: String
  """
  details of the policy
  """
  details: String
  """
  whether approval is required for edits to the policy
  """
  approvalRequired: Boolean
  """
  the date the policy should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the policy should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: InternalPolicyFrequency
  """
  auto-generated tag suggestions for the policy
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the policy
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the policy
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the policy
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the policy
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the policy
  """
  dismissedImprovementSuggestions: [String!]
  """
  This will contain the url used to create/update the policy
  """
  url: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  approverID: ID
  delegateID: ID
  controlObjectiveIDs: [ID!]
  controlImplementationIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  procedureIDs: [ID!]
  narrativeIDs: [ID!]
  taskIDs: [ID!]
  riskIDs: [ID!]
  programIDs: [ID!]
  fileID: ID
}
"""
CreateInviteInput is used for create Invite object.
Input was generated by ent.
"""
input CreateInviteInput {
  """
  the expiration date of the invitation token which defaults to 14 days in the future from creation
  """
  expires: Time
  """
  the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization
  """
  recipient: String!
  """
  the status of the invitation
  """
  status: InviteInviteStatus
  role: InviteRole
  """
  the number of attempts made to perform email send of the invitation, maximum of 5
  """
  sendAttempts: Int
  """
  the user who initiated the invitation
  """
  requestorID: String
  ownerID: ID
  eventIDs: [ID!]
  groupIDs: [ID!]
}
"""
CreateJobResultInput is used for create JobResult object.
Input was generated by ent.
"""
input CreateJobResultInput {
  """
  the status of this job. did it fail? did it succeed?
  """
  status: JobResultJobExecutionStatus!
  """
  the exit code from the script that was executed
  """
  exitCode: Int!
  """
  The time the job finished it's execution. This is different from the db insertion time
  """
  finishedAt: Time
  """
  The time the job started it's execution. This is different from the db insertion time
  """
  startedAt: Time
  """
  the log output from the job
  """
  log: String
  ownerID: ID
  scheduledJobID: ID!
  fileID: ID!
}
"""
CreateJobRunnerInput is used for create JobRunner object.
Input was generated by ent.
"""
input CreateJobRunnerInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the runner
  """
  name: String!
  """
  the IP address of this runner
  """
  ipAddress: String
  """
  the last time this runner was seen
  """
  lastSeen: Time
  """
  the version of the runner
  """
  version: String
  """
  the operating system of the runner
  """
  os: String
  ownerID: ID
  jobRunnerTokenIDs: [ID!]
}
"""
CreateJobRunnerRegistrationTokenInput is used for create JobRunnerRegistrationToken object.
Input was generated by ent.
"""
input CreateJobRunnerRegistrationTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  lastUsedAt: Time
  ownerID: ID
  jobRunnerID: ID
}
"""
CreateJobRunnerTokenInput is used for create JobRunnerToken object.
Input was generated by ent.
"""
input CreateJobRunnerTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  when the token expires
  """
  expiresAt: Time
  lastUsedAt: Time
  """
  whether the token is active
  """
  isActive: Boolean
  """
  the reason the token was revoked
  """
  revokedReason: String
  """
  the user who revoked the token
  """
  revokedBy: String
  """
  when the token was revoked
  """
  revokedAt: Time
  ownerID: ID
  jobRunnerIDs: [ID!]
}
"""
CreateJobTemplateInput is used for create JobTemplate object.
Input was generated by ent.
"""
input CreateJobTemplateInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the title of the job
  """
  title: String!
  """
  the short description of the job and what it does
  """
  description: String
  """
  the platform to use to execute this job, e.g. golang, typescript, python, etc.
  """
  platform: JobTemplateJobPlatformType!
  """
  the url from where to download the script from
  """
  downloadURL: String!
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  """
  cron schedule to run the job in cron 6-field syntax, e.g. 0 0 0 * * *
  """
  cron: String
  ownerID: ID
}
"""
CreateMappableDomainInput is used for create MappableDomain object.
Input was generated by ent.
"""
input CreateMappableDomainInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  Name of the mappable domain
  """
  name: String!
  """
  DNS Zone ID of the mappable domain.
  """
  zoneID: String!
  customDomainIDs: [ID!]
}
"""
CreateMappedControlInput is used for create MappedControl object.
Input was generated by ent.
"""
input CreateMappedControlInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the type of mapping between the two controls, e.g. subset, intersect, equal, superset
  """
  mappingType: MappedControlMappingType
  """
  description of how the two controls are related
  """
  relation: String
  """
  percentage (0-100) of confidence in the mapping
  """
  confidence: Int
  """
  source of the mapping, e.g. manual, suggested, etc.
  """
  source: MappedControlMappingSource
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  fromControlIDs: [ID!]
  toControlIDs: [ID!]
  fromSubcontrolIDs: [ID!]
  toSubcontrolIDs: [ID!]
}
"""
CreateNarrativeInput is used for create Narrative object.
Input was generated by ent.
"""
input CreateNarrativeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the narrative
  """
  name: String!
  """
  the description of the narrative
  """
  description: String
  """
  text data for the narrative document
  """
  details: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  satisfyIDs: [ID!]
  programIDs: [ID!]
  internalPolicyIDs: [ID!]
  procedureIDs: [ID!]
}
"""
CreateNoteInput is used for create Note object.
Input was generated by ent.
"""
input CreateNoteInput {
  """
  the text of the note
  """
  text: String!
  ownerID: ID
  taskID: ID
  fileIDs: [ID!]
}
"""
CreateOnboardingInput is used for create Onboarding object.
Input was generated by ent.
"""
input CreateOnboardingInput {
  """
  name of the company
  """
  companyName: String!
  """
  domains associated with the company
  """
  domains: [String!]
  """
  details given about the company during the onboarding process, including things such as company size, sector, etc
  """
  companyDetails: Map
  """
  details given about the user during the onboarding process, including things such as name, job title, department, etc
  """
  userDetails: Map
  """
  details given about the compliance requirements during the onboarding process, such as coming with existing policies, controls, risk assessments, etc
  """
  compliance: Map
  organizationID: ID
}
"""
CreateOrgMembershipInput is used for create OrgMembership object.
Input was generated by ent.
"""
input CreateOrgMembershipInput {
  role: OrgMembershipRole
  organizationID: ID!
  userID: ID!
  eventIDs: [ID!]
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the organization
  """
  name: String!
  """
  The organization's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the organization
  """
  description: String
  """
  orgs directly associated with a user
  """
  personalOrg: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  Whether the organization has a dedicated database
  """
  dedicatedDb: Boolean
  controlCreatorIDs: [ID!]
  controlImplementationCreatorIDs: [ID!]
  controlObjectiveCreatorIDs: [ID!]
  evidenceCreatorIDs: [ID!]
  groupCreatorIDs: [ID!]
  internalPolicyCreatorIDs: [ID!]
  mappedControlCreatorIDs: [ID!]
  narrativeCreatorIDs: [ID!]
  procedureCreatorIDs: [ID!]
  programCreatorIDs: [ID!]
  riskCreatorIDs: [ID!]
  scheduledJobCreatorIDs: [ID!]
  standardCreatorIDs: [ID!]
  templateCreatorIDs: [ID!]
  parentID: ID
  settingID: ID
  personalAccessTokenIDs: [ID!]
  apiTokenIDs: [ID!]
  fileIDs: [ID!]
  eventIDs: [ID!]
  secretIDs: [ID!]
  avatarFileID: ID
  groupIDs: [ID!]
  templateIDs: [ID!]
  integrationIDs: [ID!]
  documentIDs: [ID!]
  orgSubscriptionIDs: [ID!]
  inviteIDs: [ID!]
  subscriberIDs: [ID!]
  entityIDs: [ID!]
  entityTypeIDs: [ID!]
  contactIDs: [ID!]
  noteIDs: [ID!]
  taskIDs: [ID!]
  programIDs: [ID!]
  procedureIDs: [ID!]
  internalPolicyIDs: [ID!]
  riskIDs: [ID!]
  controlObjectiveIDs: [ID!]
  narrativeIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  controlImplementationIDs: [ID!]
  mappedControlIDs: [ID!]
  evidenceIDs: [ID!]
  standardIDs: [ID!]
  actionPlanIDs: [ID!]
  customDomainIDs: [ID!]
  jobRunnerIDs: [ID!]
  jobRunnerTokenIDs: [ID!]
  jobRunnerRegistrationTokenIDs: [ID!]
  dnsVerificationIDs: [ID!]
  jobTemplateIDs: [ID!]
  scheduledJobIDs: [ID!]
  jobResultIDs: [ID!]
  scheduledJobRunIDs: [ID!]
  trustCenterIDs: [ID!]
  assetIDs: [ID!]
  scanIDs: [ID!]
  subprocessorIDs: [ID!]
  exportIDs: [ID!]
}
"""
CreateOrganizationSettingInput is used for create OrganizationSetting object.
Input was generated by ent.
"""
input CreateOrganizationSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  domains associated with the organization
  """
  domains: [String!]
  """
  Name of the person to contact for billing
  """
  billingContact: String
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  """
  Phone number to contact for billing
  """
  billingPhone: String
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingRegion
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean
  """
  domains allowed to access the organization, if empty all domains are allowed
  """
  allowedEmailDomains: [String!]
  """
  SSO provider type for the organization
  """
  identityProvider: OrganizationSettingSSOProvider
  """
  client ID for SSO integration
  """
  identityProviderClientID: String
  """
  client secret for SSO integration
  """
  identityProviderClientSecret: String
  """
  metadata URL for the SSO provider
  """
  identityProviderMetadataEndpoint: String
  """
  SAML entity ID for the SSO provider
  """
  identityProviderEntityID: String
  """
  OIDC discovery URL for the SSO provider
  """
  oidcDiscoveryEndpoint: String
  """
  enforce SSO authentication for organization members
  """
  identityProviderLoginEnforced: Boolean
  """
  unique token used to receive compliance webhook events
  """
  complianceWebhookToken: String
  organizationID: ID
  fileIDs: [ID!]
}
"""
CreatePersonalAccessTokenInput is used for create PersonalAccessToken object.
Input was generated by ent.
"""
input CreatePersonalAccessTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name associated with the token
  """
  name: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  """
  SSO authorization timestamps by organization id
  """
  ssoAuthorizations: SSOAuthorizationMap
  lastUsedAt: Time
  """
  whether the token is active
  """
  isActive: Boolean
  organizationIDs: [ID!]
  eventIDs: [ID!]
}
"""
CreateProcedureInput is used for create Procedure object.
Input was generated by ent.
"""
input CreateProcedureInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the name of the procedure
  """
  name: String!
  """
  status of the procedure, e.g. draft, published, archived, etc.
  """
  status: ProcedureDocumentStatus
  """
  type of the procedure, e.g. compliance, operational, health and safety, etc.
  """
  procedureType: String
  """
  details of the procedure
  """
  details: String
  """
  whether approval is required for edits to the procedure
  """
  approvalRequired: Boolean
  """
  the date the procedure should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the procedure should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ProcedureFrequency
  """
  auto-generated tag suggestions for the procedure
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the procedure
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the procedure
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the procedure
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the procedure
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the procedure
  """
  dismissedImprovementSuggestions: [String!]
  """
  This will contain the url used to create/update the procedure
  """
  url: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  approverID: ID
  delegateID: ID
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  internalPolicyIDs: [ID!]
  programIDs: [ID!]
  narrativeIDs: [ID!]
  riskIDs: [ID!]
  taskIDs: [ID!]
  fileID: ID
}
"""
CreateProgramInput is used for create Program object.
Input was generated by ent.
"""
input CreateProgramInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the program
  """
  name: String!
  """
  the description of the program
  """
  description: String
  """
  the status of the program
  """
  status: ProgramProgramStatus
  """
  the type of the program
  """
  programType: ProgramProgramType
  """
  the short name of the compliance standard the program is based on, only used for framework type programs
  """
  frameworkName: String
  """
  the start date of the period
  """
  startDate: Time
  """
  the end date of the period
  """
  endDate: Time
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean
  """
  the name of the audit firm conducting the audit
  """
  auditFirm: String
  """
  the full name of the auditor conducting the audit
  """
  auditor: String
  """
  the email of the auditor conducting the audit
  """
  auditorEmail: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  controlObjectiveIDs: [ID!]
  internalPolicyIDs: [ID!]
  procedureIDs: [ID!]
  riskIDs: [ID!]
  taskIDs: [ID!]
  noteIDs: [ID!]
  fileIDs: [ID!]
  evidenceIDs: [ID!]
  narrativeIDs: [ID!]
  actionPlanIDs: [ID!]
}
"""
CreateProgramMembershipInput is used for create ProgramMembership object.
Input was generated by ent.
"""
input CreateProgramMembershipInput {
  role: ProgramMembershipRole
  programID: ID!
  userID: ID!
}
"""
CreateRiskInput is used for create Risk object.
Input was generated by ent.
"""
input CreateRiskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the risk
  """
  name: String!
  """
  status of the risk - open, mitigated, ongoing, in-progress, and archived.
  """
  status: RiskRiskStatus
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  """
  category of the risk, e.g. human resources, operations, IT, etc.
  """
  category: String
  """
  impact of the risk -critical, high, medium, low
  """
  impact: RiskRiskImpact
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskRiskLikelihood
  """
  score of the risk based on impact and likelihood (1-4 unlikely, 5-9 likely, 10-16 highly likely, 17-20 critical)
  """
  score: Int
  """
  mitigation for the risk
  """
  mitigation: String
  """
  details of the risk
  """
  details: String
  """
  business costs associated with the risk
  """
  businessCosts: String
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  procedureIDs: [ID!]
  internalPolicyIDs: [ID!]
  programIDs: [ID!]
  actionPlanIDs: [ID!]
  taskIDs: [ID!]
  assetIDs: [ID!]
  entityIDs: [ID!]
  scanIDs: [ID!]
  stakeholderID: ID
  delegateID: ID
}
"""
CreateScanInput is used for create Scan object.
Input was generated by ent.
"""
input CreateScanInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the target of the scan, e.g., a domain name or IP address, codebase
  """
  target: String!
  """
  the type of scan, e.g., domain scan, vulnerability scan, provider scan
  """
  scanType: ScanScanType
  """
  additional metadata for the scan, e.g., scan configuration, options, etc
  """
  metadata: Map
  """
  the status of the scan, e.g., processing, completed, failed
  """
  status: ScanScanStatus
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  assetIDs: [ID!]
  entityIDs: [ID!]
}
"""
CreateScheduledJobInput is used for create ScheduledJob object.
Input was generated by ent.
"""
input CreateScheduledJobInput {
  """
  whether the scheduled job is active
  """
  active: Boolean
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  """
  cron 6-field syntax, defaults to the job template's cron if not provided
  """
  cron: String
  ownerID: ID
  jobTemplateID: ID!
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  jobRunnerID: ID
}
"""
CreateScheduledJobRunInput is used for create ScheduledJobRun object.
Input was generated by ent.
"""
input CreateScheduledJobRunInput {
  """
  The status of the job to be executed. By default will be pending but when
  			scheduled on a runner, this will change to acquired.
  """
  status: ScheduledJobRunScheduledJobRunStatus
  """
  When should this job execute on the agent. Since we might potentially schedule a few minutes before
  """
  expectedExecutionTime: Time!
  """
  the script that will be executed by the agent.
  This script will be templated with the values from the configuration on the job
  """
  script: String!
  ownerID: ID
  scheduledJobID: ID!
  jobRunnerID: ID!
}
"""
CreateStandardInput is used for create Standard object.
Input was generated by ent.
"""
input CreateStandardInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the long name of the standard body
  """
  name: String!
  """
  short name of the standard, e.g. SOC 2, ISO 27001, etc.
  """
  shortName: String
  """
  unique identifier of the standard with version
  """
  framework: String
  """
  long description of the standard with details of what is covered
  """
  description: String
  """
  URL to the logo of the governing body
  """
  governingBodyLogoURL: String
  """
  governing body of the standard, e.g. AICPA, etc.
  """
  governingBody: String
  """
  domains the standard covers, e.g. availability, confidentiality, etc.
  """
  domains: [String!]
  """
  link to the official standard documentation
  """
  link: String
  """
  status of the standard - active, draft, and archived
  """
  status: StandardStandardStatus
  """
  indicates if the standard should be made available to all users, only for system owned standards
  """
  isPublic: Boolean
  """
  indicates if the standard is freely distributable under a trial license, only for system owned standards
  """
  freeToUse: Boolean
  """
  type of the standard - cybersecurity, healthcare , financial, etc.
  """
  standardType: String
  """
  version of the standard
  """
  version: String
  ownerID: ID
  controlIDs: [ID!]
  trustCenterComplianceIDs: [ID!]
}
"""
CreateSubcontrolInput is used for create Subcontrol object.
Input was generated by ent.
"""
input CreateSubcontrolInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  description of what the control is supposed to accomplish
  """
  description: String
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  """
  status of the control
  """
  status: SubcontrolControlStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: SubcontrolControlSource
  """
  the reference framework for the control if it came from a standard, empty if not associated with a standard
  """
  referenceFramework: String
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: SubcontrolControlType
  """
  category of the control
  """
  category: String
  """
  category id of the control
  """
  categoryID: String
  """
  subcategory of the control
  """
  subcategory: String
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  """
  references for the control
  """
  references: [Reference!]
  """
  the unique reference code for the control
  """
  refCode: String!
  evidenceIDs: [ID!]
  controlObjectiveIDs: [ID!]
  taskIDs: [ID!]
  narrativeIDs: [ID!]
  riskIDs: [ID!]
  actionPlanIDs: [ID!]
  procedureIDs: [ID!]
  internalPolicyIDs: [ID!]
  controlOwnerID: ID
  delegateID: ID
  ownerID: ID
  controlID: ID!
  controlImplementationIDs: [ID!]
  scheduledJobIDs: [ID!]
}
"""
CreateSubprocessorInput is used for create Subprocessor object.
Input was generated by ent.
"""
input CreateSubprocessorInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  name of the standard body
  """
  name: String!
  """
  description of the subprocessor
  """
  description: String
  """
  URL of the logo
  """
  logoRemoteURL: String
  ownerID: ID
  fileIDs: [ID!]
  logoFileID: ID
  trustCenterSubprocessorIDs: [ID!]
}
"""
CreateSubscriberInput is used for create Subscriber object.
Input was generated by ent.
"""
input CreateSubscriberInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  email address of the subscriber
  """
  email: String!
  """
  phone number of the subscriber
  """
  phoneNumber: String
  ownerID: ID
  eventIDs: [ID!]
}
"""
CreateTFASettingInput is used for create TFASetting object.
Input was generated by ent.
"""
input CreateTFASettingInput {
  """
  specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
  """
  totpAllowed: Boolean
}
"""
CreateTaskInput is used for create Task object.
Input was generated by ent.
"""
input CreateTaskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the title of the task
  """
  title: String!
  """
  the details of the task
  """
  details: String
  """
  the status of the task
  """
  status: TaskTaskStatus
  """
  the category of the task, e.g. evidence upload, risk review, policy review, etc.
  """
  category: String
  """
  the due date of the task
  """
  due: DateTime
  """
  the completion date of the task
  """
  completed: DateTime
  ownerID: ID
  assignerID: ID
  assigneeID: ID
  commentIDs: [ID!]
  groupIDs: [ID!]
  internalPolicyIDs: [ID!]
  procedureIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  controlObjectiveIDs: [ID!]
  programIDs: [ID!]
  riskIDs: [ID!]
  controlImplementationIDs: [ID!]
  evidenceIDs: [ID!]
}
"""
CreateTemplateInput is used for create Template object.
Input was generated by ent.
"""
input CreateTemplateInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the template
  """
  name: String!
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateDocumentType
  """
  the description of the template
  """
  description: String
  """
  the kind of template, e.g. questionnaire
  """
  kind: TemplateTemplateKind
  """
  the jsonschema object of the template
  """
  jsonconfig: Map!
  """
  the uischema for the template to render in the UI
  """
  uischema: Map
  ownerID: ID
  documentIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateTrustCenterComplianceInput is used for create TrustCenterCompliance object.
Input was generated by ent.
"""
input CreateTrustCenterComplianceInput {
  """
  tags associated with the object
  """
  tags: [String!]
  trustCenterID: ID
  standardID: ID!
}
"""
CreateTrustCenterDocInput is used for create TrustCenterDoc object.
Input was generated by ent.
"""
input CreateTrustCenterDocInput {
  """
  tags associated with the object
  """
  tags: [String!]
}
"""
CreateTrustCenterInput is used for create TrustCenter object.
Input was generated by ent.
"""
input CreateTrustCenterInput {
  """
  tags associated with the object
  """
  tags: [String!]
  ownerID: ID
  customDomainID: ID
  settingID: ID
  trustCenterSubprocessorIDs: [ID!]
  trustCenterComplianceIDs: [ID!]
}
"""
CreateTrustCenterSettingInput is used for create TrustCenterSetting object.
Input was generated by ent.
"""
input CreateTrustCenterSettingInput {
  """
  title of the trust center
  """
  title: String
  """
  overview of the trust center
  """
  overview: String
  """
  URL of the logo
  """
  logoRemoteURL: String
  """
  URL of the favicon
  """
  faviconRemoteURL: String
  """
  Theme mode for the trust center
  """
  themeMode: TrustCenterSettingTrustCenterThemeMode
  """
  primary color for the trust center
  """
  primaryColor: String
  """
  font for the trust center
  """
  font: String
  """
  foreground color for the trust center
  """
  foregroundColor: String
  """
  background color for the trust center
  """
  backgroundColor: String
  """
  accent/brand color for the trust center
  """
  accentColor: String
  trustCenterID: ID
  fileIDs: [ID!]
  logoFileID: ID
  faviconFileID: ID
}
"""
CreateTrustCenterSubprocessorInput is used for create TrustCenterSubprocessor object.
Input was generated by ent.
"""
input CreateTrustCenterSubprocessorInput {
  """
  country codes or country where the subprocessor is located
  """
  countries: [String!]
  """
  Category of the subprocessor, e.g. 'Data Warehouse' or 'Infrastructure Hosting'
  """
  category: String!
  trustCenterID: ID
  subprocessorID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """
  tags associated with the object
  """
  tags: [String!]
  email: String!
  firstName: String
  lastName: String
  """
  The user's displayed 'friendly' name
  """
  displayName: String!
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  the time the user was last seen
  """
  lastSeen: Time
  """
  the last auth provider used to login
  """
  lastLoginProvider: UserAuthProvider
  """
  user password hash
  """
  password: String
  """
  the Subject of the user JWT
  """
  sub: String
  """
  auth provider used to register the account
  """
  authProvider: UserAuthProvider
  """
  the user's role
  """
  role: UserRole
  personalAccessTokenIDs: [ID!]
  tfaSettingIDs: [ID!]
  settingID: ID!
  groupIDs: [ID!]
  organizationIDs: [ID!]
  webauthnIDs: [ID!]
  fileIDs: [ID!]
  avatarFileID: ID
  eventIDs: [ID!]
  actionPlanIDs: [ID!]
  subcontrolIDs: [ID!]
  assignerTaskIDs: [ID!]
  assigneeTaskIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateUserSettingInput is used for create UserSetting object.
Input was generated by ent.
"""
input CreateUserSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  """
  The time the user was suspended
  """
  suspendedAt: Time
  """
  status of the user account
  """
  status: UserSettingUserStatus
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
  userID: ID
  defaultOrgID: ID
  fileIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type CustomDomain implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the custom domain
  """
  cnameRecord: String!
  """
  The mappable domain id that this custom domain maps to
  """
  mappableDomainID: ID!
  """
  The ID of the dns verification record
  """
  dnsVerificationID: ID
  owner: Organization
  mappableDomain: MappableDomain!
  dnsVerification: DNSVerification
}
"""
A connection to a list of items.
"""
type CustomDomainConnection {
  """
  A list of edges.
  """
  edges: [CustomDomainEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CustomDomainEdge {
  """
  The item at the end of the edge.
  """
  node: CustomDomain
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type CustomDomainHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: CustomDomainHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the custom domain
  """
  cnameRecord: String!
  """
  The mappable domain id that this custom domain maps to
  """
  mappableDomainID: String!
  """
  The ID of the dns verification record
  """
  dnsVerificationID: String
}
"""
A connection to a list of items.
"""
type CustomDomainHistoryConnection {
  """
  A list of edges.
  """
  edges: [CustomDomainHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CustomDomainHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: CustomDomainHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CustomDomainHistoryOpType is enum for the field operation
"""
enum CustomDomainHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for CustomDomainHistory connections
"""
input CustomDomainHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order CustomDomainHistories.
  """
  field: CustomDomainHistoryOrderField!
}
"""
Properties by which CustomDomainHistory connections can be ordered.
"""
enum CustomDomainHistoryOrderField {
  history_time
  created_at
  updated_at
  cname_record
}
"""
CustomDomainHistoryWhereInput is used for filtering CustomDomainHistory objects.
Input was generated by ent.
"""
input CustomDomainHistoryWhereInput {
  not: CustomDomainHistoryWhereInput
  and: [CustomDomainHistoryWhereInput!]
  or: [CustomDomainHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: CustomDomainHistoryOpType
  operationNEQ: CustomDomainHistoryOpType
  operationIn: [CustomDomainHistoryOpType!]
  operationNotIn: [CustomDomainHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  cname_record field predicates
  """
  cnameRecord: String
  cnameRecordNEQ: String
  cnameRecordIn: [String!]
  cnameRecordNotIn: [String!]
  cnameRecordGT: String
  cnameRecordGTE: String
  cnameRecordLT: String
  cnameRecordLTE: String
  cnameRecordContains: String
  cnameRecordHasPrefix: String
  cnameRecordHasSuffix: String
  cnameRecordEqualFold: String
  cnameRecordContainsFold: String
  """
  mappable_domain_id field predicates
  """
  mappableDomainID: String
  mappableDomainIDNEQ: String
  mappableDomainIDIn: [String!]
  mappableDomainIDNotIn: [String!]
  mappableDomainIDGT: String
  mappableDomainIDGTE: String
  mappableDomainIDLT: String
  mappableDomainIDLTE: String
  mappableDomainIDContains: String
  mappableDomainIDHasPrefix: String
  mappableDomainIDHasSuffix: String
  mappableDomainIDEqualFold: String
  mappableDomainIDContainsFold: String
  """
  dns_verification_id field predicates
  """
  dnsVerificationID: String
  dnsVerificationIDNEQ: String
  dnsVerificationIDIn: [String!]
  dnsVerificationIDNotIn: [String!]
  dnsVerificationIDGT: String
  dnsVerificationIDGTE: String
  dnsVerificationIDLT: String
  dnsVerificationIDLTE: String
  dnsVerificationIDContains: String
  dnsVerificationIDHasPrefix: String
  dnsVerificationIDHasSuffix: String
  dnsVerificationIDIsNil: Boolean
  dnsVerificationIDNotNil: Boolean
  dnsVerificationIDEqualFold: String
  dnsVerificationIDContainsFold: String
}
"""
Ordering options for CustomDomain connections
"""
input CustomDomainOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order CustomDomains.
  """
  field: CustomDomainOrderField!
}
"""
Properties by which CustomDomain connections can be ordered.
"""
enum CustomDomainOrderField {
  created_at
  updated_at
  cname_record
}
"""
CustomDomainWhereInput is used for filtering CustomDomain objects.
Input was generated by ent.
"""
input CustomDomainWhereInput {
  not: CustomDomainWhereInput
  and: [CustomDomainWhereInput!]
  or: [CustomDomainWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  cname_record field predicates
  """
  cnameRecord: String
  cnameRecordNEQ: String
  cnameRecordIn: [String!]
  cnameRecordNotIn: [String!]
  cnameRecordGT: String
  cnameRecordGTE: String
  cnameRecordLT: String
  cnameRecordLTE: String
  cnameRecordContains: String
  cnameRecordHasPrefix: String
  cnameRecordHasSuffix: String
  cnameRecordEqualFold: String
  cnameRecordContainsFold: String
  """
  mappable_domain_id field predicates
  """
  mappableDomainID: ID
  mappableDomainIDNEQ: ID
  mappableDomainIDIn: [ID!]
  mappableDomainIDNotIn: [ID!]
  mappableDomainIDGT: ID
  mappableDomainIDGTE: ID
  mappableDomainIDLT: ID
  mappableDomainIDLTE: ID
  mappableDomainIDContains: ID
  mappableDomainIDHasPrefix: ID
  mappableDomainIDHasSuffix: ID
  mappableDomainIDEqualFold: ID
  mappableDomainIDContainsFold: ID
  """
  dns_verification_id field predicates
  """
  dnsVerificationID: ID
  dnsVerificationIDNEQ: ID
  dnsVerificationIDIn: [ID!]
  dnsVerificationIDNotIn: [ID!]
  dnsVerificationIDGT: ID
  dnsVerificationIDGTE: ID
  dnsVerificationIDLT: ID
  dnsVerificationIDLTE: ID
  dnsVerificationIDContains: ID
  dnsVerificationIDHasPrefix: ID
  dnsVerificationIDHasSuffix: ID
  dnsVerificationIDIsNil: Boolean
  dnsVerificationIDNotNil: Boolean
  dnsVerificationIDEqualFold: ID
  dnsVerificationIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  mappable_domain edge predicates
  """
  hasMappableDomain: Boolean
  hasMappableDomainWith: [MappableDomainWhereInput!]
  """
  dns_verification edge predicates
  """
  hasDNSVerification: Boolean
  hasDNSVerificationWith: [DNSVerificationWhereInput!]
}
type DNSVerification implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  The ID of the custom domain in cloudflare
  """
  cloudflareHostnameID: String!
  """
  the name of the dns txt record
  """
  dnsTxtRecord: String!
  """
  the expected value of the dns txt record
  """
  dnsTxtValue: String!
  """
  Status of the domain verification
  """
  dnsVerificationStatus: DNSVerificationDNSVerificationStatus!
  """
  Reason of the dns verification status, for giving the user diagnostic info
  """
  dnsVerificationStatusReason: String
  """
  Path under /.well-known/acme-challenge/ to serve the ACME challenge
  """
  acmeChallengePath: String
  """
  the expected value of the acme challenge record
  """
  expectedAcmeChallengeValue: String
  """
  Status of the ACME challenge validation
  """
  acmeChallengeStatus: DNSVerificationSSLVerificationStatus!
  """
  Reason of the ACME status, for giving the user diagnostic info
  """
  acmeChallengeStatusReason: String
  owner: Organization
  customDomains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CustomDomains returned from the connection.
    """
    orderBy: [CustomDomainOrder!]

    """
    Filtering options for CustomDomains returned from the connection.
    """
    where: CustomDomainWhereInput
  ): CustomDomainConnection!
}
"""
A connection to a list of items.
"""
type DNSVerificationConnection {
  """
  A list of edges.
  """
  edges: [DNSVerificationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
DNSVerificationDNSVerificationStatus is enum for the field dns_verification_status
"""
enum DNSVerificationDNSVerificationStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DNSVerificationStatus") {
  active
  pending
  active_redeploying
  moved
  pending_deletion
  deleted
  pending_blocked
  pending_migration
  pending_provisioned
  test_pending
  test_active
  test_active_apex
  test_blocked
  test_failed
  provisioned
  blocked
}
"""
An edge in a connection.
"""
type DNSVerificationEdge {
  """
  The item at the end of the edge.
  """
  node: DNSVerification
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type DNSVerificationHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: DNSVerificationHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  The ID of the custom domain in cloudflare
  """
  cloudflareHostnameID: String!
  """
  the name of the dns txt record
  """
  dnsTxtRecord: String!
  """
  the expected value of the dns txt record
  """
  dnsTxtValue: String!
  """
  Status of the domain verification
  """
  dnsVerificationStatus: DNSVerificationHistoryDNSVerificationStatus!
  """
  Reason of the dns verification status, for giving the user diagnostic info
  """
  dnsVerificationStatusReason: String
  """
  Path under /.well-known/acme-challenge/ to serve the ACME challenge
  """
  acmeChallengePath: String
  """
  the expected value of the acme challenge record
  """
  expectedAcmeChallengeValue: String
  """
  Status of the ACME challenge validation
  """
  acmeChallengeStatus: DNSVerificationHistorySSLVerificationStatus!
  """
  Reason of the ACME status, for giving the user diagnostic info
  """
  acmeChallengeStatusReason: String
}
"""
A connection to a list of items.
"""
type DNSVerificationHistoryConnection {
  """
  A list of edges.
  """
  edges: [DNSVerificationHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
DNSVerificationHistoryDNSVerificationStatus is enum for the field dns_verification_status
"""
enum DNSVerificationHistoryDNSVerificationStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DNSVerificationStatus") {
  active
  pending
  active_redeploying
  moved
  pending_deletion
  deleted
  pending_blocked
  pending_migration
  pending_provisioned
  test_pending
  test_active
  test_active_apex
  test_blocked
  test_failed
  provisioned
  blocked
}
"""
An edge in a connection.
"""
type DNSVerificationHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: DNSVerificationHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DNSVerificationHistoryOpType is enum for the field operation
"""
enum DNSVerificationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for DNSVerificationHistory connections
"""
input DNSVerificationHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DNSVerificationHistories.
  """
  field: DNSVerificationHistoryOrderField!
}
"""
Properties by which DNSVerificationHistory connections can be ordered.
"""
enum DNSVerificationHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
DNSVerificationHistorySSLVerificationStatus is enum for the field acme_challenge_status
"""
enum DNSVerificationHistorySSLVerificationStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.SSLVerificationStatus") {
  initializing
  pending_validation
  deleted
  pending_issuance
  pending_deployment
  pending_deletion
  pending_expiration
  expired
  active
  initializing_timed_out
  validation_timed_out
  issuance_timed_out
  deployment_timed_out
  deletion_timed_out
  pending_cleanup
  staging_deployment
  staging_active
  deactivating
  inactive
  backup_issued
  holding_deployment
}
"""
DNSVerificationHistoryWhereInput is used for filtering DNSVerificationHistory objects.
Input was generated by ent.
"""
input DNSVerificationHistoryWhereInput {
  not: DNSVerificationHistoryWhereInput
  and: [DNSVerificationHistoryWhereInput!]
  or: [DNSVerificationHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: DNSVerificationHistoryOpType
  operationNEQ: DNSVerificationHistoryOpType
  operationIn: [DNSVerificationHistoryOpType!]
  operationNotIn: [DNSVerificationHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  cloudflare_hostname_id field predicates
  """
  cloudflareHostnameID: String
  cloudflareHostnameIDNEQ: String
  cloudflareHostnameIDIn: [String!]
  cloudflareHostnameIDNotIn: [String!]
  cloudflareHostnameIDGT: String
  cloudflareHostnameIDGTE: String
  cloudflareHostnameIDLT: String
  cloudflareHostnameIDLTE: String
  cloudflareHostnameIDContains: String
  cloudflareHostnameIDHasPrefix: String
  cloudflareHostnameIDHasSuffix: String
  cloudflareHostnameIDEqualFold: String
  cloudflareHostnameIDContainsFold: String
  """
  dns_txt_record field predicates
  """
  dnsTxtRecord: String
  dnsTxtRecordNEQ: String
  dnsTxtRecordIn: [String!]
  dnsTxtRecordNotIn: [String!]
  dnsTxtRecordGT: String
  dnsTxtRecordGTE: String
  dnsTxtRecordLT: String
  dnsTxtRecordLTE: String
  dnsTxtRecordContains: String
  dnsTxtRecordHasPrefix: String
  dnsTxtRecordHasSuffix: String
  dnsTxtRecordEqualFold: String
  dnsTxtRecordContainsFold: String
  """
  dns_txt_value field predicates
  """
  dnsTxtValue: String
  dnsTxtValueNEQ: String
  dnsTxtValueIn: [String!]
  dnsTxtValueNotIn: [String!]
  dnsTxtValueGT: String
  dnsTxtValueGTE: String
  dnsTxtValueLT: String
  dnsTxtValueLTE: String
  dnsTxtValueContains: String
  dnsTxtValueHasPrefix: String
  dnsTxtValueHasSuffix: String
  dnsTxtValueEqualFold: String
  dnsTxtValueContainsFold: String
  """
  dns_verification_status field predicates
  """
  dnsVerificationStatus: DNSVerificationHistoryDNSVerificationStatus
  dnsVerificationStatusNEQ: DNSVerificationHistoryDNSVerificationStatus
  dnsVerificationStatusIn: [DNSVerificationHistoryDNSVerificationStatus!]
  dnsVerificationStatusNotIn: [DNSVerificationHistoryDNSVerificationStatus!]
  """
  dns_verification_status_reason field predicates
  """
  dnsVerificationStatusReason: String
  dnsVerificationStatusReasonNEQ: String
  dnsVerificationStatusReasonIn: [String!]
  dnsVerificationStatusReasonNotIn: [String!]
  dnsVerificationStatusReasonGT: String
  dnsVerificationStatusReasonGTE: String
  dnsVerificationStatusReasonLT: String
  dnsVerificationStatusReasonLTE: String
  dnsVerificationStatusReasonContains: String
  dnsVerificationStatusReasonHasPrefix: String
  dnsVerificationStatusReasonHasSuffix: String
  dnsVerificationStatusReasonIsNil: Boolean
  dnsVerificationStatusReasonNotNil: Boolean
  dnsVerificationStatusReasonEqualFold: String
  dnsVerificationStatusReasonContainsFold: String
  """
  acme_challenge_path field predicates
  """
  acmeChallengePath: String
  acmeChallengePathNEQ: String
  acmeChallengePathIn: [String!]
  acmeChallengePathNotIn: [String!]
  acmeChallengePathGT: String
  acmeChallengePathGTE: String
  acmeChallengePathLT: String
  acmeChallengePathLTE: String
  acmeChallengePathContains: String
  acmeChallengePathHasPrefix: String
  acmeChallengePathHasSuffix: String
  acmeChallengePathIsNil: Boolean
  acmeChallengePathNotNil: Boolean
  acmeChallengePathEqualFold: String
  acmeChallengePathContainsFold: String
  """
  expected_acme_challenge_value field predicates
  """
  expectedAcmeChallengeValue: String
  expectedAcmeChallengeValueNEQ: String
  expectedAcmeChallengeValueIn: [String!]
  expectedAcmeChallengeValueNotIn: [String!]
  expectedAcmeChallengeValueGT: String
  expectedAcmeChallengeValueGTE: String
  expectedAcmeChallengeValueLT: String
  expectedAcmeChallengeValueLTE: String
  expectedAcmeChallengeValueContains: String
  expectedAcmeChallengeValueHasPrefix: String
  expectedAcmeChallengeValueHasSuffix: String
  expectedAcmeChallengeValueIsNil: Boolean
  expectedAcmeChallengeValueNotNil: Boolean
  expectedAcmeChallengeValueEqualFold: String
  expectedAcmeChallengeValueContainsFold: String
  """
  acme_challenge_status field predicates
  """
  acmeChallengeStatus: DNSVerificationHistorySSLVerificationStatus
  acmeChallengeStatusNEQ: DNSVerificationHistorySSLVerificationStatus
  acmeChallengeStatusIn: [DNSVerificationHistorySSLVerificationStatus!]
  acmeChallengeStatusNotIn: [DNSVerificationHistorySSLVerificationStatus!]
  """
  acme_challenge_status_reason field predicates
  """
  acmeChallengeStatusReason: String
  acmeChallengeStatusReasonNEQ: String
  acmeChallengeStatusReasonIn: [String!]
  acmeChallengeStatusReasonNotIn: [String!]
  acmeChallengeStatusReasonGT: String
  acmeChallengeStatusReasonGTE: String
  acmeChallengeStatusReasonLT: String
  acmeChallengeStatusReasonLTE: String
  acmeChallengeStatusReasonContains: String
  acmeChallengeStatusReasonHasPrefix: String
  acmeChallengeStatusReasonHasSuffix: String
  acmeChallengeStatusReasonIsNil: Boolean
  acmeChallengeStatusReasonNotNil: Boolean
  acmeChallengeStatusReasonEqualFold: String
  acmeChallengeStatusReasonContainsFold: String
}
"""
Ordering options for DNSVerification connections
"""
input DNSVerificationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DNSVerifications.
  """
  field: DNSVerificationOrderField!
}
"""
Properties by which DNSVerification connections can be ordered.
"""
enum DNSVerificationOrderField {
  created_at
  updated_at
}
"""
DNSVerificationSSLVerificationStatus is enum for the field acme_challenge_status
"""
enum DNSVerificationSSLVerificationStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.SSLVerificationStatus") {
  initializing
  pending_validation
  deleted
  pending_issuance
  pending_deployment
  pending_deletion
  pending_expiration
  expired
  active
  initializing_timed_out
  validation_timed_out
  issuance_timed_out
  deployment_timed_out
  deletion_timed_out
  pending_cleanup
  staging_deployment
  staging_active
  deactivating
  inactive
  backup_issued
  holding_deployment
}
"""
DNSVerificationWhereInput is used for filtering DNSVerification objects.
Input was generated by ent.
"""
input DNSVerificationWhereInput {
  not: DNSVerificationWhereInput
  and: [DNSVerificationWhereInput!]
  or: [DNSVerificationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  cloudflare_hostname_id field predicates
  """
  cloudflareHostnameID: String
  cloudflareHostnameIDNEQ: String
  cloudflareHostnameIDIn: [String!]
  cloudflareHostnameIDNotIn: [String!]
  cloudflareHostnameIDGT: String
  cloudflareHostnameIDGTE: String
  cloudflareHostnameIDLT: String
  cloudflareHostnameIDLTE: String
  cloudflareHostnameIDContains: String
  cloudflareHostnameIDHasPrefix: String
  cloudflareHostnameIDHasSuffix: String
  cloudflareHostnameIDEqualFold: String
  cloudflareHostnameIDContainsFold: String
  """
  dns_txt_record field predicates
  """
  dnsTxtRecord: String
  dnsTxtRecordNEQ: String
  dnsTxtRecordIn: [String!]
  dnsTxtRecordNotIn: [String!]
  dnsTxtRecordGT: String
  dnsTxtRecordGTE: String
  dnsTxtRecordLT: String
  dnsTxtRecordLTE: String
  dnsTxtRecordContains: String
  dnsTxtRecordHasPrefix: String
  dnsTxtRecordHasSuffix: String
  dnsTxtRecordEqualFold: String
  dnsTxtRecordContainsFold: String
  """
  dns_txt_value field predicates
  """
  dnsTxtValue: String
  dnsTxtValueNEQ: String
  dnsTxtValueIn: [String!]
  dnsTxtValueNotIn: [String!]
  dnsTxtValueGT: String
  dnsTxtValueGTE: String
  dnsTxtValueLT: String
  dnsTxtValueLTE: String
  dnsTxtValueContains: String
  dnsTxtValueHasPrefix: String
  dnsTxtValueHasSuffix: String
  dnsTxtValueEqualFold: String
  dnsTxtValueContainsFold: String
  """
  dns_verification_status field predicates
  """
  dnsVerificationStatus: DNSVerificationDNSVerificationStatus
  dnsVerificationStatusNEQ: DNSVerificationDNSVerificationStatus
  dnsVerificationStatusIn: [DNSVerificationDNSVerificationStatus!]
  dnsVerificationStatusNotIn: [DNSVerificationDNSVerificationStatus!]
  """
  dns_verification_status_reason field predicates
  """
  dnsVerificationStatusReason: String
  dnsVerificationStatusReasonNEQ: String
  dnsVerificationStatusReasonIn: [String!]
  dnsVerificationStatusReasonNotIn: [String!]
  dnsVerificationStatusReasonGT: String
  dnsVerificationStatusReasonGTE: String
  dnsVerificationStatusReasonLT: String
  dnsVerificationStatusReasonLTE: String
  dnsVerificationStatusReasonContains: String
  dnsVerificationStatusReasonHasPrefix: String
  dnsVerificationStatusReasonHasSuffix: String
  dnsVerificationStatusReasonIsNil: Boolean
  dnsVerificationStatusReasonNotNil: Boolean
  dnsVerificationStatusReasonEqualFold: String
  dnsVerificationStatusReasonContainsFold: String
  """
  acme_challenge_path field predicates
  """
  acmeChallengePath: String
  acmeChallengePathNEQ: String
  acmeChallengePathIn: [String!]
  acmeChallengePathNotIn: [String!]
  acmeChallengePathGT: String
  acmeChallengePathGTE: String
  acmeChallengePathLT: String
  acmeChallengePathLTE: String
  acmeChallengePathContains: String
  acmeChallengePathHasPrefix: String
  acmeChallengePathHasSuffix: String
  acmeChallengePathIsNil: Boolean
  acmeChallengePathNotNil: Boolean
  acmeChallengePathEqualFold: String
  acmeChallengePathContainsFold: String
  """
  expected_acme_challenge_value field predicates
  """
  expectedAcmeChallengeValue: String
  expectedAcmeChallengeValueNEQ: String
  expectedAcmeChallengeValueIn: [String!]
  expectedAcmeChallengeValueNotIn: [String!]
  expectedAcmeChallengeValueGT: String
  expectedAcmeChallengeValueGTE: String
  expectedAcmeChallengeValueLT: String
  expectedAcmeChallengeValueLTE: String
  expectedAcmeChallengeValueContains: String
  expectedAcmeChallengeValueHasPrefix: String
  expectedAcmeChallengeValueHasSuffix: String
  expectedAcmeChallengeValueIsNil: Boolean
  expectedAcmeChallengeValueNotNil: Boolean
  expectedAcmeChallengeValueEqualFold: String
  expectedAcmeChallengeValueContainsFold: String
  """
  acme_challenge_status field predicates
  """
  acmeChallengeStatus: DNSVerificationSSLVerificationStatus
  acmeChallengeStatusNEQ: DNSVerificationSSLVerificationStatus
  acmeChallengeStatusIn: [DNSVerificationSSLVerificationStatus!]
  acmeChallengeStatusNotIn: [DNSVerificationSSLVerificationStatus!]
  """
  acme_challenge_status_reason field predicates
  """
  acmeChallengeStatusReason: String
  acmeChallengeStatusReasonNEQ: String
  acmeChallengeStatusReasonIn: [String!]
  acmeChallengeStatusReasonNotIn: [String!]
  acmeChallengeStatusReasonGT: String
  acmeChallengeStatusReasonGTE: String
  acmeChallengeStatusReasonLT: String
  acmeChallengeStatusReasonLTE: String
  acmeChallengeStatusReasonContains: String
  acmeChallengeStatusReasonHasPrefix: String
  acmeChallengeStatusReasonHasSuffix: String
  acmeChallengeStatusReasonIsNil: Boolean
  acmeChallengeStatusReasonNotNil: Boolean
  acmeChallengeStatusReasonEqualFold: String
  acmeChallengeStatusReasonContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  custom_domains edge predicates
  """
  hasCustomDomains: Boolean
  hasCustomDomainsWith: [CustomDomainWhereInput!]
}
type DocumentData implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the template id of the document
  """
  templateID: ID!
  """
  the json data of the document
  """
  data: Map!
  owner: Organization
  template: Template!
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
A connection to a list of items.
"""
type DocumentDataConnection {
  """
  A list of edges.
  """
  edges: [DocumentDataEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DocumentDataEdge {
  """
  The item at the end of the edge.
  """
  node: DocumentData
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type DocumentDataHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: DocumentDataHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the template id of the document
  """
  templateID: String!
  """
  the json data of the document
  """
  data: Map!
}
"""
A connection to a list of items.
"""
type DocumentDataHistoryConnection {
  """
  A list of edges.
  """
  edges: [DocumentDataHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DocumentDataHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: DocumentDataHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DocumentDataHistoryOpType is enum for the field operation
"""
enum DocumentDataHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for DocumentDataHistory connections
"""
input DocumentDataHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DocumentDataHistories.
  """
  field: DocumentDataHistoryOrderField!
}
"""
Properties by which DocumentDataHistory connections can be ordered.
"""
enum DocumentDataHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
DocumentDataHistoryWhereInput is used for filtering DocumentDataHistory objects.
Input was generated by ent.
"""
input DocumentDataHistoryWhereInput {
  not: DocumentDataHistoryWhereInput
  and: [DocumentDataHistoryWhereInput!]
  or: [DocumentDataHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: DocumentDataHistoryOpType
  operationNEQ: DocumentDataHistoryOpType
  operationIn: [DocumentDataHistoryOpType!]
  operationNotIn: [DocumentDataHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  template_id field predicates
  """
  templateID: String
  templateIDNEQ: String
  templateIDIn: [String!]
  templateIDNotIn: [String!]
  templateIDGT: String
  templateIDGTE: String
  templateIDLT: String
  templateIDLTE: String
  templateIDContains: String
  templateIDHasPrefix: String
  templateIDHasSuffix: String
  templateIDEqualFold: String
  templateIDContainsFold: String
}
"""
Ordering options for DocumentData connections
"""
input DocumentDataOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DocumentDataSlice.
  """
  field: DocumentDataOrderField!
}
"""
Properties by which DocumentData connections can be ordered.
"""
enum DocumentDataOrderField {
  created_at
  updated_at
}
"""
DocumentDataWhereInput is used for filtering DocumentData objects.
Input was generated by ent.
"""
input DocumentDataWhereInput {
  not: DocumentDataWhereInput
  and: [DocumentDataWhereInput!]
  or: [DocumentDataWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  template_id field predicates
  """
  templateID: ID
  templateIDNEQ: ID
  templateIDIn: [ID!]
  templateIDNotIn: [ID!]
  templateIDGT: ID
  templateIDGTE: ID
  templateIDLT: ID
  templateIDLTE: ID
  templateIDContains: ID
  templateIDHasPrefix: ID
  templateIDHasSuffix: ID
  templateIDEqualFold: ID
  templateIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  template edge predicates
  """
  hasTemplate: Boolean
  hasTemplateWith: [TemplateWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
type Entity implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the entity
  """
  name: String
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the entity
  """
  description: String
  """
  domains associated with the entity
  """
  domains: [String!]
  """
  The type of the entity
  """
  entityTypeID: ID
  """
  status of the entity
  """
  status: String
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Contacts returned from the connection.
    """
    orderBy: [ContactOrder!]

    """
    Filtering options for Contacts returned from the connection.
    """
    where: ContactWhereInput
  ): ContactConnection!
  documents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DocumentDataSlice returned from the connection.
    """
    orderBy: [DocumentDataOrder!]

    """
    Filtering options for DocumentDataSlice returned from the connection.
    """
    where: DocumentDataWhereInput
  ): DocumentDataConnection!
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Notes returned from the connection.
    """
    orderBy: [NoteOrder!]

    """
    Filtering options for Notes returned from the connection.
    """
    where: NoteWhereInput
  ): NoteConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  assets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Assets returned from the connection.
    """
    orderBy: [AssetOrder!]

    """
    Filtering options for Assets returned from the connection.
    """
    where: AssetWhereInput
  ): AssetConnection!
  scans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  entityType: EntityType
}
"""
A connection to a list of items.
"""
type EntityConnection {
  """
  A list of edges.
  """
  edges: [EntityEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityEdge {
  """
  The item at the end of the edge.
  """
  node: Entity
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type EntityHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: EntityHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the entity
  """
  name: String
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the entity
  """
  description: String
  """
  domains associated with the entity
  """
  domains: [String!]
  """
  The type of the entity
  """
  entityTypeID: String
  """
  status of the entity
  """
  status: String
}
"""
A connection to a list of items.
"""
type EntityHistoryConnection {
  """
  A list of edges.
  """
  edges: [EntityHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: EntityHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EntityHistoryOpType is enum for the field operation
"""
enum EntityHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for EntityHistory connections
"""
input EntityHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EntityHistories.
  """
  field: EntityHistoryOrderField!
}
"""
Properties by which EntityHistory connections can be ordered.
"""
enum EntityHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  display_name
  status
}
"""
EntityHistoryWhereInput is used for filtering EntityHistory objects.
Input was generated by ent.
"""
input EntityHistoryWhereInput {
  not: EntityHistoryWhereInput
  and: [EntityHistoryWhereInput!]
  or: [EntityHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: EntityHistoryOpType
  operationNEQ: EntityHistoryOpType
  operationIn: [EntityHistoryOpType!]
  operationNotIn: [EntityHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  entity_type_id field predicates
  """
  entityTypeID: String
  entityTypeIDNEQ: String
  entityTypeIDIn: [String!]
  entityTypeIDNotIn: [String!]
  entityTypeIDGT: String
  entityTypeIDGTE: String
  entityTypeIDLT: String
  entityTypeIDLTE: String
  entityTypeIDContains: String
  entityTypeIDHasPrefix: String
  entityTypeIDHasSuffix: String
  entityTypeIDIsNil: Boolean
  entityTypeIDNotNil: Boolean
  entityTypeIDEqualFold: String
  entityTypeIDContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
}
"""
Ordering options for Entity connections
"""
input EntityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Entities.
  """
  field: EntityOrderField!
}
"""
Properties by which Entity connections can be ordered.
"""
enum EntityOrderField {
  created_at
  updated_at
  name
  display_name
  status
}
type EntityType implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the entity
  """
  name: String!
  owner: Organization
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
}
"""
A connection to a list of items.
"""
type EntityTypeConnection {
  """
  A list of edges.
  """
  edges: [EntityTypeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityTypeEdge {
  """
  The item at the end of the edge.
  """
  node: EntityType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type EntityTypeHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: EntityTypeHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the entity
  """
  name: String!
}
"""
A connection to a list of items.
"""
type EntityTypeHistoryConnection {
  """
  A list of edges.
  """
  edges: [EntityTypeHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityTypeHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: EntityTypeHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EntityTypeHistoryOpType is enum for the field operation
"""
enum EntityTypeHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for EntityTypeHistory connections
"""
input EntityTypeHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EntityTypeHistories.
  """
  field: EntityTypeHistoryOrderField!
}
"""
Properties by which EntityTypeHistory connections can be ordered.
"""
enum EntityTypeHistoryOrderField {
  history_time
  created_at
  updated_at
  name
}
"""
EntityTypeHistoryWhereInput is used for filtering EntityTypeHistory objects.
Input was generated by ent.
"""
input EntityTypeHistoryWhereInput {
  not: EntityTypeHistoryWhereInput
  and: [EntityTypeHistoryWhereInput!]
  or: [EntityTypeHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: EntityTypeHistoryOpType
  operationNEQ: EntityTypeHistoryOpType
  operationIn: [EntityTypeHistoryOpType!]
  operationNotIn: [EntityTypeHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
Ordering options for EntityType connections
"""
input EntityTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EntityTypes.
  """
  field: EntityTypeOrderField!
}
"""
Properties by which EntityType connections can be ordered.
"""
enum EntityTypeOrderField {
  created_at
  updated_at
  name
}
"""
EntityTypeWhereInput is used for filtering EntityType objects.
Input was generated by ent.
"""
input EntityTypeWhereInput {
  not: EntityTypeWhereInput
  and: [EntityTypeWhereInput!]
  or: [EntityTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
}
"""
EntityWhereInput is used for filtering Entity objects.
Input was generated by ent.
"""
input EntityWhereInput {
  not: EntityWhereInput
  and: [EntityWhereInput!]
  or: [EntityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  entity_type_id field predicates
  """
  entityTypeID: ID
  entityTypeIDNEQ: ID
  entityTypeIDIn: [ID!]
  entityTypeIDNotIn: [ID!]
  entityTypeIDGT: ID
  entityTypeIDGTE: ID
  entityTypeIDLT: ID
  entityTypeIDLTE: ID
  entityTypeIDContains: ID
  entityTypeIDHasPrefix: ID
  entityTypeIDHasSuffix: ID
  entityTypeIDIsNil: Boolean
  entityTypeIDNotNil: Boolean
  entityTypeIDEqualFold: ID
  entityTypeIDContainsFold: ID
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  contacts edge predicates
  """
  hasContacts: Boolean
  hasContactsWith: [ContactWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentDataWhereInput!]
  """
  notes edge predicates
  """
  hasNotes: Boolean
  hasNotesWith: [NoteWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  assets edge predicates
  """
  hasAssets: Boolean
  hasAssetsWith: [AssetWhereInput!]
  """
  scans edge predicates
  """
  hasScans: Boolean
  hasScansWith: [ScanWhereInput!]
  """
  entity_type edge predicates
  """
  hasEntityType: Boolean
  hasEntityTypeWith: [EntityTypeWhereInput!]
}
type Event implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  eventID: String
  correlationID: String
  eventType: String!
  metadata: Map
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  integrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Integrations returned from the connection.
    """
    orderBy: [IntegrationOrder!]

    """
    Filtering options for Integrations returned from the connection.
    """
    where: IntegrationWhereInput
  ): IntegrationConnection!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Organizations returned from the connection.
    """
    orderBy: [OrganizationOrder!]

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  invites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Invites returned from the connection.
    """
    orderBy: [InviteOrder!]

    """
    Filtering options for Invites returned from the connection.
    """
    where: InviteWhereInput
  ): InviteConnection!
  personalAccessTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PersonalAccessTokens returned from the connection.
    """
    orderBy: [PersonalAccessTokenOrder!]

    """
    Filtering options for PersonalAccessTokens returned from the connection.
    """
    where: PersonalAccessTokenWhereInput
  ): PersonalAccessTokenConnection!
  secrets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Hushes returned from the connection.
    """
    orderBy: [HushOrder!]

    """
    Filtering options for Hushes returned from the connection.
    """
    where: HushWhereInput
  ): HushConnection!
  orgMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgMemberships returned from the connection.
    """
    orderBy: [OrgMembershipOrder!]

    """
    Filtering options for OrgMemberships returned from the connection.
    """
    where: OrgMembershipWhereInput
  ): OrgMembershipConnection!
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupMemberships returned from the connection.
    """
    orderBy: [GroupMembershipOrder!]

    """
    Filtering options for GroupMemberships returned from the connection.
    """
    where: GroupMembershipWhereInput
  ): GroupMembershipConnection!
  subscribers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subscribers returned from the connection.
    """
    orderBy: [SubscriberOrder!]

    """
    Filtering options for Subscribers returned from the connection.
    """
    where: SubscriberWhereInput
  ): SubscriberConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  orgSubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgSubscriptions returned from the connection.
    """
    orderBy: OrgSubscriptionOrder

    """
    Filtering options for OrgSubscriptions returned from the connection.
    """
    where: OrgSubscriptionWhereInput
  ): OrgSubscriptionConnection!
}
"""
A connection to a list of items.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EventEdge {
  """
  The item at the end of the edge.
  """
  node: Event
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Event connections
"""
input EventOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Events.
  """
  field: EventOrderField!
}
"""
Properties by which Event connections can be ordered.
"""
enum EventOrderField {
  created_at
  updated_at
}
"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  not: EventWhereInput
  and: [EventWhereInput!]
  or: [EventWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  event_id field predicates
  """
  eventID: String
  eventIDNEQ: String
  eventIDIn: [String!]
  eventIDNotIn: [String!]
  eventIDGT: String
  eventIDGTE: String
  eventIDLT: String
  eventIDLTE: String
  eventIDContains: String
  eventIDHasPrefix: String
  eventIDHasSuffix: String
  eventIDIsNil: Boolean
  eventIDNotNil: Boolean
  eventIDEqualFold: String
  eventIDContainsFold: String
  """
  correlation_id field predicates
  """
  correlationID: String
  correlationIDNEQ: String
  correlationIDIn: [String!]
  correlationIDNotIn: [String!]
  correlationIDGT: String
  correlationIDGTE: String
  correlationIDLT: String
  correlationIDLTE: String
  correlationIDContains: String
  correlationIDHasPrefix: String
  correlationIDHasSuffix: String
  correlationIDIsNil: Boolean
  correlationIDNotNil: Boolean
  correlationIDEqualFold: String
  correlationIDContainsFold: String
  """
  event_type field predicates
  """
  eventType: String
  eventTypeNEQ: String
  eventTypeIn: [String!]
  eventTypeNotIn: [String!]
  eventTypeGT: String
  eventTypeGTE: String
  eventTypeLT: String
  eventTypeLTE: String
  eventTypeContains: String
  eventTypeHasPrefix: String
  eventTypeHasSuffix: String
  eventTypeEqualFold: String
  eventTypeContainsFold: String
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  organizations edge predicates
  """
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """
  invites edge predicates
  """
  hasInvites: Boolean
  hasInvitesWith: [InviteWhereInput!]
  """
  personal_access_tokens edge predicates
  """
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """
  secrets edge predicates
  """
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
  """
  org_memberships edge predicates
  """
  hasOrgMemberships: Boolean
  hasOrgMembershipsWith: [OrgMembershipWhereInput!]
  """
  group_memberships edge predicates
  """
  hasGroupMemberships: Boolean
  hasGroupMembershipsWith: [GroupMembershipWhereInput!]
  """
  subscribers edge predicates
  """
  hasSubscribers: Boolean
  hasSubscribersWith: [SubscriberWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  org_subscriptions edge predicates
  """
  hasOrgSubscriptions: Boolean
  hasOrgSubscriptionsWith: [OrgSubscriptionWhereInput!]
}
type Evidence implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the name of the evidence
  """
  name: String!
  """
  the description of the evidence, what is contained in the uploaded file(s) or url(s)
  """
  description: String
  """
  description of how the evidence was collected
  """
  collectionProcedure: String
  """
  the date the evidence was retrieved
  """
  creationDate: Time!
  """
  the date the evidence should be renewed, defaults to a year from entry date
  """
  renewalDate: Time
  """
  the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
  """
  source: String
  """
  whether the evidence was automatically generated
  """
  isAutomated: Boolean
  """
  the url of the evidence if not uploaded directly to the system
  """
  url: String
  """
  the status of the evidence, ready, approved, needs renewal, missing artifact, rejected
  """
  status: EvidenceEvidenceStatus
  owner: Organization
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  controlImplementations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
}
"""
A connection to a list of items.
"""
type EvidenceConnection {
  """
  A list of edges.
  """
  edges: [EvidenceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EvidenceEdge {
  """
  The item at the end of the edge.
  """
  node: Evidence
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EvidenceEvidenceStatus is enum for the field status
"""
enum EvidenceEvidenceStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.EvidenceStatus") {
  APPROVED
  READY
  MISSING_ARTIFACT
  REJECTED
  NEEDS_RENEWAL
  SUBMITTED
  IN_REVIEW
}
type EvidenceHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: EvidenceHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the name of the evidence
  """
  name: String!
  """
  the description of the evidence, what is contained in the uploaded file(s) or url(s)
  """
  description: String
  """
  description of how the evidence was collected
  """
  collectionProcedure: String
  """
  the date the evidence was retrieved
  """
  creationDate: Time!
  """
  the date the evidence should be renewed, defaults to a year from entry date
  """
  renewalDate: Time
  """
  the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
  """
  source: String
  """
  whether the evidence was automatically generated
  """
  isAutomated: Boolean
  """
  the url of the evidence if not uploaded directly to the system
  """
  url: String
  """
  the status of the evidence, ready, approved, needs renewal, missing artifact, rejected
  """
  status: EvidenceHistoryEvidenceStatus
}
"""
A connection to a list of items.
"""
type EvidenceHistoryConnection {
  """
  A list of edges.
  """
  edges: [EvidenceHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EvidenceHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: EvidenceHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EvidenceHistoryEvidenceStatus is enum for the field status
"""
enum EvidenceHistoryEvidenceStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.EvidenceStatus") {
  APPROVED
  READY
  MISSING_ARTIFACT
  REJECTED
  NEEDS_RENEWAL
  SUBMITTED
  IN_REVIEW
}
"""
EvidenceHistoryOpType is enum for the field operation
"""
enum EvidenceHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for EvidenceHistory connections
"""
input EvidenceHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EvidenceHistories.
  """
  field: EvidenceHistoryOrderField!
}
"""
Properties by which EvidenceHistory connections can be ordered.
"""
enum EvidenceHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  creation_date
  renewal_date
  STATUS
}
"""
EvidenceHistoryWhereInput is used for filtering EvidenceHistory objects.
Input was generated by ent.
"""
input EvidenceHistoryWhereInput {
  not: EvidenceHistoryWhereInput
  and: [EvidenceHistoryWhereInput!]
  or: [EvidenceHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: EvidenceHistoryOpType
  operationNEQ: EvidenceHistoryOpType
  operationIn: [EvidenceHistoryOpType!]
  operationNotIn: [EvidenceHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  collection_procedure field predicates
  """
  collectionProcedure: String
  collectionProcedureNEQ: String
  collectionProcedureIn: [String!]
  collectionProcedureNotIn: [String!]
  collectionProcedureGT: String
  collectionProcedureGTE: String
  collectionProcedureLT: String
  collectionProcedureLTE: String
  collectionProcedureContains: String
  collectionProcedureHasPrefix: String
  collectionProcedureHasSuffix: String
  collectionProcedureIsNil: Boolean
  collectionProcedureNotNil: Boolean
  collectionProcedureEqualFold: String
  collectionProcedureContainsFold: String
  """
  creation_date field predicates
  """
  creationDate: Time
  creationDateNEQ: Time
  creationDateIn: [Time!]
  creationDateNotIn: [Time!]
  creationDateGT: Time
  creationDateGTE: Time
  creationDateLT: Time
  creationDateLTE: Time
  """
  renewal_date field predicates
  """
  renewalDate: Time
  renewalDateNEQ: Time
  renewalDateIn: [Time!]
  renewalDateNotIn: [Time!]
  renewalDateGT: Time
  renewalDateGTE: Time
  renewalDateLT: Time
  renewalDateLTE: Time
  renewalDateIsNil: Boolean
  renewalDateNotNil: Boolean
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  is_automated field predicates
  """
  isAutomated: Boolean
  isAutomatedNEQ: Boolean
  isAutomatedIsNil: Boolean
  isAutomatedNotNil: Boolean
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  """
  status field predicates
  """
  status: EvidenceHistoryEvidenceStatus
  statusNEQ: EvidenceHistoryEvidenceStatus
  statusIn: [EvidenceHistoryEvidenceStatus!]
  statusNotIn: [EvidenceHistoryEvidenceStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
}
"""
Ordering options for Evidence connections
"""
input EvidenceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Evidences.
  """
  field: EvidenceOrderField!
}
"""
Properties by which Evidence connections can be ordered.
"""
enum EvidenceOrderField {
  created_at
  updated_at
  name
  creation_date
  renewal_date
  STATUS
}
"""
EvidenceWhereInput is used for filtering Evidence objects.
Input was generated by ent.
"""
input EvidenceWhereInput {
  not: EvidenceWhereInput
  and: [EvidenceWhereInput!]
  or: [EvidenceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  collection_procedure field predicates
  """
  collectionProcedure: String
  collectionProcedureNEQ: String
  collectionProcedureIn: [String!]
  collectionProcedureNotIn: [String!]
  collectionProcedureGT: String
  collectionProcedureGTE: String
  collectionProcedureLT: String
  collectionProcedureLTE: String
  collectionProcedureContains: String
  collectionProcedureHasPrefix: String
  collectionProcedureHasSuffix: String
  collectionProcedureIsNil: Boolean
  collectionProcedureNotNil: Boolean
  collectionProcedureEqualFold: String
  collectionProcedureContainsFold: String
  """
  creation_date field predicates
  """
  creationDate: Time
  creationDateNEQ: Time
  creationDateIn: [Time!]
  creationDateNotIn: [Time!]
  creationDateGT: Time
  creationDateGTE: Time
  creationDateLT: Time
  creationDateLTE: Time
  """
  renewal_date field predicates
  """
  renewalDate: Time
  renewalDateNEQ: Time
  renewalDateIn: [Time!]
  renewalDateNotIn: [Time!]
  renewalDateGT: Time
  renewalDateGTE: Time
  renewalDateLT: Time
  renewalDateLTE: Time
  renewalDateIsNil: Boolean
  renewalDateNotNil: Boolean
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  is_automated field predicates
  """
  isAutomated: Boolean
  isAutomatedNEQ: Boolean
  isAutomatedIsNil: Boolean
  isAutomatedNotNil: Boolean
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  """
  status field predicates
  """
  status: EvidenceEvidenceStatus
  statusNEQ: EvidenceEvidenceStatus
  statusIn: [EvidenceEvidenceStatus!]
  statusNotIn: [EvidenceEvidenceStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  control_implementations edge predicates
  """
  hasControlImplementations: Boolean
  hasControlImplementationsWith: [ControlImplementationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
type Export implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the type of export, e.g., control, policy, etc.
  """
  exportType: ExportExportType!
  """
  the format of export, e.g., csv and others
  """
  format: ExportExportFormat!
  """
  the status of the export, e.g., pending, ready, failed
  """
  status: ExportExportStatus!
  """
  the user who initiated the export
  """
  requestorID: String
  """
  the specific fields to include in the export (defaults to only the id if not provided)
  """
  fields: [String!]
  """
  the specific filters to run against the exported data. This should be a well formatted graphql query
  """
  filters: String
  """
  if we try to export and it fails, the error message will be stored here
  """
  errorMessage: String
  owner: Organization
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
A connection to a list of items.
"""
type ExportConnection {
  """
  A list of edges.
  """
  edges: [ExportEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ExportEdge {
  """
  The item at the end of the edge.
  """
  node: Export
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ExportExportFormat is enum for the field format
"""
enum ExportExportFormat @goModel(model: "github.com/theopenlane/core/pkg/enums.ExportFormat") {
  CSV
}
"""
ExportExportStatus is enum for the field status
"""
enum ExportExportStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ExportStatus") {
  PENDING
  FAILED
  READY
  NODATA
}
"""
ExportExportType is enum for the field export_type
"""
enum ExportExportType @goModel(model: "github.com/theopenlane/core/pkg/enums.ExportType") {
  CONTROL
  EVIDENCE
  INTERNAL_POLICY
  PROCEDURE
  RISK
  SUBSCRIBER
  TASK
}
"""
Ordering options for Export connections
"""
input ExportOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Exports.
  """
  field: ExportOrderField!
}
"""
Properties by which Export connections can be ordered.
"""
enum ExportOrderField {
  created_at
  updated_at
  export_type
  format
  status
}
"""
ExportWhereInput is used for filtering Export objects.
Input was generated by ent.
"""
input ExportWhereInput {
  not: ExportWhereInput
  and: [ExportWhereInput!]
  or: [ExportWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  export_type field predicates
  """
  exportType: ExportExportType
  exportTypeNEQ: ExportExportType
  exportTypeIn: [ExportExportType!]
  exportTypeNotIn: [ExportExportType!]
  """
  format field predicates
  """
  format: ExportExportFormat
  formatNEQ: ExportExportFormat
  formatIn: [ExportExportFormat!]
  formatNotIn: [ExportExportFormat!]
  """
  status field predicates
  """
  status: ExportExportStatus
  statusNEQ: ExportExportStatus
  statusIn: [ExportExportStatus!]
  statusNotIn: [ExportExportStatus!]
  """
  requestor_id field predicates
  """
  requestorID: String
  requestorIDNEQ: String
  requestorIDIn: [String!]
  requestorIDNotIn: [String!]
  requestorIDGT: String
  requestorIDGTE: String
  requestorIDLT: String
  requestorIDLTE: String
  requestorIDContains: String
  requestorIDHasPrefix: String
  requestorIDHasSuffix: String
  requestorIDIsNil: Boolean
  requestorIDNotNil: Boolean
  requestorIDEqualFold: String
  requestorIDContainsFold: String
  """
  filters field predicates
  """
  filters: String
  filtersNEQ: String
  filtersIn: [String!]
  filtersNotIn: [String!]
  filtersGT: String
  filtersGTE: String
  filtersLT: String
  filtersLTE: String
  filtersContains: String
  filtersHasPrefix: String
  filtersHasSuffix: String
  filtersIsNil: Boolean
  filtersNotNil: Boolean
  filtersEqualFold: String
  filtersContainsFold: String
  """
  error_message field predicates
  """
  errorMessage: String
  errorMessageNEQ: String
  errorMessageIn: [String!]
  errorMessageNotIn: [String!]
  errorMessageGT: String
  errorMessageGTE: String
  errorMessageLT: String
  errorMessageLTE: String
  errorMessageContains: String
  errorMessageHasPrefix: String
  errorMessageHasSuffix: String
  errorMessageIsNil: Boolean
  errorMessageNotNil: Boolean
  errorMessageEqualFold: String
  errorMessageContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
type File implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String!
  """
  the extension of the file provided
  """
  providedFileExtension: String!
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  persistedFileSize: Int
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String!
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  """
  the full URI of the file
  """
  uri: String
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
  """
  additional metadata about the file
  """
  metadata: Map
  """
  the region the file is stored in, if applicable
  """
  storageRegion: String
  """
  the storage provider the file is stored in, if applicable
  """
  storageProvider: String
  lastAccessedAt: Time
  user: [User!]
  organization: [Organization!]
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  contact: [Contact!]
  entity: [Entity!]
  userSetting: [UserSetting!]
  organizationSetting: [OrganizationSetting!]
  template: [Template!]
  document: [DocumentData!]
  program: [Program!]
  evidence: [Evidence!]
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  trustCenterSetting: [TrustCenterSetting!]
  subprocessor: [Subprocessor!]
  integrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Integrations returned from the connection.
    """
    orderBy: [IntegrationOrder!]

    """
    Filtering options for Integrations returned from the connection.
    """
    where: IntegrationWhereInput
  ): IntegrationConnection!
  secrets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Hushes returned from the connection.
    """
    orderBy: [HushOrder!]

    """
    Filtering options for Hushes returned from the connection.
    """
    where: HushWhereInput
  ): HushConnection!
}
"""
A connection to a list of items.
"""
type FileConnection {
  """
  A list of edges.
  """
  edges: [FileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type FileHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: FileHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String!
  """
  the extension of the file provided
  """
  providedFileExtension: String!
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  persistedFileSize: Int
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String!
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  """
  the full URI of the file
  """
  uri: String
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
  """
  additional metadata about the file
  """
  metadata: Map
  """
  the region the file is stored in, if applicable
  """
  storageRegion: String
  """
  the storage provider the file is stored in, if applicable
  """
  storageProvider: String
  lastAccessedAt: Time
}
"""
A connection to a list of items.
"""
type FileHistoryConnection {
  """
  A list of edges.
  """
  edges: [FileHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: FileHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
FileHistoryOpType is enum for the field operation
"""
enum FileHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for FileHistory connections
"""
input FileHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order FileHistories.
  """
  field: FileHistoryOrderField!
}
"""
Properties by which FileHistory connections can be ordered.
"""
enum FileHistoryOrderField {
  history_time
  created_at
  updated_at
  last_accessed_at
}
"""
FileHistoryWhereInput is used for filtering FileHistory objects.
Input was generated by ent.
"""
input FileHistoryWhereInput {
  not: FileHistoryWhereInput
  and: [FileHistoryWhereInput!]
  or: [FileHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: FileHistoryOpType
  operationNEQ: FileHistoryOpType
  operationIn: [FileHistoryOpType!]
  operationNotIn: [FileHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  provided_file_name field predicates
  """
  providedFileName: String
  providedFileNameNEQ: String
  providedFileNameIn: [String!]
  providedFileNameNotIn: [String!]
  providedFileNameGT: String
  providedFileNameGTE: String
  providedFileNameLT: String
  providedFileNameLTE: String
  providedFileNameContains: String
  providedFileNameHasPrefix: String
  providedFileNameHasSuffix: String
  providedFileNameEqualFold: String
  providedFileNameContainsFold: String
  """
  provided_file_extension field predicates
  """
  providedFileExtension: String
  providedFileExtensionNEQ: String
  providedFileExtensionIn: [String!]
  providedFileExtensionNotIn: [String!]
  providedFileExtensionGT: String
  providedFileExtensionGTE: String
  providedFileExtensionLT: String
  providedFileExtensionLTE: String
  providedFileExtensionContains: String
  providedFileExtensionHasPrefix: String
  providedFileExtensionHasSuffix: String
  providedFileExtensionEqualFold: String
  providedFileExtensionContainsFold: String
  """
  provided_file_size field predicates
  """
  providedFileSize: Int
  providedFileSizeNEQ: Int
  providedFileSizeIn: [Int!]
  providedFileSizeNotIn: [Int!]
  providedFileSizeGT: Int
  providedFileSizeGTE: Int
  providedFileSizeLT: Int
  providedFileSizeLTE: Int
  providedFileSizeIsNil: Boolean
  providedFileSizeNotNil: Boolean
  """
  persisted_file_size field predicates
  """
  persistedFileSize: Int
  persistedFileSizeNEQ: Int
  persistedFileSizeIn: [Int!]
  persistedFileSizeNotIn: [Int!]
  persistedFileSizeGT: Int
  persistedFileSizeGTE: Int
  persistedFileSizeLT: Int
  persistedFileSizeLTE: Int
  persistedFileSizeIsNil: Boolean
  persistedFileSizeNotNil: Boolean
  """
  detected_mime_type field predicates
  """
  detectedMimeType: String
  detectedMimeTypeNEQ: String
  detectedMimeTypeIn: [String!]
  detectedMimeTypeNotIn: [String!]
  detectedMimeTypeGT: String
  detectedMimeTypeGTE: String
  detectedMimeTypeLT: String
  detectedMimeTypeLTE: String
  detectedMimeTypeContains: String
  detectedMimeTypeHasPrefix: String
  detectedMimeTypeHasSuffix: String
  detectedMimeTypeIsNil: Boolean
  detectedMimeTypeNotNil: Boolean
  detectedMimeTypeEqualFold: String
  detectedMimeTypeContainsFold: String
  """
  md5_hash field predicates
  """
  md5Hash: String
  md5HashNEQ: String
  md5HashIn: [String!]
  md5HashNotIn: [String!]
  md5HashGT: String
  md5HashGTE: String
  md5HashLT: String
  md5HashLTE: String
  md5HashContains: String
  md5HashHasPrefix: String
  md5HashHasSuffix: String
  md5HashIsNil: Boolean
  md5HashNotNil: Boolean
  md5HashEqualFold: String
  md5HashContainsFold: String
  """
  detected_content_type field predicates
  """
  detectedContentType: String
  detectedContentTypeNEQ: String
  detectedContentTypeIn: [String!]
  detectedContentTypeNotIn: [String!]
  detectedContentTypeGT: String
  detectedContentTypeGTE: String
  detectedContentTypeLT: String
  detectedContentTypeLTE: String
  detectedContentTypeContains: String
  detectedContentTypeHasPrefix: String
  detectedContentTypeHasSuffix: String
  detectedContentTypeEqualFold: String
  detectedContentTypeContainsFold: String
  """
  store_key field predicates
  """
  storeKey: String
  storeKeyNEQ: String
  storeKeyIn: [String!]
  storeKeyNotIn: [String!]
  storeKeyGT: String
  storeKeyGTE: String
  storeKeyLT: String
  storeKeyLTE: String
  storeKeyContains: String
  storeKeyHasPrefix: String
  storeKeyHasSuffix: String
  storeKeyIsNil: Boolean
  storeKeyNotNil: Boolean
  storeKeyEqualFold: String
  storeKeyContainsFold: String
  """
  category_type field predicates
  """
  categoryType: String
  categoryTypeNEQ: String
  categoryTypeIn: [String!]
  categoryTypeNotIn: [String!]
  categoryTypeGT: String
  categoryTypeGTE: String
  categoryTypeLT: String
  categoryTypeLTE: String
  categoryTypeContains: String
  categoryTypeHasPrefix: String
  categoryTypeHasSuffix: String
  categoryTypeIsNil: Boolean
  categoryTypeNotNil: Boolean
  categoryTypeEqualFold: String
  categoryTypeContainsFold: String
  """
  uri field predicates
  """
  uri: String
  uriNEQ: String
  uriIn: [String!]
  uriNotIn: [String!]
  uriGT: String
  uriGTE: String
  uriLT: String
  uriLTE: String
  uriContains: String
  uriHasPrefix: String
  uriHasSuffix: String
  uriIsNil: Boolean
  uriNotNil: Boolean
  uriEqualFold: String
  uriContainsFold: String
  """
  storage_scheme field predicates
  """
  storageScheme: String
  storageSchemeNEQ: String
  storageSchemeIn: [String!]
  storageSchemeNotIn: [String!]
  storageSchemeGT: String
  storageSchemeGTE: String
  storageSchemeLT: String
  storageSchemeLTE: String
  storageSchemeContains: String
  storageSchemeHasPrefix: String
  storageSchemeHasSuffix: String
  storageSchemeIsNil: Boolean
  storageSchemeNotNil: Boolean
  storageSchemeEqualFold: String
  storageSchemeContainsFold: String
  """
  storage_volume field predicates
  """
  storageVolume: String
  storageVolumeNEQ: String
  storageVolumeIn: [String!]
  storageVolumeNotIn: [String!]
  storageVolumeGT: String
  storageVolumeGTE: String
  storageVolumeLT: String
  storageVolumeLTE: String
  storageVolumeContains: String
  storageVolumeHasPrefix: String
  storageVolumeHasSuffix: String
  storageVolumeIsNil: Boolean
  storageVolumeNotNil: Boolean
  storageVolumeEqualFold: String
  storageVolumeContainsFold: String
  """
  storage_path field predicates
  """
  storagePath: String
  storagePathNEQ: String
  storagePathIn: [String!]
  storagePathNotIn: [String!]
  storagePathGT: String
  storagePathGTE: String
  storagePathLT: String
  storagePathLTE: String
  storagePathContains: String
  storagePathHasPrefix: String
  storagePathHasSuffix: String
  storagePathIsNil: Boolean
  storagePathNotNil: Boolean
  storagePathEqualFold: String
  storagePathContainsFold: String
  """
  storage_region field predicates
  """
  storageRegion: String
  storageRegionNEQ: String
  storageRegionIn: [String!]
  storageRegionNotIn: [String!]
  storageRegionGT: String
  storageRegionGTE: String
  storageRegionLT: String
  storageRegionLTE: String
  storageRegionContains: String
  storageRegionHasPrefix: String
  storageRegionHasSuffix: String
  storageRegionIsNil: Boolean
  storageRegionNotNil: Boolean
  storageRegionEqualFold: String
  storageRegionContainsFold: String
  """
  storage_provider field predicates
  """
  storageProvider: String
  storageProviderNEQ: String
  storageProviderIn: [String!]
  storageProviderNotIn: [String!]
  storageProviderGT: String
  storageProviderGTE: String
  storageProviderLT: String
  storageProviderLTE: String
  storageProviderContains: String
  storageProviderHasPrefix: String
  storageProviderHasSuffix: String
  storageProviderIsNil: Boolean
  storageProviderNotNil: Boolean
  storageProviderEqualFold: String
  storageProviderContainsFold: String
  """
  last_accessed_at field predicates
  """
  lastAccessedAt: Time
  lastAccessedAtNEQ: Time
  lastAccessedAtIn: [Time!]
  lastAccessedAtNotIn: [Time!]
  lastAccessedAtGT: Time
  lastAccessedAtGTE: Time
  lastAccessedAtLT: Time
  lastAccessedAtLTE: Time
  lastAccessedAtIsNil: Boolean
  lastAccessedAtNotNil: Boolean
}
"""
Ordering options for File connections
"""
input FileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Files.
  """
  field: FileOrderField!
}
"""
Properties by which File connections can be ordered.
"""
enum FileOrderField {
  created_at
  updated_at
  last_accessed_at
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  provided_file_name field predicates
  """
  providedFileName: String
  providedFileNameNEQ: String
  providedFileNameIn: [String!]
  providedFileNameNotIn: [String!]
  providedFileNameGT: String
  providedFileNameGTE: String
  providedFileNameLT: String
  providedFileNameLTE: String
  providedFileNameContains: String
  providedFileNameHasPrefix: String
  providedFileNameHasSuffix: String
  providedFileNameEqualFold: String
  providedFileNameContainsFold: String
  """
  provided_file_extension field predicates
  """
  providedFileExtension: String
  providedFileExtensionNEQ: String
  providedFileExtensionIn: [String!]
  providedFileExtensionNotIn: [String!]
  providedFileExtensionGT: String
  providedFileExtensionGTE: String
  providedFileExtensionLT: String
  providedFileExtensionLTE: String
  providedFileExtensionContains: String
  providedFileExtensionHasPrefix: String
  providedFileExtensionHasSuffix: String
  providedFileExtensionEqualFold: String
  providedFileExtensionContainsFold: String
  """
  provided_file_size field predicates
  """
  providedFileSize: Int
  providedFileSizeNEQ: Int
  providedFileSizeIn: [Int!]
  providedFileSizeNotIn: [Int!]
  providedFileSizeGT: Int
  providedFileSizeGTE: Int
  providedFileSizeLT: Int
  providedFileSizeLTE: Int
  providedFileSizeIsNil: Boolean
  providedFileSizeNotNil: Boolean
  """
  persisted_file_size field predicates
  """
  persistedFileSize: Int
  persistedFileSizeNEQ: Int
  persistedFileSizeIn: [Int!]
  persistedFileSizeNotIn: [Int!]
  persistedFileSizeGT: Int
  persistedFileSizeGTE: Int
  persistedFileSizeLT: Int
  persistedFileSizeLTE: Int
  persistedFileSizeIsNil: Boolean
  persistedFileSizeNotNil: Boolean
  """
  detected_mime_type field predicates
  """
  detectedMimeType: String
  detectedMimeTypeNEQ: String
  detectedMimeTypeIn: [String!]
  detectedMimeTypeNotIn: [String!]
  detectedMimeTypeGT: String
  detectedMimeTypeGTE: String
  detectedMimeTypeLT: String
  detectedMimeTypeLTE: String
  detectedMimeTypeContains: String
  detectedMimeTypeHasPrefix: String
  detectedMimeTypeHasSuffix: String
  detectedMimeTypeIsNil: Boolean
  detectedMimeTypeNotNil: Boolean
  detectedMimeTypeEqualFold: String
  detectedMimeTypeContainsFold: String
  """
  md5_hash field predicates
  """
  md5Hash: String
  md5HashNEQ: String
  md5HashIn: [String!]
  md5HashNotIn: [String!]
  md5HashGT: String
  md5HashGTE: String
  md5HashLT: String
  md5HashLTE: String
  md5HashContains: String
  md5HashHasPrefix: String
  md5HashHasSuffix: String
  md5HashIsNil: Boolean
  md5HashNotNil: Boolean
  md5HashEqualFold: String
  md5HashContainsFold: String
  """
  detected_content_type field predicates
  """
  detectedContentType: String
  detectedContentTypeNEQ: String
  detectedContentTypeIn: [String!]
  detectedContentTypeNotIn: [String!]
  detectedContentTypeGT: String
  detectedContentTypeGTE: String
  detectedContentTypeLT: String
  detectedContentTypeLTE: String
  detectedContentTypeContains: String
  detectedContentTypeHasPrefix: String
  detectedContentTypeHasSuffix: String
  detectedContentTypeEqualFold: String
  detectedContentTypeContainsFold: String
  """
  store_key field predicates
  """
  storeKey: String
  storeKeyNEQ: String
  storeKeyIn: [String!]
  storeKeyNotIn: [String!]
  storeKeyGT: String
  storeKeyGTE: String
  storeKeyLT: String
  storeKeyLTE: String
  storeKeyContains: String
  storeKeyHasPrefix: String
  storeKeyHasSuffix: String
  storeKeyIsNil: Boolean
  storeKeyNotNil: Boolean
  storeKeyEqualFold: String
  storeKeyContainsFold: String
  """
  category_type field predicates
  """
  categoryType: String
  categoryTypeNEQ: String
  categoryTypeIn: [String!]
  categoryTypeNotIn: [String!]
  categoryTypeGT: String
  categoryTypeGTE: String
  categoryTypeLT: String
  categoryTypeLTE: String
  categoryTypeContains: String
  categoryTypeHasPrefix: String
  categoryTypeHasSuffix: String
  categoryTypeIsNil: Boolean
  categoryTypeNotNil: Boolean
  categoryTypeEqualFold: String
  categoryTypeContainsFold: String
  """
  uri field predicates
  """
  uri: String
  uriNEQ: String
  uriIn: [String!]
  uriNotIn: [String!]
  uriGT: String
  uriGTE: String
  uriLT: String
  uriLTE: String
  uriContains: String
  uriHasPrefix: String
  uriHasSuffix: String
  uriIsNil: Boolean
  uriNotNil: Boolean
  uriEqualFold: String
  uriContainsFold: String
  """
  storage_scheme field predicates
  """
  storageScheme: String
  storageSchemeNEQ: String
  storageSchemeIn: [String!]
  storageSchemeNotIn: [String!]
  storageSchemeGT: String
  storageSchemeGTE: String
  storageSchemeLT: String
  storageSchemeLTE: String
  storageSchemeContains: String
  storageSchemeHasPrefix: String
  storageSchemeHasSuffix: String
  storageSchemeIsNil: Boolean
  storageSchemeNotNil: Boolean
  storageSchemeEqualFold: String
  storageSchemeContainsFold: String
  """
  storage_volume field predicates
  """
  storageVolume: String
  storageVolumeNEQ: String
  storageVolumeIn: [String!]
  storageVolumeNotIn: [String!]
  storageVolumeGT: String
  storageVolumeGTE: String
  storageVolumeLT: String
  storageVolumeLTE: String
  storageVolumeContains: String
  storageVolumeHasPrefix: String
  storageVolumeHasSuffix: String
  storageVolumeIsNil: Boolean
  storageVolumeNotNil: Boolean
  storageVolumeEqualFold: String
  storageVolumeContainsFold: String
  """
  storage_path field predicates
  """
  storagePath: String
  storagePathNEQ: String
  storagePathIn: [String!]
  storagePathNotIn: [String!]
  storagePathGT: String
  storagePathGTE: String
  storagePathLT: String
  storagePathLTE: String
  storagePathContains: String
  storagePathHasPrefix: String
  storagePathHasSuffix: String
  storagePathIsNil: Boolean
  storagePathNotNil: Boolean
  storagePathEqualFold: String
  storagePathContainsFold: String
  """
  storage_region field predicates
  """
  storageRegion: String
  storageRegionNEQ: String
  storageRegionIn: [String!]
  storageRegionNotIn: [String!]
  storageRegionGT: String
  storageRegionGTE: String
  storageRegionLT: String
  storageRegionLTE: String
  storageRegionContains: String
  storageRegionHasPrefix: String
  storageRegionHasSuffix: String
  storageRegionIsNil: Boolean
  storageRegionNotNil: Boolean
  storageRegionEqualFold: String
  storageRegionContainsFold: String
  """
  storage_provider field predicates
  """
  storageProvider: String
  storageProviderNEQ: String
  storageProviderIn: [String!]
  storageProviderNotIn: [String!]
  storageProviderGT: String
  storageProviderGTE: String
  storageProviderLT: String
  storageProviderLTE: String
  storageProviderContains: String
  storageProviderHasPrefix: String
  storageProviderHasSuffix: String
  storageProviderIsNil: Boolean
  storageProviderNotNil: Boolean
  storageProviderEqualFold: String
  storageProviderContainsFold: String
  """
  last_accessed_at field predicates
  """
  lastAccessedAt: Time
  lastAccessedAtNEQ: Time
  lastAccessedAtIn: [Time!]
  lastAccessedAtNotIn: [Time!]
  lastAccessedAtGT: Time
  lastAccessedAtGTE: Time
  lastAccessedAtLT: Time
  lastAccessedAtLTE: Time
  lastAccessedAtIsNil: Boolean
  lastAccessedAtNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  contact edge predicates
  """
  hasContact: Boolean
  hasContactWith: [ContactWhereInput!]
  """
  entity edge predicates
  """
  hasEntity: Boolean
  hasEntityWith: [EntityWhereInput!]
  """
  user_setting edge predicates
  """
  hasUserSetting: Boolean
  hasUserSettingWith: [UserSettingWhereInput!]
  """
  organization_setting edge predicates
  """
  hasOrganizationSetting: Boolean
  hasOrganizationSettingWith: [OrganizationSettingWhereInput!]
  """
  template edge predicates
  """
  hasTemplate: Boolean
  hasTemplateWith: [TemplateWhereInput!]
  """
  document edge predicates
  """
  hasDocument: Boolean
  hasDocumentWith: [DocumentDataWhereInput!]
  """
  program edge predicates
  """
  hasProgram: Boolean
  hasProgramWith: [ProgramWhereInput!]
  """
  evidence edge predicates
  """
  hasEvidence: Boolean
  hasEvidenceWith: [EvidenceWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  trust_center_setting edge predicates
  """
  hasTrustCenterSetting: Boolean
  hasTrustCenterSettingWith: [TrustCenterSettingWhereInput!]
  """
  subprocessor edge predicates
  """
  hasSubprocessor: Boolean
  hasSubprocessorWith: [SubprocessorWhereInput!]
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  secrets edge predicates
  """
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
}
type Group implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the group - must be unique within the organization
  """
  name: String!
  """
  the groups description
  """
  description: String
  """
  whether the group is managed by the system
  """
  isManaged: Boolean
  """
  the URL to an auto generated gravatar image for the group
  """
  gravatarLogoURL: String
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  """
  The group's displayed 'friendly' name
  """
  displayName: String!
  owner: Organization
  programEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  programBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  programViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  riskEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  riskBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  riskViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  controlObjectiveEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  controlObjectiveBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  controlObjectiveViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  narrativeEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  narrativeBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  narrativeViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  controlImplementationEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  controlImplementationBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  controlImplementationViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  scanEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  scanBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  scanViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  entityEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  entityBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  entityViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  procedureEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  procedureBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  internalPolicyEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  internalPolicyBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  controlEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  controlBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  mappedControlEditors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MappedControls returned from the connection.
    """
    orderBy: [MappedControlOrder!]

    """
    Filtering options for MappedControls returned from the connection.
    """
    where: MappedControlWhereInput
  ): MappedControlConnection!
  mappedControlBlockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MappedControls returned from the connection.
    """
    orderBy: [MappedControlOrder!]

    """
    Filtering options for MappedControls returned from the connection.
    """
    where: MappedControlWhereInput
  ): MappedControlConnection!
  setting: GroupSetting
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  integrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Integrations returned from the connection.
    """
    orderBy: [IntegrationOrder!]

    """
    Filtering options for Integrations returned from the connection.
    """
    where: IntegrationWhereInput
  ): IntegrationConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupMemberships returned from the connection.
    """
    orderBy: [GroupMembershipOrder!]

    """
    Filtering options for GroupMemberships returned from the connection.
    """
    where: GroupMembershipWhereInput
  ): GroupMembershipConnection!
}
"""
A connection to a list of items.
"""
type GroupConnection {
  """
  A list of edges.
  """
  edges: [GroupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupEdge {
  """
  The item at the end of the edge.
  """
  node: Group
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type GroupHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: GroupHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the group - must be unique within the organization
  """
  name: String!
  """
  the groups description
  """
  description: String
  """
  whether the group is managed by the system
  """
  isManaged: Boolean
  """
  the URL to an auto generated gravatar image for the group
  """
  gravatarLogoURL: String
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  """
  The group's displayed 'friendly' name
  """
  displayName: String!
}
"""
A connection to a list of items.
"""
type GroupHistoryConnection {
  """
  A list of edges.
  """
  edges: [GroupHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: GroupHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GroupHistoryOpType is enum for the field operation
"""
enum GroupHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for GroupHistory connections
"""
input GroupHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order GroupHistories.
  """
  field: GroupHistoryOrderField!
}
"""
Properties by which GroupHistory connections can be ordered.
"""
enum GroupHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  display_name
}
"""
GroupHistoryWhereInput is used for filtering GroupHistory objects.
Input was generated by ent.
"""
input GroupHistoryWhereInput {
  not: GroupHistoryWhereInput
  and: [GroupHistoryWhereInput!]
  or: [GroupHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: GroupHistoryOpType
  operationNEQ: GroupHistoryOpType
  operationIn: [GroupHistoryOpType!]
  operationNotIn: [GroupHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  is_managed field predicates
  """
  isManaged: Boolean
  isManagedNEQ: Boolean
  isManagedIsNil: Boolean
  isManagedNotNil: Boolean
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
}
type GroupMembership implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  role: GroupMembershipRole!
  groupID: ID!
  userID: ID!
  group: Group!
  user: User!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
}
"""
A connection to a list of items.
"""
type GroupMembershipConnection {
  """
  A list of edges.
  """
  edges: [GroupMembershipEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupMembershipEdge {
  """
  The item at the end of the edge.
  """
  node: GroupMembership
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type GroupMembershipHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: GroupMembershipHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  role: GroupMembershipHistoryRole!
  groupID: String!
  userID: String!
}
"""
A connection to a list of items.
"""
type GroupMembershipHistoryConnection {
  """
  A list of edges.
  """
  edges: [GroupMembershipHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupMembershipHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: GroupMembershipHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GroupMembershipHistoryOpType is enum for the field operation
"""
enum GroupMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for GroupMembershipHistory connections
"""
input GroupMembershipHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order GroupMembershipHistories.
  """
  field: GroupMembershipHistoryOrderField!
}
"""
Properties by which GroupMembershipHistory connections can be ordered.
"""
enum GroupMembershipHistoryOrderField {
  history_time
  created_at
  updated_at
  ROLE
}
"""
GroupMembershipHistoryRole is enum for the field role
"""
enum GroupMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
GroupMembershipHistoryWhereInput is used for filtering GroupMembershipHistory objects.
Input was generated by ent.
"""
input GroupMembershipHistoryWhereInput {
  not: GroupMembershipHistoryWhereInput
  and: [GroupMembershipHistoryWhereInput!]
  or: [GroupMembershipHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: GroupMembershipHistoryOpType
  operationNEQ: GroupMembershipHistoryOpType
  operationIn: [GroupMembershipHistoryOpType!]
  operationNotIn: [GroupMembershipHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  role field predicates
  """
  role: GroupMembershipHistoryRole
  roleNEQ: GroupMembershipHistoryRole
  roleIn: [GroupMembershipHistoryRole!]
  roleNotIn: [GroupMembershipHistoryRole!]
  """
  group_id field predicates
  """
  groupID: String
  groupIDNEQ: String
  groupIDIn: [String!]
  groupIDNotIn: [String!]
  groupIDGT: String
  groupIDGTE: String
  groupIDLT: String
  groupIDLTE: String
  groupIDContains: String
  groupIDHasPrefix: String
  groupIDHasSuffix: String
  groupIDEqualFold: String
  groupIDContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
}
"""
Ordering options for GroupMembership connections
"""
input GroupMembershipOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order GroupMemberships.
  """
  field: GroupMembershipOrderField!
}
"""
Properties by which GroupMembership connections can be ordered.
"""
enum GroupMembershipOrderField {
  created_at
  updated_at
  ROLE
}
"""
GroupMembershipRole is enum for the field role
"""
enum GroupMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
GroupMembershipWhereInput is used for filtering GroupMembership objects.
Input was generated by ent.
"""
input GroupMembershipWhereInput {
  not: GroupMembershipWhereInput
  and: [GroupMembershipWhereInput!]
  or: [GroupMembershipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  role field predicates
  """
  role: GroupMembershipRole
  roleNEQ: GroupMembershipRole
  roleIn: [GroupMembershipRole!]
  roleNotIn: [GroupMembershipRole!]
}
"""
Ordering options for Group connections
"""
input GroupOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Groups.
  """
  field: GroupOrderField!
}
"""
Properties by which Group connections can be ordered.
"""
enum GroupOrderField {
  created_at
  updated_at
  name
  display_name
}
type GroupSetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingVisibility!
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingJoinPolicy!
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  """
  the group id associated with the settings
  """
  groupID: ID
  group: Group
}
"""
A connection to a list of items.
"""
type GroupSettingConnection {
  """
  A list of edges.
  """
  edges: [GroupSettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupSettingEdge {
  """
  The item at the end of the edge.
  """
  node: GroupSetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type GroupSettingHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: GroupSettingHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingHistoryVisibility!
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingHistoryJoinPolicy!
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  """
  the group id associated with the settings
  """
  groupID: String
}
"""
A connection to a list of items.
"""
type GroupSettingHistoryConnection {
  """
  A list of edges.
  """
  edges: [GroupSettingHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupSettingHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: GroupSettingHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GroupSettingHistoryJoinPolicy is enum for the field join_policy
"""
enum GroupSettingHistoryJoinPolicy @goModel(model: "github.com/theopenlane/core/pkg/enums.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}
"""
GroupSettingHistoryOpType is enum for the field operation
"""
enum GroupSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for GroupSettingHistory connections
"""
input GroupSettingHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order GroupSettingHistories.
  """
  field: GroupSettingHistoryOrderField!
}
"""
Properties by which GroupSettingHistory connections can be ordered.
"""
enum GroupSettingHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
GroupSettingHistoryVisibility is enum for the field visibility
"""
enum GroupSettingHistoryVisibility @goModel(model: "github.com/theopenlane/core/pkg/enums.Visibility") {
  PUBLIC
  PRIVATE
}
"""
GroupSettingHistoryWhereInput is used for filtering GroupSettingHistory objects.
Input was generated by ent.
"""
input GroupSettingHistoryWhereInput {
  not: GroupSettingHistoryWhereInput
  and: [GroupSettingHistoryWhereInput!]
  or: [GroupSettingHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: GroupSettingHistoryOpType
  operationNEQ: GroupSettingHistoryOpType
  operationIn: [GroupSettingHistoryOpType!]
  operationNotIn: [GroupSettingHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  visibility field predicates
  """
  visibility: GroupSettingHistoryVisibility
  visibilityNEQ: GroupSettingHistoryVisibility
  visibilityIn: [GroupSettingHistoryVisibility!]
  visibilityNotIn: [GroupSettingHistoryVisibility!]
  """
  join_policy field predicates
  """
  joinPolicy: GroupSettingHistoryJoinPolicy
  joinPolicyNEQ: GroupSettingHistoryJoinPolicy
  joinPolicyIn: [GroupSettingHistoryJoinPolicy!]
  joinPolicyNotIn: [GroupSettingHistoryJoinPolicy!]
  """
  sync_to_slack field predicates
  """
  syncToSlack: Boolean
  syncToSlackNEQ: Boolean
  syncToSlackIsNil: Boolean
  syncToSlackNotNil: Boolean
  """
  sync_to_github field predicates
  """
  syncToGithub: Boolean
  syncToGithubNEQ: Boolean
  syncToGithubIsNil: Boolean
  syncToGithubNotNil: Boolean
  """
  group_id field predicates
  """
  groupID: String
  groupIDNEQ: String
  groupIDIn: [String!]
  groupIDNotIn: [String!]
  groupIDGT: String
  groupIDGTE: String
  groupIDLT: String
  groupIDLTE: String
  groupIDContains: String
  groupIDHasPrefix: String
  groupIDHasSuffix: String
  groupIDIsNil: Boolean
  groupIDNotNil: Boolean
  groupIDEqualFold: String
  groupIDContainsFold: String
}
"""
GroupSettingJoinPolicy is enum for the field join_policy
"""
enum GroupSettingJoinPolicy @goModel(model: "github.com/theopenlane/core/pkg/enums.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}
"""
Ordering options for GroupSetting connections
"""
input GroupSettingOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order GroupSettings.
  """
  field: GroupSettingOrderField!
}
"""
Properties by which GroupSetting connections can be ordered.
"""
enum GroupSettingOrderField {
  created_at
  updated_at
}
"""
GroupSettingVisibility is enum for the field visibility
"""
enum GroupSettingVisibility @goModel(model: "github.com/theopenlane/core/pkg/enums.Visibility") {
  PUBLIC
  PRIVATE
}
"""
GroupSettingWhereInput is used for filtering GroupSetting objects.
Input was generated by ent.
"""
input GroupSettingWhereInput {
  not: GroupSettingWhereInput
  and: [GroupSettingWhereInput!]
  or: [GroupSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  visibility field predicates
  """
  visibility: GroupSettingVisibility
  visibilityNEQ: GroupSettingVisibility
  visibilityIn: [GroupSettingVisibility!]
  visibilityNotIn: [GroupSettingVisibility!]
  """
  join_policy field predicates
  """
  joinPolicy: GroupSettingJoinPolicy
  joinPolicyNEQ: GroupSettingJoinPolicy
  joinPolicyIn: [GroupSettingJoinPolicy!]
  joinPolicyNotIn: [GroupSettingJoinPolicy!]
  """
  sync_to_slack field predicates
  """
  syncToSlack: Boolean
  syncToSlackNEQ: Boolean
  syncToSlackIsNil: Boolean
  syncToSlackNotNil: Boolean
  """
  sync_to_github field predicates
  """
  syncToGithub: Boolean
  syncToGithubNEQ: Boolean
  syncToGithubIsNil: Boolean
  syncToGithubNotNil: Boolean
  """
  group_id field predicates
  """
  groupID: ID
  groupIDNEQ: ID
  groupIDIn: [ID!]
  groupIDNotIn: [ID!]
  groupIDGT: ID
  groupIDGTE: ID
  groupIDLT: ID
  groupIDLTE: ID
  groupIDContains: ID
  groupIDHasPrefix: ID
  groupIDHasSuffix: ID
  groupIDIsNil: Boolean
  groupIDNotNil: Boolean
  groupIDEqualFold: ID
  groupIDContainsFold: ID
  """
  group edge predicates
  """
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  is_managed field predicates
  """
  isManaged: Boolean
  isManagedNEQ: Boolean
  isManagedIsNil: Boolean
  isManagedNotNil: Boolean
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  program_editors edge predicates
  """
  hasProgramEditors: Boolean
  hasProgramEditorsWith: [ProgramWhereInput!]
  """
  program_blocked_groups edge predicates
  """
  hasProgramBlockedGroups: Boolean
  hasProgramBlockedGroupsWith: [ProgramWhereInput!]
  """
  program_viewers edge predicates
  """
  hasProgramViewers: Boolean
  hasProgramViewersWith: [ProgramWhereInput!]
  """
  risk_editors edge predicates
  """
  hasRiskEditors: Boolean
  hasRiskEditorsWith: [RiskWhereInput!]
  """
  risk_blocked_groups edge predicates
  """
  hasRiskBlockedGroups: Boolean
  hasRiskBlockedGroupsWith: [RiskWhereInput!]
  """
  risk_viewers edge predicates
  """
  hasRiskViewers: Boolean
  hasRiskViewersWith: [RiskWhereInput!]
  """
  control_objective_editors edge predicates
  """
  hasControlObjectiveEditors: Boolean
  hasControlObjectiveEditorsWith: [ControlObjectiveWhereInput!]
  """
  control_objective_blocked_groups edge predicates
  """
  hasControlObjectiveBlockedGroups: Boolean
  hasControlObjectiveBlockedGroupsWith: [ControlObjectiveWhereInput!]
  """
  control_objective_viewers edge predicates
  """
  hasControlObjectiveViewers: Boolean
  hasControlObjectiveViewersWith: [ControlObjectiveWhereInput!]
  """
  narrative_editors edge predicates
  """
  hasNarrativeEditors: Boolean
  hasNarrativeEditorsWith: [NarrativeWhereInput!]
  """
  narrative_blocked_groups edge predicates
  """
  hasNarrativeBlockedGroups: Boolean
  hasNarrativeBlockedGroupsWith: [NarrativeWhereInput!]
  """
  narrative_viewers edge predicates
  """
  hasNarrativeViewers: Boolean
  hasNarrativeViewersWith: [NarrativeWhereInput!]
  """
  control_implementation_editors edge predicates
  """
  hasControlImplementationEditors: Boolean
  hasControlImplementationEditorsWith: [ControlImplementationWhereInput!]
  """
  control_implementation_blocked_groups edge predicates
  """
  hasControlImplementationBlockedGroups: Boolean
  hasControlImplementationBlockedGroupsWith: [ControlImplementationWhereInput!]
  """
  control_implementation_viewers edge predicates
  """
  hasControlImplementationViewers: Boolean
  hasControlImplementationViewersWith: [ControlImplementationWhereInput!]
  """
  scan_editors edge predicates
  """
  hasScanEditors: Boolean
  hasScanEditorsWith: [ScanWhereInput!]
  """
  scan_blocked_groups edge predicates
  """
  hasScanBlockedGroups: Boolean
  hasScanBlockedGroupsWith: [ScanWhereInput!]
  """
  scan_viewers edge predicates
  """
  hasScanViewers: Boolean
  hasScanViewersWith: [ScanWhereInput!]
  """
  entity_editors edge predicates
  """
  hasEntityEditors: Boolean
  hasEntityEditorsWith: [EntityWhereInput!]
  """
  entity_blocked_groups edge predicates
  """
  hasEntityBlockedGroups: Boolean
  hasEntityBlockedGroupsWith: [EntityWhereInput!]
  """
  entity_viewers edge predicates
  """
  hasEntityViewers: Boolean
  hasEntityViewersWith: [EntityWhereInput!]
  """
  procedure_editors edge predicates
  """
  hasProcedureEditors: Boolean
  hasProcedureEditorsWith: [ProcedureWhereInput!]
  """
  procedure_blocked_groups edge predicates
  """
  hasProcedureBlockedGroups: Boolean
  hasProcedureBlockedGroupsWith: [ProcedureWhereInput!]
  """
  internal_policy_editors edge predicates
  """
  hasInternalPolicyEditors: Boolean
  hasInternalPolicyEditorsWith: [InternalPolicyWhereInput!]
  """
  internal_policy_blocked_groups edge predicates
  """
  hasInternalPolicyBlockedGroups: Boolean
  hasInternalPolicyBlockedGroupsWith: [InternalPolicyWhereInput!]
  """
  control_editors edge predicates
  """
  hasControlEditors: Boolean
  hasControlEditorsWith: [ControlWhereInput!]
  """
  control_blocked_groups edge predicates
  """
  hasControlBlockedGroups: Boolean
  hasControlBlockedGroupsWith: [ControlWhereInput!]
  """
  mapped_control_editors edge predicates
  """
  hasMappedControlEditors: Boolean
  hasMappedControlEditorsWith: [MappedControlWhereInput!]
  """
  mapped_control_blocked_groups edge predicates
  """
  hasMappedControlBlockedGroups: Boolean
  hasMappedControlBlockedGroupsWith: [MappedControlWhereInput!]
  """
  setting edge predicates
  """
  hasSetting: Boolean
  hasSettingWith: [GroupSettingWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  members edge predicates
  """
  hasMembers: Boolean
  hasMembersWith: [GroupMembershipWhereInput!]
}
type Hush implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String!
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  """
  the generic name of a secret associated with the organization
  """
  secretName: String
  """
  a credential set, typically where you have multiple tokens or keys that compose one credential such as when accessing s3 and using access key ID, secret key, etc.
  """
  credentialSet: CredentialSet
  """
  additional metadata about the credential
  """
  metadata: Map
  lastUsedAt: Time
  """
  when the token expires
  """
  expiresAt: Time
  owner: Organization
  integrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Integrations returned from the connection.
    """
    orderBy: [IntegrationOrder!]

    """
    Filtering options for Integrations returned from the connection.
    """
    where: IntegrationWhereInput
  ): IntegrationConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
}
"""
A connection to a list of items.
"""
type HushConnection {
  """
  A list of edges.
  """
  edges: [HushEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HushEdge {
  """
  The item at the end of the edge.
  """
  node: Hush
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type HushHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: HushHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String!
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  """
  the generic name of a secret associated with the organization
  """
  secretName: String
  """
  a credential set, typically where you have multiple tokens or keys that compose one credential such as when accessing s3 and using access key ID, secret key, etc.
  """
  credentialSet: CredentialSet
  """
  additional metadata about the credential
  """
  metadata: Map
  lastUsedAt: Time
  """
  when the token expires
  """
  expiresAt: Time
}
"""
A connection to a list of items.
"""
type HushHistoryConnection {
  """
  A list of edges.
  """
  edges: [HushHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HushHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: HushHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
HushHistoryOpType is enum for the field operation
"""
enum HushHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for HushHistory connections
"""
input HushHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order HushHistories.
  """
  field: HushHistoryOrderField!
}
"""
Properties by which HushHistory connections can be ordered.
"""
enum HushHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  kind
  last_used_at
  expires_at
}
"""
HushHistoryWhereInput is used for filtering HushHistory objects.
Input was generated by ent.
"""
input HushHistoryWhereInput {
  not: HushHistoryWhereInput
  and: [HushHistoryWhereInput!]
  or: [HushHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: HushHistoryOpType
  operationNEQ: HushHistoryOpType
  operationIn: [HushHistoryOpType!]
  operationNotIn: [HushHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
  """
  secret_name field predicates
  """
  secretName: String
  secretNameNEQ: String
  secretNameIn: [String!]
  secretNameNotIn: [String!]
  secretNameGT: String
  secretNameGTE: String
  secretNameLT: String
  secretNameLTE: String
  secretNameContains: String
  secretNameHasPrefix: String
  secretNameHasSuffix: String
  secretNameIsNil: Boolean
  secretNameNotNil: Boolean
  secretNameEqualFold: String
  secretNameContainsFold: String
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
}
"""
Ordering options for Hush connections
"""
input HushOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Hushes.
  """
  field: HushOrderField!
}
"""
Properties by which Hush connections can be ordered.
"""
enum HushOrderField {
  created_at
  updated_at
  name
  kind
  last_used_at
  expires_at
}
"""
HushWhereInput is used for filtering Hush objects.
Input was generated by ent.
"""
input HushWhereInput {
  not: HushWhereInput
  and: [HushWhereInput!]
  or: [HushWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
  """
  secret_name field predicates
  """
  secretName: String
  secretNameNEQ: String
  secretNameIn: [String!]
  secretNameNotIn: [String!]
  secretNameGT: String
  secretNameGTE: String
  secretNameLT: String
  secretNameLTE: String
  secretNameContains: String
  secretNameHasPrefix: String
  secretNameHasSuffix: String
  secretNameIsNil: Boolean
  secretNameNotNil: Boolean
  secretNameEqualFold: String
  secretNameContainsFold: String
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type Integration implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the integration
  """
  name: String!
  """
  a description of the integration
  """
  description: String
  """
  the kind of integration, such as github, slack, s3 etc.
  """
  kind: String
  """
  the type of integration, such as communicattion, storage, SCM, etc.
  """
  integrationType: String
  """
  additional metadata about the integration
  """
  metadata: Map
  owner: Organization
  secrets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Hushes returned from the connection.
    """
    orderBy: [HushOrder!]

    """
    Filtering options for Hushes returned from the connection.
    """
    where: HushWhereInput
  ): HushConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
}
"""
A connection to a list of items.
"""
type IntegrationConnection {
  """
  A list of edges.
  """
  edges: [IntegrationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type IntegrationEdge {
  """
  The item at the end of the edge.
  """
  node: Integration
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type IntegrationHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: IntegrationHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the integration
  """
  name: String!
  """
  a description of the integration
  """
  description: String
  """
  the kind of integration, such as github, slack, s3 etc.
  """
  kind: String
  """
  the type of integration, such as communicattion, storage, SCM, etc.
  """
  integrationType: String
  """
  additional metadata about the integration
  """
  metadata: Map
}
"""
A connection to a list of items.
"""
type IntegrationHistoryConnection {
  """
  A list of edges.
  """
  edges: [IntegrationHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type IntegrationHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: IntegrationHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
IntegrationHistoryOpType is enum for the field operation
"""
enum IntegrationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for IntegrationHistory connections
"""
input IntegrationHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order IntegrationHistories.
  """
  field: IntegrationHistoryOrderField!
}
"""
Properties by which IntegrationHistory connections can be ordered.
"""
enum IntegrationHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  kind
  integration_type
}
"""
IntegrationHistoryWhereInput is used for filtering IntegrationHistory objects.
Input was generated by ent.
"""
input IntegrationHistoryWhereInput {
  not: IntegrationHistoryWhereInput
  and: [IntegrationHistoryWhereInput!]
  or: [IntegrationHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: IntegrationHistoryOpType
  operationNEQ: IntegrationHistoryOpType
  operationIn: [IntegrationHistoryOpType!]
  operationNotIn: [IntegrationHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
  """
  integration_type field predicates
  """
  integrationType: String
  integrationTypeNEQ: String
  integrationTypeIn: [String!]
  integrationTypeNotIn: [String!]
  integrationTypeGT: String
  integrationTypeGTE: String
  integrationTypeLT: String
  integrationTypeLTE: String
  integrationTypeContains: String
  integrationTypeHasPrefix: String
  integrationTypeHasSuffix: String
  integrationTypeIsNil: Boolean
  integrationTypeNotNil: Boolean
  integrationTypeEqualFold: String
  integrationTypeContainsFold: String
}
"""
Ordering options for Integration connections
"""
input IntegrationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Integrations.
  """
  field: IntegrationOrderField!
}
"""
Properties by which Integration connections can be ordered.
"""
enum IntegrationOrderField {
  created_at
  updated_at
  name
  kind
  integration_type
}
"""
IntegrationWhereInput is used for filtering Integration objects.
Input was generated by ent.
"""
input IntegrationWhereInput {
  not: IntegrationWhereInput
  and: [IntegrationWhereInput!]
  or: [IntegrationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
  """
  integration_type field predicates
  """
  integrationType: String
  integrationTypeNEQ: String
  integrationTypeIn: [String!]
  integrationTypeNotIn: [String!]
  integrationTypeGT: String
  integrationTypeGTE: String
  integrationTypeLT: String
  integrationTypeLTE: String
  integrationTypeContains: String
  integrationTypeHasPrefix: String
  integrationTypeHasSuffix: String
  integrationTypeIsNil: Boolean
  integrationTypeNotNil: Boolean
  integrationTypeEqualFold: String
  integrationTypeContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  secrets edge predicates
  """
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type InternalPolicy implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the policy
  """
  name: String!
  """
  status of the policy, e.g. draft, published, archived, etc.
  """
  status: InternalPolicyDocumentStatus
  """
  type of the policy, e.g. compliance, operational, health and safety, etc.
  """
  policyType: String
  """
  details of the policy
  """
  details: String
  """
  whether approval is required for edits to the policy
  """
  approvalRequired: Boolean
  """
  the date the policy should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the policy should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: InternalPolicyFrequency
  """
  the id of the group responsible for approving the policy
  """
  approverID: ID
  """
  the id of the group responsible for approving the policy
  """
  delegateID: ID
  summary: String
  """
  auto-generated tag suggestions for the policy
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the policy
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the policy
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the policy
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the policy
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the policy
  """
  dismissedImprovementSuggestions: [String!]
  """
  This will contain the most recent file id if this policy was created from a file
  """
  fileID: ID
  """
  This will contain the url used to create/update the policy
  """
  url: String
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  """
  the group of users who are responsible for approving the policy
  """
  approver: Group
  """
  temporary delegates for the policy, used for temporary approval
  """
  delegate: Group
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  controlImplementations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  file: File
}
"""
A connection to a list of items.
"""
type InternalPolicyConnection {
  """
  A list of edges.
  """
  edges: [InternalPolicyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
InternalPolicyDocumentStatus is enum for the field status
"""
enum InternalPolicyDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type InternalPolicyEdge {
  """
  The item at the end of the edge.
  """
  node: InternalPolicy
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
InternalPolicyFrequency is enum for the field review_frequency
"""
enum InternalPolicyFrequency @goModel(model: "github.com/theopenlane/core/pkg/enums.Frequency") {
  YEARLY
  QUARTERLY
  BIANNUALLY
  MONTHLY
}
type InternalPolicyHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: InternalPolicyHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the policy
  """
  name: String!
  """
  status of the policy, e.g. draft, published, archived, etc.
  """
  status: InternalPolicyHistoryDocumentStatus
  """
  type of the policy, e.g. compliance, operational, health and safety, etc.
  """
  policyType: String
  """
  details of the policy
  """
  details: String
  """
  whether approval is required for edits to the policy
  """
  approvalRequired: Boolean
  """
  the date the policy should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the policy should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: InternalPolicyHistoryFrequency
  """
  the id of the group responsible for approving the policy
  """
  approverID: String
  """
  the id of the group responsible for approving the policy
  """
  delegateID: String
  summary: String
  """
  auto-generated tag suggestions for the policy
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the policy
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the policy
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the policy
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the policy
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the policy
  """
  dismissedImprovementSuggestions: [String!]
  """
  This will contain the most recent file id if this policy was created from a file
  """
  fileID: String
  """
  This will contain the url used to create/update the policy
  """
  url: String
}
"""
A connection to a list of items.
"""
type InternalPolicyHistoryConnection {
  """
  A list of edges.
  """
  edges: [InternalPolicyHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
InternalPolicyHistoryDocumentStatus is enum for the field status
"""
enum InternalPolicyHistoryDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type InternalPolicyHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: InternalPolicyHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
InternalPolicyHistoryFrequency is enum for the field review_frequency
"""
enum InternalPolicyHistoryFrequency @goModel(model: "github.com/theopenlane/core/pkg/enums.Frequency") {
  YEARLY
  QUARTERLY
  BIANNUALLY
  MONTHLY
}
"""
InternalPolicyHistoryOpType is enum for the field operation
"""
enum InternalPolicyHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for InternalPolicyHistory connections
"""
input InternalPolicyHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order InternalPolicyHistories.
  """
  field: InternalPolicyHistoryOrderField!
}
"""
Properties by which InternalPolicyHistory connections can be ordered.
"""
enum InternalPolicyHistoryOrderField {
  history_time
  created_at
  updated_at
  revision
  name
  STATUS
  review_due
  REVIEW_FREQUENCY
}
"""
InternalPolicyHistoryWhereInput is used for filtering InternalPolicyHistory objects.
Input was generated by ent.
"""
input InternalPolicyHistoryWhereInput {
  not: InternalPolicyHistoryWhereInput
  and: [InternalPolicyHistoryWhereInput!]
  or: [InternalPolicyHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: InternalPolicyHistoryOpType
  operationNEQ: InternalPolicyHistoryOpType
  operationIn: [InternalPolicyHistoryOpType!]
  operationNotIn: [InternalPolicyHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: InternalPolicyHistoryDocumentStatus
  statusNEQ: InternalPolicyHistoryDocumentStatus
  statusIn: [InternalPolicyHistoryDocumentStatus!]
  statusNotIn: [InternalPolicyHistoryDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  policy_type field predicates
  """
  policyType: String
  policyTypeNEQ: String
  policyTypeIn: [String!]
  policyTypeNotIn: [String!]
  policyTypeGT: String
  policyTypeGTE: String
  policyTypeLT: String
  policyTypeLTE: String
  policyTypeContains: String
  policyTypeHasPrefix: String
  policyTypeHasSuffix: String
  policyTypeIsNil: Boolean
  policyTypeNotNil: Boolean
  policyTypeEqualFold: String
  policyTypeContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  approval_required field predicates
  """
  approvalRequired: Boolean
  approvalRequiredNEQ: Boolean
  approvalRequiredIsNil: Boolean
  approvalRequiredNotNil: Boolean
  """
  review_due field predicates
  """
  reviewDue: Time
  reviewDueNEQ: Time
  reviewDueIn: [Time!]
  reviewDueNotIn: [Time!]
  reviewDueGT: Time
  reviewDueGTE: Time
  reviewDueLT: Time
  reviewDueLTE: Time
  reviewDueIsNil: Boolean
  reviewDueNotNil: Boolean
  """
  review_frequency field predicates
  """
  reviewFrequency: InternalPolicyHistoryFrequency
  reviewFrequencyNEQ: InternalPolicyHistoryFrequency
  reviewFrequencyIn: [InternalPolicyHistoryFrequency!]
  reviewFrequencyNotIn: [InternalPolicyHistoryFrequency!]
  reviewFrequencyIsNil: Boolean
  reviewFrequencyNotNil: Boolean
  """
  approver_id field predicates
  """
  approverID: String
  approverIDNEQ: String
  approverIDIn: [String!]
  approverIDNotIn: [String!]
  approverIDGT: String
  approverIDGTE: String
  approverIDLT: String
  approverIDLTE: String
  approverIDContains: String
  approverIDHasPrefix: String
  approverIDHasSuffix: String
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: String
  approverIDContainsFold: String
  """
  delegate_id field predicates
  """
  delegateID: String
  delegateIDNEQ: String
  delegateIDIn: [String!]
  delegateIDNotIn: [String!]
  delegateIDGT: String
  delegateIDGTE: String
  delegateIDLT: String
  delegateIDLTE: String
  delegateIDContains: String
  delegateIDHasPrefix: String
  delegateIDHasSuffix: String
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: String
  delegateIDContainsFold: String
  """
  file_id field predicates
  """
  fileID: String
  fileIDNEQ: String
  fileIDIn: [String!]
  fileIDNotIn: [String!]
  fileIDGT: String
  fileIDGTE: String
  fileIDLT: String
  fileIDLTE: String
  fileIDContains: String
  fileIDHasPrefix: String
  fileIDHasSuffix: String
  fileIDIsNil: Boolean
  fileIDNotNil: Boolean
  fileIDEqualFold: String
  fileIDContainsFold: String
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
}
"""
Ordering options for InternalPolicy connections
"""
input InternalPolicyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order InternalPolicies.
  """
  field: InternalPolicyOrderField!
}
"""
Properties by which InternalPolicy connections can be ordered.
"""
enum InternalPolicyOrderField {
  created_at
  updated_at
  revision
  name
  STATUS
  review_due
  REVIEW_FREQUENCY
}
"""
InternalPolicyWhereInput is used for filtering InternalPolicy objects.
Input was generated by ent.
"""
input InternalPolicyWhereInput {
  not: InternalPolicyWhereInput
  and: [InternalPolicyWhereInput!]
  or: [InternalPolicyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: InternalPolicyDocumentStatus
  statusNEQ: InternalPolicyDocumentStatus
  statusIn: [InternalPolicyDocumentStatus!]
  statusNotIn: [InternalPolicyDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  policy_type field predicates
  """
  policyType: String
  policyTypeNEQ: String
  policyTypeIn: [String!]
  policyTypeNotIn: [String!]
  policyTypeGT: String
  policyTypeGTE: String
  policyTypeLT: String
  policyTypeLTE: String
  policyTypeContains: String
  policyTypeHasPrefix: String
  policyTypeHasSuffix: String
  policyTypeIsNil: Boolean
  policyTypeNotNil: Boolean
  policyTypeEqualFold: String
  policyTypeContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  approval_required field predicates
  """
  approvalRequired: Boolean
  approvalRequiredNEQ: Boolean
  approvalRequiredIsNil: Boolean
  approvalRequiredNotNil: Boolean
  """
  review_due field predicates
  """
  reviewDue: Time
  reviewDueNEQ: Time
  reviewDueIn: [Time!]
  reviewDueNotIn: [Time!]
  reviewDueGT: Time
  reviewDueGTE: Time
  reviewDueLT: Time
  reviewDueLTE: Time
  reviewDueIsNil: Boolean
  reviewDueNotNil: Boolean
  """
  review_frequency field predicates
  """
  reviewFrequency: InternalPolicyFrequency
  reviewFrequencyNEQ: InternalPolicyFrequency
  reviewFrequencyIn: [InternalPolicyFrequency!]
  reviewFrequencyNotIn: [InternalPolicyFrequency!]
  reviewFrequencyIsNil: Boolean
  reviewFrequencyNotNil: Boolean
  """
  approver_id field predicates
  """
  approverID: ID
  approverIDNEQ: ID
  approverIDIn: [ID!]
  approverIDNotIn: [ID!]
  approverIDGT: ID
  approverIDGTE: ID
  approverIDLT: ID
  approverIDLTE: ID
  approverIDContains: ID
  approverIDHasPrefix: ID
  approverIDHasSuffix: ID
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: ID
  approverIDContainsFold: ID
  """
  delegate_id field predicates
  """
  delegateID: ID
  delegateIDNEQ: ID
  delegateIDIn: [ID!]
  delegateIDNotIn: [ID!]
  delegateIDGT: ID
  delegateIDGTE: ID
  delegateIDLT: ID
  delegateIDLTE: ID
  delegateIDContains: ID
  delegateIDHasPrefix: ID
  delegateIDHasSuffix: ID
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: ID
  delegateIDContainsFold: ID
  """
  file_id field predicates
  """
  fileID: ID
  fileIDNEQ: ID
  fileIDIn: [ID!]
  fileIDNotIn: [ID!]
  fileIDGT: ID
  fileIDGTE: ID
  fileIDLT: ID
  fileIDLTE: ID
  fileIDContains: ID
  fileIDHasPrefix: ID
  fileIDHasSuffix: ID
  fileIDIsNil: Boolean
  fileIDNotNil: Boolean
  fileIDEqualFold: ID
  fileIDContainsFold: ID
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  approver edge predicates
  """
  hasApprover: Boolean
  hasApproverWith: [GroupWhereInput!]
  """
  delegate edge predicates
  """
  hasDelegate: Boolean
  hasDelegateWith: [GroupWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  control_implementations edge predicates
  """
  hasControlImplementations: Boolean
  hasControlImplementationsWith: [ControlImplementationWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  file edge predicates
  """
  hasFile: Boolean
  hasFileWith: [FileWhereInput!]
}
type Invite implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the expiration date of the invitation token which defaults to 14 days in the future from creation
  """
  expires: Time
  """
  the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization
  """
  recipient: String!
  """
  the status of the invitation
  """
  status: InviteInviteStatus!
  role: InviteRole!
  """
  the number of attempts made to perform email send of the invitation, maximum of 5
  """
  sendAttempts: Int!
  """
  the user who initiated the invitation
  """
  requestorID: String
  owner: Organization
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
}
"""
A connection to a list of items.
"""
type InviteConnection {
  """
  A list of edges.
  """
  edges: [InviteEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type InviteEdge {
  """
  The item at the end of the edge.
  """
  node: Invite
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
InviteInviteStatus is enum for the field status
"""
enum InviteInviteStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.InviteStatus") {
  INVITATION_SENT
  APPROVAL_REQUIRED
  INVITATION_ACCEPTED
  INVITATION_EXPIRED
}
"""
Ordering options for Invite connections
"""
input InviteOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Invites.
  """
  field: InviteOrderField!
}
"""
Properties by which Invite connections can be ordered.
"""
enum InviteOrderField {
  created_at
  updated_at
  expires
  STATUS
  send_attempts
}
"""
InviteRole is enum for the field role
"""
enum InviteRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
InviteWhereInput is used for filtering Invite objects.
Input was generated by ent.
"""
input InviteWhereInput {
  not: InviteWhereInput
  and: [InviteWhereInput!]
  or: [InviteWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  expires field predicates
  """
  expires: Time
  expiresNEQ: Time
  expiresIn: [Time!]
  expiresNotIn: [Time!]
  expiresGT: Time
  expiresGTE: Time
  expiresLT: Time
  expiresLTE: Time
  expiresIsNil: Boolean
  expiresNotNil: Boolean
  """
  recipient field predicates
  """
  recipient: String
  recipientNEQ: String
  recipientIn: [String!]
  recipientNotIn: [String!]
  recipientGT: String
  recipientGTE: String
  recipientLT: String
  recipientLTE: String
  recipientContains: String
  recipientHasPrefix: String
  recipientHasSuffix: String
  recipientEqualFold: String
  recipientContainsFold: String
  """
  status field predicates
  """
  status: InviteInviteStatus
  statusNEQ: InviteInviteStatus
  statusIn: [InviteInviteStatus!]
  statusNotIn: [InviteInviteStatus!]
  """
  role field predicates
  """
  role: InviteRole
  roleNEQ: InviteRole
  roleIn: [InviteRole!]
  roleNotIn: [InviteRole!]
  """
  send_attempts field predicates
  """
  sendAttempts: Int
  sendAttemptsNEQ: Int
  sendAttemptsIn: [Int!]
  sendAttemptsNotIn: [Int!]
  sendAttemptsGT: Int
  sendAttemptsGTE: Int
  sendAttemptsLT: Int
  sendAttemptsLTE: Int
  """
  requestor_id field predicates
  """
  requestorID: String
  requestorIDNEQ: String
  requestorIDIn: [String!]
  requestorIDNotIn: [String!]
  requestorIDGT: String
  requestorIDGTE: String
  requestorIDLT: String
  requestorIDLTE: String
  requestorIDContains: String
  requestorIDHasPrefix: String
  requestorIDHasSuffix: String
  requestorIDIsNil: Boolean
  requestorIDNotNil: Boolean
  requestorIDEqualFold: String
  requestorIDContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
}
"""
A valid JSON string.
"""
scalar JSON
type JobResult implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the job this result belongs to
  """
  scheduledJobID: ID!
  """
  the status of this job. did it fail? did it succeed?
  """
  status: JobResultJobExecutionStatus!
  """
  the exit code from the script that was executed
  """
  exitCode: Int!
  """
  The time the job finished it's execution. This is different from the db insertion time
  """
  finishedAt: Time!
  """
  The time the job started it's execution. This is different from the db insertion time
  """
  startedAt: Time!
  fileID: ID!
  """
  the log output from the job
  """
  log: String
  owner: Organization
  scheduledJob: ScheduledJob!
  file: File!
}
"""
A connection to a list of items.
"""
type JobResultConnection {
  """
  A list of edges.
  """
  edges: [JobResultEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JobResultEdge {
  """
  The item at the end of the edge.
  """
  node: JobResult
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
JobResultJobExecutionStatus is enum for the field status
"""
enum JobResultJobExecutionStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.JobExecutionStatus") {
  CANCELED
  SUCCESS
  PENDING
  FAILED
}
"""
Ordering options for JobResult connections
"""
input JobResultOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order JobResults.
  """
  field: JobResultOrderField!
}
"""
Properties by which JobResult connections can be ordered.
"""
enum JobResultOrderField {
  created_at
  updated_at
  STATUS
  exit_code
  finished_at
  started_at
}
"""
JobResultWhereInput is used for filtering JobResult objects.
Input was generated by ent.
"""
input JobResultWhereInput {
  not: JobResultWhereInput
  and: [JobResultWhereInput!]
  or: [JobResultWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  scheduled_job_id field predicates
  """
  scheduledJobID: ID
  scheduledJobIDNEQ: ID
  scheduledJobIDIn: [ID!]
  scheduledJobIDNotIn: [ID!]
  scheduledJobIDGT: ID
  scheduledJobIDGTE: ID
  scheduledJobIDLT: ID
  scheduledJobIDLTE: ID
  scheduledJobIDContains: ID
  scheduledJobIDHasPrefix: ID
  scheduledJobIDHasSuffix: ID
  scheduledJobIDEqualFold: ID
  scheduledJobIDContainsFold: ID
  """
  status field predicates
  """
  status: JobResultJobExecutionStatus
  statusNEQ: JobResultJobExecutionStatus
  statusIn: [JobResultJobExecutionStatus!]
  statusNotIn: [JobResultJobExecutionStatus!]
  """
  exit_code field predicates
  """
  exitCode: Int
  exitCodeNEQ: Int
  exitCodeIn: [Int!]
  exitCodeNotIn: [Int!]
  exitCodeGT: Int
  exitCodeGTE: Int
  exitCodeLT: Int
  exitCodeLTE: Int
  """
  finished_at field predicates
  """
  finishedAt: Time
  finishedAtNEQ: Time
  finishedAtIn: [Time!]
  finishedAtNotIn: [Time!]
  finishedAtGT: Time
  finishedAtGTE: Time
  finishedAtLT: Time
  finishedAtLTE: Time
  """
  started_at field predicates
  """
  startedAt: Time
  startedAtNEQ: Time
  startedAtIn: [Time!]
  startedAtNotIn: [Time!]
  startedAtGT: Time
  startedAtGTE: Time
  startedAtLT: Time
  startedAtLTE: Time
  """
  file_id field predicates
  """
  fileID: ID
  fileIDNEQ: ID
  fileIDIn: [ID!]
  fileIDNotIn: [ID!]
  fileIDGT: ID
  fileIDGTE: ID
  fileIDLT: ID
  fileIDLTE: ID
  fileIDContains: ID
  fileIDHasPrefix: ID
  fileIDHasSuffix: ID
  fileIDEqualFold: ID
  fileIDContainsFold: ID
  """
  log field predicates
  """
  log: String
  logNEQ: String
  logIn: [String!]
  logNotIn: [String!]
  logGT: String
  logGTE: String
  logLT: String
  logLTE: String
  logContains: String
  logHasPrefix: String
  logHasSuffix: String
  logIsNil: Boolean
  logNotNil: Boolean
  logEqualFold: String
  logContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  scheduled_job edge predicates
  """
  hasScheduledJob: Boolean
  hasScheduledJobWith: [ScheduledJobWhereInput!]
  """
  file edge predicates
  """
  hasFile: Boolean
  hasFileWith: [FileWhereInput!]
}
type JobRunner implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  indicates if the record is owned by the the openlane system and not by an organization
  """
  systemOwned: Boolean
  """
  the name of the runner
  """
  name: String!
  """
  the status of this runner
  """
  status: JobRunnerJobRunnerStatus!
  """
  the IP address of this runner
  """
  ipAddress: String
  """
  the last time this runner was seen
  """
  lastSeen: Time
  """
  the version of the runner
  """
  version: String
  """
  the operating system of the runner
  """
  os: String
  owner: Organization
  jobRunnerTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunnerTokens returned from the connection.
    """
    orderBy: [JobRunnerTokenOrder!]

    """
    Filtering options for JobRunnerTokens returned from the connection.
    """
    where: JobRunnerTokenWhereInput
  ): JobRunnerTokenConnection!
}
"""
A connection to a list of items.
"""
type JobRunnerConnection {
  """
  A list of edges.
  """
  edges: [JobRunnerEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JobRunnerEdge {
  """
  The item at the end of the edge.
  """
  node: JobRunner
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
JobRunnerJobRunnerStatus is enum for the field status
"""
enum JobRunnerJobRunnerStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.JobRunnerStatus") {
  ONLINE
  OFFLINE
}
"""
Ordering options for JobRunner connections
"""
input JobRunnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order JobRunners.
  """
  field: JobRunnerOrderField!
}
"""
Properties by which JobRunner connections can be ordered.
"""
enum JobRunnerOrderField {
  created_at
  updated_at
  name
}
type JobRunnerRegistrationToken implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  token: String!
  """
  when the token expires
  """
  expiresAt: Time!
  lastUsedAt: Time
  """
  the ID of the runner this token was used to register
  """
  jobRunnerID: ID
  owner: Organization
  jobRunner: JobRunner
}
"""
A connection to a list of items.
"""
type JobRunnerRegistrationTokenConnection {
  """
  A list of edges.
  """
  edges: [JobRunnerRegistrationTokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JobRunnerRegistrationTokenEdge {
  """
  The item at the end of the edge.
  """
  node: JobRunnerRegistrationToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for JobRunnerRegistrationToken connections
"""
input JobRunnerRegistrationTokenOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order JobRunnerRegistrationTokens.
  """
  field: JobRunnerRegistrationTokenOrderField!
}
"""
Properties by which JobRunnerRegistrationToken connections can be ordered.
"""
enum JobRunnerRegistrationTokenOrderField {
  created_at
  updated_at
  last_used_at
}
"""
JobRunnerRegistrationTokenWhereInput is used for filtering JobRunnerRegistrationToken objects.
Input was generated by ent.
"""
input JobRunnerRegistrationTokenWhereInput {
  not: JobRunnerRegistrationTokenWhereInput
  and: [JobRunnerRegistrationTokenWhereInput!]
  or: [JobRunnerRegistrationTokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  job_runner_id field predicates
  """
  jobRunnerID: ID
  jobRunnerIDNEQ: ID
  jobRunnerIDIn: [ID!]
  jobRunnerIDNotIn: [ID!]
  jobRunnerIDGT: ID
  jobRunnerIDGTE: ID
  jobRunnerIDLT: ID
  jobRunnerIDLTE: ID
  jobRunnerIDContains: ID
  jobRunnerIDHasPrefix: ID
  jobRunnerIDHasSuffix: ID
  jobRunnerIDIsNil: Boolean
  jobRunnerIDNotNil: Boolean
  jobRunnerIDEqualFold: ID
  jobRunnerIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  job_runner edge predicates
  """
  hasJobRunner: Boolean
  hasJobRunnerWith: [JobRunnerWhereInput!]
}
type JobRunnerToken implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  token: String!
  """
  when the token expires
  """
  expiresAt: Time
  lastUsedAt: Time
  """
  whether the token is active
  """
  isActive: Boolean
  """
  the reason the token was revoked
  """
  revokedReason: String
  """
  the user who revoked the token
  """
  revokedBy: String
  """
  when the token was revoked
  """
  revokedAt: Time
  owner: Organization
  jobRunners(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunners returned from the connection.
    """
    orderBy: [JobRunnerOrder!]

    """
    Filtering options for JobRunners returned from the connection.
    """
    where: JobRunnerWhereInput
  ): JobRunnerConnection!
}
"""
A connection to a list of items.
"""
type JobRunnerTokenConnection {
  """
  A list of edges.
  """
  edges: [JobRunnerTokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JobRunnerTokenEdge {
  """
  The item at the end of the edge.
  """
  node: JobRunnerToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for JobRunnerToken connections
"""
input JobRunnerTokenOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order JobRunnerTokens.
  """
  field: JobRunnerTokenOrderField!
}
"""
Properties by which JobRunnerToken connections can be ordered.
"""
enum JobRunnerTokenOrderField {
  created_at
  updated_at
  expires_at
  last_used_at
}
"""
JobRunnerTokenWhereInput is used for filtering JobRunnerToken objects.
Input was generated by ent.
"""
input JobRunnerTokenWhereInput {
  not: JobRunnerTokenWhereInput
  and: [JobRunnerTokenWhereInput!]
  or: [JobRunnerTokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  is_active field predicates
  """
  isActive: Boolean
  isActiveNEQ: Boolean
  isActiveIsNil: Boolean
  isActiveNotNil: Boolean
  """
  revoked_reason field predicates
  """
  revokedReason: String
  revokedReasonNEQ: String
  revokedReasonIn: [String!]
  revokedReasonNotIn: [String!]
  revokedReasonGT: String
  revokedReasonGTE: String
  revokedReasonLT: String
  revokedReasonLTE: String
  revokedReasonContains: String
  revokedReasonHasPrefix: String
  revokedReasonHasSuffix: String
  revokedReasonIsNil: Boolean
  revokedReasonNotNil: Boolean
  revokedReasonEqualFold: String
  revokedReasonContainsFold: String
  """
  revoked_by field predicates
  """
  revokedBy: String
  revokedByNEQ: String
  revokedByIn: [String!]
  revokedByNotIn: [String!]
  revokedByGT: String
  revokedByGTE: String
  revokedByLT: String
  revokedByLTE: String
  revokedByContains: String
  revokedByHasPrefix: String
  revokedByHasSuffix: String
  revokedByIsNil: Boolean
  revokedByNotNil: Boolean
  revokedByEqualFold: String
  revokedByContainsFold: String
  """
  revoked_at field predicates
  """
  revokedAt: Time
  revokedAtNEQ: Time
  revokedAtIn: [Time!]
  revokedAtNotIn: [Time!]
  revokedAtGT: Time
  revokedAtGTE: Time
  revokedAtLT: Time
  revokedAtLTE: Time
  revokedAtIsNil: Boolean
  revokedAtNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  job_runners edge predicates
  """
  hasJobRunners: Boolean
  hasJobRunnersWith: [JobRunnerWhereInput!]
}
"""
JobRunnerWhereInput is used for filtering JobRunner objects.
Input was generated by ent.
"""
input JobRunnerWhereInput {
  not: JobRunnerWhereInput
  and: [JobRunnerWhereInput!]
  or: [JobRunnerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  system_owned field predicates
  """
  systemOwned: Boolean
  systemOwnedNEQ: Boolean
  systemOwnedIsNil: Boolean
  systemOwnedNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: JobRunnerJobRunnerStatus
  statusNEQ: JobRunnerJobRunnerStatus
  statusIn: [JobRunnerJobRunnerStatus!]
  statusNotIn: [JobRunnerJobRunnerStatus!]
  """
  ip_address field predicates
  """
  ipAddress: String
  ipAddressNEQ: String
  ipAddressIn: [String!]
  ipAddressNotIn: [String!]
  ipAddressGT: String
  ipAddressGTE: String
  ipAddressLT: String
  ipAddressLTE: String
  ipAddressContains: String
  ipAddressHasPrefix: String
  ipAddressHasSuffix: String
  ipAddressIsNil: Boolean
  ipAddressNotNil: Boolean
  ipAddressEqualFold: String
  ipAddressContainsFold: String
  """
  last_seen field predicates
  """
  lastSeen: Time
  lastSeenNEQ: Time
  lastSeenIn: [Time!]
  lastSeenNotIn: [Time!]
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenIsNil: Boolean
  lastSeenNotNil: Boolean
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  os field predicates
  """
  os: String
  osNEQ: String
  osIn: [String!]
  osNotIn: [String!]
  osGT: String
  osGTE: String
  osLT: String
  osLTE: String
  osContains: String
  osHasPrefix: String
  osHasSuffix: String
  osIsNil: Boolean
  osNotNil: Boolean
  osEqualFold: String
  osContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  job_runner_tokens edge predicates
  """
  hasJobRunnerTokens: Boolean
  hasJobRunnerTokensWith: [JobRunnerTokenWhereInput!]
}
type JobTemplate implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  indicates if the record is owned by the the openlane system and not by an organization
  """
  systemOwned: Boolean
  """
  the title of the job
  """
  title: String!
  """
  the short description of the job and what it does
  """
  description: String
  """
  the platform to use to execute this job, e.g. golang, typescript, python, etc.
  """
  platform: JobTemplateJobPlatformType!
  """
  the url from where to download the script from
  """
  downloadURL: String!
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  """
  cron schedule to run the job in cron 6-field syntax, e.g. 0 0 0 * * *
  """
  cron: String
  owner: Organization
  scheduledJobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobs returned from the connection.
    """
    orderBy: [ScheduledJobOrder!]

    """
    Filtering options for ScheduledJobs returned from the connection.
    """
    where: ScheduledJobWhereInput
  ): ScheduledJobConnection!
}
"""
A connection to a list of items.
"""
type JobTemplateConnection {
  """
  A list of edges.
  """
  edges: [JobTemplateEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JobTemplateEdge {
  """
  The item at the end of the edge.
  """
  node: JobTemplate
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type JobTemplateHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: JobTemplateHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  indicates if the record is owned by the the openlane system and not by an organization
  """
  systemOwned: Boolean
  """
  the title of the job
  """
  title: String!
  """
  the short description of the job and what it does
  """
  description: String
  """
  the platform to use to execute this job, e.g. golang, typescript, python, etc.
  """
  platform: JobTemplateHistoryJobPlatformType!
  """
  the url from where to download the script from
  """
  downloadURL: String!
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  """
  cron schedule to run the job in cron 6-field syntax, e.g. 0 0 0 * * *
  """
  cron: String
}
"""
A connection to a list of items.
"""
type JobTemplateHistoryConnection {
  """
  A list of edges.
  """
  edges: [JobTemplateHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JobTemplateHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: JobTemplateHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
JobTemplateHistoryJobPlatformType is enum for the field platform
"""
enum JobTemplateHistoryJobPlatformType @goModel(model: "github.com/theopenlane/core/pkg/enums.JobPlatformType") {
  GO
  TS
}
"""
JobTemplateHistoryOpType is enum for the field operation
"""
enum JobTemplateHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for JobTemplateHistory connections
"""
input JobTemplateHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order JobTemplateHistories.
  """
  field: JobTemplateHistoryOrderField!
}
"""
Properties by which JobTemplateHistory connections can be ordered.
"""
enum JobTemplateHistoryOrderField {
  history_time
  created_at
  updated_at
  title
  PLATFORM
}
"""
JobTemplateHistoryWhereInput is used for filtering JobTemplateHistory objects.
Input was generated by ent.
"""
input JobTemplateHistoryWhereInput {
  not: JobTemplateHistoryWhereInput
  and: [JobTemplateHistoryWhereInput!]
  or: [JobTemplateHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: JobTemplateHistoryOpType
  operationNEQ: JobTemplateHistoryOpType
  operationIn: [JobTemplateHistoryOpType!]
  operationNotIn: [JobTemplateHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  system_owned field predicates
  """
  systemOwned: Boolean
  systemOwnedNEQ: Boolean
  systemOwnedIsNil: Boolean
  systemOwnedNotNil: Boolean
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  platform field predicates
  """
  platform: JobTemplateHistoryJobPlatformType
  platformNEQ: JobTemplateHistoryJobPlatformType
  platformIn: [JobTemplateHistoryJobPlatformType!]
  platformNotIn: [JobTemplateHistoryJobPlatformType!]
}
"""
JobTemplateJobPlatformType is enum for the field platform
"""
enum JobTemplateJobPlatformType @goModel(model: "github.com/theopenlane/core/pkg/enums.JobPlatformType") {
  GO
  TS
}
"""
Ordering options for JobTemplate connections
"""
input JobTemplateOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order JobTemplates.
  """
  field: JobTemplateOrderField!
}
"""
Properties by which JobTemplate connections can be ordered.
"""
enum JobTemplateOrderField {
  created_at
  updated_at
  title
  PLATFORM
}
"""
JobTemplateWhereInput is used for filtering JobTemplate objects.
Input was generated by ent.
"""
input JobTemplateWhereInput {
  not: JobTemplateWhereInput
  and: [JobTemplateWhereInput!]
  or: [JobTemplateWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  system_owned field predicates
  """
  systemOwned: Boolean
  systemOwnedNEQ: Boolean
  systemOwnedIsNil: Boolean
  systemOwnedNotNil: Boolean
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  platform field predicates
  """
  platform: JobTemplateJobPlatformType
  platformNEQ: JobTemplateJobPlatformType
  platformIn: [JobTemplateJobPlatformType!]
  platformNotIn: [JobTemplateJobPlatformType!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  scheduled_jobs edge predicates
  """
  hasScheduledJobs: Boolean
  hasScheduledJobsWith: [ScheduledJobWhereInput!]
}
"""
The builtin Map type
"""
scalar Map
type MappableDomain implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  Name of the mappable domain
  """
  name: String!
  """
  DNS Zone ID of the mappable domain.
  """
  zoneID: String!
  customDomains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CustomDomains returned from the connection.
    """
    orderBy: [CustomDomainOrder!]

    """
    Filtering options for CustomDomains returned from the connection.
    """
    where: CustomDomainWhereInput
  ): CustomDomainConnection!
}
"""
A connection to a list of items.
"""
type MappableDomainConnection {
  """
  A list of edges.
  """
  edges: [MappableDomainEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MappableDomainEdge {
  """
  The item at the end of the edge.
  """
  node: MappableDomain
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type MappableDomainHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: MappableDomainHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  Name of the mappable domain
  """
  name: String!
  """
  DNS Zone ID of the mappable domain.
  """
  zoneID: String!
}
"""
A connection to a list of items.
"""
type MappableDomainHistoryConnection {
  """
  A list of edges.
  """
  edges: [MappableDomainHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MappableDomainHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: MappableDomainHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
MappableDomainHistoryOpType is enum for the field operation
"""
enum MappableDomainHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for MappableDomainHistory connections
"""
input MappableDomainHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MappableDomainHistories.
  """
  field: MappableDomainHistoryOrderField!
}
"""
Properties by which MappableDomainHistory connections can be ordered.
"""
enum MappableDomainHistoryOrderField {
  history_time
  created_at
  updated_at
  name
}
"""
MappableDomainHistoryWhereInput is used for filtering MappableDomainHistory objects.
Input was generated by ent.
"""
input MappableDomainHistoryWhereInput {
  not: MappableDomainHistoryWhereInput
  and: [MappableDomainHistoryWhereInput!]
  or: [MappableDomainHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: MappableDomainHistoryOpType
  operationNEQ: MappableDomainHistoryOpType
  operationIn: [MappableDomainHistoryOpType!]
  operationNotIn: [MappableDomainHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  zone_id field predicates
  """
  zoneID: String
  zoneIDNEQ: String
  zoneIDIn: [String!]
  zoneIDNotIn: [String!]
  zoneIDGT: String
  zoneIDGTE: String
  zoneIDLT: String
  zoneIDLTE: String
  zoneIDContains: String
  zoneIDHasPrefix: String
  zoneIDHasSuffix: String
  zoneIDEqualFold: String
  zoneIDContainsFold: String
}
"""
Ordering options for MappableDomain connections
"""
input MappableDomainOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MappableDomains.
  """
  field: MappableDomainOrderField!
}
"""
Properties by which MappableDomain connections can be ordered.
"""
enum MappableDomainOrderField {
  created_at
  updated_at
  name
}
"""
MappableDomainWhereInput is used for filtering MappableDomain objects.
Input was generated by ent.
"""
input MappableDomainWhereInput {
  not: MappableDomainWhereInput
  and: [MappableDomainWhereInput!]
  or: [MappableDomainWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  zone_id field predicates
  """
  zoneID: String
  zoneIDNEQ: String
  zoneIDIn: [String!]
  zoneIDNotIn: [String!]
  zoneIDGT: String
  zoneIDGTE: String
  zoneIDLT: String
  zoneIDLTE: String
  zoneIDContains: String
  zoneIDHasPrefix: String
  zoneIDHasSuffix: String
  zoneIDEqualFold: String
  zoneIDContainsFold: String
  """
  custom_domains edge predicates
  """
  hasCustomDomains: Boolean
  hasCustomDomainsWith: [CustomDomainWhereInput!]
}
type MappedControl implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the type of mapping between the two controls, e.g. subset, intersect, equal, superset
  """
  mappingType: MappedControlMappingType!
  """
  description of how the two controls are related
  """
  relation: String
  """
  percentage (0-100) of confidence in the mapping
  """
  confidence: Int
  """
  source of the mapping, e.g. manual, suggested, etc.
  """
  source: MappedControlMappingSource
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  fromControls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  toControls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  fromSubcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  toSubcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
}
"""
A connection to a list of items.
"""
type MappedControlConnection {
  """
  A list of edges.
  """
  edges: [MappedControlEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MappedControlEdge {
  """
  The item at the end of the edge.
  """
  node: MappedControl
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type MappedControlHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: MappedControlHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the type of mapping between the two controls, e.g. subset, intersect, equal, superset
  """
  mappingType: MappedControlHistoryMappingType!
  """
  description of how the two controls are related
  """
  relation: String
  """
  percentage (0-100) of confidence in the mapping
  """
  confidence: Int
  """
  source of the mapping, e.g. manual, suggested, etc.
  """
  source: MappedControlHistoryMappingSource
}
"""
A connection to a list of items.
"""
type MappedControlHistoryConnection {
  """
  A list of edges.
  """
  edges: [MappedControlHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MappedControlHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: MappedControlHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
MappedControlHistoryMappingSource is enum for the field source
"""
enum MappedControlHistoryMappingSource @goModel(model: "github.com/theopenlane/core/pkg/enums.MappingSource") {
  MANUAL
  SUGGESTED
  IMPORTED
}
"""
MappedControlHistoryMappingType is enum for the field mapping_type
"""
enum MappedControlHistoryMappingType @goModel(model: "github.com/theopenlane/core/pkg/enums.MappingType") {
  EQUAL
  SUPERSET
  SUBSET
  INTERSECT
  PARTIAL
}
"""
MappedControlHistoryOpType is enum for the field operation
"""
enum MappedControlHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for MappedControlHistory connections
"""
input MappedControlHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MappedControlHistories.
  """
  field: MappedControlHistoryOrderField!
}
"""
Properties by which MappedControlHistory connections can be ordered.
"""
enum MappedControlHistoryOrderField {
  history_time
  created_at
  updated_at
  MAPPING_TYPE
  SOURCE
}
"""
MappedControlHistoryWhereInput is used for filtering MappedControlHistory objects.
Input was generated by ent.
"""
input MappedControlHistoryWhereInput {
  not: MappedControlHistoryWhereInput
  and: [MappedControlHistoryWhereInput!]
  or: [MappedControlHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: MappedControlHistoryOpType
  operationNEQ: MappedControlHistoryOpType
  operationIn: [MappedControlHistoryOpType!]
  operationNotIn: [MappedControlHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  mapping_type field predicates
  """
  mappingType: MappedControlHistoryMappingType
  mappingTypeNEQ: MappedControlHistoryMappingType
  mappingTypeIn: [MappedControlHistoryMappingType!]
  mappingTypeNotIn: [MappedControlHistoryMappingType!]
  """
  relation field predicates
  """
  relation: String
  relationNEQ: String
  relationIn: [String!]
  relationNotIn: [String!]
  relationGT: String
  relationGTE: String
  relationLT: String
  relationLTE: String
  relationContains: String
  relationHasPrefix: String
  relationHasSuffix: String
  relationIsNil: Boolean
  relationNotNil: Boolean
  relationEqualFold: String
  relationContainsFold: String
  """
  confidence field predicates
  """
  confidence: Int
  confidenceNEQ: Int
  confidenceIn: [Int!]
  confidenceNotIn: [Int!]
  confidenceGT: Int
  confidenceGTE: Int
  confidenceLT: Int
  confidenceLTE: Int
  confidenceIsNil: Boolean
  confidenceNotNil: Boolean
  """
  source field predicates
  """
  source: MappedControlHistoryMappingSource
  sourceNEQ: MappedControlHistoryMappingSource
  sourceIn: [MappedControlHistoryMappingSource!]
  sourceNotIn: [MappedControlHistoryMappingSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
}
"""
MappedControlMappingSource is enum for the field source
"""
enum MappedControlMappingSource @goModel(model: "github.com/theopenlane/core/pkg/enums.MappingSource") {
  MANUAL
  SUGGESTED
  IMPORTED
}
"""
MappedControlMappingType is enum for the field mapping_type
"""
enum MappedControlMappingType @goModel(model: "github.com/theopenlane/core/pkg/enums.MappingType") {
  EQUAL
  SUPERSET
  SUBSET
  INTERSECT
  PARTIAL
}
"""
Ordering options for MappedControl connections
"""
input MappedControlOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MappedControls.
  """
  field: MappedControlOrderField!
}
"""
Properties by which MappedControl connections can be ordered.
"""
enum MappedControlOrderField {
  created_at
  updated_at
  MAPPING_TYPE
  SOURCE
}
"""
MappedControlWhereInput is used for filtering MappedControl objects.
Input was generated by ent.
"""
input MappedControlWhereInput {
  not: MappedControlWhereInput
  and: [MappedControlWhereInput!]
  or: [MappedControlWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  mapping_type field predicates
  """
  mappingType: MappedControlMappingType
  mappingTypeNEQ: MappedControlMappingType
  mappingTypeIn: [MappedControlMappingType!]
  mappingTypeNotIn: [MappedControlMappingType!]
  """
  relation field predicates
  """
  relation: String
  relationNEQ: String
  relationIn: [String!]
  relationNotIn: [String!]
  relationGT: String
  relationGTE: String
  relationLT: String
  relationLTE: String
  relationContains: String
  relationHasPrefix: String
  relationHasSuffix: String
  relationIsNil: Boolean
  relationNotNil: Boolean
  relationEqualFold: String
  relationContainsFold: String
  """
  confidence field predicates
  """
  confidence: Int
  confidenceNEQ: Int
  confidenceIn: [Int!]
  confidenceNotIn: [Int!]
  confidenceGT: Int
  confidenceGTE: Int
  confidenceLT: Int
  confidenceLTE: Int
  confidenceIsNil: Boolean
  confidenceNotNil: Boolean
  """
  source field predicates
  """
  source: MappedControlMappingSource
  sourceNEQ: MappedControlMappingSource
  sourceIn: [MappedControlMappingSource!]
  sourceNotIn: [MappedControlMappingSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  from_controls edge predicates
  """
  hasFromControls: Boolean
  hasFromControlsWith: [ControlWhereInput!]
  """
  to_controls edge predicates
  """
  hasToControls: Boolean
  hasToControlsWith: [ControlWhereInput!]
  """
  from_subcontrols edge predicates
  """
  hasFromSubcontrols: Boolean
  hasFromSubcontrolsWith: [SubcontrolWhereInput!]
  """
  to_subcontrols edge predicates
  """
  hasToSubcontrols: Boolean
  hasToSubcontrolsWith: [SubcontrolWhereInput!]
}
type Narrative implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the name of the narrative
  """
  name: String!
  """
  the description of the narrative
  """
  description: String
  """
  text data for the narrative document
  """
  details: String
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  satisfies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
}
"""
A connection to a list of items.
"""
type NarrativeConnection {
  """
  A list of edges.
  """
  edges: [NarrativeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NarrativeEdge {
  """
  The item at the end of the edge.
  """
  node: Narrative
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type NarrativeHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: NarrativeHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the name of the narrative
  """
  name: String!
  """
  the description of the narrative
  """
  description: String
  """
  text data for the narrative document
  """
  details: String
}
"""
A connection to a list of items.
"""
type NarrativeHistoryConnection {
  """
  A list of edges.
  """
  edges: [NarrativeHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NarrativeHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: NarrativeHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
NarrativeHistoryOpType is enum for the field operation
"""
enum NarrativeHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for NarrativeHistory connections
"""
input NarrativeHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order NarrativeHistories.
  """
  field: NarrativeHistoryOrderField!
}
"""
Properties by which NarrativeHistory connections can be ordered.
"""
enum NarrativeHistoryOrderField {
  history_time
  created_at
  updated_at
  name
}
"""
NarrativeHistoryWhereInput is used for filtering NarrativeHistory objects.
Input was generated by ent.
"""
input NarrativeHistoryWhereInput {
  not: NarrativeHistoryWhereInput
  and: [NarrativeHistoryWhereInput!]
  or: [NarrativeHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: NarrativeHistoryOpType
  operationNEQ: NarrativeHistoryOpType
  operationIn: [NarrativeHistoryOpType!]
  operationNotIn: [NarrativeHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
}
"""
Ordering options for Narrative connections
"""
input NarrativeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Narratives.
  """
  field: NarrativeOrderField!
}
"""
Properties by which Narrative connections can be ordered.
"""
enum NarrativeOrderField {
  created_at
  updated_at
  name
}
"""
NarrativeWhereInput is used for filtering Narrative objects.
Input was generated by ent.
"""
input NarrativeWhereInput {
  not: NarrativeWhereInput
  and: [NarrativeWhereInput!]
  or: [NarrativeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  satisfies edge predicates
  """
  hasSatisfies: Boolean
  hasSatisfiesWith: [ControlWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/theopenlane/core/internal/ent/generated.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Note implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the text of the note
  """
  text: String!
  owner: Organization
  task: Task
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
A connection to a list of items.
"""
type NoteConnection {
  """
  A list of edges.
  """
  edges: [NoteEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NoteEdge {
  """
  The item at the end of the edge.
  """
  node: Note
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type NoteHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: NoteHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the text of the note
  """
  text: String!
}
"""
A connection to a list of items.
"""
type NoteHistoryConnection {
  """
  A list of edges.
  """
  edges: [NoteHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NoteHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: NoteHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
NoteHistoryOpType is enum for the field operation
"""
enum NoteHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for NoteHistory connections
"""
input NoteHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order NoteHistories.
  """
  field: NoteHistoryOrderField!
}
"""
Properties by which NoteHistory connections can be ordered.
"""
enum NoteHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
NoteHistoryWhereInput is used for filtering NoteHistory objects.
Input was generated by ent.
"""
input NoteHistoryWhereInput {
  not: NoteHistoryWhereInput
  and: [NoteHistoryWhereInput!]
  or: [NoteHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: NoteHistoryOpType
  operationNEQ: NoteHistoryOpType
  operationIn: [NoteHistoryOpType!]
  operationNotIn: [NoteHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
}
"""
Ordering options for Note connections
"""
input NoteOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Notes.
  """
  field: NoteOrderField!
}
"""
Properties by which Note connections can be ordered.
"""
enum NoteOrderField {
  created_at
  updated_at
}
"""
NoteWhereInput is used for filtering Note objects.
Input was generated by ent.
"""
input NoteWhereInput {
  not: NoteWhereInput
  and: [NoteWhereInput!]
  or: [NoteWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  task edge predicates
  """
  hasTask: Boolean
  hasTaskWith: [TaskWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
type Onboarding implements Node {
  id: ID!
  organizationID: ID
  """
  name of the company
  """
  companyName: String!
  """
  domains associated with the company
  """
  domains: [String!]
  """
  details given about the company during the onboarding process, including things such as company size, sector, etc
  """
  companyDetails: Map
  """
  details given about the user during the onboarding process, including things such as name, job title, department, etc
  """
  userDetails: Map
  """
  details given about the compliance requirements during the onboarding process, such as coming with existing policies, controls, risk assessments, etc
  """
  compliance: Map
  organization: Organization
}
"""
OnboardingWhereInput is used for filtering Onboarding objects.
Input was generated by ent.
"""
input OnboardingWhereInput {
  not: OnboardingWhereInput
  and: [OnboardingWhereInput!]
  or: [OnboardingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  organization_id field predicates
  """
  organizationID: ID
  organizationIDNEQ: ID
  organizationIDIn: [ID!]
  organizationIDNotIn: [ID!]
  organizationIDGT: ID
  organizationIDGTE: ID
  organizationIDLT: ID
  organizationIDLTE: ID
  organizationIDContains: ID
  organizationIDHasPrefix: ID
  organizationIDHasSuffix: ID
  organizationIDIsNil: Boolean
  organizationIDNotNil: Boolean
  organizationIDEqualFold: ID
  organizationIDContainsFold: ID
  """
  company_name field predicates
  """
  companyName: String
  companyNameNEQ: String
  companyNameIn: [String!]
  companyNameNotIn: [String!]
  companyNameGT: String
  companyNameGTE: String
  companyNameLT: String
  companyNameLTE: String
  companyNameContains: String
  companyNameHasPrefix: String
  companyNameHasSuffix: String
  companyNameEqualFold: String
  companyNameContainsFold: String
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
type OrgMembership implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  role: OrgMembershipRole!
  organizationID: ID!
  userID: ID!
  organization: Organization!
  user: User!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
}
"""
A connection to a list of items.
"""
type OrgMembershipConnection {
  """
  A list of edges.
  """
  edges: [OrgMembershipEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgMembershipEdge {
  """
  The item at the end of the edge.
  """
  node: OrgMembership
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrgMembershipHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrgMembershipHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  role: OrgMembershipHistoryRole!
  organizationID: String!
  userID: String!
}
"""
A connection to a list of items.
"""
type OrgMembershipHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrgMembershipHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgMembershipHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrgMembershipHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrgMembershipHistoryOpType is enum for the field operation
"""
enum OrgMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for OrgMembershipHistory connections
"""
input OrgMembershipHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgMembershipHistories.
  """
  field: OrgMembershipHistoryOrderField!
}
"""
Properties by which OrgMembershipHistory connections can be ordered.
"""
enum OrgMembershipHistoryOrderField {
  history_time
  created_at
  updated_at
  ROLE
}
"""
OrgMembershipHistoryRole is enum for the field role
"""
enum OrgMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  OWNER
}
"""
OrgMembershipHistoryWhereInput is used for filtering OrgMembershipHistory objects.
Input was generated by ent.
"""
input OrgMembershipHistoryWhereInput {
  not: OrgMembershipHistoryWhereInput
  and: [OrgMembershipHistoryWhereInput!]
  or: [OrgMembershipHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrgMembershipHistoryOpType
  operationNEQ: OrgMembershipHistoryOpType
  operationIn: [OrgMembershipHistoryOpType!]
  operationNotIn: [OrgMembershipHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  role field predicates
  """
  role: OrgMembershipHistoryRole
  roleNEQ: OrgMembershipHistoryRole
  roleIn: [OrgMembershipHistoryRole!]
  roleNotIn: [OrgMembershipHistoryRole!]
  """
  organization_id field predicates
  """
  organizationID: String
  organizationIDNEQ: String
  organizationIDIn: [String!]
  organizationIDNotIn: [String!]
  organizationIDGT: String
  organizationIDGTE: String
  organizationIDLT: String
  organizationIDLTE: String
  organizationIDContains: String
  organizationIDHasPrefix: String
  organizationIDHasSuffix: String
  organizationIDEqualFold: String
  organizationIDContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
}
"""
Ordering options for OrgMembership connections
"""
input OrgMembershipOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgMemberships.
  """
  field: OrgMembershipOrderField!
}
"""
Properties by which OrgMembership connections can be ordered.
"""
enum OrgMembershipOrderField {
  created_at
  updated_at
  ROLE
}
"""
OrgMembershipRole is enum for the field role
"""
enum OrgMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  OWNER
}
"""
OrgMembershipWhereInput is used for filtering OrgMembership objects.
Input was generated by ent.
"""
input OrgMembershipWhereInput {
  not: OrgMembershipWhereInput
  and: [OrgMembershipWhereInput!]
  or: [OrgMembershipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  role field predicates
  """
  role: OrgMembershipRole
  roleNEQ: OrgMembershipRole
  roleIn: [OrgMembershipRole!]
  roleNotIn: [OrgMembershipRole!]
}
type OrgSubscription implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the stripe subscription id
  """
  stripeSubscriptionID: String
  """
  the price of the product tier
  """
  productPrice: Price
  """
  the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
  """
  stripeSubscriptionStatus: String
  """
  indicates if the subscription is active
  """
  active: Boolean!
  """
  the time the subscription is set to expire; only populated if subscription is cancelled
  """
  expiresAt: Time
  """
  the time the trial is set to expire
  """
  trialExpiresAt: Time
  """
  number of days until there is a due payment
  """
  daysUntilDue: String
  """
  the features associated with the subscription
  """
  features: [String!]
  """
  the feature lookup keys associated with the subscription
  """
  featureLookupKeys: [String!]
  owner: Organization
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
}
"""
A connection to a list of items.
"""
type OrgSubscriptionConnection {
  """
  A list of edges.
  """
  edges: [OrgSubscriptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgSubscriptionEdge {
  """
  The item at the end of the edge.
  """
  node: OrgSubscription
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrgSubscriptionHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrgSubscriptionHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the stripe subscription id
  """
  stripeSubscriptionID: String
  """
  the price of the product tier
  """
  productPrice: Price
  """
  the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
  """
  stripeSubscriptionStatus: String
  """
  indicates if the subscription is active
  """
  active: Boolean!
  """
  the time the subscription is set to expire; only populated if subscription is cancelled
  """
  expiresAt: Time
  """
  the time the trial is set to expire
  """
  trialExpiresAt: Time
  """
  number of days until there is a due payment
  """
  daysUntilDue: String
  """
  the features associated with the subscription
  """
  features: [String!]
  """
  the feature lookup keys associated with the subscription
  """
  featureLookupKeys: [String!]
}
"""
A connection to a list of items.
"""
type OrgSubscriptionHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrgSubscriptionHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgSubscriptionHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrgSubscriptionHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrgSubscriptionHistoryOpType is enum for the field operation
"""
enum OrgSubscriptionHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for OrgSubscriptionHistory connections
"""
input OrgSubscriptionHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgSubscriptionHistories.
  """
  field: OrgSubscriptionHistoryOrderField!
}
"""
Properties by which OrgSubscriptionHistory connections can be ordered.
"""
enum OrgSubscriptionHistoryOrderField {
  history_time
  created_at
  updated_at
  stripe_subscription_status
  active
  expires_at
  trial_expires_at
  days_until_due
}
"""
OrgSubscriptionHistoryWhereInput is used for filtering OrgSubscriptionHistory objects.
Input was generated by ent.
"""
input OrgSubscriptionHistoryWhereInput {
  not: OrgSubscriptionHistoryWhereInput
  and: [OrgSubscriptionHistoryWhereInput!]
  or: [OrgSubscriptionHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrgSubscriptionHistoryOpType
  operationNEQ: OrgSubscriptionHistoryOpType
  operationIn: [OrgSubscriptionHistoryOpType!]
  operationNotIn: [OrgSubscriptionHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  stripe_subscription_id field predicates
  """
  stripeSubscriptionID: String
  stripeSubscriptionIDNEQ: String
  stripeSubscriptionIDIn: [String!]
  stripeSubscriptionIDNotIn: [String!]
  stripeSubscriptionIDGT: String
  stripeSubscriptionIDGTE: String
  stripeSubscriptionIDLT: String
  stripeSubscriptionIDLTE: String
  stripeSubscriptionIDContains: String
  stripeSubscriptionIDHasPrefix: String
  stripeSubscriptionIDHasSuffix: String
  stripeSubscriptionIDIsNil: Boolean
  stripeSubscriptionIDNotNil: Boolean
  stripeSubscriptionIDEqualFold: String
  stripeSubscriptionIDContainsFold: String
  """
  stripe_subscription_status field predicates
  """
  stripeSubscriptionStatus: String
  stripeSubscriptionStatusNEQ: String
  stripeSubscriptionStatusIn: [String!]
  stripeSubscriptionStatusNotIn: [String!]
  stripeSubscriptionStatusGT: String
  stripeSubscriptionStatusGTE: String
  stripeSubscriptionStatusLT: String
  stripeSubscriptionStatusLTE: String
  stripeSubscriptionStatusContains: String
  stripeSubscriptionStatusHasPrefix: String
  stripeSubscriptionStatusHasSuffix: String
  stripeSubscriptionStatusIsNil: Boolean
  stripeSubscriptionStatusNotNil: Boolean
  stripeSubscriptionStatusEqualFold: String
  stripeSubscriptionStatusContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  trial_expires_at field predicates
  """
  trialExpiresAt: Time
  trialExpiresAtNEQ: Time
  trialExpiresAtIn: [Time!]
  trialExpiresAtNotIn: [Time!]
  trialExpiresAtGT: Time
  trialExpiresAtGTE: Time
  trialExpiresAtLT: Time
  trialExpiresAtLTE: Time
  trialExpiresAtIsNil: Boolean
  trialExpiresAtNotNil: Boolean
  """
  days_until_due field predicates
  """
  daysUntilDue: String
  daysUntilDueNEQ: String
  daysUntilDueIn: [String!]
  daysUntilDueNotIn: [String!]
  daysUntilDueGT: String
  daysUntilDueGTE: String
  daysUntilDueLT: String
  daysUntilDueLTE: String
  daysUntilDueContains: String
  daysUntilDueHasPrefix: String
  daysUntilDueHasSuffix: String
  daysUntilDueIsNil: Boolean
  daysUntilDueNotNil: Boolean
  daysUntilDueEqualFold: String
  daysUntilDueContainsFold: String
}
"""
Ordering options for OrgSubscription connections
"""
input OrgSubscriptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgSubscriptions.
  """
  field: OrgSubscriptionOrderField!
}
"""
Properties by which OrgSubscription connections can be ordered.
"""
enum OrgSubscriptionOrderField {
  created_at
  updated_at
  stripe_subscription_status
  active
  expires_at
  trial_expires_at
  days_until_due
}
"""
OrgSubscriptionWhereInput is used for filtering OrgSubscription objects.
Input was generated by ent.
"""
input OrgSubscriptionWhereInput {
  not: OrgSubscriptionWhereInput
  and: [OrgSubscriptionWhereInput!]
  or: [OrgSubscriptionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  stripe_subscription_id field predicates
  """
  stripeSubscriptionID: String
  stripeSubscriptionIDNEQ: String
  stripeSubscriptionIDIn: [String!]
  stripeSubscriptionIDNotIn: [String!]
  stripeSubscriptionIDGT: String
  stripeSubscriptionIDGTE: String
  stripeSubscriptionIDLT: String
  stripeSubscriptionIDLTE: String
  stripeSubscriptionIDContains: String
  stripeSubscriptionIDHasPrefix: String
  stripeSubscriptionIDHasSuffix: String
  stripeSubscriptionIDIsNil: Boolean
  stripeSubscriptionIDNotNil: Boolean
  stripeSubscriptionIDEqualFold: String
  stripeSubscriptionIDContainsFold: String
  """
  stripe_subscription_status field predicates
  """
  stripeSubscriptionStatus: String
  stripeSubscriptionStatusNEQ: String
  stripeSubscriptionStatusIn: [String!]
  stripeSubscriptionStatusNotIn: [String!]
  stripeSubscriptionStatusGT: String
  stripeSubscriptionStatusGTE: String
  stripeSubscriptionStatusLT: String
  stripeSubscriptionStatusLTE: String
  stripeSubscriptionStatusContains: String
  stripeSubscriptionStatusHasPrefix: String
  stripeSubscriptionStatusHasSuffix: String
  stripeSubscriptionStatusIsNil: Boolean
  stripeSubscriptionStatusNotNil: Boolean
  stripeSubscriptionStatusEqualFold: String
  stripeSubscriptionStatusContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  trial_expires_at field predicates
  """
  trialExpiresAt: Time
  trialExpiresAtNEQ: Time
  trialExpiresAtIn: [Time!]
  trialExpiresAtNotIn: [Time!]
  trialExpiresAtGT: Time
  trialExpiresAtGTE: Time
  trialExpiresAtLT: Time
  trialExpiresAtLTE: Time
  trialExpiresAtIsNil: Boolean
  trialExpiresAtNotNil: Boolean
  """
  days_until_due field predicates
  """
  daysUntilDue: String
  daysUntilDueNEQ: String
  daysUntilDueIn: [String!]
  daysUntilDueNotIn: [String!]
  daysUntilDueGT: String
  daysUntilDueGTE: String
  daysUntilDueLT: String
  daysUntilDueLTE: String
  daysUntilDueContains: String
  daysUntilDueHasPrefix: String
  daysUntilDueHasSuffix: String
  daysUntilDueIsNil: Boolean
  daysUntilDueNotNil: Boolean
  daysUntilDueEqualFold: String
  daysUntilDueContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type Organization implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the organization
  """
  name: String!
  """
  The organization's displayed 'friendly' name
  """
  displayName: String!
  """
  An optional description of the organization
  """
  description: String
  """
  orgs directly associated with a user
  """
  personalOrg: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The organizations's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: ID
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  Whether the organization has a dedicated database
  """
  dedicatedDb: Boolean!
  """
  the stripe customer ID this organization is associated to
  """
  stripeCustomerID: String
  controlCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  controlImplementationCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  controlObjectiveCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  evidenceCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  groupCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  internalPolicyCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  mappedControlCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  narrativeCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  procedureCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  programCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  riskCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  scheduledJobCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  standardCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  templateCreators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  parent: Organization
  children(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Organizations returned from the connection.
    """
    orderBy: [OrganizationOrder!]

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  setting: OrganizationSetting
  personalAccessTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PersonalAccessTokens returned from the connection.
    """
    orderBy: [PersonalAccessTokenOrder!]

    """
    Filtering options for PersonalAccessTokens returned from the connection.
    """
    where: PersonalAccessTokenWhereInput
  ): PersonalAccessTokenConnection!
  apiTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for APITokens returned from the connection.
    """
    orderBy: [APITokenOrder!]

    """
    Filtering options for APITokens returned from the connection.
    """
    where: APITokenWhereInput
  ): APITokenConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  secrets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Hushes returned from the connection.
    """
    orderBy: [HushOrder!]

    """
    Filtering options for Hushes returned from the connection.
    """
    where: HushWhereInput
  ): HushConnection!
  avatarFile: File
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  templates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Templates returned from the connection.
    """
    orderBy: [TemplateOrder!]

    """
    Filtering options for Templates returned from the connection.
    """
    where: TemplateWhereInput
  ): TemplateConnection!
  integrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Integrations returned from the connection.
    """
    orderBy: [IntegrationOrder!]

    """
    Filtering options for Integrations returned from the connection.
    """
    where: IntegrationWhereInput
  ): IntegrationConnection!
  documents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DocumentDataSlice returned from the connection.
    """
    orderBy: [DocumentDataOrder!]

    """
    Filtering options for DocumentDataSlice returned from the connection.
    """
    where: DocumentDataWhereInput
  ): DocumentDataConnection!
  orgSubscriptions: [OrgSubscription!]
  invites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Invites returned from the connection.
    """
    orderBy: [InviteOrder!]

    """
    Filtering options for Invites returned from the connection.
    """
    where: InviteWhereInput
  ): InviteConnection!
  subscribers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subscribers returned from the connection.
    """
    orderBy: [SubscriberOrder!]

    """
    Filtering options for Subscribers returned from the connection.
    """
    where: SubscriberWhereInput
  ): SubscriberConnection!
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  entityTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EntityTypes returned from the connection.
    """
    orderBy: [EntityTypeOrder!]

    """
    Filtering options for EntityTypes returned from the connection.
    """
    where: EntityTypeWhereInput
  ): EntityTypeConnection!
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Contacts returned from the connection.
    """
    orderBy: [ContactOrder!]

    """
    Filtering options for Contacts returned from the connection.
    """
    where: ContactWhereInput
  ): ContactConnection!
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Notes returned from the connection.
    """
    orderBy: [NoteOrder!]

    """
    Filtering options for Notes returned from the connection.
    """
    where: NoteWhereInput
  ): NoteConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  controlImplementations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  mappedControls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MappedControls returned from the connection.
    """
    orderBy: [MappedControlOrder!]

    """
    Filtering options for MappedControls returned from the connection.
    """
    where: MappedControlWhereInput
  ): MappedControlConnection!
  evidence(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Evidences returned from the connection.
    """
    orderBy: [EvidenceOrder!]

    """
    Filtering options for Evidences returned from the connection.
    """
    where: EvidenceWhereInput
  ): EvidenceConnection!
  standards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Standards returned from the connection.
    """
    orderBy: [StandardOrder!]

    """
    Filtering options for Standards returned from the connection.
    """
    where: StandardWhereInput
  ): StandardConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlans returned from the connection.
    """
    orderBy: [ActionPlanOrder!]

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  customDomains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CustomDomains returned from the connection.
    """
    orderBy: [CustomDomainOrder!]

    """
    Filtering options for CustomDomains returned from the connection.
    """
    where: CustomDomainWhereInput
  ): CustomDomainConnection!
  jobRunners(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunners returned from the connection.
    """
    orderBy: [JobRunnerOrder!]

    """
    Filtering options for JobRunners returned from the connection.
    """
    where: JobRunnerWhereInput
  ): JobRunnerConnection!
  jobRunnerTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunnerTokens returned from the connection.
    """
    orderBy: [JobRunnerTokenOrder!]

    """
    Filtering options for JobRunnerTokens returned from the connection.
    """
    where: JobRunnerTokenWhereInput
  ): JobRunnerTokenConnection!
  jobRunnerRegistrationTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunnerRegistrationTokens returned from the connection.
    """
    orderBy: [JobRunnerRegistrationTokenOrder!]

    """
    Filtering options for JobRunnerRegistrationTokens returned from the connection.
    """
    where: JobRunnerRegistrationTokenWhereInput
  ): JobRunnerRegistrationTokenConnection!
  dnsVerifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DNSVerifications returned from the connection.
    """
    orderBy: [DNSVerificationOrder!]

    """
    Filtering options for DNSVerifications returned from the connection.
    """
    where: DNSVerificationWhereInput
  ): DNSVerificationConnection!
  jobTemplates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobTemplates returned from the connection.
    """
    orderBy: [JobTemplateOrder!]

    """
    Filtering options for JobTemplates returned from the connection.
    """
    where: JobTemplateWhereInput
  ): JobTemplateConnection!
  scheduledJobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobs returned from the connection.
    """
    orderBy: [ScheduledJobOrder!]

    """
    Filtering options for ScheduledJobs returned from the connection.
    """
    where: ScheduledJobWhereInput
  ): ScheduledJobConnection!
  jobResults(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobResults returned from the connection.
    """
    orderBy: [JobResultOrder!]

    """
    Filtering options for JobResults returned from the connection.
    """
    where: JobResultWhereInput
  ): JobResultConnection!
  scheduledJobRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobRuns returned from the connection.
    """
    orderBy: [ScheduledJobRunOrder!]

    """
    Filtering options for ScheduledJobRuns returned from the connection.
    """
    where: ScheduledJobRunWhereInput
  ): ScheduledJobRunConnection!
  trustCenters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenters returned from the connection.
    """
    orderBy: [TrustCenterOrder!]

    """
    Filtering options for TrustCenters returned from the connection.
    """
    where: TrustCenterWhereInput
  ): TrustCenterConnection!
  assets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Assets returned from the connection.
    """
    orderBy: [AssetOrder!]

    """
    Filtering options for Assets returned from the connection.
    """
    where: AssetWhereInput
  ): AssetConnection!
  scans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  subprocessors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subprocessors returned from the connection.
    """
    orderBy: [SubprocessorOrder!]

    """
    Filtering options for Subprocessors returned from the connection.
    """
    where: SubprocessorWhereInput
  ): SubprocessorConnection!
  exports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Exports returned from the connection.
    """
    orderBy: [ExportOrder!]

    """
    Filtering options for Exports returned from the connection.
    """
    where: ExportWhereInput
  ): ExportConnection!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgMemberships returned from the connection.
    """
    orderBy: [OrgMembershipOrder!]

    """
    Filtering options for OrgMemberships returned from the connection.
    """
    where: OrgMembershipWhereInput
  ): OrgMembershipConnection!
}
"""
A connection to a list of items.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  The item at the end of the edge.
  """
  node: Organization
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrganizationHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrganizationHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the organization
  """
  name: String!
  """
  The organization's displayed 'friendly' name
  """
  displayName: String!
  """
  An optional description of the organization
  """
  description: String
  """
  orgs directly associated with a user
  """
  personalOrg: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The organizations's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  Whether the organization has a dedicated database
  """
  dedicatedDb: Boolean!
  """
  the stripe customer ID this organization is associated to
  """
  stripeCustomerID: String
}
"""
A connection to a list of items.
"""
type OrganizationHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrganizationHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrganizationHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrganizationHistoryOpType is enum for the field operation
"""
enum OrganizationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for OrganizationHistory connections
"""
input OrganizationHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrganizationHistories.
  """
  field: OrganizationHistoryOrderField!
}
"""
Properties by which OrganizationHistory connections can be ordered.
"""
enum OrganizationHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  display_name
}
"""
OrganizationHistoryWhereInput is used for filtering OrganizationHistory objects.
Input was generated by ent.
"""
input OrganizationHistoryWhereInput {
  not: OrganizationHistoryWhereInput
  and: [OrganizationHistoryWhereInput!]
  or: [OrganizationHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrganizationHistoryOpType
  operationNEQ: OrganizationHistoryOpType
  operationIn: [OrganizationHistoryOpType!]
  operationNotIn: [OrganizationHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  parent_organization_id field predicates
  """
  parentOrganizationID: ID
  parentOrganizationIDNEQ: ID
  parentOrganizationIDIn: [ID!]
  parentOrganizationIDNotIn: [ID!]
  parentOrganizationIDGT: ID
  parentOrganizationIDGTE: ID
  parentOrganizationIDLT: ID
  parentOrganizationIDLTE: ID
  parentOrganizationIDContains: ID
  parentOrganizationIDHasPrefix: ID
  parentOrganizationIDHasSuffix: ID
  parentOrganizationIDIsNil: Boolean
  parentOrganizationIDNotNil: Boolean
  parentOrganizationIDEqualFold: ID
  parentOrganizationIDContainsFold: ID
  """
  personal_org field predicates
  """
  personalOrg: Boolean
  personalOrgNEQ: Boolean
  personalOrgIsNil: Boolean
  personalOrgNotNil: Boolean
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: String
  avatarLocalFileIDNEQ: String
  avatarLocalFileIDIn: [String!]
  avatarLocalFileIDNotIn: [String!]
  avatarLocalFileIDGT: String
  avatarLocalFileIDGTE: String
  avatarLocalFileIDLT: String
  avatarLocalFileIDLTE: String
  avatarLocalFileIDContains: String
  avatarLocalFileIDHasPrefix: String
  avatarLocalFileIDHasSuffix: String
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: String
  avatarLocalFileIDContainsFold: String
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
}
"""
Ordering options for Organization connections
"""
input OrganizationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Organizations.
  """
  field: OrganizationOrderField!
}
"""
Properties by which Organization connections can be ordered.
"""
enum OrganizationOrderField {
  created_at
  updated_at
  name
  display_name
}
type OrganizationSetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  domains associated with the organization
  """
  domains: [String!]
  """
  Name of the person to contact for billing
  """
  billingContact: String
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  """
  Phone number to contact for billing
  """
  billingPhone: String
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingRegion
  """
  the ID of the organization the settings belong to
  """
  organizationID: ID
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean!
  """
  domains allowed to access the organization, if empty all domains are allowed
  """
  allowedEmailDomains: [String!]
  """
  SSO provider type for the organization
  """
  identityProvider: OrganizationSettingSSOProvider
  """
  client ID for SSO integration
  """
  identityProviderClientID: String
  """
  client secret for SSO integration
  """
  identityProviderClientSecret: String
  """
  metadata URL for the SSO provider
  """
  identityProviderMetadataEndpoint: String
  """
  has this sso configuration been tested to verify it works? SSO cannot be enforced unless this is done
  """
  identityProviderAuthTested: Boolean!
  """
  SAML entity ID for the SSO provider
  """
  identityProviderEntityID: String
  """
  OIDC discovery URL for the SSO provider
  """
  oidcDiscoveryEndpoint: String
  """
  enforce SSO authentication for organization members
  """
  identityProviderLoginEnforced: Boolean!
  """
  unique token used to receive compliance webhook events
  """
  complianceWebhookToken: String
  """
  whether or not a payment method has been added to the account
  """
  paymentMethodAdded: Boolean!
  organization: Organization
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
A connection to a list of items.
"""
type OrganizationSettingConnection {
  """
  A list of edges.
  """
  edges: [OrganizationSettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationSettingEdge {
  """
  The item at the end of the edge.
  """
  node: OrganizationSetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrganizationSettingHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrganizationSettingHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  domains associated with the organization
  """
  domains: [String!]
  """
  Name of the person to contact for billing
  """
  billingContact: String
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  """
  Phone number to contact for billing
  """
  billingPhone: String
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingHistoryRegion
  """
  the ID of the organization the settings belong to
  """
  organizationID: String
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean!
  """
  domains allowed to access the organization, if empty all domains are allowed
  """
  allowedEmailDomains: [String!]
  """
  SSO provider type for the organization
  """
  identityProvider: OrganizationSettingHistorySSOProvider
  """
  client ID for SSO integration
  """
  identityProviderClientID: String
  """
  client secret for SSO integration
  """
  identityProviderClientSecret: String
  """
  metadata URL for the SSO provider
  """
  identityProviderMetadataEndpoint: String
  """
  has this sso configuration been tested to verify it works? SSO cannot be enforced unless this is done
  """
  identityProviderAuthTested: Boolean!
  """
  SAML entity ID for the SSO provider
  """
  identityProviderEntityID: String
  """
  OIDC discovery URL for the SSO provider
  """
  oidcDiscoveryEndpoint: String
  """
  enforce SSO authentication for organization members
  """
  identityProviderLoginEnforced: Boolean!
  """
  unique token used to receive compliance webhook events
  """
  complianceWebhookToken: String
  """
  whether or not a payment method has been added to the account
  """
  paymentMethodAdded: Boolean!
}
"""
A connection to a list of items.
"""
type OrganizationSettingHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrganizationSettingHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationSettingHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrganizationSettingHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrganizationSettingHistoryOpType is enum for the field operation
"""
enum OrganizationSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for OrganizationSettingHistory connections
"""
input OrganizationSettingHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrganizationSettingHistories.
  """
  field: OrganizationSettingHistoryOrderField!
}
"""
Properties by which OrganizationSettingHistory connections can be ordered.
"""
enum OrganizationSettingHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
OrganizationSettingHistoryRegion is enum for the field geo_location
"""
enum OrganizationSettingHistoryRegion @goModel(model: "github.com/theopenlane/core/pkg/enums.Region") {
  AMER
  EMEA
  APAC
}
"""
OrganizationSettingHistorySSOProvider is enum for the field identity_provider
"""
enum OrganizationSettingHistorySSOProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.SSOProvider") {
  OKTA
  ONE_LOGIN
  GOOGLE_WORKSPACE
  SLACK
  GITHUB
  NONE
}
"""
OrganizationSettingHistoryWhereInput is used for filtering OrganizationSettingHistory objects.
Input was generated by ent.
"""
input OrganizationSettingHistoryWhereInput {
  not: OrganizationSettingHistoryWhereInput
  and: [OrganizationSettingHistoryWhereInput!]
  or: [OrganizationSettingHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrganizationSettingHistoryOpType
  operationNEQ: OrganizationSettingHistoryOpType
  operationIn: [OrganizationSettingHistoryOpType!]
  operationNotIn: [OrganizationSettingHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  billing_contact field predicates
  """
  billingContact: String
  billingContactNEQ: String
  billingContactIn: [String!]
  billingContactNotIn: [String!]
  billingContactGT: String
  billingContactGTE: String
  billingContactLT: String
  billingContactLTE: String
  billingContactContains: String
  billingContactHasPrefix: String
  billingContactHasSuffix: String
  billingContactIsNil: Boolean
  billingContactNotNil: Boolean
  billingContactEqualFold: String
  billingContactContainsFold: String
  """
  billing_email field predicates
  """
  billingEmail: String
  billingEmailNEQ: String
  billingEmailIn: [String!]
  billingEmailNotIn: [String!]
  billingEmailGT: String
  billingEmailGTE: String
  billingEmailLT: String
  billingEmailLTE: String
  billingEmailContains: String
  billingEmailHasPrefix: String
  billingEmailHasSuffix: String
  billingEmailIsNil: Boolean
  billingEmailNotNil: Boolean
  billingEmailEqualFold: String
  billingEmailContainsFold: String
  """
  billing_phone field predicates
  """
  billingPhone: String
  billingPhoneNEQ: String
  billingPhoneIn: [String!]
  billingPhoneNotIn: [String!]
  billingPhoneGT: String
  billingPhoneGTE: String
  billingPhoneLT: String
  billingPhoneLTE: String
  billingPhoneContains: String
  billingPhoneHasPrefix: String
  billingPhoneHasSuffix: String
  billingPhoneIsNil: Boolean
  billingPhoneNotNil: Boolean
  billingPhoneEqualFold: String
  billingPhoneContainsFold: String
  """
  tax_identifier field predicates
  """
  taxIdentifier: String
  taxIdentifierNEQ: String
  taxIdentifierIn: [String!]
  taxIdentifierNotIn: [String!]
  taxIdentifierGT: String
  taxIdentifierGTE: String
  taxIdentifierLT: String
  taxIdentifierLTE: String
  taxIdentifierContains: String
  taxIdentifierHasPrefix: String
  taxIdentifierHasSuffix: String
  taxIdentifierIsNil: Boolean
  taxIdentifierNotNil: Boolean
  taxIdentifierEqualFold: String
  taxIdentifierContainsFold: String
  """
  geo_location field predicates
  """
  geoLocation: OrganizationSettingHistoryRegion
  geoLocationNEQ: OrganizationSettingHistoryRegion
  geoLocationIn: [OrganizationSettingHistoryRegion!]
  geoLocationNotIn: [OrganizationSettingHistoryRegion!]
  geoLocationIsNil: Boolean
  geoLocationNotNil: Boolean
  """
  organization_id field predicates
  """
  organizationID: String
  organizationIDNEQ: String
  organizationIDIn: [String!]
  organizationIDNotIn: [String!]
  organizationIDGT: String
  organizationIDGTE: String
  organizationIDLT: String
  organizationIDLTE: String
  organizationIDContains: String
  organizationIDHasPrefix: String
  organizationIDHasSuffix: String
  organizationIDIsNil: Boolean
  organizationIDNotNil: Boolean
  organizationIDEqualFold: String
  organizationIDContainsFold: String
  """
  billing_notifications_enabled field predicates
  """
  billingNotificationsEnabled: Boolean
  billingNotificationsEnabledNEQ: Boolean
  """
  identity_provider field predicates
  """
  identityProvider: OrganizationSettingHistorySSOProvider
  identityProviderNEQ: OrganizationSettingHistorySSOProvider
  identityProviderIn: [OrganizationSettingHistorySSOProvider!]
  identityProviderNotIn: [OrganizationSettingHistorySSOProvider!]
  identityProviderIsNil: Boolean
  identityProviderNotNil: Boolean
  """
  identity_provider_client_id field predicates
  """
  identityProviderClientID: String
  identityProviderClientIDNEQ: String
  identityProviderClientIDIn: [String!]
  identityProviderClientIDNotIn: [String!]
  identityProviderClientIDGT: String
  identityProviderClientIDGTE: String
  identityProviderClientIDLT: String
  identityProviderClientIDLTE: String
  identityProviderClientIDContains: String
  identityProviderClientIDHasPrefix: String
  identityProviderClientIDHasSuffix: String
  identityProviderClientIDIsNil: Boolean
  identityProviderClientIDNotNil: Boolean
  identityProviderClientIDEqualFold: String
  identityProviderClientIDContainsFold: String
  """
  identity_provider_client_secret field predicates
  """
  identityProviderClientSecret: String
  identityProviderClientSecretNEQ: String
  identityProviderClientSecretIn: [String!]
  identityProviderClientSecretNotIn: [String!]
  identityProviderClientSecretGT: String
  identityProviderClientSecretGTE: String
  identityProviderClientSecretLT: String
  identityProviderClientSecretLTE: String
  identityProviderClientSecretContains: String
  identityProviderClientSecretHasPrefix: String
  identityProviderClientSecretHasSuffix: String
  identityProviderClientSecretIsNil: Boolean
  identityProviderClientSecretNotNil: Boolean
  identityProviderClientSecretEqualFold: String
  identityProviderClientSecretContainsFold: String
  """
  identity_provider_metadata_endpoint field predicates
  """
  identityProviderMetadataEndpoint: String
  identityProviderMetadataEndpointNEQ: String
  identityProviderMetadataEndpointIn: [String!]
  identityProviderMetadataEndpointNotIn: [String!]
  identityProviderMetadataEndpointGT: String
  identityProviderMetadataEndpointGTE: String
  identityProviderMetadataEndpointLT: String
  identityProviderMetadataEndpointLTE: String
  identityProviderMetadataEndpointContains: String
  identityProviderMetadataEndpointHasPrefix: String
  identityProviderMetadataEndpointHasSuffix: String
  identityProviderMetadataEndpointIsNil: Boolean
  identityProviderMetadataEndpointNotNil: Boolean
  identityProviderMetadataEndpointEqualFold: String
  identityProviderMetadataEndpointContainsFold: String
  """
  identity_provider_auth_tested field predicates
  """
  identityProviderAuthTested: Boolean
  identityProviderAuthTestedNEQ: Boolean
  """
  identity_provider_entity_id field predicates
  """
  identityProviderEntityID: String
  identityProviderEntityIDNEQ: String
  identityProviderEntityIDIn: [String!]
  identityProviderEntityIDNotIn: [String!]
  identityProviderEntityIDGT: String
  identityProviderEntityIDGTE: String
  identityProviderEntityIDLT: String
  identityProviderEntityIDLTE: String
  identityProviderEntityIDContains: String
  identityProviderEntityIDHasPrefix: String
  identityProviderEntityIDHasSuffix: String
  identityProviderEntityIDIsNil: Boolean
  identityProviderEntityIDNotNil: Boolean
  identityProviderEntityIDEqualFold: String
  identityProviderEntityIDContainsFold: String
  """
  oidc_discovery_endpoint field predicates
  """
  oidcDiscoveryEndpoint: String
  oidcDiscoveryEndpointNEQ: String
  oidcDiscoveryEndpointIn: [String!]
  oidcDiscoveryEndpointNotIn: [String!]
  oidcDiscoveryEndpointGT: String
  oidcDiscoveryEndpointGTE: String
  oidcDiscoveryEndpointLT: String
  oidcDiscoveryEndpointLTE: String
  oidcDiscoveryEndpointContains: String
  oidcDiscoveryEndpointHasPrefix: String
  oidcDiscoveryEndpointHasSuffix: String
  oidcDiscoveryEndpointIsNil: Boolean
  oidcDiscoveryEndpointNotNil: Boolean
  oidcDiscoveryEndpointEqualFold: String
  oidcDiscoveryEndpointContainsFold: String
  """
  identity_provider_login_enforced field predicates
  """
  identityProviderLoginEnforced: Boolean
  identityProviderLoginEnforcedNEQ: Boolean
  """
  compliance_webhook_token field predicates
  """
  complianceWebhookToken: String
  complianceWebhookTokenNEQ: String
  complianceWebhookTokenIn: [String!]
  complianceWebhookTokenNotIn: [String!]
  complianceWebhookTokenGT: String
  complianceWebhookTokenGTE: String
  complianceWebhookTokenLT: String
  complianceWebhookTokenLTE: String
  complianceWebhookTokenContains: String
  complianceWebhookTokenHasPrefix: String
  complianceWebhookTokenHasSuffix: String
  complianceWebhookTokenIsNil: Boolean
  complianceWebhookTokenNotNil: Boolean
  complianceWebhookTokenEqualFold: String
  complianceWebhookTokenContainsFold: String
}
"""
Ordering options for OrganizationSetting connections
"""
input OrganizationSettingOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrganizationSettings.
  """
  field: OrganizationSettingOrderField!
}
"""
Properties by which OrganizationSetting connections can be ordered.
"""
enum OrganizationSettingOrderField {
  created_at
  updated_at
}
"""
OrganizationSettingRegion is enum for the field geo_location
"""
enum OrganizationSettingRegion @goModel(model: "github.com/theopenlane/core/pkg/enums.Region") {
  AMER
  EMEA
  APAC
}
"""
OrganizationSettingSSOProvider is enum for the field identity_provider
"""
enum OrganizationSettingSSOProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.SSOProvider") {
  OKTA
  ONE_LOGIN
  GOOGLE_WORKSPACE
  SLACK
  GITHUB
  NONE
}
"""
OrganizationSettingWhereInput is used for filtering OrganizationSetting objects.
Input was generated by ent.
"""
input OrganizationSettingWhereInput {
  not: OrganizationSettingWhereInput
  and: [OrganizationSettingWhereInput!]
  or: [OrganizationSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  billing_contact field predicates
  """
  billingContact: String
  billingContactNEQ: String
  billingContactIn: [String!]
  billingContactNotIn: [String!]
  billingContactGT: String
  billingContactGTE: String
  billingContactLT: String
  billingContactLTE: String
  billingContactContains: String
  billingContactHasPrefix: String
  billingContactHasSuffix: String
  billingContactIsNil: Boolean
  billingContactNotNil: Boolean
  billingContactEqualFold: String
  billingContactContainsFold: String
  """
  billing_email field predicates
  """
  billingEmail: String
  billingEmailNEQ: String
  billingEmailIn: [String!]
  billingEmailNotIn: [String!]
  billingEmailGT: String
  billingEmailGTE: String
  billingEmailLT: String
  billingEmailLTE: String
  billingEmailContains: String
  billingEmailHasPrefix: String
  billingEmailHasSuffix: String
  billingEmailIsNil: Boolean
  billingEmailNotNil: Boolean
  billingEmailEqualFold: String
  billingEmailContainsFold: String
  """
  billing_phone field predicates
  """
  billingPhone: String
  billingPhoneNEQ: String
  billingPhoneIn: [String!]
  billingPhoneNotIn: [String!]
  billingPhoneGT: String
  billingPhoneGTE: String
  billingPhoneLT: String
  billingPhoneLTE: String
  billingPhoneContains: String
  billingPhoneHasPrefix: String
  billingPhoneHasSuffix: String
  billingPhoneIsNil: Boolean
  billingPhoneNotNil: Boolean
  billingPhoneEqualFold: String
  billingPhoneContainsFold: String
  """
  tax_identifier field predicates
  """
  taxIdentifier: String
  taxIdentifierNEQ: String
  taxIdentifierIn: [String!]
  taxIdentifierNotIn: [String!]
  taxIdentifierGT: String
  taxIdentifierGTE: String
  taxIdentifierLT: String
  taxIdentifierLTE: String
  taxIdentifierContains: String
  taxIdentifierHasPrefix: String
  taxIdentifierHasSuffix: String
  taxIdentifierIsNil: Boolean
  taxIdentifierNotNil: Boolean
  taxIdentifierEqualFold: String
  taxIdentifierContainsFold: String
  """
  geo_location field predicates
  """
  geoLocation: OrganizationSettingRegion
  geoLocationNEQ: OrganizationSettingRegion
  geoLocationIn: [OrganizationSettingRegion!]
  geoLocationNotIn: [OrganizationSettingRegion!]
  geoLocationIsNil: Boolean
  geoLocationNotNil: Boolean
  """
  organization_id field predicates
  """
  organizationID: ID
  organizationIDNEQ: ID
  organizationIDIn: [ID!]
  organizationIDNotIn: [ID!]
  organizationIDGT: ID
  organizationIDGTE: ID
  organizationIDLT: ID
  organizationIDLTE: ID
  organizationIDContains: ID
  organizationIDHasPrefix: ID
  organizationIDHasSuffix: ID
  organizationIDIsNil: Boolean
  organizationIDNotNil: Boolean
  organizationIDEqualFold: ID
  organizationIDContainsFold: ID
  """
  billing_notifications_enabled field predicates
  """
  billingNotificationsEnabled: Boolean
  billingNotificationsEnabledNEQ: Boolean
  """
  identity_provider field predicates
  """
  identityProvider: OrganizationSettingSSOProvider
  identityProviderNEQ: OrganizationSettingSSOProvider
  identityProviderIn: [OrganizationSettingSSOProvider!]
  identityProviderNotIn: [OrganizationSettingSSOProvider!]
  identityProviderIsNil: Boolean
  identityProviderNotNil: Boolean
  """
  identity_provider_client_id field predicates
  """
  identityProviderClientID: String
  identityProviderClientIDNEQ: String
  identityProviderClientIDIn: [String!]
  identityProviderClientIDNotIn: [String!]
  identityProviderClientIDGT: String
  identityProviderClientIDGTE: String
  identityProviderClientIDLT: String
  identityProviderClientIDLTE: String
  identityProviderClientIDContains: String
  identityProviderClientIDHasPrefix: String
  identityProviderClientIDHasSuffix: String
  identityProviderClientIDIsNil: Boolean
  identityProviderClientIDNotNil: Boolean
  identityProviderClientIDEqualFold: String
  identityProviderClientIDContainsFold: String
  """
  identity_provider_client_secret field predicates
  """
  identityProviderClientSecret: String
  identityProviderClientSecretNEQ: String
  identityProviderClientSecretIn: [String!]
  identityProviderClientSecretNotIn: [String!]
  identityProviderClientSecretGT: String
  identityProviderClientSecretGTE: String
  identityProviderClientSecretLT: String
  identityProviderClientSecretLTE: String
  identityProviderClientSecretContains: String
  identityProviderClientSecretHasPrefix: String
  identityProviderClientSecretHasSuffix: String
  identityProviderClientSecretIsNil: Boolean
  identityProviderClientSecretNotNil: Boolean
  identityProviderClientSecretEqualFold: String
  identityProviderClientSecretContainsFold: String
  """
  identity_provider_metadata_endpoint field predicates
  """
  identityProviderMetadataEndpoint: String
  identityProviderMetadataEndpointNEQ: String
  identityProviderMetadataEndpointIn: [String!]
  identityProviderMetadataEndpointNotIn: [String!]
  identityProviderMetadataEndpointGT: String
  identityProviderMetadataEndpointGTE: String
  identityProviderMetadataEndpointLT: String
  identityProviderMetadataEndpointLTE: String
  identityProviderMetadataEndpointContains: String
  identityProviderMetadataEndpointHasPrefix: String
  identityProviderMetadataEndpointHasSuffix: String
  identityProviderMetadataEndpointIsNil: Boolean
  identityProviderMetadataEndpointNotNil: Boolean
  identityProviderMetadataEndpointEqualFold: String
  identityProviderMetadataEndpointContainsFold: String
  """
  identity_provider_auth_tested field predicates
  """
  identityProviderAuthTested: Boolean
  identityProviderAuthTestedNEQ: Boolean
  """
  identity_provider_entity_id field predicates
  """
  identityProviderEntityID: String
  identityProviderEntityIDNEQ: String
  identityProviderEntityIDIn: [String!]
  identityProviderEntityIDNotIn: [String!]
  identityProviderEntityIDGT: String
  identityProviderEntityIDGTE: String
  identityProviderEntityIDLT: String
  identityProviderEntityIDLTE: String
  identityProviderEntityIDContains: String
  identityProviderEntityIDHasPrefix: String
  identityProviderEntityIDHasSuffix: String
  identityProviderEntityIDIsNil: Boolean
  identityProviderEntityIDNotNil: Boolean
  identityProviderEntityIDEqualFold: String
  identityProviderEntityIDContainsFold: String
  """
  oidc_discovery_endpoint field predicates
  """
  oidcDiscoveryEndpoint: String
  oidcDiscoveryEndpointNEQ: String
  oidcDiscoveryEndpointIn: [String!]
  oidcDiscoveryEndpointNotIn: [String!]
  oidcDiscoveryEndpointGT: String
  oidcDiscoveryEndpointGTE: String
  oidcDiscoveryEndpointLT: String
  oidcDiscoveryEndpointLTE: String
  oidcDiscoveryEndpointContains: String
  oidcDiscoveryEndpointHasPrefix: String
  oidcDiscoveryEndpointHasSuffix: String
  oidcDiscoveryEndpointIsNil: Boolean
  oidcDiscoveryEndpointNotNil: Boolean
  oidcDiscoveryEndpointEqualFold: String
  oidcDiscoveryEndpointContainsFold: String
  """
  identity_provider_login_enforced field predicates
  """
  identityProviderLoginEnforced: Boolean
  identityProviderLoginEnforcedNEQ: Boolean
  """
  compliance_webhook_token field predicates
  """
  complianceWebhookToken: String
  complianceWebhookTokenNEQ: String
  complianceWebhookTokenIn: [String!]
  complianceWebhookTokenNotIn: [String!]
  complianceWebhookTokenGT: String
  complianceWebhookTokenGTE: String
  complianceWebhookTokenLT: String
  complianceWebhookTokenLTE: String
  complianceWebhookTokenContains: String
  complianceWebhookTokenHasPrefix: String
  complianceWebhookTokenHasSuffix: String
  complianceWebhookTokenIsNil: Boolean
  complianceWebhookTokenNotNil: Boolean
  complianceWebhookTokenEqualFold: String
  complianceWebhookTokenContainsFold: String
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  parent_organization_id field predicates
  """
  parentOrganizationID: ID
  parentOrganizationIDNEQ: ID
  parentOrganizationIDIn: [ID!]
  parentOrganizationIDNotIn: [ID!]
  parentOrganizationIDGT: ID
  parentOrganizationIDGTE: ID
  parentOrganizationIDLT: ID
  parentOrganizationIDLTE: ID
  parentOrganizationIDContains: ID
  parentOrganizationIDHasPrefix: ID
  parentOrganizationIDHasSuffix: ID
  parentOrganizationIDIsNil: Boolean
  parentOrganizationIDNotNil: Boolean
  parentOrganizationIDEqualFold: ID
  parentOrganizationIDContainsFold: ID
  """
  personal_org field predicates
  """
  personalOrg: Boolean
  personalOrgNEQ: Boolean
  personalOrgIsNil: Boolean
  personalOrgNotNil: Boolean
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: ID
  avatarLocalFileIDNEQ: ID
  avatarLocalFileIDIn: [ID!]
  avatarLocalFileIDNotIn: [ID!]
  avatarLocalFileIDGT: ID
  avatarLocalFileIDGTE: ID
  avatarLocalFileIDLT: ID
  avatarLocalFileIDLTE: ID
  avatarLocalFileIDContains: ID
  avatarLocalFileIDHasPrefix: ID
  avatarLocalFileIDHasSuffix: ID
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: ID
  avatarLocalFileIDContainsFold: ID
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
  """
  control_creators edge predicates
  """
  hasControlCreators: Boolean
  hasControlCreatorsWith: [GroupWhereInput!]
  """
  control_implementation_creators edge predicates
  """
  hasControlImplementationCreators: Boolean
  hasControlImplementationCreatorsWith: [GroupWhereInput!]
  """
  control_objective_creators edge predicates
  """
  hasControlObjectiveCreators: Boolean
  hasControlObjectiveCreatorsWith: [GroupWhereInput!]
  """
  evidence_creators edge predicates
  """
  hasEvidenceCreators: Boolean
  hasEvidenceCreatorsWith: [GroupWhereInput!]
  """
  group_creators edge predicates
  """
  hasGroupCreators: Boolean
  hasGroupCreatorsWith: [GroupWhereInput!]
  """
  internal_policy_creators edge predicates
  """
  hasInternalPolicyCreators: Boolean
  hasInternalPolicyCreatorsWith: [GroupWhereInput!]
  """
  mapped_control_creators edge predicates
  """
  hasMappedControlCreators: Boolean
  hasMappedControlCreatorsWith: [GroupWhereInput!]
  """
  narrative_creators edge predicates
  """
  hasNarrativeCreators: Boolean
  hasNarrativeCreatorsWith: [GroupWhereInput!]
  """
  procedure_creators edge predicates
  """
  hasProcedureCreators: Boolean
  hasProcedureCreatorsWith: [GroupWhereInput!]
  """
  program_creators edge predicates
  """
  hasProgramCreators: Boolean
  hasProgramCreatorsWith: [GroupWhereInput!]
  """
  risk_creators edge predicates
  """
  hasRiskCreators: Boolean
  hasRiskCreatorsWith: [GroupWhereInput!]
  """
  scheduled_job_creators edge predicates
  """
  hasScheduledJobCreators: Boolean
  hasScheduledJobCreatorsWith: [GroupWhereInput!]
  """
  standard_creators edge predicates
  """
  hasStandardCreators: Boolean
  hasStandardCreatorsWith: [GroupWhereInput!]
  """
  template_creators edge predicates
  """
  hasTemplateCreators: Boolean
  hasTemplateCreatorsWith: [GroupWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [OrganizationWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [OrganizationWhereInput!]
  """
  setting edge predicates
  """
  hasSetting: Boolean
  hasSettingWith: [OrganizationSettingWhereInput!]
  """
  personal_access_tokens edge predicates
  """
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """
  api_tokens edge predicates
  """
  hasAPITokens: Boolean
  hasAPITokensWith: [APITokenWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  secrets edge predicates
  """
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
  """
  avatar_file edge predicates
  """
  hasAvatarFile: Boolean
  hasAvatarFileWith: [FileWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  templates edge predicates
  """
  hasTemplates: Boolean
  hasTemplatesWith: [TemplateWhereInput!]
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentDataWhereInput!]
  """
  org_subscriptions edge predicates
  """
  hasOrgSubscriptions: Boolean
  hasOrgSubscriptionsWith: [OrgSubscriptionWhereInput!]
  """
  invites edge predicates
  """
  hasInvites: Boolean
  hasInvitesWith: [InviteWhereInput!]
  """
  subscribers edge predicates
  """
  hasSubscribers: Boolean
  hasSubscribersWith: [SubscriberWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
  """
  entity_types edge predicates
  """
  hasEntityTypes: Boolean
  hasEntityTypesWith: [EntityTypeWhereInput!]
  """
  contacts edge predicates
  """
  hasContacts: Boolean
  hasContactsWith: [ContactWhereInput!]
  """
  notes edge predicates
  """
  hasNotes: Boolean
  hasNotesWith: [NoteWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  control_implementations edge predicates
  """
  hasControlImplementations: Boolean
  hasControlImplementationsWith: [ControlImplementationWhereInput!]
  """
  mapped_controls edge predicates
  """
  hasMappedControls: Boolean
  hasMappedControlsWith: [MappedControlWhereInput!]
  """
  evidence edge predicates
  """
  hasEvidence: Boolean
  hasEvidenceWith: [EvidenceWhereInput!]
  """
  standards edge predicates
  """
  hasStandards: Boolean
  hasStandardsWith: [StandardWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  custom_domains edge predicates
  """
  hasCustomDomains: Boolean
  hasCustomDomainsWith: [CustomDomainWhereInput!]
  """
  job_runners edge predicates
  """
  hasJobRunners: Boolean
  hasJobRunnersWith: [JobRunnerWhereInput!]
  """
  job_runner_tokens edge predicates
  """
  hasJobRunnerTokens: Boolean
  hasJobRunnerTokensWith: [JobRunnerTokenWhereInput!]
  """
  job_runner_registration_tokens edge predicates
  """
  hasJobRunnerRegistrationTokens: Boolean
  hasJobRunnerRegistrationTokensWith: [JobRunnerRegistrationTokenWhereInput!]
  """
  dns_verifications edge predicates
  """
  hasDNSVerifications: Boolean
  hasDNSVerificationsWith: [DNSVerificationWhereInput!]
  """
  job_templates edge predicates
  """
  hasJobTemplates: Boolean
  hasJobTemplatesWith: [JobTemplateWhereInput!]
  """
  scheduled_jobs edge predicates
  """
  hasScheduledJobs: Boolean
  hasScheduledJobsWith: [ScheduledJobWhereInput!]
  """
  job_results edge predicates
  """
  hasJobResults: Boolean
  hasJobResultsWith: [JobResultWhereInput!]
  """
  scheduled_job_runs edge predicates
  """
  hasScheduledJobRuns: Boolean
  hasScheduledJobRunsWith: [ScheduledJobRunWhereInput!]
  """
  trust_centers edge predicates
  """
  hasTrustCenters: Boolean
  hasTrustCentersWith: [TrustCenterWhereInput!]
  """
  assets edge predicates
  """
  hasAssets: Boolean
  hasAssetsWith: [AssetWhereInput!]
  """
  scans edge predicates
  """
  hasScans: Boolean
  hasScansWith: [ScanWhereInput!]
  """
  subprocessors edge predicates
  """
  hasSubprocessors: Boolean
  hasSubprocessorsWith: [SubprocessorWhereInput!]
  """
  exports edge predicates
  """
  hasExports: Boolean
  hasExportsWith: [ExportWhereInput!]
  """
  members edge predicates
  """
  hasMembers: Boolean
  hasMembersWith: [OrgMembershipWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type PersonalAccessToken implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name associated with the token
  """
  name: String!
  token: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  """
  SSO authorization timestamps by organization id
  """
  ssoAuthorizations: SSOAuthorizationMap
  lastUsedAt: Time
  """
  whether the token is active
  """
  isActive: Boolean
  """
  the reason the token was revoked
  """
  revokedReason: String
  """
  the user who revoked the token
  """
  revokedBy: String
  """
  when the token was revoked
  """
  revokedAt: Time
  owner: User!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Organizations returned from the connection.
    """
    orderBy: [OrganizationOrder!]

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
}
"""
A connection to a list of items.
"""
type PersonalAccessTokenConnection {
  """
  A list of edges.
  """
  edges: [PersonalAccessTokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PersonalAccessTokenEdge {
  """
  The item at the end of the edge.
  """
  node: PersonalAccessToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PersonalAccessToken connections
"""
input PersonalAccessTokenOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PersonalAccessTokens.
  """
  field: PersonalAccessTokenOrderField!
}
"""
Properties by which PersonalAccessToken connections can be ordered.
"""
enum PersonalAccessTokenOrderField {
  created_at
  updated_at
  name
  expires_at
  last_used_at
  is_active
}
"""
PersonalAccessTokenWhereInput is used for filtering PersonalAccessToken objects.
Input was generated by ent.
"""
input PersonalAccessTokenWhereInput {
  not: PersonalAccessTokenWhereInput
  and: [PersonalAccessTokenWhereInput!]
  or: [PersonalAccessTokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  is_active field predicates
  """
  isActive: Boolean
  isActiveNEQ: Boolean
  isActiveIsNil: Boolean
  isActiveNotNil: Boolean
  """
  revoked_reason field predicates
  """
  revokedReason: String
  revokedReasonNEQ: String
  revokedReasonIn: [String!]
  revokedReasonNotIn: [String!]
  revokedReasonGT: String
  revokedReasonGTE: String
  revokedReasonLT: String
  revokedReasonLTE: String
  revokedReasonContains: String
  revokedReasonHasPrefix: String
  revokedReasonHasSuffix: String
  revokedReasonIsNil: Boolean
  revokedReasonNotNil: Boolean
  revokedReasonEqualFold: String
  revokedReasonContainsFold: String
  """
  revoked_by field predicates
  """
  revokedBy: String
  revokedByNEQ: String
  revokedByIn: [String!]
  revokedByNotIn: [String!]
  revokedByGT: String
  revokedByGTE: String
  revokedByLT: String
  revokedByLTE: String
  revokedByContains: String
  revokedByHasPrefix: String
  revokedByHasSuffix: String
  revokedByIsNil: Boolean
  revokedByNotNil: Boolean
  revokedByEqualFold: String
  revokedByContainsFold: String
  """
  revoked_at field predicates
  """
  revokedAt: Time
  revokedAtNEQ: Time
  revokedAtIn: [Time!]
  revokedAtNotIn: [Time!]
  revokedAtGT: Time
  revokedAtGTE: Time
  revokedAtLT: Time
  revokedAtLTE: Time
  revokedAtIsNil: Boolean
  revokedAtNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  organizations edge predicates
  """
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type Procedure implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the procedure
  """
  name: String!
  """
  status of the procedure, e.g. draft, published, archived, etc.
  """
  status: ProcedureDocumentStatus
  """
  type of the procedure, e.g. compliance, operational, health and safety, etc.
  """
  procedureType: String
  """
  details of the procedure
  """
  details: String
  """
  whether approval is required for edits to the procedure
  """
  approvalRequired: Boolean
  """
  the date the procedure should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the procedure should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ProcedureFrequency
  """
  the id of the group responsible for approving the procedure
  """
  approverID: ID
  """
  the id of the group responsible for approving the procedure
  """
  delegateID: ID
  summary: String
  """
  auto-generated tag suggestions for the procedure
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the procedure
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the procedure
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the procedure
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the procedure
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the procedure
  """
  dismissedImprovementSuggestions: [String!]
  """
  This will contain the most recent file id if this procedure was created from a file
  """
  fileID: ID
  """
  This will contain the url used to create/update the procedure
  """
  url: String
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  """
  the group of users who are responsible for approving the procedure
  """
  approver: Group
  """
  temporary delegates for the procedure, used for temporary approval
  """
  delegate: Group
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  file: File
}
"""
A connection to a list of items.
"""
type ProcedureConnection {
  """
  A list of edges.
  """
  edges: [ProcedureEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ProcedureDocumentStatus is enum for the field status
"""
enum ProcedureDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type ProcedureEdge {
  """
  The item at the end of the edge.
  """
  node: Procedure
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProcedureFrequency is enum for the field review_frequency
"""
enum ProcedureFrequency @goModel(model: "github.com/theopenlane/core/pkg/enums.Frequency") {
  YEARLY
  QUARTERLY
  BIANNUALLY
  MONTHLY
}
type ProcedureHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ProcedureHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the procedure
  """
  name: String!
  """
  status of the procedure, e.g. draft, published, archived, etc.
  """
  status: ProcedureHistoryDocumentStatus
  """
  type of the procedure, e.g. compliance, operational, health and safety, etc.
  """
  procedureType: String
  """
  details of the procedure
  """
  details: String
  """
  whether approval is required for edits to the procedure
  """
  approvalRequired: Boolean
  """
  the date the procedure should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  """
  the frequency at which the procedure should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ProcedureHistoryFrequency
  """
  the id of the group responsible for approving the procedure
  """
  approverID: String
  """
  the id of the group responsible for approving the procedure
  """
  delegateID: String
  summary: String
  """
  auto-generated tag suggestions for the procedure
  """
  tagSuggestions: [String!]
  """
  tag suggestions dismissed by the user for the procedure
  """
  dismissedTagSuggestions: [String!]
  """
  proposed controls referenced in the procedure
  """
  controlSuggestions: [String!]
  """
  control suggestions dismissed by the user for the procedure
  """
  dismissedControlSuggestions: [String!]
  """
  suggested improvements for the procedure
  """
  improvementSuggestions: [String!]
  """
  improvement suggestions dismissed by the user for the procedure
  """
  dismissedImprovementSuggestions: [String!]
  """
  This will contain the most recent file id if this procedure was created from a file
  """
  fileID: String
  """
  This will contain the url used to create/update the procedure
  """
  url: String
}
"""
A connection to a list of items.
"""
type ProcedureHistoryConnection {
  """
  A list of edges.
  """
  edges: [ProcedureHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
ProcedureHistoryDocumentStatus is enum for the field status
"""
enum ProcedureHistoryDocumentStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentStatus") {
  PUBLISHED
  DRAFT
  NEEDS_APPROVAL
  APPROVED
  ARCHIVED
}
"""
An edge in a connection.
"""
type ProcedureHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ProcedureHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProcedureHistoryFrequency is enum for the field review_frequency
"""
enum ProcedureHistoryFrequency @goModel(model: "github.com/theopenlane/core/pkg/enums.Frequency") {
  YEARLY
  QUARTERLY
  BIANNUALLY
  MONTHLY
}
"""
ProcedureHistoryOpType is enum for the field operation
"""
enum ProcedureHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ProcedureHistory connections
"""
input ProcedureHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ProcedureHistories.
  """
  field: ProcedureHistoryOrderField!
}
"""
Properties by which ProcedureHistory connections can be ordered.
"""
enum ProcedureHistoryOrderField {
  history_time
  created_at
  updated_at
  revision
  name
  STATUS
  review_due
  REVIEW_FREQUENCY
}
"""
ProcedureHistoryWhereInput is used for filtering ProcedureHistory objects.
Input was generated by ent.
"""
input ProcedureHistoryWhereInput {
  not: ProcedureHistoryWhereInput
  and: [ProcedureHistoryWhereInput!]
  or: [ProcedureHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ProcedureHistoryOpType
  operationNEQ: ProcedureHistoryOpType
  operationIn: [ProcedureHistoryOpType!]
  operationNotIn: [ProcedureHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: ProcedureHistoryDocumentStatus
  statusNEQ: ProcedureHistoryDocumentStatus
  statusIn: [ProcedureHistoryDocumentStatus!]
  statusNotIn: [ProcedureHistoryDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  procedure_type field predicates
  """
  procedureType: String
  procedureTypeNEQ: String
  procedureTypeIn: [String!]
  procedureTypeNotIn: [String!]
  procedureTypeGT: String
  procedureTypeGTE: String
  procedureTypeLT: String
  procedureTypeLTE: String
  procedureTypeContains: String
  procedureTypeHasPrefix: String
  procedureTypeHasSuffix: String
  procedureTypeIsNil: Boolean
  procedureTypeNotNil: Boolean
  procedureTypeEqualFold: String
  procedureTypeContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  approval_required field predicates
  """
  approvalRequired: Boolean
  approvalRequiredNEQ: Boolean
  approvalRequiredIsNil: Boolean
  approvalRequiredNotNil: Boolean
  """
  review_due field predicates
  """
  reviewDue: Time
  reviewDueNEQ: Time
  reviewDueIn: [Time!]
  reviewDueNotIn: [Time!]
  reviewDueGT: Time
  reviewDueGTE: Time
  reviewDueLT: Time
  reviewDueLTE: Time
  reviewDueIsNil: Boolean
  reviewDueNotNil: Boolean
  """
  review_frequency field predicates
  """
  reviewFrequency: ProcedureHistoryFrequency
  reviewFrequencyNEQ: ProcedureHistoryFrequency
  reviewFrequencyIn: [ProcedureHistoryFrequency!]
  reviewFrequencyNotIn: [ProcedureHistoryFrequency!]
  reviewFrequencyIsNil: Boolean
  reviewFrequencyNotNil: Boolean
  """
  approver_id field predicates
  """
  approverID: String
  approverIDNEQ: String
  approverIDIn: [String!]
  approverIDNotIn: [String!]
  approverIDGT: String
  approverIDGTE: String
  approverIDLT: String
  approverIDLTE: String
  approverIDContains: String
  approverIDHasPrefix: String
  approverIDHasSuffix: String
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: String
  approverIDContainsFold: String
  """
  delegate_id field predicates
  """
  delegateID: String
  delegateIDNEQ: String
  delegateIDIn: [String!]
  delegateIDNotIn: [String!]
  delegateIDGT: String
  delegateIDGTE: String
  delegateIDLT: String
  delegateIDLTE: String
  delegateIDContains: String
  delegateIDHasPrefix: String
  delegateIDHasSuffix: String
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: String
  delegateIDContainsFold: String
  """
  file_id field predicates
  """
  fileID: String
  fileIDNEQ: String
  fileIDIn: [String!]
  fileIDNotIn: [String!]
  fileIDGT: String
  fileIDGTE: String
  fileIDLT: String
  fileIDLTE: String
  fileIDContains: String
  fileIDHasPrefix: String
  fileIDHasSuffix: String
  fileIDIsNil: Boolean
  fileIDNotNil: Boolean
  fileIDEqualFold: String
  fileIDContainsFold: String
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
}
"""
Ordering options for Procedure connections
"""
input ProcedureOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Procedures.
  """
  field: ProcedureOrderField!
}
"""
Properties by which Procedure connections can be ordered.
"""
enum ProcedureOrderField {
  created_at
  updated_at
  revision
  name
  STATUS
  review_due
  REVIEW_FREQUENCY
}
"""
ProcedureWhereInput is used for filtering Procedure objects.
Input was generated by ent.
"""
input ProcedureWhereInput {
  not: ProcedureWhereInput
  and: [ProcedureWhereInput!]
  or: [ProcedureWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: ProcedureDocumentStatus
  statusNEQ: ProcedureDocumentStatus
  statusIn: [ProcedureDocumentStatus!]
  statusNotIn: [ProcedureDocumentStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  procedure_type field predicates
  """
  procedureType: String
  procedureTypeNEQ: String
  procedureTypeIn: [String!]
  procedureTypeNotIn: [String!]
  procedureTypeGT: String
  procedureTypeGTE: String
  procedureTypeLT: String
  procedureTypeLTE: String
  procedureTypeContains: String
  procedureTypeHasPrefix: String
  procedureTypeHasSuffix: String
  procedureTypeIsNil: Boolean
  procedureTypeNotNil: Boolean
  procedureTypeEqualFold: String
  procedureTypeContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  approval_required field predicates
  """
  approvalRequired: Boolean
  approvalRequiredNEQ: Boolean
  approvalRequiredIsNil: Boolean
  approvalRequiredNotNil: Boolean
  """
  review_due field predicates
  """
  reviewDue: Time
  reviewDueNEQ: Time
  reviewDueIn: [Time!]
  reviewDueNotIn: [Time!]
  reviewDueGT: Time
  reviewDueGTE: Time
  reviewDueLT: Time
  reviewDueLTE: Time
  reviewDueIsNil: Boolean
  reviewDueNotNil: Boolean
  """
  review_frequency field predicates
  """
  reviewFrequency: ProcedureFrequency
  reviewFrequencyNEQ: ProcedureFrequency
  reviewFrequencyIn: [ProcedureFrequency!]
  reviewFrequencyNotIn: [ProcedureFrequency!]
  reviewFrequencyIsNil: Boolean
  reviewFrequencyNotNil: Boolean
  """
  approver_id field predicates
  """
  approverID: ID
  approverIDNEQ: ID
  approverIDIn: [ID!]
  approverIDNotIn: [ID!]
  approverIDGT: ID
  approverIDGTE: ID
  approverIDLT: ID
  approverIDLTE: ID
  approverIDContains: ID
  approverIDHasPrefix: ID
  approverIDHasSuffix: ID
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: ID
  approverIDContainsFold: ID
  """
  delegate_id field predicates
  """
  delegateID: ID
  delegateIDNEQ: ID
  delegateIDIn: [ID!]
  delegateIDNotIn: [ID!]
  delegateIDGT: ID
  delegateIDGTE: ID
  delegateIDLT: ID
  delegateIDLTE: ID
  delegateIDContains: ID
  delegateIDHasPrefix: ID
  delegateIDHasSuffix: ID
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: ID
  delegateIDContainsFold: ID
  """
  file_id field predicates
  """
  fileID: ID
  fileIDNEQ: ID
  fileIDIn: [ID!]
  fileIDNotIn: [ID!]
  fileIDGT: ID
  fileIDGTE: ID
  fileIDLT: ID
  fileIDLTE: ID
  fileIDContains: ID
  fileIDHasPrefix: ID
  fileIDHasSuffix: ID
  fileIDIsNil: Boolean
  fileIDNotNil: Boolean
  fileIDEqualFold: ID
  fileIDContainsFold: ID
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  approver edge predicates
  """
  hasApprover: Boolean
  hasApproverWith: [GroupWhereInput!]
  """
  delegate edge predicates
  """
  hasDelegate: Boolean
  hasDelegateWith: [GroupWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  file edge predicates
  """
  hasFile: Boolean
  hasFileWith: [FileWhereInput!]
}
type Program implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the program
  """
  name: String!
  """
  the description of the program
  """
  description: String
  """
  the status of the program
  """
  status: ProgramProgramStatus!
  """
  the type of the program
  """
  programType: ProgramProgramType!
  """
  the short name of the compliance standard the program is based on, only used for framework type programs
  """
  frameworkName: String
  """
  the start date of the period
  """
  startDate: Time
  """
  the end date of the period
  """
  endDate: Time
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean!
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean!
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean!
  """
  the name of the audit firm conducting the audit
  """
  auditFirm: String
  """
  the full name of the auditor conducting the audit
  """
  auditor: String
  """
  the email of the auditor conducting the audit
  """
  auditorEmail: String
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Notes returned from the connection.
    """
    orderBy: [NoteOrder!]

    """
    Filtering options for Notes returned from the connection.
    """
    where: NoteWhereInput
  ): NoteConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  evidence(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Evidences returned from the connection.
    """
    orderBy: [EvidenceOrder!]

    """
    Filtering options for Evidences returned from the connection.
    """
    where: EvidenceWhereInput
  ): EvidenceConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlans returned from the connection.
    """
    orderBy: [ActionPlanOrder!]

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProgramMemberships returned from the connection.
    """
    orderBy: [ProgramMembershipOrder!]

    """
    Filtering options for ProgramMemberships returned from the connection.
    """
    where: ProgramMembershipWhereInput
  ): ProgramMembershipConnection!
}
"""
A connection to a list of items.
"""
type ProgramConnection {
  """
  A list of edges.
  """
  edges: [ProgramEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramEdge {
  """
  The item at the end of the edge.
  """
  node: Program
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ProgramHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ProgramHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the program
  """
  name: String!
  """
  the description of the program
  """
  description: String
  """
  the status of the program
  """
  status: ProgramHistoryProgramStatus!
  """
  the type of the program
  """
  programType: ProgramHistoryProgramType!
  """
  the short name of the compliance standard the program is based on, only used for framework type programs
  """
  frameworkName: String
  """
  the start date of the period
  """
  startDate: Time
  """
  the end date of the period
  """
  endDate: Time
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean!
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean!
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean!
  """
  the name of the audit firm conducting the audit
  """
  auditFirm: String
  """
  the full name of the auditor conducting the audit
  """
  auditor: String
  """
  the email of the auditor conducting the audit
  """
  auditorEmail: String
}
"""
A connection to a list of items.
"""
type ProgramHistoryConnection {
  """
  A list of edges.
  """
  edges: [ProgramHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProgramHistoryOpType is enum for the field operation
"""
enum ProgramHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ProgramHistory connections
"""
input ProgramHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ProgramHistories.
  """
  field: ProgramHistoryOrderField!
}
"""
Properties by which ProgramHistory connections can be ordered.
"""
enum ProgramHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  STATUS
  PROGRAM_TYPE
  framework
  start_date
  end_date
}
"""
ProgramHistoryProgramStatus is enum for the field status
"""
enum ProgramHistoryProgramStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramStatus") {
  NOT_STARTED
  IN_PROGRESS
  ACTION_REQUIRED
  READY_FOR_AUDITOR
  COMPLETED
  ARCHIVED
}
"""
ProgramHistoryProgramType is enum for the field program_type
"""
enum ProgramHistoryProgramType @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramType") {
  FRAMEWORK
  GAP_ANALYSIS
  RISK_ASSESSMENT
  OTHER
}
"""
ProgramHistoryWhereInput is used for filtering ProgramHistory objects.
Input was generated by ent.
"""
input ProgramHistoryWhereInput {
  not: ProgramHistoryWhereInput
  and: [ProgramHistoryWhereInput!]
  or: [ProgramHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ProgramHistoryOpType
  operationNEQ: ProgramHistoryOpType
  operationIn: [ProgramHistoryOpType!]
  operationNotIn: [ProgramHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: ProgramHistoryProgramStatus
  statusNEQ: ProgramHistoryProgramStatus
  statusIn: [ProgramHistoryProgramStatus!]
  statusNotIn: [ProgramHistoryProgramStatus!]
  """
  program_type field predicates
  """
  programType: ProgramHistoryProgramType
  programTypeNEQ: ProgramHistoryProgramType
  programTypeIn: [ProgramHistoryProgramType!]
  programTypeNotIn: [ProgramHistoryProgramType!]
  """
  framework_name field predicates
  """
  frameworkName: String
  frameworkNameNEQ: String
  frameworkNameIn: [String!]
  frameworkNameNotIn: [String!]
  frameworkNameGT: String
  frameworkNameGTE: String
  frameworkNameLT: String
  frameworkNameLTE: String
  frameworkNameContains: String
  frameworkNameHasPrefix: String
  frameworkNameHasSuffix: String
  frameworkNameIsNil: Boolean
  frameworkNameNotNil: Boolean
  frameworkNameEqualFold: String
  frameworkNameContainsFold: String
  """
  start_date field predicates
  """
  startDate: Time
  startDateNEQ: Time
  startDateIn: [Time!]
  startDateNotIn: [Time!]
  startDateGT: Time
  startDateGTE: Time
  startDateLT: Time
  startDateLTE: Time
  startDateIsNil: Boolean
  startDateNotNil: Boolean
  """
  end_date field predicates
  """
  endDate: Time
  endDateNEQ: Time
  endDateIn: [Time!]
  endDateNotIn: [Time!]
  endDateGT: Time
  endDateGTE: Time
  endDateLT: Time
  endDateLTE: Time
  endDateIsNil: Boolean
  endDateNotNil: Boolean
  """
  auditor_ready field predicates
  """
  auditorReady: Boolean
  auditorReadyNEQ: Boolean
  """
  auditor_write_comments field predicates
  """
  auditorWriteComments: Boolean
  auditorWriteCommentsNEQ: Boolean
  """
  auditor_read_comments field predicates
  """
  auditorReadComments: Boolean
  auditorReadCommentsNEQ: Boolean
  """
  audit_firm field predicates
  """
  auditFirm: String
  auditFirmNEQ: String
  auditFirmIn: [String!]
  auditFirmNotIn: [String!]
  auditFirmGT: String
  auditFirmGTE: String
  auditFirmLT: String
  auditFirmLTE: String
  auditFirmContains: String
  auditFirmHasPrefix: String
  auditFirmHasSuffix: String
  auditFirmIsNil: Boolean
  auditFirmNotNil: Boolean
  auditFirmEqualFold: String
  auditFirmContainsFold: String
  """
  auditor field predicates
  """
  auditor: String
  auditorNEQ: String
  auditorIn: [String!]
  auditorNotIn: [String!]
  auditorGT: String
  auditorGTE: String
  auditorLT: String
  auditorLTE: String
  auditorContains: String
  auditorHasPrefix: String
  auditorHasSuffix: String
  auditorIsNil: Boolean
  auditorNotNil: Boolean
  auditorEqualFold: String
  auditorContainsFold: String
  """
  auditor_email field predicates
  """
  auditorEmail: String
  auditorEmailNEQ: String
  auditorEmailIn: [String!]
  auditorEmailNotIn: [String!]
  auditorEmailGT: String
  auditorEmailGTE: String
  auditorEmailLT: String
  auditorEmailLTE: String
  auditorEmailContains: String
  auditorEmailHasPrefix: String
  auditorEmailHasSuffix: String
  auditorEmailIsNil: Boolean
  auditorEmailNotNil: Boolean
  auditorEmailEqualFold: String
  auditorEmailContainsFold: String
}
type ProgramMembership implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  role: ProgramMembershipRole!
  programID: ID!
  userID: ID!
  program: Program!
  user: User!
}
"""
A connection to a list of items.
"""
type ProgramMembershipConnection {
  """
  A list of edges.
  """
  edges: [ProgramMembershipEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramMembershipEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramMembership
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ProgramMembershipHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ProgramMembershipHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  role: ProgramMembershipHistoryRole!
  programID: String!
  userID: String!
}
"""
A connection to a list of items.
"""
type ProgramMembershipHistoryConnection {
  """
  A list of edges.
  """
  edges: [ProgramMembershipHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramMembershipHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramMembershipHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProgramMembershipHistoryOpType is enum for the field operation
"""
enum ProgramMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ProgramMembershipHistory connections
"""
input ProgramMembershipHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ProgramMembershipHistories.
  """
  field: ProgramMembershipHistoryOrderField!
}
"""
Properties by which ProgramMembershipHistory connections can be ordered.
"""
enum ProgramMembershipHistoryOrderField {
  history_time
  created_at
  updated_at
  ROLE
}
"""
ProgramMembershipHistoryRole is enum for the field role
"""
enum ProgramMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
ProgramMembershipHistoryWhereInput is used for filtering ProgramMembershipHistory objects.
Input was generated by ent.
"""
input ProgramMembershipHistoryWhereInput {
  not: ProgramMembershipHistoryWhereInput
  and: [ProgramMembershipHistoryWhereInput!]
  or: [ProgramMembershipHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ProgramMembershipHistoryOpType
  operationNEQ: ProgramMembershipHistoryOpType
  operationIn: [ProgramMembershipHistoryOpType!]
  operationNotIn: [ProgramMembershipHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  role field predicates
  """
  role: ProgramMembershipHistoryRole
  roleNEQ: ProgramMembershipHistoryRole
  roleIn: [ProgramMembershipHistoryRole!]
  roleNotIn: [ProgramMembershipHistoryRole!]
  """
  program_id field predicates
  """
  programID: String
  programIDNEQ: String
  programIDIn: [String!]
  programIDNotIn: [String!]
  programIDGT: String
  programIDGTE: String
  programIDLT: String
  programIDLTE: String
  programIDContains: String
  programIDHasPrefix: String
  programIDHasSuffix: String
  programIDEqualFold: String
  programIDContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
}
"""
Ordering options for ProgramMembership connections
"""
input ProgramMembershipOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ProgramMemberships.
  """
  field: ProgramMembershipOrderField!
}
"""
Properties by which ProgramMembership connections can be ordered.
"""
enum ProgramMembershipOrderField {
  created_at
  updated_at
  ROLE
}
"""
ProgramMembershipRole is enum for the field role
"""
enum ProgramMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
ProgramMembershipWhereInput is used for filtering ProgramMembership objects.
Input was generated by ent.
"""
input ProgramMembershipWhereInput {
  not: ProgramMembershipWhereInput
  and: [ProgramMembershipWhereInput!]
  or: [ProgramMembershipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  role field predicates
  """
  role: ProgramMembershipRole
  roleNEQ: ProgramMembershipRole
  roleIn: [ProgramMembershipRole!]
  roleNotIn: [ProgramMembershipRole!]
}
"""
Ordering options for Program connections
"""
input ProgramOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Programs.
  """
  field: ProgramOrderField!
}
"""
Properties by which Program connections can be ordered.
"""
enum ProgramOrderField {
  created_at
  updated_at
  name
  STATUS
  PROGRAM_TYPE
  framework
  start_date
  end_date
}
"""
ProgramProgramStatus is enum for the field status
"""
enum ProgramProgramStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramStatus") {
  NOT_STARTED
  IN_PROGRESS
  ACTION_REQUIRED
  READY_FOR_AUDITOR
  COMPLETED
  ARCHIVED
}
"""
ProgramProgramType is enum for the field program_type
"""
enum ProgramProgramType @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramType") {
  FRAMEWORK
  GAP_ANALYSIS
  RISK_ASSESSMENT
  OTHER
}
"""
ProgramWhereInput is used for filtering Program objects.
Input was generated by ent.
"""
input ProgramWhereInput {
  not: ProgramWhereInput
  and: [ProgramWhereInput!]
  or: [ProgramWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: ProgramProgramStatus
  statusNEQ: ProgramProgramStatus
  statusIn: [ProgramProgramStatus!]
  statusNotIn: [ProgramProgramStatus!]
  """
  program_type field predicates
  """
  programType: ProgramProgramType
  programTypeNEQ: ProgramProgramType
  programTypeIn: [ProgramProgramType!]
  programTypeNotIn: [ProgramProgramType!]
  """
  framework_name field predicates
  """
  frameworkName: String
  frameworkNameNEQ: String
  frameworkNameIn: [String!]
  frameworkNameNotIn: [String!]
  frameworkNameGT: String
  frameworkNameGTE: String
  frameworkNameLT: String
  frameworkNameLTE: String
  frameworkNameContains: String
  frameworkNameHasPrefix: String
  frameworkNameHasSuffix: String
  frameworkNameIsNil: Boolean
  frameworkNameNotNil: Boolean
  frameworkNameEqualFold: String
  frameworkNameContainsFold: String
  """
  start_date field predicates
  """
  startDate: Time
  startDateNEQ: Time
  startDateIn: [Time!]
  startDateNotIn: [Time!]
  startDateGT: Time
  startDateGTE: Time
  startDateLT: Time
  startDateLTE: Time
  startDateIsNil: Boolean
  startDateNotNil: Boolean
  """
  end_date field predicates
  """
  endDate: Time
  endDateNEQ: Time
  endDateIn: [Time!]
  endDateNotIn: [Time!]
  endDateGT: Time
  endDateGTE: Time
  endDateLT: Time
  endDateLTE: Time
  endDateIsNil: Boolean
  endDateNotNil: Boolean
  """
  auditor_ready field predicates
  """
  auditorReady: Boolean
  auditorReadyNEQ: Boolean
  """
  auditor_write_comments field predicates
  """
  auditorWriteComments: Boolean
  auditorWriteCommentsNEQ: Boolean
  """
  auditor_read_comments field predicates
  """
  auditorReadComments: Boolean
  auditorReadCommentsNEQ: Boolean
  """
  audit_firm field predicates
  """
  auditFirm: String
  auditFirmNEQ: String
  auditFirmIn: [String!]
  auditFirmNotIn: [String!]
  auditFirmGT: String
  auditFirmGTE: String
  auditFirmLT: String
  auditFirmLTE: String
  auditFirmContains: String
  auditFirmHasPrefix: String
  auditFirmHasSuffix: String
  auditFirmIsNil: Boolean
  auditFirmNotNil: Boolean
  auditFirmEqualFold: String
  auditFirmContainsFold: String
  """
  auditor field predicates
  """
  auditor: String
  auditorNEQ: String
  auditorIn: [String!]
  auditorNotIn: [String!]
  auditorGT: String
  auditorGTE: String
  auditorLT: String
  auditorLTE: String
  auditorContains: String
  auditorHasPrefix: String
  auditorHasSuffix: String
  auditorIsNil: Boolean
  auditorNotNil: Boolean
  auditorEqualFold: String
  auditorContainsFold: String
  """
  auditor_email field predicates
  """
  auditorEmail: String
  auditorEmailNEQ: String
  auditorEmailIn: [String!]
  auditorEmailNotIn: [String!]
  auditorEmailGT: String
  auditorEmailGTE: String
  auditorEmailLT: String
  auditorEmailLTE: String
  auditorEmailContains: String
  auditorEmailHasPrefix: String
  auditorEmailHasSuffix: String
  auditorEmailIsNil: Boolean
  auditorEmailNotNil: Boolean
  auditorEmailEqualFold: String
  auditorEmailContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  notes edge predicates
  """
  hasNotes: Boolean
  hasNotesWith: [NoteWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  evidence edge predicates
  """
  hasEvidence: Boolean
  hasEvidenceWith: [EvidenceWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  members edge predicates
  """
  hasMembers: Boolean
  hasMembersWith: [ProgramMembershipWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  apiTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for APITokens returned from the connection.
    """
    orderBy: [APITokenOrder!]

    """
    Filtering options for APITokens returned from the connection.
    """
    where: APITokenWhereInput
  ): APITokenConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlans returned from the connection.
    """
    orderBy: [ActionPlanOrder!]

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  actionPlanHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlanHistories returned from the connection.
    """
    orderBy: ActionPlanHistoryOrder

    """
    Filtering options for ActionPlanHistories returned from the connection.
    """
    where: ActionPlanHistoryWhereInput
  ): ActionPlanHistoryConnection!
  assets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Assets returned from the connection.
    """
    orderBy: [AssetOrder!]

    """
    Filtering options for Assets returned from the connection.
    """
    where: AssetWhereInput
  ): AssetConnection!
  assetHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AssetHistories returned from the connection.
    """
    orderBy: AssetHistoryOrder

    """
    Filtering options for AssetHistories returned from the connection.
    """
    where: AssetHistoryWhereInput
  ): AssetHistoryConnection!
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Contacts returned from the connection.
    """
    orderBy: [ContactOrder!]

    """
    Filtering options for Contacts returned from the connection.
    """
    where: ContactWhereInput
  ): ContactConnection!
  contactHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ContactHistories returned from the connection.
    """
    orderBy: ContactHistoryOrder

    """
    Filtering options for ContactHistories returned from the connection.
    """
    where: ContactHistoryWhereInput
  ): ContactHistoryConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  controlHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlHistories returned from the connection.
    """
    orderBy: ControlHistoryOrder

    """
    Filtering options for ControlHistories returned from the connection.
    """
    where: ControlHistoryWhereInput
  ): ControlHistoryConnection!
  controlImplementations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  controlImplementationHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementationHistories returned from the connection.
    """
    orderBy: ControlImplementationHistoryOrder

    """
    Filtering options for ControlImplementationHistories returned from the connection.
    """
    where: ControlImplementationHistoryWhereInput
  ): ControlImplementationHistoryConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  controlObjectiveHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectiveHistories returned from the connection.
    """
    orderBy: ControlObjectiveHistoryOrder

    """
    Filtering options for ControlObjectiveHistories returned from the connection.
    """
    where: ControlObjectiveHistoryWhereInput
  ): ControlObjectiveHistoryConnection!
  customDomains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CustomDomains returned from the connection.
    """
    orderBy: [CustomDomainOrder!]

    """
    Filtering options for CustomDomains returned from the connection.
    """
    where: CustomDomainWhereInput
  ): CustomDomainConnection!
  customDomainHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CustomDomainHistories returned from the connection.
    """
    orderBy: CustomDomainHistoryOrder

    """
    Filtering options for CustomDomainHistories returned from the connection.
    """
    where: CustomDomainHistoryWhereInput
  ): CustomDomainHistoryConnection!
  dnsVerifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DNSVerifications returned from the connection.
    """
    orderBy: [DNSVerificationOrder!]

    """
    Filtering options for DNSVerifications returned from the connection.
    """
    where: DNSVerificationWhereInput
  ): DNSVerificationConnection!
  dnsVerificationHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DNSVerificationHistories returned from the connection.
    """
    orderBy: DNSVerificationHistoryOrder

    """
    Filtering options for DNSVerificationHistories returned from the connection.
    """
    where: DNSVerificationHistoryWhereInput
  ): DNSVerificationHistoryConnection!
  documentDataSlice(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DocumentDataSlice returned from the connection.
    """
    orderBy: [DocumentDataOrder!]

    """
    Filtering options for DocumentDataSlice returned from the connection.
    """
    where: DocumentDataWhereInput
  ): DocumentDataConnection!
  documentDataHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DocumentDataHistories returned from the connection.
    """
    orderBy: DocumentDataHistoryOrder

    """
    Filtering options for DocumentDataHistories returned from the connection.
    """
    where: DocumentDataHistoryWhereInput
  ): DocumentDataHistoryConnection!
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  entityHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EntityHistories returned from the connection.
    """
    orderBy: EntityHistoryOrder

    """
    Filtering options for EntityHistories returned from the connection.
    """
    where: EntityHistoryWhereInput
  ): EntityHistoryConnection!
  entityTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EntityTypes returned from the connection.
    """
    orderBy: [EntityTypeOrder!]

    """
    Filtering options for EntityTypes returned from the connection.
    """
    where: EntityTypeWhereInput
  ): EntityTypeConnection!
  entityTypeHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EntityTypeHistories returned from the connection.
    """
    orderBy: EntityTypeHistoryOrder

    """
    Filtering options for EntityTypeHistories returned from the connection.
    """
    where: EntityTypeHistoryWhereInput
  ): EntityTypeHistoryConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  evidences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Evidences returned from the connection.
    """
    orderBy: [EvidenceOrder!]

    """
    Filtering options for Evidences returned from the connection.
    """
    where: EvidenceWhereInput
  ): EvidenceConnection!
  evidenceHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EvidenceHistories returned from the connection.
    """
    orderBy: EvidenceHistoryOrder

    """
    Filtering options for EvidenceHistories returned from the connection.
    """
    where: EvidenceHistoryWhereInput
  ): EvidenceHistoryConnection!
  exports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Exports returned from the connection.
    """
    orderBy: [ExportOrder!]

    """
    Filtering options for Exports returned from the connection.
    """
    where: ExportWhereInput
  ): ExportConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  fileHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for FileHistories returned from the connection.
    """
    orderBy: FileHistoryOrder

    """
    Filtering options for FileHistories returned from the connection.
    """
    where: FileHistoryWhereInput
  ): FileHistoryConnection!
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  groupHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupHistories returned from the connection.
    """
    orderBy: GroupHistoryOrder

    """
    Filtering options for GroupHistories returned from the connection.
    """
    where: GroupHistoryWhereInput
  ): GroupHistoryConnection!
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupMemberships returned from the connection.
    """
    orderBy: [GroupMembershipOrder!]

    """
    Filtering options for GroupMemberships returned from the connection.
    """
    where: GroupMembershipWhereInput
  ): GroupMembershipConnection!
  groupMembershipHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupMembershipHistories returned from the connection.
    """
    orderBy: GroupMembershipHistoryOrder

    """
    Filtering options for GroupMembershipHistories returned from the connection.
    """
    where: GroupMembershipHistoryWhereInput
  ): GroupMembershipHistoryConnection!
  groupSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupSettings returned from the connection.
    """
    orderBy: [GroupSettingOrder!]

    """
    Filtering options for GroupSettings returned from the connection.
    """
    where: GroupSettingWhereInput
  ): GroupSettingConnection!
  groupSettingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupSettingHistories returned from the connection.
    """
    orderBy: GroupSettingHistoryOrder

    """
    Filtering options for GroupSettingHistories returned from the connection.
    """
    where: GroupSettingHistoryWhereInput
  ): GroupSettingHistoryConnection!
  hushes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Hushes returned from the connection.
    """
    orderBy: [HushOrder!]

    """
    Filtering options for Hushes returned from the connection.
    """
    where: HushWhereInput
  ): HushConnection!
  hushHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for HushHistories returned from the connection.
    """
    orderBy: HushHistoryOrder

    """
    Filtering options for HushHistories returned from the connection.
    """
    where: HushHistoryWhereInput
  ): HushHistoryConnection!
  integrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Integrations returned from the connection.
    """
    orderBy: [IntegrationOrder!]

    """
    Filtering options for Integrations returned from the connection.
    """
    where: IntegrationWhereInput
  ): IntegrationConnection!
  integrationHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IntegrationHistories returned from the connection.
    """
    orderBy: IntegrationHistoryOrder

    """
    Filtering options for IntegrationHistories returned from the connection.
    """
    where: IntegrationHistoryWhereInput
  ): IntegrationHistoryConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  internalPolicyHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicyHistories returned from the connection.
    """
    orderBy: InternalPolicyHistoryOrder

    """
    Filtering options for InternalPolicyHistories returned from the connection.
    """
    where: InternalPolicyHistoryWhereInput
  ): InternalPolicyHistoryConnection!
  invites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Invites returned from the connection.
    """
    orderBy: [InviteOrder!]

    """
    Filtering options for Invites returned from the connection.
    """
    where: InviteWhereInput
  ): InviteConnection!
  jobResults(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobResults returned from the connection.
    """
    orderBy: [JobResultOrder!]

    """
    Filtering options for JobResults returned from the connection.
    """
    where: JobResultWhereInput
  ): JobResultConnection!
  jobRunners(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunners returned from the connection.
    """
    orderBy: [JobRunnerOrder!]

    """
    Filtering options for JobRunners returned from the connection.
    """
    where: JobRunnerWhereInput
  ): JobRunnerConnection!
  jobRunnerRegistrationTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunnerRegistrationTokens returned from the connection.
    """
    orderBy: [JobRunnerRegistrationTokenOrder!]

    """
    Filtering options for JobRunnerRegistrationTokens returned from the connection.
    """
    where: JobRunnerRegistrationTokenWhereInput
  ): JobRunnerRegistrationTokenConnection!
  jobRunnerTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobRunnerTokens returned from the connection.
    """
    orderBy: [JobRunnerTokenOrder!]

    """
    Filtering options for JobRunnerTokens returned from the connection.
    """
    where: JobRunnerTokenWhereInput
  ): JobRunnerTokenConnection!
  jobTemplates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobTemplates returned from the connection.
    """
    orderBy: [JobTemplateOrder!]

    """
    Filtering options for JobTemplates returned from the connection.
    """
    where: JobTemplateWhereInput
  ): JobTemplateConnection!
  jobTemplateHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for JobTemplateHistories returned from the connection.
    """
    orderBy: JobTemplateHistoryOrder

    """
    Filtering options for JobTemplateHistories returned from the connection.
    """
    where: JobTemplateHistoryWhereInput
  ): JobTemplateHistoryConnection!
  mappableDomains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MappableDomains returned from the connection.
    """
    orderBy: [MappableDomainOrder!]

    """
    Filtering options for MappableDomains returned from the connection.
    """
    where: MappableDomainWhereInput
  ): MappableDomainConnection!
  mappableDomainHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MappableDomainHistories returned from the connection.
    """
    orderBy: MappableDomainHistoryOrder

    """
    Filtering options for MappableDomainHistories returned from the connection.
    """
    where: MappableDomainHistoryWhereInput
  ): MappableDomainHistoryConnection!
  mappedControls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MappedControls returned from the connection.
    """
    orderBy: [MappedControlOrder!]

    """
    Filtering options for MappedControls returned from the connection.
    """
    where: MappedControlWhereInput
  ): MappedControlConnection!
  mappedControlHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MappedControlHistories returned from the connection.
    """
    orderBy: MappedControlHistoryOrder

    """
    Filtering options for MappedControlHistories returned from the connection.
    """
    where: MappedControlHistoryWhereInput
  ): MappedControlHistoryConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  narrativeHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for NarrativeHistories returned from the connection.
    """
    orderBy: NarrativeHistoryOrder

    """
    Filtering options for NarrativeHistories returned from the connection.
    """
    where: NarrativeHistoryWhereInput
  ): NarrativeHistoryConnection!
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Notes returned from the connection.
    """
    orderBy: [NoteOrder!]

    """
    Filtering options for Notes returned from the connection.
    """
    where: NoteWhereInput
  ): NoteConnection!
  noteHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for NoteHistories returned from the connection.
    """
    orderBy: NoteHistoryOrder

    """
    Filtering options for NoteHistories returned from the connection.
    """
    where: NoteHistoryWhereInput
  ): NoteHistoryConnection!
  orgMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgMemberships returned from the connection.
    """
    orderBy: [OrgMembershipOrder!]

    """
    Filtering options for OrgMemberships returned from the connection.
    """
    where: OrgMembershipWhereInput
  ): OrgMembershipConnection!
  orgMembershipHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgMembershipHistories returned from the connection.
    """
    orderBy: OrgMembershipHistoryOrder

    """
    Filtering options for OrgMembershipHistories returned from the connection.
    """
    where: OrgMembershipHistoryWhereInput
  ): OrgMembershipHistoryConnection!
  orgSubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgSubscriptions returned from the connection.
    """
    orderBy: OrgSubscriptionOrder

    """
    Filtering options for OrgSubscriptions returned from the connection.
    """
    where: OrgSubscriptionWhereInput
  ): OrgSubscriptionConnection!
  orgSubscriptionHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgSubscriptionHistories returned from the connection.
    """
    orderBy: OrgSubscriptionHistoryOrder

    """
    Filtering options for OrgSubscriptionHistories returned from the connection.
    """
    where: OrgSubscriptionHistoryWhereInput
  ): OrgSubscriptionHistoryConnection!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Organizations returned from the connection.
    """
    orderBy: [OrganizationOrder!]

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  organizationHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrganizationHistories returned from the connection.
    """
    orderBy: OrganizationHistoryOrder

    """
    Filtering options for OrganizationHistories returned from the connection.
    """
    where: OrganizationHistoryWhereInput
  ): OrganizationHistoryConnection!
  organizationSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrganizationSettings returned from the connection.
    """
    orderBy: [OrganizationSettingOrder!]

    """
    Filtering options for OrganizationSettings returned from the connection.
    """
    where: OrganizationSettingWhereInput
  ): OrganizationSettingConnection!
  organizationSettingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrganizationSettingHistories returned from the connection.
    """
    orderBy: OrganizationSettingHistoryOrder

    """
    Filtering options for OrganizationSettingHistories returned from the connection.
    """
    where: OrganizationSettingHistoryWhereInput
  ): OrganizationSettingHistoryConnection!
  personalAccessTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PersonalAccessTokens returned from the connection.
    """
    orderBy: [PersonalAccessTokenOrder!]

    """
    Filtering options for PersonalAccessTokens returned from the connection.
    """
    where: PersonalAccessTokenWhereInput
  ): PersonalAccessTokenConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  procedureHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProcedureHistories returned from the connection.
    """
    orderBy: ProcedureHistoryOrder

    """
    Filtering options for ProcedureHistories returned from the connection.
    """
    where: ProcedureHistoryWhereInput
  ): ProcedureHistoryConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  programHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProgramHistories returned from the connection.
    """
    orderBy: ProgramHistoryOrder

    """
    Filtering options for ProgramHistories returned from the connection.
    """
    where: ProgramHistoryWhereInput
  ): ProgramHistoryConnection!
  programMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProgramMemberships returned from the connection.
    """
    orderBy: [ProgramMembershipOrder!]

    """
    Filtering options for ProgramMemberships returned from the connection.
    """
    where: ProgramMembershipWhereInput
  ): ProgramMembershipConnection!
  programMembershipHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProgramMembershipHistories returned from the connection.
    """
    orderBy: ProgramMembershipHistoryOrder

    """
    Filtering options for ProgramMembershipHistories returned from the connection.
    """
    where: ProgramMembershipHistoryWhereInput
  ): ProgramMembershipHistoryConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  riskHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RiskHistories returned from the connection.
    """
    orderBy: RiskHistoryOrder

    """
    Filtering options for RiskHistories returned from the connection.
    """
    where: RiskHistoryWhereInput
  ): RiskHistoryConnection!
  scans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  scanHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScanHistories returned from the connection.
    """
    orderBy: ScanHistoryOrder

    """
    Filtering options for ScanHistories returned from the connection.
    """
    where: ScanHistoryWhereInput
  ): ScanHistoryConnection!
  scheduledJobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobs returned from the connection.
    """
    orderBy: [ScheduledJobOrder!]

    """
    Filtering options for ScheduledJobs returned from the connection.
    """
    where: ScheduledJobWhereInput
  ): ScheduledJobConnection!
  scheduledJobHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobHistories returned from the connection.
    """
    orderBy: ScheduledJobHistoryOrder

    """
    Filtering options for ScheduledJobHistories returned from the connection.
    """
    where: ScheduledJobHistoryWhereInput
  ): ScheduledJobHistoryConnection!
  scheduledJobRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobRuns returned from the connection.
    """
    orderBy: [ScheduledJobRunOrder!]

    """
    Filtering options for ScheduledJobRuns returned from the connection.
    """
    where: ScheduledJobRunWhereInput
  ): ScheduledJobRunConnection!
  standards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Standards returned from the connection.
    """
    orderBy: [StandardOrder!]

    """
    Filtering options for Standards returned from the connection.
    """
    where: StandardWhereInput
  ): StandardConnection!
  standardHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for StandardHistories returned from the connection.
    """
    orderBy: StandardHistoryOrder

    """
    Filtering options for StandardHistories returned from the connection.
    """
    where: StandardHistoryWhereInput
  ): StandardHistoryConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  subcontrolHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for SubcontrolHistories returned from the connection.
    """
    orderBy: SubcontrolHistoryOrder

    """
    Filtering options for SubcontrolHistories returned from the connection.
    """
    where: SubcontrolHistoryWhereInput
  ): SubcontrolHistoryConnection!
  subprocessors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subprocessors returned from the connection.
    """
    orderBy: [SubprocessorOrder!]

    """
    Filtering options for Subprocessors returned from the connection.
    """
    where: SubprocessorWhereInput
  ): SubprocessorConnection!
  subprocessorHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for SubprocessorHistories returned from the connection.
    """
    orderBy: SubprocessorHistoryOrder

    """
    Filtering options for SubprocessorHistories returned from the connection.
    """
    where: SubprocessorHistoryWhereInput
  ): SubprocessorHistoryConnection!
  subscribers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subscribers returned from the connection.
    """
    orderBy: [SubscriberOrder!]

    """
    Filtering options for Subscribers returned from the connection.
    """
    where: SubscriberWhereInput
  ): SubscriberConnection!
  tfaSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TFASettings returned from the connection.
    """
    orderBy: [TFASettingOrder!]

    """
    Filtering options for TFASettings returned from the connection.
    """
    where: TFASettingWhereInput
  ): TFASettingConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  taskHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TaskHistories returned from the connection.
    """
    orderBy: TaskHistoryOrder

    """
    Filtering options for TaskHistories returned from the connection.
    """
    where: TaskHistoryWhereInput
  ): TaskHistoryConnection!
  templates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Templates returned from the connection.
    """
    orderBy: [TemplateOrder!]

    """
    Filtering options for Templates returned from the connection.
    """
    where: TemplateWhereInput
  ): TemplateConnection!
  templateHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TemplateHistories returned from the connection.
    """
    orderBy: TemplateHistoryOrder

    """
    Filtering options for TemplateHistories returned from the connection.
    """
    where: TemplateHistoryWhereInput
  ): TemplateHistoryConnection!
  trustCenters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenters returned from the connection.
    """
    orderBy: [TrustCenterOrder!]

    """
    Filtering options for TrustCenters returned from the connection.
    """
    where: TrustCenterWhereInput
  ): TrustCenterConnection!
  trustCenterCompliances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterCompliances returned from the connection.
    """
    orderBy: [TrustCenterComplianceOrder!]

    """
    Filtering options for TrustCenterCompliances returned from the connection.
    """
    where: TrustCenterComplianceWhereInput
  ): TrustCenterComplianceConnection!
  trustCenterComplianceHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterComplianceHistories returned from the connection.
    """
    orderBy: TrustCenterComplianceHistoryOrder

    """
    Filtering options for TrustCenterComplianceHistories returned from the connection.
    """
    where: TrustCenterComplianceHistoryWhereInput
  ): TrustCenterComplianceHistoryConnection!
  trustCenterDocs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterDocs returned from the connection.
    """
    orderBy: [TrustCenterDocOrder!]

    """
    Filtering options for TrustCenterDocs returned from the connection.
    """
    where: TrustCenterDocWhereInput
  ): TrustCenterDocConnection!
  trustCenterDocHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterDocHistories returned from the connection.
    """
    orderBy: TrustCenterDocHistoryOrder

    """
    Filtering options for TrustCenterDocHistories returned from the connection.
    """
    where: TrustCenterDocHistoryWhereInput
  ): TrustCenterDocHistoryConnection!
  trustCenterHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterHistories returned from the connection.
    """
    orderBy: TrustCenterHistoryOrder

    """
    Filtering options for TrustCenterHistories returned from the connection.
    """
    where: TrustCenterHistoryWhereInput
  ): TrustCenterHistoryConnection!
  trustCenterSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterSettings returned from the connection.
    """
    orderBy: [TrustCenterSettingOrder!]

    """
    Filtering options for TrustCenterSettings returned from the connection.
    """
    where: TrustCenterSettingWhereInput
  ): TrustCenterSettingConnection!
  trustCenterSettingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterSettingHistories returned from the connection.
    """
    orderBy: TrustCenterSettingHistoryOrder

    """
    Filtering options for TrustCenterSettingHistories returned from the connection.
    """
    where: TrustCenterSettingHistoryWhereInput
  ): TrustCenterSettingHistoryConnection!
  trustCenterSubprocessors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterSubprocessors returned from the connection.
    """
    orderBy: [TrustCenterSubprocessorOrder!]

    """
    Filtering options for TrustCenterSubprocessors returned from the connection.
    """
    where: TrustCenterSubprocessorWhereInput
  ): TrustCenterSubprocessorConnection!
  trustCenterSubprocessorHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterSubprocessorHistories returned from the connection.
    """
    orderBy: TrustCenterSubprocessorHistoryOrder

    """
    Filtering options for TrustCenterSubprocessorHistories returned from the connection.
    """
    where: TrustCenterSubprocessorHistoryWhereInput
  ): TrustCenterSubprocessorHistoryConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  userHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserHistories returned from the connection.
    """
    orderBy: UserHistoryOrder

    """
    Filtering options for UserHistories returned from the connection.
    """
    where: UserHistoryWhereInput
  ): UserHistoryConnection!
  userSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserSettings returned from the connection.
    """
    orderBy: [UserSettingOrder!]

    """
    Filtering options for UserSettings returned from the connection.
    """
    where: UserSettingWhereInput
  ): UserSettingConnection!
  userSettingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserSettingHistories returned from the connection.
    """
    orderBy: UserSettingHistoryOrder

    """
    Filtering options for UserSettingHistories returned from the connection.
    """
    where: UserSettingHistoryWhereInput
  ): UserSettingHistoryConnection!
  webauthns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Webauthns returned from the connection.
    """
    orderBy: WebauthnOrder

    """
    Filtering options for Webauthns returned from the connection.
    """
    where: WebauthnWhereInput
  ): WebauthnConnection!
}
type Risk implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the name of the risk
  """
  name: String!
  """
  status of the risk - open, mitigated, ongoing, in-progress, and archived.
  """
  status: RiskRiskStatus
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  """
  category of the risk, e.g. human resources, operations, IT, etc.
  """
  category: String
  """
  impact of the risk -critical, high, medium, low
  """
  impact: RiskRiskImpact
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskRiskLikelihood
  """
  score of the risk based on impact and likelihood (1-4 unlikely, 5-9 likely, 10-16 highly likely, 17-20 critical)
  """
  score: Int
  """
  mitigation for the risk
  """
  mitigation: String
  """
  details of the risk
  """
  details: String
  """
  business costs associated with the risk
  """
  businessCosts: String
  """
  the id of the group responsible for risk oversight
  """
  stakeholderID: ID
  """
  the id of the group responsible for risk oversight on behalf of the stakeholder
  """
  delegateID: ID
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlans returned from the connection.
    """
    orderBy: [ActionPlanOrder!]

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  assets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Assets returned from the connection.
    """
    orderBy: [AssetOrder!]

    """
    Filtering options for Assets returned from the connection.
    """
    where: AssetWhereInput
  ): AssetConnection!
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  scans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Scans returned from the connection.
    """
    orderBy: [ScanOrder!]

    """
    Filtering options for Scans returned from the connection.
    """
    where: ScanWhereInput
  ): ScanConnection!
  """
  the group of users who are responsible for risk oversight
  """
  stakeholder: Group
  """
  temporary delegates for the risk, used for temporary ownership
  """
  delegate: Group
}
"""
A connection to a list of items.
"""
type RiskConnection {
  """
  A list of edges.
  """
  edges: [RiskEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RiskEdge {
  """
  The item at the end of the edge.
  """
  node: Risk
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RiskHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: RiskHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the name of the risk
  """
  name: String!
  """
  status of the risk - open, mitigated, ongoing, in-progress, and archived.
  """
  status: RiskHistoryRiskStatus
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  """
  category of the risk, e.g. human resources, operations, IT, etc.
  """
  category: String
  """
  impact of the risk -critical, high, medium, low
  """
  impact: RiskHistoryRiskImpact
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskHistoryRiskLikelihood
  """
  score of the risk based on impact and likelihood (1-4 unlikely, 5-9 likely, 10-16 highly likely, 17-20 critical)
  """
  score: Int
  """
  mitigation for the risk
  """
  mitigation: String
  """
  details of the risk
  """
  details: String
  """
  business costs associated with the risk
  """
  businessCosts: String
  """
  the id of the group responsible for risk oversight
  """
  stakeholderID: String
  """
  the id of the group responsible for risk oversight on behalf of the stakeholder
  """
  delegateID: String
}
"""
A connection to a list of items.
"""
type RiskHistoryConnection {
  """
  A list of edges.
  """
  edges: [RiskHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RiskHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: RiskHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
RiskHistoryOpType is enum for the field operation
"""
enum RiskHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for RiskHistory connections
"""
input RiskHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RiskHistories.
  """
  field: RiskHistoryOrderField!
}
"""
Properties by which RiskHistory connections can be ordered.
"""
enum RiskHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  STATUS
  risk_type
  category
  IMPACT
  LIKELIHOOD
  score
  business_costs
}
"""
RiskHistoryRiskImpact is enum for the field impact
"""
enum RiskHistoryRiskImpact @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskImpact") {
  LOW
  MODERATE
  HIGH
  CRITICAL
}
"""
RiskHistoryRiskLikelihood is enum for the field likelihood
"""
enum RiskHistoryRiskLikelihood @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskLikelihood") {
  UNLIKELY
  LIKELY
  HIGHLY_LIKELY
}
"""
RiskHistoryRiskStatus is enum for the field status
"""
enum RiskHistoryRiskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskStatus") {
  OPEN
  IN_PROGRESS
  ONGOING
  MITIGATED
  ARCHIVED
}
"""
RiskHistoryWhereInput is used for filtering RiskHistory objects.
Input was generated by ent.
"""
input RiskHistoryWhereInput {
  not: RiskHistoryWhereInput
  and: [RiskHistoryWhereInput!]
  or: [RiskHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: RiskHistoryOpType
  operationNEQ: RiskHistoryOpType
  operationIn: [RiskHistoryOpType!]
  operationNotIn: [RiskHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: RiskHistoryRiskStatus
  statusNEQ: RiskHistoryRiskStatus
  statusIn: [RiskHistoryRiskStatus!]
  statusNotIn: [RiskHistoryRiskStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  risk_type field predicates
  """
  riskType: String
  riskTypeNEQ: String
  riskTypeIn: [String!]
  riskTypeNotIn: [String!]
  riskTypeGT: String
  riskTypeGTE: String
  riskTypeLT: String
  riskTypeLTE: String
  riskTypeContains: String
  riskTypeHasPrefix: String
  riskTypeHasSuffix: String
  riskTypeIsNil: Boolean
  riskTypeNotNil: Boolean
  riskTypeEqualFold: String
  riskTypeContainsFold: String
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  impact field predicates
  """
  impact: RiskHistoryRiskImpact
  impactNEQ: RiskHistoryRiskImpact
  impactIn: [RiskHistoryRiskImpact!]
  impactNotIn: [RiskHistoryRiskImpact!]
  impactIsNil: Boolean
  impactNotNil: Boolean
  """
  likelihood field predicates
  """
  likelihood: RiskHistoryRiskLikelihood
  likelihoodNEQ: RiskHistoryRiskLikelihood
  likelihoodIn: [RiskHistoryRiskLikelihood!]
  likelihoodNotIn: [RiskHistoryRiskLikelihood!]
  likelihoodIsNil: Boolean
  likelihoodNotNil: Boolean
  """
  score field predicates
  """
  score: Int
  scoreNEQ: Int
  scoreIn: [Int!]
  scoreNotIn: [Int!]
  scoreGT: Int
  scoreGTE: Int
  scoreLT: Int
  scoreLTE: Int
  scoreIsNil: Boolean
  scoreNotNil: Boolean
  """
  mitigation field predicates
  """
  mitigation: String
  mitigationNEQ: String
  mitigationIn: [String!]
  mitigationNotIn: [String!]
  mitigationGT: String
  mitigationGTE: String
  mitigationLT: String
  mitigationLTE: String
  mitigationContains: String
  mitigationHasPrefix: String
  mitigationHasSuffix: String
  mitigationIsNil: Boolean
  mitigationNotNil: Boolean
  mitigationEqualFold: String
  mitigationContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  business_costs field predicates
  """
  businessCosts: String
  businessCostsNEQ: String
  businessCostsIn: [String!]
  businessCostsNotIn: [String!]
  businessCostsGT: String
  businessCostsGTE: String
  businessCostsLT: String
  businessCostsLTE: String
  businessCostsContains: String
  businessCostsHasPrefix: String
  businessCostsHasSuffix: String
  businessCostsIsNil: Boolean
  businessCostsNotNil: Boolean
  businessCostsEqualFold: String
  businessCostsContainsFold: String
  """
  stakeholder_id field predicates
  """
  stakeholderID: String
  stakeholderIDNEQ: String
  stakeholderIDIn: [String!]
  stakeholderIDNotIn: [String!]
  stakeholderIDGT: String
  stakeholderIDGTE: String
  stakeholderIDLT: String
  stakeholderIDLTE: String
  stakeholderIDContains: String
  stakeholderIDHasPrefix: String
  stakeholderIDHasSuffix: String
  stakeholderIDIsNil: Boolean
  stakeholderIDNotNil: Boolean
  stakeholderIDEqualFold: String
  stakeholderIDContainsFold: String
  """
  delegate_id field predicates
  """
  delegateID: String
  delegateIDNEQ: String
  delegateIDIn: [String!]
  delegateIDNotIn: [String!]
  delegateIDGT: String
  delegateIDGTE: String
  delegateIDLT: String
  delegateIDLTE: String
  delegateIDContains: String
  delegateIDHasPrefix: String
  delegateIDHasSuffix: String
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: String
  delegateIDContainsFold: String
}
"""
Ordering options for Risk connections
"""
input RiskOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Risks.
  """
  field: RiskOrderField!
}
"""
Properties by which Risk connections can be ordered.
"""
enum RiskOrderField {
  created_at
  updated_at
  name
  STATUS
  risk_type
  category
  IMPACT
  LIKELIHOOD
  score
  business_costs
}
"""
RiskRiskImpact is enum for the field impact
"""
enum RiskRiskImpact @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskImpact") {
  LOW
  MODERATE
  HIGH
  CRITICAL
}
"""
RiskRiskLikelihood is enum for the field likelihood
"""
enum RiskRiskLikelihood @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskLikelihood") {
  UNLIKELY
  LIKELY
  HIGHLY_LIKELY
}
"""
RiskRiskStatus is enum for the field status
"""
enum RiskRiskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskStatus") {
  OPEN
  IN_PROGRESS
  ONGOING
  MITIGATED
  ARCHIVED
}
"""
RiskWhereInput is used for filtering Risk objects.
Input was generated by ent.
"""
input RiskWhereInput {
  not: RiskWhereInput
  and: [RiskWhereInput!]
  or: [RiskWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: RiskRiskStatus
  statusNEQ: RiskRiskStatus
  statusIn: [RiskRiskStatus!]
  statusNotIn: [RiskRiskStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  risk_type field predicates
  """
  riskType: String
  riskTypeNEQ: String
  riskTypeIn: [String!]
  riskTypeNotIn: [String!]
  riskTypeGT: String
  riskTypeGTE: String
  riskTypeLT: String
  riskTypeLTE: String
  riskTypeContains: String
  riskTypeHasPrefix: String
  riskTypeHasSuffix: String
  riskTypeIsNil: Boolean
  riskTypeNotNil: Boolean
  riskTypeEqualFold: String
  riskTypeContainsFold: String
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  impact field predicates
  """
  impact: RiskRiskImpact
  impactNEQ: RiskRiskImpact
  impactIn: [RiskRiskImpact!]
  impactNotIn: [RiskRiskImpact!]
  impactIsNil: Boolean
  impactNotNil: Boolean
  """
  likelihood field predicates
  """
  likelihood: RiskRiskLikelihood
  likelihoodNEQ: RiskRiskLikelihood
  likelihoodIn: [RiskRiskLikelihood!]
  likelihoodNotIn: [RiskRiskLikelihood!]
  likelihoodIsNil: Boolean
  likelihoodNotNil: Boolean
  """
  score field predicates
  """
  score: Int
  scoreNEQ: Int
  scoreIn: [Int!]
  scoreNotIn: [Int!]
  scoreGT: Int
  scoreGTE: Int
  scoreLT: Int
  scoreLTE: Int
  scoreIsNil: Boolean
  scoreNotNil: Boolean
  """
  mitigation field predicates
  """
  mitigation: String
  mitigationNEQ: String
  mitigationIn: [String!]
  mitigationNotIn: [String!]
  mitigationGT: String
  mitigationGTE: String
  mitigationLT: String
  mitigationLTE: String
  mitigationContains: String
  mitigationHasPrefix: String
  mitigationHasSuffix: String
  mitigationIsNil: Boolean
  mitigationNotNil: Boolean
  mitigationEqualFold: String
  mitigationContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  business_costs field predicates
  """
  businessCosts: String
  businessCostsNEQ: String
  businessCostsIn: [String!]
  businessCostsNotIn: [String!]
  businessCostsGT: String
  businessCostsGTE: String
  businessCostsLT: String
  businessCostsLTE: String
  businessCostsContains: String
  businessCostsHasPrefix: String
  businessCostsHasSuffix: String
  businessCostsIsNil: Boolean
  businessCostsNotNil: Boolean
  businessCostsEqualFold: String
  businessCostsContainsFold: String
  """
  stakeholder_id field predicates
  """
  stakeholderID: ID
  stakeholderIDNEQ: ID
  stakeholderIDIn: [ID!]
  stakeholderIDNotIn: [ID!]
  stakeholderIDGT: ID
  stakeholderIDGTE: ID
  stakeholderIDLT: ID
  stakeholderIDLTE: ID
  stakeholderIDContains: ID
  stakeholderIDHasPrefix: ID
  stakeholderIDHasSuffix: ID
  stakeholderIDIsNil: Boolean
  stakeholderIDNotNil: Boolean
  stakeholderIDEqualFold: ID
  stakeholderIDContainsFold: ID
  """
  delegate_id field predicates
  """
  delegateID: ID
  delegateIDNEQ: ID
  delegateIDIn: [ID!]
  delegateIDNotIn: [ID!]
  delegateIDGT: ID
  delegateIDGTE: ID
  delegateIDLT: ID
  delegateIDLTE: ID
  delegateIDContains: ID
  delegateIDHasPrefix: ID
  delegateIDHasSuffix: ID
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: ID
  delegateIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  assets edge predicates
  """
  hasAssets: Boolean
  hasAssetsWith: [AssetWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
  """
  scans edge predicates
  """
  hasScans: Boolean
  hasScansWith: [ScanWhereInput!]
  """
  stakeholder edge predicates
  """
  hasStakeholder: Boolean
  hasStakeholderWith: [GroupWhereInput!]
  """
  delegate edge predicates
  """
  hasDelegate: Boolean
  hasDelegateWith: [GroupWhereInput!]
}
type Scan implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the target of the scan, e.g., a domain name or IP address, codebase
  """
  target: String!
  """
  the type of scan, e.g., domain scan, vulnerability scan, provider scan
  """
  scanType: ScanScanType!
  """
  additional metadata for the scan, e.g., scan configuration, options, etc
  """
  metadata: Map
  """
  the status of the scan, e.g., processing, completed, failed
  """
  status: ScanScanStatus!
  owner: Organization
  blockedGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  editors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  viewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  assets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Assets returned from the connection.
    """
    orderBy: [AssetOrder!]

    """
    Filtering options for Assets returned from the connection.
    """
    where: AssetWhereInput
  ): AssetConnection!
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: [EntityOrder!]

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
}
"""
A connection to a list of items.
"""
type ScanConnection {
  """
  A list of edges.
  """
  edges: [ScanEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ScanEdge {
  """
  The item at the end of the edge.
  """
  node: Scan
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ScanHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ScanHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the target of the scan, e.g., a domain name or IP address, codebase
  """
  target: String!
  """
  the type of scan, e.g., domain scan, vulnerability scan, provider scan
  """
  scanType: ScanHistoryScanType!
  """
  additional metadata for the scan, e.g., scan configuration, options, etc
  """
  metadata: Map
  """
  the status of the scan, e.g., processing, completed, failed
  """
  status: ScanHistoryScanStatus!
}
"""
A connection to a list of items.
"""
type ScanHistoryConnection {
  """
  A list of edges.
  """
  edges: [ScanHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ScanHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ScanHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ScanHistoryOpType is enum for the field operation
"""
enum ScanHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ScanHistory connections
"""
input ScanHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ScanHistories.
  """
  field: ScanHistoryOrderField!
}
"""
Properties by which ScanHistory connections can be ordered.
"""
enum ScanHistoryOrderField {
  history_time
  created_at
  updated_at
  SCAN_TYPE
  STATUS
}
"""
ScanHistoryScanStatus is enum for the field status
"""
enum ScanHistoryScanStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ScanStatus") {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
"""
ScanHistoryScanType is enum for the field scan_type
"""
enum ScanHistoryScanType @goModel(model: "github.com/theopenlane/core/pkg/enums.ScanType") {
  DOMAIN
  VULNERABILITY
  VENDOR
  PROVIDER
}
"""
ScanHistoryWhereInput is used for filtering ScanHistory objects.
Input was generated by ent.
"""
input ScanHistoryWhereInput {
  not: ScanHistoryWhereInput
  and: [ScanHistoryWhereInput!]
  or: [ScanHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ScanHistoryOpType
  operationNEQ: ScanHistoryOpType
  operationIn: [ScanHistoryOpType!]
  operationNotIn: [ScanHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  target field predicates
  """
  target: String
  targetNEQ: String
  targetIn: [String!]
  targetNotIn: [String!]
  targetGT: String
  targetGTE: String
  targetLT: String
  targetLTE: String
  targetContains: String
  targetHasPrefix: String
  targetHasSuffix: String
  targetEqualFold: String
  targetContainsFold: String
  """
  scan_type field predicates
  """
  scanType: ScanHistoryScanType
  scanTypeNEQ: ScanHistoryScanType
  scanTypeIn: [ScanHistoryScanType!]
  scanTypeNotIn: [ScanHistoryScanType!]
  """
  status field predicates
  """
  status: ScanHistoryScanStatus
  statusNEQ: ScanHistoryScanStatus
  statusIn: [ScanHistoryScanStatus!]
  statusNotIn: [ScanHistoryScanStatus!]
}
"""
Ordering options for Scan connections
"""
input ScanOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Scans.
  """
  field: ScanOrderField!
}
"""
Properties by which Scan connections can be ordered.
"""
enum ScanOrderField {
  created_at
  updated_at
  SCAN_TYPE
  STATUS
}
"""
ScanScanStatus is enum for the field status
"""
enum ScanScanStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ScanStatus") {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
"""
ScanScanType is enum for the field scan_type
"""
enum ScanScanType @goModel(model: "github.com/theopenlane/core/pkg/enums.ScanType") {
  DOMAIN
  VULNERABILITY
  VENDOR
  PROVIDER
}
"""
ScanWhereInput is used for filtering Scan objects.
Input was generated by ent.
"""
input ScanWhereInput {
  not: ScanWhereInput
  and: [ScanWhereInput!]
  or: [ScanWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  target field predicates
  """
  target: String
  targetNEQ: String
  targetIn: [String!]
  targetNotIn: [String!]
  targetGT: String
  targetGTE: String
  targetLT: String
  targetLTE: String
  targetContains: String
  targetHasPrefix: String
  targetHasSuffix: String
  targetEqualFold: String
  targetContainsFold: String
  """
  scan_type field predicates
  """
  scanType: ScanScanType
  scanTypeNEQ: ScanScanType
  scanTypeIn: [ScanScanType!]
  scanTypeNotIn: [ScanScanType!]
  """
  status field predicates
  """
  status: ScanScanStatus
  statusNEQ: ScanScanStatus
  statusIn: [ScanScanStatus!]
  statusNotIn: [ScanScanStatus!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  assets edge predicates
  """
  hasAssets: Boolean
  hasAssetsWith: [AssetWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
}
type ScheduledJob implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the scheduled_job id to take the script to run from
  """
  jobID: ID!
  """
  whether the scheduled job is active
  """
  active: Boolean!
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  """
  cron 6-field syntax, defaults to the job template's cron if not provided
  """
  cron: String
  """
  the runner that this job will run on. If not set, it will scheduled on a general runner instead
  """
  jobRunnerID: ID
  owner: Organization
  jobTemplate: JobTemplate!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  jobRunner: JobRunner
}
"""
A connection to a list of items.
"""
type ScheduledJobConnection {
  """
  A list of edges.
  """
  edges: [ScheduledJobEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ScheduledJobEdge {
  """
  The item at the end of the edge.
  """
  node: ScheduledJob
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ScheduledJobHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ScheduledJobHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the scheduled_job id to take the script to run from
  """
  jobID: String!
  """
  whether the scheduled job is active
  """
  active: Boolean!
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  """
  cron 6-field syntax, defaults to the job template's cron if not provided
  """
  cron: String
  """
  the runner that this job will run on. If not set, it will scheduled on a general runner instead
  """
  jobRunnerID: String
}
"""
A connection to a list of items.
"""
type ScheduledJobHistoryConnection {
  """
  A list of edges.
  """
  edges: [ScheduledJobHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ScheduledJobHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ScheduledJobHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ScheduledJobHistoryOpType is enum for the field operation
"""
enum ScheduledJobHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for ScheduledJobHistory connections
"""
input ScheduledJobHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ScheduledJobHistories.
  """
  field: ScheduledJobHistoryOrderField!
}
"""
Properties by which ScheduledJobHistory connections can be ordered.
"""
enum ScheduledJobHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
ScheduledJobHistoryWhereInput is used for filtering ScheduledJobHistory objects.
Input was generated by ent.
"""
input ScheduledJobHistoryWhereInput {
  not: ScheduledJobHistoryWhereInput
  and: [ScheduledJobHistoryWhereInput!]
  or: [ScheduledJobHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ScheduledJobHistoryOpType
  operationNEQ: ScheduledJobHistoryOpType
  operationIn: [ScheduledJobHistoryOpType!]
  operationNotIn: [ScheduledJobHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  job_id field predicates
  """
  jobID: String
  jobIDNEQ: String
  jobIDIn: [String!]
  jobIDNotIn: [String!]
  jobIDGT: String
  jobIDGTE: String
  jobIDLT: String
  jobIDLTE: String
  jobIDContains: String
  jobIDHasPrefix: String
  jobIDHasSuffix: String
  jobIDEqualFold: String
  jobIDContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  job_runner_id field predicates
  """
  jobRunnerID: String
  jobRunnerIDNEQ: String
  jobRunnerIDIn: [String!]
  jobRunnerIDNotIn: [String!]
  jobRunnerIDGT: String
  jobRunnerIDGTE: String
  jobRunnerIDLT: String
  jobRunnerIDLTE: String
  jobRunnerIDContains: String
  jobRunnerIDHasPrefix: String
  jobRunnerIDHasSuffix: String
  jobRunnerIDIsNil: Boolean
  jobRunnerIDNotNil: Boolean
  jobRunnerIDEqualFold: String
  jobRunnerIDContainsFold: String
}
"""
Ordering options for ScheduledJob connections
"""
input ScheduledJobOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ScheduledJobs.
  """
  field: ScheduledJobOrderField!
}
"""
Properties by which ScheduledJob connections can be ordered.
"""
enum ScheduledJobOrderField {
  created_at
  updated_at
}
type ScheduledJobRun implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  The runner that this job will be executed on. Useful to know because of self hosted runners
  """
  jobRunnerID: ID!
  """
  The status of the job to be executed. By default will be pending but when
  			scheduled on a runner, this will change to acquired.
  """
  status: ScheduledJobRunScheduledJobRunStatus!
  """
  the parent job for this run
  """
  scheduledJobID: ID!
  """
  When should this job execute on the agent. Since we might potentially schedule a few minutes before
  """
  expectedExecutionTime: Time!
  """
  the script that will be executed by the agent.
  This script will be templated with the values from the configuration on the job
  """
  script: String!
  owner: Organization
  scheduledJob: ScheduledJob!
  jobRunner: JobRunner!
}
"""
A connection to a list of items.
"""
type ScheduledJobRunConnection {
  """
  A list of edges.
  """
  edges: [ScheduledJobRunEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ScheduledJobRunEdge {
  """
  The item at the end of the edge.
  """
  node: ScheduledJobRun
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ScheduledJobRun connections
"""
input ScheduledJobRunOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ScheduledJobRuns.
  """
  field: ScheduledJobRunOrderField!
}
"""
Properties by which ScheduledJobRun connections can be ordered.
"""
enum ScheduledJobRunOrderField {
  created_at
  updated_at
}
"""
ScheduledJobRunScheduledJobRunStatus is enum for the field status
"""
enum ScheduledJobRunScheduledJobRunStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ScheduledJobRunStatus") {
  PENDING
  ACQUIRED
}
"""
ScheduledJobRunWhereInput is used for filtering ScheduledJobRun objects.
Input was generated by ent.
"""
input ScheduledJobRunWhereInput {
  not: ScheduledJobRunWhereInput
  and: [ScheduledJobRunWhereInput!]
  or: [ScheduledJobRunWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  job_runner_id field predicates
  """
  jobRunnerID: ID
  jobRunnerIDNEQ: ID
  jobRunnerIDIn: [ID!]
  jobRunnerIDNotIn: [ID!]
  jobRunnerIDGT: ID
  jobRunnerIDGTE: ID
  jobRunnerIDLT: ID
  jobRunnerIDLTE: ID
  jobRunnerIDContains: ID
  jobRunnerIDHasPrefix: ID
  jobRunnerIDHasSuffix: ID
  jobRunnerIDEqualFold: ID
  jobRunnerIDContainsFold: ID
  """
  status field predicates
  """
  status: ScheduledJobRunScheduledJobRunStatus
  statusNEQ: ScheduledJobRunScheduledJobRunStatus
  statusIn: [ScheduledJobRunScheduledJobRunStatus!]
  statusNotIn: [ScheduledJobRunScheduledJobRunStatus!]
  """
  scheduled_job_id field predicates
  """
  scheduledJobID: ID
  scheduledJobIDNEQ: ID
  scheduledJobIDIn: [ID!]
  scheduledJobIDNotIn: [ID!]
  scheduledJobIDGT: ID
  scheduledJobIDGTE: ID
  scheduledJobIDLT: ID
  scheduledJobIDLTE: ID
  scheduledJobIDContains: ID
  scheduledJobIDHasPrefix: ID
  scheduledJobIDHasSuffix: ID
  scheduledJobIDEqualFold: ID
  scheduledJobIDContainsFold: ID
  """
  expected_execution_time field predicates
  """
  expectedExecutionTime: Time
  expectedExecutionTimeNEQ: Time
  expectedExecutionTimeIn: [Time!]
  expectedExecutionTimeNotIn: [Time!]
  expectedExecutionTimeGT: Time
  expectedExecutionTimeGTE: Time
  expectedExecutionTimeLT: Time
  expectedExecutionTimeLTE: Time
  """
  script field predicates
  """
  script: String
  scriptNEQ: String
  scriptIn: [String!]
  scriptNotIn: [String!]
  scriptGT: String
  scriptGTE: String
  scriptLT: String
  scriptLTE: String
  scriptContains: String
  scriptHasPrefix: String
  scriptHasSuffix: String
  scriptEqualFold: String
  scriptContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  scheduled_job edge predicates
  """
  hasScheduledJob: Boolean
  hasScheduledJobWith: [ScheduledJobWhereInput!]
  """
  job_runner edge predicates
  """
  hasJobRunner: Boolean
  hasJobRunnerWith: [JobRunnerWhereInput!]
}
"""
ScheduledJobWhereInput is used for filtering ScheduledJob objects.
Input was generated by ent.
"""
input ScheduledJobWhereInput {
  not: ScheduledJobWhereInput
  and: [ScheduledJobWhereInput!]
  or: [ScheduledJobWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  job_id field predicates
  """
  jobID: ID
  jobIDNEQ: ID
  jobIDIn: [ID!]
  jobIDNotIn: [ID!]
  jobIDGT: ID
  jobIDGTE: ID
  jobIDLT: ID
  jobIDLTE: ID
  jobIDContains: ID
  jobIDHasPrefix: ID
  jobIDHasSuffix: ID
  jobIDEqualFold: ID
  jobIDContainsFold: ID
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  job_runner_id field predicates
  """
  jobRunnerID: ID
  jobRunnerIDNEQ: ID
  jobRunnerIDIn: [ID!]
  jobRunnerIDNotIn: [ID!]
  jobRunnerIDGT: ID
  jobRunnerIDGTE: ID
  jobRunnerIDLT: ID
  jobRunnerIDLTE: ID
  jobRunnerIDContains: ID
  jobRunnerIDHasPrefix: ID
  jobRunnerIDHasSuffix: ID
  jobRunnerIDIsNil: Boolean
  jobRunnerIDNotNil: Boolean
  jobRunnerIDEqualFold: ID
  jobRunnerIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  job_template edge predicates
  """
  hasJobTemplate: Boolean
  hasJobTemplateWith: [JobTemplateWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  job_runner edge predicates
  """
  hasJobRunner: Boolean
  hasJobRunnerWith: [JobRunnerWhereInput!]
}
type Standard implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  indicates if the record is owned by the the openlane system and not by an organization
  """
  systemOwned: Boolean
  """
  the long name of the standard body
  """
  name: String!
  """
  short name of the standard, e.g. SOC 2, ISO 27001, etc.
  """
  shortName: String
  """
  unique identifier of the standard with version
  """
  framework: String
  """
  long description of the standard with details of what is covered
  """
  description: String
  """
  URL to the logo of the governing body
  """
  governingBodyLogoURL: String
  """
  governing body of the standard, e.g. AICPA, etc.
  """
  governingBody: String
  """
  domains the standard covers, e.g. availability, confidentiality, etc.
  """
  domains: [String!]
  """
  link to the official standard documentation
  """
  link: String
  """
  status of the standard - active, draft, and archived
  """
  status: StandardStandardStatus
  """
  indicates if the standard should be made available to all users, only for system owned standards
  """
  isPublic: Boolean
  """
  indicates if the standard is freely distributable under a trial license, only for system owned standards
  """
  freeToUse: Boolean
  """
  type of the standard - cybersecurity, healthcare , financial, etc.
  """
  standardType: String
  """
  version of the standard
  """
  version: String
  owner: Organization
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  trustCenterCompliances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterCompliances returned from the connection.
    """
    orderBy: [TrustCenterComplianceOrder!]

    """
    Filtering options for TrustCenterCompliances returned from the connection.
    """
    where: TrustCenterComplianceWhereInput
  ): TrustCenterComplianceConnection!
}
"""
A connection to a list of items.
"""
type StandardConnection {
  """
  A list of edges.
  """
  edges: [StandardEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type StandardEdge {
  """
  The item at the end of the edge.
  """
  node: Standard
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type StandardHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: StandardHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  indicates if the record is owned by the the openlane system and not by an organization
  """
  systemOwned: Boolean
  """
  the long name of the standard body
  """
  name: String!
  """
  short name of the standard, e.g. SOC 2, ISO 27001, etc.
  """
  shortName: String
  """
  unique identifier of the standard with version
  """
  framework: String
  """
  long description of the standard with details of what is covered
  """
  description: String
  """
  URL to the logo of the governing body
  """
  governingBodyLogoURL: String
  """
  governing body of the standard, e.g. AICPA, etc.
  """
  governingBody: String
  """
  domains the standard covers, e.g. availability, confidentiality, etc.
  """
  domains: [String!]
  """
  link to the official standard documentation
  """
  link: String
  """
  status of the standard - active, draft, and archived
  """
  status: StandardHistoryStandardStatus
  """
  indicates if the standard should be made available to all users, only for system owned standards
  """
  isPublic: Boolean
  """
  indicates if the standard is freely distributable under a trial license, only for system owned standards
  """
  freeToUse: Boolean
  """
  type of the standard - cybersecurity, healthcare , financial, etc.
  """
  standardType: String
  """
  version of the standard
  """
  version: String
}
"""
A connection to a list of items.
"""
type StandardHistoryConnection {
  """
  A list of edges.
  """
  edges: [StandardHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type StandardHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: StandardHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
StandardHistoryOpType is enum for the field operation
"""
enum StandardHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for StandardHistory connections
"""
input StandardHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order StandardHistories.
  """
  field: StandardHistoryOrderField!
}
"""
Properties by which StandardHistory connections can be ordered.
"""
enum StandardHistoryOrderField {
  history_time
  created_at
  updated_at
  revision
  name
  short_name
  framework
  governing_body
  STATUS
  standard_type
}
"""
StandardHistoryStandardStatus is enum for the field status
"""
enum StandardHistoryStandardStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.StandardStatus") {
  ACTIVE
  DRAFT
  ARCHIVED
}
"""
StandardHistoryWhereInput is used for filtering StandardHistory objects.
Input was generated by ent.
"""
input StandardHistoryWhereInput {
  not: StandardHistoryWhereInput
  and: [StandardHistoryWhereInput!]
  or: [StandardHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: StandardHistoryOpType
  operationNEQ: StandardHistoryOpType
  operationIn: [StandardHistoryOpType!]
  operationNotIn: [StandardHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  system_owned field predicates
  """
  systemOwned: Boolean
  systemOwnedNEQ: Boolean
  systemOwnedIsNil: Boolean
  systemOwnedNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  short_name field predicates
  """
  shortName: String
  shortNameNEQ: String
  shortNameIn: [String!]
  shortNameNotIn: [String!]
  shortNameGT: String
  shortNameGTE: String
  shortNameLT: String
  shortNameLTE: String
  shortNameContains: String
  shortNameHasPrefix: String
  shortNameHasSuffix: String
  shortNameIsNil: Boolean
  shortNameNotNil: Boolean
  shortNameEqualFold: String
  shortNameContainsFold: String
  """
  framework field predicates
  """
  framework: String
  frameworkNEQ: String
  frameworkIn: [String!]
  frameworkNotIn: [String!]
  frameworkGT: String
  frameworkGTE: String
  frameworkLT: String
  frameworkLTE: String
  frameworkContains: String
  frameworkHasPrefix: String
  frameworkHasSuffix: String
  frameworkIsNil: Boolean
  frameworkNotNil: Boolean
  frameworkEqualFold: String
  frameworkContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  governing_body_logo_url field predicates
  """
  governingBodyLogoURL: String
  governingBodyLogoURLNEQ: String
  governingBodyLogoURLIn: [String!]
  governingBodyLogoURLNotIn: [String!]
  governingBodyLogoURLGT: String
  governingBodyLogoURLGTE: String
  governingBodyLogoURLLT: String
  governingBodyLogoURLLTE: String
  governingBodyLogoURLContains: String
  governingBodyLogoURLHasPrefix: String
  governingBodyLogoURLHasSuffix: String
  governingBodyLogoURLIsNil: Boolean
  governingBodyLogoURLNotNil: Boolean
  governingBodyLogoURLEqualFold: String
  governingBodyLogoURLContainsFold: String
  """
  governing_body field predicates
  """
  governingBody: String
  governingBodyNEQ: String
  governingBodyIn: [String!]
  governingBodyNotIn: [String!]
  governingBodyGT: String
  governingBodyGTE: String
  governingBodyLT: String
  governingBodyLTE: String
  governingBodyContains: String
  governingBodyHasPrefix: String
  governingBodyHasSuffix: String
  governingBodyIsNil: Boolean
  governingBodyNotNil: Boolean
  governingBodyEqualFold: String
  governingBodyContainsFold: String
  """
  link field predicates
  """
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkIsNil: Boolean
  linkNotNil: Boolean
  linkEqualFold: String
  linkContainsFold: String
  """
  status field predicates
  """
  status: StandardHistoryStandardStatus
  statusNEQ: StandardHistoryStandardStatus
  statusIn: [StandardHistoryStandardStatus!]
  statusNotIn: [StandardHistoryStandardStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  is_public field predicates
  """
  isPublic: Boolean
  isPublicNEQ: Boolean
  isPublicIsNil: Boolean
  isPublicNotNil: Boolean
  """
  free_to_use field predicates
  """
  freeToUse: Boolean
  freeToUseNEQ: Boolean
  freeToUseIsNil: Boolean
  freeToUseNotNil: Boolean
  """
  standard_type field predicates
  """
  standardType: String
  standardTypeNEQ: String
  standardTypeIn: [String!]
  standardTypeNotIn: [String!]
  standardTypeGT: String
  standardTypeGTE: String
  standardTypeLT: String
  standardTypeLTE: String
  standardTypeContains: String
  standardTypeHasPrefix: String
  standardTypeHasSuffix: String
  standardTypeIsNil: Boolean
  standardTypeNotNil: Boolean
  standardTypeEqualFold: String
  standardTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
}
"""
Ordering options for Standard connections
"""
input StandardOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Standards.
  """
  field: StandardOrderField!
}
"""
Properties by which Standard connections can be ordered.
"""
enum StandardOrderField {
  created_at
  updated_at
  revision
  name
  short_name
  framework
  governing_body
  STATUS
  standard_type
}
"""
StandardStandardStatus is enum for the field status
"""
enum StandardStandardStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.StandardStatus") {
  ACTIVE
  DRAFT
  ARCHIVED
}
"""
StandardWhereInput is used for filtering Standard objects.
Input was generated by ent.
"""
input StandardWhereInput {
  not: StandardWhereInput
  and: [StandardWhereInput!]
  or: [StandardWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  revision field predicates
  """
  revision: String
  revisionNEQ: String
  revisionIn: [String!]
  revisionNotIn: [String!]
  revisionGT: String
  revisionGTE: String
  revisionLT: String
  revisionLTE: String
  revisionContains: String
  revisionHasPrefix: String
  revisionHasSuffix: String
  revisionIsNil: Boolean
  revisionNotNil: Boolean
  revisionEqualFold: String
  revisionContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  system_owned field predicates
  """
  systemOwned: Boolean
  systemOwnedNEQ: Boolean
  systemOwnedIsNil: Boolean
  systemOwnedNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  short_name field predicates
  """
  shortName: String
  shortNameNEQ: String
  shortNameIn: [String!]
  shortNameNotIn: [String!]
  shortNameGT: String
  shortNameGTE: String
  shortNameLT: String
  shortNameLTE: String
  shortNameContains: String
  shortNameHasPrefix: String
  shortNameHasSuffix: String
  shortNameIsNil: Boolean
  shortNameNotNil: Boolean
  shortNameEqualFold: String
  shortNameContainsFold: String
  """
  framework field predicates
  """
  framework: String
  frameworkNEQ: String
  frameworkIn: [String!]
  frameworkNotIn: [String!]
  frameworkGT: String
  frameworkGTE: String
  frameworkLT: String
  frameworkLTE: String
  frameworkContains: String
  frameworkHasPrefix: String
  frameworkHasSuffix: String
  frameworkIsNil: Boolean
  frameworkNotNil: Boolean
  frameworkEqualFold: String
  frameworkContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  governing_body_logo_url field predicates
  """
  governingBodyLogoURL: String
  governingBodyLogoURLNEQ: String
  governingBodyLogoURLIn: [String!]
  governingBodyLogoURLNotIn: [String!]
  governingBodyLogoURLGT: String
  governingBodyLogoURLGTE: String
  governingBodyLogoURLLT: String
  governingBodyLogoURLLTE: String
  governingBodyLogoURLContains: String
  governingBodyLogoURLHasPrefix: String
  governingBodyLogoURLHasSuffix: String
  governingBodyLogoURLIsNil: Boolean
  governingBodyLogoURLNotNil: Boolean
  governingBodyLogoURLEqualFold: String
  governingBodyLogoURLContainsFold: String
  """
  governing_body field predicates
  """
  governingBody: String
  governingBodyNEQ: String
  governingBodyIn: [String!]
  governingBodyNotIn: [String!]
  governingBodyGT: String
  governingBodyGTE: String
  governingBodyLT: String
  governingBodyLTE: String
  governingBodyContains: String
  governingBodyHasPrefix: String
  governingBodyHasSuffix: String
  governingBodyIsNil: Boolean
  governingBodyNotNil: Boolean
  governingBodyEqualFold: String
  governingBodyContainsFold: String
  """
  link field predicates
  """
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkIsNil: Boolean
  linkNotNil: Boolean
  linkEqualFold: String
  linkContainsFold: String
  """
  status field predicates
  """
  status: StandardStandardStatus
  statusNEQ: StandardStandardStatus
  statusIn: [StandardStandardStatus!]
  statusNotIn: [StandardStandardStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  is_public field predicates
  """
  isPublic: Boolean
  isPublicNEQ: Boolean
  isPublicIsNil: Boolean
  isPublicNotNil: Boolean
  """
  free_to_use field predicates
  """
  freeToUse: Boolean
  freeToUseNEQ: Boolean
  freeToUseIsNil: Boolean
  freeToUseNotNil: Boolean
  """
  standard_type field predicates
  """
  standardType: String
  standardTypeNEQ: String
  standardTypeIn: [String!]
  standardTypeNotIn: [String!]
  standardTypeGT: String
  standardTypeGTE: String
  standardTypeLT: String
  standardTypeLTE: String
  standardTypeContains: String
  standardTypeHasPrefix: String
  standardTypeHasSuffix: String
  standardTypeIsNil: Boolean
  standardTypeNotNil: Boolean
  standardTypeEqualFold: String
  standardTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  trust_center_compliances edge predicates
  """
  hasTrustCenterCompliances: Boolean
  hasTrustCenterCompliancesWith: [TrustCenterComplianceWhereInput!]
}
type Subcontrol implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  description of what the control is supposed to accomplish
  """
  description: String
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  """
  status of the control
  """
  status: SubcontrolControlStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: SubcontrolControlSource
  """
  the reference framework for the control if it came from a standard, empty if not associated with a standard
  """
  referenceFramework: String
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: SubcontrolControlType
  """
  category of the control
  """
  category: String
  """
  category id of the control
  """
  categoryID: String
  """
  subcategory of the control
  """
  subcategory: String
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  """
  references for the control
  """
  references: [Reference!]
  """
  the id of the group that owns the control
  """
  controlOwnerID: ID
  """
  the id of the group that is temporarily delegated to own the control
  """
  delegateID: ID
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the unique reference code for the control
  """
  refCode: String!
  """
  the id of the parent control
  """
  controlID: ID!
  evidence(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Evidences returned from the connection.
    """
    orderBy: [EvidenceOrder!]

    """
    Filtering options for Evidences returned from the connection.
    """
    where: EvidenceWhereInput
  ): EvidenceConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Narratives returned from the connection.
    """
    orderBy: [NarrativeOrder!]

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlans returned from the connection.
    """
    orderBy: [ActionPlanOrder!]

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  """
  the group of users who are responsible for the control, will be assigned tasks, approval, etc.
  """
  controlOwner: Group
  """
  temporary delegate for the control, used for temporary control ownership
  """
  delegate: Group
  owner: Organization
  control: Control!
  controlImplementations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  scheduledJobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ScheduledJobs returned from the connection.
    """
    orderBy: [ScheduledJobOrder!]

    """
    Filtering options for ScheduledJobs returned from the connection.
    """
    where: ScheduledJobWhereInput
  ): ScheduledJobConnection!
}
"""
A connection to a list of items.
"""
type SubcontrolConnection {
  """
  A list of edges.
  """
  edges: [SubcontrolEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
SubcontrolControlSource is enum for the field source
"""
enum SubcontrolControlSource @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlSource") {
  FRAMEWORK
  TEMPLATE
  USER_DEFINED
  IMPORTED
}
"""
SubcontrolControlStatus is enum for the field status
"""
enum SubcontrolControlStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlStatus") {
  PREPARING
  NEEDS_APPROVAL
  CHANGES_REQUESTED
  APPROVED
  ARCHIVED
  NOT_IMPLEMENTED
}
"""
SubcontrolControlType is enum for the field control_type
"""
enum SubcontrolControlType @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlType") {
  PREVENTATIVE
  DETECTIVE
  CORRECTIVE
  DETERRENT
}
"""
An edge in a connection.
"""
type SubcontrolEdge {
  """
  The item at the end of the edge.
  """
  node: Subcontrol
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type SubcontrolHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: SubcontrolHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  description of what the control is supposed to accomplish
  """
  description: String
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  """
  status of the control
  """
  status: SubcontrolHistoryControlStatus
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: SubcontrolHistoryControlSource
  """
  the reference framework for the control if it came from a standard, empty if not associated with a standard
  """
  referenceFramework: String
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: SubcontrolHistoryControlType
  """
  category of the control
  """
  category: String
  """
  category id of the control
  """
  categoryID: String
  """
  subcategory of the control
  """
  subcategory: String
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  """
  references for the control
  """
  references: [Reference!]
  """
  the id of the group that owns the control
  """
  controlOwnerID: String
  """
  the id of the group that is temporarily delegated to own the control
  """
  delegateID: String
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the unique reference code for the control
  """
  refCode: String!
  """
  the id of the parent control
  """
  controlID: String!
}
"""
A connection to a list of items.
"""
type SubcontrolHistoryConnection {
  """
  A list of edges.
  """
  edges: [SubcontrolHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
SubcontrolHistoryControlSource is enum for the field source
"""
enum SubcontrolHistoryControlSource @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlSource") {
  FRAMEWORK
  TEMPLATE
  USER_DEFINED
  IMPORTED
}
"""
SubcontrolHistoryControlStatus is enum for the field status
"""
enum SubcontrolHistoryControlStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlStatus") {
  PREPARING
  NEEDS_APPROVAL
  CHANGES_REQUESTED
  APPROVED
  ARCHIVED
  NOT_IMPLEMENTED
}
"""
SubcontrolHistoryControlType is enum for the field control_type
"""
enum SubcontrolHistoryControlType @goModel(model: "github.com/theopenlane/core/pkg/enums.ControlType") {
  PREVENTATIVE
  DETECTIVE
  CORRECTIVE
  DETERRENT
}
"""
An edge in a connection.
"""
type SubcontrolHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: SubcontrolHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SubcontrolHistoryOpType is enum for the field operation
"""
enum SubcontrolHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for SubcontrolHistory connections
"""
input SubcontrolHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order SubcontrolHistories.
  """
  field: SubcontrolHistoryOrderField!
}
"""
Properties by which SubcontrolHistory connections can be ordered.
"""
enum SubcontrolHistoryOrderField {
  history_time
  created_at
  updated_at
  STATUS
  SOURCE
  REFERENCE_FRAMEWORK
  CONTROL_TYPE
  category
  subcategory
  ref_code
}
"""
SubcontrolHistoryWhereInput is used for filtering SubcontrolHistory objects.
Input was generated by ent.
"""
input SubcontrolHistoryWhereInput {
  not: SubcontrolHistoryWhereInput
  and: [SubcontrolHistoryWhereInput!]
  or: [SubcontrolHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: SubcontrolHistoryOpType
  operationNEQ: SubcontrolHistoryOpType
  operationIn: [SubcontrolHistoryOpType!]
  operationNotIn: [SubcontrolHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  reference_id field predicates
  """
  referenceID: String
  referenceIDNEQ: String
  referenceIDIn: [String!]
  referenceIDNotIn: [String!]
  referenceIDGT: String
  referenceIDGTE: String
  referenceIDLT: String
  referenceIDLTE: String
  referenceIDContains: String
  referenceIDHasPrefix: String
  referenceIDHasSuffix: String
  referenceIDIsNil: Boolean
  referenceIDNotNil: Boolean
  referenceIDEqualFold: String
  referenceIDContainsFold: String
  """
  auditor_reference_id field predicates
  """
  auditorReferenceID: String
  auditorReferenceIDNEQ: String
  auditorReferenceIDIn: [String!]
  auditorReferenceIDNotIn: [String!]
  auditorReferenceIDGT: String
  auditorReferenceIDGTE: String
  auditorReferenceIDLT: String
  auditorReferenceIDLTE: String
  auditorReferenceIDContains: String
  auditorReferenceIDHasPrefix: String
  auditorReferenceIDHasSuffix: String
  auditorReferenceIDIsNil: Boolean
  auditorReferenceIDNotNil: Boolean
  auditorReferenceIDEqualFold: String
  auditorReferenceIDContainsFold: String
  """
  status field predicates
  """
  status: SubcontrolHistoryControlStatus
  statusNEQ: SubcontrolHistoryControlStatus
  statusIn: [SubcontrolHistoryControlStatus!]
  statusNotIn: [SubcontrolHistoryControlStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  source field predicates
  """
  source: SubcontrolHistoryControlSource
  sourceNEQ: SubcontrolHistoryControlSource
  sourceIn: [SubcontrolHistoryControlSource!]
  sourceNotIn: [SubcontrolHistoryControlSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  """
  reference_framework field predicates
  """
  referenceFramework: String
  referenceFrameworkNEQ: String
  referenceFrameworkIn: [String!]
  referenceFrameworkNotIn: [String!]
  referenceFrameworkGT: String
  referenceFrameworkGTE: String
  referenceFrameworkLT: String
  referenceFrameworkLTE: String
  referenceFrameworkContains: String
  referenceFrameworkHasPrefix: String
  referenceFrameworkHasSuffix: String
  referenceFrameworkIsNil: Boolean
  referenceFrameworkNotNil: Boolean
  referenceFrameworkEqualFold: String
  referenceFrameworkContainsFold: String
  """
  control_type field predicates
  """
  controlType: SubcontrolHistoryControlType
  controlTypeNEQ: SubcontrolHistoryControlType
  controlTypeIn: [SubcontrolHistoryControlType!]
  controlTypeNotIn: [SubcontrolHistoryControlType!]
  controlTypeIsNil: Boolean
  controlTypeNotNil: Boolean
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  category_id field predicates
  """
  categoryID: String
  categoryIDNEQ: String
  categoryIDIn: [String!]
  categoryIDNotIn: [String!]
  categoryIDGT: String
  categoryIDGTE: String
  categoryIDLT: String
  categoryIDLTE: String
  categoryIDContains: String
  categoryIDHasPrefix: String
  categoryIDHasSuffix: String
  categoryIDIsNil: Boolean
  categoryIDNotNil: Boolean
  categoryIDEqualFold: String
  categoryIDContainsFold: String
  """
  subcategory field predicates
  """
  subcategory: String
  subcategoryNEQ: String
  subcategoryIn: [String!]
  subcategoryNotIn: [String!]
  subcategoryGT: String
  subcategoryGTE: String
  subcategoryLT: String
  subcategoryLTE: String
  subcategoryContains: String
  subcategoryHasPrefix: String
  subcategoryHasSuffix: String
  subcategoryIsNil: Boolean
  subcategoryNotNil: Boolean
  subcategoryEqualFold: String
  subcategoryContainsFold: String
  """
  control_owner_id field predicates
  """
  controlOwnerID: String
  controlOwnerIDNEQ: String
  controlOwnerIDIn: [String!]
  controlOwnerIDNotIn: [String!]
  controlOwnerIDGT: String
  controlOwnerIDGTE: String
  controlOwnerIDLT: String
  controlOwnerIDLTE: String
  controlOwnerIDContains: String
  controlOwnerIDHasPrefix: String
  controlOwnerIDHasSuffix: String
  controlOwnerIDIsNil: Boolean
  controlOwnerIDNotNil: Boolean
  controlOwnerIDEqualFold: String
  controlOwnerIDContainsFold: String
  """
  delegate_id field predicates
  """
  delegateID: String
  delegateIDNEQ: String
  delegateIDIn: [String!]
  delegateIDNotIn: [String!]
  delegateIDGT: String
  delegateIDGTE: String
  delegateIDLT: String
  delegateIDLTE: String
  delegateIDContains: String
  delegateIDHasPrefix: String
  delegateIDHasSuffix: String
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: String
  delegateIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  ref_code field predicates
  """
  refCode: String
  refCodeNEQ: String
  refCodeIn: [String!]
  refCodeNotIn: [String!]
  refCodeGT: String
  refCodeGTE: String
  refCodeLT: String
  refCodeLTE: String
  refCodeContains: String
  refCodeHasPrefix: String
  refCodeHasSuffix: String
  refCodeEqualFold: String
  refCodeContainsFold: String
  """
  control_id field predicates
  """
  controlID: String
  controlIDNEQ: String
  controlIDIn: [String!]
  controlIDNotIn: [String!]
  controlIDGT: String
  controlIDGTE: String
  controlIDLT: String
  controlIDLTE: String
  controlIDContains: String
  controlIDHasPrefix: String
  controlIDHasSuffix: String
  controlIDEqualFold: String
  controlIDContainsFold: String
}
"""
Ordering options for Subcontrol connections
"""
input SubcontrolOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Subcontrols.
  """
  field: SubcontrolOrderField!
}
"""
Properties by which Subcontrol connections can be ordered.
"""
enum SubcontrolOrderField {
  created_at
  updated_at
  STATUS
  SOURCE
  REFERENCE_FRAMEWORK
  CONTROL_TYPE
  category
  subcategory
  ref_code
  CONTROL_OWNER_name
  DELEGATE_name
}
"""
SubcontrolWhereInput is used for filtering Subcontrol objects.
Input was generated by ent.
"""
input SubcontrolWhereInput {
  not: SubcontrolWhereInput
  and: [SubcontrolWhereInput!]
  or: [SubcontrolWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  reference_id field predicates
  """
  referenceID: String
  referenceIDNEQ: String
  referenceIDIn: [String!]
  referenceIDNotIn: [String!]
  referenceIDGT: String
  referenceIDGTE: String
  referenceIDLT: String
  referenceIDLTE: String
  referenceIDContains: String
  referenceIDHasPrefix: String
  referenceIDHasSuffix: String
  referenceIDIsNil: Boolean
  referenceIDNotNil: Boolean
  referenceIDEqualFold: String
  referenceIDContainsFold: String
  """
  auditor_reference_id field predicates
  """
  auditorReferenceID: String
  auditorReferenceIDNEQ: String
  auditorReferenceIDIn: [String!]
  auditorReferenceIDNotIn: [String!]
  auditorReferenceIDGT: String
  auditorReferenceIDGTE: String
  auditorReferenceIDLT: String
  auditorReferenceIDLTE: String
  auditorReferenceIDContains: String
  auditorReferenceIDHasPrefix: String
  auditorReferenceIDHasSuffix: String
  auditorReferenceIDIsNil: Boolean
  auditorReferenceIDNotNil: Boolean
  auditorReferenceIDEqualFold: String
  auditorReferenceIDContainsFold: String
  """
  status field predicates
  """
  status: SubcontrolControlStatus
  statusNEQ: SubcontrolControlStatus
  statusIn: [SubcontrolControlStatus!]
  statusNotIn: [SubcontrolControlStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  source field predicates
  """
  source: SubcontrolControlSource
  sourceNEQ: SubcontrolControlSource
  sourceIn: [SubcontrolControlSource!]
  sourceNotIn: [SubcontrolControlSource!]
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  """
  reference_framework field predicates
  """
  referenceFramework: String
  referenceFrameworkNEQ: String
  referenceFrameworkIn: [String!]
  referenceFrameworkNotIn: [String!]
  referenceFrameworkGT: String
  referenceFrameworkGTE: String
  referenceFrameworkLT: String
  referenceFrameworkLTE: String
  referenceFrameworkContains: String
  referenceFrameworkHasPrefix: String
  referenceFrameworkHasSuffix: String
  referenceFrameworkIsNil: Boolean
  referenceFrameworkNotNil: Boolean
  referenceFrameworkEqualFold: String
  referenceFrameworkContainsFold: String
  """
  control_type field predicates
  """
  controlType: SubcontrolControlType
  controlTypeNEQ: SubcontrolControlType
  controlTypeIn: [SubcontrolControlType!]
  controlTypeNotIn: [SubcontrolControlType!]
  controlTypeIsNil: Boolean
  controlTypeNotNil: Boolean
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  category_id field predicates
  """
  categoryID: String
  categoryIDNEQ: String
  categoryIDIn: [String!]
  categoryIDNotIn: [String!]
  categoryIDGT: String
  categoryIDGTE: String
  categoryIDLT: String
  categoryIDLTE: String
  categoryIDContains: String
  categoryIDHasPrefix: String
  categoryIDHasSuffix: String
  categoryIDIsNil: Boolean
  categoryIDNotNil: Boolean
  categoryIDEqualFold: String
  categoryIDContainsFold: String
  """
  subcategory field predicates
  """
  subcategory: String
  subcategoryNEQ: String
  subcategoryIn: [String!]
  subcategoryNotIn: [String!]
  subcategoryGT: String
  subcategoryGTE: String
  subcategoryLT: String
  subcategoryLTE: String
  subcategoryContains: String
  subcategoryHasPrefix: String
  subcategoryHasSuffix: String
  subcategoryIsNil: Boolean
  subcategoryNotNil: Boolean
  subcategoryEqualFold: String
  subcategoryContainsFold: String
  """
  control_owner_id field predicates
  """
  controlOwnerID: ID
  controlOwnerIDNEQ: ID
  controlOwnerIDIn: [ID!]
  controlOwnerIDNotIn: [ID!]
  controlOwnerIDGT: ID
  controlOwnerIDGTE: ID
  controlOwnerIDLT: ID
  controlOwnerIDLTE: ID
  controlOwnerIDContains: ID
  controlOwnerIDHasPrefix: ID
  controlOwnerIDHasSuffix: ID
  controlOwnerIDIsNil: Boolean
  controlOwnerIDNotNil: Boolean
  controlOwnerIDEqualFold: ID
  controlOwnerIDContainsFold: ID
  """
  delegate_id field predicates
  """
  delegateID: ID
  delegateIDNEQ: ID
  delegateIDIn: [ID!]
  delegateIDNotIn: [ID!]
  delegateIDGT: ID
  delegateIDGTE: ID
  delegateIDLT: ID
  delegateIDLTE: ID
  delegateIDContains: ID
  delegateIDHasPrefix: ID
  delegateIDHasSuffix: ID
  delegateIDIsNil: Boolean
  delegateIDNotNil: Boolean
  delegateIDEqualFold: ID
  delegateIDContainsFold: ID
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  ref_code field predicates
  """
  refCode: String
  refCodeNEQ: String
  refCodeIn: [String!]
  refCodeNotIn: [String!]
  refCodeGT: String
  refCodeGTE: String
  refCodeLT: String
  refCodeLTE: String
  refCodeContains: String
  refCodeHasPrefix: String
  refCodeHasSuffix: String
  refCodeEqualFold: String
  refCodeContainsFold: String
  """
  control_id field predicates
  """
  controlID: ID
  controlIDNEQ: ID
  controlIDIn: [ID!]
  controlIDNotIn: [ID!]
  controlIDGT: ID
  controlIDGTE: ID
  controlIDLT: ID
  controlIDLTE: ID
  controlIDContains: ID
  controlIDHasPrefix: ID
  controlIDHasSuffix: ID
  controlIDEqualFold: ID
  controlIDContainsFold: ID
  """
  evidence edge predicates
  """
  hasEvidence: Boolean
  hasEvidenceWith: [EvidenceWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  control_owner edge predicates
  """
  hasControlOwner: Boolean
  hasControlOwnerWith: [GroupWhereInput!]
  """
  delegate edge predicates
  """
  hasDelegate: Boolean
  hasDelegateWith: [GroupWhereInput!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  control edge predicates
  """
  hasControl: Boolean
  hasControlWith: [ControlWhereInput!]
  """
  control_implementations edge predicates
  """
  hasControlImplementations: Boolean
  hasControlImplementationsWith: [ControlImplementationWhereInput!]
  """
  scheduled_jobs edge predicates
  """
  hasScheduledJobs: Boolean
  hasScheduledJobsWith: [ScheduledJobWhereInput!]
}
type Subprocessor implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  indicates if the record is owned by the the openlane system and not by an organization
  """
  systemOwned: Boolean
  """
  name of the standard body
  """
  name: String!
  """
  description of the subprocessor
  """
  description: String
  """
  URL of the logo
  """
  logoRemoteURL: String
  """
  The local logo file id, takes precedence over the logo remote URL
  """
  logoLocalFileID: ID
  owner: Organization
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  logoFile: File
  trustCenterSubprocessors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterSubprocessors returned from the connection.
    """
    orderBy: [TrustCenterSubprocessorOrder!]

    """
    Filtering options for TrustCenterSubprocessors returned from the connection.
    """
    where: TrustCenterSubprocessorWhereInput
  ): TrustCenterSubprocessorConnection!
}
"""
A connection to a list of items.
"""
type SubprocessorConnection {
  """
  A list of edges.
  """
  edges: [SubprocessorEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SubprocessorEdge {
  """
  The item at the end of the edge.
  """
  node: Subprocessor
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type SubprocessorHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: SubprocessorHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  indicates if the record is owned by the the openlane system and not by an organization
  """
  systemOwned: Boolean
  """
  name of the standard body
  """
  name: String!
  """
  description of the subprocessor
  """
  description: String
  """
  URL of the logo
  """
  logoRemoteURL: String
  """
  The local logo file id, takes precedence over the logo remote URL
  """
  logoLocalFileID: String
}
"""
A connection to a list of items.
"""
type SubprocessorHistoryConnection {
  """
  A list of edges.
  """
  edges: [SubprocessorHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SubprocessorHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: SubprocessorHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SubprocessorHistoryOpType is enum for the field operation
"""
enum SubprocessorHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for SubprocessorHistory connections
"""
input SubprocessorHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order SubprocessorHistories.
  """
  field: SubprocessorHistoryOrderField!
}
"""
Properties by which SubprocessorHistory connections can be ordered.
"""
enum SubprocessorHistoryOrderField {
  history_time
  created_at
  updated_at
  name
}
"""
SubprocessorHistoryWhereInput is used for filtering SubprocessorHistory objects.
Input was generated by ent.
"""
input SubprocessorHistoryWhereInput {
  not: SubprocessorHistoryWhereInput
  and: [SubprocessorHistoryWhereInput!]
  or: [SubprocessorHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: SubprocessorHistoryOpType
  operationNEQ: SubprocessorHistoryOpType
  operationIn: [SubprocessorHistoryOpType!]
  operationNotIn: [SubprocessorHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  system_owned field predicates
  """
  systemOwned: Boolean
  systemOwnedNEQ: Boolean
  systemOwnedIsNil: Boolean
  systemOwnedNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  logo_remote_url field predicates
  """
  logoRemoteURL: String
  logoRemoteURLNEQ: String
  logoRemoteURLIn: [String!]
  logoRemoteURLNotIn: [String!]
  logoRemoteURLGT: String
  logoRemoteURLGTE: String
  logoRemoteURLLT: String
  logoRemoteURLLTE: String
  logoRemoteURLContains: String
  logoRemoteURLHasPrefix: String
  logoRemoteURLHasSuffix: String
  logoRemoteURLIsNil: Boolean
  logoRemoteURLNotNil: Boolean
  logoRemoteURLEqualFold: String
  logoRemoteURLContainsFold: String
  """
  logo_local_file_id field predicates
  """
  logoLocalFileID: String
  logoLocalFileIDNEQ: String
  logoLocalFileIDIn: [String!]
  logoLocalFileIDNotIn: [String!]
  logoLocalFileIDGT: String
  logoLocalFileIDGTE: String
  logoLocalFileIDLT: String
  logoLocalFileIDLTE: String
  logoLocalFileIDContains: String
  logoLocalFileIDHasPrefix: String
  logoLocalFileIDHasSuffix: String
  logoLocalFileIDIsNil: Boolean
  logoLocalFileIDNotNil: Boolean
  logoLocalFileIDEqualFold: String
  logoLocalFileIDContainsFold: String
}
"""
Ordering options for Subprocessor connections
"""
input SubprocessorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Subprocessors.
  """
  field: SubprocessorOrderField!
}
"""
Properties by which Subprocessor connections can be ordered.
"""
enum SubprocessorOrderField {
  created_at
  updated_at
  name
}
"""
SubprocessorWhereInput is used for filtering Subprocessor objects.
Input was generated by ent.
"""
input SubprocessorWhereInput {
  not: SubprocessorWhereInput
  and: [SubprocessorWhereInput!]
  or: [SubprocessorWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  system_owned field predicates
  """
  systemOwned: Boolean
  systemOwnedNEQ: Boolean
  systemOwnedIsNil: Boolean
  systemOwnedNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  logo_remote_url field predicates
  """
  logoRemoteURL: String
  logoRemoteURLNEQ: String
  logoRemoteURLIn: [String!]
  logoRemoteURLNotIn: [String!]
  logoRemoteURLGT: String
  logoRemoteURLGTE: String
  logoRemoteURLLT: String
  logoRemoteURLLTE: String
  logoRemoteURLContains: String
  logoRemoteURLHasPrefix: String
  logoRemoteURLHasSuffix: String
  logoRemoteURLIsNil: Boolean
  logoRemoteURLNotNil: Boolean
  logoRemoteURLEqualFold: String
  logoRemoteURLContainsFold: String
  """
  logo_local_file_id field predicates
  """
  logoLocalFileID: ID
  logoLocalFileIDNEQ: ID
  logoLocalFileIDIn: [ID!]
  logoLocalFileIDNotIn: [ID!]
  logoLocalFileIDGT: ID
  logoLocalFileIDGTE: ID
  logoLocalFileIDLT: ID
  logoLocalFileIDLTE: ID
  logoLocalFileIDContains: ID
  logoLocalFileIDHasPrefix: ID
  logoLocalFileIDHasSuffix: ID
  logoLocalFileIDIsNil: Boolean
  logoLocalFileIDNotNil: Boolean
  logoLocalFileIDEqualFold: ID
  logoLocalFileIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  logo_file edge predicates
  """
  hasLogoFile: Boolean
  hasLogoFileWith: [FileWhereInput!]
  """
  trust_center_subprocessors edge predicates
  """
  hasTrustCenterSubprocessors: Boolean
  hasTrustCenterSubprocessorsWith: [TrustCenterSubprocessorWhereInput!]
}
type Subscriber implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  email address of the subscriber
  """
  email: String!
  """
  phone number of the subscriber
  """
  phoneNumber: String
  """
  indicates if the email address has been verified
  """
  verifiedEmail: Boolean!
  """
  indicates if the phone number has been verified
  """
  verifiedPhone: Boolean!
  """
  indicates if the subscriber is active or not, active users will have at least one verified contact method
  """
  active: Boolean!
  """
  indicates if the subscriber has unsubscribed from communications
  """
  unsubscribed: Boolean!
  """
  the number of attempts made to perform email send of the subscription, maximum of 5
  """
  sendAttempts: Int!
  owner: Organization
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
}
"""
A connection to a list of items.
"""
type SubscriberConnection {
  """
  A list of edges.
  """
  edges: [SubscriberEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SubscriberEdge {
  """
  The item at the end of the edge.
  """
  node: Subscriber
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Subscriber connections
"""
input SubscriberOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Subscribers.
  """
  field: SubscriberOrderField!
}
"""
Properties by which Subscriber connections can be ordered.
"""
enum SubscriberOrderField {
  created_at
  updated_at
  email
  active
  unsubscribed
  send_attempts
}
"""
SubscriberWhereInput is used for filtering Subscriber objects.
Input was generated by ent.
"""
input SubscriberWhereInput {
  not: SubscriberWhereInput
  and: [SubscriberWhereInput!]
  or: [SubscriberWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIsNil: Boolean
  phoneNumberNotNil: Boolean
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  verified_email field predicates
  """
  verifiedEmail: Boolean
  verifiedEmailNEQ: Boolean
  """
  verified_phone field predicates
  """
  verifiedPhone: Boolean
  verifiedPhoneNEQ: Boolean
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  unsubscribed field predicates
  """
  unsubscribed: Boolean
  unsubscribedNEQ: Boolean
  """
  send_attempts field predicates
  """
  sendAttempts: Int
  sendAttemptsNEQ: Int
  sendAttemptsIn: [Int!]
  sendAttemptsNotIn: [Int!]
  sendAttemptsGT: Int
  sendAttemptsGTE: Int
  sendAttemptsLT: Int
  sendAttemptsLTE: Int
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type TFASetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  specifies if the TFA device has been verified
  """
  verified: Boolean!
  """
  specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
  """
  totpAllowed: Boolean
  owner: User
}
"""
A connection to a list of items.
"""
type TFASettingConnection {
  """
  A list of edges.
  """
  edges: [TFASettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TFASettingEdge {
  """
  The item at the end of the edge.
  """
  node: TFASetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for TFASetting connections
"""
input TFASettingOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TFASettings.
  """
  field: TFASettingOrderField!
}
"""
Properties by which TFASetting connections can be ordered.
"""
enum TFASettingOrderField {
  created_at
  updated_at
}
"""
TFASettingWhereInput is used for filtering TFASetting objects.
Input was generated by ent.
"""
input TFASettingWhereInput {
  not: TFASettingWhereInput
  and: [TFASettingWhereInput!]
  or: [TFASettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  verified field predicates
  """
  verified: Boolean
  verifiedNEQ: Boolean
  """
  totp_allowed field predicates
  """
  totpAllowed: Boolean
  totpAllowedNEQ: Boolean
  totpAllowedIsNil: Boolean
  totpAllowedNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
type Task implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID
  """
  the title of the task
  """
  title: String!
  """
  the details of the task
  """
  details: String
  """
  the status of the task
  """
  status: TaskTaskStatus!
  """
  the category of the task, e.g. evidence upload, risk review, policy review, etc.
  """
  category: String
  """
  the due date of the task
  """
  due: DateTime
  """
  the completion date of the task
  """
  completed: DateTime
  """
  the id of the user who was assigned the task
  """
  assigneeID: ID
  """
  the id of the user who assigned the task, can be left empty if created by the system or a service token
  """
  assignerID: ID
  owner: Organization
  assigner: User
  assignee: User
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Notes returned from the connection.
    """
    orderBy: [NoteOrder!]

    """
    Filtering options for Notes returned from the connection.
    """
    where: NoteWhereInput
  ): NoteConnection!
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for InternalPolicies returned from the connection.
    """
    orderBy: [InternalPolicyOrder!]

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Procedures returned from the connection.
    """
    orderBy: [ProcedureOrder!]

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Controls returned from the connection.
    """
    orderBy: [ControlOrder!]

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlObjectives returned from the connection.
    """
    orderBy: [ControlObjectiveOrder!]

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Risks returned from the connection.
    """
    orderBy: [RiskOrder!]

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  controlImplementations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ControlImplementations returned from the connection.
    """
    orderBy: [ControlImplementationOrder!]

    """
    Filtering options for ControlImplementations returned from the connection.
    """
    where: ControlImplementationWhereInput
  ): ControlImplementationConnection!
  evidence(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Evidences returned from the connection.
    """
    orderBy: [EvidenceOrder!]

    """
    Filtering options for Evidences returned from the connection.
    """
    where: EvidenceWhereInput
  ): EvidenceConnection!
}
"""
A connection to a list of items.
"""
type TaskConnection {
  """
  A list of edges.
  """
  edges: [TaskEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TaskEdge {
  """
  The item at the end of the edge.
  """
  node: Task
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TaskHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TaskHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String
  """
  the title of the task
  """
  title: String!
  """
  the details of the task
  """
  details: String
  """
  the status of the task
  """
  status: TaskHistoryTaskStatus!
  """
  the category of the task, e.g. evidence upload, risk review, policy review, etc.
  """
  category: String
  """
  the due date of the task
  """
  due: DateTime
  """
  the completion date of the task
  """
  completed: DateTime
  """
  the id of the user who was assigned the task
  """
  assigneeID: String
  """
  the id of the user who assigned the task, can be left empty if created by the system or a service token
  """
  assignerID: String
}
"""
A connection to a list of items.
"""
type TaskHistoryConnection {
  """
  A list of edges.
  """
  edges: [TaskHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TaskHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TaskHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TaskHistoryOpType is enum for the field operation
"""
enum TaskHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TaskHistory connections
"""
input TaskHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TaskHistories.
  """
  field: TaskHistoryOrderField!
}
"""
Properties by which TaskHistory connections can be ordered.
"""
enum TaskHistoryOrderField {
  history_time
  created_at
  updated_at
  title
  STATUS
  category
  due
  completed
}
"""
TaskHistoryTaskStatus is enum for the field status
"""
enum TaskHistoryTaskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.TaskStatus") {
  OPEN
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  WONT_DO
}
"""
TaskHistoryWhereInput is used for filtering TaskHistory objects.
Input was generated by ent.
"""
input TaskHistoryWhereInput {
  not: TaskHistoryWhereInput
  and: [TaskHistoryWhereInput!]
  or: [TaskHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TaskHistoryOpType
  operationNEQ: TaskHistoryOpType
  operationIn: [TaskHistoryOpType!]
  operationNotIn: [TaskHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  status field predicates
  """
  status: TaskHistoryTaskStatus
  statusNEQ: TaskHistoryTaskStatus
  statusIn: [TaskHistoryTaskStatus!]
  statusNotIn: [TaskHistoryTaskStatus!]
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  due field predicates
  """
  due: DateTime
  dueNEQ: DateTime
  dueIn: [DateTime!]
  dueNotIn: [DateTime!]
  dueGT: DateTime
  dueGTE: DateTime
  dueLT: DateTime
  dueLTE: DateTime
  dueIsNil: Boolean
  dueNotNil: Boolean
  """
  completed field predicates
  """
  completed: DateTime
  completedNEQ: DateTime
  completedIn: [DateTime!]
  completedNotIn: [DateTime!]
  completedGT: DateTime
  completedGTE: DateTime
  completedLT: DateTime
  completedLTE: DateTime
  completedIsNil: Boolean
  completedNotNil: Boolean
  """
  assignee_id field predicates
  """
  assigneeID: String
  assigneeIDNEQ: String
  assigneeIDIn: [String!]
  assigneeIDNotIn: [String!]
  assigneeIDGT: String
  assigneeIDGTE: String
  assigneeIDLT: String
  assigneeIDLTE: String
  assigneeIDContains: String
  assigneeIDHasPrefix: String
  assigneeIDHasSuffix: String
  assigneeIDIsNil: Boolean
  assigneeIDNotNil: Boolean
  assigneeIDEqualFold: String
  assigneeIDContainsFold: String
  """
  assigner_id field predicates
  """
  assignerID: String
  assignerIDNEQ: String
  assignerIDIn: [String!]
  assignerIDNotIn: [String!]
  assignerIDGT: String
  assignerIDGTE: String
  assignerIDLT: String
  assignerIDLTE: String
  assignerIDContains: String
  assignerIDHasPrefix: String
  assignerIDHasSuffix: String
  assignerIDIsNil: Boolean
  assignerIDNotNil: Boolean
  assignerIDEqualFold: String
  assignerIDContainsFold: String
}
"""
Ordering options for Task connections
"""
input TaskOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tasks.
  """
  field: TaskOrderField!
}
"""
Properties by which Task connections can be ordered.
"""
enum TaskOrderField {
  created_at
  updated_at
  title
  STATUS
  category
  due
  completed
}
"""
TaskTaskStatus is enum for the field status
"""
enum TaskTaskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.TaskStatus") {
  OPEN
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  WONT_DO
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  details field predicates
  """
  details: String
  detailsNEQ: String
  detailsIn: [String!]
  detailsNotIn: [String!]
  detailsGT: String
  detailsGTE: String
  detailsLT: String
  detailsLTE: String
  detailsContains: String
  detailsHasPrefix: String
  detailsHasSuffix: String
  detailsIsNil: Boolean
  detailsNotNil: Boolean
  detailsEqualFold: String
  detailsContainsFold: String
  """
  status field predicates
  """
  status: TaskTaskStatus
  statusNEQ: TaskTaskStatus
  statusIn: [TaskTaskStatus!]
  statusNotIn: [TaskTaskStatus!]
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  categoryEqualFold: String
  categoryContainsFold: String
  """
  due field predicates
  """
  due: DateTime
  dueNEQ: DateTime
  dueIn: [DateTime!]
  dueNotIn: [DateTime!]
  dueGT: DateTime
  dueGTE: DateTime
  dueLT: DateTime
  dueLTE: DateTime
  dueIsNil: Boolean
  dueNotNil: Boolean
  """
  completed field predicates
  """
  completed: DateTime
  completedNEQ: DateTime
  completedIn: [DateTime!]
  completedNotIn: [DateTime!]
  completedGT: DateTime
  completedGTE: DateTime
  completedLT: DateTime
  completedLTE: DateTime
  completedIsNil: Boolean
  completedNotNil: Boolean
  """
  assignee_id field predicates
  """
  assigneeID: ID
  assigneeIDNEQ: ID
  assigneeIDIn: [ID!]
  assigneeIDNotIn: [ID!]
  assigneeIDGT: ID
  assigneeIDGTE: ID
  assigneeIDLT: ID
  assigneeIDLTE: ID
  assigneeIDContains: ID
  assigneeIDHasPrefix: ID
  assigneeIDHasSuffix: ID
  assigneeIDIsNil: Boolean
  assigneeIDNotNil: Boolean
  assigneeIDEqualFold: ID
  assigneeIDContainsFold: ID
  """
  assigner_id field predicates
  """
  assignerID: ID
  assignerIDNEQ: ID
  assignerIDIn: [ID!]
  assignerIDNotIn: [ID!]
  assignerIDGT: ID
  assignerIDGTE: ID
  assignerIDLT: ID
  assignerIDLTE: ID
  assignerIDContains: ID
  assignerIDHasPrefix: ID
  assignerIDHasSuffix: ID
  assignerIDIsNil: Boolean
  assignerIDNotNil: Boolean
  assignerIDEqualFold: ID
  assignerIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  assigner edge predicates
  """
  hasAssigner: Boolean
  hasAssignerWith: [UserWhereInput!]
  """
  assignee edge predicates
  """
  hasAssignee: Boolean
  hasAssigneeWith: [UserWhereInput!]
  """
  comments edge predicates
  """
  hasComments: Boolean
  hasCommentsWith: [NoteWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  control_implementations edge predicates
  """
  hasControlImplementations: Boolean
  hasControlImplementationsWith: [ControlImplementationWhereInput!]
  """
  evidence edge predicates
  """
  hasEvidence: Boolean
  hasEvidenceWith: [EvidenceWhereInput!]
}
type Template implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the template
  """
  name: String!
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateDocumentType!
  """
  the description of the template
  """
  description: String
  """
  the kind of template, e.g. questionnaire
  """
  kind: TemplateTemplateKind
  """
  the jsonschema object of the template
  """
  jsonconfig: Map!
  """
  the uischema for the template to render in the UI
  """
  uischema: Map
  owner: Organization
  documents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for DocumentDataSlice returned from the connection.
    """
    orderBy: [DocumentDataOrder!]

    """
    Filtering options for DocumentDataSlice returned from the connection.
    """
    where: DocumentDataWhereInput
  ): DocumentDataConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
A connection to a list of items.
"""
type TemplateConnection {
  """
  A list of edges.
  """
  edges: [TemplateEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
TemplateDocumentType is enum for the field template_type
"""
enum TemplateDocumentType @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentType") {
  ROOTTEMPLATE
  DOCUMENT
}
"""
An edge in a connection.
"""
type TemplateEdge {
  """
  The item at the end of the edge.
  """
  node: Template
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TemplateHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TemplateHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the template
  """
  name: String!
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateHistoryDocumentType!
  """
  the description of the template
  """
  description: String
  """
  the kind of template, e.g. questionnaire
  """
  kind: TemplateHistoryTemplateKind
  """
  the jsonschema object of the template
  """
  jsonconfig: Map!
  """
  the uischema for the template to render in the UI
  """
  uischema: Map
}
"""
A connection to a list of items.
"""
type TemplateHistoryConnection {
  """
  A list of edges.
  """
  edges: [TemplateHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
TemplateHistoryDocumentType is enum for the field template_type
"""
enum TemplateHistoryDocumentType @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentType") {
  ROOTTEMPLATE
  DOCUMENT
}
"""
An edge in a connection.
"""
type TemplateHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TemplateHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TemplateHistoryOpType is enum for the field operation
"""
enum TemplateHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TemplateHistory connections
"""
input TemplateHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TemplateHistories.
  """
  field: TemplateHistoryOrderField!
}
"""
Properties by which TemplateHistory connections can be ordered.
"""
enum TemplateHistoryOrderField {
  history_time
  created_at
  updated_at
  name
  TEMPLATE_TYPE
  KIND
}
"""
TemplateHistoryTemplateKind is enum for the field kind
"""
enum TemplateHistoryTemplateKind @goModel(model: "github.com/theopenlane/core/pkg/enums.TemplateKind") {
  QUESTIONNAIRE
}
"""
TemplateHistoryWhereInput is used for filtering TemplateHistory objects.
Input was generated by ent.
"""
input TemplateHistoryWhereInput {
  not: TemplateHistoryWhereInput
  and: [TemplateHistoryWhereInput!]
  or: [TemplateHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TemplateHistoryOpType
  operationNEQ: TemplateHistoryOpType
  operationIn: [TemplateHistoryOpType!]
  operationNotIn: [TemplateHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  template_type field predicates
  """
  templateType: TemplateHistoryDocumentType
  templateTypeNEQ: TemplateHistoryDocumentType
  templateTypeIn: [TemplateHistoryDocumentType!]
  templateTypeNotIn: [TemplateHistoryDocumentType!]
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  kind field predicates
  """
  kind: TemplateHistoryTemplateKind
  kindNEQ: TemplateHistoryTemplateKind
  kindIn: [TemplateHistoryTemplateKind!]
  kindNotIn: [TemplateHistoryTemplateKind!]
  kindIsNil: Boolean
  kindNotNil: Boolean
}
"""
Ordering options for Template connections
"""
input TemplateOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Templates.
  """
  field: TemplateOrderField!
}
"""
Properties by which Template connections can be ordered.
"""
enum TemplateOrderField {
  created_at
  updated_at
  name
  TEMPLATE_TYPE
  KIND
}
"""
TemplateTemplateKind is enum for the field kind
"""
enum TemplateTemplateKind @goModel(model: "github.com/theopenlane/core/pkg/enums.TemplateKind") {
  QUESTIONNAIRE
}
"""
TemplateWhereInput is used for filtering Template objects.
Input was generated by ent.
"""
input TemplateWhereInput {
  not: TemplateWhereInput
  and: [TemplateWhereInput!]
  or: [TemplateWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  template_type field predicates
  """
  templateType: TemplateDocumentType
  templateTypeNEQ: TemplateDocumentType
  templateTypeIn: [TemplateDocumentType!]
  templateTypeNotIn: [TemplateDocumentType!]
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  kind field predicates
  """
  kind: TemplateTemplateKind
  kindNEQ: TemplateTemplateKind
  kindIn: [TemplateTemplateKind!]
  kindNotIn: [TemplateTemplateKind!]
  kindIsNil: Boolean
  kindNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentDataWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
type TrustCenter implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  Slug for the trust center
  """
  slug: String
  """
  custom domain id for the trust center
  """
  customDomainID: ID
  owner: Organization
  customDomain: CustomDomain
  setting: TrustCenterSetting
  trustCenterSubprocessors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterSubprocessors returned from the connection.
    """
    orderBy: [TrustCenterSubprocessorOrder!]

    """
    Filtering options for TrustCenterSubprocessors returned from the connection.
    """
    where: TrustCenterSubprocessorWhereInput
  ): TrustCenterSubprocessorConnection!
  trustCenterCompliances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TrustCenterCompliances returned from the connection.
    """
    orderBy: [TrustCenterComplianceOrder!]

    """
    Filtering options for TrustCenterCompliances returned from the connection.
    """
    where: TrustCenterComplianceWhereInput
  ): TrustCenterComplianceConnection!
}
type TrustCenterCompliance implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  ID of the standard
  """
  standardID: ID!
  """
  ID of the trust center
  """
  trustCenterID: ID
  trustCenter: TrustCenter
  standard: Standard!
}
"""
A connection to a list of items.
"""
type TrustCenterComplianceConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterComplianceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterComplianceEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterCompliance
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TrustCenterComplianceHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TrustCenterComplianceHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  ID of the standard
  """
  standardID: String!
  """
  ID of the trust center
  """
  trustCenterID: String
}
"""
A connection to a list of items.
"""
type TrustCenterComplianceHistoryConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterComplianceHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterComplianceHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterComplianceHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TrustCenterComplianceHistoryOpType is enum for the field operation
"""
enum TrustCenterComplianceHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TrustCenterComplianceHistory connections
"""
input TrustCenterComplianceHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterComplianceHistories.
  """
  field: TrustCenterComplianceHistoryOrderField!
}
"""
Properties by which TrustCenterComplianceHistory connections can be ordered.
"""
enum TrustCenterComplianceHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
TrustCenterComplianceHistoryWhereInput is used for filtering TrustCenterComplianceHistory objects.
Input was generated by ent.
"""
input TrustCenterComplianceHistoryWhereInput {
  not: TrustCenterComplianceHistoryWhereInput
  and: [TrustCenterComplianceHistoryWhereInput!]
  or: [TrustCenterComplianceHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TrustCenterComplianceHistoryOpType
  operationNEQ: TrustCenterComplianceHistoryOpType
  operationIn: [TrustCenterComplianceHistoryOpType!]
  operationNotIn: [TrustCenterComplianceHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  standard_id field predicates
  """
  standardID: String
  standardIDNEQ: String
  standardIDIn: [String!]
  standardIDNotIn: [String!]
  standardIDGT: String
  standardIDGTE: String
  standardIDLT: String
  standardIDLTE: String
  standardIDContains: String
  standardIDHasPrefix: String
  standardIDHasSuffix: String
  standardIDEqualFold: String
  standardIDContainsFold: String
  """
  trust_center_id field predicates
  """
  trustCenterID: String
  trustCenterIDNEQ: String
  trustCenterIDIn: [String!]
  trustCenterIDNotIn: [String!]
  trustCenterIDGT: String
  trustCenterIDGTE: String
  trustCenterIDLT: String
  trustCenterIDLTE: String
  trustCenterIDContains: String
  trustCenterIDHasPrefix: String
  trustCenterIDHasSuffix: String
  trustCenterIDIsNil: Boolean
  trustCenterIDNotNil: Boolean
  trustCenterIDEqualFold: String
  trustCenterIDContainsFold: String
}
"""
Ordering options for TrustCenterCompliance connections
"""
input TrustCenterComplianceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterCompliances.
  """
  field: TrustCenterComplianceOrderField!
}
"""
Properties by which TrustCenterCompliance connections can be ordered.
"""
enum TrustCenterComplianceOrderField {
  created_at
  updated_at
}
"""
TrustCenterComplianceWhereInput is used for filtering TrustCenterCompliance objects.
Input was generated by ent.
"""
input TrustCenterComplianceWhereInput {
  not: TrustCenterComplianceWhereInput
  and: [TrustCenterComplianceWhereInput!]
  or: [TrustCenterComplianceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  standard_id field predicates
  """
  standardID: ID
  standardIDNEQ: ID
  standardIDIn: [ID!]
  standardIDNotIn: [ID!]
  standardIDGT: ID
  standardIDGTE: ID
  standardIDLT: ID
  standardIDLTE: ID
  standardIDContains: ID
  standardIDHasPrefix: ID
  standardIDHasSuffix: ID
  standardIDEqualFold: ID
  standardIDContainsFold: ID
  """
  trust_center_id field predicates
  """
  trustCenterID: ID
  trustCenterIDNEQ: ID
  trustCenterIDIn: [ID!]
  trustCenterIDNotIn: [ID!]
  trustCenterIDGT: ID
  trustCenterIDGTE: ID
  trustCenterIDLT: ID
  trustCenterIDLTE: ID
  trustCenterIDContains: ID
  trustCenterIDHasPrefix: ID
  trustCenterIDHasSuffix: ID
  trustCenterIDIsNil: Boolean
  trustCenterIDNotNil: Boolean
  trustCenterIDEqualFold: ID
  trustCenterIDContainsFold: ID
  """
  trust_center edge predicates
  """
  hasTrustCenter: Boolean
  hasTrustCenterWith: [TrustCenterWhereInput!]
  """
  standard edge predicates
  """
  hasStandard: Boolean
  hasStandardWith: [StandardWhereInput!]
}
"""
A connection to a list of items.
"""
type TrustCenterConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type TrustCenterDoc implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
}
"""
A connection to a list of items.
"""
type TrustCenterDocConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterDocEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterDocEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterDoc
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TrustCenterDocHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TrustCenterDocHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
}
"""
A connection to a list of items.
"""
type TrustCenterDocHistoryConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterDocHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterDocHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterDocHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TrustCenterDocHistoryOpType is enum for the field operation
"""
enum TrustCenterDocHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TrustCenterDocHistory connections
"""
input TrustCenterDocHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterDocHistories.
  """
  field: TrustCenterDocHistoryOrderField!
}
"""
Properties by which TrustCenterDocHistory connections can be ordered.
"""
enum TrustCenterDocHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
TrustCenterDocHistoryWhereInput is used for filtering TrustCenterDocHistory objects.
Input was generated by ent.
"""
input TrustCenterDocHistoryWhereInput {
  not: TrustCenterDocHistoryWhereInput
  and: [TrustCenterDocHistoryWhereInput!]
  or: [TrustCenterDocHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TrustCenterDocHistoryOpType
  operationNEQ: TrustCenterDocHistoryOpType
  operationIn: [TrustCenterDocHistoryOpType!]
  operationNotIn: [TrustCenterDocHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
}
"""
Ordering options for TrustCenterDoc connections
"""
input TrustCenterDocOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterDocs.
  """
  field: TrustCenterDocOrderField!
}
"""
Properties by which TrustCenterDoc connections can be ordered.
"""
enum TrustCenterDocOrderField {
  created_at
  updated_at
}
"""
TrustCenterDocWhereInput is used for filtering TrustCenterDoc objects.
Input was generated by ent.
"""
input TrustCenterDocWhereInput {
  not: TrustCenterDocWhereInput
  and: [TrustCenterDocWhereInput!]
  or: [TrustCenterDocWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
}
"""
An edge in a connection.
"""
type TrustCenterEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenter
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TrustCenterHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TrustCenterHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  Slug for the trust center
  """
  slug: String
  """
  custom domain id for the trust center
  """
  customDomainID: String
}
"""
A connection to a list of items.
"""
type TrustCenterHistoryConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TrustCenterHistoryOpType is enum for the field operation
"""
enum TrustCenterHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TrustCenterHistory connections
"""
input TrustCenterHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterHistories.
  """
  field: TrustCenterHistoryOrderField!
}
"""
Properties by which TrustCenterHistory connections can be ordered.
"""
enum TrustCenterHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
TrustCenterHistoryWhereInput is used for filtering TrustCenterHistory objects.
Input was generated by ent.
"""
input TrustCenterHistoryWhereInput {
  not: TrustCenterHistoryWhereInput
  and: [TrustCenterHistoryWhereInput!]
  or: [TrustCenterHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TrustCenterHistoryOpType
  operationNEQ: TrustCenterHistoryOpType
  operationIn: [TrustCenterHistoryOpType!]
  operationNotIn: [TrustCenterHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  custom_domain_id field predicates
  """
  customDomainID: String
  customDomainIDNEQ: String
  customDomainIDIn: [String!]
  customDomainIDNotIn: [String!]
  customDomainIDGT: String
  customDomainIDGTE: String
  customDomainIDLT: String
  customDomainIDLTE: String
  customDomainIDContains: String
  customDomainIDHasPrefix: String
  customDomainIDHasSuffix: String
  customDomainIDIsNil: Boolean
  customDomainIDNotNil: Boolean
  customDomainIDEqualFold: String
  customDomainIDContainsFold: String
}
"""
Ordering options for TrustCenter connections
"""
input TrustCenterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenters.
  """
  field: TrustCenterOrderField!
}
"""
Properties by which TrustCenter connections can be ordered.
"""
enum TrustCenterOrderField {
  created_at
  updated_at
}
type TrustCenterSetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the ID of the trust center the settings belong to
  """
  trustCenterID: ID
  """
  title of the trust center
  """
  title: String
  """
  overview of the trust center
  """
  overview: String
  """
  URL of the logo
  """
  logoRemoteURL: String
  """
  The local logo file id, takes precedence over the logo remote URL
  """
  logoLocalFileID: ID
  """
  URL of the favicon
  """
  faviconRemoteURL: String
  """
  The local favicon file id, takes precedence over the favicon remote URL
  """
  faviconLocalFileID: ID
  """
  Theme mode for the trust center
  """
  themeMode: TrustCenterSettingTrustCenterThemeMode
  """
  primary color for the trust center
  """
  primaryColor: String
  """
  font for the trust center
  """
  font: String
  """
  foreground color for the trust center
  """
  foregroundColor: String
  """
  background color for the trust center
  """
  backgroundColor: String
  """
  accent/brand color for the trust center
  """
  accentColor: String
  trustCenter: TrustCenter
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  logoFile: File
  faviconFile: File
}
"""
A connection to a list of items.
"""
type TrustCenterSettingConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterSettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterSettingEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterSetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TrustCenterSettingHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TrustCenterSettingHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  the ID of the trust center the settings belong to
  """
  trustCenterID: String
  """
  title of the trust center
  """
  title: String
  """
  overview of the trust center
  """
  overview: String
  """
  URL of the logo
  """
  logoRemoteURL: String
  """
  The local logo file id, takes precedence over the logo remote URL
  """
  logoLocalFileID: String
  """
  URL of the favicon
  """
  faviconRemoteURL: String
  """
  The local favicon file id, takes precedence over the favicon remote URL
  """
  faviconLocalFileID: String
  """
  Theme mode for the trust center
  """
  themeMode: TrustCenterSettingHistoryTrustCenterThemeMode
  """
  primary color for the trust center
  """
  primaryColor: String
  """
  font for the trust center
  """
  font: String
  """
  foreground color for the trust center
  """
  foregroundColor: String
  """
  background color for the trust center
  """
  backgroundColor: String
  """
  accent/brand color for the trust center
  """
  accentColor: String
}
"""
A connection to a list of items.
"""
type TrustCenterSettingHistoryConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterSettingHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterSettingHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterSettingHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TrustCenterSettingHistoryOpType is enum for the field operation
"""
enum TrustCenterSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TrustCenterSettingHistory connections
"""
input TrustCenterSettingHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterSettingHistories.
  """
  field: TrustCenterSettingHistoryOrderField!
}
"""
Properties by which TrustCenterSettingHistory connections can be ordered.
"""
enum TrustCenterSettingHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
TrustCenterSettingHistoryTrustCenterThemeMode is enum for the field theme_mode
"""
enum TrustCenterSettingHistoryTrustCenterThemeMode @goModel(model: "github.com/theopenlane/core/pkg/enums.TrustCenterThemeMode") {
  EASY
  ADVANCED
}
"""
TrustCenterSettingHistoryWhereInput is used for filtering TrustCenterSettingHistory objects.
Input was generated by ent.
"""
input TrustCenterSettingHistoryWhereInput {
  not: TrustCenterSettingHistoryWhereInput
  and: [TrustCenterSettingHistoryWhereInput!]
  or: [TrustCenterSettingHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TrustCenterSettingHistoryOpType
  operationNEQ: TrustCenterSettingHistoryOpType
  operationIn: [TrustCenterSettingHistoryOpType!]
  operationNotIn: [TrustCenterSettingHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  trust_center_id field predicates
  """
  trustCenterID: String
  trustCenterIDNEQ: String
  trustCenterIDIn: [String!]
  trustCenterIDNotIn: [String!]
  trustCenterIDGT: String
  trustCenterIDGTE: String
  trustCenterIDLT: String
  trustCenterIDLTE: String
  trustCenterIDContains: String
  trustCenterIDHasPrefix: String
  trustCenterIDHasSuffix: String
  trustCenterIDIsNil: Boolean
  trustCenterIDNotNil: Boolean
  trustCenterIDEqualFold: String
  trustCenterIDContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  overview field predicates
  """
  overview: String
  overviewNEQ: String
  overviewIn: [String!]
  overviewNotIn: [String!]
  overviewGT: String
  overviewGTE: String
  overviewLT: String
  overviewLTE: String
  overviewContains: String
  overviewHasPrefix: String
  overviewHasSuffix: String
  overviewIsNil: Boolean
  overviewNotNil: Boolean
  overviewEqualFold: String
  overviewContainsFold: String
  """
  logo_remote_url field predicates
  """
  logoRemoteURL: String
  logoRemoteURLNEQ: String
  logoRemoteURLIn: [String!]
  logoRemoteURLNotIn: [String!]
  logoRemoteURLGT: String
  logoRemoteURLGTE: String
  logoRemoteURLLT: String
  logoRemoteURLLTE: String
  logoRemoteURLContains: String
  logoRemoteURLHasPrefix: String
  logoRemoteURLHasSuffix: String
  logoRemoteURLIsNil: Boolean
  logoRemoteURLNotNil: Boolean
  logoRemoteURLEqualFold: String
  logoRemoteURLContainsFold: String
  """
  logo_local_file_id field predicates
  """
  logoLocalFileID: String
  logoLocalFileIDNEQ: String
  logoLocalFileIDIn: [String!]
  logoLocalFileIDNotIn: [String!]
  logoLocalFileIDGT: String
  logoLocalFileIDGTE: String
  logoLocalFileIDLT: String
  logoLocalFileIDLTE: String
  logoLocalFileIDContains: String
  logoLocalFileIDHasPrefix: String
  logoLocalFileIDHasSuffix: String
  logoLocalFileIDIsNil: Boolean
  logoLocalFileIDNotNil: Boolean
  logoLocalFileIDEqualFold: String
  logoLocalFileIDContainsFold: String
  """
  favicon_remote_url field predicates
  """
  faviconRemoteURL: String
  faviconRemoteURLNEQ: String
  faviconRemoteURLIn: [String!]
  faviconRemoteURLNotIn: [String!]
  faviconRemoteURLGT: String
  faviconRemoteURLGTE: String
  faviconRemoteURLLT: String
  faviconRemoteURLLTE: String
  faviconRemoteURLContains: String
  faviconRemoteURLHasPrefix: String
  faviconRemoteURLHasSuffix: String
  faviconRemoteURLIsNil: Boolean
  faviconRemoteURLNotNil: Boolean
  faviconRemoteURLEqualFold: String
  faviconRemoteURLContainsFold: String
  """
  favicon_local_file_id field predicates
  """
  faviconLocalFileID: String
  faviconLocalFileIDNEQ: String
  faviconLocalFileIDIn: [String!]
  faviconLocalFileIDNotIn: [String!]
  faviconLocalFileIDGT: String
  faviconLocalFileIDGTE: String
  faviconLocalFileIDLT: String
  faviconLocalFileIDLTE: String
  faviconLocalFileIDContains: String
  faviconLocalFileIDHasPrefix: String
  faviconLocalFileIDHasSuffix: String
  faviconLocalFileIDIsNil: Boolean
  faviconLocalFileIDNotNil: Boolean
  faviconLocalFileIDEqualFold: String
  faviconLocalFileIDContainsFold: String
  """
  theme_mode field predicates
  """
  themeMode: TrustCenterSettingHistoryTrustCenterThemeMode
  themeModeNEQ: TrustCenterSettingHistoryTrustCenterThemeMode
  themeModeIn: [TrustCenterSettingHistoryTrustCenterThemeMode!]
  themeModeNotIn: [TrustCenterSettingHistoryTrustCenterThemeMode!]
  themeModeIsNil: Boolean
  themeModeNotNil: Boolean
  """
  primary_color field predicates
  """
  primaryColor: String
  primaryColorNEQ: String
  primaryColorIn: [String!]
  primaryColorNotIn: [String!]
  primaryColorGT: String
  primaryColorGTE: String
  primaryColorLT: String
  primaryColorLTE: String
  primaryColorContains: String
  primaryColorHasPrefix: String
  primaryColorHasSuffix: String
  primaryColorIsNil: Boolean
  primaryColorNotNil: Boolean
  primaryColorEqualFold: String
  primaryColorContainsFold: String
  """
  font field predicates
  """
  font: String
  fontNEQ: String
  fontIn: [String!]
  fontNotIn: [String!]
  fontGT: String
  fontGTE: String
  fontLT: String
  fontLTE: String
  fontContains: String
  fontHasPrefix: String
  fontHasSuffix: String
  fontIsNil: Boolean
  fontNotNil: Boolean
  fontEqualFold: String
  fontContainsFold: String
  """
  foreground_color field predicates
  """
  foregroundColor: String
  foregroundColorNEQ: String
  foregroundColorIn: [String!]
  foregroundColorNotIn: [String!]
  foregroundColorGT: String
  foregroundColorGTE: String
  foregroundColorLT: String
  foregroundColorLTE: String
  foregroundColorContains: String
  foregroundColorHasPrefix: String
  foregroundColorHasSuffix: String
  foregroundColorIsNil: Boolean
  foregroundColorNotNil: Boolean
  foregroundColorEqualFold: String
  foregroundColorContainsFold: String
  """
  background_color field predicates
  """
  backgroundColor: String
  backgroundColorNEQ: String
  backgroundColorIn: [String!]
  backgroundColorNotIn: [String!]
  backgroundColorGT: String
  backgroundColorGTE: String
  backgroundColorLT: String
  backgroundColorLTE: String
  backgroundColorContains: String
  backgroundColorHasPrefix: String
  backgroundColorHasSuffix: String
  backgroundColorIsNil: Boolean
  backgroundColorNotNil: Boolean
  backgroundColorEqualFold: String
  backgroundColorContainsFold: String
  """
  accent_color field predicates
  """
  accentColor: String
  accentColorNEQ: String
  accentColorIn: [String!]
  accentColorNotIn: [String!]
  accentColorGT: String
  accentColorGTE: String
  accentColorLT: String
  accentColorLTE: String
  accentColorContains: String
  accentColorHasPrefix: String
  accentColorHasSuffix: String
  accentColorIsNil: Boolean
  accentColorNotNil: Boolean
  accentColorEqualFold: String
  accentColorContainsFold: String
}
"""
Ordering options for TrustCenterSetting connections
"""
input TrustCenterSettingOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterSettings.
  """
  field: TrustCenterSettingOrderField!
}
"""
Properties by which TrustCenterSetting connections can be ordered.
"""
enum TrustCenterSettingOrderField {
  created_at
  updated_at
}
"""
TrustCenterSettingTrustCenterThemeMode is enum for the field theme_mode
"""
enum TrustCenterSettingTrustCenterThemeMode @goModel(model: "github.com/theopenlane/core/pkg/enums.TrustCenterThemeMode") {
  EASY
  ADVANCED
}
"""
TrustCenterSettingWhereInput is used for filtering TrustCenterSetting objects.
Input was generated by ent.
"""
input TrustCenterSettingWhereInput {
  not: TrustCenterSettingWhereInput
  and: [TrustCenterSettingWhereInput!]
  or: [TrustCenterSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  trust_center_id field predicates
  """
  trustCenterID: ID
  trustCenterIDNEQ: ID
  trustCenterIDIn: [ID!]
  trustCenterIDNotIn: [ID!]
  trustCenterIDGT: ID
  trustCenterIDGTE: ID
  trustCenterIDLT: ID
  trustCenterIDLTE: ID
  trustCenterIDContains: ID
  trustCenterIDHasPrefix: ID
  trustCenterIDHasSuffix: ID
  trustCenterIDIsNil: Boolean
  trustCenterIDNotNil: Boolean
  trustCenterIDEqualFold: ID
  trustCenterIDContainsFold: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  overview field predicates
  """
  overview: String
  overviewNEQ: String
  overviewIn: [String!]
  overviewNotIn: [String!]
  overviewGT: String
  overviewGTE: String
  overviewLT: String
  overviewLTE: String
  overviewContains: String
  overviewHasPrefix: String
  overviewHasSuffix: String
  overviewIsNil: Boolean
  overviewNotNil: Boolean
  overviewEqualFold: String
  overviewContainsFold: String
  """
  logo_remote_url field predicates
  """
  logoRemoteURL: String
  logoRemoteURLNEQ: String
  logoRemoteURLIn: [String!]
  logoRemoteURLNotIn: [String!]
  logoRemoteURLGT: String
  logoRemoteURLGTE: String
  logoRemoteURLLT: String
  logoRemoteURLLTE: String
  logoRemoteURLContains: String
  logoRemoteURLHasPrefix: String
  logoRemoteURLHasSuffix: String
  logoRemoteURLIsNil: Boolean
  logoRemoteURLNotNil: Boolean
  logoRemoteURLEqualFold: String
  logoRemoteURLContainsFold: String
  """
  logo_local_file_id field predicates
  """
  logoLocalFileID: ID
  logoLocalFileIDNEQ: ID
  logoLocalFileIDIn: [ID!]
  logoLocalFileIDNotIn: [ID!]
  logoLocalFileIDGT: ID
  logoLocalFileIDGTE: ID
  logoLocalFileIDLT: ID
  logoLocalFileIDLTE: ID
  logoLocalFileIDContains: ID
  logoLocalFileIDHasPrefix: ID
  logoLocalFileIDHasSuffix: ID
  logoLocalFileIDIsNil: Boolean
  logoLocalFileIDNotNil: Boolean
  logoLocalFileIDEqualFold: ID
  logoLocalFileIDContainsFold: ID
  """
  favicon_remote_url field predicates
  """
  faviconRemoteURL: String
  faviconRemoteURLNEQ: String
  faviconRemoteURLIn: [String!]
  faviconRemoteURLNotIn: [String!]
  faviconRemoteURLGT: String
  faviconRemoteURLGTE: String
  faviconRemoteURLLT: String
  faviconRemoteURLLTE: String
  faviconRemoteURLContains: String
  faviconRemoteURLHasPrefix: String
  faviconRemoteURLHasSuffix: String
  faviconRemoteURLIsNil: Boolean
  faviconRemoteURLNotNil: Boolean
  faviconRemoteURLEqualFold: String
  faviconRemoteURLContainsFold: String
  """
  favicon_local_file_id field predicates
  """
  faviconLocalFileID: ID
  faviconLocalFileIDNEQ: ID
  faviconLocalFileIDIn: [ID!]
  faviconLocalFileIDNotIn: [ID!]
  faviconLocalFileIDGT: ID
  faviconLocalFileIDGTE: ID
  faviconLocalFileIDLT: ID
  faviconLocalFileIDLTE: ID
  faviconLocalFileIDContains: ID
  faviconLocalFileIDHasPrefix: ID
  faviconLocalFileIDHasSuffix: ID
  faviconLocalFileIDIsNil: Boolean
  faviconLocalFileIDNotNil: Boolean
  faviconLocalFileIDEqualFold: ID
  faviconLocalFileIDContainsFold: ID
  """
  theme_mode field predicates
  """
  themeMode: TrustCenterSettingTrustCenterThemeMode
  themeModeNEQ: TrustCenterSettingTrustCenterThemeMode
  themeModeIn: [TrustCenterSettingTrustCenterThemeMode!]
  themeModeNotIn: [TrustCenterSettingTrustCenterThemeMode!]
  themeModeIsNil: Boolean
  themeModeNotNil: Boolean
  """
  primary_color field predicates
  """
  primaryColor: String
  primaryColorNEQ: String
  primaryColorIn: [String!]
  primaryColorNotIn: [String!]
  primaryColorGT: String
  primaryColorGTE: String
  primaryColorLT: String
  primaryColorLTE: String
  primaryColorContains: String
  primaryColorHasPrefix: String
  primaryColorHasSuffix: String
  primaryColorIsNil: Boolean
  primaryColorNotNil: Boolean
  primaryColorEqualFold: String
  primaryColorContainsFold: String
  """
  font field predicates
  """
  font: String
  fontNEQ: String
  fontIn: [String!]
  fontNotIn: [String!]
  fontGT: String
  fontGTE: String
  fontLT: String
  fontLTE: String
  fontContains: String
  fontHasPrefix: String
  fontHasSuffix: String
  fontIsNil: Boolean
  fontNotNil: Boolean
  fontEqualFold: String
  fontContainsFold: String
  """
  foreground_color field predicates
  """
  foregroundColor: String
  foregroundColorNEQ: String
  foregroundColorIn: [String!]
  foregroundColorNotIn: [String!]
  foregroundColorGT: String
  foregroundColorGTE: String
  foregroundColorLT: String
  foregroundColorLTE: String
  foregroundColorContains: String
  foregroundColorHasPrefix: String
  foregroundColorHasSuffix: String
  foregroundColorIsNil: Boolean
  foregroundColorNotNil: Boolean
  foregroundColorEqualFold: String
  foregroundColorContainsFold: String
  """
  background_color field predicates
  """
  backgroundColor: String
  backgroundColorNEQ: String
  backgroundColorIn: [String!]
  backgroundColorNotIn: [String!]
  backgroundColorGT: String
  backgroundColorGTE: String
  backgroundColorLT: String
  backgroundColorLTE: String
  backgroundColorContains: String
  backgroundColorHasPrefix: String
  backgroundColorHasSuffix: String
  backgroundColorIsNil: Boolean
  backgroundColorNotNil: Boolean
  backgroundColorEqualFold: String
  backgroundColorContainsFold: String
  """
  accent_color field predicates
  """
  accentColor: String
  accentColorNEQ: String
  accentColorIn: [String!]
  accentColorNotIn: [String!]
  accentColorGT: String
  accentColorGTE: String
  accentColorLT: String
  accentColorLTE: String
  accentColorContains: String
  accentColorHasPrefix: String
  accentColorHasSuffix: String
  accentColorIsNil: Boolean
  accentColorNotNil: Boolean
  accentColorEqualFold: String
  accentColorContainsFold: String
  """
  trust_center edge predicates
  """
  hasTrustCenter: Boolean
  hasTrustCenterWith: [TrustCenterWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  logo_file edge predicates
  """
  hasLogoFile: Boolean
  hasLogoFileWith: [FileWhereInput!]
  """
  favicon_file edge predicates
  """
  hasFaviconFile: Boolean
  hasFaviconFileWith: [FileWhereInput!]
}
type TrustCenterSubprocessor implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  ID of the subprocessor
  """
  subprocessorID: ID!
  """
  ID of the trust center
  """
  trustCenterID: ID
  """
  country codes or country where the subprocessor is located
  """
  countries: [String!]
  """
  Category of the subprocessor, e.g. 'Data Warehouse' or 'Infrastructure Hosting'
  """
  category: String!
  trustCenter: TrustCenter
  subprocessor: Subprocessor!
}
"""
A connection to a list of items.
"""
type TrustCenterSubprocessorConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterSubprocessorEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterSubprocessorEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterSubprocessor
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TrustCenterSubprocessorHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TrustCenterSubprocessorHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  ID of the subprocessor
  """
  subprocessorID: String!
  """
  ID of the trust center
  """
  trustCenterID: String
  """
  country codes or country where the subprocessor is located
  """
  countries: [String!]
  """
  Category of the subprocessor, e.g. 'Data Warehouse' or 'Infrastructure Hosting'
  """
  category: String!
}
"""
A connection to a list of items.
"""
type TrustCenterSubprocessorHistoryConnection {
  """
  A list of edges.
  """
  edges: [TrustCenterSubprocessorHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TrustCenterSubprocessorHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TrustCenterSubprocessorHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TrustCenterSubprocessorHistoryOpType is enum for the field operation
"""
enum TrustCenterSubprocessorHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TrustCenterSubprocessorHistory connections
"""
input TrustCenterSubprocessorHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterSubprocessorHistories.
  """
  field: TrustCenterSubprocessorHistoryOrderField!
}
"""
Properties by which TrustCenterSubprocessorHistory connections can be ordered.
"""
enum TrustCenterSubprocessorHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
TrustCenterSubprocessorHistoryWhereInput is used for filtering TrustCenterSubprocessorHistory objects.
Input was generated by ent.
"""
input TrustCenterSubprocessorHistoryWhereInput {
  not: TrustCenterSubprocessorHistoryWhereInput
  and: [TrustCenterSubprocessorHistoryWhereInput!]
  or: [TrustCenterSubprocessorHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TrustCenterSubprocessorHistoryOpType
  operationNEQ: TrustCenterSubprocessorHistoryOpType
  operationIn: [TrustCenterSubprocessorHistoryOpType!]
  operationNotIn: [TrustCenterSubprocessorHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  subprocessor_id field predicates
  """
  subprocessorID: String
  subprocessorIDNEQ: String
  subprocessorIDIn: [String!]
  subprocessorIDNotIn: [String!]
  subprocessorIDGT: String
  subprocessorIDGTE: String
  subprocessorIDLT: String
  subprocessorIDLTE: String
  subprocessorIDContains: String
  subprocessorIDHasPrefix: String
  subprocessorIDHasSuffix: String
  subprocessorIDEqualFold: String
  subprocessorIDContainsFold: String
  """
  trust_center_id field predicates
  """
  trustCenterID: String
  trustCenterIDNEQ: String
  trustCenterIDIn: [String!]
  trustCenterIDNotIn: [String!]
  trustCenterIDGT: String
  trustCenterIDGTE: String
  trustCenterIDLT: String
  trustCenterIDLTE: String
  trustCenterIDContains: String
  trustCenterIDHasPrefix: String
  trustCenterIDHasSuffix: String
  trustCenterIDIsNil: Boolean
  trustCenterIDNotNil: Boolean
  trustCenterIDEqualFold: String
  trustCenterIDContainsFold: String
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryEqualFold: String
  categoryContainsFold: String
}
"""
Ordering options for TrustCenterSubprocessor connections
"""
input TrustCenterSubprocessorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TrustCenterSubprocessors.
  """
  field: TrustCenterSubprocessorOrderField!
}
"""
Properties by which TrustCenterSubprocessor connections can be ordered.
"""
enum TrustCenterSubprocessorOrderField {
  created_at
  updated_at
}
"""
TrustCenterSubprocessorWhereInput is used for filtering TrustCenterSubprocessor objects.
Input was generated by ent.
"""
input TrustCenterSubprocessorWhereInput {
  not: TrustCenterSubprocessorWhereInput
  and: [TrustCenterSubprocessorWhereInput!]
  or: [TrustCenterSubprocessorWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  subprocessor_id field predicates
  """
  subprocessorID: ID
  subprocessorIDNEQ: ID
  subprocessorIDIn: [ID!]
  subprocessorIDNotIn: [ID!]
  subprocessorIDGT: ID
  subprocessorIDGTE: ID
  subprocessorIDLT: ID
  subprocessorIDLTE: ID
  subprocessorIDContains: ID
  subprocessorIDHasPrefix: ID
  subprocessorIDHasSuffix: ID
  subprocessorIDEqualFold: ID
  subprocessorIDContainsFold: ID
  """
  trust_center_id field predicates
  """
  trustCenterID: ID
  trustCenterIDNEQ: ID
  trustCenterIDIn: [ID!]
  trustCenterIDNotIn: [ID!]
  trustCenterIDGT: ID
  trustCenterIDGTE: ID
  trustCenterIDLT: ID
  trustCenterIDLTE: ID
  trustCenterIDContains: ID
  trustCenterIDHasPrefix: ID
  trustCenterIDHasSuffix: ID
  trustCenterIDIsNil: Boolean
  trustCenterIDNotNil: Boolean
  trustCenterIDEqualFold: ID
  trustCenterIDContainsFold: ID
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryEqualFold: String
  categoryContainsFold: String
  """
  trust_center edge predicates
  """
  hasTrustCenter: Boolean
  hasTrustCenterWith: [TrustCenterWhereInput!]
  """
  subprocessor edge predicates
  """
  hasSubprocessor: Boolean
  hasSubprocessorWith: [SubprocessorWhereInput!]
}
"""
TrustCenterWhereInput is used for filtering TrustCenter objects.
Input was generated by ent.
"""
input TrustCenterWhereInput {
  not: TrustCenterWhereInput
  and: [TrustCenterWhereInput!]
  or: [TrustCenterWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  custom_domain_id field predicates
  """
  customDomainID: ID
  customDomainIDNEQ: ID
  customDomainIDIn: [ID!]
  customDomainIDNotIn: [ID!]
  customDomainIDGT: ID
  customDomainIDGTE: ID
  customDomainIDLT: ID
  customDomainIDLTE: ID
  customDomainIDContains: ID
  customDomainIDHasPrefix: ID
  customDomainIDHasSuffix: ID
  customDomainIDIsNil: Boolean
  customDomainIDNotNil: Boolean
  customDomainIDEqualFold: ID
  customDomainIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  custom_domain edge predicates
  """
  hasCustomDomain: Boolean
  hasCustomDomainWith: [CustomDomainWhereInput!]
  """
  setting edge predicates
  """
  hasSetting: Boolean
  hasSettingWith: [TrustCenterSettingWhereInput!]
  """
  trust_center_subprocessors edge predicates
  """
  hasTrustCenterSubprocessors: Boolean
  hasTrustCenterSubprocessorsWith: [TrustCenterSubprocessorWhereInput!]
  """
  trust_center_compliances edge predicates
  """
  hasTrustCenterCompliances: Boolean
  hasTrustCenterCompliancesWith: [TrustCenterComplianceWhereInput!]
}
"""
UpdateAPITokenInput is used for update APIToken object.
Input was generated by ent.
"""
input UpdateAPITokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name associated with the token
  """
  name: String
  """
  a description of the token's purpose
  """
  description: String
  clearDescription: Boolean
  scopes: [String!]
  appendScopes: [String!]
  clearScopes: Boolean
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  """
  whether the token is active
  """
  isActive: Boolean
  clearIsActive: Boolean
  """
  the reason the token was revoked
  """
  revokedReason: String
  clearRevokedReason: Boolean
  """
  the user who revoked the token
  """
  revokedBy: String
  clearRevokedBy: Boolean
  """
  when the token was revoked
  """
  revokedAt: Time
  clearRevokedAt: Boolean
  """
  SSO verification time for the owning organization
  """
  ssoAuthorizations: SSOAuthorizationMap
  clearSSOAuthorizations: Boolean
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateActionPlanInput is used for update ActionPlan object.
Input was generated by ent.
"""
input UpdateActionPlanInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  clearRevision: Boolean
  """
  the name of the action_plan
  """
  name: String
  """
  status of the action_plan, e.g. draft, published, archived, etc.
  """
  status: ActionPlanDocumentStatus
  clearStatus: Boolean
  """
  type of the action_plan, e.g. compliance, operational, health and safety, etc.
  """
  actionPlanType: String
  clearActionPlanType: Boolean
  """
  details of the action_plan
  """
  details: String
  clearDetails: Boolean
  """
  whether approval is required for edits to the action_plan
  """
  approvalRequired: Boolean
  clearApprovalRequired: Boolean
  """
  the date the action_plan should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  clearReviewDue: Boolean
  """
  the frequency at which the action_plan should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ActionPlanFrequency
  clearReviewFrequency: Boolean
  """
  auto-generated tag suggestions for the action_plan
  """
  tagSuggestions: [String!]
  appendTagSuggestions: [String!]
  clearTagSuggestions: Boolean
  """
  tag suggestions dismissed by the user for the action_plan
  """
  dismissedTagSuggestions: [String!]
  appendDismissedTagSuggestions: [String!]
  clearDismissedTagSuggestions: Boolean
  """
  proposed controls referenced in the action_plan
  """
  controlSuggestions: [String!]
  appendControlSuggestions: [String!]
  clearControlSuggestions: Boolean
  """
  control suggestions dismissed by the user for the action_plan
  """
  dismissedControlSuggestions: [String!]
  appendDismissedControlSuggestions: [String!]
  clearDismissedControlSuggestions: Boolean
  """
  suggested improvements for the action_plan
  """
  improvementSuggestions: [String!]
  appendImprovementSuggestions: [String!]
  clearImprovementSuggestions: Boolean
  """
  improvement suggestions dismissed by the user for the action_plan
  """
  dismissedImprovementSuggestions: [String!]
  appendDismissedImprovementSuggestions: [String!]
  clearDismissedImprovementSuggestions: Boolean
  """
  due date of the action plan
  """
  dueDate: Time
  clearDueDate: Boolean
  """
  priority of the action plan
  """
  priority: ActionPlanPriority
  clearPriority: Boolean
  """
  source of the action plan
  """
  source: String
  clearSource: Boolean
  approverID: ID
  clearApprover: Boolean
  delegateID: ID
  clearDelegate: Boolean
  ownerID: ID
  clearOwner: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateAssetInput is used for update Asset object.
Input was generated by ent.
"""
input UpdateAssetInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the type of the asset, e.g. technology, domain, device, etc
  """
  assetType: AssetAssetType
  """
  the name of the asset, e.g. matts computer, office router, IP address, etc
  """
  name: String
  description: String
  clearDescription: Boolean
  """
  unique identifier like domain, device id, etc
  """
  identifier: String
  clearIdentifier: Boolean
  """
  the website of the asset, if applicable
  """
  website: String
  clearWebsite: Boolean
  """
  the CPE (Common Platform Enumeration) of the asset, if applicable
  """
  cpe: String
  clearCpe: Boolean
  """
  the categories of the asset, e.g. web server, database, etc
  """
  categories: [String!]
  appendCategories: [String!]
  clearCategories: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addScanIDs: [ID!]
  removeScanIDs: [ID!]
  clearScans: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
}
"""
UpdateContactInput is used for update Contact object.
Input was generated by ent.
"""
input UpdateContactInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the full name of the contact
  """
  fullName: String
  """
  the title of the contact
  """
  title: String
  clearTitle: Boolean
  """
  the company of the contact
  """
  company: String
  clearCompany: Boolean
  """
  the email of the contact
  """
  email: String
  clearEmail: Boolean
  """
  the phone number of the contact
  """
  phoneNumber: String
  clearPhoneNumber: Boolean
  """
  the address of the contact
  """
  address: String
  clearAddress: Boolean
  """
  status of the contact
  """
  status: ContactUserStatus
  ownerID: ID
  clearOwner: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateControlImplementationInput is used for update ControlImplementation object.
Input was generated by ent.
"""
input UpdateControlImplementationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  status of the %s, e.g. draft, published, archived, etc.
  """
  status: ControlImplementationDocumentStatus
  clearStatus: Boolean
  """
  date the control was implemented
  """
  implementationDate: Time
  clearImplementationDate: Boolean
  """
  set to true if the control implementation has been verified
  """
  verified: Boolean
  clearVerified: Boolean
  """
  date the control implementation was verified
  """
  verificationDate: Time
  clearVerificationDate: Boolean
  """
  details of the control implementation
  """
  details: String
  clearDetails: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
}
"""
UpdateControlInput is used for update Control object.
Input was generated by ent.
"""
input UpdateControlInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  description of what the control is supposed to accomplish
  """
  description: String
  clearDescription: Boolean
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  clearReferenceID: Boolean
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  clearAuditorReferenceID: Boolean
  """
  status of the control
  """
  status: ControlControlStatus
  clearStatus: Boolean
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlControlSource
  clearSource: Boolean
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: ControlControlType
  clearControlType: Boolean
  """
  category of the control
  """
  category: String
  clearCategory: Boolean
  """
  category id of the control
  """
  categoryID: String
  clearCategoryID: Boolean
  """
  subcategory of the control
  """
  subcategory: String
  clearSubcategory: Boolean
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  appendMappedCategories: [String!]
  clearMappedCategories: Boolean
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  appendAssessmentObjectives: [AssessmentObjective!]
  clearAssessmentObjectives: Boolean
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  appendAssessmentMethods: [AssessmentMethod!]
  clearAssessmentMethods: Boolean
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  appendControlQuestions: [String!]
  clearControlQuestions: Boolean
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  appendImplementationGuidance: [ImplementationGuidance!]
  clearImplementationGuidance: Boolean
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  appendExampleEvidence: [ExampleEvidence!]
  clearExampleEvidence: Boolean
  """
  references for the control
  """
  references: [Reference!]
  appendReferences: [Reference!]
  clearReferences: Boolean
  """
  the unique reference code for the control
  """
  refCode: String
  addEvidenceIDs: [ID!]
  removeEvidenceIDs: [ID!]
  clearEvidence: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  controlOwnerID: ID
  clearControlOwner: Boolean
  delegateID: ID
  clearDelegate: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  standardID: ID
  clearStandard: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addAssetIDs: [ID!]
  removeAssetIDs: [ID!]
  clearAssets: Boolean
  addScanIDs: [ID!]
  removeScanIDs: [ID!]
  clearScans: Boolean
  addControlImplementationIDs: [ID!]
  removeControlImplementationIDs: [ID!]
  clearControlImplementations: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addScheduledJobIDs: [ID!]
  removeScheduledJobIDs: [ID!]
  clearScheduledJobs: Boolean
}
"""
UpdateControlObjectiveInput is used for update ControlObjective object.
Input was generated by ent.
"""
input UpdateControlObjectiveInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  clearRevision: Boolean
  """
  the name of the control objective
  """
  name: String
  """
  the desired outcome or target of the control objective
  """
  desiredOutcome: String
  clearDesiredOutcome: Boolean
  """
  status of the control objective
  """
  status: ControlObjectiveObjectiveStatus
  clearStatus: Boolean
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: ControlObjectiveControlSource
  clearSource: Boolean
  """
  type of the control objective e.g. compliance, financial, operational, etc.
  """
  controlObjectiveType: String
  clearControlObjectiveType: Boolean
  """
  category of the control
  """
  category: String
  clearCategory: Boolean
  """
  subcategory of the control
  """
  subcategory: String
  clearSubcategory: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addEvidenceIDs: [ID!]
  removeEvidenceIDs: [ID!]
  clearEvidence: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
}
"""
UpdateCustomDomainInput is used for update CustomDomain object.
Input was generated by ent.
"""
input UpdateCustomDomainInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  ownerID: ID
  clearOwner: Boolean
  dnsVerificationID: ID
  clearDNSVerification: Boolean
}
"""
UpdateDNSVerificationInput is used for update DNSVerification object.
Input was generated by ent.
"""
input UpdateDNSVerificationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the dns txt record
  """
  dnsTxtRecord: String
  """
  the expected value of the dns txt record
  """
  dnsTxtValue: String
  """
  Status of the domain verification
  """
  dnsVerificationStatus: DNSVerificationDNSVerificationStatus
  """
  Reason of the dns verification status, for giving the user diagnostic info
  """
  dnsVerificationStatusReason: String
  clearDNSVerificationStatusReason: Boolean
  """
  Path under /.well-known/acme-challenge/ to serve the ACME challenge
  """
  acmeChallengePath: String
  clearAcmeChallengePath: Boolean
  """
  the expected value of the acme challenge record
  """
  expectedAcmeChallengeValue: String
  clearExpectedAcmeChallengeValue: Boolean
  """
  Status of the ACME challenge validation
  """
  acmeChallengeStatus: DNSVerificationSSLVerificationStatus
  """
  Reason of the ACME status, for giving the user diagnostic info
  """
  acmeChallengeStatusReason: String
  clearAcmeChallengeStatusReason: Boolean
  ownerID: ID
  clearOwner: Boolean
  addCustomDomainIDs: [ID!]
  removeCustomDomainIDs: [ID!]
  clearCustomDomains: Boolean
}
"""
UpdateDocumentDataInput is used for update DocumentData object.
Input was generated by ent.
"""
input UpdateDocumentDataInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the json data of the document
  """
  data: Map
  templateID: ID
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateEntityInput is used for update Entity object.
Input was generated by ent.
"""
input UpdateEntityInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the entity
  """
  name: String
  clearName: Boolean
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  clearDisplayName: Boolean
  """
  An optional description of the entity
  """
  description: String
  clearDescription: Boolean
  """
  domains associated with the entity
  """
  domains: [String!]
  appendDomains: [String!]
  clearDomains: Boolean
  """
  status of the entity
  """
  status: String
  clearStatus: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addContactIDs: [ID!]
  removeContactIDs: [ID!]
  clearContacts: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
  addNoteIDs: [ID!]
  removeNoteIDs: [ID!]
  clearNotes: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addAssetIDs: [ID!]
  removeAssetIDs: [ID!]
  clearAssets: Boolean
  addScanIDs: [ID!]
  removeScanIDs: [ID!]
  clearScans: Boolean
  entityTypeID: ID
  clearEntityType: Boolean
}
"""
UpdateEntityTypeInput is used for update EntityType object.
Input was generated by ent.
"""
input UpdateEntityTypeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the entity
  """
  name: String
  ownerID: ID
  clearOwner: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
}
"""
UpdateEventInput is used for update Event object.
Input was generated by ent.
"""
input UpdateEventInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  eventID: String
  clearEventID: Boolean
  correlationID: String
  clearCorrelationID: Boolean
  eventType: String
  metadata: Map
  clearMetadata: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganizations: Boolean
  addInviteIDs: [ID!]
  removeInviteIDs: [ID!]
  clearInvites: Boolean
  addPersonalAccessTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  clearPersonalAccessTokens: Boolean
  addSecretIDs: [ID!]
  removeSecretIDs: [ID!]
  clearSecrets: Boolean
  addSubscriberIDs: [ID!]
  removeSubscriberIDs: [ID!]
  clearSubscribers: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addOrgSubscriptionIDs: [ID!]
  removeOrgSubscriptionIDs: [ID!]
  clearOrgSubscriptions: Boolean
}
"""
UpdateEvidenceInput is used for update Evidence object.
Input was generated by ent.
"""
input UpdateEvidenceInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the evidence
  """
  name: String
  """
  the description of the evidence, what is contained in the uploaded file(s) or url(s)
  """
  description: String
  clearDescription: Boolean
  """
  description of how the evidence was collected
  """
  collectionProcedure: String
  clearCollectionProcedure: Boolean
  """
  the date the evidence was retrieved
  """
  creationDate: Time
  """
  the date the evidence should be renewed, defaults to a year from entry date
  """
  renewalDate: Time
  clearRenewalDate: Boolean
  """
  the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
  """
  source: String
  clearSource: Boolean
  """
  whether the evidence was automatically generated
  """
  isAutomated: Boolean
  clearIsAutomated: Boolean
  """
  the url of the evidence if not uploaded directly to the system
  """
  url: String
  clearURL: Boolean
  """
  the status of the evidence, ready, approved, needs renewal, missing artifact, rejected
  """
  status: EvidenceEvidenceStatus
  clearStatus: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addControlImplementationIDs: [ID!]
  removeControlImplementationIDs: [ID!]
  clearControlImplementations: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
}
"""
UpdateExportInput is used for update Export object.
Input was generated by ent.
"""
input UpdateExportInput {
  """
  the status of the export, e.g., pending, ready, failed
  """
  status: ExportExportStatus
  """
  if we try to export and it fails, the error message will be stored here
  """
  errorMessage: String
  clearErrorMessage: Boolean
  ownerID: ID
  clearOwner: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateFileInput is used for update File object.
Input was generated by ent.
"""
input UpdateFileInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String
  """
  the extension of the file provided
  """
  providedFileExtension: String
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  clearProvidedFileSize: Boolean
  persistedFileSize: Int
  clearPersistedFileSize: Boolean
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  clearDetectedMimeType: Boolean
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  clearMd5Hash: Boolean
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  clearStoreKey: Boolean
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  clearCategoryType: Boolean
  """
  the full URI of the file
  """
  uri: String
  clearURI: Boolean
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  clearStorageScheme: Boolean
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  clearStorageVolume: Boolean
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
  clearStoragePath: Boolean
  """
  additional metadata about the file
  """
  metadata: Map
  clearMetadata: Boolean
  """
  the region the file is stored in, if applicable
  """
  storageRegion: String
  clearStorageRegion: Boolean
  """
  the storage provider the file is stored in, if applicable
  """
  storageProvider: String
  clearStorageProvider: Boolean
  lastAccessedAt: Time
  clearLastAccessedAt: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUser: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganization: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addContactIDs: [ID!]
  removeContactIDs: [ID!]
  clearContact: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntity: Boolean
  addUserSettingIDs: [ID!]
  removeUserSettingIDs: [ID!]
  clearUserSetting: Boolean
  addOrganizationSettingIDs: [ID!]
  removeOrganizationSettingIDs: [ID!]
  clearOrganizationSetting: Boolean
  addTemplateIDs: [ID!]
  removeTemplateIDs: [ID!]
  clearTemplate: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocument: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearProgram: Boolean
  addEvidenceIDs: [ID!]
  removeEvidenceIDs: [ID!]
  clearEvidence: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addTrustCenterSettingIDs: [ID!]
  removeTrustCenterSettingIDs: [ID!]
  clearTrustCenterSetting: Boolean
  addSubprocessorIDs: [ID!]
  removeSubprocessorIDs: [ID!]
  clearSubprocessor: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  addSecretIDs: [ID!]
  removeSecretIDs: [ID!]
  clearSecrets: Boolean
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the group - must be unique within the organization
  """
  name: String
  """
  the groups description
  """
  description: String
  clearDescription: Boolean
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  clearLogoURL: Boolean
  """
  The group's displayed 'friendly' name
  """
  displayName: String
  ownerID: ID
  clearOwner: Boolean
  addProgramEditorIDs: [ID!]
  removeProgramEditorIDs: [ID!]
  clearProgramEditors: Boolean
  addProgramBlockedGroupIDs: [ID!]
  removeProgramBlockedGroupIDs: [ID!]
  clearProgramBlockedGroups: Boolean
  addProgramViewerIDs: [ID!]
  removeProgramViewerIDs: [ID!]
  clearProgramViewers: Boolean
  addRiskEditorIDs: [ID!]
  removeRiskEditorIDs: [ID!]
  clearRiskEditors: Boolean
  addRiskBlockedGroupIDs: [ID!]
  removeRiskBlockedGroupIDs: [ID!]
  clearRiskBlockedGroups: Boolean
  addRiskViewerIDs: [ID!]
  removeRiskViewerIDs: [ID!]
  clearRiskViewers: Boolean
  addControlObjectiveEditorIDs: [ID!]
  removeControlObjectiveEditorIDs: [ID!]
  clearControlObjectiveEditors: Boolean
  addControlObjectiveBlockedGroupIDs: [ID!]
  removeControlObjectiveBlockedGroupIDs: [ID!]
  clearControlObjectiveBlockedGroups: Boolean
  addControlObjectiveViewerIDs: [ID!]
  removeControlObjectiveViewerIDs: [ID!]
  clearControlObjectiveViewers: Boolean
  addNarrativeEditorIDs: [ID!]
  removeNarrativeEditorIDs: [ID!]
  clearNarrativeEditors: Boolean
  addNarrativeBlockedGroupIDs: [ID!]
  removeNarrativeBlockedGroupIDs: [ID!]
  clearNarrativeBlockedGroups: Boolean
  addNarrativeViewerIDs: [ID!]
  removeNarrativeViewerIDs: [ID!]
  clearNarrativeViewers: Boolean
  addControlImplementationEditorIDs: [ID!]
  removeControlImplementationEditorIDs: [ID!]
  clearControlImplementationEditors: Boolean
  addControlImplementationBlockedGroupIDs: [ID!]
  removeControlImplementationBlockedGroupIDs: [ID!]
  clearControlImplementationBlockedGroups: Boolean
  addControlImplementationViewerIDs: [ID!]
  removeControlImplementationViewerIDs: [ID!]
  clearControlImplementationViewers: Boolean
  addScanEditorIDs: [ID!]
  removeScanEditorIDs: [ID!]
  clearScanEditors: Boolean
  addScanBlockedGroupIDs: [ID!]
  removeScanBlockedGroupIDs: [ID!]
  clearScanBlockedGroups: Boolean
  addScanViewerIDs: [ID!]
  removeScanViewerIDs: [ID!]
  clearScanViewers: Boolean
  addEntityEditorIDs: [ID!]
  removeEntityEditorIDs: [ID!]
  clearEntityEditors: Boolean
  addEntityBlockedGroupIDs: [ID!]
  removeEntityBlockedGroupIDs: [ID!]
  clearEntityBlockedGroups: Boolean
  addEntityViewerIDs: [ID!]
  removeEntityViewerIDs: [ID!]
  clearEntityViewers: Boolean
  addProcedureEditorIDs: [ID!]
  removeProcedureEditorIDs: [ID!]
  clearProcedureEditors: Boolean
  addProcedureBlockedGroupIDs: [ID!]
  removeProcedureBlockedGroupIDs: [ID!]
  clearProcedureBlockedGroups: Boolean
  addInternalPolicyEditorIDs: [ID!]
  removeInternalPolicyEditorIDs: [ID!]
  clearInternalPolicyEditors: Boolean
  addInternalPolicyBlockedGroupIDs: [ID!]
  removeInternalPolicyBlockedGroupIDs: [ID!]
  clearInternalPolicyBlockedGroups: Boolean
  addControlEditorIDs: [ID!]
  removeControlEditorIDs: [ID!]
  clearControlEditors: Boolean
  addControlBlockedGroupIDs: [ID!]
  removeControlBlockedGroupIDs: [ID!]
  clearControlBlockedGroups: Boolean
  addMappedControlEditorIDs: [ID!]
  removeMappedControlEditorIDs: [ID!]
  clearMappedControlEditors: Boolean
  addMappedControlBlockedGroupIDs: [ID!]
  removeMappedControlBlockedGroupIDs: [ID!]
  clearMappedControlBlockedGroups: Boolean
  settingID: ID
  clearSetting: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
}
"""
UpdateGroupMembershipInput is used for update GroupMembership object.
Input was generated by ent.
"""
input UpdateGroupMembershipInput {
  role: GroupMembershipRole
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateGroupSettingInput is used for update GroupSetting object.
Input was generated by ent.
"""
input UpdateGroupSettingInput {
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingVisibility
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingJoinPolicy
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  clearSyncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  clearSyncToGithub: Boolean
  groupID: ID
  clearGroup: Boolean
}
"""
UpdateHushInput is used for update Hush object.
Input was generated by ent.
"""
input UpdateHushInput {
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  clearDescription: Boolean
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  clearKind: Boolean
  """
  a credential set, typically where you have multiple tokens or keys that compose one credential such as when accessing s3 and using access key ID, secret key, etc.
  """
  credentialSet: CredentialSet
  clearCredentialSet: Boolean
  """
  additional metadata about the credential
  """
  metadata: Map
  clearMetadata: Boolean
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  """
  when the token expires
  """
  expiresAt: Time
  clearExpiresAt: Boolean
  ownerID: ID
  clearOwner: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateInternalPolicyInput is used for update InternalPolicy object.
Input was generated by ent.
"""
input UpdateInternalPolicyInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  clearRevision: Boolean
  """
  the name of the policy
  """
  name: String
  """
  status of the policy, e.g. draft, published, archived, etc.
  """
  status: InternalPolicyDocumentStatus
  clearStatus: Boolean
  """
  type of the policy, e.g. compliance, operational, health and safety, etc.
  """
  policyType: String
  clearPolicyType: Boolean
  """
  details of the policy
  """
  details: String
  clearDetails: Boolean
  """
  whether approval is required for edits to the policy
  """
  approvalRequired: Boolean
  clearApprovalRequired: Boolean
  """
  the date the policy should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  clearReviewDue: Boolean
  """
  the frequency at which the policy should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: InternalPolicyFrequency
  clearReviewFrequency: Boolean
  """
  auto-generated tag suggestions for the policy
  """
  tagSuggestions: [String!]
  appendTagSuggestions: [String!]
  clearTagSuggestions: Boolean
  """
  tag suggestions dismissed by the user for the policy
  """
  dismissedTagSuggestions: [String!]
  appendDismissedTagSuggestions: [String!]
  clearDismissedTagSuggestions: Boolean
  """
  proposed controls referenced in the policy
  """
  controlSuggestions: [String!]
  appendControlSuggestions: [String!]
  clearControlSuggestions: Boolean
  """
  control suggestions dismissed by the user for the policy
  """
  dismissedControlSuggestions: [String!]
  appendDismissedControlSuggestions: [String!]
  clearDismissedControlSuggestions: Boolean
  """
  suggested improvements for the policy
  """
  improvementSuggestions: [String!]
  appendImprovementSuggestions: [String!]
  clearImprovementSuggestions: Boolean
  """
  improvement suggestions dismissed by the user for the policy
  """
  dismissedImprovementSuggestions: [String!]
  appendDismissedImprovementSuggestions: [String!]
  clearDismissedImprovementSuggestions: Boolean
  """
  This will contain the url used to create/update the policy
  """
  url: String
  clearURL: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  approverID: ID
  clearApprover: Boolean
  delegateID: ID
  clearDelegate: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addControlImplementationIDs: [ID!]
  removeControlImplementationIDs: [ID!]
  clearControlImplementations: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  fileID: ID
  clearFile: Boolean
}
"""
UpdateInviteInput is used for update Invite object.
Input was generated by ent.
"""
input UpdateInviteInput {
  """
  the expiration date of the invitation token which defaults to 14 days in the future from creation
  """
  expires: Time
  clearExpires: Boolean
  """
  the status of the invitation
  """
  status: InviteInviteStatus
  role: InviteRole
  """
  the number of attempts made to perform email send of the invitation, maximum of 5
  """
  sendAttempts: Int
  ownerID: ID
  clearOwner: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
}
"""
UpdateJobResultInput is used for update JobResult object.
Input was generated by ent.
"""
input UpdateJobResultInput {
  """
  the status of this job. did it fail? did it succeed?
  """
  status: JobResultJobExecutionStatus
  """
  the log output from the job
  """
  log: String
  clearLog: Boolean
  ownerID: ID
  clearOwner: Boolean
  scheduledJobID: ID
  fileID: ID
}
"""
UpdateJobRunnerInput is used for update JobRunner object.
Input was generated by ent.
"""
input UpdateJobRunnerInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the runner
  """
  name: String
  """
  the IP address of this runner
  """
  ipAddress: String
  clearIPAddress: Boolean
  """
  the last time this runner was seen
  """
  lastSeen: Time
  clearLastSeen: Boolean
  """
  the version of the runner
  """
  version: String
  clearVersion: Boolean
  """
  the operating system of the runner
  """
  os: String
  clearOs: Boolean
  ownerID: ID
  clearOwner: Boolean
  addJobRunnerTokenIDs: [ID!]
  removeJobRunnerTokenIDs: [ID!]
  clearJobRunnerTokens: Boolean
}
"""
UpdateJobRunnerRegistrationTokenInput is used for update JobRunnerRegistrationToken object.
Input was generated by ent.
"""
input UpdateJobRunnerRegistrationTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  ownerID: ID
  clearOwner: Boolean
  jobRunnerID: ID
  clearJobRunner: Boolean
}
"""
UpdateJobRunnerTokenInput is used for update JobRunnerToken object.
Input was generated by ent.
"""
input UpdateJobRunnerTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  """
  whether the token is active
  """
  isActive: Boolean
  clearIsActive: Boolean
  """
  the reason the token was revoked
  """
  revokedReason: String
  clearRevokedReason: Boolean
  """
  the user who revoked the token
  """
  revokedBy: String
  clearRevokedBy: Boolean
  """
  when the token was revoked
  """
  revokedAt: Time
  clearRevokedAt: Boolean
  ownerID: ID
  clearOwner: Boolean
  addJobRunnerIDs: [ID!]
  removeJobRunnerIDs: [ID!]
  clearJobRunners: Boolean
}
"""
UpdateJobTemplateInput is used for update JobTemplate object.
Input was generated by ent.
"""
input UpdateJobTemplateInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the title of the job
  """
  title: String
  """
  the short description of the job and what it does
  """
  description: String
  clearDescription: Boolean
  """
  the url from where to download the script from
  """
  downloadURL: String
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  appendConfiguration: JobConfiguration
  clearConfiguration: Boolean
  """
  cron schedule to run the job in cron 6-field syntax, e.g. 0 0 0 * * *
  """
  cron: String
  clearCron: Boolean
  ownerID: ID
  clearOwner: Boolean
  addScheduledJobIDs: [ID!]
  removeScheduledJobIDs: [ID!]
  clearScheduledJobs: Boolean
}
"""
UpdateMappableDomainInput is used for update MappableDomain object.
Input was generated by ent.
"""
input UpdateMappableDomainInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  addCustomDomainIDs: [ID!]
  removeCustomDomainIDs: [ID!]
  clearCustomDomains: Boolean
}
"""
UpdateMappedControlInput is used for update MappedControl object.
Input was generated by ent.
"""
input UpdateMappedControlInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the type of mapping between the two controls, e.g. subset, intersect, equal, superset
  """
  mappingType: MappedControlMappingType
  """
  description of how the two controls are related
  """
  relation: String
  clearRelation: Boolean
  """
  percentage (0-100) of confidence in the mapping
  """
  confidence: Int
  clearConfidence: Boolean
  """
  source of the mapping, e.g. manual, suggested, etc.
  """
  source: MappedControlMappingSource
  clearSource: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addFromControlIDs: [ID!]
  removeFromControlIDs: [ID!]
  clearFromControls: Boolean
  addToControlIDs: [ID!]
  removeToControlIDs: [ID!]
  clearToControls: Boolean
  addFromSubcontrolIDs: [ID!]
  removeFromSubcontrolIDs: [ID!]
  clearFromSubcontrols: Boolean
  addToSubcontrolIDs: [ID!]
  removeToSubcontrolIDs: [ID!]
  clearToSubcontrols: Boolean
}
"""
UpdateNarrativeInput is used for update Narrative object.
Input was generated by ent.
"""
input UpdateNarrativeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the narrative
  """
  name: String
  """
  the description of the narrative
  """
  description: String
  clearDescription: Boolean
  """
  text data for the narrative document
  """
  details: String
  clearDetails: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addSatisfyIDs: [ID!]
  removeSatisfyIDs: [ID!]
  clearSatisfies: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
}
"""
UpdateNoteInput is used for update Note object.
Input was generated by ent.
"""
input UpdateNoteInput {
  """
  the text of the note
  """
  text: String
  taskID: ID
  clearTask: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateOrgMembershipInput is used for update OrgMembership object.
Input was generated by ent.
"""
input UpdateOrgMembershipInput {
  role: OrgMembershipRole
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the organization
  """
  name: String
  """
  The organization's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the organization
  """
  description: String
  clearDescription: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  clearAvatarRemoteURL: Boolean
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  clearAvatarUpdatedAt: Boolean
  addControlCreatorIDs: [ID!]
  removeControlCreatorIDs: [ID!]
  clearControlCreators: Boolean
  addControlImplementationCreatorIDs: [ID!]
  removeControlImplementationCreatorIDs: [ID!]
  clearControlImplementationCreators: Boolean
  addControlObjectiveCreatorIDs: [ID!]
  removeControlObjectiveCreatorIDs: [ID!]
  clearControlObjectiveCreators: Boolean
  addEvidenceCreatorIDs: [ID!]
  removeEvidenceCreatorIDs: [ID!]
  clearEvidenceCreators: Boolean
  addGroupCreatorIDs: [ID!]
  removeGroupCreatorIDs: [ID!]
  clearGroupCreators: Boolean
  addInternalPolicyCreatorIDs: [ID!]
  removeInternalPolicyCreatorIDs: [ID!]
  clearInternalPolicyCreators: Boolean
  addMappedControlCreatorIDs: [ID!]
  removeMappedControlCreatorIDs: [ID!]
  clearMappedControlCreators: Boolean
  addNarrativeCreatorIDs: [ID!]
  removeNarrativeCreatorIDs: [ID!]
  clearNarrativeCreators: Boolean
  addProcedureCreatorIDs: [ID!]
  removeProcedureCreatorIDs: [ID!]
  clearProcedureCreators: Boolean
  addProgramCreatorIDs: [ID!]
  removeProgramCreatorIDs: [ID!]
  clearProgramCreators: Boolean
  addRiskCreatorIDs: [ID!]
  removeRiskCreatorIDs: [ID!]
  clearRiskCreators: Boolean
  addScheduledJobCreatorIDs: [ID!]
  removeScheduledJobCreatorIDs: [ID!]
  clearScheduledJobCreators: Boolean
  addStandardCreatorIDs: [ID!]
  removeStandardCreatorIDs: [ID!]
  clearStandardCreators: Boolean
  addTemplateCreatorIDs: [ID!]
  removeTemplateCreatorIDs: [ID!]
  clearTemplateCreators: Boolean
  settingID: ID
  clearSetting: Boolean
  addPersonalAccessTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  clearPersonalAccessTokens: Boolean
  addAPITokenIDs: [ID!]
  removeAPITokenIDs: [ID!]
  clearAPITokens: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addSecretIDs: [ID!]
  removeSecretIDs: [ID!]
  clearSecrets: Boolean
  avatarFileID: ID
  clearAvatarFile: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addTemplateIDs: [ID!]
  removeTemplateIDs: [ID!]
  clearTemplates: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
  addOrgSubscriptionIDs: [ID!]
  removeOrgSubscriptionIDs: [ID!]
  clearOrgSubscriptions: Boolean
  addInviteIDs: [ID!]
  removeInviteIDs: [ID!]
  clearInvites: Boolean
  addSubscriberIDs: [ID!]
  removeSubscriberIDs: [ID!]
  clearSubscribers: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
  addEntityTypeIDs: [ID!]
  removeEntityTypeIDs: [ID!]
  clearEntityTypes: Boolean
  addContactIDs: [ID!]
  removeContactIDs: [ID!]
  clearContacts: Boolean
  addNoteIDs: [ID!]
  removeNoteIDs: [ID!]
  clearNotes: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addControlImplementationIDs: [ID!]
  removeControlImplementationIDs: [ID!]
  clearControlImplementations: Boolean
  addMappedControlIDs: [ID!]
  removeMappedControlIDs: [ID!]
  clearMappedControls: Boolean
  addEvidenceIDs: [ID!]
  removeEvidenceIDs: [ID!]
  clearEvidence: Boolean
  addStandardIDs: [ID!]
  removeStandardIDs: [ID!]
  clearStandards: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addCustomDomainIDs: [ID!]
  removeCustomDomainIDs: [ID!]
  clearCustomDomains: Boolean
  addJobRunnerIDs: [ID!]
  removeJobRunnerIDs: [ID!]
  clearJobRunners: Boolean
  addJobRunnerTokenIDs: [ID!]
  removeJobRunnerTokenIDs: [ID!]
  clearJobRunnerTokens: Boolean
  addJobRunnerRegistrationTokenIDs: [ID!]
  removeJobRunnerRegistrationTokenIDs: [ID!]
  clearJobRunnerRegistrationTokens: Boolean
  addDNSVerificationIDs: [ID!]
  removeDNSVerificationIDs: [ID!]
  clearDNSVerifications: Boolean
  addJobTemplateIDs: [ID!]
  removeJobTemplateIDs: [ID!]
  clearJobTemplates: Boolean
  addScheduledJobIDs: [ID!]
  removeScheduledJobIDs: [ID!]
  clearScheduledJobs: Boolean
  addJobResultIDs: [ID!]
  removeJobResultIDs: [ID!]
  clearJobResults: Boolean
  addScheduledJobRunIDs: [ID!]
  removeScheduledJobRunIDs: [ID!]
  clearScheduledJobRuns: Boolean
  addTrustCenterIDs: [ID!]
  removeTrustCenterIDs: [ID!]
  clearTrustCenters: Boolean
  addAssetIDs: [ID!]
  removeAssetIDs: [ID!]
  clearAssets: Boolean
  addScanIDs: [ID!]
  removeScanIDs: [ID!]
  clearScans: Boolean
  addSubprocessorIDs: [ID!]
  removeSubprocessorIDs: [ID!]
  clearSubprocessors: Boolean
  addExportIDs: [ID!]
  removeExportIDs: [ID!]
  clearExports: Boolean
}
"""
UpdateOrganizationSettingInput is used for update OrganizationSetting object.
Input was generated by ent.
"""
input UpdateOrganizationSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  domains associated with the organization
  """
  domains: [String!]
  appendDomains: [String!]
  clearDomains: Boolean
  """
  Name of the person to contact for billing
  """
  billingContact: String
  clearBillingContact: Boolean
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  clearBillingEmail: Boolean
  """
  Phone number to contact for billing
  """
  billingPhone: String
  clearBillingPhone: Boolean
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  clearBillingAddress: Boolean
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  clearTaxIdentifier: Boolean
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingRegion
  clearGeoLocation: Boolean
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean
  """
  domains allowed to access the organization, if empty all domains are allowed
  """
  allowedEmailDomains: [String!]
  appendAllowedEmailDomains: [String!]
  clearAllowedEmailDomains: Boolean
  """
  SSO provider type for the organization
  """
  identityProvider: OrganizationSettingSSOProvider
  clearIdentityProvider: Boolean
  """
  client ID for SSO integration
  """
  identityProviderClientID: String
  clearIdentityProviderClientID: Boolean
  """
  client secret for SSO integration
  """
  identityProviderClientSecret: String
  clearIdentityProviderClientSecret: Boolean
  """
  metadata URL for the SSO provider
  """
  identityProviderMetadataEndpoint: String
  clearIdentityProviderMetadataEndpoint: Boolean
  """
  SAML entity ID for the SSO provider
  """
  identityProviderEntityID: String
  clearIdentityProviderEntityID: Boolean
  """
  OIDC discovery URL for the SSO provider
  """
  oidcDiscoveryEndpoint: String
  clearOidcDiscoveryEndpoint: Boolean
  """
  enforce SSO authentication for organization members
  """
  identityProviderLoginEnforced: Boolean
  """
  unique token used to receive compliance webhook events
  """
  complianceWebhookToken: String
  clearComplianceWebhookToken: Boolean
  organizationID: ID
  clearOrganization: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdatePersonalAccessTokenInput is used for update PersonalAccessToken object.
Input was generated by ent.
"""
input UpdatePersonalAccessTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name associated with the token
  """
  name: String
  """
  a description of the token's purpose
  """
  description: String
  clearDescription: Boolean
  scopes: [String!]
  appendScopes: [String!]
  clearScopes: Boolean
  """
  SSO authorization timestamps by organization id
  """
  ssoAuthorizations: SSOAuthorizationMap
  clearSSOAuthorizations: Boolean
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  """
  whether the token is active
  """
  isActive: Boolean
  clearIsActive: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganizations: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateProcedureInput is used for update Procedure object.
Input was generated by ent.
"""
input UpdateProcedureInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  clearRevision: Boolean
  """
  the name of the procedure
  """
  name: String
  """
  status of the procedure, e.g. draft, published, archived, etc.
  """
  status: ProcedureDocumentStatus
  clearStatus: Boolean
  """
  type of the procedure, e.g. compliance, operational, health and safety, etc.
  """
  procedureType: String
  clearProcedureType: Boolean
  """
  details of the procedure
  """
  details: String
  clearDetails: Boolean
  """
  whether approval is required for edits to the procedure
  """
  approvalRequired: Boolean
  clearApprovalRequired: Boolean
  """
  the date the procedure should be reviewed, calculated based on the review_frequency if not directly set
  """
  reviewDue: Time
  clearReviewDue: Boolean
  """
  the frequency at which the procedure should be reviewed, used to calculate the review_due date
  """
  reviewFrequency: ProcedureFrequency
  clearReviewFrequency: Boolean
  """
  auto-generated tag suggestions for the procedure
  """
  tagSuggestions: [String!]
  appendTagSuggestions: [String!]
  clearTagSuggestions: Boolean
  """
  tag suggestions dismissed by the user for the procedure
  """
  dismissedTagSuggestions: [String!]
  appendDismissedTagSuggestions: [String!]
  clearDismissedTagSuggestions: Boolean
  """
  proposed controls referenced in the procedure
  """
  controlSuggestions: [String!]
  appendControlSuggestions: [String!]
  clearControlSuggestions: Boolean
  """
  control suggestions dismissed by the user for the procedure
  """
  dismissedControlSuggestions: [String!]
  appendDismissedControlSuggestions: [String!]
  clearDismissedControlSuggestions: Boolean
  """
  suggested improvements for the procedure
  """
  improvementSuggestions: [String!]
  appendImprovementSuggestions: [String!]
  clearImprovementSuggestions: Boolean
  """
  improvement suggestions dismissed by the user for the procedure
  """
  dismissedImprovementSuggestions: [String!]
  appendDismissedImprovementSuggestions: [String!]
  clearDismissedImprovementSuggestions: Boolean
  """
  This will contain the url used to create/update the procedure
  """
  url: String
  clearURL: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  approverID: ID
  clearApprover: Boolean
  delegateID: ID
  clearDelegate: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  fileID: ID
  clearFile: Boolean
}
"""
UpdateProgramInput is used for update Program object.
Input was generated by ent.
"""
input UpdateProgramInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the program
  """
  name: String
  """
  the description of the program
  """
  description: String
  clearDescription: Boolean
  """
  the status of the program
  """
  status: ProgramProgramStatus
  """
  the type of the program
  """
  programType: ProgramProgramType
  """
  the short name of the compliance standard the program is based on, only used for framework type programs
  """
  frameworkName: String
  clearFrameworkName: Boolean
  """
  the start date of the period
  """
  startDate: Time
  clearStartDate: Boolean
  """
  the end date of the period
  """
  endDate: Time
  clearEndDate: Boolean
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean
  """
  the name of the audit firm conducting the audit
  """
  auditFirm: String
  clearAuditFirm: Boolean
  """
  the full name of the auditor conducting the audit
  """
  auditor: String
  clearAuditor: Boolean
  """
  the email of the auditor conducting the audit
  """
  auditorEmail: String
  clearAuditorEmail: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addNoteIDs: [ID!]
  removeNoteIDs: [ID!]
  clearNotes: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addEvidenceIDs: [ID!]
  removeEvidenceIDs: [ID!]
  clearEvidence: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
}
"""
UpdateProgramMembershipInput is used for update ProgramMembership object.
Input was generated by ent.
"""
input UpdateProgramMembershipInput {
  role: ProgramMembershipRole
}
"""
UpdateRiskInput is used for update Risk object.
Input was generated by ent.
"""
input UpdateRiskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the risk
  """
  name: String
  """
  status of the risk - open, mitigated, ongoing, in-progress, and archived.
  """
  status: RiskRiskStatus
  clearStatus: Boolean
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  clearRiskType: Boolean
  """
  category of the risk, e.g. human resources, operations, IT, etc.
  """
  category: String
  clearCategory: Boolean
  """
  impact of the risk -critical, high, medium, low
  """
  impact: RiskRiskImpact
  clearImpact: Boolean
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskRiskLikelihood
  clearLikelihood: Boolean
  """
  score of the risk based on impact and likelihood (1-4 unlikely, 5-9 likely, 10-16 highly likely, 17-20 critical)
  """
  score: Int
  clearScore: Boolean
  """
  mitigation for the risk
  """
  mitigation: String
  clearMitigation: Boolean
  """
  details of the risk
  """
  details: String
  clearDetails: Boolean
  """
  business costs associated with the risk
  """
  businessCosts: String
  clearBusinessCosts: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addAssetIDs: [ID!]
  removeAssetIDs: [ID!]
  clearAssets: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
  addScanIDs: [ID!]
  removeScanIDs: [ID!]
  clearScans: Boolean
  stakeholderID: ID
  clearStakeholder: Boolean
  delegateID: ID
  clearDelegate: Boolean
}
"""
UpdateScanInput is used for update Scan object.
Input was generated by ent.
"""
input UpdateScanInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the target of the scan, e.g., a domain name or IP address, codebase
  """
  target: String
  """
  the type of scan, e.g., domain scan, vulnerability scan, provider scan
  """
  scanType: ScanScanType
  """
  additional metadata for the scan, e.g., scan configuration, options, etc
  """
  metadata: Map
  clearMetadata: Boolean
  """
  the status of the scan, e.g., processing, completed, failed
  """
  status: ScanScanStatus
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addAssetIDs: [ID!]
  removeAssetIDs: [ID!]
  clearAssets: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
}
"""
UpdateScheduledJobInput is used for update ScheduledJob object.
Input was generated by ent.
"""
input UpdateScheduledJobInput {
  """
  whether the scheduled job is active
  """
  active: Boolean
  """
  the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
  """
  configuration: JobConfiguration
  appendConfiguration: JobConfiguration
  clearConfiguration: Boolean
  """
  cron 6-field syntax, defaults to the job template's cron if not provided
  """
  cron: String
  clearCron: Boolean
  jobTemplateID: ID
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  jobRunnerID: ID
  clearJobRunner: Boolean
}
"""
UpdateScheduledJobRunInput is used for update ScheduledJobRun object.
Input was generated by ent.
"""
input UpdateScheduledJobRunInput {
  """
  The status of the job to be executed. By default will be pending but when
  			scheduled on a runner, this will change to acquired.
  """
  status: ScheduledJobRunScheduledJobRunStatus
  ownerID: ID
  clearOwner: Boolean
  scheduledJobID: ID
  jobRunnerID: ID
}
"""
UpdateStandardInput is used for update Standard object.
Input was generated by ent.
"""
input UpdateStandardInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
  """
  revision: String
  clearRevision: Boolean
  """
  the long name of the standard body
  """
  name: String
  """
  short name of the standard, e.g. SOC 2, ISO 27001, etc.
  """
  shortName: String
  clearShortName: Boolean
  """
  unique identifier of the standard with version
  """
  framework: String
  clearFramework: Boolean
  """
  long description of the standard with details of what is covered
  """
  description: String
  clearDescription: Boolean
  """
  URL to the logo of the governing body
  """
  governingBodyLogoURL: String
  clearGoverningBodyLogoURL: Boolean
  """
  governing body of the standard, e.g. AICPA, etc.
  """
  governingBody: String
  clearGoverningBody: Boolean
  """
  domains the standard covers, e.g. availability, confidentiality, etc.
  """
  domains: [String!]
  appendDomains: [String!]
  clearDomains: Boolean
  """
  link to the official standard documentation
  """
  link: String
  clearLink: Boolean
  """
  status of the standard - active, draft, and archived
  """
  status: StandardStandardStatus
  clearStatus: Boolean
  """
  indicates if the standard should be made available to all users, only for system owned standards
  """
  isPublic: Boolean
  clearIsPublic: Boolean
  """
  indicates if the standard is freely distributable under a trial license, only for system owned standards
  """
  freeToUse: Boolean
  clearFreeToUse: Boolean
  """
  type of the standard - cybersecurity, healthcare , financial, etc.
  """
  standardType: String
  clearStandardType: Boolean
  """
  version of the standard
  """
  version: String
  clearVersion: Boolean
  ownerID: ID
  clearOwner: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addTrustCenterComplianceIDs: [ID!]
  removeTrustCenterComplianceIDs: [ID!]
  clearTrustCenterCompliances: Boolean
}
"""
UpdateSubcontrolInput is used for update Subcontrol object.
Input was generated by ent.
"""
input UpdateSubcontrolInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  description of what the control is supposed to accomplish
  """
  description: String
  clearDescription: Boolean
  """
  internal reference id of the control, can be used for internal tracking
  """
  referenceID: String
  clearReferenceID: Boolean
  """
  external auditor id of the control, can be used to map to external audit partner mappings
  """
  auditorReferenceID: String
  clearAuditorReferenceID: Boolean
  """
  status of the control
  """
  status: SubcontrolControlStatus
  clearStatus: Boolean
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: SubcontrolControlSource
  clearSource: Boolean
  """
  type of the control e.g. preventive, detective, corrective, or deterrent.
  """
  controlType: SubcontrolControlType
  clearControlType: Boolean
  """
  category of the control
  """
  category: String
  clearCategory: Boolean
  """
  category id of the control
  """
  categoryID: String
  clearCategoryID: Boolean
  """
  subcategory of the control
  """
  subcategory: String
  clearSubcategory: Boolean
  """
  mapped categories of the control to other standards
  """
  mappedCategories: [String!]
  appendMappedCategories: [String!]
  clearMappedCategories: Boolean
  """
  objectives of the audit assessment for the control
  """
  assessmentObjectives: [AssessmentObjective!]
  appendAssessmentObjectives: [AssessmentObjective!]
  clearAssessmentObjectives: Boolean
  """
  methods used to verify the control implementation during an audit
  """
  assessmentMethods: [AssessmentMethod!]
  appendAssessmentMethods: [AssessmentMethod!]
  clearAssessmentMethods: Boolean
  """
  questions to ask to verify the control
  """
  controlQuestions: [String!]
  appendControlQuestions: [String!]
  clearControlQuestions: Boolean
  """
  implementation guidance for the control
  """
  implementationGuidance: [ImplementationGuidance!]
  appendImplementationGuidance: [ImplementationGuidance!]
  clearImplementationGuidance: Boolean
  """
  examples of evidence for the control
  """
  exampleEvidence: [ExampleEvidence!]
  appendExampleEvidence: [ExampleEvidence!]
  clearExampleEvidence: Boolean
  """
  references for the control
  """
  references: [Reference!]
  appendReferences: [Reference!]
  clearReferences: Boolean
  """
  the unique reference code for the control
  """
  refCode: String
  addEvidenceIDs: [ID!]
  removeEvidenceIDs: [ID!]
  clearEvidence: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  controlOwnerID: ID
  clearControlOwner: Boolean
  delegateID: ID
  clearDelegate: Boolean
  controlID: ID
  addControlImplementationIDs: [ID!]
  removeControlImplementationIDs: [ID!]
  clearControlImplementations: Boolean
  addScheduledJobIDs: [ID!]
  removeScheduledJobIDs: [ID!]
  clearScheduledJobs: Boolean
}
"""
UpdateSubprocessorInput is used for update Subprocessor object.
Input was generated by ent.
"""
input UpdateSubprocessorInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  name of the standard body
  """
  name: String
  """
  description of the subprocessor
  """
  description: String
  clearDescription: Boolean
  """
  URL of the logo
  """
  logoRemoteURL: String
  clearLogoRemoteURL: Boolean
  ownerID: ID
  clearOwner: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  logoFileID: ID
  clearLogoFile: Boolean
  addTrustCenterSubprocessorIDs: [ID!]
  removeTrustCenterSubprocessorIDs: [ID!]
  clearTrustCenterSubprocessors: Boolean
}
"""
UpdateSubscriberInput is used for update Subscriber object.
Input was generated by ent.
"""
input UpdateSubscriberInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  email address of the subscriber
  """
  email: String
  """
  phone number of the subscriber
  """
  phoneNumber: String
  clearPhoneNumber: Boolean
  """
  indicates if the subscriber has unsubscribed from communications
  """
  unsubscribed: Boolean
  ownerID: ID
  clearOwner: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateTFASettingInput is used for update TFASetting object.
Input was generated by ent.
"""
input UpdateTFASettingInput {
  """
  specifies if the TFA device has been verified
  """
  verified: Boolean
  """
  specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
  """
  totpAllowed: Boolean
  clearTotpAllowed: Boolean
}
"""
UpdateTaskInput is used for update Task object.
Input was generated by ent.
"""
input UpdateTaskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the title of the task
  """
  title: String
  """
  the details of the task
  """
  details: String
  clearDetails: Boolean
  """
  the status of the task
  """
  status: TaskTaskStatus
  """
  the category of the task, e.g. evidence upload, risk review, policy review, etc.
  """
  category: String
  clearCategory: Boolean
  """
  the due date of the task
  """
  due: DateTime
  clearDue: Boolean
  """
  the completion date of the task
  """
  completed: DateTime
  clearCompleted: Boolean
  assignerID: ID
  clearAssigner: Boolean
  assigneeID: ID
  clearAssignee: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addControlImplementationIDs: [ID!]
  removeControlImplementationIDs: [ID!]
  clearControlImplementations: Boolean
  addEvidenceIDs: [ID!]
  removeEvidenceIDs: [ID!]
  clearEvidence: Boolean
}
"""
UpdateTemplateInput is used for update Template object.
Input was generated by ent.
"""
input UpdateTemplateInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the template
  """
  name: String
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateDocumentType
  """
  the description of the template
  """
  description: String
  clearDescription: Boolean
  """
  the kind of template, e.g. questionnaire
  """
  kind: TemplateTemplateKind
  clearKind: Boolean
  """
  the jsonschema object of the template
  """
  jsonconfig: Map
  """
  the uischema for the template to render in the UI
  """
  uischema: Map
  clearUischema: Boolean
  ownerID: ID
  clearOwner: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateTrustCenterComplianceInput is used for update TrustCenterCompliance object.
Input was generated by ent.
"""
input UpdateTrustCenterComplianceInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  trustCenterID: ID
  clearTrustCenter: Boolean
  standardID: ID
}
"""
UpdateTrustCenterDocInput is used for update TrustCenterDoc object.
Input was generated by ent.
"""
input UpdateTrustCenterDocInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
}
"""
UpdateTrustCenterInput is used for update TrustCenter object.
Input was generated by ent.
"""
input UpdateTrustCenterInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  ownerID: ID
  clearOwner: Boolean
  customDomainID: ID
  clearCustomDomain: Boolean
  settingID: ID
  clearSetting: Boolean
  addTrustCenterSubprocessorIDs: [ID!]
  removeTrustCenterSubprocessorIDs: [ID!]
  clearTrustCenterSubprocessors: Boolean
  addTrustCenterComplianceIDs: [ID!]
  removeTrustCenterComplianceIDs: [ID!]
  clearTrustCenterCompliances: Boolean
}
"""
UpdateTrustCenterSettingInput is used for update TrustCenterSetting object.
Input was generated by ent.
"""
input UpdateTrustCenterSettingInput {
  """
  title of the trust center
  """
  title: String
  clearTitle: Boolean
  """
  overview of the trust center
  """
  overview: String
  clearOverview: Boolean
  """
  URL of the logo
  """
  logoRemoteURL: String
  clearLogoRemoteURL: Boolean
  """
  URL of the favicon
  """
  faviconRemoteURL: String
  clearFaviconRemoteURL: Boolean
  """
  Theme mode for the trust center
  """
  themeMode: TrustCenterSettingTrustCenterThemeMode
  clearThemeMode: Boolean
  """
  primary color for the trust center
  """
  primaryColor: String
  clearPrimaryColor: Boolean
  """
  font for the trust center
  """
  font: String
  clearFont: Boolean
  """
  foreground color for the trust center
  """
  foregroundColor: String
  clearForegroundColor: Boolean
  """
  background color for the trust center
  """
  backgroundColor: String
  clearBackgroundColor: Boolean
  """
  accent/brand color for the trust center
  """
  accentColor: String
  clearAccentColor: Boolean
  trustCenterID: ID
  clearTrustCenter: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  logoFileID: ID
  clearLogoFile: Boolean
  faviconFileID: ID
  clearFaviconFile: Boolean
}
"""
UpdateTrustCenterSubprocessorInput is used for update TrustCenterSubprocessor object.
Input was generated by ent.
"""
input UpdateTrustCenterSubprocessorInput {
  """
  country codes or country where the subprocessor is located
  """
  countries: [String!]
  appendCountries: [String!]
  clearCountries: Boolean
  """
  Category of the subprocessor, e.g. 'Data Warehouse' or 'Infrastructure Hosting'
  """
  category: String
  trustCenterID: ID
  clearTrustCenter: Boolean
  subprocessorID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  email: String
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  """
  The user's displayed 'friendly' name
  """
  displayName: String
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  clearAvatarRemoteURL: Boolean
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  clearAvatarUpdatedAt: Boolean
  """
  the time the user was last seen
  """
  lastSeen: Time
  clearLastSeen: Boolean
  """
  the last auth provider used to login
  """
  lastLoginProvider: UserAuthProvider
  clearLastLoginProvider: Boolean
  """
  user password hash
  """
  password: String
  clearPassword: Boolean
  """
  the Subject of the user JWT
  """
  sub: String
  clearSub: Boolean
  """
  auth provider used to register the account
  """
  authProvider: UserAuthProvider
  """
  the user's role
  """
  role: UserRole
  clearRole: Boolean
  addPersonalAccessTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  clearPersonalAccessTokens: Boolean
  addTfaSettingIDs: [ID!]
  removeTfaSettingIDs: [ID!]
  clearTfaSettings: Boolean
  settingID: ID
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganizations: Boolean
  addWebauthnIDs: [ID!]
  removeWebauthnIDs: [ID!]
  clearWebauthns: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  avatarFileID: ID
  clearAvatarFile: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addAssignerTaskIDs: [ID!]
  removeAssignerTaskIDs: [ID!]
  clearAssignerTasks: Boolean
  addAssigneeTaskIDs: [ID!]
  removeAssigneeTaskIDs: [ID!]
  clearAssigneeTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateUserSettingInput is used for update UserSetting object.
Input was generated by ent.
"""
input UpdateUserSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  clearSilencedAt: Boolean
  """
  The time the user was suspended
  """
  suspendedAt: Time
  clearSuspendedAt: Boolean
  """
  status of the user account
  """
  status: UserSettingUserStatus
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
  clearIsTfaEnabled: Boolean
  userID: ID
  clearUser: Boolean
  defaultOrgID: ID
  clearDefaultOrg: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  email: String!
  firstName: String
  lastName: String
  """
  The user's displayed 'friendly' name
  """
  displayName: String!
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The user's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: ID
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  the time the user was last seen
  """
  lastSeen: Time
  """
  the last auth provider used to login
  """
  lastLoginProvider: UserAuthProvider
  """
  the Subject of the user JWT
  """
  sub: String
  """
  auth provider used to register the account
  """
  authProvider: UserAuthProvider!
  """
  the user's role
  """
  role: UserRole
  personalAccessTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PersonalAccessTokens returned from the connection.
    """
    orderBy: [PersonalAccessTokenOrder!]

    """
    Filtering options for PersonalAccessTokens returned from the connection.
    """
    where: PersonalAccessTokenWhereInput
  ): PersonalAccessTokenConnection!
  tfaSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TFASettings returned from the connection.
    """
    orderBy: [TFASettingOrder!]

    """
    Filtering options for TFASettings returned from the connection.
    """
    where: TFASettingWhereInput
  ): TFASettingConnection!
  setting: UserSetting!
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: [GroupOrder!]

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Organizations returned from the connection.
    """
    orderBy: [OrganizationOrder!]

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  webauthns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Webauthns returned from the connection.
    """
    orderBy: WebauthnOrder

    """
    Filtering options for Webauthns returned from the connection.
    """
    where: WebauthnWhereInput
  ): WebauthnConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  avatarFile: File
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ActionPlans returned from the connection.
    """
    orderBy: [ActionPlanOrder!]

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Subcontrols returned from the connection.
    """
    orderBy: [SubcontrolOrder!]

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  assignerTasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  assigneeTasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Programs returned from the connection.
    """
    orderBy: [ProgramOrder!]

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupMemberships returned from the connection.
    """
    orderBy: [GroupMembershipOrder!]

    """
    Filtering options for GroupMemberships returned from the connection.
    """
    where: GroupMembershipWhereInput
  ): GroupMembershipConnection!
  orgMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgMemberships returned from the connection.
    """
    orderBy: [OrgMembershipOrder!]

    """
    Filtering options for OrgMemberships returned from the connection.
    """
    where: OrgMembershipWhereInput
  ): OrgMembershipConnection!
  programMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProgramMemberships returned from the connection.
    """
    orderBy: [ProgramMembershipOrder!]

    """
    Filtering options for ProgramMemberships returned from the connection.
    """
    where: ProgramMembershipWhereInput
  ): ProgramMembershipConnection!
}
"""
UserAuthProvider is enum for the field last_login_provider
"""
enum UserAuthProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.AuthProvider") {
  CREDENTIALS
  GOOGLE
  GITHUB
  WEBAUTHN
  OIDC
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type UserHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: UserHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  a shortened prefixed id field to use as a human readable identifier
  """
  displayID: String!
  """
  tags associated with the object
  """
  tags: [String!]
  email: String!
  firstName: String
  lastName: String
  """
  The user's displayed 'friendly' name
  """
  displayName: String!
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The user's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  the time the user was last seen
  """
  lastSeen: Time
  """
  the last auth provider used to login
  """
  lastLoginProvider: UserHistoryAuthProvider
  """
  the Subject of the user JWT
  """
  sub: String
  """
  auth provider used to register the account
  """
  authProvider: UserHistoryAuthProvider!
  """
  the user's role
  """
  role: UserHistoryRole
}
"""
UserHistoryAuthProvider is enum for the field last_login_provider
"""
enum UserHistoryAuthProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.AuthProvider") {
  CREDENTIALS
  GOOGLE
  GITHUB
  WEBAUTHN
  OIDC
}
"""
A connection to a list of items.
"""
type UserHistoryConnection {
  """
  A list of edges.
  """
  edges: [UserHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: UserHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserHistoryOpType is enum for the field operation
"""
enum UserHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for UserHistory connections
"""
input UserHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserHistories.
  """
  field: UserHistoryOrderField!
}
"""
Properties by which UserHistory connections can be ordered.
"""
enum UserHistoryOrderField {
  history_time
  created_at
  updated_at
  first_name
  last_name
  display_name
}
"""
UserHistoryRole is enum for the field role
"""
enum UserHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  USER
}
"""
UserHistoryWhereInput is used for filtering UserHistory objects.
Input was generated by ent.
"""
input UserHistoryWhereInput {
  not: UserHistoryWhereInput
  and: [UserHistoryWhereInput!]
  or: [UserHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: UserHistoryOpType
  operationNEQ: UserHistoryOpType
  operationIn: [UserHistoryOpType!]
  operationNotIn: [UserHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: String
  avatarLocalFileIDNEQ: String
  avatarLocalFileIDIn: [String!]
  avatarLocalFileIDNotIn: [String!]
  avatarLocalFileIDGT: String
  avatarLocalFileIDGTE: String
  avatarLocalFileIDLT: String
  avatarLocalFileIDLTE: String
  avatarLocalFileIDContains: String
  avatarLocalFileIDHasPrefix: String
  avatarLocalFileIDHasSuffix: String
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: String
  avatarLocalFileIDContainsFold: String
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
  """
  last_seen field predicates
  """
  lastSeen: Time
  lastSeenNEQ: Time
  lastSeenIn: [Time!]
  lastSeenNotIn: [Time!]
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenIsNil: Boolean
  lastSeenNotNil: Boolean
  """
  last_login_provider field predicates
  """
  lastLoginProvider: UserHistoryAuthProvider
  lastLoginProviderNEQ: UserHistoryAuthProvider
  lastLoginProviderIn: [UserHistoryAuthProvider!]
  lastLoginProviderNotIn: [UserHistoryAuthProvider!]
  lastLoginProviderIsNil: Boolean
  lastLoginProviderNotNil: Boolean
  """
  sub field predicates
  """
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subIsNil: Boolean
  subNotNil: Boolean
  subEqualFold: String
  subContainsFold: String
  """
  auth_provider field predicates
  """
  authProvider: UserHistoryAuthProvider
  authProviderNEQ: UserHistoryAuthProvider
  authProviderIn: [UserHistoryAuthProvider!]
  authProviderNotIn: [UserHistoryAuthProvider!]
  """
  role field predicates
  """
  role: UserHistoryRole
  roleNEQ: UserHistoryRole
  roleIn: [UserHistoryRole!]
  roleNotIn: [UserHistoryRole!]
  roleIsNil: Boolean
  roleNotNil: Boolean
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  created_at
  updated_at
  first_name
  last_name
  display_name
}
"""
UserRole is enum for the field role
"""
enum UserRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  USER
}
type UserSetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  userID: ID
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean!
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  """
  The time the user was suspended
  """
  suspendedAt: Time
  """
  status of the user account
  """
  status: UserSettingUserStatus!
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean!
  """
  specifies a user may complete authentication by verifying a WebAuthn capable device
  """
  isWebauthnAllowed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
  user: User
  """
  organization to load on user login
  """
  defaultOrg: Organization
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
A connection to a list of items.
"""
type UserSettingConnection {
  """
  A list of edges.
  """
  edges: [UserSettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserSettingEdge {
  """
  The item at the end of the edge.
  """
  node: UserSetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type UserSettingHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: UserSettingHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  userID: String
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean!
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  """
  The time the user was suspended
  """
  suspendedAt: Time
  """
  status of the user account
  """
  status: UserSettingHistoryUserStatus!
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean!
  """
  specifies a user may complete authentication by verifying a WebAuthn capable device
  """
  isWebauthnAllowed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
}
"""
A connection to a list of items.
"""
type UserSettingHistoryConnection {
  """
  A list of edges.
  """
  edges: [UserSettingHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserSettingHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: UserSettingHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserSettingHistoryOpType is enum for the field operation
"""
enum UserSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for UserSettingHistory connections
"""
input UserSettingHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserSettingHistories.
  """
  field: UserSettingHistoryOrderField!
}
"""
Properties by which UserSettingHistory connections can be ordered.
"""
enum UserSettingHistoryOrderField {
  history_time
  created_at
  updated_at
}
"""
UserSettingHistoryUserStatus is enum for the field status
"""
enum UserSettingHistoryUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
UserSettingHistoryWhereInput is used for filtering UserSettingHistory objects.
Input was generated by ent.
"""
input UserSettingHistoryWhereInput {
  not: UserSettingHistoryWhereInput
  and: [UserSettingHistoryWhereInput!]
  or: [UserSettingHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: UserSettingHistoryOpType
  operationNEQ: UserSettingHistoryOpType
  operationIn: [UserSettingHistoryOpType!]
  operationNotIn: [UserSettingHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: String
  userIDContainsFold: String
  """
  locked field predicates
  """
  locked: Boolean
  lockedNEQ: Boolean
  """
  silenced_at field predicates
  """
  silencedAt: Time
  silencedAtNEQ: Time
  silencedAtIn: [Time!]
  silencedAtNotIn: [Time!]
  silencedAtGT: Time
  silencedAtGTE: Time
  silencedAtLT: Time
  silencedAtLTE: Time
  silencedAtIsNil: Boolean
  silencedAtNotNil: Boolean
  """
  suspended_at field predicates
  """
  suspendedAt: Time
  suspendedAtNEQ: Time
  suspendedAtIn: [Time!]
  suspendedAtNotIn: [Time!]
  suspendedAtGT: Time
  suspendedAtGTE: Time
  suspendedAtLT: Time
  suspendedAtLTE: Time
  suspendedAtIsNil: Boolean
  suspendedAtNotNil: Boolean
  """
  status field predicates
  """
  status: UserSettingHistoryUserStatus
  statusNEQ: UserSettingHistoryUserStatus
  statusIn: [UserSettingHistoryUserStatus!]
  statusNotIn: [UserSettingHistoryUserStatus!]
  """
  email_confirmed field predicates
  """
  emailConfirmed: Boolean
  emailConfirmedNEQ: Boolean
  """
  is_tfa_enabled field predicates
  """
  isTfaEnabled: Boolean
  isTfaEnabledNEQ: Boolean
  isTfaEnabledIsNil: Boolean
  isTfaEnabledNotNil: Boolean
}
"""
Ordering options for UserSetting connections
"""
input UserSettingOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserSettings.
  """
  field: UserSettingOrderField!
}
"""
Properties by which UserSetting connections can be ordered.
"""
enum UserSettingOrderField {
  created_at
  updated_at
}
"""
UserSettingUserStatus is enum for the field status
"""
enum UserSettingUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
UserSettingWhereInput is used for filtering UserSetting objects.
Input was generated by ent.
"""
input UserSettingWhereInput {
  not: UserSettingWhereInput
  and: [UserSettingWhereInput!]
  or: [UserSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """
  locked field predicates
  """
  locked: Boolean
  lockedNEQ: Boolean
  """
  silenced_at field predicates
  """
  silencedAt: Time
  silencedAtNEQ: Time
  silencedAtIn: [Time!]
  silencedAtNotIn: [Time!]
  silencedAtGT: Time
  silencedAtGTE: Time
  silencedAtLT: Time
  silencedAtLTE: Time
  silencedAtIsNil: Boolean
  silencedAtNotNil: Boolean
  """
  suspended_at field predicates
  """
  suspendedAt: Time
  suspendedAtNEQ: Time
  suspendedAtIn: [Time!]
  suspendedAtNotIn: [Time!]
  suspendedAtGT: Time
  suspendedAtGTE: Time
  suspendedAtLT: Time
  suspendedAtLTE: Time
  suspendedAtIsNil: Boolean
  suspendedAtNotNil: Boolean
  """
  status field predicates
  """
  status: UserSettingUserStatus
  statusNEQ: UserSettingUserStatus
  statusIn: [UserSettingUserStatus!]
  statusNotIn: [UserSettingUserStatus!]
  """
  email_confirmed field predicates
  """
  emailConfirmed: Boolean
  emailConfirmedNEQ: Boolean
  """
  is_tfa_enabled field predicates
  """
  isTfaEnabled: Boolean
  isTfaEnabledNEQ: Boolean
  isTfaEnabledIsNil: Boolean
  isTfaEnabledNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  default_org edge predicates
  """
  hasDefaultOrg: Boolean
  hasDefaultOrgWith: [OrganizationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  display_id field predicates
  """
  displayID: String
  displayIDNEQ: String
  displayIDIn: [String!]
  displayIDNotIn: [String!]
  displayIDGT: String
  displayIDGTE: String
  displayIDLT: String
  displayIDLTE: String
  displayIDContains: String
  displayIDHasPrefix: String
  displayIDHasSuffix: String
  displayIDEqualFold: String
  displayIDContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: ID
  avatarLocalFileIDNEQ: ID
  avatarLocalFileIDIn: [ID!]
  avatarLocalFileIDNotIn: [ID!]
  avatarLocalFileIDGT: ID
  avatarLocalFileIDGTE: ID
  avatarLocalFileIDLT: ID
  avatarLocalFileIDLTE: ID
  avatarLocalFileIDContains: ID
  avatarLocalFileIDHasPrefix: ID
  avatarLocalFileIDHasSuffix: ID
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: ID
  avatarLocalFileIDContainsFold: ID
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
  """
  last_seen field predicates
  """
  lastSeen: Time
  lastSeenNEQ: Time
  lastSeenIn: [Time!]
  lastSeenNotIn: [Time!]
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenIsNil: Boolean
  lastSeenNotNil: Boolean
  """
  last_login_provider field predicates
  """
  lastLoginProvider: UserAuthProvider
  lastLoginProviderNEQ: UserAuthProvider
  lastLoginProviderIn: [UserAuthProvider!]
  lastLoginProviderNotIn: [UserAuthProvider!]
  lastLoginProviderIsNil: Boolean
  lastLoginProviderNotNil: Boolean
  """
  sub field predicates
  """
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subIsNil: Boolean
  subNotNil: Boolean
  subEqualFold: String
  subContainsFold: String
  """
  auth_provider field predicates
  """
  authProvider: UserAuthProvider
  authProviderNEQ: UserAuthProvider
  authProviderIn: [UserAuthProvider!]
  authProviderNotIn: [UserAuthProvider!]
  """
  role field predicates
  """
  role: UserRole
  roleNEQ: UserRole
  roleIn: [UserRole!]
  roleNotIn: [UserRole!]
  roleIsNil: Boolean
  roleNotNil: Boolean
  """
  personal_access_tokens edge predicates
  """
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """
  tfa_settings edge predicates
  """
  hasTfaSettings: Boolean
  hasTfaSettingsWith: [TFASettingWhereInput!]
  """
  setting edge predicates
  """
  hasSetting: Boolean
  hasSettingWith: [UserSettingWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  organizations edge predicates
  """
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """
  webauthns edge predicates
  """
  hasWebauthns: Boolean
  hasWebauthnsWith: [WebauthnWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  avatar_file edge predicates
  """
  hasAvatarFile: Boolean
  hasAvatarFileWith: [FileWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  assigner_tasks edge predicates
  """
  hasAssignerTasks: Boolean
  hasAssignerTasksWith: [TaskWhereInput!]
  """
  assignee_tasks edge predicates
  """
  hasAssigneeTasks: Boolean
  hasAssigneeTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  group_memberships edge predicates
  """
  hasGroupMemberships: Boolean
  hasGroupMembershipsWith: [GroupMembershipWhereInput!]
  """
  org_memberships edge predicates
  """
  hasOrgMemberships: Boolean
  hasOrgMembershipsWith: [OrgMembershipWhereInput!]
  """
  program_memberships edge predicates
  """
  hasProgramMemberships: Boolean
  hasProgramMembershipsWith: [ProgramMembershipWhereInput!]
}
type Webauthn implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  The AAGUID of the authenticator; AAGUID is defined as an array containing the globally unique identifier of the authenticator model being sought
  """
  aaguid: AAGUID!
  """
  Flag backup eligible indicates the credential is able to be backed up and/or sync'd between devices. This should NEVER change
  """
  backupEligible: Boolean!
  """
  Flag backup state indicates the credential has been backed up and/or sync'd
  """
  backupState: Boolean!
  owner: User!
}
"""
A connection to a list of items.
"""
type WebauthnConnection {
  """
  A list of edges.
  """
  edges: [WebauthnEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WebauthnEdge {
  """
  The item at the end of the edge.
  """
  node: Webauthn
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Webauthn connections
"""
input WebauthnOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Webauthns.
  """
  field: WebauthnOrderField!
}
"""
Properties by which Webauthn connections can be ordered.
"""
enum WebauthnOrderField {
  created_at
  updated_at
}
"""
WebauthnWhereInput is used for filtering Webauthn objects.
Input was generated by ent.
"""
input WebauthnWhereInput {
  not: WebauthnWhereInput
  and: [WebauthnWhereInput!]
  or: [WebauthnWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
`, BuiltIn: false},
	{Name: "../schema/entity.graphql", Input: `extend type Query {
    """
    Look up entity by ID
    """
     entity(
        """
        ID of the entity
        """
        id: ID!
    ):  Entity!
}

extend type Mutation{
    """
    Create a new entity
    """
    createEntity(
        """
        values of the entity
        """
        input: CreateEntityInput!
    ): EntityCreatePayload!
    """
    Create multiple new entities
    """
    createBulkEntity(
        """
        values of the entity
        """
        input: [CreateEntityInput!]
    ): EntityBulkCreatePayload!
    """
    Create multiple new entities via file upload
    """
    createBulkCSVEntity(
        """
        csv file containing values of the entity
        """
        input: Upload!
    ): EntityBulkCreatePayload!
    """
    Update an existing entity
    """
    updateEntity(
        """
        ID of the entity
        """
        id: ID!
        """
        New values for the entity
        """
        input: UpdateEntityInput!
    ): EntityUpdatePayload!
    """
    Delete an existing entity
    """
    deleteEntity(
        """
        ID of the entity
        """
        id: ID!
    ): EntityDeletePayload!
}

"""
Return response for createEntity mutation
"""
type EntityCreatePayload {
    """
    Created entity
    """
    entity: Entity!
}

"""
Return response for updateEntity mutation
"""
type EntityUpdatePayload {
    """
    Updated entity
    """
    entity: Entity!
}

"""
Return response for deleteEntity mutation
"""
type EntityDeletePayload {
    """
    Deleted entity ID
    """
    deletedID: ID!
}

"""
Return response for createBulkEntity mutation
"""
type EntityBulkCreatePayload {
    """
    Created entities
    """
    entities: [Entity!]
}`, BuiltIn: false},
	{Name: "../schema/entityextended.graphql", Input: `extend input CreateEntityInput {
  note: CreateNoteInput
}

extend input UpdateEntityInput {
  note:  CreateNoteInput
}
`, BuiltIn: false},
	{Name: "../schema/entitytype.graphql", Input: `extend type Query {
    """
    Look up entityType by ID
    """
     entityType(
        """
        ID of the entityType
        """
        id: ID!
    ):  EntityType!
}

extend type Mutation{
    """
    Create a new entityType
    """
    createEntityType(
        """
        values of the entityType
        """
        input: CreateEntityTypeInput!
    ): EntityTypeCreatePayload!
    """
    Create multiple new entityTypes
    """
    createBulkEntityType(
        """
        values of the entityType
        """
        input: [CreateEntityTypeInput!]
    ): EntityTypeBulkCreatePayload!
    """
    Create multiple new entityTypes via file upload
    """
    createBulkCSVEntityType(
        """
        csv file containing values of the entityType
        """
        input: Upload!
    ): EntityTypeBulkCreatePayload!
    """
    Update an existing entityType
    """
    updateEntityType(
        """
        ID of the entityType
        """
        id: ID!
        """
        New values for the entityType
        """
        input: UpdateEntityTypeInput!
    ): EntityTypeUpdatePayload!
    """
    Delete an existing entityType
    """
    deleteEntityType(
        """
        ID of the entityType
        """
        id: ID!
    ): EntityTypeDeletePayload!
}

"""
Return response for createEntityType mutation
"""
type EntityTypeCreatePayload {
    """
    Created entityType
    """
    entityType: EntityType!
}

"""
Return response for updateEntityType mutation
"""
type EntityTypeUpdatePayload {
    """
    Updated entityType
    """
    entityType: EntityType!
}

"""
Return response for deleteEntityType mutation
"""
type EntityTypeDeletePayload {
    """
    Deleted entityType ID
    """
    deletedID: ID!
}

"""
Return response for createBulkEntityType mutation
"""
type EntityTypeBulkCreatePayload {
    """
    Created entityTypes
    """
    entityTypes: [EntityType!]
}`, BuiltIn: false},
	{Name: "../schema/event.graphql", Input: `extend type Query {
    """
    Look up event by ID
    """
     event(
        """
        ID of the event
        """
        id: ID!
    ):  Event!
}

extend type Mutation{
    """
    Create a new event
    """
    createEvent(
        """
        values of the event
        """
        input: CreateEventInput!
    ): EventCreatePayload!
    """
    Create multiple new events
    """
    createBulkEvent(
        """
        values of the event
        """
        input: [CreateEventInput!]
    ): EventBulkCreatePayload!
    """
    Create multiple new events via file upload
    """
    createBulkCSVEvent(
        """
        csv file containing values of the event
        """
        input: Upload!
    ): EventBulkCreatePayload!
    """
    Update an existing event
    """
    updateEvent(
        """
        ID of the event
        """
        id: ID!
        """
        New values for the event
        """
        input: UpdateEventInput!
    ): EventUpdatePayload!
    """
    Delete an existing event
    """
    deleteEvent(
        """
        ID of the event
        """
        id: ID!
    ): EventDeletePayload!
}

"""
Return response for createEvent mutation
"""
type EventCreatePayload {
    """
    Created event
    """
    event: Event!
}

"""
Return response for updateEvent mutation
"""
type EventUpdatePayload {
    """
    Updated event
    """
    event: Event!
}

"""
Return response for deleteEvent mutation
"""
type EventDeletePayload {
    """
    Deleted event ID
    """
    deletedID: ID!
}

"""
Return response for createBulkEvent mutation
"""
type EventBulkCreatePayload {
    """
    Created events
    """
    events: [Event!]
}`, BuiltIn: false},
	{Name: "../schema/evidence.graphql", Input: `extend type Query {
    """
    Look up evidence by ID
    """
     evidence(
        """
        ID of the evidence
        """
        id: ID!
    ):  Evidence!
}

extend type Mutation{
    """
    Create a new evidence
    """
    createEvidence(
        """
        values of the evidence
        """
        input: CreateEvidenceInput!
        evidenceFiles: [Upload!]
    ): EvidenceCreatePayload!
    """
    Update an existing evidence
    """
    updateEvidence(
        """
        ID of the evidence
        """
        id: ID!
        """
        New values for the evidence
        """
        input: UpdateEvidenceInput!
        evidenceFiles: [Upload!]
    ): EvidenceUpdatePayload!
    """
    Delete an existing evidence
    """
    deleteEvidence(
        """
        ID of the evidence
        """
        id: ID!
    ): EvidenceDeletePayload!
}

"""
Return response for createEvidence mutation
"""
type EvidenceCreatePayload {
    """
    Created evidence
    """
    evidence: Evidence!
}

"""
Return response for updateEvidence mutation
"""
type EvidenceUpdatePayload {
    """
    Updated evidence
    """
    evidence: Evidence!
}

"""
Return response for deleteEvidence mutation
"""
type EvidenceDeletePayload {
    """
    Deleted evidence ID
    """
    deletedID: ID!
}

"""
Return response for createBulkEvidence mutation
"""
type EvidenceBulkCreatePayload {
    """
    Created evidences
    """
    evidences: [Evidence!]
}`, BuiltIn: false},
	{Name: "../schema/export.graphql", Input: `extend type Query {
    """
    Look up export by ID
    """
     export(
        """
        ID of the export
        """
        id: ID!
    ):  Export!
}

extend type Mutation{
    """
    Create a new export
    """
    createExport(
        """
        values of the export
        """
        input: CreateExportInput!
    ): ExportCreatePayload!
    """
    Update an existing export
    """
    updateExport(
        """
        ID of the export
        """
        id: ID!
        """
        New values for the export
        """
        input: UpdateExportInput!
        """
        Files to attach to the export
        """
        exportFiles: [Upload!]
    ): ExportUpdatePayload!
    """
    Delete an existing export
    """
    deleteExport(
        """
        ID of the export
        """
        id: ID!
    ): ExportDeletePayload!
    """
    Delete multiple exports
    """
    deleteBulkExport(
        """
        IDs of the exports to delete
        """
        ids: [ID!]!
    ): ExportBulkDeletePayload!
}

"""
Return response for createExport mutation
"""
type ExportCreatePayload {
    """
    Created export
    """
    export: Export!
}

"""
Return response for updateExport mutation
"""
type ExportUpdatePayload {
    """
    Updated export
    """
    export: Export!
}

"""
Return response for deleteExport mutation
"""
type ExportDeletePayload {
    """
    Deleted export ID
    """
    deletedID: ID!
}

"""
Return response for createBulkExport mutation
"""
type ExportBulkCreatePayload {
    """
    Created exports
    """
    exports: [Export!]
}

"""
Return response for deleteBulkExport mutation
"""
type ExportBulkDeletePayload {
    """
    Deleted export IDs
    """
    deletedIDs: [ID!]!
} 
`, BuiltIn: false},
	{Name: "../schema/file.graphql", Input: `extend type Query {
    """
    Look up file by ID
    """
     file(
        """
        ID of the file
        """
        id: ID!
    ):  File!
}

extend type Mutation{
    """
    Delete an existing file
    """
    deleteFile(
        """
        ID of the file
        """
        id: ID!
    ): FileDeletePayload!
}

"""
Return response for deleteFile mutation
"""
type FileDeletePayload {
    """
    Deleted file ID
    """
    deletedID: ID!
}

`, BuiltIn: false},
	{Name: "../schema/fileextended.graphql", Input: `extend type File {
    presignedURL: String
}`, BuiltIn: false},
	{Name: "../schema/group.graphql", Input: `extend type Query {
    """
    Look up group by ID
    """
     group(
        """
        ID of the group
        """
        id: ID!
    ):  Group!
}

extend type Mutation{
    """
    Create a new group
    """
    createGroup(
        """
        values of the group
        """
        input: CreateGroupInput!
    ): GroupCreatePayload!
    """
    Create multiple new groups
    """
    createBulkGroup(
        """
        values of the group
        """
        input: [CreateGroupInput!]
    ): GroupBulkCreatePayload!
    """
    Create multiple new groups via file upload
    """
    createBulkCSVGroup(
        """
        csv file containing values of the group
        """
        input: Upload!
    ): GroupBulkCreatePayload!
    """
    Update an existing group
    """
    updateGroup(
        """
        ID of the group
        """
        id: ID!
        """
        New values for the group
        """
        input: UpdateGroupInput!
    ): GroupUpdatePayload!
    """
    Delete an existing group
    """
    deleteGroup(
        """
        ID of the group
        """
        id: ID!
    ): GroupDeletePayload!
}

"""
Return response for createGroup mutation
"""
type GroupCreatePayload {
    """
    Created group
    """
    group: Group!
}

"""
Return response for updateGroup mutation
"""
type GroupUpdatePayload {
    """
    Updated group
    """
    group: Group!
}

"""
Return response for deleteGroup mutation
"""
type GroupDeletePayload {
    """
    Deleted group ID
    """
    deletedID: ID!
}

"""
Return response for createBulkGroup mutation
"""
type GroupBulkCreatePayload {
    """
    Created groups
    """
    groups: [Group!]
}`, BuiltIn: false},
	{Name: "../schema/groupextended.graphql", Input: `extend input CreateGroupInput {
  createGroupSettings: CreateGroupSettingInput
}

extend input UpdateGroupInput {
  addGroupMembers: [CreateGroupMembershipInput!]
  removeGroupMembers: [ID!]
  updateGroupSettings: UpdateGroupSettingInput
  """
  inheritGroupPermissions allows a group to be updated with the same permissions
  as the specified group ID, existing permissions will be removed
  """
  inheritGroupPermissions: ID
}

extend input GroupMembershipWhereInput {
  groupID: String
  userID: String
}

"""
GroupMembersInput is used to create members for a group
along with the group creation
"""
input GroupMembersInput {
  role: GroupMembershipRole
  userID: ID!
}

extend type Mutation{
    """
    Create a new group with members
    """
    createGroupWithMembers(
        """
        values of the group to be created
        """
        groupInput: CreateGroupInput!
        """
        group members to be added to the group
        """
        members: [GroupMembersInput!]
    ): GroupCreatePayload!
}

"""
Permission is enum for the permissions types
"""
enum Permission @goModel(model: "github.com/theopenlane/core/pkg/enums.Permission") {
  EDITOR
  VIEWER
  CREATOR
  BLOCKED
}

"""
GroupPermission contains details for the related object and the permissions
the group provides (or removes in the case of blocked) to the object within the
organization
"""
type GroupPermission implements Node {
  """
  the type of object the permissions are for, e.g. Program, Control, etc.
  """
  objectType: String!
  """
  the permissions the group has in relation to the object, e.g. EDITOR, VIEWER, BLOCKED
  """
  permissions: Permission!
  """
  the ID of the object the group was given permissions to
  """
  id: ID!
  """
  the displayID of the object the group was given permissions to
  """
  displayID: String
  """
  the  name of the object the group was given permissions to
  """
  name: String
}

"""
A connection to a list of items.
"""
type GroupPermissionConnection {
	"""
	A list of edges.
	"""
	edges: [GroupPermissionEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}

"""
An edge in a connection.
"""
type GroupPermissionEdge {
	"""
	The item at the end of the edge.
	"""
	node: GroupPermission
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}

extend type Group {
  """
  permissions the group provides
  """
  permissions(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): GroupPermissionConnection!
}

"""
Ordering options for GroupPermission connections
"""
input GroupPermissionOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order GroupPermission.
	"""
	field: GroupPermissionOrderField!
}

"""
Properties by which GroupPermission connections can be ordered.
"""
enum GroupPermissionOrderField {
	name
	permission
  objectType
}

"""
GroupPermissionWhereInput is used for filtering GroupPermission objects.
"""
input GroupPermissionWhereInput {
	not: GroupPermissionWhereInput
	and: [GroupPermissionWhereInput!]
	or: [GroupPermissionWhereInput!]
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	objectType field predicates
	"""
	objectType: String
	objectTypeNEQ: String
	objectTypeIn: [String!]
	objectTypeNotIn: [String!]
	objectTypeGT: String
	objectTypeGTE: String
	objectTypeLT: String
	objectTypeLTE: String
	objectTypeContains: String
	objectTypeHasPrefix: String
	objectTypeHasSuffix: String
	objectTypeIsNil: Boolean
	objectTypeNotNil: Boolean
	objectTypeEqualFold: String
	objectTypeContainsFold: String
  """
	permission field predicates
	"""
	permission: String
	permissionNEQ: String
	permissionIn: [String!]
	permissionNotIn: [String!]
	permissionGT: String
	permissionGTE: String
	permissionLT: String
	permissionLTE: String
	permissionContains: String
	permissionHasPrefix: String
	permissionHasSuffix: String
	permissionIsNil: Boolean
	permissionNotNil: Boolean
	permissionEqualFold: String
	permissionContainsFold: String
}

extend type Mutation{
  """
  Create a new group with members
  """
  createGroupByClone(
      """
      values of the group
      """
      groupInput: CreateGroupInput!
      """
      group members to be added to the group
      """
      members: [GroupMembersInput!]
      """
      inheritGroupPermissions allows a group to be created with the same permissions
      as the specified group ID
      """
      inheritGroupPermissions: ID
      """
      cloneGroupMembers allows a group to be created with the same group members
      as the specified group ID
      """
      cloneGroupMembers: ID
  ): GroupCreatePayload!
}`, BuiltIn: false},
	{Name: "../schema/groupmembership.graphql", Input: `extend type Query {
    """
    Look up groupMembership by ID
    """
     groupMembership(
        """
        ID of the groupMembership
        """
        id: ID!
    ):  GroupMembership!
}

extend type Mutation{
    """
    Create a new groupMembership
    """
    createGroupMembership(
        """
        values of the groupMembership
        """
        input: CreateGroupMembershipInput!
    ): GroupMembershipCreatePayload!
    """
    Create multiple new groupMemberships
    """
    createBulkGroupMembership(
        """
        values of the groupMembership
        """
        input: [CreateGroupMembershipInput!]
    ): GroupMembershipBulkCreatePayload!
    """
    Create multiple new groupMemberships via file upload
    """
    createBulkCSVGroupMembership(
        """
        csv file containing values of the groupMembership
        """
        input: Upload!
    ): GroupMembershipBulkCreatePayload!
    """
    Update an existing groupMembership
    """
    updateGroupMembership(
        """
        ID of the groupMembership
        """
        id: ID!
        """
        New values for the groupMembership
        """
        input: UpdateGroupMembershipInput!
    ): GroupMembershipUpdatePayload!
    """
    Delete an existing groupMembership
    """
    deleteGroupMembership(
        """
        ID of the groupMembership
        """
        id: ID!
    ): GroupMembershipDeletePayload!
}

"""
Return response for createGroupMembership mutation
"""
type GroupMembershipCreatePayload {
    """
    Created groupMembership
    """
    groupMembership: GroupMembership!
}

"""
Return response for updateGroupMembership mutation
"""
type GroupMembershipUpdatePayload {
    """
    Updated groupMembership
    """
    groupMembership: GroupMembership!
}

"""
Return response for deleteGroupMembership mutation
"""
type GroupMembershipDeletePayload {
    """
    Deleted groupMembership ID
    """
    deletedID: ID!
}

"""
Return response for createBulkGroupMembership mutation
"""
type GroupMembershipBulkCreatePayload {
    """
    Created groupMemberships
    """
    groupMemberships: [GroupMembership!]
}`, BuiltIn: false},
	{Name: "../schema/groupsetting.graphql", Input: `extend type Query {
    """
    Look up groupSetting by ID
    """
     groupSetting(
        """
        ID of the groupSetting
        """
        id: ID!
    ):  GroupSetting!
}

extend type Mutation{
    """
    Create a new groupSetting
    """
    createGroupSetting(
        """
        values of the groupSetting
        """
        input: CreateGroupSettingInput!
    ): GroupSettingCreatePayload!
    """
    Create multiple new groupSettings
    """
    createBulkGroupSetting(
        """
        values of the groupSetting
        """
        input: [CreateGroupSettingInput!]
    ): GroupSettingBulkCreatePayload!
    """
    Create multiple new groupSettings via file upload
    """
    createBulkCSVGroupSetting(
        """
        csv file containing values of the groupSetting
        """
        input: Upload!
    ): GroupSettingBulkCreatePayload!
    """
    Update an existing groupSetting
    """
    updateGroupSetting(
        """
        ID of the groupSetting
        """
        id: ID!
        """
        New values for the groupSetting
        """
        input: UpdateGroupSettingInput!
    ): GroupSettingUpdatePayload!
    """
    Delete an existing groupSetting
    """
    deleteGroupSetting(
        """
        ID of the groupSetting
        """
        id: ID!
    ): GroupSettingDeletePayload!
}

"""
Return response for createGroupSetting mutation
"""
type GroupSettingCreatePayload {
    """
    Created groupSetting
    """
    groupSetting: GroupSetting!
}

"""
Return response for updateGroupSetting mutation
"""
type GroupSettingUpdatePayload {
    """
    Updated groupSetting
    """
    groupSetting: GroupSetting!
}

"""
Return response for deleteGroupSetting mutation
"""
type GroupSettingDeletePayload {
    """
    Deleted groupSetting ID
    """
    deletedID: ID!
}

"""
Return response for createBulkGroupSetting mutation
"""
type GroupSettingBulkCreatePayload {
    """
    Created groupSettings
    """
    groupSettings: [GroupSetting!]
}`, BuiltIn: false},
	{Name: "../schema/hush.graphql", Input: `extend type Query {
    """
    Look up hush by ID
    """
     hush(
        """
        ID of the hush
        """
        id: ID!
    ):  Hush!
}



extend type Mutation{
    """
    Create a new hush
    """
    createHush(
        """
        values of the hush
        """
        input: CreateHushInput!
    ): HushCreatePayload!
    """
    Create multiple new hushs
    """
    createBulkHush(
        """
        values of the hush
        """
        input: [CreateHushInput!]
    ): HushBulkCreatePayload!
    """
    Create multiple new hushs via file upload
    """
    createBulkCSVHush(
        """
        csv file containing values of the hush
        """
        input: Upload!
    ): HushBulkCreatePayload!
    """
    Update multiple existing hushs
    """
    updateBulkHush(
        """
        IDs of the hushs to update
        """
        ids: [ID!]!
        """
        values to update the hushs with
        """
        input: UpdateHushInput!
    ): HushBulkUpdatePayload!
    """
    Update an existing hush
    """
    updateHush(
        """
        ID of the hush
        """
        id: ID!
        """
        New values for the hush
        """
        input: UpdateHushInput!
    ): HushUpdatePayload!
    """
    Delete an existing hush
    """
    deleteHush(
        """
        ID of the hush
        """
        id: ID!
    ): HushDeletePayload!
}

"""
Return response for createHush mutation
"""
type HushCreatePayload {
    """
    Created hush
    """
    hush: Hush!
}

"""
Return response for updateHush mutation
"""
type HushUpdatePayload {
    """
    Updated hush
    """
    hush: Hush!
}

"""
Return response for deleteHush mutation
"""
type HushDeletePayload {
    """
    Deleted hush ID
    """
    deletedID: ID!
}

"""
Return response for createBulkHush mutation
"""
type HushBulkCreatePayload {
    """
    Created hushs
    """
    hushes: [Hush!]
}

"""
Return response for updateBulkHush mutation
"""
type HushBulkUpdatePayload {
    """
    Updated hushs
    """
    hushes: [Hush!]
    """
    IDs of the updated hushs
    """
    updatedIDs: [ID!]
}`, BuiltIn: false},
	{Name: "../schema/integration.graphql", Input: `extend type Query {
    """
    Look up integration by ID
    """
     integration(
        """
        ID of the integration
        """
        id: ID!
    ):  Integration!
}

extend type Mutation{
    """
    Delete an existing integration
    """
    deleteIntegration(
        """
        ID of the integration
        """
        id: ID!
    ): IntegrationDeletePayload!
}
"""
Return response for deleteIntegration mutation
"""
type IntegrationDeletePayload {
    """
    Deleted integration ID
    """
    deletedID: ID!
}
`, BuiltIn: false},
	{Name: "../schema/internalpolicy.graphql", Input: `extend type Query {
    """
    Look up internalPolicy by ID
    """
     internalPolicy(
        """
        ID of the internalPolicy
        """
        id: ID!
    ):  InternalPolicy!
}



extend type Mutation{
    """
    Create a new internalPolicy
    """
    createInternalPolicy(
        """
        values of the internalPolicy
        """
        input: CreateInternalPolicyInput!
    ): InternalPolicyCreatePayload!
    """
    Create a new internalPolicy via file upload
    """
    createUploadInternalPolicy(
        """
        file containing values of the internalPolicy
        """
        policyFile: Upload!
        """
        ID of the owner organization
        """
        ownerID: ID
    ): InternalPolicyCreatePayload!
    """
    Create multiple new internalPolicys
    """
    createBulkInternalPolicy(
        """
        values of the internalPolicy
        """
        input: [CreateInternalPolicyInput!]
    ): InternalPolicyBulkCreatePayload!
    """
    Create multiple new internalPolicys via file upload
    """
    createBulkCSVInternalPolicy(
        """
        csv file containing values of the internalPolicy
        """
        input: Upload!
    ): InternalPolicyBulkCreatePayload!
    """
    Update multiple existing internalPolicys
    """
    updateBulkInternalPolicy(
        """
        IDs of the internalPolicys to update
        """
        ids: [ID!]!
        """
        values to update the internalPolicys with
        """
        input: UpdateInternalPolicyInput!
    ): InternalPolicyBulkUpdatePayload!
    """
    Update an existing internalPolicy
    """
    updateInternalPolicy(
        """
        ID of the internalPolicy
        """
        id: ID!
        """
        New values for the internalPolicy
        """
        input: UpdateInternalPolicyInput!
    ): InternalPolicyUpdatePayload!
    """
    Delete an existing internalPolicy
    """
    deleteInternalPolicy(
        """
        ID of the internalPolicy
        """
        id: ID!
    ): InternalPolicyDeletePayload!
}

"""
Return response for createInternalPolicy mutation
"""
type InternalPolicyCreatePayload {
    """
    Created internalPolicy
    """
    internalPolicy: InternalPolicy!
}

"""
Return response for updateInternalPolicy mutation
"""
type InternalPolicyUpdatePayload {
    """
    Updated internalPolicy
    """
    internalPolicy: InternalPolicy!
}

"""
Return response for deleteInternalPolicy mutation
"""
type InternalPolicyDeletePayload {
    """
    Deleted internalPolicy ID
    """
    deletedID: ID!
}

"""
Return response for createBulkInternalPolicy mutation
"""
type InternalPolicyBulkCreatePayload {
    """
    Created internalPolicys
    """
    internalPolicies: [InternalPolicy!]
}

"""
Return response for updateBulkInternalPolicy mutation
"""
type InternalPolicyBulkUpdatePayload {
    """
    Updated internalPolicys
    """
    internalPolicies: [InternalPolicy!]
    """
    IDs of the updated internalPolicys
    """
    updatedIDs: [ID!]
}
`, BuiltIn: false},
	{Name: "../schema/invite.graphql", Input: `extend type Query {
    """
    Look up invite by ID
    """
     invite(
        """
        ID of the invite
        """
        id: ID!
    ):  Invite!
}

extend type Mutation{
    """
    Create a new invite
    """
    createInvite(
        """
        values of the invite
        """
        input: CreateInviteInput!
    ): InviteCreatePayload!
    """
    Create multiple new invites
    """
    createBulkInvite(
        """
        values of the invite
        """
        input: [CreateInviteInput!]
    ): InviteBulkCreatePayload!
    """
    Create multiple new invites via file upload
    """
    createBulkCSVInvite(
        """
        csv file containing values of the invite
        """
        input: Upload!
    ): InviteBulkCreatePayload!
    """
    Update an existing invite
    """
    updateInvite(
        """
        ID of the invite
        """
        id: ID!
        """
        New values for the invite
        """
        input: UpdateInviteInput!
    ): InviteUpdatePayload!
    """
    Delete an existing invite
    """
    deleteInvite(
        """
        ID of the invite
        """
        id: ID!
    ): InviteDeletePayload!
}

"""
Return response for createInvite mutation
"""
type InviteCreatePayload {
    """
    Created invite
    """
    invite: Invite!
}

"""
Return response for updateInvite mutation
"""
type InviteUpdatePayload {
    """
    Updated invite
    """
    invite: Invite!
}

"""
Return response for deleteInvite mutation
"""
type InviteDeletePayload {
    """
    Deleted invite ID
    """
    deletedID: ID!
}

"""
Return response for createBulkInvite mutation
"""
type InviteBulkCreatePayload {
    """
    Created invites
    """
    invites: [Invite!]
}`, BuiltIn: false},
	{Name: "../schema/jobresult.graphql", Input: `extend type Query {
    """
    Look up jobResult by ID
    """
     jobResult(
        """
        ID of the jobResult
        """
        id: ID!
    ):  JobResult!
}

extend type Mutation{
    """
    Create a new jobResult
    """
    createJobResult(
        """
        values of the jobResult
        """
        input: CreateJobResultInput!
        """
        files to upload as jobResult attachments
        """
        jobResultFiles: [Upload!]
    ): JobResultCreatePayload!
    """
    Update an existing jobResult
    """
    updateJobResult(
        """
        ID of the jobResult
        """
        id: ID!
        """
        New values for the jobResult
        """
        input: UpdateJobResultInput!
        """
        files to upload as jobResult attachments
        """
        jobResultFiles: [Upload!]
    ): JobResultUpdatePayload!
    """
    Delete an existing jobResult
    """
    deleteJobResult(
        """
        ID of the jobResult
        """
        id: ID!
    ): JobResultDeletePayload!
}

"""
Return response for createJobResult mutation
"""
type JobResultCreatePayload {
    """
    Created jobResult
    """
    jobResult: JobResult!
}

"""
Return response for updateJobResult mutation
"""
type JobResultUpdatePayload {
    """
    Updated jobResult
    """
    jobResult: JobResult!
}

"""
Return response for deleteJobResult mutation
"""
type JobResultDeletePayload {
    """
    Deleted jobResult ID
    """
    deletedID: ID!
}
`, BuiltIn: false},
	{Name: "../schema/jobrunner.graphql", Input: `extend type Query {
    """
    Look up jobRunner by ID
    """
     jobRunner(
        """
        ID of the jobRunner
        """
        id: ID!
    ):  JobRunner!
}

extend type Mutation{
    """
    Create a new invite
    """
    createJobRunner(
        """
        values of the invite
        """
        input: CreateJobRunnerInput!
    ): JobRunnerCreatePayload!

    """
    Update an existing jobRunner
    """
    updateJobRunner(
        """
        ID of the jobRunner
        """
        id: ID!
        """
        New values for the jobRunner
        """
        input: UpdateJobRunnerInput!
    ): JobRunnerUpdatePayload!
    """
    Delete an existing jobRunner
    """
    deleteJobRunner(
        """
        ID of the jobRunner
        """
        id: ID!
    ): JobRunnerDeletePayload!
}


"""
Return response for updateJobRunner mutation
"""
type JobRunnerUpdatePayload {
    """
    Updated jobRunner
    """
    jobRunner: JobRunner!
}

"""
Return response for deleteJobRunner mutation
"""
type JobRunnerDeletePayload {
    """
    Deleted jobRunner ID
    """
    deletedID: ID!
}

"""
Return response for createJobRunner mutation
"""
type JobRunnerCreatePayload {
    """
    Created jobRunner
    """
    jobRunner: JobRunner!
}
`, BuiltIn: false},
	{Name: "../schema/jobrunnerregistrationtoken.graphql", Input: `extend type Query {
    """
    Look up jobRunnerRegistrationToken by ID
    """
     jobRunnerRegistrationToken(
        """
        ID of the jobRunnerRegistrationToken
        """
        id: ID!
    ):  JobRunnerRegistrationToken!
}

extend type Mutation{
    """
    Create a new jobRunnerRegistrationToken
    """
    createJobRunnerRegistrationToken(
        """
        values of the jobRunnerRegistrationToken
        """
        input: CreateJobRunnerRegistrationTokenInput!
    ): JobRunnerRegistrationTokenCreatePayload!
    """
    Delete an existing jobRunnerRegistrationToken
    """
    deleteJobRunnerRegistrationToken(
        """
        ID of the jobRunnerRegistrationToken
        """
        id: ID!
    ): JobRunnerRegistrationTokenDeletePayload!
}

"""
Return response for createJobRunnerRegistrationToken mutation
"""
type JobRunnerRegistrationTokenCreatePayload {
    """
    Created jobRunnerRegistrationToken
    """
    jobRunnerRegistrationToken: JobRunnerRegistrationToken!
}

"""
Return response for deleteJobRunnerRegistrationToken mutation
"""
type JobRunnerRegistrationTokenDeletePayload {
    """
    Deleted jobRunnerRegistrationToken ID
    """
    deletedID: ID!
}

"""
Return response for createBulkJobRunnerRegistrationToken mutation
"""
type JobRunnerRegistrationTokenBulkCreatePayload {
    """
    Created jobRunnerRegistrationTokens
    """
    jobRunnerRegistrationTokens: [JobRunnerRegistrationToken!]
}
`, BuiltIn: false},
	{Name: "../schema/jobrunnertoken.graphql", Input: `extend type Query {
    """
    Look up jobRunnerToken by ID
    """
     jobRunnerToken(
        """
        ID of the jobRunnerToken
        """
        id: ID!
    ):  JobRunnerToken!
}

extend type Mutation{
    """
    Create a new jobRunnerToken
    """
    createJobRunnerToken(
        """
        values of the jobRunnerToken
        """
        input: CreateJobRunnerTokenInput!
    ): JobRunnerTokenCreatePayload!
    """
    Delete an existing jobRunnerToken
    """
    deleteJobRunnerToken(
        """
        ID of the jobRunnerToken
        """
        id: ID!
    ): JobRunnerTokenDeletePayload!
}

"""
Return response for createJobRunnerToken mutation
"""
type JobRunnerTokenCreatePayload {
    """
    Created jobRunnerToken
    """
    jobRunnerToken: JobRunnerToken!
}

"""
Return response for updateJobRunnerToken mutation
"""
type JobRunnerTokenUpdatePayload {
    """
    Updated jobRunnerToken
    """
    jobRunnerToken: JobRunnerToken!
}

"""
Return response for deleteJobRunnerToken mutation
"""
type JobRunnerTokenDeletePayload {
    """
    Deleted jobRunnerToken ID
    """
    deletedID: ID!
}
`, BuiltIn: false},
	{Name: "../schema/jobtemplate.graphql", Input: `extend type Query {
    """
    Look up jobTemplate by ID
    """
     jobTemplate(
        """
        ID of the jobTemplate
        """
        id: ID!
    ):  JobTemplate!
}

extend type Mutation{
    """
    Create a new jobTemplate
    """
    createJobTemplate(
        """
        values of the jobTemplate
        """
        input: CreateJobTemplateInput!
    ): JobTemplateCreatePayload!
    """
    Create multiple new jobTemplates
    """
    createBulkJobTemplate(
        """
        values of the jobTemplate
        """
        input: [CreateJobTemplateInput!]
    ): JobTemplateBulkCreatePayload!
    """
    Create multiple new jobTemplates via file upload
    """
    createBulkCSVJobTemplate(
        """
        csv file containing values of the jobTemplate
        """
        input: Upload!
    ): JobTemplateBulkCreatePayload!
    """
    Update an existing jobTemplate
    """
    updateJobTemplate(
        """
        ID of the jobTemplate
        """
        id: ID!
        """
        New values for the jobTemplate
        """
        input: UpdateJobTemplateInput!
    ): JobTemplateUpdatePayload!
    """
    Delete an existing jobTemplate
    """
    deleteJobTemplate(
        """
        ID of the jobTemplate
        """
        id: ID!
    ): JobTemplateDeletePayload!
}

"""
Return response for createJobTemplate mutation
"""
type JobTemplateCreatePayload {
    """
    Created jobTemplate
    """
    jobTemplate: JobTemplate!
}

"""
Return response for updateJobTemplate mutation
"""
type JobTemplateUpdatePayload {
    """
    Updated jobTemplate
    """
    jobTemplate: JobTemplate!
}

"""
Return response for deleteJobTemplate mutation
"""
type JobTemplateDeletePayload {
    """
    Deleted jobTemplate ID
    """
    deletedID: ID!
}

"""
Return response for createBulkJobTemplate mutation
"""
type JobTemplateBulkCreatePayload {
    """
    Created jobTemplates
    """
    jobTemplates: [JobTemplate!]
}`, BuiltIn: false},
	{Name: "../schema/mappabledomain.graphql", Input: `extend type Query {
    """
    Look up mappableDomain by ID
    """
     mappableDomain(
        """
        ID of the mappableDomain
        """
        id: ID!
    ):  MappableDomain!
}

extend type Mutation{
    """
    Create a new mappableDomain
    """
    createMappableDomain(
        """
        values of the mappableDomain
        """
        input: CreateMappableDomainInput!
    ): MappableDomainCreatePayload!
    """
    Create multiple new mappableDomains
    """
    createBulkMappableDomain(
        """
        values of the mappableDomain
        """
        input: [CreateMappableDomainInput!]
    ): MappableDomainBulkCreatePayload!
    """
    Create multiple new mappableDomains via file upload
    """
    createBulkCSVMappableDomain(
        """
        csv file containing values of the mappableDomain
        """
        input: Upload!
    ): MappableDomainBulkCreatePayload!
    """
    Update an existing mappableDomain
    """
    updateMappableDomain(
        """
        ID of the mappableDomain
        """
        id: ID!
        """
        New values for the mappableDomain
        """
        input: UpdateMappableDomainInput!
    ): MappableDomainUpdatePayload!
    """
    Delete an existing mappableDomain
    """
    deleteMappableDomain(
        """
        ID of the mappableDomain
        """
        id: ID!
    ): MappableDomainDeletePayload!
}

"""
Return response for createMappableDomain mutation
"""
type MappableDomainCreatePayload {
    """
    Created mappableDomain
    """
    mappableDomain: MappableDomain!
}

"""
Return response for updateMappableDomain mutation
"""
type MappableDomainUpdatePayload {
    """
    Updated mappableDomain
    """
    mappableDomain: MappableDomain!
}

"""
Return response for deleteMappableDomain mutation
"""
type MappableDomainDeletePayload {
    """
    Deleted mappableDomain ID
    """
    deletedID: ID!
}

"""
Return response for createBulkMappableDomain mutation
"""
type MappableDomainBulkCreatePayload {
    """
    Created mappableDomains
    """
    mappableDomains: [MappableDomain!]
}`, BuiltIn: false},
	{Name: "../schema/mappedcontrol.graphql", Input: `extend type Query {
    """
    Look up mappedControl by ID
    """
     mappedControl(
        """
        ID of the mappedControl
        """
        id: ID!
    ):  MappedControl!
}

extend type Mutation{
    """
    Create a new mappedControl
    """
    createMappedControl(
        """
        values of the mappedControl
        """
        input: CreateMappedControlInput!
    ): MappedControlCreatePayload!
    """
    Create multiple new mappedControls
    """
    createBulkMappedControl(
        """
        values of the mappedControl
        """
        input: [CreateMappedControlInput!]
    ): MappedControlBulkCreatePayload!
    """
    Create multiple new mappedControls via file upload
    """
    createBulkCSVMappedControl(
        """
        csv file containing values of the mappedControl
        """
        input: Upload!
    ): MappedControlBulkCreatePayload!
    """
    Update an existing mappedControl
    """
    updateMappedControl(
        """
        ID of the mappedControl
        """
        id: ID!
        """
        New values for the mappedControl
        """
        input: UpdateMappedControlInput!
    ): MappedControlUpdatePayload!
    """
    Delete an existing mappedControl
    """
    deleteMappedControl(
        """
        ID of the mappedControl
        """
        id: ID!
    ): MappedControlDeletePayload!
}

"""
Return response for createMappedControl mutation
"""
type MappedControlCreatePayload {
    """
    Created mappedControl
    """
    mappedControl: MappedControl!
}

"""
Return response for updateMappedControl mutation
"""
type MappedControlUpdatePayload {
    """
    Updated mappedControl
    """
    mappedControl: MappedControl!
}

"""
Return response for deleteMappedControl mutation
"""
type MappedControlDeletePayload {
    """
    Deleted mappedControl ID
    """
    deletedID: ID!
}

"""
Return response for createBulkMappedControl mutation
"""
type MappedControlBulkCreatePayload {
    """
    Created mappedControls
    """
    mappedControls: [MappedControl!]
}`, BuiltIn: false},
	{Name: "../schema/narrative.graphql", Input: `extend type Query {
    """
    Look up narrative by ID
    """
     narrative(
        """
        ID of the narrative
        """
        id: ID!
    ):  Narrative!
}

extend type Mutation{
    """
    Create a new narrative
    """
    createNarrative(
        """
        values of the narrative
        """
        input: CreateNarrativeInput!
    ): NarrativeCreatePayload!
    """
    Create multiple new narratives
    """
    createBulkNarrative(
        """
        values of the narrative
        """
        input: [CreateNarrativeInput!]
    ): NarrativeBulkCreatePayload!
    """
    Create multiple new narratives via file upload
    """
    createBulkCSVNarrative(
        """
        csv file containing values of the narrative
        """
        input: Upload!
    ): NarrativeBulkCreatePayload!
    """
    Update an existing narrative
    """
    updateNarrative(
        """
        ID of the narrative
        """
        id: ID!
        """
        New values for the narrative
        """
        input: UpdateNarrativeInput!
    ): NarrativeUpdatePayload!
    """
    Delete an existing narrative
    """
    deleteNarrative(
        """
        ID of the narrative
        """
        id: ID!
    ): NarrativeDeletePayload!
}

"""
Return response for createNarrative mutation
"""
type NarrativeCreatePayload {
    """
    Created narrative
    """
    narrative: Narrative!
}

"""
Return response for updateNarrative mutation
"""
type NarrativeUpdatePayload {
    """
    Updated narrative
    """
    narrative: Narrative!
}

"""
Return response for deleteNarrative mutation
"""
type NarrativeDeletePayload {
    """
    Deleted narrative ID
    """
    deletedID: ID!
}

"""
Return response for createBulkNarrative mutation
"""
type NarrativeBulkCreatePayload {
    """
    Created narratives
    """
    narratives: [Narrative!]
}`, BuiltIn: false},
	{Name: "../schema/note.graphql", Input: `extend type Query {
    """
    Look up note by ID
    """
     note(
        """
        ID of the note
        """
        id: ID!
    ): Note!
}

extend input UpdateTaskInput {
    addComment: CreateNoteInput
    deleteComment: ID
}

extend type Mutation{
    """
    Update an existing task comment
    """
    updateTaskComment(
        """
        ID of the comment
        """
        id: ID!
        """
        New values for the comment
        """
        input: UpdateNoteInput!
        """
        Files to attach to the comment
        """
        noteFiles: [Upload!]
    ): TaskUpdatePayload!
}

`, BuiltIn: false},
	{Name: "../schema/onboarding.graphql", Input: `extend type Mutation{
    """
    Create a new onboarding
    """
    createOnboarding(
        """
        values of the onboarding
        """
        input: CreateOnboardingInput!
    ): OnboardingCreatePayload!
}

"""
Return response for createOnboarding mutation
"""
type OnboardingCreatePayload {
    """
    Created onboarding
    """
    onboarding: Onboarding!
}`, BuiltIn: false},
	{Name: "../schema/organization.graphql", Input: `extend type Query {
    """
    Look up organization by ID
    """
     organization(
        """
        ID of the organization
        """
        id: ID!
    ):  Organization!
}

extend type Mutation{
    """
    Create a new organization
    """
    createOrganization(
        """
        values of the organization
        """
        input: CreateOrganizationInput!
        avatarFile: Upload
    ): OrganizationCreatePayload!
    """
    Update an existing organization
    """
    updateOrganization(
        """
        ID of the organization
        """
        id: ID!
        """
        New values for the organization
        """
        input: UpdateOrganizationInput!
        avatarFile: Upload
    ): OrganizationUpdatePayload!
    """
    Delete an existing organization
    """
    deleteOrganization(
        """
        ID of the organization
        """
        id: ID!
    ): OrganizationDeletePayload!
}

"""
Return response for createOrganization mutation
"""
type OrganizationCreatePayload {
    """
    Created organization
    """
    organization: Organization!
}

"""
Return response for updateOrganization mutation
"""
type OrganizationUpdatePayload {
    """
    Updated organization
    """
    organization: Organization!
}

"""
Return response for deleteOrganization mutation
"""
type OrganizationDeletePayload {
    """
    Deleted organization ID
    """
    deletedID: ID!
}

"""
Return response for createBulkOrganization mutation
"""
type OrganizationBulkCreatePayload {
    """
    Created organizations
    """
    organizations: [Organization!]
}`, BuiltIn: false},
	{Name: "../schema/organizationsetting.graphql", Input: `extend type Query {
    """
    Look up organizationSetting by ID
    """
     organizationSetting(
        """
        ID of the organizationSetting
        """
        id: ID!
    ):  OrganizationSetting!
}

extend type Mutation{
    """
    Create a new organizationSetting
    """
    createOrganizationSetting(
        """
        values of the organizationSetting
        """
        input: CreateOrganizationSettingInput!
    ): OrganizationSettingCreatePayload!
    """
    Create multiple new organizationSettings
    """
    createBulkOrganizationSetting(
        """
        values of the organizationSetting
        """
        input: [CreateOrganizationSettingInput!]
    ): OrganizationSettingBulkCreatePayload!
    """
    Create multiple new organizationSettings via file upload
    """
    createBulkCSVOrganizationSetting(
        """
        csv file containing values of the organizationSetting
        """
        input: Upload!
    ): OrganizationSettingBulkCreatePayload!
    """
    Update an existing organizationSetting
    """
    updateOrganizationSetting(
        """
        ID of the organizationSetting
        """
        id: ID!
        """
        New values for the organizationSetting
        """
        input: UpdateOrganizationSettingInput!
    ): OrganizationSettingUpdatePayload!
    """
    Delete an existing organizationSetting
    """
    deleteOrganizationSetting(
        """
        ID of the organizationSetting
        """
        id: ID!
    ): OrganizationSettingDeletePayload!
}

"""
Return response for createOrganizationSetting mutation
"""
type OrganizationSettingCreatePayload {
    """
    Created organizationSetting
    """
    organizationSetting: OrganizationSetting!
}

"""
Return response for updateOrganizationSetting mutation
"""
type OrganizationSettingUpdatePayload {
    """
    Updated organizationSetting
    """
    organizationSetting: OrganizationSetting!
}

"""
Return response for deleteOrganizationSetting mutation
"""
type OrganizationSettingDeletePayload {
    """
    Deleted organizationSetting ID
    """
    deletedID: ID!
}

"""
Return response for createBulkOrganizationSetting mutation
"""
type OrganizationSettingBulkCreatePayload {
    """
    Created organizationSettings
    """
    organizationSettings: [OrganizationSetting!]
}`, BuiltIn: false},
	{Name: "../schema/orgextended.graphql", Input: `extend input CreateOrganizationInput {
  createOrgSettings: CreateOrganizationSettingInput
}

extend input UpdateOrganizationInput {
  addOrgMembers: [CreateOrgMembershipInput!]
  removeOrgMembers: [ID!]
  updateOrgSettings: UpdateOrganizationSettingInput
}

extend input OrgMembershipWhereInput {
  organizationID: String
  userID: String
}

"""
OrgMembersInput is used to create members for a organization
along with the org creation
"""
input OrgMembersInput {
  role: OrgMembershipRole
  userID: ID!
}

extend type Mutation{
    """
    Create a new organization with members
    """
    createOrganizationWithMembers(
        """
        values of the new organization to be created
        """
        organizationInput: CreateOrganizationInput!
        """
        avatar file to Upload
        """
        avatarFile: Upload
        """
        organization members to be added to the new org
        """
        members: [OrgMembersInput!]
    ): OrganizationCreatePayload!
}`, BuiltIn: false},
	{Name: "../schema/orgmembership.graphql", Input: `extend type Query {
    """
    Look up orgMembership by ID
    """
     orgMembership(
        """
        ID of the orgMembership
        """
        id: ID!
    ):  OrgMembership!
}

extend type Mutation{
    """
    Create a new orgMembership
    """
    createOrgMembership(
        """
        values of the orgMembership
        """
        input: CreateOrgMembershipInput!
    ): OrgMembershipCreatePayload!
    """
    Create multiple new orgMemberships
    """
    createBulkOrgMembership(
        """
        values of the orgMembership
        """
        input: [CreateOrgMembershipInput!]
    ): OrgMembershipBulkCreatePayload!
    """
    Create multiple new orgMemberships via file upload
    """
    createBulkCSVOrgMembership(
        """
        csv file containing values of the orgMembership
        """
        input: Upload!
    ): OrgMembershipBulkCreatePayload!
    """
    Update an existing orgMembership
    """
    updateOrgMembership(
        """
        ID of the orgMembership
        """
        id: ID!
        """
        New values for the orgMembership
        """
        input: UpdateOrgMembershipInput!
    ): OrgMembershipUpdatePayload!
    """
    Delete an existing orgMembership
    """
    deleteOrgMembership(
        """
        ID of the orgMembership
        """
        id: ID!
    ): OrgMembershipDeletePayload!
}

"""
Return response for createOrgMembership mutation
"""
type OrgMembershipCreatePayload {
    """
    Created orgMembership
    """
    orgMembership: OrgMembership!
}

"""
Return response for updateOrgMembership mutation
"""
type OrgMembershipUpdatePayload {
    """
    Updated orgMembership
    """
    orgMembership: OrgMembership!
}

"""
Return response for deleteOrgMembership mutation
"""
type OrgMembershipDeletePayload {
    """
    Deleted orgMembership ID
    """
    deletedID: ID!
}

"""
Return response for createBulkOrgMembership mutation
"""
type OrgMembershipBulkCreatePayload {
    """
    Created orgMemberships
    """
    orgMemberships: [OrgMembership!]
}

extend input OrgMembershipWhereInput {
  hasUserWith: [UserWhereInput!]
}`, BuiltIn: false},
	{Name: "../schema/orgsubscription.graphql", Input: `extend type Query {
    """
    Look up orgSubscription by ID
    """
     orgSubscription(
        """
        ID of the orgSubscription
        """
        id: ID!
    ):  OrgSubscription!
}
`, BuiltIn: false},
	{Name: "../schema/orgsubscriptionextended.graphql", Input: `extend type OrgSubscription {
    managePaymentMethods: String
    cancellation: String
}`, BuiltIn: false},
	{Name: "../schema/personalaccesstoken.graphql", Input: `extend type Query {
    """
    Look up personalAccessToken by ID
    """
     personalAccessToken(
        """
        ID of the personalAccessToken
        """
        id: ID!
    ):  PersonalAccessToken!
}

extend type Mutation{
    """
    Create a new personalAccessToken
    """
    createPersonalAccessToken(
        """
        values of the personalAccessToken
        """
        input: CreatePersonalAccessTokenInput!
    ): PersonalAccessTokenCreatePayload!
    """
    Update an existing personalAccessToken
    """
    updatePersonalAccessToken(
        """
        ID of the personalAccessToken
        """
        id: ID!
        """
        New values for the personalAccessToken
        """
        input: UpdatePersonalAccessTokenInput!
    ): PersonalAccessTokenUpdatePayload!
    """
    Delete an existing personalAccessToken
    """
    deletePersonalAccessToken(
        """
        ID of the personalAccessToken
        """
        id: ID!
    ): PersonalAccessTokenDeletePayload!
}

"""
Return response for createPersonalAccessToken mutation
"""
type PersonalAccessTokenCreatePayload {
    """
    Created personalAccessToken
    """
    personalAccessToken: PersonalAccessToken!
}

"""
Return response for updatePersonalAccessToken mutation
"""
type PersonalAccessTokenUpdatePayload {
    """
    Updated personalAccessToken
    """
    personalAccessToken: PersonalAccessToken!
}

"""
Return response for deletePersonalAccessToken mutation
"""
type PersonalAccessTokenDeletePayload {
    """
    Deleted personalAccessToken ID
    """
    deletedID: ID!
}

"""
Return response for createBulkPersonalAccessToken mutation
"""
type PersonalAccessTokenBulkCreatePayload {
    """
    Created personalAccessTokens
    """
    personalAccessTokens: [PersonalAccessToken!]
}`, BuiltIn: false},
	{Name: "../schema/procedure.graphql", Input: `extend type Query {
    """
    Look up procedure by ID
    """
     procedure(
        """
        ID of the procedure
        """
        id: ID!
    ):  Procedure!
}



extend type Mutation{
    """
    Create a new procedure
    """
    createProcedure(
        """
        values of the procedure
        """
        input: CreateProcedureInput!
    ): ProcedureCreatePayload!
    """
    Create a new procedure via file upload
    """
    createUploadProcedure(
        """
        file containing values of the procedure
        """
        procedureFile: Upload!
        """
        ID of the owner organization
        """
        ownerID: ID
    ): ProcedureCreatePayload!
    """
    Create multiple new procedures
    """
    createBulkProcedure(
        """
        values of the procedure
        """
        input: [CreateProcedureInput!]
    ): ProcedureBulkCreatePayload!
    """
    Create multiple new procedures via file upload
    """
    createBulkCSVProcedure(
        """
        csv file containing values of the procedure
        """
        input: Upload!
    ): ProcedureBulkCreatePayload!
    """
    Update multiple existing procedures
    """
    updateBulkProcedure(
        """
        IDs of the procedures to update
        """
        ids: [ID!]!
        """
        values to update the procedures with
        """
        input: UpdateProcedureInput!
    ): ProcedureBulkUpdatePayload!
    """
    Update an existing procedure
    """
    updateProcedure(
        """
        ID of the procedure
        """
        id: ID!
        """
        New values for the procedure
        """
        input: UpdateProcedureInput!
    ): ProcedureUpdatePayload!
    """
    Delete an existing procedure
    """
    deleteProcedure(
        """
        ID of the procedure
        """
        id: ID!
    ): ProcedureDeletePayload!
}

"""
Return response for createProcedure mutation
"""
type ProcedureCreatePayload {
    """
    Created procedure
    """
    procedure: Procedure!
}

"""
Return response for updateProcedure mutation
"""
type ProcedureUpdatePayload {
    """
    Updated procedure
    """
    procedure: Procedure!
}

"""
Return response for deleteProcedure mutation
"""
type ProcedureDeletePayload {
    """
    Deleted procedure ID
    """
    deletedID: ID!
}

"""
Return response for createBulkProcedure mutation
"""
type ProcedureBulkCreatePayload {
    """
    Created procedures
    """
    procedures: [Procedure!]
}

"""
Return response for updateBulkProcedure mutation
"""
type ProcedureBulkUpdatePayload {
    """
    Updated procedures
    """
    procedures: [Procedure!]
    """
    IDs of the updated procedures
    """
    updatedIDs: [ID!]
}`, BuiltIn: false},
	{Name: "../schema/program.graphql", Input: `extend type Query {
    """
    Look up program by ID
    """
     program(
        """
        ID of the program
        """
        id: ID!
    ):  Program!
}

extend type Mutation{
    """
    Create a new program
    """
    createProgram(
        """
        values of the program
        """
        input: CreateProgramInput!
    ): ProgramCreatePayload!
    """
    Create multiple new programs
    """
    createBulkProgram(
        """
        values of the program
        """
        input: [CreateProgramInput!]
    ): ProgramBulkCreatePayload!
    """
    Create multiple new programs via file upload
    """
    createBulkCSVProgram(
        """
        csv file containing values of the program
        """
        input: Upload!
    ): ProgramBulkCreatePayload!
    """
    Update an existing program
    """
    updateProgram(
        """
        ID of the program
        """
        id: ID!
        """
        New values for the program
        """
        input: UpdateProgramInput!
    ): ProgramUpdatePayload!
    """
    Delete an existing program
    """
    deleteProgram(
        """
        ID of the program
        """
        id: ID!
    ): ProgramDeletePayload!
}

"""
Return response for createProgram mutation
"""
type ProgramCreatePayload {
    """
    Created program
    """
    program: Program!
}

"""
Return response for updateProgram mutation
"""
type ProgramUpdatePayload {
    """
    Updated program
    """
    program: Program!
}

"""
Return response for deleteProgram mutation
"""
type ProgramDeletePayload {
    """
    Deleted program ID
    """
    deletedID: ID!
}

"""
Return response for createBulkProgram mutation
"""
type ProgramBulkCreatePayload {
    """
    Created programs
    """
    programs: [Program!]
}`, BuiltIn: false},
	{Name: "../schema/programextended.graphql", Input: `extend input UpdateProgramInput {
  addProgramMembers: [AddProgramMembershipInput!]
  removeProgramMembers: [ID!]
}

"""
AddProgramMembershipInput is used for create ProgramMembership object under an existing program
"""
input AddProgramMembershipInput {
  role: ProgramMembershipRole
  userID: ID!
}

extend input ProgramMembershipWhereInput {
  programID: String
  userID: String
}

input CreateControlWithSubcontrolsInput{
  control: CreateControlInput
  subcontrols: [CreateSubcontrolInput!]
}

input CreateFullProgramInput{
  program: CreateProgramInput!
  controls: [CreateControlWithSubcontrolsInput!]
  risks: [CreateRiskInput!]
  internalPolicies: [CreateInternalPolicyInput!]
  procedures: [CreateProcedureInput!]
  members: [CreateMemberWithProgramInput!]
  standardID: ID
}

input CreateProgramWithMembersInput{
  program: CreateProgramInput!
  members: [CreateMemberWithProgramInput!]
  standardID: ID
}

input CreateMemberWithProgramInput {
  role: ProgramMembershipRole
  userID: ID!
}

extend type Mutation{
    """
    Create a new program with members
    """
    createProgramWithMembers(
        """
        values of the program
        """
        input: CreateProgramWithMembersInput!
    ): ProgramCreatePayload!
    """
    Create a new program with options for edges (members, policies, procedures, risks, controls, standard)
    """
    createFullProgram(
        """
        values of the program
        """
        input: CreateFullProgramInput!
    ): ProgramCreatePayload!
    """
    Create a controls with subcontrols
    """
    createControlWithSubcontrols(
        """
        values of the program
        """
        input: CreateControlWithSubcontrolsInput!
    ): ControlCreatePayload!
}
`, BuiltIn: false},
	{Name: "../schema/programmembership.graphql", Input: `extend type Query {
    """
    Look up programMembership by ID
    """
     programMembership(
        """
        ID of the programMembership
        """
        id: ID!
    ):  ProgramMembership!
}

extend type Mutation{
    """
    Create a new programMembership
    """
    createProgramMembership(
        """
        values of the programMembership
        """
        input: CreateProgramMembershipInput!
    ): ProgramMembershipCreatePayload!
    """
    Create multiple new programMemberships
    """
    createBulkProgramMembership(
        """
        values of the programMembership
        """
        input: [CreateProgramMembershipInput!]
    ): ProgramMembershipBulkCreatePayload!
    """
    Create multiple new programMemberships via file upload
    """
    createBulkCSVProgramMembership(
        """
        csv file containing values of the programMembership
        """
        input: Upload!
    ): ProgramMembershipBulkCreatePayload!
    """
    Update an existing programMembership
    """
    updateProgramMembership(
        """
        ID of the programMembership
        """
        id: ID!
        """
        New values for the programMembership
        """
        input: UpdateProgramMembershipInput!
    ): ProgramMembershipUpdatePayload!
    """
    Delete an existing programMembership
    """
    deleteProgramMembership(
        """
        ID of the programMembership
        """
        id: ID!
    ): ProgramMembershipDeletePayload!
}

"""
Return response for createProgramMembership mutation
"""
type ProgramMembershipCreatePayload {
    """
    Created programMembership
    """
    programMembership: ProgramMembership!
}

"""
Return response for updateProgramMembership mutation
"""
type ProgramMembershipUpdatePayload {
    """
    Updated programMembership
    """
    programMembership: ProgramMembership!
}

"""
Return response for deleteProgramMembership mutation
"""
type ProgramMembershipDeletePayload {
    """
    Deleted programMembership ID
    """
    deletedID: ID!
}

"""
Return response for createBulkProgramMembership mutation
"""
type ProgramMembershipBulkCreatePayload {
    """
    Created programMemberships
    """
    programMemberships: [ProgramMembership!]
}`, BuiltIn: false},
	{Name: "../schema/revision.graphql", Input: `extend input UpdateActionPlanInput {
    RevisionBump: VersionBump
}

extend input UpdateControlObjectiveInput {
    RevisionBump: VersionBump
}

extend input UpdateInternalPolicyInput {
    RevisionBump: VersionBump
}

extend input UpdateProcedureInput {
    RevisionBump: VersionBump
}

extend input UpdateStandardInput {
    RevisionBump: VersionBump
}
`, BuiltIn: false},
	{Name: "../schema/risk.graphql", Input: `extend type Query {
    """
    Look up risk by ID
    """
     risk(
        """
        ID of the risk
        """
        id: ID!
    ):  Risk!
}



extend type Mutation{
    """
    Create a new risk
    """
    createRisk(
        """
        values of the risk
        """
        input: CreateRiskInput!
    ): RiskCreatePayload!
    """
    Create multiple new risks
    """
    createBulkRisk(
        """
        values of the risk
        """
        input: [CreateRiskInput!]
    ): RiskBulkCreatePayload!
    """
    Create multiple new risks via file upload
    """
    createBulkCSVRisk(
        """
        csv file containing values of the risk
        """
        input: Upload!
    ): RiskBulkCreatePayload!
    """
    Update multiple existing risks
    """
    updateBulkRisk(
        """
        IDs of the risks to update
        """
        ids: [ID!]!
        """
        values to update the risks with
        """
        input: UpdateRiskInput!
    ): RiskBulkUpdatePayload!
    """
    Update an existing risk
    """
    updateRisk(
        """
        ID of the risk
        """
        id: ID!
        """
        New values for the risk
        """
        input: UpdateRiskInput!
    ): RiskUpdatePayload!
    """
    Delete an existing risk
    """
    deleteRisk(
        """
        ID of the risk
        """
        id: ID!
    ): RiskDeletePayload!
}

"""
Return response for createRisk mutation
"""
type RiskCreatePayload {
    """
    Created risk
    """
    risk: Risk!
}

"""
Return response for updateRisk mutation
"""
type RiskUpdatePayload {
    """
    Updated risk
    """
    risk: Risk!
}

"""
Return response for deleteRisk mutation
"""
type RiskDeletePayload {
    """
    Deleted risk ID
    """
    deletedID: ID!
}

"""
Return response for createBulkRisk mutation
"""
type RiskBulkCreatePayload {
    """
    Created risks
    """
    risks: [Risk!]
}

"""
Return response for updateBulkRisk mutation
"""
type RiskBulkUpdatePayload {
    """
    Updated risks
    """
    risks: [Risk!]
    """
    IDs of the updated risks
    """
    updatedIDs: [ID!]
}`, BuiltIn: false},
	{Name: "../schema/scalars.graphql", Input: `"""
The ` + "`" + `Upload` + "`" + ` scalar type represents a file upload.
This scalar is typically used to handle file uploads in GraphQL mutations.
"""
scalar Upload
"""
The ` + "`" + `Address` + "`" + ` scalar type represents a physical or mailing address.
This scalar can be used to store and validate address information in the GraphQL schema.
It contains ` + "`" + `Line1` + "`" + `, ` + "`" + `Line2` + "`" + `, ` + "`" + `City` + "`" + `, ` + "`" + `State` + "`" + `, ` + "`" + `PostalCode` + "`" + `, and ` + "`" + `Country` + "`" + `
"""
scalar Address
"""
The ` + "`" + `Price` + "`" + ` scalar type represents a monetary value for a subscription, including the numerical amount, the interval of recurrence and the currency to be charged in (e.g. USD)
"""
scalar Price
"""
The ` + "`" + `AssessmentObjective` + "`" + ` scalar type represents objectives that are validated during the audit to ensure the control is implemented
"""
scalar AssessmentObjective
"""
The ` + "`" + `AssessmentMethod` + "`" + ` scalar type represents methods that can be used during the audit to assess the control implementation
"""
scalar AssessmentMethod
"""
The ` + "`" + `ExampleEvidence` + "`" + ` scalar type represents example evidence that can be used to satisfy the control
"""
scalar ExampleEvidence
"""
The ` + "`" + `Reference` + "`" + ` represents are links to external sources that can be used to gain more information about the control
"""
scalar Reference
"""
The ` + "`" + `ImplementationGuidance` + "`" + ` scalar type that represents steps to take to implement a control; they can come directly from the control source or pulled from external sources
"""
scalar ImplementationGuidance
"""
VersionBump allows a revision to automatically be bumped based on "Major", "Minor", "Patch", or "Draft"
"""
scalar VersionBump
"""
DateTime allows clients to use multiple time/date formats ( 2006-01-10 or 2025-04-28T04:00:00Z )
"""
scalar DateTime
"""
AAGUID (Authenticator Attestation Global Unique Identifier) is a 128-bit identifier used in the WebAuthn and FIDO2 protocols to uniquely identify the model of an authenticator device
"""
scalar AAGUID
"""
JobConfiguration is the configuration for an automated job
"""
scalar JobConfiguration
"""
JobCadence is when a job should be scheduled to run
"""
scalar JobCadence
"""
Change is a difference between two updates to an object used by
the audit history resolvers
"""
scalar Change
"""
SSOAuthorizationMap is a map of organization IDs to SSO verification timestamps.
This scalar is used to track SSO verification times for organizations in the context of token authorization.
"""
scalar SSOAuthorizationMap
"""
CredentialSet is a json of of credential keys that are used to authenticate to a third party
"""
scalar CredentialSet
`, BuiltIn: false},
	{Name: "../schema/scan.graphql", Input: `extend type Query {
    """
    Look up scan by ID
    """
     scan(
        """
        ID of the scan
        """
        id: ID!
    ):  Scan!
}



extend type Mutation{
    """
    Create a new scan
    """
    createScan(
        """
        values of the scan
        """
        input: CreateScanInput!
    ): ScanCreatePayload!
    """
    Create multiple new scans
    """
    createBulkScan(
        """
        values of the scan
        """
        input: [CreateScanInput!]
    ): ScanBulkCreatePayload!
    """
    Create multiple new scans via file upload
    """
    createBulkCSVScan(
        """
        csv file containing values of the scan
        """
        input: Upload!
    ): ScanBulkCreatePayload!
    """
    Update multiple existing scans
    """
    updateBulkScan(
        """
        IDs of the scans to update
        """
        ids: [ID!]!
        """
        values to update the scans with
        """
        input: UpdateScanInput!
    ): ScanBulkUpdatePayload!
    """
    Update an existing scan
    """
    updateScan(
        """
        ID of the scan
        """
        id: ID!
        """
        New values for the scan
        """
        input: UpdateScanInput!
    ): ScanUpdatePayload!
    """
    Delete an existing scan
    """
    deleteScan(
        """
        ID of the scan
        """
        id: ID!
    ): ScanDeletePayload!
}

"""
Return response for createScan mutation
"""
type ScanCreatePayload {
    """
    Created scan
    """
    scan: Scan!
}

"""
Return response for updateScan mutation
"""
type ScanUpdatePayload {
    """
    Updated scan
    """
    scan: Scan!
}

"""
Return response for deleteScan mutation
"""
type ScanDeletePayload {
    """
    Deleted scan ID
    """
    deletedID: ID!
}

"""
Return response for createBulkScan mutation
"""
type ScanBulkCreatePayload {
    """
    Created scans
    """
    scans: [Scan!]
}

"""
Return response for updateBulkScan mutation
"""
type ScanBulkUpdatePayload {
    """
    Updated scans
    """
    scans: [Scan!]
    """
    IDs of the updated scans
    """
    updatedIDs: [ID!]
}`, BuiltIn: false},
	{Name: "../schema/scheduledjob.graphql", Input: `extend type Query {
    """
    Look up scheduledJob by ID
    """
     scheduledJob(
        """
        ID of the scheduledJob
        """
        id: ID!
    ):  ScheduledJob!
}

extend type Mutation{
    """
    Create a new scheduledJob
    """
    createScheduledJob(
        """
        values of the scheduledJob
        """
        input: CreateScheduledJobInput!
    ): ScheduledJobCreatePayload!
    """
    Create multiple new scheduledJobs
    """
    createBulkScheduledJob(
        """
        values of the scheduledJob
        """
        input: [CreateScheduledJobInput!]
    ): ScheduledJobBulkCreatePayload!
    """
    Create multiple new scheduledJobs via file upload
    """
    createBulkCSVScheduledJob(
        """
        csv file containing values of the scheduledJob
        """
        input: Upload!
    ): ScheduledJobBulkCreatePayload!
    """
    Update an existing scheduledJob
    """
    updateScheduledJob(
        """
        ID of the scheduledJob
        """
        id: ID!
        """
        New values for the scheduledJob
        """
        input: UpdateScheduledJobInput!
    ): ScheduledJobUpdatePayload!
    """
    Delete an existing scheduledJob
    """
    deleteScheduledJob(
        """
        ID of the scheduledJob
        """
        id: ID!
    ): ScheduledJobDeletePayload!
}

"""
Return response for createScheduledJob mutation
"""
type ScheduledJobCreatePayload {
    """
    Created scheduledJob
    """
    scheduledJob: ScheduledJob!
}

"""
Return response for updateScheduledJob mutation
"""
type ScheduledJobUpdatePayload {
    """
    Updated scheduledJob
    """
    scheduledJob: ScheduledJob!
}

"""
Return response for deleteScheduledJob mutation
"""
type ScheduledJobDeletePayload {
    """
    Deleted scheduledJob ID
    """
    deletedID: ID!
}

"""
Return response for createBulkScheduledJob mutation
"""
type ScheduledJobBulkCreatePayload {
    """
    Created scheduledJobs
    """
    scheduledJobs: [ScheduledJob!]
}`, BuiltIn: false},
	{Name: "../schema/scheduledjobrun.graphql", Input: `extend type Query {
    """
    Look up scheduledJobRun by ID
    """
     scheduledJobRun(
        """
        ID of the scheduledJobRun
        """
        id: ID!
    ):  ScheduledJobRun!
}

extend type Mutation{
    """
    Create a new scheduledJobRun
    """
    createScheduledJobRun(
        """
        values of the scheduledJobRun
        """
        input: CreateScheduledJobRunInput!
    ): ScheduledJobRunCreatePayload!
    """
    Update an existing scheduledJobRun
    """
    updateScheduledJobRun(
        """
        ID of the scheduledJobRun
        """
        id: ID!
        """
        New values for the scheduledJobRun
        """
        input: UpdateScheduledJobRunInput!
    ): ScheduledJobRunUpdatePayload!
    """
    Delete an existing scheduledJobRun
    """
    deleteScheduledJobRun(
        """
        ID of the scheduledJobRun
        """
        id: ID!
    ): ScheduledJobRunDeletePayload!
}

"""
Return response for createScheduledJobRun mutation
"""
type ScheduledJobRunCreatePayload {
    """
    Created scheduledJobRun
    """
    scheduledJobRun: ScheduledJobRun!
}

"""
Return response for updateScheduledJobRun mutation
"""
type ScheduledJobRunUpdatePayload {
    """
    Updated scheduledJobRun
    """
    scheduledJobRun: ScheduledJobRun!
}

"""
Return response for deleteScheduledJobRun mutation
"""
type ScheduledJobRunDeletePayload {
    """
    Deleted scheduledJobRun ID
    """
    deletedID: ID!
}
`, BuiltIn: false},
	{Name: "../schema/search.graphql", Input: `extend type Query{
    """
    Search across APIToken objects
    """
    apiTokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): APITokenConnection
    """
    Search across ActionPlan objects
    """
    actionPlanSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ActionPlanConnection
    """
    Search across Asset objects
    """
    assetSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): AssetConnection
    """
    Search across Contact objects
    """
    contactSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ContactConnection
    """
    Search across Control objects
    """
    controlSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ControlConnection
    """
    Search across ControlImplementation objects
    """
    controlImplementationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ControlImplementationConnection
    """
    Search across ControlObjective objects
    """
    controlObjectiveSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ControlObjectiveConnection
    """
    Search across CustomDomain objects
    """
    customDomainSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): CustomDomainConnection
    """
    Search across DNSVerification objects
    """
    dnsVerificationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): DNSVerificationConnection
    """
    Search across DocumentData objects
    """
    documentDataSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): DocumentDataConnection
    """
    Search across Entity objects
    """
    entitySearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EntityConnection
    """
    Search across EntityType objects
    """
    entityTypeSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EntityTypeConnection
    """
    Search across Event objects
    """
    eventSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EventConnection
    """
    Search across Evidence objects
    """
    evidenceSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EvidenceConnection
    """
    Search across File objects
    """
    fileSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): FileConnection
    """
    Search across Group objects
    """
    groupSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): GroupConnection
    """
    Search across Integration objects
    """
    integrationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): IntegrationConnection
    """
    Search across InternalPolicy objects
    """
    internalPolicySearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): InternalPolicyConnection
    """
    Search across Invite objects
    """
    inviteSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): InviteConnection
    """
    Search across JobRunner objects
    """
    jobRunnerSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobRunnerConnection
    """
    Search across JobRunnerRegistrationToken objects
    """
    jobRunnerRegistrationTokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobRunnerRegistrationTokenConnection
    """
    Search across JobRunnerToken objects
    """
    jobRunnerTokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobRunnerTokenConnection
    """
    Search across JobTemplate objects
    """
    jobTemplateSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): JobTemplateConnection
    """
    Search across MappableDomain objects
    """
    mappableDomainSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): MappableDomainConnection
    """
    Search across MappedControl objects
    """
    mappedControlSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): MappedControlConnection
    """
    Search across Narrative objects
    """
    narrativeSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): NarrativeConnection
    """
    Search across OrgSubscription objects
    """
    orgSubscriptionSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): OrgSubscriptionConnection
    """
    Search across Organization objects
    """
    organizationSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): OrganizationConnection
    """
    Search across OrganizationSetting objects
    """
    organizationSettingSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): OrganizationSettingConnection
    """
    Search across PersonalAccessToken objects
    """
    personalAccessTokenSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): PersonalAccessTokenConnection
    """
    Search across Procedure objects
    """
    procedureSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ProcedureConnection
    """
    Search across Program objects
    """
    programSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ProgramConnection
    """
    Search across Risk objects
    """
    riskSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): RiskConnection
    """
    Search across Scan objects
    """
    scanSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ScanConnection
    """
    Search across Standard objects
    """
    standardSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): StandardConnection
    """
    Search across Subcontrol objects
    """
    subcontrolSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SubcontrolConnection
    """
    Search across Subprocessor objects
    """
    subprocessorSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SubprocessorConnection
    """
    Search across Subscriber objects
    """
    subscriberSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SubscriberConnection
    """
    Search across Task objects
    """
    taskSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TaskConnection
    """
    Search across Template objects
    """
    templateSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TemplateConnection
    """
    Search across TrustCenter objects
    """
    trustCenterSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TrustCenterConnection
    """
    Search across TrustCenterCompliance objects
    """
    trustCenterComplianceSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TrustCenterComplianceConnection
    """
    Search across TrustCenterDoc objects
    """
    trustCenterDocSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TrustCenterDocConnection
    """
    Search across User objects
    """
    userSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): UserConnection
    """
    Search across UserSetting objects
    """
    userSettingSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): UserSettingConnection
    """
    Search across Webauthn objects
    """
    webauthnSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): WebauthnConnection
}
type SearchResults{
  """
  Information to aid in pagination.
  """
  page: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
  apiTokens: APITokenConnection
  actionPlans: ActionPlanConnection
  assets: AssetConnection
  contacts: ContactConnection
  controls: ControlConnection
  controlImplementations: ControlImplementationConnection
  controlObjectives: ControlObjectiveConnection
  customDomains: CustomDomainConnection
  dnsVerifications: DNSVerificationConnection
  documentData: DocumentDataConnection
  entities: EntityConnection
  entityTypes: EntityTypeConnection
  events: EventConnection
  evidences: EvidenceConnection
  files: FileConnection
  groups: GroupConnection
  integrations: IntegrationConnection
  internalPolicies: InternalPolicyConnection
  invites: InviteConnection
  jobRunners: JobRunnerConnection
  jobRunnerRegistrationTokens: JobRunnerRegistrationTokenConnection
  jobRunnerTokens: JobRunnerTokenConnection
  jobTemplates: JobTemplateConnection
  mappableDomains: MappableDomainConnection
  mappedControls: MappedControlConnection
  narratives: NarrativeConnection
  orgSubscriptions: OrgSubscriptionConnection
  organizations: OrganizationConnection
  organizationSettings: OrganizationSettingConnection
  personalAccessTokens: PersonalAccessTokenConnection
  procedures: ProcedureConnection
  programs: ProgramConnection
  risks: RiskConnection
  scans: ScanConnection
  standards: StandardConnection
  subcontrols: SubcontrolConnection
  subprocessors: SubprocessorConnection
  subscribers: SubscriberConnection
  tasks: TaskConnection
  templates: TemplateConnection
  trustCenters: TrustCenterConnection
  trustCenterCompliances: TrustCenterComplianceConnection
  trustCenterDocs: TrustCenterDocConnection
  users: UserConnection
  userSettings: UserSettingConnection
  webauthns: WebauthnConnection
}

extend type Query{
    """
    Search across all objects
    """
    search(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SearchResults
    """
    Admin search across all objects
    """
    adminSearch(
        """
        Query string to search across objects
        """
        query: String!
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: Cursor
        """
        Returns the first _n_ elements from the list.
        """
        first: Int
        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: Cursor
        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SearchResults
}`, BuiltIn: false},
	{Name: "../schema/standard.graphql", Input: `extend type Query {
    """
    Look up standard by ID
    """
     standard(
        """
        ID of the standard
        """
        id: ID!
    ):  Standard!
}

extend type Mutation{
    """
    Create a new standard
    """
    createStandard(
        """
        values of the standard
        """
        input: CreateStandardInput!
    ): StandardCreatePayload!
    """
    Update an existing standard
    """
    updateStandard(
        """
        ID of the standard
        """
        id: ID!
        """
        New values for the standard
        """
        input: UpdateStandardInput!
    ): StandardUpdatePayload!
    """
    Delete an existing standard
    """
    deleteStandard(
        """
        ID of the standard
        """
        id: ID!
    ): StandardDeletePayload!
}

"""
Return response for createStandard mutation
"""
type StandardCreatePayload {
    """
    Created standard
    """
    standard: Standard!
}

"""
Return response for updateStandard mutation
"""
type StandardUpdatePayload {
    """
    Updated standard
    """
    standard: Standard!
}

"""
Return response for deleteStandard mutation
"""
type StandardDeletePayload {
    """
    Deleted standard ID
    """
    deletedID: ID!
}

"""
Return response for createBulkStandard mutation
"""
type StandardBulkCreatePayload {
    """
    Created standards
    """
    standards: [Standard!]
}`, BuiltIn: false},
	{Name: "../schema/subcontrol.graphql", Input: `extend type Query {
    """
    Look up subcontrol by ID
    """
     subcontrol(
        """
        ID of the subcontrol
        """
        id: ID!
    ):  Subcontrol!
}

extend type Mutation{
    """
    Create a new subcontrol
    """
    createSubcontrol(
        """
        values of the subcontrol
        """
        input: CreateSubcontrolInput!
    ): SubcontrolCreatePayload!
    """
    Create multiple new subcontrols
    """
    createBulkSubcontrol(
        """
        values of the subcontrol
        """
        input: [CreateSubcontrolInput!]
    ): SubcontrolBulkCreatePayload!
    """
    Create multiple new subcontrols via file upload
    """
    createBulkCSVSubcontrol(
        """
        csv file containing values of the subcontrol
        """
        input: Upload!
    ): SubcontrolBulkCreatePayload!
    """
    Update an existing subcontrol
    """
    updateSubcontrol(
        """
        ID of the subcontrol
        """
        id: ID!
        """
        New values for the subcontrol
        """
        input: UpdateSubcontrolInput!
    ): SubcontrolUpdatePayload!
    """
    Delete an existing subcontrol
    """
    deleteSubcontrol(
        """
        ID of the subcontrol
        """
        id: ID!
    ): SubcontrolDeletePayload!
}

"""
Return response for createSubcontrol mutation
"""
type SubcontrolCreatePayload {
    """
    Created subcontrol
    """
    subcontrol: Subcontrol!
}

"""
Return response for updateSubcontrol mutation
"""
type SubcontrolUpdatePayload {
    """
    Updated subcontrol
    """
    subcontrol: Subcontrol!
}

"""
Return response for deleteSubcontrol mutation
"""
type SubcontrolDeletePayload {
    """
    Deleted subcontrol ID
    """
    deletedID: ID!
}

"""
Return response for createBulkSubcontrol mutation
"""
type SubcontrolBulkCreatePayload {
    """
    Created subcontrols
    """
    subcontrols: [Subcontrol!]
}`, BuiltIn: false},
	{Name: "../schema/subprocessor.graphql", Input: `extend type Query {
    """
    Look up subprocessor by ID
    """
     subprocessor(
        """
        ID of the subprocessor
        """
        id: ID!
    ):  Subprocessor!
}

extend type Mutation{
    """
    Create a new subprocessor
    """
    createSubprocessor(
        """
        values of the subprocessor
        """
        input: CreateSubprocessorInput!
        logoFile: Upload
    ): SubprocessorCreatePayload!
    """
    Create multiple new subprocessors
    """
    createBulkSubprocessor(
        """
        values of the subprocessor
        """
        input: [CreateSubprocessorInput!]
    ): SubprocessorBulkCreatePayload!
    """
    Create multiple new subprocessors via file upload
    """
    createBulkCSVSubprocessor(
        """
        csv file containing values of the subprocessor
        """
        input: Upload!
    ): SubprocessorBulkCreatePayload!
    """
    Update an existing subprocessor
    """
    updateSubprocessor(
        """
        ID of the subprocessor
        """
        id: ID!
        """
        New values for the subprocessor
        """
        input: UpdateSubprocessorInput!
        logoFile: Upload
    ): SubprocessorUpdatePayload!
    """
    Delete an existing subprocessor
    """
    deleteSubprocessor(
        """
        ID of the subprocessor
        """
        id: ID!
    ): SubprocessorDeletePayload!
}

"""
Return response for createSubprocessor mutation
"""
type SubprocessorCreatePayload {
    """
    Created subprocessor
    """
    subprocessor: Subprocessor!
}

"""
Return response for updateSubprocessor mutation
"""
type SubprocessorUpdatePayload {
    """
    Updated subprocessor
    """
    subprocessor: Subprocessor!
}

"""
Return response for deleteSubprocessor mutation
"""
type SubprocessorDeletePayload {
    """
    Deleted subprocessor ID
    """
    deletedID: ID!
}

"""
Return response for createBulkSubprocessor mutation
"""
type SubprocessorBulkCreatePayload {
    """
    Created subprocessors
    """
    subprocessors: [Subprocessor!]
}`, BuiltIn: false},
	{Name: "../schema/subscriber.graphql", Input: `extend type Query {
    """
    Look up subscriber by Email
    """
     subscriber(
        """
        Email of the subscriber
        """
        email: String!
    ):  Subscriber!
}

extend type Mutation{
    """
    Create a new subscriber
    """
    createSubscriber(
        """
        values of the subscriber
        """
        input: CreateSubscriberInput!
    ): SubscriberCreatePayload!
    """
    Create new subscribers
    """
    createBulkSubscriber(
        """
        values of the subscriber
        """
        input: [CreateSubscriberInput!]
    ): SubscriberBulkCreatePayload!
        """
    Create new subscribers via CSV file
    """
    createBulkCSVSubscriber(
        """
        values of the subscriber
        """
        input: Upload!
    ): SubscriberBulkCreatePayload!
    """
    Update an existing subscriber
    """
    updateSubscriber(
        """
        Email of the subscriber
        """
        email: String!
        """
        New values for the subscriber
        """
        input: UpdateSubscriberInput!
    ): SubscriberUpdatePayload!
    """
    Delete an existing subscriber by Email
    """
    deleteSubscriber(
        """
        Email of the subscriber
        """
        email: String!
        """
        OwnerID of the subscriber
        """
        ownerID: ID
    ): SubscriberDeletePayload!
}

"""
Return response for createSubscriber mutation
"""
type SubscriberCreatePayload {
    """
    Created subscriber
    """
    subscriber: Subscriber!
}

"""
Return response for updateSubscriber mutation
"""
type SubscriberUpdatePayload {
    """
    Updated subscriber
    """
    subscriber: Subscriber!
}

"""
Return response for deleteSubscriber mutation
"""
type SubscriberDeletePayload {
    """
    Deleted subscriber email
    """
    email: String!
}

"""
Return response for createBulkSubscriber mutation
"""
type SubscriberBulkCreatePayload {
    """
    Created subscribers
    """
    subscribers: [Subscriber!]
}

`, BuiltIn: false},
	{Name: "../schema/task.graphql", Input: `extend type Query {
    """
    Look up task by ID
    """
     task(
        """
        ID of the task
        """
        id: ID!
    ):  Task!
}



extend type Mutation{
    """
    Create a new task
    """
    createTask(
        """
        values of the task
        """
        input: CreateTaskInput!
    ): TaskCreatePayload!
    """
    Create multiple new tasks
    """
    createBulkTask(
        """
        values of the task
        """
        input: [CreateTaskInput!]
    ): TaskBulkCreatePayload!
    """
    Create multiple new tasks via file upload
    """
    createBulkCSVTask(
        """
        csv file containing values of the task
        """
        input: Upload!
    ): TaskBulkCreatePayload!
    """
    Update multiple existing tasks
    """
    updateBulkTask(
        """
        IDs of the tasks to update
        """
        ids: [ID!]!
        """
        values to update the tasks with
        """
        input: UpdateTaskInput!
    ): TaskBulkUpdatePayload!
    """
    Update an existing task
    """
    updateTask(
        """
        ID of the task
        """
        id: ID!
        """
        New values for the task
        """
        input: UpdateTaskInput!
    ): TaskUpdatePayload!
    """
    Delete an existing task
    """
    deleteTask(
        """
        ID of the task
        """
        id: ID!
    ): TaskDeletePayload!
}

"""
Return response for createTask mutation
"""
type TaskCreatePayload {
    """
    Created task
    """
    task: Task!
}

"""
Return response for updateTask mutation
"""
type TaskUpdatePayload {
    """
    Updated task
    """
    task: Task!
}

"""
Return response for deleteTask mutation
"""
type TaskDeletePayload {
    """
    Deleted task ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTask mutation
"""
type TaskBulkCreatePayload {
    """
    Created tasks
    """
    tasks: [Task!]
}

"""
Return response for updateBulkTask mutation
"""
type TaskBulkUpdatePayload {
    """
    Updated tasks
    """
    tasks: [Task!]
    """
    IDs of the updated tasks
    """
    updatedIDs: [ID!]
}
`, BuiltIn: false},
	{Name: "../schema/template.graphql", Input: `extend type Query {
    """
    Look up template by ID
    """
     template(
        """
        ID of the template
        """
        id: ID!
    ):  Template!
}

extend type Mutation{
    """
    Create a new template
    """
    createTemplate(
        """
        values of the template
        """
        input: CreateTemplateInput!
    ): TemplateCreatePayload!
    """
    Create multiple new templates
    """
    createBulkTemplate(
        """
        values of the template
        """
        input: [CreateTemplateInput!]
    ): TemplateBulkCreatePayload!
    """
    Create multiple new templates via file upload
    """
    createBulkCSVTemplate(
        """
        csv file containing values of the template
        """
        input: Upload!
    ): TemplateBulkCreatePayload!
    """
    Update an existing template
    """
    updateTemplate(
        """
        ID of the template
        """
        id: ID!
        """
        New values for the template
        """
        input: UpdateTemplateInput!
    ): TemplateUpdatePayload!
    """
    Delete an existing template
    """
    deleteTemplate(
        """
        ID of the template
        """
        id: ID!
    ): TemplateDeletePayload!
}

"""
Return response for createTemplate mutation
"""
type TemplateCreatePayload {
    """
    Created template
    """
    template: Template!
}

"""
Return response for updateTemplate mutation
"""
type TemplateUpdatePayload {
    """
    Updated template
    """
    template: Template!
}

"""
Return response for deleteTemplate mutation
"""
type TemplateDeletePayload {
    """
    Deleted template ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTemplate mutation
"""
type TemplateBulkCreatePayload {
    """
    Created templates
    """
    templates: [Template!]
}`, BuiltIn: false},
	{Name: "../schema/tfaextended.graphql", Input: `extend type TFASettingUpdatePayload {
    tfaSecret: String
    qrCode: String
    recoveryCodes: [String!]
}

extend type TFASettingCreatePayload {
    tfaSecret: String
    qrCode: String
}
`, BuiltIn: false},
	{Name: "../schema/tfasetting.graphql", Input: `extend type Query {
    """
    Look up tfaSetting for the current user
    """
     tfaSetting(
        """
        ID of the tfaSetting
        """
        id: ID
    ):  TFASetting!
}

extend type Mutation{
    """
    Create a new tfaSetting
    """
    createTFASetting(
        """
        values of the tfaSetting
        """
        input: CreateTFASettingInput!
    ): TFASettingCreatePayload!
    """
    Update an existing tfaSetting
    """
    updateTFASetting(
        """
        New values for the tfaSetting
        """
        input: UpdateTFASettingInput!
    ): TFASettingUpdatePayload!
}

"""
Return response for createTFASetting mutation
"""
type TFASettingCreatePayload {
    """
    Created tfaSetting
    """
    tfaSetting: TFASetting!
}

"""
Return response for updateTFASetting mutation
"""
type TFASettingUpdatePayload {
    """
    Updated tfaSetting
    """
    tfaSetting: TFASetting!
}

extend input UpdateTFASettingInput {
    """
    Whether to regenerate backup codes
    """
    regenBackupCodes: Boolean
}`, BuiltIn: false},
	{Name: "../schema/trustcenter.graphql", Input: `extend type Query {
    """
    Look up trustCenter by ID
    """
     trustCenter(
        """
        ID of the trustCenter
        """
        id: ID!
    ):  TrustCenter!
}

extend type Mutation{
    """
    Create a new trustCenter
    """
    createTrustCenter(
        """
        values of the trustCenter
        """
        input: CreateTrustCenterInput!
    ): TrustCenterCreatePayload!
    """
    Update an existing trustCenter
    """
    updateTrustCenter(
        """
        ID of the trustCenter
        """
        id: ID!
        """
        New values for the trustCenter
        """
        input: UpdateTrustCenterInput!
    ): TrustCenterUpdatePayload!
    """
    Delete an existing trustCenter
    """
    deleteTrustCenter(
        """
        ID of the trustCenter
        """
        id: ID!
    ): TrustCenterDeletePayload!
}

"""
Return response for createTrustCenter mutation
"""
type TrustCenterCreatePayload {
    """
    Created trustCenter
    """
    trustCenter: TrustCenter!
}

"""
Return response for updateTrustCenter mutation
"""
type TrustCenterUpdatePayload {
    """
    Updated trustCenter
    """
    trustCenter: TrustCenter!
}

"""
Return response for deleteTrustCenter mutation
"""
type TrustCenterDeletePayload {
    """
    Deleted trustCenter ID
    """
    deletedID: ID!
}
`, BuiltIn: false},
	{Name: "../schema/trustcentercompliance.graphql", Input: `extend type Query {
    """
    Look up trustCenterCompliance by ID
    """
     trustCenterCompliance(
        """
        ID of the trustCenterCompliance
        """
        id: ID!
    ):  TrustCenterCompliance!
}

extend type Mutation{
    """
    Create a new trustCenterCompliance
    """
    createTrustCenterCompliance(
        """
        values of the trustCenterCompliance
        """
        input: CreateTrustCenterComplianceInput!
    ): TrustCenterComplianceCreatePayload!
    """
    Create multiple new trustCenterCompliances
    """
    createBulkTrustCenterCompliance(
        """
        values of the trustCenterCompliance
        """
        input: [CreateTrustCenterComplianceInput!]
    ): TrustCenterComplianceBulkCreatePayload!
    """
    Create multiple new trustCenterCompliances via file upload
    """
    createBulkCSVTrustCenterCompliance(
        """
        csv file containing values of the trustCenterCompliance
        """
        input: Upload!
    ): TrustCenterComplianceBulkCreatePayload!
    """
    Update an existing trustCenterCompliance
    """
    updateTrustCenterCompliance(
        """
        ID of the trustCenterCompliance
        """
        id: ID!
        """
        New values for the trustCenterCompliance
        """
        input: UpdateTrustCenterComplianceInput!
    ): TrustCenterComplianceUpdatePayload!
    """
    Delete an existing trustCenterCompliance
    """
    deleteTrustCenterCompliance(
        """
        ID of the trustCenterCompliance
        """
        id: ID!
    ): TrustCenterComplianceDeletePayload!
}

"""
Return response for createTrustCenterCompliance mutation
"""
type TrustCenterComplianceCreatePayload {
    """
    Created trustCenterCompliance
    """
    trustCenterCompliance: TrustCenterCompliance!
}

"""
Return response for updateTrustCenterCompliance mutation
"""
type TrustCenterComplianceUpdatePayload {
    """
    Updated trustCenterCompliance
    """
    trustCenterCompliance: TrustCenterCompliance!
}

"""
Return response for deleteTrustCenterCompliance mutation
"""
type TrustCenterComplianceDeletePayload {
    """
    Deleted trustCenterCompliance ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTrustCenterCompliance mutation
"""
type TrustCenterComplianceBulkCreatePayload {
    """
    Created trustCenterCompliances
    """
    trustCenterCompliances: [TrustCenterCompliance!]
}`, BuiltIn: false},
	{Name: "../schema/trustcenterdoc.graphql", Input: `extend type Query {
    """
    Look up trustCenterDoc by ID
    """
     trustCenterDoc(
        """
        ID of the trustCenterDoc
        """
        id: ID!
    ):  TrustCenterDoc!
}

extend type Mutation{
    """
    Create a new trustCenterDoc
    """
    createTrustCenterDoc(
        """
        values of the trustCenterDoc
        """
        input: CreateTrustCenterDocInput!
    ): TrustCenterDocCreatePayload!
    """
    Create multiple new trustCenterDocs
    """
    createBulkTrustCenterDoc(
        """
        values of the trustCenterDoc
        """
        input: [CreateTrustCenterDocInput!]
    ): TrustCenterDocBulkCreatePayload!
    """
    Create multiple new trustCenterDocs via file upload
    """
    createBulkCSVTrustCenterDoc(
        """
        csv file containing values of the trustCenterDoc
        """
        input: Upload!
    ): TrustCenterDocBulkCreatePayload!
    """
    Update an existing trustCenterDoc
    """
    updateTrustCenterDoc(
        """
        ID of the trustCenterDoc
        """
        id: ID!
        """
        New values for the trustCenterDoc
        """
        input: UpdateTrustCenterDocInput!
    ): TrustCenterDocUpdatePayload!
    """
    Delete an existing trustCenterDoc
    """
    deleteTrustCenterDoc(
        """
        ID of the trustCenterDoc
        """
        id: ID!
    ): TrustCenterDocDeletePayload!
}

"""
Return response for createTrustCenterDoc mutation
"""
type TrustCenterDocCreatePayload {
    """
    Created trustCenterDoc
    """
    trustCenterDoc: TrustCenterDoc!
}

"""
Return response for updateTrustCenterDoc mutation
"""
type TrustCenterDocUpdatePayload {
    """
    Updated trustCenterDoc
    """
    trustCenterDoc: TrustCenterDoc!
}

"""
Return response for deleteTrustCenterDoc mutation
"""
type TrustCenterDocDeletePayload {
    """
    Deleted trustCenterDoc ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTrustCenterDoc mutation
"""
type TrustCenterDocBulkCreatePayload {
    """
    Created trustCenterDocs
    """
    trustCenterDocs: [TrustCenterDoc!]
}`, BuiltIn: false},
	{Name: "../schema/trustcenterdomain.graphql", Input: `extend type Mutation{
    """
    Create a new trustCenterSetting
    """
    createTrustCenterDomain(
        """
        values of the trustCenterDomain
        """
        input: CreateTrustCenterDomainInput!
    ): TrustCenterDomainCreatePayload!
}

"""
Return response for createTrustCenterDomain mutation
"""
type TrustCenterDomainCreatePayload {
    customDomain: CustomDomain!
}

"""
Input for createTrustCenterDomain mutation
"""
input CreateTrustCenterDomainInput {
	"""
	the name of the custom domain
	"""
	cnameRecord: String!
    """
    trust center ID
    """
    trustCenterID: ID!
}`, BuiltIn: false},
	{Name: "../schema/trustcenterextended.graphql", Input: `extend input UpdateTrustCenterInput {
  updateTrustCenterSetting: UpdateTrustCenterSettingInput
}

extend input CreateTrustCenterInput {
  createTrustCenterSetting: CreateTrustCenterSettingInput
}
`, BuiltIn: false},
	{Name: "../schema/trustcentersetting.graphql", Input: `extend type Query {
    """
    Look up trustCenterSetting by ID
    """
     trustCenterSetting(
        """
        ID of the trustCenterSetting
        """
        id: ID!
    ):  TrustCenterSetting!
}

extend type Mutation{
    """
    Create a new trustCenterSetting
    """
    createTrustCenterSetting(
        """
        values of the trustCenterSetting
        """
        input: CreateTrustCenterSettingInput!
        logoFile: Upload
        faviconFile: Upload
    ): TrustCenterSettingCreatePayload!
    """
    Update an existing trustCenterSetting
    """
    updateTrustCenterSetting(
        """
        ID of the trustCenterSetting
        """
        id: ID!
        """
        New values for the trustCenterSetting
        """
        input: UpdateTrustCenterSettingInput!
        logoFile: Upload
        faviconFile: Upload
    ): TrustCenterSettingUpdatePayload!
    """
    Delete an existing trustCenterSetting
    """
    deleteTrustCenterSetting(
        """
        ID of the trustCenterSetting
        """
        id: ID!
    ): TrustCenterSettingDeletePayload!
}

"""
Return response for createTrustCenterSetting mutation
"""
type TrustCenterSettingCreatePayload {
    """
    Created trustCenterSetting
    """
    trustCenterSetting: TrustCenterSetting!
}

"""
Return response for updateTrustCenterSetting mutation
"""
type TrustCenterSettingUpdatePayload {
    """
    Updated trustCenterSetting
    """
    trustCenterSetting: TrustCenterSetting!
}

"""
Return response for deleteTrustCenterSetting mutation
"""
type TrustCenterSettingDeletePayload {
    """
    Deleted trustCenterSetting ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTrustCenterSetting mutation
"""
type TrustCenterSettingBulkCreatePayload {
    """
    Created trustCenterSettings
    """
    trustCenterSettings: [TrustCenterSetting!]
}`, BuiltIn: false},
	{Name: "../schema/trustcentersubprocessor.graphql", Input: `extend type Query {
    """
    Look up trustCenterSubprocessor by ID
    """
     trustCenterSubprocessor(
        """
        ID of the trustCenterSubprocessor
        """
        id: ID!
    ):  TrustCenterSubprocessor!
}

extend type Mutation{
    """
    Create a new trustCenterSubprocessor
    """
    createTrustCenterSubprocessor(
        """
        values of the trustCenterSubprocessor
        """
        input: CreateTrustCenterSubprocessorInput!
    ): TrustCenterSubprocessorCreatePayload!
    """
    Create multiple new trustCenterSubprocessors
    """
    createBulkTrustCenterSubprocessor(
        """
        values of the trustCenterSubprocessor
        """
        input: [CreateTrustCenterSubprocessorInput!]
    ): TrustCenterSubprocessorBulkCreatePayload!
    """
    Create multiple new trustCenterSubprocessors via file upload
    """
    createBulkCSVTrustCenterSubprocessor(
        """
        csv file containing values of the trustCenterSubprocessor
        """
        input: Upload!
    ): TrustCenterSubprocessorBulkCreatePayload!
    """
    Update an existing trustCenterSubprocessor
    """
    updateTrustCenterSubprocessor(
        """
        ID of the trustCenterSubprocessor
        """
        id: ID!
        """
        New values for the trustCenterSubprocessor
        """
        input: UpdateTrustCenterSubprocessorInput!
    ): TrustCenterSubprocessorUpdatePayload!
    """
    Delete an existing trustCenterSubprocessor
    """
    deleteTrustCenterSubprocessor(
        """
        ID of the trustCenterSubprocessor
        """
        id: ID!
    ): TrustCenterSubprocessorDeletePayload!
}

"""
Return response for createTrustCenterSubprocessor mutation
"""
type TrustCenterSubprocessorCreatePayload {
    """
    Created trustCenterSubprocessor
    """
    trustCenterSubprocessor: TrustCenterSubprocessor!
}

"""
Return response for updateTrustCenterSubprocessor mutation
"""
type TrustCenterSubprocessorUpdatePayload {
    """
    Updated trustCenterSubprocessor
    """
    trustCenterSubprocessor: TrustCenterSubprocessor!
}

"""
Return response for deleteTrustCenterSubprocessor mutation
"""
type TrustCenterSubprocessorDeletePayload {
    """
    Deleted trustCenterSubprocessor ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTrustCenterSubprocessor mutation
"""
type TrustCenterSubprocessorBulkCreatePayload {
    """
    Created trustCenterSubprocessors
    """
    trustCenterSubprocessors: [TrustCenterSubprocessor!]
}`, BuiltIn: false},
	{Name: "../schema/user.graphql", Input: `extend type Query {
    """
    Look up user by ID
    """
     user(
        """
        ID of the user
        """
        id: ID!
    ):  User!
}

extend type Query {
    """
    Look up user authorized user
    """
    self: User!
}

extend type Mutation{
    """
    Create a new user
    """
    createUser(
        """
        values of the user
        """
        input: CreateUserInput!
        avatarFile: Upload
    ): UserCreatePayload!
    """
    Update an existing user
    """
    updateUser(
        """
        ID of the user
        """
        id: ID!
        """
        New values for the user
        """
        input: UpdateUserInput!
        avatarFile: Upload
    ): UserUpdatePayload!
    """
    Delete an existing user
    """
    deleteUser(
        """
        ID of the user
        """
        id: ID!
    ): UserDeletePayload!
}

"""
Return response for createUser mutation
"""
type UserCreatePayload {
    """
    Created user
    """
    user: User!
}

"""
Return response for updateUser mutation
"""
type UserUpdatePayload {
    """
    Updated user
    """
    user: User!
}

"""
Return response for deleteUser mutation
"""
type UserDeletePayload {
    """
    Deleted user ID
    """
    deletedID: ID!
}

"""
Return response for createBulkUser mutation
"""
type UserBulkCreatePayload {
    """
    Created users
    """
    users: [User!]
}`, BuiltIn: false},
	{Name: "../schema/usersetting.graphql", Input: `extend type Query {
    """
    Look up userSetting by ID
    """
     userSetting(
        """
        ID of the userSetting
        """
        id: ID!
    ):  UserSetting!
}

extend type Mutation{
    """
    Create a new userSetting
    """
    createUserSetting(
        """
        values of the userSetting
        """
        input: CreateUserSettingInput!
    ): UserSettingCreatePayload!
    """
    Create multiple new userSettings
    """
    createBulkUserSetting(
        """
        values of the userSetting
        """
        input: [CreateUserSettingInput!]
    ): UserSettingBulkCreatePayload!
    """
    Create multiple new userSettings via file upload
    """
    createBulkCSVUserSetting(
        """
        csv file containing values of the userSetting
        """
        input: Upload!
    ): UserSettingBulkCreatePayload!
    """
    Update an existing userSetting
    """
    updateUserSetting(
        """
        ID of the userSetting
        """
        id: ID!
        """
        New values for the userSetting
        """
        input: UpdateUserSettingInput!
    ): UserSettingUpdatePayload!
}

"""
Return response for createUserSetting mutation
"""
type UserSettingCreatePayload {
    """
    Created userSetting
    """
    userSetting: UserSetting!
}

"""
Return response for updateUserSetting mutation
"""
type UserSettingUpdatePayload {
    """
    Updated userSetting
    """
    userSetting: UserSetting!
}

"""
Return response for createBulkUserSetting mutation
"""
type UserSettingBulkCreatePayload {
    """
    Created userSettings
    """
    userSettings: [UserSetting!]
}`, BuiltIn: false},
	{Name: "../schema/webauthn.graphql", Input: `extend type Mutation{
    """
    Delete an existing webauthn
    """
    deleteWebauthn(
        """
        ID of the webauthn
        """
        id: ID!
    ): WebauthnDeletePayload!
}

"""
Return response for deleteWebauthn mutation
"""
type WebauthnDeletePayload {
    """
    Deleted webauthn ID
    """
    deletedID: ID!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
