// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	CreateEntityInput() CreateEntityInputResolver
	CreateGroupInput() CreateGroupInputResolver
	CreateOrganizationInput() CreateOrganizationInputResolver
	UpdateEntityInput() UpdateEntityInputResolver
	UpdateGroupInput() UpdateGroupInputResolver
	UpdateOrganizationInput() UpdateOrganizationInputResolver
	UpdateProgramInput() UpdateProgramInputResolver
	UpdateTFASettingInput() UpdateTFASettingInputResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	APIToken struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		LastUsedAt  func(childComplexity int) int
		Name        func(childComplexity int) int
		Owner       func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Scopes      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Token       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	APITokenBulkCreatePayload struct {
		APITokens func(childComplexity int) int
	}

	APITokenConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	APITokenCreatePayload struct {
		APIToken func(childComplexity int) int
	}

	APITokenDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	APITokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	APITokenSearchResult struct {
		APITokens func(childComplexity int) int
	}

	APITokenUpdatePayload struct {
		APIToken func(childComplexity int) int
	}

	ActionPlan struct {
		Control     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		Details     func(childComplexity int) int
		DueDate     func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Priority    func(childComplexity int) int
		Program     func(childComplexity int) int
		Risk        func(childComplexity int) int
		Source      func(childComplexity int) int
		Standard    func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		User        func(childComplexity int) int
	}

	ActionPlanBulkCreatePayload struct {
		ActionPlans func(childComplexity int) int
	}

	ActionPlanConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ActionPlanCreatePayload struct {
		ActionPlan func(childComplexity int) int
	}

	ActionPlanDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ActionPlanEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ActionPlanHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		Details     func(childComplexity int) int
		DueDate     func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		Priority    func(childComplexity int) int
		Ref         func(childComplexity int) int
		Source      func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	ActionPlanHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ActionPlanHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ActionPlanSearchResult struct {
		ActionPlans func(childComplexity int) int
	}

	ActionPlanUpdatePayload struct {
		ActionPlan func(childComplexity int) int
	}

	AuditLog struct {
		Changes   func(childComplexity int) int
		ID        func(childComplexity int) int
		Operation func(childComplexity int) int
		Table     func(childComplexity int) int
		Time      func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	AuditLogConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AuditLogEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Contact struct {
		Address     func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Email       func(childComplexity int) int
		Entities    func(childComplexity int) int
		Files       func(childComplexity int) int
		FullName    func(childComplexity int) int
		ID          func(childComplexity int) int
		Owner       func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	ContactBulkCreatePayload struct {
		Contacts func(childComplexity int) int
	}

	ContactConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ContactCreatePayload struct {
		Contact func(childComplexity int) int
	}

	ContactDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ContactEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ContactHistory struct {
		Address     func(childComplexity int) int
		Company     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Email       func(childComplexity int) int
		FullName    func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		Ref         func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	ContactHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ContactHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ContactSearchResult struct {
		Contacts func(childComplexity int) int
	}

	ContactUpdatePayload struct {
		Contact func(childComplexity int) int
	}

	Control struct {
		ActionPlans       func(childComplexity int) int
		BlockedGroups     func(childComplexity int) int
		Class             func(childComplexity int) int
		ControlNumber     func(childComplexity int) int
		ControlObjectives func(childComplexity int) int
		ControlType       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		Details           func(childComplexity int) int
		Editors           func(childComplexity int) int
		Family            func(childComplexity int) int
		ID                func(childComplexity int) int
		MappedFrameworks  func(childComplexity int) int
		Name              func(childComplexity int) int
		Narratives        func(childComplexity int) int
		Owner             func(childComplexity int) int
		OwnerID           func(childComplexity int) int
		Procedures        func(childComplexity int) int
		Programs          func(childComplexity int) int
		Risks             func(childComplexity int) int
		Satisfies         func(childComplexity int) int
		Source            func(childComplexity int) int
		Standard          func(childComplexity int) int
		Status            func(childComplexity int) int
		Subcontrols       func(childComplexity int) int
		Tags              func(childComplexity int) int
		Tasks             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		Version           func(childComplexity int) int
		Viewers           func(childComplexity int) int
	}

	ControlBulkCreatePayload struct {
		Controls func(childComplexity int) int
	}

	ControlConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlCreatePayload struct {
		Control func(childComplexity int) int
	}

	ControlDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ControlEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlHistory struct {
		Class            func(childComplexity int) int
		ControlNumber    func(childComplexity int) int
		ControlType      func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		Description      func(childComplexity int) int
		Details          func(childComplexity int) int
		Family           func(childComplexity int) int
		HistoryTime      func(childComplexity int) int
		ID               func(childComplexity int) int
		MappedFrameworks func(childComplexity int) int
		Name             func(childComplexity int) int
		Operation        func(childComplexity int) int
		OwnerID          func(childComplexity int) int
		Ref              func(childComplexity int) int
		Satisfies        func(childComplexity int) int
		Source           func(childComplexity int) int
		Status           func(childComplexity int) int
		Tags             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Version          func(childComplexity int) int
	}

	ControlHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlObjective struct {
		BlockedGroups        func(childComplexity int) int
		Class                func(childComplexity int) int
		ControlNumber        func(childComplexity int) int
		ControlObjectiveType func(childComplexity int) int
		Controls             func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		Description          func(childComplexity int) int
		Details              func(childComplexity int) int
		Editors              func(childComplexity int) int
		Family               func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalPolicies     func(childComplexity int) int
		MappedFrameworks     func(childComplexity int) int
		Name                 func(childComplexity int) int
		Narratives           func(childComplexity int) int
		Owner                func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Procedures           func(childComplexity int) int
		Programs             func(childComplexity int) int
		Risks                func(childComplexity int) int
		Source               func(childComplexity int) int
		Standard             func(childComplexity int) int
		Status               func(childComplexity int) int
		Subcontrols          func(childComplexity int) int
		Tags                 func(childComplexity int) int
		Tasks                func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Version              func(childComplexity int) int
		Viewers              func(childComplexity int) int
	}

	ControlObjectiveBulkCreatePayload struct {
		ControlObjectives func(childComplexity int) int
	}

	ControlObjectiveConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlObjectiveCreatePayload struct {
		ControlObjective func(childComplexity int) int
	}

	ControlObjectiveDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ControlObjectiveEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlObjectiveHistory struct {
		Class                func(childComplexity int) int
		ControlNumber        func(childComplexity int) int
		ControlObjectiveType func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		Description          func(childComplexity int) int
		Details              func(childComplexity int) int
		Family               func(childComplexity int) int
		HistoryTime          func(childComplexity int) int
		ID                   func(childComplexity int) int
		MappedFrameworks     func(childComplexity int) int
		Name                 func(childComplexity int) int
		Operation            func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Ref                  func(childComplexity int) int
		Source               func(childComplexity int) int
		Status               func(childComplexity int) int
		Tags                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Version              func(childComplexity int) int
	}

	ControlObjectiveHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ControlObjectiveHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ControlObjectiveSearchResult struct {
		ControlObjectives func(childComplexity int) int
	}

	ControlObjectiveUpdatePayload struct {
		ControlObjective func(childComplexity int) int
	}

	ControlSearchResult struct {
		Controls func(childComplexity int) int
	}

	ControlUpdatePayload struct {
		Control func(childComplexity int) int
	}

	DocumentData struct {
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		Data       func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		DeletedBy  func(childComplexity int) int
		Entity     func(childComplexity int) int
		Files      func(childComplexity int) int
		ID         func(childComplexity int) int
		Owner      func(childComplexity int) int
		OwnerID    func(childComplexity int) int
		Tags       func(childComplexity int) int
		Template   func(childComplexity int) int
		TemplateID func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
	}

	DocumentDataBulkCreatePayload struct {
		DocumentData func(childComplexity int) int
	}

	DocumentDataConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DocumentDataCreatePayload struct {
		DocumentData func(childComplexity int) int
	}

	DocumentDataDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	DocumentDataEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DocumentDataHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Data        func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		TemplateID  func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	DocumentDataHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DocumentDataHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DocumentDataSearchResult struct {
		DocumentData func(childComplexity int) int
	}

	DocumentDataUpdatePayload struct {
		DocumentData func(childComplexity int) int
	}

	Entity struct {
		Contacts     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		DisplayName  func(childComplexity int) int
		Documents    func(childComplexity int) int
		Domains      func(childComplexity int) int
		EntityType   func(childComplexity int) int
		EntityTypeID func(childComplexity int) int
		Files        func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Notes        func(childComplexity int) int
		Owner        func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Status       func(childComplexity int) int
		Tags         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	EntityBulkCreatePayload struct {
		Entities func(childComplexity int) int
	}

	EntityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityCreatePayload struct {
		Entity func(childComplexity int) int
	}

	EntityDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	EntityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntityHistory struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		DisplayName  func(childComplexity int) int
		Domains      func(childComplexity int) int
		EntityTypeID func(childComplexity int) int
		HistoryTime  func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Operation    func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Ref          func(childComplexity int) int
		Status       func(childComplexity int) int
		Tags         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	EntityHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntitySearchResult struct {
		Entities func(childComplexity int) int
	}

	EntityType struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		DeletedBy func(childComplexity int) int
		Entities  func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Owner     func(childComplexity int) int
		OwnerID   func(childComplexity int) int
		Tags      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	EntityTypeBulkCreatePayload struct {
		EntityTypes func(childComplexity int) int
	}

	EntityTypeConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityTypeCreatePayload struct {
		EntityType func(childComplexity int) int
	}

	EntityTypeDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	EntityTypeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntityTypeHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	EntityTypeHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EntityTypeHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EntityTypeSearchResult struct {
		EntityTypes func(childComplexity int) int
	}

	EntityTypeUpdatePayload struct {
		EntityType func(childComplexity int) int
	}

	EntityUpdatePayload struct {
		Entity func(childComplexity int) int
	}

	Event struct {
		CorrelationID       func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		EventID             func(childComplexity int) int
		EventType           func(childComplexity int) int
		File                func(childComplexity int) int
		Group               func(childComplexity int) int
		Groupmembership     func(childComplexity int) int
		Hush                func(childComplexity int) int
		ID                  func(childComplexity int) int
		Integration         func(childComplexity int) int
		Invite              func(childComplexity int) int
		Metadata            func(childComplexity int) int
		Organization        func(childComplexity int) int
		Orgmembership       func(childComplexity int) int
		PersonalAccessToken func(childComplexity int) int
		Subscriber          func(childComplexity int) int
		Tags                func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		User                func(childComplexity int) int
	}

	EventBulkCreatePayload struct {
		Events func(childComplexity int) int
	}

	EventConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EventCreatePayload struct {
		Event func(childComplexity int) int
	}

	EventDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	EventEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EventHistory struct {
		CorrelationID func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		EventID       func(childComplexity int) int
		EventType     func(childComplexity int) int
		HistoryTime   func(childComplexity int) int
		ID            func(childComplexity int) int
		Metadata      func(childComplexity int) int
		Operation     func(childComplexity int) int
		Ref           func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	EventHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EventHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EventSearchResult struct {
		Events func(childComplexity int) int
	}

	EventUpdatePayload struct {
		Event func(childComplexity int) int
	}

	File struct {
		CategoryType          func(childComplexity int) int
		Contact               func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DetectedContentType   func(childComplexity int) int
		DetectedMimeType      func(childComplexity int) int
		DocumentData          func(childComplexity int) int
		Entity                func(childComplexity int) int
		Events                func(childComplexity int) int
		Group                 func(childComplexity int) int
		ID                    func(childComplexity int) int
		Md5Hash               func(childComplexity int) int
		Organization          func(childComplexity int) int
		OrganizationSetting   func(childComplexity int) int
		PersistedFileSize     func(childComplexity int) int
		PresignedURL          func(childComplexity int) int
		Program               func(childComplexity int) int
		ProvidedFileExtension func(childComplexity int) int
		ProvidedFileName      func(childComplexity int) int
		ProvidedFileSize      func(childComplexity int) int
		StoragePath           func(childComplexity int) int
		StorageScheme         func(childComplexity int) int
		StorageVolume         func(childComplexity int) int
		StoreKey              func(childComplexity int) int
		Tags                  func(childComplexity int) int
		Template              func(childComplexity int) int
		URI                   func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		User                  func(childComplexity int) int
		UserSetting           func(childComplexity int) int
	}

	FileConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	FileEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FileHistory struct {
		CategoryType          func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DetectedContentType   func(childComplexity int) int
		DetectedMimeType      func(childComplexity int) int
		HistoryTime           func(childComplexity int) int
		ID                    func(childComplexity int) int
		Md5Hash               func(childComplexity int) int
		Operation             func(childComplexity int) int
		PersistedFileSize     func(childComplexity int) int
		ProvidedFileExtension func(childComplexity int) int
		ProvidedFileName      func(childComplexity int) int
		ProvidedFileSize      func(childComplexity int) int
		Ref                   func(childComplexity int) int
		StoragePath           func(childComplexity int) int
		StorageScheme         func(childComplexity int) int
		StorageVolume         func(childComplexity int) int
		StoreKey              func(childComplexity int) int
		Tags                  func(childComplexity int) int
		URI                   func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
	}

	FileHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FileSearchResult struct {
		Files func(childComplexity int) int
	}

	Group struct {
		ControlBlockedGroups          func(childComplexity int) int
		ControlCreators               func(childComplexity int) int
		ControlEditors                func(childComplexity int) int
		ControlObjectiveBlockedGroups func(childComplexity int) int
		ControlObjectiveCreators      func(childComplexity int) int
		ControlObjectiveEditors       func(childComplexity int) int
		ControlObjectiveViewers       func(childComplexity int) int
		ControlViewers                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		Description                   func(childComplexity int) int
		DisplayName                   func(childComplexity int) int
		Events                        func(childComplexity int) int
		Files                         func(childComplexity int) int
		GravatarLogoURL               func(childComplexity int) int
		GroupCreators                 func(childComplexity int) int
		ID                            func(childComplexity int) int
		Integrations                  func(childComplexity int) int
		InternalPolicyBlockedGroups   func(childComplexity int) int
		InternalPolicyCreators        func(childComplexity int) int
		InternalPolicyEditors         func(childComplexity int) int
		LogoURL                       func(childComplexity int) int
		Members                       func(childComplexity int) int
		Name                          func(childComplexity int) int
		NarrativeBlockedGroups        func(childComplexity int) int
		NarrativeCreators             func(childComplexity int) int
		NarrativeEditors              func(childComplexity int) int
		NarrativeViewers              func(childComplexity int) int
		Owner                         func(childComplexity int) int
		OwnerID                       func(childComplexity int) int
		ProcedureBlockedGroups        func(childComplexity int) int
		ProcedureCreators             func(childComplexity int) int
		ProcedureEditors              func(childComplexity int) int
		ProgramBlockedGroups          func(childComplexity int) int
		ProgramCreators               func(childComplexity int) int
		ProgramEditors                func(childComplexity int) int
		ProgramViewers                func(childComplexity int) int
		RiskBlockedGroups             func(childComplexity int) int
		RiskCreators                  func(childComplexity int) int
		RiskEditors                   func(childComplexity int) int
		RiskViewers                   func(childComplexity int) int
		Setting                       func(childComplexity int) int
		Tags                          func(childComplexity int) int
		Tasks                         func(childComplexity int) int
		TemplateCreators              func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		Users                         func(childComplexity int) int
	}

	GroupBulkCreatePayload struct {
		Groups func(childComplexity int) int
	}

	GroupConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupCreatePayload struct {
		Group func(childComplexity int) int
	}

	GroupDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	GroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupHistory struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		DisplayName     func(childComplexity int) int
		GravatarLogoURL func(childComplexity int) int
		HistoryTime     func(childComplexity int) int
		ID              func(childComplexity int) int
		LogoURL         func(childComplexity int) int
		Name            func(childComplexity int) int
		Operation       func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		Ref             func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
	}

	GroupHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupMembership struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		DeletedBy func(childComplexity int) int
		Events    func(childComplexity int) int
		Group     func(childComplexity int) int
		GroupID   func(childComplexity int) int
		ID        func(childComplexity int) int
		Role      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	GroupMembershipBulkCreatePayload struct {
		GroupMemberships func(childComplexity int) int
	}

	GroupMembershipConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupMembershipCreatePayload struct {
		GroupMembership func(childComplexity int) int
	}

	GroupMembershipDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	GroupMembershipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupMembershipHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		GroupID     func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		Ref         func(childComplexity int) int
		Role        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	GroupMembershipHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupMembershipHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupMembershipUpdatePayload struct {
		GroupMembership func(childComplexity int) int
	}

	GroupSearchResult struct {
		Groups func(childComplexity int) int
	}

	GroupSetting struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		Group        func(childComplexity int) int
		GroupID      func(childComplexity int) int
		ID           func(childComplexity int) int
		JoinPolicy   func(childComplexity int) int
		SyncToGithub func(childComplexity int) int
		SyncToSlack  func(childComplexity int) int
		Tags         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Visibility   func(childComplexity int) int
	}

	GroupSettingBulkCreatePayload struct {
		GroupSettings func(childComplexity int) int
	}

	GroupSettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupSettingCreatePayload struct {
		GroupSetting func(childComplexity int) int
	}

	GroupSettingDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	GroupSettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupSettingHistory struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		GroupID      func(childComplexity int) int
		HistoryTime  func(childComplexity int) int
		ID           func(childComplexity int) int
		JoinPolicy   func(childComplexity int) int
		Operation    func(childComplexity int) int
		Ref          func(childComplexity int) int
		SyncToGithub func(childComplexity int) int
		SyncToSlack  func(childComplexity int) int
		Tags         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Visibility   func(childComplexity int) int
	}

	GroupSettingHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GroupSettingHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GroupSettingSearchResult struct {
		GroupSettings func(childComplexity int) int
	}

	GroupSettingUpdatePayload struct {
		GroupSetting func(childComplexity int) int
	}

	GroupUpdatePayload struct {
		Group func(childComplexity int) int
	}

	Hush struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		Events       func(childComplexity int) int
		ID           func(childComplexity int) int
		Integrations func(childComplexity int) int
		Kind         func(childComplexity int) int
		Name         func(childComplexity int) int
		Organization func(childComplexity int) int
		SecretName   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	HushBulkCreatePayload struct {
		Hushes func(childComplexity int) int
	}

	HushConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HushCreatePayload struct {
		Hush func(childComplexity int) int
	}

	HushDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	HushEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HushHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Kind        func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		Ref         func(childComplexity int) int
		SecretName  func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	HushHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HushHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HushUpdatePayload struct {
		Hush func(childComplexity int) int
	}

	Integration struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		Events      func(childComplexity int) int
		ID          func(childComplexity int) int
		Kind        func(childComplexity int) int
		Name        func(childComplexity int) int
		Owner       func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Secrets     func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	IntegrationBulkCreatePayload struct {
		Integrations func(childComplexity int) int
	}

	IntegrationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	IntegrationCreatePayload struct {
		Integration func(childComplexity int) int
	}

	IntegrationDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	IntegrationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	IntegrationHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Kind        func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	IntegrationHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	IntegrationHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	IntegrationSearchResult struct {
		Integrations func(childComplexity int) int
	}

	IntegrationUpdatePayload struct {
		Integration func(childComplexity int) int
	}

	InternalPolicy struct {
		Background        func(childComplexity int) int
		BlockedGroups     func(childComplexity int) int
		ControlObjectives func(childComplexity int) int
		Controls          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		Details           func(childComplexity int) int
		Editors           func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		Narratives        func(childComplexity int) int
		Owner             func(childComplexity int) int
		OwnerID           func(childComplexity int) int
		PolicyType        func(childComplexity int) int
		Procedures        func(childComplexity int) int
		Programs          func(childComplexity int) int
		PurposeAndScope   func(childComplexity int) int
		Status            func(childComplexity int) int
		Tags              func(childComplexity int) int
		Tasks             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		Version           func(childComplexity int) int
	}

	InternalPolicyBulkCreatePayload struct {
		InternalPolicies func(childComplexity int) int
	}

	InternalPolicyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InternalPolicyCreatePayload struct {
		InternalPolicy func(childComplexity int) int
	}

	InternalPolicyDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	InternalPolicyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InternalPolicyHistory struct {
		Background      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		Details         func(childComplexity int) int
		HistoryTime     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Operation       func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		PolicyType      func(childComplexity int) int
		PurposeAndScope func(childComplexity int) int
		Ref             func(childComplexity int) int
		Status          func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		Version         func(childComplexity int) int
	}

	InternalPolicyHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InternalPolicyHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InternalPolicySearchResult struct {
		InternalPolicies func(childComplexity int) int
	}

	InternalPolicyUpdatePayload struct {
		InternalPolicy func(childComplexity int) int
	}

	Invite struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		Events       func(childComplexity int) int
		Expires      func(childComplexity int) int
		ID           func(childComplexity int) int
		Owner        func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Recipient    func(childComplexity int) int
		RequestorID  func(childComplexity int) int
		Role         func(childComplexity int) int
		SendAttempts func(childComplexity int) int
		Status       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	InviteBulkCreatePayload struct {
		Invites func(childComplexity int) int
	}

	InviteConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InviteCreatePayload struct {
		Invite func(childComplexity int) int
	}

	InviteDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	InviteEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InviteUpdatePayload struct {
		Invite func(childComplexity int) int
	}

	Mutation struct {
		CreateAPIToken                   func(childComplexity int, input generated.CreateAPITokenInput) int
		CreateActionPlan                 func(childComplexity int, input generated.CreateActionPlanInput) int
		CreateBulkAPIToken               func(childComplexity int, input []*generated.CreateAPITokenInput) int
		CreateBulkActionPlan             func(childComplexity int, input []*generated.CreateActionPlanInput) int
		CreateBulkCSVAPIToken            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVActionPlan          func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVContact             func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVControl             func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVControlObjective    func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVDocumentData        func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVEntity              func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVEntityType          func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVEvent               func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVGroup               func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVGroupMembership     func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVGroupSetting        func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVHush                func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVIntegration         func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVInternalPolicy      func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVInvite              func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVNarrative           func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVOrgMembership       func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVOrganization        func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVOrganizationSetting func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVPersonalAccessToken func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVProcedure           func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVProgram             func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVProgramMembership   func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVRisk                func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVStandard            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVSubcontrol          func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVSubscriber          func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVTask                func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVTemplate            func(childComplexity int, input graphql.Upload) int
		CreateBulkCSVUserSetting         func(childComplexity int, input graphql.Upload) int
		CreateBulkContact                func(childComplexity int, input []*generated.CreateContactInput) int
		CreateBulkControl                func(childComplexity int, input []*generated.CreateControlInput) int
		CreateBulkControlObjective       func(childComplexity int, input []*generated.CreateControlObjectiveInput) int
		CreateBulkDocumentData           func(childComplexity int, input []*generated.CreateDocumentDataInput) int
		CreateBulkEntity                 func(childComplexity int, input []*generated.CreateEntityInput) int
		CreateBulkEntityType             func(childComplexity int, input []*generated.CreateEntityTypeInput) int
		CreateBulkEvent                  func(childComplexity int, input []*generated.CreateEventInput) int
		CreateBulkGroup                  func(childComplexity int, input []*generated.CreateGroupInput) int
		CreateBulkGroupMembership        func(childComplexity int, input []*generated.CreateGroupMembershipInput) int
		CreateBulkGroupSetting           func(childComplexity int, input []*generated.CreateGroupSettingInput) int
		CreateBulkHush                   func(childComplexity int, input []*generated.CreateHushInput) int
		CreateBulkIntegration            func(childComplexity int, input []*generated.CreateIntegrationInput) int
		CreateBulkInternalPolicy         func(childComplexity int, input []*generated.CreateInternalPolicyInput) int
		CreateBulkInvite                 func(childComplexity int, input []*generated.CreateInviteInput) int
		CreateBulkNarrative              func(childComplexity int, input []*generated.CreateNarrativeInput) int
		CreateBulkOrgMembership          func(childComplexity int, input []*generated.CreateOrgMembershipInput) int
		CreateBulkOrganization           func(childComplexity int, input []*generated.CreateOrganizationInput) int
		CreateBulkOrganizationSetting    func(childComplexity int, input []*generated.CreateOrganizationSettingInput) int
		CreateBulkPersonalAccessToken    func(childComplexity int, input []*generated.CreatePersonalAccessTokenInput) int
		CreateBulkProcedure              func(childComplexity int, input []*generated.CreateProcedureInput) int
		CreateBulkProgram                func(childComplexity int, input []*generated.CreateProgramInput) int
		CreateBulkProgramMembership      func(childComplexity int, input []*generated.CreateProgramMembershipInput) int
		CreateBulkRisk                   func(childComplexity int, input []*generated.CreateRiskInput) int
		CreateBulkStandard               func(childComplexity int, input []*generated.CreateStandardInput) int
		CreateBulkSubcontrol             func(childComplexity int, input []*generated.CreateSubcontrolInput) int
		CreateBulkSubscriber             func(childComplexity int, input []*generated.CreateSubscriberInput) int
		CreateBulkTask                   func(childComplexity int, input []*generated.CreateTaskInput) int
		CreateBulkTemplate               func(childComplexity int, input []*generated.CreateTemplateInput) int
		CreateBulkUserSetting            func(childComplexity int, input []*generated.CreateUserSettingInput) int
		CreateContact                    func(childComplexity int, input generated.CreateContactInput) int
		CreateControl                    func(childComplexity int, input generated.CreateControlInput) int
		CreateControlObjective           func(childComplexity int, input generated.CreateControlObjectiveInput) int
		CreateControlWithSubcontrols     func(childComplexity int, input model.CreateControlWithSubcontrolsInput) int
		CreateDocumentData               func(childComplexity int, input generated.CreateDocumentDataInput) int
		CreateEntity                     func(childComplexity int, input generated.CreateEntityInput) int
		CreateEntityType                 func(childComplexity int, input generated.CreateEntityTypeInput) int
		CreateEvent                      func(childComplexity int, input generated.CreateEventInput) int
		CreateFullProgram                func(childComplexity int, input model.CreateFullProgramInput) int
		CreateGroup                      func(childComplexity int, input generated.CreateGroupInput) int
		CreateGroupMembership            func(childComplexity int, input generated.CreateGroupMembershipInput) int
		CreateGroupSetting               func(childComplexity int, input generated.CreateGroupSettingInput) int
		CreateHush                       func(childComplexity int, input generated.CreateHushInput) int
		CreateIntegration                func(childComplexity int, input generated.CreateIntegrationInput) int
		CreateInternalPolicy             func(childComplexity int, input generated.CreateInternalPolicyInput) int
		CreateInvite                     func(childComplexity int, input generated.CreateInviteInput) int
		CreateNarrative                  func(childComplexity int, input generated.CreateNarrativeInput) int
		CreateOrgMembership              func(childComplexity int, input generated.CreateOrgMembershipInput) int
		CreateOrganization               func(childComplexity int, input generated.CreateOrganizationInput, avatarFile *graphql.Upload) int
		CreateOrganizationSetting        func(childComplexity int, input generated.CreateOrganizationSettingInput) int
		CreatePersonalAccessToken        func(childComplexity int, input generated.CreatePersonalAccessTokenInput) int
		CreateProcedure                  func(childComplexity int, input generated.CreateProcedureInput) int
		CreateProgram                    func(childComplexity int, input generated.CreateProgramInput) int
		CreateProgramMembership          func(childComplexity int, input generated.CreateProgramMembershipInput) int
		CreateProgramWithMembers         func(childComplexity int, input model.CreateProgramWithMembersInput) int
		CreateRisk                       func(childComplexity int, input generated.CreateRiskInput) int
		CreateStandard                   func(childComplexity int, input generated.CreateStandardInput) int
		CreateSubcontrol                 func(childComplexity int, input generated.CreateSubcontrolInput) int
		CreateSubscriber                 func(childComplexity int, input generated.CreateSubscriberInput) int
		CreateTFASetting                 func(childComplexity int, input generated.CreateTFASettingInput) int
		CreateTask                       func(childComplexity int, input generated.CreateTaskInput) int
		CreateTemplate                   func(childComplexity int, input generated.CreateTemplateInput) int
		CreateUser                       func(childComplexity int, input generated.CreateUserInput, avatarFile *graphql.Upload) int
		CreateUserSetting                func(childComplexity int, input generated.CreateUserSettingInput) int
		DeleteAPIToken                   func(childComplexity int, id string) int
		DeleteActionPlan                 func(childComplexity int, id string) int
		DeleteContact                    func(childComplexity int, id string) int
		DeleteControl                    func(childComplexity int, id string) int
		DeleteControlObjective           func(childComplexity int, id string) int
		DeleteDocumentData               func(childComplexity int, id string) int
		DeleteEntity                     func(childComplexity int, id string) int
		DeleteEntityType                 func(childComplexity int, id string) int
		DeleteEvent                      func(childComplexity int, id string) int
		DeleteFile                       func(childComplexity int, id string) int
		DeleteGroup                      func(childComplexity int, id string) int
		DeleteGroupMembership            func(childComplexity int, id string) int
		DeleteGroupSetting               func(childComplexity int, id string) int
		DeleteHush                       func(childComplexity int, id string) int
		DeleteIntegration                func(childComplexity int, id string) int
		DeleteInternalPolicy             func(childComplexity int, id string) int
		DeleteInvite                     func(childComplexity int, id string) int
		DeleteNarrative                  func(childComplexity int, id string) int
		DeleteOrgMembership              func(childComplexity int, id string) int
		DeleteOrganization               func(childComplexity int, id string) int
		DeleteOrganizationSetting        func(childComplexity int, id string) int
		DeletePersonalAccessToken        func(childComplexity int, id string) int
		DeleteProcedure                  func(childComplexity int, id string) int
		DeleteProgram                    func(childComplexity int, id string) int
		DeleteProgramMembership          func(childComplexity int, id string) int
		DeleteRisk                       func(childComplexity int, id string) int
		DeleteStandard                   func(childComplexity int, id string) int
		DeleteSubcontrol                 func(childComplexity int, id string) int
		DeleteSubscriber                 func(childComplexity int, email string, ownerID *string) int
		DeleteTask                       func(childComplexity int, id string) int
		DeleteTemplate                   func(childComplexity int, id string) int
		DeleteUser                       func(childComplexity int, id string) int
		UpdateAPIToken                   func(childComplexity int, id string, input generated.UpdateAPITokenInput) int
		UpdateActionPlan                 func(childComplexity int, id string, input generated.UpdateActionPlanInput) int
		UpdateContact                    func(childComplexity int, id string, input generated.UpdateContactInput) int
		UpdateControl                    func(childComplexity int, id string, input generated.UpdateControlInput) int
		UpdateControlObjective           func(childComplexity int, id string, input generated.UpdateControlObjectiveInput) int
		UpdateDocumentData               func(childComplexity int, id string, input generated.UpdateDocumentDataInput) int
		UpdateEntity                     func(childComplexity int, id string, input generated.UpdateEntityInput) int
		UpdateEntityType                 func(childComplexity int, id string, input generated.UpdateEntityTypeInput) int
		UpdateEvent                      func(childComplexity int, id string, input generated.UpdateEventInput) int
		UpdateGroup                      func(childComplexity int, id string, input generated.UpdateGroupInput) int
		UpdateGroupMembership            func(childComplexity int, id string, input generated.UpdateGroupMembershipInput) int
		UpdateGroupSetting               func(childComplexity int, id string, input generated.UpdateGroupSettingInput) int
		UpdateHush                       func(childComplexity int, id string, input generated.UpdateHushInput) int
		UpdateIntegration                func(childComplexity int, id string, input generated.UpdateIntegrationInput) int
		UpdateInternalPolicy             func(childComplexity int, id string, input generated.UpdateInternalPolicyInput) int
		UpdateInvite                     func(childComplexity int, id string, input generated.UpdateInviteInput) int
		UpdateNarrative                  func(childComplexity int, id string, input generated.UpdateNarrativeInput) int
		UpdateOrgMembership              func(childComplexity int, id string, input generated.UpdateOrgMembershipInput) int
		UpdateOrganization               func(childComplexity int, id string, input generated.UpdateOrganizationInput, avatarFile *graphql.Upload) int
		UpdateOrganizationSetting        func(childComplexity int, id string, input generated.UpdateOrganizationSettingInput) int
		UpdatePersonalAccessToken        func(childComplexity int, id string, input generated.UpdatePersonalAccessTokenInput) int
		UpdateProcedure                  func(childComplexity int, id string, input generated.UpdateProcedureInput) int
		UpdateProgram                    func(childComplexity int, id string, input generated.UpdateProgramInput) int
		UpdateProgramMembership          func(childComplexity int, id string, input generated.UpdateProgramMembershipInput) int
		UpdateRisk                       func(childComplexity int, id string, input generated.UpdateRiskInput) int
		UpdateStandard                   func(childComplexity int, id string, input generated.UpdateStandardInput) int
		UpdateSubcontrol                 func(childComplexity int, id string, input generated.UpdateSubcontrolInput) int
		UpdateSubscriber                 func(childComplexity int, email string, input generated.UpdateSubscriberInput) int
		UpdateTFASetting                 func(childComplexity int, input generated.UpdateTFASettingInput) int
		UpdateTask                       func(childComplexity int, id string, input generated.UpdateTaskInput) int
		UpdateTemplate                   func(childComplexity int, id string, input generated.UpdateTemplateInput) int
		UpdateUser                       func(childComplexity int, id string, input generated.UpdateUserInput, avatarFile *graphql.Upload) int
		UpdateUserSetting                func(childComplexity int, id string, input generated.UpdateUserSettingInput) int
	}

	Narrative struct {
		BlockedGroups    func(childComplexity int) int
		Control          func(childComplexity int) int
		ControlObjective func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		Description      func(childComplexity int) int
		Details          func(childComplexity int) int
		Editors          func(childComplexity int) int
		ID               func(childComplexity int) int
		InternalPolicy   func(childComplexity int) int
		Name             func(childComplexity int) int
		Owner            func(childComplexity int) int
		OwnerID          func(childComplexity int) int
		Procedure        func(childComplexity int) int
		Programs         func(childComplexity int) int
		Satisfies        func(childComplexity int) int
		Tags             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Viewers          func(childComplexity int) int
	}

	NarrativeBulkCreatePayload struct {
		Narratives func(childComplexity int) int
	}

	NarrativeConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NarrativeCreatePayload struct {
		Narrative func(childComplexity int) int
	}

	NarrativeDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	NarrativeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	NarrativeHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		Details     func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Satisfies   func(childComplexity int) int
		Tags        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	NarrativeHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NarrativeHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	NarrativeSearchResult struct {
		Narratives func(childComplexity int) int
	}

	NarrativeUpdatePayload struct {
		Narrative func(childComplexity int) int
	}

	Note struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Entity      func(childComplexity int) int
		ID          func(childComplexity int) int
		Owner       func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Program     func(childComplexity int) int
		Subcontrols func(childComplexity int) int
		Tags        func(childComplexity int) int
		Text        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	NoteConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NoteEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	NoteHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Ref         func(childComplexity int) int
		Tags        func(childComplexity int) int
		Text        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	NoteHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NoteHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgMembership struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		Events         func(childComplexity int) int
		ID             func(childComplexity int) int
		Organization   func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		Role           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
		User           func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	OrgMembershipBulkCreatePayload struct {
		OrgMemberships func(childComplexity int) int
	}

	OrgMembershipConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgMembershipCreatePayload struct {
		OrgMembership func(childComplexity int) int
	}

	OrgMembershipDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	OrgMembershipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgMembershipHistory struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		HistoryTime    func(childComplexity int) int
		ID             func(childComplexity int) int
		Operation      func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		Ref            func(childComplexity int) int
		Role           func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	OrgMembershipHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgMembershipHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgMembershipUpdatePayload struct {
		OrgMembership func(childComplexity int) int
	}

	OrgSubscription struct {
		Active                   func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		ExpiresAt                func(childComplexity int) int
		FeatureLookupKeys        func(childComplexity int) int
		Features                 func(childComplexity int) int
		ID                       func(childComplexity int) int
		Owner                    func(childComplexity int) int
		OwnerID                  func(childComplexity int) int
		ProductPrice             func(childComplexity int) int
		ProductTier              func(childComplexity int) int
		StripeCustomerID         func(childComplexity int) int
		StripeProductTierID      func(childComplexity int) int
		StripeSubscriptionID     func(childComplexity int) int
		StripeSubscriptionStatus func(childComplexity int) int
		SubscriptionURL          func(childComplexity int) int
		Tags                     func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
	}

	OrgSubscriptionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgSubscriptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgSubscriptionHistory struct {
		Active                   func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		ExpiresAt                func(childComplexity int) int
		FeatureLookupKeys        func(childComplexity int) int
		Features                 func(childComplexity int) int
		HistoryTime              func(childComplexity int) int
		ID                       func(childComplexity int) int
		Operation                func(childComplexity int) int
		OwnerID                  func(childComplexity int) int
		ProductPrice             func(childComplexity int) int
		ProductTier              func(childComplexity int) int
		Ref                      func(childComplexity int) int
		StripeCustomerID         func(childComplexity int) int
		StripeProductTierID      func(childComplexity int) int
		StripeSubscriptionID     func(childComplexity int) int
		StripeSubscriptionStatus func(childComplexity int) int
		Tags                     func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
	}

	OrgSubscriptionHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgSubscriptionHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgSubscriptionSearchResult struct {
		OrgSubscriptions func(childComplexity int) int
	}

	Organization struct {
		APITokens                func(childComplexity int) int
		AvatarFile               func(childComplexity int) int
		AvatarLocalFileID        func(childComplexity int) int
		AvatarRemoteURL          func(childComplexity int) int
		AvatarUpdatedAt          func(childComplexity int) int
		Children                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationOrder, where *generated.OrganizationWhereInput) int
		Contacts                 func(childComplexity int) int
		ControlCreators          func(childComplexity int) int
		ControlObjectiveCreators func(childComplexity int) int
		ControlObjectives        func(childComplexity int) int
		Controls                 func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DedicatedDb              func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		Description              func(childComplexity int) int
		DisplayName              func(childComplexity int) int
		DocumentData             func(childComplexity int) int
		Entities                 func(childComplexity int) int
		EntityTypes              func(childComplexity int) int
		Events                   func(childComplexity int) int
		Files                    func(childComplexity int) int
		GroupCreators            func(childComplexity int) int
		Groups                   func(childComplexity int) int
		ID                       func(childComplexity int) int
		Integrations             func(childComplexity int) int
		InternalPolicies         func(childComplexity int) int
		InternalPolicyCreators   func(childComplexity int) int
		Invites                  func(childComplexity int) int
		Members                  func(childComplexity int) int
		Name                     func(childComplexity int) int
		NarrativeCreators        func(childComplexity int) int
		Narratives               func(childComplexity int) int
		Notes                    func(childComplexity int) int
		OrgSubscriptions         func(childComplexity int) int
		Parent                   func(childComplexity int) int
		PersonalAccessTokens     func(childComplexity int) int
		PersonalOrg              func(childComplexity int) int
		ProcedureCreators        func(childComplexity int) int
		Procedures               func(childComplexity int) int
		ProgramCreators          func(childComplexity int) int
		Programs                 func(childComplexity int) int
		RiskCreators             func(childComplexity int) int
		Risks                    func(childComplexity int) int
		Secrets                  func(childComplexity int) int
		Setting                  func(childComplexity int) int
		Subcontrols              func(childComplexity int) int
		Subscribers              func(childComplexity int) int
		Tags                     func(childComplexity int) int
		Tasks                    func(childComplexity int) int
		TemplateCreators         func(childComplexity int) int
		Templates                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		Users                    func(childComplexity int) int
	}

	OrganizationBulkCreatePayload struct {
		Organizations func(childComplexity int) int
	}

	OrganizationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationCreatePayload struct {
		Organization func(childComplexity int) int
	}

	OrganizationDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	OrganizationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationHistory struct {
		AvatarLocalFileID func(childComplexity int) int
		AvatarRemoteURL   func(childComplexity int) int
		AvatarUpdatedAt   func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DedicatedDb       func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		HistoryTime       func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		Operation         func(childComplexity int) int
		PersonalOrg       func(childComplexity int) int
		Ref               func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	OrganizationHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationSearchResult struct {
		Organizations func(childComplexity int) int
	}

	OrganizationSetting struct {
		BillingAddress              func(childComplexity int) int
		BillingContact              func(childComplexity int) int
		BillingEmail                func(childComplexity int) int
		BillingNotificationsEnabled func(childComplexity int) int
		BillingPhone                func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		Domains                     func(childComplexity int) int
		Files                       func(childComplexity int) int
		GeoLocation                 func(childComplexity int) int
		ID                          func(childComplexity int) int
		Organization                func(childComplexity int) int
		OrganizationID              func(childComplexity int) int
		Tags                        func(childComplexity int) int
		TaxIdentifier               func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	OrganizationSettingBulkCreatePayload struct {
		OrganizationSettings func(childComplexity int) int
	}

	OrganizationSettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationSettingCreatePayload struct {
		OrganizationSetting func(childComplexity int) int
	}

	OrganizationSettingDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	OrganizationSettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationSettingHistory struct {
		BillingAddress              func(childComplexity int) int
		BillingContact              func(childComplexity int) int
		BillingEmail                func(childComplexity int) int
		BillingNotificationsEnabled func(childComplexity int) int
		BillingPhone                func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		Domains                     func(childComplexity int) int
		GeoLocation                 func(childComplexity int) int
		HistoryTime                 func(childComplexity int) int
		ID                          func(childComplexity int) int
		Operation                   func(childComplexity int) int
		OrganizationID              func(childComplexity int) int
		Ref                         func(childComplexity int) int
		Tags                        func(childComplexity int) int
		TaxIdentifier               func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	OrganizationSettingHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationSettingHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrganizationSettingSearchResult struct {
		OrganizationSettings func(childComplexity int) int
	}

	OrganizationSettingUpdatePayload struct {
		OrganizationSetting func(childComplexity int) int
	}

	OrganizationUpdatePayload struct {
		Organization func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	PersonalAccessToken struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		Description   func(childComplexity int) int
		Events        func(childComplexity int) int
		ExpiresAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		LastUsedAt    func(childComplexity int) int
		Name          func(childComplexity int) int
		Organizations func(childComplexity int) int
		Owner         func(childComplexity int) int
		Scopes        func(childComplexity int) int
		Tags          func(childComplexity int) int
		Token         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	PersonalAccessTokenBulkCreatePayload struct {
		PersonalAccessTokens func(childComplexity int) int
	}

	PersonalAccessTokenConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PersonalAccessTokenCreatePayload struct {
		PersonalAccessToken func(childComplexity int) int
	}

	PersonalAccessTokenDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	PersonalAccessTokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PersonalAccessTokenSearchResult struct {
		PersonalAccessTokens func(childComplexity int) int
	}

	PersonalAccessTokenUpdatePayload struct {
		PersonalAccessToken func(childComplexity int) int
	}

	Procedure struct {
		Background       func(childComplexity int) int
		BlockedGroups    func(childComplexity int) int
		Controls         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		Description      func(childComplexity int) int
		Details          func(childComplexity int) int
		Editors          func(childComplexity int) int
		ID               func(childComplexity int) int
		InternalPolicies func(childComplexity int) int
		Name             func(childComplexity int) int
		Narratives       func(childComplexity int) int
		Owner            func(childComplexity int) int
		OwnerID          func(childComplexity int) int
		ProcedureType    func(childComplexity int) int
		Programs         func(childComplexity int) int
		PurposeAndScope  func(childComplexity int) int
		Risks            func(childComplexity int) int
		Satisfies        func(childComplexity int) int
		Status           func(childComplexity int) int
		Tags             func(childComplexity int) int
		Tasks            func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Version          func(childComplexity int) int
	}

	ProcedureBulkCreatePayload struct {
		Procedures func(childComplexity int) int
	}

	ProcedureConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProcedureCreatePayload struct {
		Procedure func(childComplexity int) int
	}

	ProcedureDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ProcedureEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProcedureHistory struct {
		Background      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		Details         func(childComplexity int) int
		HistoryTime     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Operation       func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		ProcedureType   func(childComplexity int) int
		PurposeAndScope func(childComplexity int) int
		Ref             func(childComplexity int) int
		Satisfies       func(childComplexity int) int
		Status          func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		Version         func(childComplexity int) int
	}

	ProcedureHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProcedureHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProcedureSearchResult struct {
		Procedures func(childComplexity int) int
	}

	ProcedureUpdatePayload struct {
		Procedure func(childComplexity int) int
	}

	Program struct {
		ActionPlans          func(childComplexity int) int
		AuditorReadComments  func(childComplexity int) int
		AuditorReady         func(childComplexity int) int
		AuditorWriteComments func(childComplexity int) int
		BlockedGroups        func(childComplexity int) int
		ControlObjectives    func(childComplexity int) int
		Controls             func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		Description          func(childComplexity int) int
		Editors              func(childComplexity int) int
		EndDate              func(childComplexity int) int
		Files                func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalPolicies     func(childComplexity int) int
		Members              func(childComplexity int) int
		Name                 func(childComplexity int) int
		Narratives           func(childComplexity int) int
		Notes                func(childComplexity int) int
		Owner                func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Procedures           func(childComplexity int) int
		Risks                func(childComplexity int) int
		Standards            func(childComplexity int) int
		StartDate            func(childComplexity int) int
		Status               func(childComplexity int) int
		Subcontrols          func(childComplexity int) int
		Tags                 func(childComplexity int) int
		Tasks                func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Users                func(childComplexity int) int
		Viewers              func(childComplexity int) int
	}

	ProgramBulkCreatePayload struct {
		Programs func(childComplexity int) int
	}

	ProgramConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramCreatePayload struct {
		Program func(childComplexity int) int
	}

	ProgramDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ProgramEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramHistory struct {
		AuditorReadComments  func(childComplexity int) int
		AuditorReady         func(childComplexity int) int
		AuditorWriteComments func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		Description          func(childComplexity int) int
		EndDate              func(childComplexity int) int
		HistoryTime          func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Operation            func(childComplexity int) int
		OwnerID              func(childComplexity int) int
		Ref                  func(childComplexity int) int
		StartDate            func(childComplexity int) int
		Status               func(childComplexity int) int
		Tags                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	ProgramHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramMembership struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		DeletedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Program   func(childComplexity int) int
		ProgramID func(childComplexity int) int
		Role      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	ProgramMembershipBulkCreatePayload struct {
		ProgramMemberships func(childComplexity int) int
	}

	ProgramMembershipConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramMembershipCreatePayload struct {
		ProgramMembership func(childComplexity int) int
	}

	ProgramMembershipDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	ProgramMembershipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramMembershipHistory struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		ProgramID   func(childComplexity int) int
		Ref         func(childComplexity int) int
		Role        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	ProgramMembershipHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProgramMembershipHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProgramMembershipUpdatePayload struct {
		ProgramMembership func(childComplexity int) int
	}

	ProgramSearchResult struct {
		Programs func(childComplexity int) int
	}

	ProgramUpdatePayload struct {
		Program func(childComplexity int) int
	}

	Query struct {
		APIToken                       func(childComplexity int, id string) int
		APITokenSearch                 func(childComplexity int, query string) int
		APITokens                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.APITokenWhereInput) int
		ActionPlan                     func(childComplexity int, id string) int
		ActionPlanHistories            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ActionPlanHistoryWhereInput) int
		ActionPlanSearch               func(childComplexity int, query string) int
		ActionPlans                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ActionPlanWhereInput) int
		AdminAPITokenSearch            func(childComplexity int, query string) int
		AdminActionPlanSearch          func(childComplexity int, query string) int
		AdminContactSearch             func(childComplexity int, query string) int
		AdminControlObjectiveSearch    func(childComplexity int, query string) int
		AdminControlSearch             func(childComplexity int, query string) int
		AdminDocumentDataSearch        func(childComplexity int, query string) int
		AdminEntitySearch              func(childComplexity int, query string) int
		AdminEntityTypeSearch          func(childComplexity int, query string) int
		AdminEventSearch               func(childComplexity int, query string) int
		AdminFileSearch                func(childComplexity int, query string) int
		AdminGroupSearch               func(childComplexity int, query string) int
		AdminGroupSettingSearch        func(childComplexity int, query string) int
		AdminIntegrationSearch         func(childComplexity int, query string) int
		AdminInternalPolicySearch      func(childComplexity int, query string) int
		AdminNarrativeSearch           func(childComplexity int, query string) int
		AdminOrgSubscriptionSearch     func(childComplexity int, query string) int
		AdminOrganizationSearch        func(childComplexity int, query string) int
		AdminOrganizationSettingSearch func(childComplexity int, query string) int
		AdminPersonalAccessTokenSearch func(childComplexity int, query string) int
		AdminProcedureSearch           func(childComplexity int, query string) int
		AdminProgramSearch             func(childComplexity int, query string) int
		AdminRiskSearch                func(childComplexity int, query string) int
		AdminSearch                    func(childComplexity int, query string) int
		AdminStandardSearch            func(childComplexity int, query string) int
		AdminSubcontrolSearch          func(childComplexity int, query string) int
		AdminSubscriberSearch          func(childComplexity int, query string) int
		AdminTFASettingSearch          func(childComplexity int, query string) int
		AdminTaskSearch                func(childComplexity int, query string) int
		AdminTemplateSearch            func(childComplexity int, query string) int
		AdminUserSearch                func(childComplexity int, query string) int
		AdminUserSettingSearch         func(childComplexity int, query string) int
		AuditLogs                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *model.AuditLogWhereInput) int
		Contact                        func(childComplexity int, id string) int
		ContactHistories               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ContactHistoryWhereInput) int
		ContactSearch                  func(childComplexity int, query string) int
		Contacts                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ContactWhereInput) int
		Control                        func(childComplexity int, id string) int
		ControlHistories               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ControlHistoryWhereInput) int
		ControlObjective               func(childComplexity int, id string) int
		ControlObjectiveHistories      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ControlObjectiveHistoryWhereInput) int
		ControlObjectiveSearch         func(childComplexity int, query string) int
		ControlObjectives              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ControlObjectiveWhereInput) int
		ControlSearch                  func(childComplexity int, query string) int
		Controls                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ControlWhereInput) int
		DocumentData                   func(childComplexity int, id string) int
		DocumentDataHistories          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.DocumentDataHistoryWhereInput) int
		DocumentDataSearch             func(childComplexity int, query string) int
		DocumentDataSlice              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.DocumentDataWhereInput) int
		Entities                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityOrder, where *generated.EntityWhereInput) int
		Entity                         func(childComplexity int, id string) int
		EntityHistories                func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityHistoryOrder, where *generated.EntityHistoryWhereInput) int
		EntitySearch                   func(childComplexity int, query string) int
		EntityType                     func(childComplexity int, id string) int
		EntityTypeHistories            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityTypeHistoryOrder, where *generated.EntityTypeHistoryWhereInput) int
		EntityTypeSearch               func(childComplexity int, query string) int
		EntityTypes                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityTypeOrder, where *generated.EntityTypeWhereInput) int
		Event                          func(childComplexity int, id string) int
		EventHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EventHistoryWhereInput) int
		EventSearch                    func(childComplexity int, query string) int
		Events                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EventWhereInput) int
		File                           func(childComplexity int, id string) int
		FileHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.FileHistoryWhereInput) int
		FileSearch                     func(childComplexity int, query string) int
		Files                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.FileWhereInput) int
		Group                          func(childComplexity int, id string) int
		GroupHistories                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupHistoryOrder, where *generated.GroupHistoryWhereInput) int
		GroupMembership                func(childComplexity int, id string) int
		GroupMembershipHistories       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupMembershipHistoryWhereInput) int
		GroupMemberships               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupMembershipWhereInput) int
		GroupSearch                    func(childComplexity int, query string) int
		GroupSetting                   func(childComplexity int, id string) int
		GroupSettingHistories          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupSettingHistoryWhereInput) int
		GroupSettingSearch             func(childComplexity int, query string) int
		GroupSettings                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupSettingWhereInput) int
		Groups                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupOrder, where *generated.GroupWhereInput) int
		Hush                           func(childComplexity int, id string) int
		HushHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.HushHistoryOrder, where *generated.HushHistoryWhereInput) int
		Hushes                         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.HushOrder, where *generated.HushWhereInput) int
		Integration                    func(childComplexity int, id string) int
		IntegrationHistories           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.IntegrationHistoryOrder, where *generated.IntegrationHistoryWhereInput) int
		IntegrationSearch              func(childComplexity int, query string) int
		Integrations                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.IntegrationOrder, where *generated.IntegrationWhereInput) int
		InternalPolicies               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.InternalPolicyWhereInput) int
		InternalPolicy                 func(childComplexity int, id string) int
		InternalPolicyHistories        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.InternalPolicyHistoryWhereInput) int
		InternalPolicySearch           func(childComplexity int, query string) int
		Invite                         func(childComplexity int, id string) int
		Invites                        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.InviteWhereInput) int
		Narrative                      func(childComplexity int, id string) int
		NarrativeHistories             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.NarrativeHistoryWhereInput) int
		NarrativeSearch                func(childComplexity int, query string) int
		Narratives                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.NarrativeWhereInput) int
		Node                           func(childComplexity int, id string) int
		Nodes                          func(childComplexity int, ids []string) int
		NoteHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.NoteHistoryWhereInput) int
		Notes                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.NoteWhereInput) int
		OrgMembership                  func(childComplexity int, id string) int
		OrgMembershipHistories         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrgMembershipHistoryWhereInput) int
		OrgMemberships                 func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrgMembershipWhereInput) int
		OrgSubscription                func(childComplexity int, id string) int
		OrgSubscriptionHistories       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrgSubscriptionHistoryWhereInput) int
		OrgSubscriptionSearch          func(childComplexity int, query string) int
		OrgSubscriptions               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrgSubscriptionWhereInput) int
		Organization                   func(childComplexity int, id string) int
		OrganizationHistories          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationHistoryOrder, where *generated.OrganizationHistoryWhereInput) int
		OrganizationSearch             func(childComplexity int, query string) int
		OrganizationSetting            func(childComplexity int, id string) int
		OrganizationSettingHistories   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrganizationSettingHistoryWhereInput) int
		OrganizationSettingSearch      func(childComplexity int, query string) int
		OrganizationSettings           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrganizationSettingWhereInput) int
		Organizations                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationOrder, where *generated.OrganizationWhereInput) int
		PersonalAccessToken            func(childComplexity int, id string) int
		PersonalAccessTokenSearch      func(childComplexity int, query string) int
		PersonalAccessTokens           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.PersonalAccessTokenWhereInput) int
		Procedure                      func(childComplexity int, id string) int
		ProcedureHistories             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ProcedureHistoryWhereInput) int
		ProcedureSearch                func(childComplexity int, query string) int
		Procedures                     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ProcedureWhereInput) int
		Program                        func(childComplexity int, id string) int
		ProgramHistories               func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ProgramHistoryWhereInput) int
		ProgramMembership              func(childComplexity int, id string) int
		ProgramMembershipHistories     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ProgramMembershipHistoryWhereInput) int
		ProgramMemberships             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ProgramMembershipWhereInput) int
		ProgramSearch                  func(childComplexity int, query string) int
		Programs                       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ProgramWhereInput) int
		Risk                           func(childComplexity int, id string) int
		RiskHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.RiskHistoryWhereInput) int
		RiskSearch                     func(childComplexity int, query string) int
		Risks                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.RiskWhereInput) int
		Search                         func(childComplexity int, query string) int
		Standard                       func(childComplexity int, id string) int
		StandardHistories              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.StandardHistoryWhereInput) int
		StandardSearch                 func(childComplexity int, query string) int
		Standards                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.StandardWhereInput) int
		Subcontrol                     func(childComplexity int, id string) int
		SubcontrolHistories            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.SubcontrolHistoryWhereInput) int
		SubcontrolSearch               func(childComplexity int, query string) int
		Subcontrols                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.SubcontrolWhereInput) int
		Subscriber                     func(childComplexity int, email string) int
		SubscriberSearch               func(childComplexity int, query string) int
		Subscribers                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.SubscriberWhereInput) int
		TFASettingSearch               func(childComplexity int, query string) int
		Task                           func(childComplexity int, id string) int
		TaskHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.TaskHistoryWhereInput) int
		TaskSearch                     func(childComplexity int, query string) int
		Tasks                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.TaskWhereInput) int
		Template                       func(childComplexity int, id string) int
		TemplateHistories              func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TemplateHistoryOrder, where *generated.TemplateHistoryWhereInput) int
		TemplateSearch                 func(childComplexity int, query string) int
		Templates                      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TemplateOrder, where *generated.TemplateWhereInput) int
		TfaSetting                     func(childComplexity int, id *string) int
		TfaSettings                    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.TFASettingWhereInput) int
		User                           func(childComplexity int, id string) int
		UserHistories                  func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserHistoryOrder, where *generated.UserHistoryWhereInput) int
		UserSearch                     func(childComplexity int, query string) int
		UserSetting                    func(childComplexity int, id string) int
		UserSettingHistories           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.UserSettingHistoryWhereInput) int
		UserSettingSearch              func(childComplexity int, query string) int
		UserSettings                   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.UserSettingWhereInput) int
		Users                          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserOrder, where *generated.UserWhereInput) int
	}

	Risk struct {
		ActionPlans   func(childComplexity int) int
		BlockedGroups func(childComplexity int) int
		BusinessCosts func(childComplexity int) int
		Control       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		Description   func(childComplexity int) int
		Details       func(childComplexity int) int
		Editors       func(childComplexity int) int
		ID            func(childComplexity int) int
		Impact        func(childComplexity int) int
		Likelihood    func(childComplexity int) int
		Mitigation    func(childComplexity int) int
		Name          func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Procedure     func(childComplexity int) int
		Programs      func(childComplexity int) int
		RiskType      func(childComplexity int) int
		Satisfies     func(childComplexity int) int
		Status        func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		Viewers       func(childComplexity int) int
	}

	RiskBulkCreatePayload struct {
		Risks func(childComplexity int) int
	}

	RiskConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RiskCreatePayload struct {
		Risk func(childComplexity int) int
	}

	RiskDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	RiskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RiskHistory struct {
		BusinessCosts func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		Description   func(childComplexity int) int
		Details       func(childComplexity int) int
		HistoryTime   func(childComplexity int) int
		ID            func(childComplexity int) int
		Impact        func(childComplexity int) int
		Likelihood    func(childComplexity int) int
		Mitigation    func(childComplexity int) int
		Name          func(childComplexity int) int
		Operation     func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		Ref           func(childComplexity int) int
		RiskType      func(childComplexity int) int
		Satisfies     func(childComplexity int) int
		Status        func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	RiskHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RiskHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RiskSearchResult struct {
		Risks func(childComplexity int) int
	}

	RiskUpdatePayload struct {
		Risk func(childComplexity int) int
	}

	SearchResultConnection struct {
		Nodes      func(childComplexity int) int
		Page       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Standard struct {
		ActionPlans       func(childComplexity int) int
		Background        func(childComplexity int) int
		ControlObjectives func(childComplexity int) int
		Controls          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		Details           func(childComplexity int) int
		Family            func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		Procedures        func(childComplexity int) int
		Programs          func(childComplexity int) int
		PurposeAndScope   func(childComplexity int) int
		Satisfies         func(childComplexity int) int
		StandardType      func(childComplexity int) int
		Status            func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		Version           func(childComplexity int) int
	}

	StandardBulkCreatePayload struct {
		Standards func(childComplexity int) int
	}

	StandardConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StandardCreatePayload struct {
		Standard func(childComplexity int) int
	}

	StandardDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	StandardEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StandardHistory struct {
		Background      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		Details         func(childComplexity int) int
		Family          func(childComplexity int) int
		HistoryTime     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Operation       func(childComplexity int) int
		PurposeAndScope func(childComplexity int) int
		Ref             func(childComplexity int) int
		Satisfies       func(childComplexity int) int
		StandardType    func(childComplexity int) int
		Status          func(childComplexity int) int
		Tags            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		Version         func(childComplexity int) int
	}

	StandardHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StandardHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StandardSearchResult struct {
		Standards func(childComplexity int) int
	}

	StandardUpdatePayload struct {
		Standard func(childComplexity int) int
	}

	Subcontrol struct {
		Class                          func(childComplexity int) int
		Controls                       func(childComplexity int) int
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		Description                    func(childComplexity int) int
		Details                        func(childComplexity int) int
		Family                         func(childComplexity int) int
		ID                             func(childComplexity int) int
		ImplementationDate             func(childComplexity int) int
		ImplementationEvidence         func(childComplexity int) int
		ImplementationStatus           func(childComplexity int) int
		ImplementationVerification     func(childComplexity int) int
		ImplementationVerificationDate func(childComplexity int) int
		MappedFrameworks               func(childComplexity int) int
		Name                           func(childComplexity int) int
		Notes                          func(childComplexity int) int
		Owner                          func(childComplexity int) int
		OwnerID                        func(childComplexity int) int
		Programs                       func(childComplexity int) int
		Source                         func(childComplexity int) int
		Status                         func(childComplexity int) int
		SubcontrolNumber               func(childComplexity int) int
		SubcontrolType                 func(childComplexity int) int
		Tags                           func(childComplexity int) int
		Tasks                          func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
		User                           func(childComplexity int) int
		Version                        func(childComplexity int) int
	}

	SubcontrolBulkCreatePayload struct {
		Subcontrols func(childComplexity int) int
	}

	SubcontrolConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubcontrolCreatePayload struct {
		Subcontrol func(childComplexity int) int
	}

	SubcontrolDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	SubcontrolEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubcontrolHistory struct {
		Class                          func(childComplexity int) int
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		Description                    func(childComplexity int) int
		Details                        func(childComplexity int) int
		Family                         func(childComplexity int) int
		HistoryTime                    func(childComplexity int) int
		ID                             func(childComplexity int) int
		ImplementationDate             func(childComplexity int) int
		ImplementationEvidence         func(childComplexity int) int
		ImplementationStatus           func(childComplexity int) int
		ImplementationVerification     func(childComplexity int) int
		ImplementationVerificationDate func(childComplexity int) int
		MappedFrameworks               func(childComplexity int) int
		Name                           func(childComplexity int) int
		Operation                      func(childComplexity int) int
		OwnerID                        func(childComplexity int) int
		Ref                            func(childComplexity int) int
		Source                         func(childComplexity int) int
		Status                         func(childComplexity int) int
		SubcontrolNumber               func(childComplexity int) int
		SubcontrolType                 func(childComplexity int) int
		Tags                           func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
		Version                        func(childComplexity int) int
	}

	SubcontrolHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubcontrolHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubcontrolSearchResult struct {
		Subcontrols func(childComplexity int) int
	}

	SubcontrolUpdatePayload struct {
		Subcontrol func(childComplexity int) int
	}

	Subscriber struct {
		Active        func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		Email         func(childComplexity int) int
		Events        func(childComplexity int) int
		ID            func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerID       func(childComplexity int) int
		PhoneNumber   func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		VerifiedEmail func(childComplexity int) int
		VerifiedPhone func(childComplexity int) int
	}

	SubscriberBulkCreatePayload struct {
		Subscribers func(childComplexity int) int
	}

	SubscriberConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubscriberCreatePayload struct {
		Subscriber func(childComplexity int) int
	}

	SubscriberDeletePayload struct {
		Email func(childComplexity int) int
	}

	SubscriberEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SubscriberSearchResult struct {
		Subscribers func(childComplexity int) int
	}

	SubscriberUpdatePayload struct {
		Subscriber func(childComplexity int) int
	}

	TFASetting struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		ID            func(childComplexity int) int
		Owner         func(childComplexity int) int
		RecoveryCodes func(childComplexity int) int
		Tags          func(childComplexity int) int
		TfaSecret     func(childComplexity int) int
		TotpAllowed   func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		Verified      func(childComplexity int) int
	}

	TFASettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TFASettingCreatePayload struct {
		TfaSetting func(childComplexity int) int
	}

	TFASettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TFASettingSearchResult struct {
		TFASettings func(childComplexity int) int
	}

	TFASettingUpdatePayload struct {
		TfaSetting func(childComplexity int) int
	}

	Task struct {
		Assignee         func(childComplexity int) int
		Assigner         func(childComplexity int) int
		Completed        func(childComplexity int) int
		Control          func(childComplexity int) int
		ControlObjective func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		Description      func(childComplexity int) int
		Details          func(childComplexity int) int
		Due              func(childComplexity int) int
		Group            func(childComplexity int) int
		ID               func(childComplexity int) int
		InternalPolicy   func(childComplexity int) int
		Organization     func(childComplexity int) int
		Procedure        func(childComplexity int) int
		Program          func(childComplexity int) int
		Status           func(childComplexity int) int
		Subcontrol       func(childComplexity int) int
		Tags             func(childComplexity int) int
		Title            func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
	}

	TaskBulkCreatePayload struct {
		Tasks func(childComplexity int) int
	}

	TaskConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TaskCreatePayload struct {
		Task func(childComplexity int) int
	}

	TaskDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TaskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TaskHistory struct {
		Completed   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DeletedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		Details     func(childComplexity int) int
		Due         func(childComplexity int) int
		HistoryTime func(childComplexity int) int
		ID          func(childComplexity int) int
		Operation   func(childComplexity int) int
		Ref         func(childComplexity int) int
		Status      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	TaskHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TaskHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TaskSearchResult struct {
		Tasks func(childComplexity int) int
	}

	TaskUpdatePayload struct {
		Task func(childComplexity int) int
	}

	Template struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		Documents    func(childComplexity int) int
		Files        func(childComplexity int) int
		ID           func(childComplexity int) int
		Jsonconfig   func(childComplexity int) int
		Name         func(childComplexity int) int
		Owner        func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Tags         func(childComplexity int) int
		TemplateType func(childComplexity int) int
		Uischema     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	TemplateBulkCreatePayload struct {
		Templates func(childComplexity int) int
	}

	TemplateConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TemplateCreatePayload struct {
		Template func(childComplexity int) int
	}

	TemplateDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	TemplateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TemplateHistory struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		HistoryTime  func(childComplexity int) int
		ID           func(childComplexity int) int
		Jsonconfig   func(childComplexity int) int
		Name         func(childComplexity int) int
		Operation    func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Ref          func(childComplexity int) int
		Tags         func(childComplexity int) int
		TemplateType func(childComplexity int) int
		Uischema     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	TemplateHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TemplateHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TemplateSearchResult struct {
		Templates func(childComplexity int) int
	}

	TemplateUpdatePayload struct {
		Template func(childComplexity int) int
	}

	User struct {
		ActionPlans          func(childComplexity int) int
		AssigneeTasks        func(childComplexity int) int
		AssignerTasks        func(childComplexity int) int
		AuthProvider         func(childComplexity int) int
		AvatarFile           func(childComplexity int) int
		AvatarLocalFileID    func(childComplexity int) int
		AvatarRemoteURL      func(childComplexity int) int
		AvatarUpdatedAt      func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DisplayName          func(childComplexity int) int
		Email                func(childComplexity int) int
		Events               func(childComplexity int) int
		Files                func(childComplexity int) int
		FirstName            func(childComplexity int) int
		GroupMemberships     func(childComplexity int) int
		Groups               func(childComplexity int) int
		ID                   func(childComplexity int) int
		LastName             func(childComplexity int) int
		LastSeen             func(childComplexity int) int
		OrgMemberships       func(childComplexity int) int
		Organizations        func(childComplexity int) int
		PersonalAccessTokens func(childComplexity int) int
		ProgramMemberships   func(childComplexity int) int
		Programs             func(childComplexity int) int
		Role                 func(childComplexity int) int
		Setting              func(childComplexity int) int
		Sub                  func(childComplexity int) int
		Subcontrols          func(childComplexity int) int
		Tags                 func(childComplexity int) int
		TfaSettings          func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	UserBulkCreatePayload struct {
		Users func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserCreatePayload struct {
		User func(childComplexity int) int
	}

	UserDeletePayload struct {
		DeletedID func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserHistory struct {
		AuthProvider      func(childComplexity int) int
		AvatarLocalFileID func(childComplexity int) int
		AvatarRemoteURL   func(childComplexity int) int
		AvatarUpdatedAt   func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		Email             func(childComplexity int) int
		FirstName         func(childComplexity int) int
		HistoryTime       func(childComplexity int) int
		ID                func(childComplexity int) int
		LastName          func(childComplexity int) int
		LastSeen          func(childComplexity int) int
		Operation         func(childComplexity int) int
		Ref               func(childComplexity int) int
		Role              func(childComplexity int) int
		Sub               func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	UserHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSearchResult struct {
		Users func(childComplexity int) int
	}

	UserSetting struct {
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DefaultOrg        func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		EmailConfirmed    func(childComplexity int) int
		Files             func(childComplexity int) int
		ID                func(childComplexity int) int
		IsTfaEnabled      func(childComplexity int) int
		IsWebauthnAllowed func(childComplexity int) int
		Locked            func(childComplexity int) int
		SilencedAt        func(childComplexity int) int
		Status            func(childComplexity int) int
		SuspendedAt       func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		User              func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	UserSettingBulkCreatePayload struct {
		UserSettings func(childComplexity int) int
	}

	UserSettingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserSettingCreatePayload struct {
		UserSetting func(childComplexity int) int
	}

	UserSettingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSettingHistory struct {
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		EmailConfirmed    func(childComplexity int) int
		HistoryTime       func(childComplexity int) int
		ID                func(childComplexity int) int
		IsTfaEnabled      func(childComplexity int) int
		IsWebauthnAllowed func(childComplexity int) int
		Locked            func(childComplexity int) int
		Operation         func(childComplexity int) int
		Ref               func(childComplexity int) int
		SilencedAt        func(childComplexity int) int
		Status            func(childComplexity int) int
		SuspendedAt       func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	UserSettingHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserSettingHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSettingSearchResult struct {
		UserSettings func(childComplexity int) int
	}

	UserSettingUpdatePayload struct {
		UserSetting func(childComplexity int) int
	}

	UserUpdatePayload struct {
		User func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "APIToken.createdAt":
		if e.complexity.APIToken.CreatedAt == nil {
			break
		}

		return e.complexity.APIToken.CreatedAt(childComplexity), true

	case "APIToken.createdBy":
		if e.complexity.APIToken.CreatedBy == nil {
			break
		}

		return e.complexity.APIToken.CreatedBy(childComplexity), true

	case "APIToken.deletedAt":
		if e.complexity.APIToken.DeletedAt == nil {
			break
		}

		return e.complexity.APIToken.DeletedAt(childComplexity), true

	case "APIToken.deletedBy":
		if e.complexity.APIToken.DeletedBy == nil {
			break
		}

		return e.complexity.APIToken.DeletedBy(childComplexity), true

	case "APIToken.description":
		if e.complexity.APIToken.Description == nil {
			break
		}

		return e.complexity.APIToken.Description(childComplexity), true

	case "APIToken.expiresAt":
		if e.complexity.APIToken.ExpiresAt == nil {
			break
		}

		return e.complexity.APIToken.ExpiresAt(childComplexity), true

	case "APIToken.id":
		if e.complexity.APIToken.ID == nil {
			break
		}

		return e.complexity.APIToken.ID(childComplexity), true

	case "APIToken.lastUsedAt":
		if e.complexity.APIToken.LastUsedAt == nil {
			break
		}

		return e.complexity.APIToken.LastUsedAt(childComplexity), true

	case "APIToken.name":
		if e.complexity.APIToken.Name == nil {
			break
		}

		return e.complexity.APIToken.Name(childComplexity), true

	case "APIToken.owner":
		if e.complexity.APIToken.Owner == nil {
			break
		}

		return e.complexity.APIToken.Owner(childComplexity), true

	case "APIToken.ownerID":
		if e.complexity.APIToken.OwnerID == nil {
			break
		}

		return e.complexity.APIToken.OwnerID(childComplexity), true

	case "APIToken.scopes":
		if e.complexity.APIToken.Scopes == nil {
			break
		}

		return e.complexity.APIToken.Scopes(childComplexity), true

	case "APIToken.tags":
		if e.complexity.APIToken.Tags == nil {
			break
		}

		return e.complexity.APIToken.Tags(childComplexity), true

	case "APIToken.token":
		if e.complexity.APIToken.Token == nil {
			break
		}

		return e.complexity.APIToken.Token(childComplexity), true

	case "APIToken.updatedAt":
		if e.complexity.APIToken.UpdatedAt == nil {
			break
		}

		return e.complexity.APIToken.UpdatedAt(childComplexity), true

	case "APIToken.updatedBy":
		if e.complexity.APIToken.UpdatedBy == nil {
			break
		}

		return e.complexity.APIToken.UpdatedBy(childComplexity), true

	case "APITokenBulkCreatePayload.apiTokens":
		if e.complexity.APITokenBulkCreatePayload.APITokens == nil {
			break
		}

		return e.complexity.APITokenBulkCreatePayload.APITokens(childComplexity), true

	case "APITokenConnection.edges":
		if e.complexity.APITokenConnection.Edges == nil {
			break
		}

		return e.complexity.APITokenConnection.Edges(childComplexity), true

	case "APITokenConnection.pageInfo":
		if e.complexity.APITokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.APITokenConnection.PageInfo(childComplexity), true

	case "APITokenConnection.totalCount":
		if e.complexity.APITokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.APITokenConnection.TotalCount(childComplexity), true

	case "APITokenCreatePayload.apiToken":
		if e.complexity.APITokenCreatePayload.APIToken == nil {
			break
		}

		return e.complexity.APITokenCreatePayload.APIToken(childComplexity), true

	case "APITokenDeletePayload.deletedID":
		if e.complexity.APITokenDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.APITokenDeletePayload.DeletedID(childComplexity), true

	case "APITokenEdge.cursor":
		if e.complexity.APITokenEdge.Cursor == nil {
			break
		}

		return e.complexity.APITokenEdge.Cursor(childComplexity), true

	case "APITokenEdge.node":
		if e.complexity.APITokenEdge.Node == nil {
			break
		}

		return e.complexity.APITokenEdge.Node(childComplexity), true

	case "APITokenSearchResult.apiTokens":
		if e.complexity.APITokenSearchResult.APITokens == nil {
			break
		}

		return e.complexity.APITokenSearchResult.APITokens(childComplexity), true

	case "APITokenUpdatePayload.apiToken":
		if e.complexity.APITokenUpdatePayload.APIToken == nil {
			break
		}

		return e.complexity.APITokenUpdatePayload.APIToken(childComplexity), true

	case "ActionPlan.control":
		if e.complexity.ActionPlan.Control == nil {
			break
		}

		return e.complexity.ActionPlan.Control(childComplexity), true

	case "ActionPlan.createdAt":
		if e.complexity.ActionPlan.CreatedAt == nil {
			break
		}

		return e.complexity.ActionPlan.CreatedAt(childComplexity), true

	case "ActionPlan.createdBy":
		if e.complexity.ActionPlan.CreatedBy == nil {
			break
		}

		return e.complexity.ActionPlan.CreatedBy(childComplexity), true

	case "ActionPlan.deletedAt":
		if e.complexity.ActionPlan.DeletedAt == nil {
			break
		}

		return e.complexity.ActionPlan.DeletedAt(childComplexity), true

	case "ActionPlan.deletedBy":
		if e.complexity.ActionPlan.DeletedBy == nil {
			break
		}

		return e.complexity.ActionPlan.DeletedBy(childComplexity), true

	case "ActionPlan.description":
		if e.complexity.ActionPlan.Description == nil {
			break
		}

		return e.complexity.ActionPlan.Description(childComplexity), true

	case "ActionPlan.details":
		if e.complexity.ActionPlan.Details == nil {
			break
		}

		return e.complexity.ActionPlan.Details(childComplexity), true

	case "ActionPlan.dueDate":
		if e.complexity.ActionPlan.DueDate == nil {
			break
		}

		return e.complexity.ActionPlan.DueDate(childComplexity), true

	case "ActionPlan.id":
		if e.complexity.ActionPlan.ID == nil {
			break
		}

		return e.complexity.ActionPlan.ID(childComplexity), true

	case "ActionPlan.name":
		if e.complexity.ActionPlan.Name == nil {
			break
		}

		return e.complexity.ActionPlan.Name(childComplexity), true

	case "ActionPlan.priority":
		if e.complexity.ActionPlan.Priority == nil {
			break
		}

		return e.complexity.ActionPlan.Priority(childComplexity), true

	case "ActionPlan.program":
		if e.complexity.ActionPlan.Program == nil {
			break
		}

		return e.complexity.ActionPlan.Program(childComplexity), true

	case "ActionPlan.risk":
		if e.complexity.ActionPlan.Risk == nil {
			break
		}

		return e.complexity.ActionPlan.Risk(childComplexity), true

	case "ActionPlan.source":
		if e.complexity.ActionPlan.Source == nil {
			break
		}

		return e.complexity.ActionPlan.Source(childComplexity), true

	case "ActionPlan.standard":
		if e.complexity.ActionPlan.Standard == nil {
			break
		}

		return e.complexity.ActionPlan.Standard(childComplexity), true

	case "ActionPlan.status":
		if e.complexity.ActionPlan.Status == nil {
			break
		}

		return e.complexity.ActionPlan.Status(childComplexity), true

	case "ActionPlan.tags":
		if e.complexity.ActionPlan.Tags == nil {
			break
		}

		return e.complexity.ActionPlan.Tags(childComplexity), true

	case "ActionPlan.updatedAt":
		if e.complexity.ActionPlan.UpdatedAt == nil {
			break
		}

		return e.complexity.ActionPlan.UpdatedAt(childComplexity), true

	case "ActionPlan.updatedBy":
		if e.complexity.ActionPlan.UpdatedBy == nil {
			break
		}

		return e.complexity.ActionPlan.UpdatedBy(childComplexity), true

	case "ActionPlan.user":
		if e.complexity.ActionPlan.User == nil {
			break
		}

		return e.complexity.ActionPlan.User(childComplexity), true

	case "ActionPlanBulkCreatePayload.actionPlans":
		if e.complexity.ActionPlanBulkCreatePayload.ActionPlans == nil {
			break
		}

		return e.complexity.ActionPlanBulkCreatePayload.ActionPlans(childComplexity), true

	case "ActionPlanConnection.edges":
		if e.complexity.ActionPlanConnection.Edges == nil {
			break
		}

		return e.complexity.ActionPlanConnection.Edges(childComplexity), true

	case "ActionPlanConnection.pageInfo":
		if e.complexity.ActionPlanConnection.PageInfo == nil {
			break
		}

		return e.complexity.ActionPlanConnection.PageInfo(childComplexity), true

	case "ActionPlanConnection.totalCount":
		if e.complexity.ActionPlanConnection.TotalCount == nil {
			break
		}

		return e.complexity.ActionPlanConnection.TotalCount(childComplexity), true

	case "ActionPlanCreatePayload.actionPlan":
		if e.complexity.ActionPlanCreatePayload.ActionPlan == nil {
			break
		}

		return e.complexity.ActionPlanCreatePayload.ActionPlan(childComplexity), true

	case "ActionPlanDeletePayload.deletedID":
		if e.complexity.ActionPlanDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ActionPlanDeletePayload.DeletedID(childComplexity), true

	case "ActionPlanEdge.cursor":
		if e.complexity.ActionPlanEdge.Cursor == nil {
			break
		}

		return e.complexity.ActionPlanEdge.Cursor(childComplexity), true

	case "ActionPlanEdge.node":
		if e.complexity.ActionPlanEdge.Node == nil {
			break
		}

		return e.complexity.ActionPlanEdge.Node(childComplexity), true

	case "ActionPlanHistory.createdAt":
		if e.complexity.ActionPlanHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ActionPlanHistory.CreatedAt(childComplexity), true

	case "ActionPlanHistory.createdBy":
		if e.complexity.ActionPlanHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ActionPlanHistory.CreatedBy(childComplexity), true

	case "ActionPlanHistory.deletedAt":
		if e.complexity.ActionPlanHistory.DeletedAt == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DeletedAt(childComplexity), true

	case "ActionPlanHistory.deletedBy":
		if e.complexity.ActionPlanHistory.DeletedBy == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DeletedBy(childComplexity), true

	case "ActionPlanHistory.description":
		if e.complexity.ActionPlanHistory.Description == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Description(childComplexity), true

	case "ActionPlanHistory.details":
		if e.complexity.ActionPlanHistory.Details == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Details(childComplexity), true

	case "ActionPlanHistory.dueDate":
		if e.complexity.ActionPlanHistory.DueDate == nil {
			break
		}

		return e.complexity.ActionPlanHistory.DueDate(childComplexity), true

	case "ActionPlanHistory.historyTime":
		if e.complexity.ActionPlanHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ActionPlanHistory.HistoryTime(childComplexity), true

	case "ActionPlanHistory.id":
		if e.complexity.ActionPlanHistory.ID == nil {
			break
		}

		return e.complexity.ActionPlanHistory.ID(childComplexity), true

	case "ActionPlanHistory.name":
		if e.complexity.ActionPlanHistory.Name == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Name(childComplexity), true

	case "ActionPlanHistory.operation":
		if e.complexity.ActionPlanHistory.Operation == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Operation(childComplexity), true

	case "ActionPlanHistory.priority":
		if e.complexity.ActionPlanHistory.Priority == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Priority(childComplexity), true

	case "ActionPlanHistory.ref":
		if e.complexity.ActionPlanHistory.Ref == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Ref(childComplexity), true

	case "ActionPlanHistory.source":
		if e.complexity.ActionPlanHistory.Source == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Source(childComplexity), true

	case "ActionPlanHistory.status":
		if e.complexity.ActionPlanHistory.Status == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Status(childComplexity), true

	case "ActionPlanHistory.tags":
		if e.complexity.ActionPlanHistory.Tags == nil {
			break
		}

		return e.complexity.ActionPlanHistory.Tags(childComplexity), true

	case "ActionPlanHistory.updatedAt":
		if e.complexity.ActionPlanHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ActionPlanHistory.UpdatedAt(childComplexity), true

	case "ActionPlanHistory.updatedBy":
		if e.complexity.ActionPlanHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ActionPlanHistory.UpdatedBy(childComplexity), true

	case "ActionPlanHistoryConnection.edges":
		if e.complexity.ActionPlanHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ActionPlanHistoryConnection.Edges(childComplexity), true

	case "ActionPlanHistoryConnection.pageInfo":
		if e.complexity.ActionPlanHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ActionPlanHistoryConnection.PageInfo(childComplexity), true

	case "ActionPlanHistoryConnection.totalCount":
		if e.complexity.ActionPlanHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ActionPlanHistoryConnection.TotalCount(childComplexity), true

	case "ActionPlanHistoryEdge.cursor":
		if e.complexity.ActionPlanHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ActionPlanHistoryEdge.Cursor(childComplexity), true

	case "ActionPlanHistoryEdge.node":
		if e.complexity.ActionPlanHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ActionPlanHistoryEdge.Node(childComplexity), true

	case "ActionPlanSearchResult.actionPlans":
		if e.complexity.ActionPlanSearchResult.ActionPlans == nil {
			break
		}

		return e.complexity.ActionPlanSearchResult.ActionPlans(childComplexity), true

	case "ActionPlanUpdatePayload.actionPlan":
		if e.complexity.ActionPlanUpdatePayload.ActionPlan == nil {
			break
		}

		return e.complexity.ActionPlanUpdatePayload.ActionPlan(childComplexity), true

	case "AuditLog.changes":
		if e.complexity.AuditLog.Changes == nil {
			break
		}

		return e.complexity.AuditLog.Changes(childComplexity), true

	case "AuditLog.id":
		if e.complexity.AuditLog.ID == nil {
			break
		}

		return e.complexity.AuditLog.ID(childComplexity), true

	case "AuditLog.operation":
		if e.complexity.AuditLog.Operation == nil {
			break
		}

		return e.complexity.AuditLog.Operation(childComplexity), true

	case "AuditLog.table":
		if e.complexity.AuditLog.Table == nil {
			break
		}

		return e.complexity.AuditLog.Table(childComplexity), true

	case "AuditLog.time":
		if e.complexity.AuditLog.Time == nil {
			break
		}

		return e.complexity.AuditLog.Time(childComplexity), true

	case "AuditLog.updatedBy":
		if e.complexity.AuditLog.UpdatedBy == nil {
			break
		}

		return e.complexity.AuditLog.UpdatedBy(childComplexity), true

	case "AuditLogConnection.edges":
		if e.complexity.AuditLogConnection.Edges == nil {
			break
		}

		return e.complexity.AuditLogConnection.Edges(childComplexity), true

	case "AuditLogConnection.pageInfo":
		if e.complexity.AuditLogConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuditLogConnection.PageInfo(childComplexity), true

	case "AuditLogConnection.totalCount":
		if e.complexity.AuditLogConnection.TotalCount == nil {
			break
		}

		return e.complexity.AuditLogConnection.TotalCount(childComplexity), true

	case "AuditLogEdge.cursor":
		if e.complexity.AuditLogEdge.Cursor == nil {
			break
		}

		return e.complexity.AuditLogEdge.Cursor(childComplexity), true

	case "AuditLogEdge.node":
		if e.complexity.AuditLogEdge.Node == nil {
			break
		}

		return e.complexity.AuditLogEdge.Node(childComplexity), true

	case "Contact.address":
		if e.complexity.Contact.Address == nil {
			break
		}

		return e.complexity.Contact.Address(childComplexity), true

	case "Contact.company":
		if e.complexity.Contact.Company == nil {
			break
		}

		return e.complexity.Contact.Company(childComplexity), true

	case "Contact.createdAt":
		if e.complexity.Contact.CreatedAt == nil {
			break
		}

		return e.complexity.Contact.CreatedAt(childComplexity), true

	case "Contact.createdBy":
		if e.complexity.Contact.CreatedBy == nil {
			break
		}

		return e.complexity.Contact.CreatedBy(childComplexity), true

	case "Contact.deletedAt":
		if e.complexity.Contact.DeletedAt == nil {
			break
		}

		return e.complexity.Contact.DeletedAt(childComplexity), true

	case "Contact.deletedBy":
		if e.complexity.Contact.DeletedBy == nil {
			break
		}

		return e.complexity.Contact.DeletedBy(childComplexity), true

	case "Contact.email":
		if e.complexity.Contact.Email == nil {
			break
		}

		return e.complexity.Contact.Email(childComplexity), true

	case "Contact.entities":
		if e.complexity.Contact.Entities == nil {
			break
		}

		return e.complexity.Contact.Entities(childComplexity), true

	case "Contact.files":
		if e.complexity.Contact.Files == nil {
			break
		}

		return e.complexity.Contact.Files(childComplexity), true

	case "Contact.fullName":
		if e.complexity.Contact.FullName == nil {
			break
		}

		return e.complexity.Contact.FullName(childComplexity), true

	case "Contact.id":
		if e.complexity.Contact.ID == nil {
			break
		}

		return e.complexity.Contact.ID(childComplexity), true

	case "Contact.owner":
		if e.complexity.Contact.Owner == nil {
			break
		}

		return e.complexity.Contact.Owner(childComplexity), true

	case "Contact.ownerID":
		if e.complexity.Contact.OwnerID == nil {
			break
		}

		return e.complexity.Contact.OwnerID(childComplexity), true

	case "Contact.phoneNumber":
		if e.complexity.Contact.PhoneNumber == nil {
			break
		}

		return e.complexity.Contact.PhoneNumber(childComplexity), true

	case "Contact.status":
		if e.complexity.Contact.Status == nil {
			break
		}

		return e.complexity.Contact.Status(childComplexity), true

	case "Contact.tags":
		if e.complexity.Contact.Tags == nil {
			break
		}

		return e.complexity.Contact.Tags(childComplexity), true

	case "Contact.title":
		if e.complexity.Contact.Title == nil {
			break
		}

		return e.complexity.Contact.Title(childComplexity), true

	case "Contact.updatedAt":
		if e.complexity.Contact.UpdatedAt == nil {
			break
		}

		return e.complexity.Contact.UpdatedAt(childComplexity), true

	case "Contact.updatedBy":
		if e.complexity.Contact.UpdatedBy == nil {
			break
		}

		return e.complexity.Contact.UpdatedBy(childComplexity), true

	case "ContactBulkCreatePayload.contacts":
		if e.complexity.ContactBulkCreatePayload.Contacts == nil {
			break
		}

		return e.complexity.ContactBulkCreatePayload.Contacts(childComplexity), true

	case "ContactConnection.edges":
		if e.complexity.ContactConnection.Edges == nil {
			break
		}

		return e.complexity.ContactConnection.Edges(childComplexity), true

	case "ContactConnection.pageInfo":
		if e.complexity.ContactConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContactConnection.PageInfo(childComplexity), true

	case "ContactConnection.totalCount":
		if e.complexity.ContactConnection.TotalCount == nil {
			break
		}

		return e.complexity.ContactConnection.TotalCount(childComplexity), true

	case "ContactCreatePayload.contact":
		if e.complexity.ContactCreatePayload.Contact == nil {
			break
		}

		return e.complexity.ContactCreatePayload.Contact(childComplexity), true

	case "ContactDeletePayload.deletedID":
		if e.complexity.ContactDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ContactDeletePayload.DeletedID(childComplexity), true

	case "ContactEdge.cursor":
		if e.complexity.ContactEdge.Cursor == nil {
			break
		}

		return e.complexity.ContactEdge.Cursor(childComplexity), true

	case "ContactEdge.node":
		if e.complexity.ContactEdge.Node == nil {
			break
		}

		return e.complexity.ContactEdge.Node(childComplexity), true

	case "ContactHistory.address":
		if e.complexity.ContactHistory.Address == nil {
			break
		}

		return e.complexity.ContactHistory.Address(childComplexity), true

	case "ContactHistory.company":
		if e.complexity.ContactHistory.Company == nil {
			break
		}

		return e.complexity.ContactHistory.Company(childComplexity), true

	case "ContactHistory.createdAt":
		if e.complexity.ContactHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ContactHistory.CreatedAt(childComplexity), true

	case "ContactHistory.createdBy":
		if e.complexity.ContactHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ContactHistory.CreatedBy(childComplexity), true

	case "ContactHistory.deletedAt":
		if e.complexity.ContactHistory.DeletedAt == nil {
			break
		}

		return e.complexity.ContactHistory.DeletedAt(childComplexity), true

	case "ContactHistory.deletedBy":
		if e.complexity.ContactHistory.DeletedBy == nil {
			break
		}

		return e.complexity.ContactHistory.DeletedBy(childComplexity), true

	case "ContactHistory.email":
		if e.complexity.ContactHistory.Email == nil {
			break
		}

		return e.complexity.ContactHistory.Email(childComplexity), true

	case "ContactHistory.fullName":
		if e.complexity.ContactHistory.FullName == nil {
			break
		}

		return e.complexity.ContactHistory.FullName(childComplexity), true

	case "ContactHistory.historyTime":
		if e.complexity.ContactHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ContactHistory.HistoryTime(childComplexity), true

	case "ContactHistory.id":
		if e.complexity.ContactHistory.ID == nil {
			break
		}

		return e.complexity.ContactHistory.ID(childComplexity), true

	case "ContactHistory.operation":
		if e.complexity.ContactHistory.Operation == nil {
			break
		}

		return e.complexity.ContactHistory.Operation(childComplexity), true

	case "ContactHistory.ownerID":
		if e.complexity.ContactHistory.OwnerID == nil {
			break
		}

		return e.complexity.ContactHistory.OwnerID(childComplexity), true

	case "ContactHistory.phoneNumber":
		if e.complexity.ContactHistory.PhoneNumber == nil {
			break
		}

		return e.complexity.ContactHistory.PhoneNumber(childComplexity), true

	case "ContactHistory.ref":
		if e.complexity.ContactHistory.Ref == nil {
			break
		}

		return e.complexity.ContactHistory.Ref(childComplexity), true

	case "ContactHistory.status":
		if e.complexity.ContactHistory.Status == nil {
			break
		}

		return e.complexity.ContactHistory.Status(childComplexity), true

	case "ContactHistory.tags":
		if e.complexity.ContactHistory.Tags == nil {
			break
		}

		return e.complexity.ContactHistory.Tags(childComplexity), true

	case "ContactHistory.title":
		if e.complexity.ContactHistory.Title == nil {
			break
		}

		return e.complexity.ContactHistory.Title(childComplexity), true

	case "ContactHistory.updatedAt":
		if e.complexity.ContactHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ContactHistory.UpdatedAt(childComplexity), true

	case "ContactHistory.updatedBy":
		if e.complexity.ContactHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ContactHistory.UpdatedBy(childComplexity), true

	case "ContactHistoryConnection.edges":
		if e.complexity.ContactHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ContactHistoryConnection.Edges(childComplexity), true

	case "ContactHistoryConnection.pageInfo":
		if e.complexity.ContactHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContactHistoryConnection.PageInfo(childComplexity), true

	case "ContactHistoryConnection.totalCount":
		if e.complexity.ContactHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ContactHistoryConnection.TotalCount(childComplexity), true

	case "ContactHistoryEdge.cursor":
		if e.complexity.ContactHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ContactHistoryEdge.Cursor(childComplexity), true

	case "ContactHistoryEdge.node":
		if e.complexity.ContactHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ContactHistoryEdge.Node(childComplexity), true

	case "ContactSearchResult.contacts":
		if e.complexity.ContactSearchResult.Contacts == nil {
			break
		}

		return e.complexity.ContactSearchResult.Contacts(childComplexity), true

	case "ContactUpdatePayload.contact":
		if e.complexity.ContactUpdatePayload.Contact == nil {
			break
		}

		return e.complexity.ContactUpdatePayload.Contact(childComplexity), true

	case "Control.actionPlans":
		if e.complexity.Control.ActionPlans == nil {
			break
		}

		return e.complexity.Control.ActionPlans(childComplexity), true

	case "Control.blockedGroups":
		if e.complexity.Control.BlockedGroups == nil {
			break
		}

		return e.complexity.Control.BlockedGroups(childComplexity), true

	case "Control.class":
		if e.complexity.Control.Class == nil {
			break
		}

		return e.complexity.Control.Class(childComplexity), true

	case "Control.controlNumber":
		if e.complexity.Control.ControlNumber == nil {
			break
		}

		return e.complexity.Control.ControlNumber(childComplexity), true

	case "Control.controlObjectives":
		if e.complexity.Control.ControlObjectives == nil {
			break
		}

		return e.complexity.Control.ControlObjectives(childComplexity), true

	case "Control.controlType":
		if e.complexity.Control.ControlType == nil {
			break
		}

		return e.complexity.Control.ControlType(childComplexity), true

	case "Control.createdAt":
		if e.complexity.Control.CreatedAt == nil {
			break
		}

		return e.complexity.Control.CreatedAt(childComplexity), true

	case "Control.createdBy":
		if e.complexity.Control.CreatedBy == nil {
			break
		}

		return e.complexity.Control.CreatedBy(childComplexity), true

	case "Control.deletedAt":
		if e.complexity.Control.DeletedAt == nil {
			break
		}

		return e.complexity.Control.DeletedAt(childComplexity), true

	case "Control.deletedBy":
		if e.complexity.Control.DeletedBy == nil {
			break
		}

		return e.complexity.Control.DeletedBy(childComplexity), true

	case "Control.description":
		if e.complexity.Control.Description == nil {
			break
		}

		return e.complexity.Control.Description(childComplexity), true

	case "Control.details":
		if e.complexity.Control.Details == nil {
			break
		}

		return e.complexity.Control.Details(childComplexity), true

	case "Control.editors":
		if e.complexity.Control.Editors == nil {
			break
		}

		return e.complexity.Control.Editors(childComplexity), true

	case "Control.family":
		if e.complexity.Control.Family == nil {
			break
		}

		return e.complexity.Control.Family(childComplexity), true

	case "Control.id":
		if e.complexity.Control.ID == nil {
			break
		}

		return e.complexity.Control.ID(childComplexity), true

	case "Control.mappedFrameworks":
		if e.complexity.Control.MappedFrameworks == nil {
			break
		}

		return e.complexity.Control.MappedFrameworks(childComplexity), true

	case "Control.name":
		if e.complexity.Control.Name == nil {
			break
		}

		return e.complexity.Control.Name(childComplexity), true

	case "Control.narratives":
		if e.complexity.Control.Narratives == nil {
			break
		}

		return e.complexity.Control.Narratives(childComplexity), true

	case "Control.owner":
		if e.complexity.Control.Owner == nil {
			break
		}

		return e.complexity.Control.Owner(childComplexity), true

	case "Control.ownerID":
		if e.complexity.Control.OwnerID == nil {
			break
		}

		return e.complexity.Control.OwnerID(childComplexity), true

	case "Control.procedures":
		if e.complexity.Control.Procedures == nil {
			break
		}

		return e.complexity.Control.Procedures(childComplexity), true

	case "Control.programs":
		if e.complexity.Control.Programs == nil {
			break
		}

		return e.complexity.Control.Programs(childComplexity), true

	case "Control.risks":
		if e.complexity.Control.Risks == nil {
			break
		}

		return e.complexity.Control.Risks(childComplexity), true

	case "Control.satisfies":
		if e.complexity.Control.Satisfies == nil {
			break
		}

		return e.complexity.Control.Satisfies(childComplexity), true

	case "Control.source":
		if e.complexity.Control.Source == nil {
			break
		}

		return e.complexity.Control.Source(childComplexity), true

	case "Control.standard":
		if e.complexity.Control.Standard == nil {
			break
		}

		return e.complexity.Control.Standard(childComplexity), true

	case "Control.status":
		if e.complexity.Control.Status == nil {
			break
		}

		return e.complexity.Control.Status(childComplexity), true

	case "Control.subcontrols":
		if e.complexity.Control.Subcontrols == nil {
			break
		}

		return e.complexity.Control.Subcontrols(childComplexity), true

	case "Control.tags":
		if e.complexity.Control.Tags == nil {
			break
		}

		return e.complexity.Control.Tags(childComplexity), true

	case "Control.tasks":
		if e.complexity.Control.Tasks == nil {
			break
		}

		return e.complexity.Control.Tasks(childComplexity), true

	case "Control.updatedAt":
		if e.complexity.Control.UpdatedAt == nil {
			break
		}

		return e.complexity.Control.UpdatedAt(childComplexity), true

	case "Control.updatedBy":
		if e.complexity.Control.UpdatedBy == nil {
			break
		}

		return e.complexity.Control.UpdatedBy(childComplexity), true

	case "Control.version":
		if e.complexity.Control.Version == nil {
			break
		}

		return e.complexity.Control.Version(childComplexity), true

	case "Control.viewers":
		if e.complexity.Control.Viewers == nil {
			break
		}

		return e.complexity.Control.Viewers(childComplexity), true

	case "ControlBulkCreatePayload.controls":
		if e.complexity.ControlBulkCreatePayload.Controls == nil {
			break
		}

		return e.complexity.ControlBulkCreatePayload.Controls(childComplexity), true

	case "ControlConnection.edges":
		if e.complexity.ControlConnection.Edges == nil {
			break
		}

		return e.complexity.ControlConnection.Edges(childComplexity), true

	case "ControlConnection.pageInfo":
		if e.complexity.ControlConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlConnection.PageInfo(childComplexity), true

	case "ControlConnection.totalCount":
		if e.complexity.ControlConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlConnection.TotalCount(childComplexity), true

	case "ControlCreatePayload.control":
		if e.complexity.ControlCreatePayload.Control == nil {
			break
		}

		return e.complexity.ControlCreatePayload.Control(childComplexity), true

	case "ControlDeletePayload.deletedID":
		if e.complexity.ControlDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ControlDeletePayload.DeletedID(childComplexity), true

	case "ControlEdge.cursor":
		if e.complexity.ControlEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlEdge.Cursor(childComplexity), true

	case "ControlEdge.node":
		if e.complexity.ControlEdge.Node == nil {
			break
		}

		return e.complexity.ControlEdge.Node(childComplexity), true

	case "ControlHistory.class":
		if e.complexity.ControlHistory.Class == nil {
			break
		}

		return e.complexity.ControlHistory.Class(childComplexity), true

	case "ControlHistory.controlNumber":
		if e.complexity.ControlHistory.ControlNumber == nil {
			break
		}

		return e.complexity.ControlHistory.ControlNumber(childComplexity), true

	case "ControlHistory.controlType":
		if e.complexity.ControlHistory.ControlType == nil {
			break
		}

		return e.complexity.ControlHistory.ControlType(childComplexity), true

	case "ControlHistory.createdAt":
		if e.complexity.ControlHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ControlHistory.CreatedAt(childComplexity), true

	case "ControlHistory.createdBy":
		if e.complexity.ControlHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ControlHistory.CreatedBy(childComplexity), true

	case "ControlHistory.deletedAt":
		if e.complexity.ControlHistory.DeletedAt == nil {
			break
		}

		return e.complexity.ControlHistory.DeletedAt(childComplexity), true

	case "ControlHistory.deletedBy":
		if e.complexity.ControlHistory.DeletedBy == nil {
			break
		}

		return e.complexity.ControlHistory.DeletedBy(childComplexity), true

	case "ControlHistory.description":
		if e.complexity.ControlHistory.Description == nil {
			break
		}

		return e.complexity.ControlHistory.Description(childComplexity), true

	case "ControlHistory.details":
		if e.complexity.ControlHistory.Details == nil {
			break
		}

		return e.complexity.ControlHistory.Details(childComplexity), true

	case "ControlHistory.family":
		if e.complexity.ControlHistory.Family == nil {
			break
		}

		return e.complexity.ControlHistory.Family(childComplexity), true

	case "ControlHistory.historyTime":
		if e.complexity.ControlHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ControlHistory.HistoryTime(childComplexity), true

	case "ControlHistory.id":
		if e.complexity.ControlHistory.ID == nil {
			break
		}

		return e.complexity.ControlHistory.ID(childComplexity), true

	case "ControlHistory.mappedFrameworks":
		if e.complexity.ControlHistory.MappedFrameworks == nil {
			break
		}

		return e.complexity.ControlHistory.MappedFrameworks(childComplexity), true

	case "ControlHistory.name":
		if e.complexity.ControlHistory.Name == nil {
			break
		}

		return e.complexity.ControlHistory.Name(childComplexity), true

	case "ControlHistory.operation":
		if e.complexity.ControlHistory.Operation == nil {
			break
		}

		return e.complexity.ControlHistory.Operation(childComplexity), true

	case "ControlHistory.ownerID":
		if e.complexity.ControlHistory.OwnerID == nil {
			break
		}

		return e.complexity.ControlHistory.OwnerID(childComplexity), true

	case "ControlHistory.ref":
		if e.complexity.ControlHistory.Ref == nil {
			break
		}

		return e.complexity.ControlHistory.Ref(childComplexity), true

	case "ControlHistory.satisfies":
		if e.complexity.ControlHistory.Satisfies == nil {
			break
		}

		return e.complexity.ControlHistory.Satisfies(childComplexity), true

	case "ControlHistory.source":
		if e.complexity.ControlHistory.Source == nil {
			break
		}

		return e.complexity.ControlHistory.Source(childComplexity), true

	case "ControlHistory.status":
		if e.complexity.ControlHistory.Status == nil {
			break
		}

		return e.complexity.ControlHistory.Status(childComplexity), true

	case "ControlHistory.tags":
		if e.complexity.ControlHistory.Tags == nil {
			break
		}

		return e.complexity.ControlHistory.Tags(childComplexity), true

	case "ControlHistory.updatedAt":
		if e.complexity.ControlHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlHistory.UpdatedAt(childComplexity), true

	case "ControlHistory.updatedBy":
		if e.complexity.ControlHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlHistory.UpdatedBy(childComplexity), true

	case "ControlHistory.version":
		if e.complexity.ControlHistory.Version == nil {
			break
		}

		return e.complexity.ControlHistory.Version(childComplexity), true

	case "ControlHistoryConnection.edges":
		if e.complexity.ControlHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ControlHistoryConnection.Edges(childComplexity), true

	case "ControlHistoryConnection.pageInfo":
		if e.complexity.ControlHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlHistoryConnection.PageInfo(childComplexity), true

	case "ControlHistoryConnection.totalCount":
		if e.complexity.ControlHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlHistoryConnection.TotalCount(childComplexity), true

	case "ControlHistoryEdge.cursor":
		if e.complexity.ControlHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlHistoryEdge.Cursor(childComplexity), true

	case "ControlHistoryEdge.node":
		if e.complexity.ControlHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ControlHistoryEdge.Node(childComplexity), true

	case "ControlObjective.blockedGroups":
		if e.complexity.ControlObjective.BlockedGroups == nil {
			break
		}

		return e.complexity.ControlObjective.BlockedGroups(childComplexity), true

	case "ControlObjective.class":
		if e.complexity.ControlObjective.Class == nil {
			break
		}

		return e.complexity.ControlObjective.Class(childComplexity), true

	case "ControlObjective.controlNumber":
		if e.complexity.ControlObjective.ControlNumber == nil {
			break
		}

		return e.complexity.ControlObjective.ControlNumber(childComplexity), true

	case "ControlObjective.controlObjectiveType":
		if e.complexity.ControlObjective.ControlObjectiveType == nil {
			break
		}

		return e.complexity.ControlObjective.ControlObjectiveType(childComplexity), true

	case "ControlObjective.controls":
		if e.complexity.ControlObjective.Controls == nil {
			break
		}

		return e.complexity.ControlObjective.Controls(childComplexity), true

	case "ControlObjective.createdAt":
		if e.complexity.ControlObjective.CreatedAt == nil {
			break
		}

		return e.complexity.ControlObjective.CreatedAt(childComplexity), true

	case "ControlObjective.createdBy":
		if e.complexity.ControlObjective.CreatedBy == nil {
			break
		}

		return e.complexity.ControlObjective.CreatedBy(childComplexity), true

	case "ControlObjective.deletedAt":
		if e.complexity.ControlObjective.DeletedAt == nil {
			break
		}

		return e.complexity.ControlObjective.DeletedAt(childComplexity), true

	case "ControlObjective.deletedBy":
		if e.complexity.ControlObjective.DeletedBy == nil {
			break
		}

		return e.complexity.ControlObjective.DeletedBy(childComplexity), true

	case "ControlObjective.description":
		if e.complexity.ControlObjective.Description == nil {
			break
		}

		return e.complexity.ControlObjective.Description(childComplexity), true

	case "ControlObjective.details":
		if e.complexity.ControlObjective.Details == nil {
			break
		}

		return e.complexity.ControlObjective.Details(childComplexity), true

	case "ControlObjective.editors":
		if e.complexity.ControlObjective.Editors == nil {
			break
		}

		return e.complexity.ControlObjective.Editors(childComplexity), true

	case "ControlObjective.family":
		if e.complexity.ControlObjective.Family == nil {
			break
		}

		return e.complexity.ControlObjective.Family(childComplexity), true

	case "ControlObjective.id":
		if e.complexity.ControlObjective.ID == nil {
			break
		}

		return e.complexity.ControlObjective.ID(childComplexity), true

	case "ControlObjective.internalPolicies":
		if e.complexity.ControlObjective.InternalPolicies == nil {
			break
		}

		return e.complexity.ControlObjective.InternalPolicies(childComplexity), true

	case "ControlObjective.mappedFrameworks":
		if e.complexity.ControlObjective.MappedFrameworks == nil {
			break
		}

		return e.complexity.ControlObjective.MappedFrameworks(childComplexity), true

	case "ControlObjective.name":
		if e.complexity.ControlObjective.Name == nil {
			break
		}

		return e.complexity.ControlObjective.Name(childComplexity), true

	case "ControlObjective.narratives":
		if e.complexity.ControlObjective.Narratives == nil {
			break
		}

		return e.complexity.ControlObjective.Narratives(childComplexity), true

	case "ControlObjective.owner":
		if e.complexity.ControlObjective.Owner == nil {
			break
		}

		return e.complexity.ControlObjective.Owner(childComplexity), true

	case "ControlObjective.ownerID":
		if e.complexity.ControlObjective.OwnerID == nil {
			break
		}

		return e.complexity.ControlObjective.OwnerID(childComplexity), true

	case "ControlObjective.procedures":
		if e.complexity.ControlObjective.Procedures == nil {
			break
		}

		return e.complexity.ControlObjective.Procedures(childComplexity), true

	case "ControlObjective.programs":
		if e.complexity.ControlObjective.Programs == nil {
			break
		}

		return e.complexity.ControlObjective.Programs(childComplexity), true

	case "ControlObjective.risks":
		if e.complexity.ControlObjective.Risks == nil {
			break
		}

		return e.complexity.ControlObjective.Risks(childComplexity), true

	case "ControlObjective.source":
		if e.complexity.ControlObjective.Source == nil {
			break
		}

		return e.complexity.ControlObjective.Source(childComplexity), true

	case "ControlObjective.standard":
		if e.complexity.ControlObjective.Standard == nil {
			break
		}

		return e.complexity.ControlObjective.Standard(childComplexity), true

	case "ControlObjective.status":
		if e.complexity.ControlObjective.Status == nil {
			break
		}

		return e.complexity.ControlObjective.Status(childComplexity), true

	case "ControlObjective.subcontrols":
		if e.complexity.ControlObjective.Subcontrols == nil {
			break
		}

		return e.complexity.ControlObjective.Subcontrols(childComplexity), true

	case "ControlObjective.tags":
		if e.complexity.ControlObjective.Tags == nil {
			break
		}

		return e.complexity.ControlObjective.Tags(childComplexity), true

	case "ControlObjective.tasks":
		if e.complexity.ControlObjective.Tasks == nil {
			break
		}

		return e.complexity.ControlObjective.Tasks(childComplexity), true

	case "ControlObjective.updatedAt":
		if e.complexity.ControlObjective.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlObjective.UpdatedAt(childComplexity), true

	case "ControlObjective.updatedBy":
		if e.complexity.ControlObjective.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlObjective.UpdatedBy(childComplexity), true

	case "ControlObjective.version":
		if e.complexity.ControlObjective.Version == nil {
			break
		}

		return e.complexity.ControlObjective.Version(childComplexity), true

	case "ControlObjective.viewers":
		if e.complexity.ControlObjective.Viewers == nil {
			break
		}

		return e.complexity.ControlObjective.Viewers(childComplexity), true

	case "ControlObjectiveBulkCreatePayload.controlObjectives":
		if e.complexity.ControlObjectiveBulkCreatePayload.ControlObjectives == nil {
			break
		}

		return e.complexity.ControlObjectiveBulkCreatePayload.ControlObjectives(childComplexity), true

	case "ControlObjectiveConnection.edges":
		if e.complexity.ControlObjectiveConnection.Edges == nil {
			break
		}

		return e.complexity.ControlObjectiveConnection.Edges(childComplexity), true

	case "ControlObjectiveConnection.pageInfo":
		if e.complexity.ControlObjectiveConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlObjectiveConnection.PageInfo(childComplexity), true

	case "ControlObjectiveConnection.totalCount":
		if e.complexity.ControlObjectiveConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlObjectiveConnection.TotalCount(childComplexity), true

	case "ControlObjectiveCreatePayload.controlObjective":
		if e.complexity.ControlObjectiveCreatePayload.ControlObjective == nil {
			break
		}

		return e.complexity.ControlObjectiveCreatePayload.ControlObjective(childComplexity), true

	case "ControlObjectiveDeletePayload.deletedID":
		if e.complexity.ControlObjectiveDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ControlObjectiveDeletePayload.DeletedID(childComplexity), true

	case "ControlObjectiveEdge.cursor":
		if e.complexity.ControlObjectiveEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlObjectiveEdge.Cursor(childComplexity), true

	case "ControlObjectiveEdge.node":
		if e.complexity.ControlObjectiveEdge.Node == nil {
			break
		}

		return e.complexity.ControlObjectiveEdge.Node(childComplexity), true

	case "ControlObjectiveHistory.class":
		if e.complexity.ControlObjectiveHistory.Class == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Class(childComplexity), true

	case "ControlObjectiveHistory.controlNumber":
		if e.complexity.ControlObjectiveHistory.ControlNumber == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.ControlNumber(childComplexity), true

	case "ControlObjectiveHistory.controlObjectiveType":
		if e.complexity.ControlObjectiveHistory.ControlObjectiveType == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.ControlObjectiveType(childComplexity), true

	case "ControlObjectiveHistory.createdAt":
		if e.complexity.ControlObjectiveHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.CreatedAt(childComplexity), true

	case "ControlObjectiveHistory.createdBy":
		if e.complexity.ControlObjectiveHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.CreatedBy(childComplexity), true

	case "ControlObjectiveHistory.deletedAt":
		if e.complexity.ControlObjectiveHistory.DeletedAt == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.DeletedAt(childComplexity), true

	case "ControlObjectiveHistory.deletedBy":
		if e.complexity.ControlObjectiveHistory.DeletedBy == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.DeletedBy(childComplexity), true

	case "ControlObjectiveHistory.description":
		if e.complexity.ControlObjectiveHistory.Description == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Description(childComplexity), true

	case "ControlObjectiveHistory.details":
		if e.complexity.ControlObjectiveHistory.Details == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Details(childComplexity), true

	case "ControlObjectiveHistory.family":
		if e.complexity.ControlObjectiveHistory.Family == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Family(childComplexity), true

	case "ControlObjectiveHistory.historyTime":
		if e.complexity.ControlObjectiveHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.HistoryTime(childComplexity), true

	case "ControlObjectiveHistory.id":
		if e.complexity.ControlObjectiveHistory.ID == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.ID(childComplexity), true

	case "ControlObjectiveHistory.mappedFrameworks":
		if e.complexity.ControlObjectiveHistory.MappedFrameworks == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.MappedFrameworks(childComplexity), true

	case "ControlObjectiveHistory.name":
		if e.complexity.ControlObjectiveHistory.Name == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Name(childComplexity), true

	case "ControlObjectiveHistory.operation":
		if e.complexity.ControlObjectiveHistory.Operation == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Operation(childComplexity), true

	case "ControlObjectiveHistory.ownerID":
		if e.complexity.ControlObjectiveHistory.OwnerID == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.OwnerID(childComplexity), true

	case "ControlObjectiveHistory.ref":
		if e.complexity.ControlObjectiveHistory.Ref == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Ref(childComplexity), true

	case "ControlObjectiveHistory.source":
		if e.complexity.ControlObjectiveHistory.Source == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Source(childComplexity), true

	case "ControlObjectiveHistory.status":
		if e.complexity.ControlObjectiveHistory.Status == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Status(childComplexity), true

	case "ControlObjectiveHistory.tags":
		if e.complexity.ControlObjectiveHistory.Tags == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Tags(childComplexity), true

	case "ControlObjectiveHistory.updatedAt":
		if e.complexity.ControlObjectiveHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.UpdatedAt(childComplexity), true

	case "ControlObjectiveHistory.updatedBy":
		if e.complexity.ControlObjectiveHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.UpdatedBy(childComplexity), true

	case "ControlObjectiveHistory.version":
		if e.complexity.ControlObjectiveHistory.Version == nil {
			break
		}

		return e.complexity.ControlObjectiveHistory.Version(childComplexity), true

	case "ControlObjectiveHistoryConnection.edges":
		if e.complexity.ControlObjectiveHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryConnection.Edges(childComplexity), true

	case "ControlObjectiveHistoryConnection.pageInfo":
		if e.complexity.ControlObjectiveHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryConnection.PageInfo(childComplexity), true

	case "ControlObjectiveHistoryConnection.totalCount":
		if e.complexity.ControlObjectiveHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryConnection.TotalCount(childComplexity), true

	case "ControlObjectiveHistoryEdge.cursor":
		if e.complexity.ControlObjectiveHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryEdge.Cursor(childComplexity), true

	case "ControlObjectiveHistoryEdge.node":
		if e.complexity.ControlObjectiveHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ControlObjectiveHistoryEdge.Node(childComplexity), true

	case "ControlObjectiveSearchResult.controlObjectives":
		if e.complexity.ControlObjectiveSearchResult.ControlObjectives == nil {
			break
		}

		return e.complexity.ControlObjectiveSearchResult.ControlObjectives(childComplexity), true

	case "ControlObjectiveUpdatePayload.controlObjective":
		if e.complexity.ControlObjectiveUpdatePayload.ControlObjective == nil {
			break
		}

		return e.complexity.ControlObjectiveUpdatePayload.ControlObjective(childComplexity), true

	case "ControlSearchResult.controls":
		if e.complexity.ControlSearchResult.Controls == nil {
			break
		}

		return e.complexity.ControlSearchResult.Controls(childComplexity), true

	case "ControlUpdatePayload.control":
		if e.complexity.ControlUpdatePayload.Control == nil {
			break
		}

		return e.complexity.ControlUpdatePayload.Control(childComplexity), true

	case "DocumentData.createdAt":
		if e.complexity.DocumentData.CreatedAt == nil {
			break
		}

		return e.complexity.DocumentData.CreatedAt(childComplexity), true

	case "DocumentData.createdBy":
		if e.complexity.DocumentData.CreatedBy == nil {
			break
		}

		return e.complexity.DocumentData.CreatedBy(childComplexity), true

	case "DocumentData.data":
		if e.complexity.DocumentData.Data == nil {
			break
		}

		return e.complexity.DocumentData.Data(childComplexity), true

	case "DocumentData.deletedAt":
		if e.complexity.DocumentData.DeletedAt == nil {
			break
		}

		return e.complexity.DocumentData.DeletedAt(childComplexity), true

	case "DocumentData.deletedBy":
		if e.complexity.DocumentData.DeletedBy == nil {
			break
		}

		return e.complexity.DocumentData.DeletedBy(childComplexity), true

	case "DocumentData.entity":
		if e.complexity.DocumentData.Entity == nil {
			break
		}

		return e.complexity.DocumentData.Entity(childComplexity), true

	case "DocumentData.files":
		if e.complexity.DocumentData.Files == nil {
			break
		}

		return e.complexity.DocumentData.Files(childComplexity), true

	case "DocumentData.id":
		if e.complexity.DocumentData.ID == nil {
			break
		}

		return e.complexity.DocumentData.ID(childComplexity), true

	case "DocumentData.owner":
		if e.complexity.DocumentData.Owner == nil {
			break
		}

		return e.complexity.DocumentData.Owner(childComplexity), true

	case "DocumentData.ownerID":
		if e.complexity.DocumentData.OwnerID == nil {
			break
		}

		return e.complexity.DocumentData.OwnerID(childComplexity), true

	case "DocumentData.tags":
		if e.complexity.DocumentData.Tags == nil {
			break
		}

		return e.complexity.DocumentData.Tags(childComplexity), true

	case "DocumentData.template":
		if e.complexity.DocumentData.Template == nil {
			break
		}

		return e.complexity.DocumentData.Template(childComplexity), true

	case "DocumentData.templateID":
		if e.complexity.DocumentData.TemplateID == nil {
			break
		}

		return e.complexity.DocumentData.TemplateID(childComplexity), true

	case "DocumentData.updatedAt":
		if e.complexity.DocumentData.UpdatedAt == nil {
			break
		}

		return e.complexity.DocumentData.UpdatedAt(childComplexity), true

	case "DocumentData.updatedBy":
		if e.complexity.DocumentData.UpdatedBy == nil {
			break
		}

		return e.complexity.DocumentData.UpdatedBy(childComplexity), true

	case "DocumentDataBulkCreatePayload.documentData":
		if e.complexity.DocumentDataBulkCreatePayload.DocumentData == nil {
			break
		}

		return e.complexity.DocumentDataBulkCreatePayload.DocumentData(childComplexity), true

	case "DocumentDataConnection.edges":
		if e.complexity.DocumentDataConnection.Edges == nil {
			break
		}

		return e.complexity.DocumentDataConnection.Edges(childComplexity), true

	case "DocumentDataConnection.pageInfo":
		if e.complexity.DocumentDataConnection.PageInfo == nil {
			break
		}

		return e.complexity.DocumentDataConnection.PageInfo(childComplexity), true

	case "DocumentDataConnection.totalCount":
		if e.complexity.DocumentDataConnection.TotalCount == nil {
			break
		}

		return e.complexity.DocumentDataConnection.TotalCount(childComplexity), true

	case "DocumentDataCreatePayload.documentData":
		if e.complexity.DocumentDataCreatePayload.DocumentData == nil {
			break
		}

		return e.complexity.DocumentDataCreatePayload.DocumentData(childComplexity), true

	case "DocumentDataDeletePayload.deletedID":
		if e.complexity.DocumentDataDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.DocumentDataDeletePayload.DeletedID(childComplexity), true

	case "DocumentDataEdge.cursor":
		if e.complexity.DocumentDataEdge.Cursor == nil {
			break
		}

		return e.complexity.DocumentDataEdge.Cursor(childComplexity), true

	case "DocumentDataEdge.node":
		if e.complexity.DocumentDataEdge.Node == nil {
			break
		}

		return e.complexity.DocumentDataEdge.Node(childComplexity), true

	case "DocumentDataHistory.createdAt":
		if e.complexity.DocumentDataHistory.CreatedAt == nil {
			break
		}

		return e.complexity.DocumentDataHistory.CreatedAt(childComplexity), true

	case "DocumentDataHistory.createdBy":
		if e.complexity.DocumentDataHistory.CreatedBy == nil {
			break
		}

		return e.complexity.DocumentDataHistory.CreatedBy(childComplexity), true

	case "DocumentDataHistory.data":
		if e.complexity.DocumentDataHistory.Data == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Data(childComplexity), true

	case "DocumentDataHistory.deletedAt":
		if e.complexity.DocumentDataHistory.DeletedAt == nil {
			break
		}

		return e.complexity.DocumentDataHistory.DeletedAt(childComplexity), true

	case "DocumentDataHistory.deletedBy":
		if e.complexity.DocumentDataHistory.DeletedBy == nil {
			break
		}

		return e.complexity.DocumentDataHistory.DeletedBy(childComplexity), true

	case "DocumentDataHistory.historyTime":
		if e.complexity.DocumentDataHistory.HistoryTime == nil {
			break
		}

		return e.complexity.DocumentDataHistory.HistoryTime(childComplexity), true

	case "DocumentDataHistory.id":
		if e.complexity.DocumentDataHistory.ID == nil {
			break
		}

		return e.complexity.DocumentDataHistory.ID(childComplexity), true

	case "DocumentDataHistory.operation":
		if e.complexity.DocumentDataHistory.Operation == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Operation(childComplexity), true

	case "DocumentDataHistory.ownerID":
		if e.complexity.DocumentDataHistory.OwnerID == nil {
			break
		}

		return e.complexity.DocumentDataHistory.OwnerID(childComplexity), true

	case "DocumentDataHistory.ref":
		if e.complexity.DocumentDataHistory.Ref == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Ref(childComplexity), true

	case "DocumentDataHistory.tags":
		if e.complexity.DocumentDataHistory.Tags == nil {
			break
		}

		return e.complexity.DocumentDataHistory.Tags(childComplexity), true

	case "DocumentDataHistory.templateID":
		if e.complexity.DocumentDataHistory.TemplateID == nil {
			break
		}

		return e.complexity.DocumentDataHistory.TemplateID(childComplexity), true

	case "DocumentDataHistory.updatedAt":
		if e.complexity.DocumentDataHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.DocumentDataHistory.UpdatedAt(childComplexity), true

	case "DocumentDataHistory.updatedBy":
		if e.complexity.DocumentDataHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.DocumentDataHistory.UpdatedBy(childComplexity), true

	case "DocumentDataHistoryConnection.edges":
		if e.complexity.DocumentDataHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.DocumentDataHistoryConnection.Edges(childComplexity), true

	case "DocumentDataHistoryConnection.pageInfo":
		if e.complexity.DocumentDataHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.DocumentDataHistoryConnection.PageInfo(childComplexity), true

	case "DocumentDataHistoryConnection.totalCount":
		if e.complexity.DocumentDataHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.DocumentDataHistoryConnection.TotalCount(childComplexity), true

	case "DocumentDataHistoryEdge.cursor":
		if e.complexity.DocumentDataHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.DocumentDataHistoryEdge.Cursor(childComplexity), true

	case "DocumentDataHistoryEdge.node":
		if e.complexity.DocumentDataHistoryEdge.Node == nil {
			break
		}

		return e.complexity.DocumentDataHistoryEdge.Node(childComplexity), true

	case "DocumentDataSearchResult.documentData":
		if e.complexity.DocumentDataSearchResult.DocumentData == nil {
			break
		}

		return e.complexity.DocumentDataSearchResult.DocumentData(childComplexity), true

	case "DocumentDataUpdatePayload.documentData":
		if e.complexity.DocumentDataUpdatePayload.DocumentData == nil {
			break
		}

		return e.complexity.DocumentDataUpdatePayload.DocumentData(childComplexity), true

	case "Entity.contacts":
		if e.complexity.Entity.Contacts == nil {
			break
		}

		return e.complexity.Entity.Contacts(childComplexity), true

	case "Entity.createdAt":
		if e.complexity.Entity.CreatedAt == nil {
			break
		}

		return e.complexity.Entity.CreatedAt(childComplexity), true

	case "Entity.createdBy":
		if e.complexity.Entity.CreatedBy == nil {
			break
		}

		return e.complexity.Entity.CreatedBy(childComplexity), true

	case "Entity.deletedAt":
		if e.complexity.Entity.DeletedAt == nil {
			break
		}

		return e.complexity.Entity.DeletedAt(childComplexity), true

	case "Entity.deletedBy":
		if e.complexity.Entity.DeletedBy == nil {
			break
		}

		return e.complexity.Entity.DeletedBy(childComplexity), true

	case "Entity.description":
		if e.complexity.Entity.Description == nil {
			break
		}

		return e.complexity.Entity.Description(childComplexity), true

	case "Entity.displayName":
		if e.complexity.Entity.DisplayName == nil {
			break
		}

		return e.complexity.Entity.DisplayName(childComplexity), true

	case "Entity.documents":
		if e.complexity.Entity.Documents == nil {
			break
		}

		return e.complexity.Entity.Documents(childComplexity), true

	case "Entity.domains":
		if e.complexity.Entity.Domains == nil {
			break
		}

		return e.complexity.Entity.Domains(childComplexity), true

	case "Entity.entityType":
		if e.complexity.Entity.EntityType == nil {
			break
		}

		return e.complexity.Entity.EntityType(childComplexity), true

	case "Entity.entityTypeID":
		if e.complexity.Entity.EntityTypeID == nil {
			break
		}

		return e.complexity.Entity.EntityTypeID(childComplexity), true

	case "Entity.files":
		if e.complexity.Entity.Files == nil {
			break
		}

		return e.complexity.Entity.Files(childComplexity), true

	case "Entity.id":
		if e.complexity.Entity.ID == nil {
			break
		}

		return e.complexity.Entity.ID(childComplexity), true

	case "Entity.name":
		if e.complexity.Entity.Name == nil {
			break
		}

		return e.complexity.Entity.Name(childComplexity), true

	case "Entity.notes":
		if e.complexity.Entity.Notes == nil {
			break
		}

		return e.complexity.Entity.Notes(childComplexity), true

	case "Entity.owner":
		if e.complexity.Entity.Owner == nil {
			break
		}

		return e.complexity.Entity.Owner(childComplexity), true

	case "Entity.ownerID":
		if e.complexity.Entity.OwnerID == nil {
			break
		}

		return e.complexity.Entity.OwnerID(childComplexity), true

	case "Entity.status":
		if e.complexity.Entity.Status == nil {
			break
		}

		return e.complexity.Entity.Status(childComplexity), true

	case "Entity.tags":
		if e.complexity.Entity.Tags == nil {
			break
		}

		return e.complexity.Entity.Tags(childComplexity), true

	case "Entity.updatedAt":
		if e.complexity.Entity.UpdatedAt == nil {
			break
		}

		return e.complexity.Entity.UpdatedAt(childComplexity), true

	case "Entity.updatedBy":
		if e.complexity.Entity.UpdatedBy == nil {
			break
		}

		return e.complexity.Entity.UpdatedBy(childComplexity), true

	case "EntityBulkCreatePayload.entities":
		if e.complexity.EntityBulkCreatePayload.Entities == nil {
			break
		}

		return e.complexity.EntityBulkCreatePayload.Entities(childComplexity), true

	case "EntityConnection.edges":
		if e.complexity.EntityConnection.Edges == nil {
			break
		}

		return e.complexity.EntityConnection.Edges(childComplexity), true

	case "EntityConnection.pageInfo":
		if e.complexity.EntityConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityConnection.PageInfo(childComplexity), true

	case "EntityConnection.totalCount":
		if e.complexity.EntityConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityConnection.TotalCount(childComplexity), true

	case "EntityCreatePayload.entity":
		if e.complexity.EntityCreatePayload.Entity == nil {
			break
		}

		return e.complexity.EntityCreatePayload.Entity(childComplexity), true

	case "EntityDeletePayload.deletedID":
		if e.complexity.EntityDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.EntityDeletePayload.DeletedID(childComplexity), true

	case "EntityEdge.cursor":
		if e.complexity.EntityEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityEdge.Cursor(childComplexity), true

	case "EntityEdge.node":
		if e.complexity.EntityEdge.Node == nil {
			break
		}

		return e.complexity.EntityEdge.Node(childComplexity), true

	case "EntityHistory.createdAt":
		if e.complexity.EntityHistory.CreatedAt == nil {
			break
		}

		return e.complexity.EntityHistory.CreatedAt(childComplexity), true

	case "EntityHistory.createdBy":
		if e.complexity.EntityHistory.CreatedBy == nil {
			break
		}

		return e.complexity.EntityHistory.CreatedBy(childComplexity), true

	case "EntityHistory.deletedAt":
		if e.complexity.EntityHistory.DeletedAt == nil {
			break
		}

		return e.complexity.EntityHistory.DeletedAt(childComplexity), true

	case "EntityHistory.deletedBy":
		if e.complexity.EntityHistory.DeletedBy == nil {
			break
		}

		return e.complexity.EntityHistory.DeletedBy(childComplexity), true

	case "EntityHistory.description":
		if e.complexity.EntityHistory.Description == nil {
			break
		}

		return e.complexity.EntityHistory.Description(childComplexity), true

	case "EntityHistory.displayName":
		if e.complexity.EntityHistory.DisplayName == nil {
			break
		}

		return e.complexity.EntityHistory.DisplayName(childComplexity), true

	case "EntityHistory.domains":
		if e.complexity.EntityHistory.Domains == nil {
			break
		}

		return e.complexity.EntityHistory.Domains(childComplexity), true

	case "EntityHistory.entityTypeID":
		if e.complexity.EntityHistory.EntityTypeID == nil {
			break
		}

		return e.complexity.EntityHistory.EntityTypeID(childComplexity), true

	case "EntityHistory.historyTime":
		if e.complexity.EntityHistory.HistoryTime == nil {
			break
		}

		return e.complexity.EntityHistory.HistoryTime(childComplexity), true

	case "EntityHistory.id":
		if e.complexity.EntityHistory.ID == nil {
			break
		}

		return e.complexity.EntityHistory.ID(childComplexity), true

	case "EntityHistory.name":
		if e.complexity.EntityHistory.Name == nil {
			break
		}

		return e.complexity.EntityHistory.Name(childComplexity), true

	case "EntityHistory.operation":
		if e.complexity.EntityHistory.Operation == nil {
			break
		}

		return e.complexity.EntityHistory.Operation(childComplexity), true

	case "EntityHistory.ownerID":
		if e.complexity.EntityHistory.OwnerID == nil {
			break
		}

		return e.complexity.EntityHistory.OwnerID(childComplexity), true

	case "EntityHistory.ref":
		if e.complexity.EntityHistory.Ref == nil {
			break
		}

		return e.complexity.EntityHistory.Ref(childComplexity), true

	case "EntityHistory.status":
		if e.complexity.EntityHistory.Status == nil {
			break
		}

		return e.complexity.EntityHistory.Status(childComplexity), true

	case "EntityHistory.tags":
		if e.complexity.EntityHistory.Tags == nil {
			break
		}

		return e.complexity.EntityHistory.Tags(childComplexity), true

	case "EntityHistory.updatedAt":
		if e.complexity.EntityHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.EntityHistory.UpdatedAt(childComplexity), true

	case "EntityHistory.updatedBy":
		if e.complexity.EntityHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.EntityHistory.UpdatedBy(childComplexity), true

	case "EntityHistoryConnection.edges":
		if e.complexity.EntityHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.EntityHistoryConnection.Edges(childComplexity), true

	case "EntityHistoryConnection.pageInfo":
		if e.complexity.EntityHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityHistoryConnection.PageInfo(childComplexity), true

	case "EntityHistoryConnection.totalCount":
		if e.complexity.EntityHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityHistoryConnection.TotalCount(childComplexity), true

	case "EntityHistoryEdge.cursor":
		if e.complexity.EntityHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityHistoryEdge.Cursor(childComplexity), true

	case "EntityHistoryEdge.node":
		if e.complexity.EntityHistoryEdge.Node == nil {
			break
		}

		return e.complexity.EntityHistoryEdge.Node(childComplexity), true

	case "EntitySearchResult.entities":
		if e.complexity.EntitySearchResult.Entities == nil {
			break
		}

		return e.complexity.EntitySearchResult.Entities(childComplexity), true

	case "EntityType.createdAt":
		if e.complexity.EntityType.CreatedAt == nil {
			break
		}

		return e.complexity.EntityType.CreatedAt(childComplexity), true

	case "EntityType.createdBy":
		if e.complexity.EntityType.CreatedBy == nil {
			break
		}

		return e.complexity.EntityType.CreatedBy(childComplexity), true

	case "EntityType.deletedAt":
		if e.complexity.EntityType.DeletedAt == nil {
			break
		}

		return e.complexity.EntityType.DeletedAt(childComplexity), true

	case "EntityType.deletedBy":
		if e.complexity.EntityType.DeletedBy == nil {
			break
		}

		return e.complexity.EntityType.DeletedBy(childComplexity), true

	case "EntityType.entities":
		if e.complexity.EntityType.Entities == nil {
			break
		}

		return e.complexity.EntityType.Entities(childComplexity), true

	case "EntityType.id":
		if e.complexity.EntityType.ID == nil {
			break
		}

		return e.complexity.EntityType.ID(childComplexity), true

	case "EntityType.name":
		if e.complexity.EntityType.Name == nil {
			break
		}

		return e.complexity.EntityType.Name(childComplexity), true

	case "EntityType.owner":
		if e.complexity.EntityType.Owner == nil {
			break
		}

		return e.complexity.EntityType.Owner(childComplexity), true

	case "EntityType.ownerID":
		if e.complexity.EntityType.OwnerID == nil {
			break
		}

		return e.complexity.EntityType.OwnerID(childComplexity), true

	case "EntityType.tags":
		if e.complexity.EntityType.Tags == nil {
			break
		}

		return e.complexity.EntityType.Tags(childComplexity), true

	case "EntityType.updatedAt":
		if e.complexity.EntityType.UpdatedAt == nil {
			break
		}

		return e.complexity.EntityType.UpdatedAt(childComplexity), true

	case "EntityType.updatedBy":
		if e.complexity.EntityType.UpdatedBy == nil {
			break
		}

		return e.complexity.EntityType.UpdatedBy(childComplexity), true

	case "EntityTypeBulkCreatePayload.entityTypes":
		if e.complexity.EntityTypeBulkCreatePayload.EntityTypes == nil {
			break
		}

		return e.complexity.EntityTypeBulkCreatePayload.EntityTypes(childComplexity), true

	case "EntityTypeConnection.edges":
		if e.complexity.EntityTypeConnection.Edges == nil {
			break
		}

		return e.complexity.EntityTypeConnection.Edges(childComplexity), true

	case "EntityTypeConnection.pageInfo":
		if e.complexity.EntityTypeConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityTypeConnection.PageInfo(childComplexity), true

	case "EntityTypeConnection.totalCount":
		if e.complexity.EntityTypeConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityTypeConnection.TotalCount(childComplexity), true

	case "EntityTypeCreatePayload.entityType":
		if e.complexity.EntityTypeCreatePayload.EntityType == nil {
			break
		}

		return e.complexity.EntityTypeCreatePayload.EntityType(childComplexity), true

	case "EntityTypeDeletePayload.deletedID":
		if e.complexity.EntityTypeDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.EntityTypeDeletePayload.DeletedID(childComplexity), true

	case "EntityTypeEdge.cursor":
		if e.complexity.EntityTypeEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityTypeEdge.Cursor(childComplexity), true

	case "EntityTypeEdge.node":
		if e.complexity.EntityTypeEdge.Node == nil {
			break
		}

		return e.complexity.EntityTypeEdge.Node(childComplexity), true

	case "EntityTypeHistory.createdAt":
		if e.complexity.EntityTypeHistory.CreatedAt == nil {
			break
		}

		return e.complexity.EntityTypeHistory.CreatedAt(childComplexity), true

	case "EntityTypeHistory.createdBy":
		if e.complexity.EntityTypeHistory.CreatedBy == nil {
			break
		}

		return e.complexity.EntityTypeHistory.CreatedBy(childComplexity), true

	case "EntityTypeHistory.deletedAt":
		if e.complexity.EntityTypeHistory.DeletedAt == nil {
			break
		}

		return e.complexity.EntityTypeHistory.DeletedAt(childComplexity), true

	case "EntityTypeHistory.deletedBy":
		if e.complexity.EntityTypeHistory.DeletedBy == nil {
			break
		}

		return e.complexity.EntityTypeHistory.DeletedBy(childComplexity), true

	case "EntityTypeHistory.historyTime":
		if e.complexity.EntityTypeHistory.HistoryTime == nil {
			break
		}

		return e.complexity.EntityTypeHistory.HistoryTime(childComplexity), true

	case "EntityTypeHistory.id":
		if e.complexity.EntityTypeHistory.ID == nil {
			break
		}

		return e.complexity.EntityTypeHistory.ID(childComplexity), true

	case "EntityTypeHistory.name":
		if e.complexity.EntityTypeHistory.Name == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Name(childComplexity), true

	case "EntityTypeHistory.operation":
		if e.complexity.EntityTypeHistory.Operation == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Operation(childComplexity), true

	case "EntityTypeHistory.ownerID":
		if e.complexity.EntityTypeHistory.OwnerID == nil {
			break
		}

		return e.complexity.EntityTypeHistory.OwnerID(childComplexity), true

	case "EntityTypeHistory.ref":
		if e.complexity.EntityTypeHistory.Ref == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Ref(childComplexity), true

	case "EntityTypeHistory.tags":
		if e.complexity.EntityTypeHistory.Tags == nil {
			break
		}

		return e.complexity.EntityTypeHistory.Tags(childComplexity), true

	case "EntityTypeHistory.updatedAt":
		if e.complexity.EntityTypeHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.EntityTypeHistory.UpdatedAt(childComplexity), true

	case "EntityTypeHistory.updatedBy":
		if e.complexity.EntityTypeHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.EntityTypeHistory.UpdatedBy(childComplexity), true

	case "EntityTypeHistoryConnection.edges":
		if e.complexity.EntityTypeHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.EntityTypeHistoryConnection.Edges(childComplexity), true

	case "EntityTypeHistoryConnection.pageInfo":
		if e.complexity.EntityTypeHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntityTypeHistoryConnection.PageInfo(childComplexity), true

	case "EntityTypeHistoryConnection.totalCount":
		if e.complexity.EntityTypeHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.EntityTypeHistoryConnection.TotalCount(childComplexity), true

	case "EntityTypeHistoryEdge.cursor":
		if e.complexity.EntityTypeHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.EntityTypeHistoryEdge.Cursor(childComplexity), true

	case "EntityTypeHistoryEdge.node":
		if e.complexity.EntityTypeHistoryEdge.Node == nil {
			break
		}

		return e.complexity.EntityTypeHistoryEdge.Node(childComplexity), true

	case "EntityTypeSearchResult.entityTypes":
		if e.complexity.EntityTypeSearchResult.EntityTypes == nil {
			break
		}

		return e.complexity.EntityTypeSearchResult.EntityTypes(childComplexity), true

	case "EntityTypeUpdatePayload.entityType":
		if e.complexity.EntityTypeUpdatePayload.EntityType == nil {
			break
		}

		return e.complexity.EntityTypeUpdatePayload.EntityType(childComplexity), true

	case "EntityUpdatePayload.entity":
		if e.complexity.EntityUpdatePayload.Entity == nil {
			break
		}

		return e.complexity.EntityUpdatePayload.Entity(childComplexity), true

	case "Event.correlationID":
		if e.complexity.Event.CorrelationID == nil {
			break
		}

		return e.complexity.Event.CorrelationID(childComplexity), true

	case "Event.createdAt":
		if e.complexity.Event.CreatedAt == nil {
			break
		}

		return e.complexity.Event.CreatedAt(childComplexity), true

	case "Event.createdBy":
		if e.complexity.Event.CreatedBy == nil {
			break
		}

		return e.complexity.Event.CreatedBy(childComplexity), true

	case "Event.eventID":
		if e.complexity.Event.EventID == nil {
			break
		}

		return e.complexity.Event.EventID(childComplexity), true

	case "Event.eventType":
		if e.complexity.Event.EventType == nil {
			break
		}

		return e.complexity.Event.EventType(childComplexity), true

	case "Event.file":
		if e.complexity.Event.File == nil {
			break
		}

		return e.complexity.Event.File(childComplexity), true

	case "Event.group":
		if e.complexity.Event.Group == nil {
			break
		}

		return e.complexity.Event.Group(childComplexity), true

	case "Event.groupmembership":
		if e.complexity.Event.Groupmembership == nil {
			break
		}

		return e.complexity.Event.Groupmembership(childComplexity), true

	case "Event.hush":
		if e.complexity.Event.Hush == nil {
			break
		}

		return e.complexity.Event.Hush(childComplexity), true

	case "Event.id":
		if e.complexity.Event.ID == nil {
			break
		}

		return e.complexity.Event.ID(childComplexity), true

	case "Event.integration":
		if e.complexity.Event.Integration == nil {
			break
		}

		return e.complexity.Event.Integration(childComplexity), true

	case "Event.invite":
		if e.complexity.Event.Invite == nil {
			break
		}

		return e.complexity.Event.Invite(childComplexity), true

	case "Event.metadata":
		if e.complexity.Event.Metadata == nil {
			break
		}

		return e.complexity.Event.Metadata(childComplexity), true

	case "Event.organization":
		if e.complexity.Event.Organization == nil {
			break
		}

		return e.complexity.Event.Organization(childComplexity), true

	case "Event.orgmembership":
		if e.complexity.Event.Orgmembership == nil {
			break
		}

		return e.complexity.Event.Orgmembership(childComplexity), true

	case "Event.personalAccessToken":
		if e.complexity.Event.PersonalAccessToken == nil {
			break
		}

		return e.complexity.Event.PersonalAccessToken(childComplexity), true

	case "Event.subscriber":
		if e.complexity.Event.Subscriber == nil {
			break
		}

		return e.complexity.Event.Subscriber(childComplexity), true

	case "Event.tags":
		if e.complexity.Event.Tags == nil {
			break
		}

		return e.complexity.Event.Tags(childComplexity), true

	case "Event.updatedAt":
		if e.complexity.Event.UpdatedAt == nil {
			break
		}

		return e.complexity.Event.UpdatedAt(childComplexity), true

	case "Event.updatedBy":
		if e.complexity.Event.UpdatedBy == nil {
			break
		}

		return e.complexity.Event.UpdatedBy(childComplexity), true

	case "Event.user":
		if e.complexity.Event.User == nil {
			break
		}

		return e.complexity.Event.User(childComplexity), true

	case "EventBulkCreatePayload.events":
		if e.complexity.EventBulkCreatePayload.Events == nil {
			break
		}

		return e.complexity.EventBulkCreatePayload.Events(childComplexity), true

	case "EventConnection.edges":
		if e.complexity.EventConnection.Edges == nil {
			break
		}

		return e.complexity.EventConnection.Edges(childComplexity), true

	case "EventConnection.pageInfo":
		if e.complexity.EventConnection.PageInfo == nil {
			break
		}

		return e.complexity.EventConnection.PageInfo(childComplexity), true

	case "EventConnection.totalCount":
		if e.complexity.EventConnection.TotalCount == nil {
			break
		}

		return e.complexity.EventConnection.TotalCount(childComplexity), true

	case "EventCreatePayload.event":
		if e.complexity.EventCreatePayload.Event == nil {
			break
		}

		return e.complexity.EventCreatePayload.Event(childComplexity), true

	case "EventDeletePayload.deletedID":
		if e.complexity.EventDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.EventDeletePayload.DeletedID(childComplexity), true

	case "EventEdge.cursor":
		if e.complexity.EventEdge.Cursor == nil {
			break
		}

		return e.complexity.EventEdge.Cursor(childComplexity), true

	case "EventEdge.node":
		if e.complexity.EventEdge.Node == nil {
			break
		}

		return e.complexity.EventEdge.Node(childComplexity), true

	case "EventHistory.correlationID":
		if e.complexity.EventHistory.CorrelationID == nil {
			break
		}

		return e.complexity.EventHistory.CorrelationID(childComplexity), true

	case "EventHistory.createdAt":
		if e.complexity.EventHistory.CreatedAt == nil {
			break
		}

		return e.complexity.EventHistory.CreatedAt(childComplexity), true

	case "EventHistory.createdBy":
		if e.complexity.EventHistory.CreatedBy == nil {
			break
		}

		return e.complexity.EventHistory.CreatedBy(childComplexity), true

	case "EventHistory.eventID":
		if e.complexity.EventHistory.EventID == nil {
			break
		}

		return e.complexity.EventHistory.EventID(childComplexity), true

	case "EventHistory.eventType":
		if e.complexity.EventHistory.EventType == nil {
			break
		}

		return e.complexity.EventHistory.EventType(childComplexity), true

	case "EventHistory.historyTime":
		if e.complexity.EventHistory.HistoryTime == nil {
			break
		}

		return e.complexity.EventHistory.HistoryTime(childComplexity), true

	case "EventHistory.id":
		if e.complexity.EventHistory.ID == nil {
			break
		}

		return e.complexity.EventHistory.ID(childComplexity), true

	case "EventHistory.metadata":
		if e.complexity.EventHistory.Metadata == nil {
			break
		}

		return e.complexity.EventHistory.Metadata(childComplexity), true

	case "EventHistory.operation":
		if e.complexity.EventHistory.Operation == nil {
			break
		}

		return e.complexity.EventHistory.Operation(childComplexity), true

	case "EventHistory.ref":
		if e.complexity.EventHistory.Ref == nil {
			break
		}

		return e.complexity.EventHistory.Ref(childComplexity), true

	case "EventHistory.tags":
		if e.complexity.EventHistory.Tags == nil {
			break
		}

		return e.complexity.EventHistory.Tags(childComplexity), true

	case "EventHistory.updatedAt":
		if e.complexity.EventHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.EventHistory.UpdatedAt(childComplexity), true

	case "EventHistory.updatedBy":
		if e.complexity.EventHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.EventHistory.UpdatedBy(childComplexity), true

	case "EventHistoryConnection.edges":
		if e.complexity.EventHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.EventHistoryConnection.Edges(childComplexity), true

	case "EventHistoryConnection.pageInfo":
		if e.complexity.EventHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.EventHistoryConnection.PageInfo(childComplexity), true

	case "EventHistoryConnection.totalCount":
		if e.complexity.EventHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.EventHistoryConnection.TotalCount(childComplexity), true

	case "EventHistoryEdge.cursor":
		if e.complexity.EventHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.EventHistoryEdge.Cursor(childComplexity), true

	case "EventHistoryEdge.node":
		if e.complexity.EventHistoryEdge.Node == nil {
			break
		}

		return e.complexity.EventHistoryEdge.Node(childComplexity), true

	case "EventSearchResult.events":
		if e.complexity.EventSearchResult.Events == nil {
			break
		}

		return e.complexity.EventSearchResult.Events(childComplexity), true

	case "EventUpdatePayload.event":
		if e.complexity.EventUpdatePayload.Event == nil {
			break
		}

		return e.complexity.EventUpdatePayload.Event(childComplexity), true

	case "File.categoryType":
		if e.complexity.File.CategoryType == nil {
			break
		}

		return e.complexity.File.CategoryType(childComplexity), true

	case "File.contact":
		if e.complexity.File.Contact == nil {
			break
		}

		return e.complexity.File.Contact(childComplexity), true

	case "File.createdAt":
		if e.complexity.File.CreatedAt == nil {
			break
		}

		return e.complexity.File.CreatedAt(childComplexity), true

	case "File.createdBy":
		if e.complexity.File.CreatedBy == nil {
			break
		}

		return e.complexity.File.CreatedBy(childComplexity), true

	case "File.deletedAt":
		if e.complexity.File.DeletedAt == nil {
			break
		}

		return e.complexity.File.DeletedAt(childComplexity), true

	case "File.deletedBy":
		if e.complexity.File.DeletedBy == nil {
			break
		}

		return e.complexity.File.DeletedBy(childComplexity), true

	case "File.detectedContentType":
		if e.complexity.File.DetectedContentType == nil {
			break
		}

		return e.complexity.File.DetectedContentType(childComplexity), true

	case "File.detectedMimeType":
		if e.complexity.File.DetectedMimeType == nil {
			break
		}

		return e.complexity.File.DetectedMimeType(childComplexity), true

	case "File.documentData":
		if e.complexity.File.DocumentData == nil {
			break
		}

		return e.complexity.File.DocumentData(childComplexity), true

	case "File.entity":
		if e.complexity.File.Entity == nil {
			break
		}

		return e.complexity.File.Entity(childComplexity), true

	case "File.events":
		if e.complexity.File.Events == nil {
			break
		}

		return e.complexity.File.Events(childComplexity), true

	case "File.group":
		if e.complexity.File.Group == nil {
			break
		}

		return e.complexity.File.Group(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.md5Hash":
		if e.complexity.File.Md5Hash == nil {
			break
		}

		return e.complexity.File.Md5Hash(childComplexity), true

	case "File.organization":
		if e.complexity.File.Organization == nil {
			break
		}

		return e.complexity.File.Organization(childComplexity), true

	case "File.organizationSetting":
		if e.complexity.File.OrganizationSetting == nil {
			break
		}

		return e.complexity.File.OrganizationSetting(childComplexity), true

	case "File.persistedFileSize":
		if e.complexity.File.PersistedFileSize == nil {
			break
		}

		return e.complexity.File.PersistedFileSize(childComplexity), true

	case "File.presignedURL":
		if e.complexity.File.PresignedURL == nil {
			break
		}

		return e.complexity.File.PresignedURL(childComplexity), true

	case "File.program":
		if e.complexity.File.Program == nil {
			break
		}

		return e.complexity.File.Program(childComplexity), true

	case "File.providedFileExtension":
		if e.complexity.File.ProvidedFileExtension == nil {
			break
		}

		return e.complexity.File.ProvidedFileExtension(childComplexity), true

	case "File.providedFileName":
		if e.complexity.File.ProvidedFileName == nil {
			break
		}

		return e.complexity.File.ProvidedFileName(childComplexity), true

	case "File.providedFileSize":
		if e.complexity.File.ProvidedFileSize == nil {
			break
		}

		return e.complexity.File.ProvidedFileSize(childComplexity), true

	case "File.storagePath":
		if e.complexity.File.StoragePath == nil {
			break
		}

		return e.complexity.File.StoragePath(childComplexity), true

	case "File.storageScheme":
		if e.complexity.File.StorageScheme == nil {
			break
		}

		return e.complexity.File.StorageScheme(childComplexity), true

	case "File.storageVolume":
		if e.complexity.File.StorageVolume == nil {
			break
		}

		return e.complexity.File.StorageVolume(childComplexity), true

	case "File.storeKey":
		if e.complexity.File.StoreKey == nil {
			break
		}

		return e.complexity.File.StoreKey(childComplexity), true

	case "File.tags":
		if e.complexity.File.Tags == nil {
			break
		}

		return e.complexity.File.Tags(childComplexity), true

	case "File.template":
		if e.complexity.File.Template == nil {
			break
		}

		return e.complexity.File.Template(childComplexity), true

	case "File.uri":
		if e.complexity.File.URI == nil {
			break
		}

		return e.complexity.File.URI(childComplexity), true

	case "File.updatedAt":
		if e.complexity.File.UpdatedAt == nil {
			break
		}

		return e.complexity.File.UpdatedAt(childComplexity), true

	case "File.updatedBy":
		if e.complexity.File.UpdatedBy == nil {
			break
		}

		return e.complexity.File.UpdatedBy(childComplexity), true

	case "File.user":
		if e.complexity.File.User == nil {
			break
		}

		return e.complexity.File.User(childComplexity), true

	case "File.userSetting":
		if e.complexity.File.UserSetting == nil {
			break
		}

		return e.complexity.File.UserSetting(childComplexity), true

	case "FileConnection.edges":
		if e.complexity.FileConnection.Edges == nil {
			break
		}

		return e.complexity.FileConnection.Edges(childComplexity), true

	case "FileConnection.pageInfo":
		if e.complexity.FileConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileConnection.PageInfo(childComplexity), true

	case "FileConnection.totalCount":
		if e.complexity.FileConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileConnection.TotalCount(childComplexity), true

	case "FileDeletePayload.deletedID":
		if e.complexity.FileDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.FileDeletePayload.DeletedID(childComplexity), true

	case "FileEdge.cursor":
		if e.complexity.FileEdge.Cursor == nil {
			break
		}

		return e.complexity.FileEdge.Cursor(childComplexity), true

	case "FileEdge.node":
		if e.complexity.FileEdge.Node == nil {
			break
		}

		return e.complexity.FileEdge.Node(childComplexity), true

	case "FileHistory.categoryType":
		if e.complexity.FileHistory.CategoryType == nil {
			break
		}

		return e.complexity.FileHistory.CategoryType(childComplexity), true

	case "FileHistory.createdAt":
		if e.complexity.FileHistory.CreatedAt == nil {
			break
		}

		return e.complexity.FileHistory.CreatedAt(childComplexity), true

	case "FileHistory.createdBy":
		if e.complexity.FileHistory.CreatedBy == nil {
			break
		}

		return e.complexity.FileHistory.CreatedBy(childComplexity), true

	case "FileHistory.deletedAt":
		if e.complexity.FileHistory.DeletedAt == nil {
			break
		}

		return e.complexity.FileHistory.DeletedAt(childComplexity), true

	case "FileHistory.deletedBy":
		if e.complexity.FileHistory.DeletedBy == nil {
			break
		}

		return e.complexity.FileHistory.DeletedBy(childComplexity), true

	case "FileHistory.detectedContentType":
		if e.complexity.FileHistory.DetectedContentType == nil {
			break
		}

		return e.complexity.FileHistory.DetectedContentType(childComplexity), true

	case "FileHistory.detectedMimeType":
		if e.complexity.FileHistory.DetectedMimeType == nil {
			break
		}

		return e.complexity.FileHistory.DetectedMimeType(childComplexity), true

	case "FileHistory.historyTime":
		if e.complexity.FileHistory.HistoryTime == nil {
			break
		}

		return e.complexity.FileHistory.HistoryTime(childComplexity), true

	case "FileHistory.id":
		if e.complexity.FileHistory.ID == nil {
			break
		}

		return e.complexity.FileHistory.ID(childComplexity), true

	case "FileHistory.md5Hash":
		if e.complexity.FileHistory.Md5Hash == nil {
			break
		}

		return e.complexity.FileHistory.Md5Hash(childComplexity), true

	case "FileHistory.operation":
		if e.complexity.FileHistory.Operation == nil {
			break
		}

		return e.complexity.FileHistory.Operation(childComplexity), true

	case "FileHistory.persistedFileSize":
		if e.complexity.FileHistory.PersistedFileSize == nil {
			break
		}

		return e.complexity.FileHistory.PersistedFileSize(childComplexity), true

	case "FileHistory.providedFileExtension":
		if e.complexity.FileHistory.ProvidedFileExtension == nil {
			break
		}

		return e.complexity.FileHistory.ProvidedFileExtension(childComplexity), true

	case "FileHistory.providedFileName":
		if e.complexity.FileHistory.ProvidedFileName == nil {
			break
		}

		return e.complexity.FileHistory.ProvidedFileName(childComplexity), true

	case "FileHistory.providedFileSize":
		if e.complexity.FileHistory.ProvidedFileSize == nil {
			break
		}

		return e.complexity.FileHistory.ProvidedFileSize(childComplexity), true

	case "FileHistory.ref":
		if e.complexity.FileHistory.Ref == nil {
			break
		}

		return e.complexity.FileHistory.Ref(childComplexity), true

	case "FileHistory.storagePath":
		if e.complexity.FileHistory.StoragePath == nil {
			break
		}

		return e.complexity.FileHistory.StoragePath(childComplexity), true

	case "FileHistory.storageScheme":
		if e.complexity.FileHistory.StorageScheme == nil {
			break
		}

		return e.complexity.FileHistory.StorageScheme(childComplexity), true

	case "FileHistory.storageVolume":
		if e.complexity.FileHistory.StorageVolume == nil {
			break
		}

		return e.complexity.FileHistory.StorageVolume(childComplexity), true

	case "FileHistory.storeKey":
		if e.complexity.FileHistory.StoreKey == nil {
			break
		}

		return e.complexity.FileHistory.StoreKey(childComplexity), true

	case "FileHistory.tags":
		if e.complexity.FileHistory.Tags == nil {
			break
		}

		return e.complexity.FileHistory.Tags(childComplexity), true

	case "FileHistory.uri":
		if e.complexity.FileHistory.URI == nil {
			break
		}

		return e.complexity.FileHistory.URI(childComplexity), true

	case "FileHistory.updatedAt":
		if e.complexity.FileHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.FileHistory.UpdatedAt(childComplexity), true

	case "FileHistory.updatedBy":
		if e.complexity.FileHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.FileHistory.UpdatedBy(childComplexity), true

	case "FileHistoryConnection.edges":
		if e.complexity.FileHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.FileHistoryConnection.Edges(childComplexity), true

	case "FileHistoryConnection.pageInfo":
		if e.complexity.FileHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileHistoryConnection.PageInfo(childComplexity), true

	case "FileHistoryConnection.totalCount":
		if e.complexity.FileHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileHistoryConnection.TotalCount(childComplexity), true

	case "FileHistoryEdge.cursor":
		if e.complexity.FileHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.FileHistoryEdge.Cursor(childComplexity), true

	case "FileHistoryEdge.node":
		if e.complexity.FileHistoryEdge.Node == nil {
			break
		}

		return e.complexity.FileHistoryEdge.Node(childComplexity), true

	case "FileSearchResult.files":
		if e.complexity.FileSearchResult.Files == nil {
			break
		}

		return e.complexity.FileSearchResult.Files(childComplexity), true

	case "Group.controlBlockedGroups":
		if e.complexity.Group.ControlBlockedGroups == nil {
			break
		}

		return e.complexity.Group.ControlBlockedGroups(childComplexity), true

	case "Group.controlCreators":
		if e.complexity.Group.ControlCreators == nil {
			break
		}

		return e.complexity.Group.ControlCreators(childComplexity), true

	case "Group.controlEditors":
		if e.complexity.Group.ControlEditors == nil {
			break
		}

		return e.complexity.Group.ControlEditors(childComplexity), true

	case "Group.controlObjectiveBlockedGroups":
		if e.complexity.Group.ControlObjectiveBlockedGroups == nil {
			break
		}

		return e.complexity.Group.ControlObjectiveBlockedGroups(childComplexity), true

	case "Group.controlObjectiveCreators":
		if e.complexity.Group.ControlObjectiveCreators == nil {
			break
		}

		return e.complexity.Group.ControlObjectiveCreators(childComplexity), true

	case "Group.controlObjectiveEditors":
		if e.complexity.Group.ControlObjectiveEditors == nil {
			break
		}

		return e.complexity.Group.ControlObjectiveEditors(childComplexity), true

	case "Group.controlObjectiveViewers":
		if e.complexity.Group.ControlObjectiveViewers == nil {
			break
		}

		return e.complexity.Group.ControlObjectiveViewers(childComplexity), true

	case "Group.controlViewers":
		if e.complexity.Group.ControlViewers == nil {
			break
		}

		return e.complexity.Group.ControlViewers(childComplexity), true

	case "Group.createdAt":
		if e.complexity.Group.CreatedAt == nil {
			break
		}

		return e.complexity.Group.CreatedAt(childComplexity), true

	case "Group.createdBy":
		if e.complexity.Group.CreatedBy == nil {
			break
		}

		return e.complexity.Group.CreatedBy(childComplexity), true

	case "Group.deletedAt":
		if e.complexity.Group.DeletedAt == nil {
			break
		}

		return e.complexity.Group.DeletedAt(childComplexity), true

	case "Group.deletedBy":
		if e.complexity.Group.DeletedBy == nil {
			break
		}

		return e.complexity.Group.DeletedBy(childComplexity), true

	case "Group.description":
		if e.complexity.Group.Description == nil {
			break
		}

		return e.complexity.Group.Description(childComplexity), true

	case "Group.displayName":
		if e.complexity.Group.DisplayName == nil {
			break
		}

		return e.complexity.Group.DisplayName(childComplexity), true

	case "Group.events":
		if e.complexity.Group.Events == nil {
			break
		}

		return e.complexity.Group.Events(childComplexity), true

	case "Group.files":
		if e.complexity.Group.Files == nil {
			break
		}

		return e.complexity.Group.Files(childComplexity), true

	case "Group.gravatarLogoURL":
		if e.complexity.Group.GravatarLogoURL == nil {
			break
		}

		return e.complexity.Group.GravatarLogoURL(childComplexity), true

	case "Group.groupCreators":
		if e.complexity.Group.GroupCreators == nil {
			break
		}

		return e.complexity.Group.GroupCreators(childComplexity), true

	case "Group.id":
		if e.complexity.Group.ID == nil {
			break
		}

		return e.complexity.Group.ID(childComplexity), true

	case "Group.integrations":
		if e.complexity.Group.Integrations == nil {
			break
		}

		return e.complexity.Group.Integrations(childComplexity), true

	case "Group.internalPolicyBlockedGroups":
		if e.complexity.Group.InternalPolicyBlockedGroups == nil {
			break
		}

		return e.complexity.Group.InternalPolicyBlockedGroups(childComplexity), true

	case "Group.internalPolicyCreators":
		if e.complexity.Group.InternalPolicyCreators == nil {
			break
		}

		return e.complexity.Group.InternalPolicyCreators(childComplexity), true

	case "Group.internalPolicyEditors":
		if e.complexity.Group.InternalPolicyEditors == nil {
			break
		}

		return e.complexity.Group.InternalPolicyEditors(childComplexity), true

	case "Group.logoURL":
		if e.complexity.Group.LogoURL == nil {
			break
		}

		return e.complexity.Group.LogoURL(childComplexity), true

	case "Group.members":
		if e.complexity.Group.Members == nil {
			break
		}

		return e.complexity.Group.Members(childComplexity), true

	case "Group.name":
		if e.complexity.Group.Name == nil {
			break
		}

		return e.complexity.Group.Name(childComplexity), true

	case "Group.narrativeBlockedGroups":
		if e.complexity.Group.NarrativeBlockedGroups == nil {
			break
		}

		return e.complexity.Group.NarrativeBlockedGroups(childComplexity), true

	case "Group.narrativeCreators":
		if e.complexity.Group.NarrativeCreators == nil {
			break
		}

		return e.complexity.Group.NarrativeCreators(childComplexity), true

	case "Group.narrativeEditors":
		if e.complexity.Group.NarrativeEditors == nil {
			break
		}

		return e.complexity.Group.NarrativeEditors(childComplexity), true

	case "Group.narrativeViewers":
		if e.complexity.Group.NarrativeViewers == nil {
			break
		}

		return e.complexity.Group.NarrativeViewers(childComplexity), true

	case "Group.owner":
		if e.complexity.Group.Owner == nil {
			break
		}

		return e.complexity.Group.Owner(childComplexity), true

	case "Group.ownerID":
		if e.complexity.Group.OwnerID == nil {
			break
		}

		return e.complexity.Group.OwnerID(childComplexity), true

	case "Group.procedureBlockedGroups":
		if e.complexity.Group.ProcedureBlockedGroups == nil {
			break
		}

		return e.complexity.Group.ProcedureBlockedGroups(childComplexity), true

	case "Group.procedureCreators":
		if e.complexity.Group.ProcedureCreators == nil {
			break
		}

		return e.complexity.Group.ProcedureCreators(childComplexity), true

	case "Group.procedureEditors":
		if e.complexity.Group.ProcedureEditors == nil {
			break
		}

		return e.complexity.Group.ProcedureEditors(childComplexity), true

	case "Group.programBlockedGroups":
		if e.complexity.Group.ProgramBlockedGroups == nil {
			break
		}

		return e.complexity.Group.ProgramBlockedGroups(childComplexity), true

	case "Group.programCreators":
		if e.complexity.Group.ProgramCreators == nil {
			break
		}

		return e.complexity.Group.ProgramCreators(childComplexity), true

	case "Group.programEditors":
		if e.complexity.Group.ProgramEditors == nil {
			break
		}

		return e.complexity.Group.ProgramEditors(childComplexity), true

	case "Group.programViewers":
		if e.complexity.Group.ProgramViewers == nil {
			break
		}

		return e.complexity.Group.ProgramViewers(childComplexity), true

	case "Group.riskBlockedGroups":
		if e.complexity.Group.RiskBlockedGroups == nil {
			break
		}

		return e.complexity.Group.RiskBlockedGroups(childComplexity), true

	case "Group.riskCreators":
		if e.complexity.Group.RiskCreators == nil {
			break
		}

		return e.complexity.Group.RiskCreators(childComplexity), true

	case "Group.riskEditors":
		if e.complexity.Group.RiskEditors == nil {
			break
		}

		return e.complexity.Group.RiskEditors(childComplexity), true

	case "Group.riskViewers":
		if e.complexity.Group.RiskViewers == nil {
			break
		}

		return e.complexity.Group.RiskViewers(childComplexity), true

	case "Group.setting":
		if e.complexity.Group.Setting == nil {
			break
		}

		return e.complexity.Group.Setting(childComplexity), true

	case "Group.tags":
		if e.complexity.Group.Tags == nil {
			break
		}

		return e.complexity.Group.Tags(childComplexity), true

	case "Group.tasks":
		if e.complexity.Group.Tasks == nil {
			break
		}

		return e.complexity.Group.Tasks(childComplexity), true

	case "Group.templateCreators":
		if e.complexity.Group.TemplateCreators == nil {
			break
		}

		return e.complexity.Group.TemplateCreators(childComplexity), true

	case "Group.updatedAt":
		if e.complexity.Group.UpdatedAt == nil {
			break
		}

		return e.complexity.Group.UpdatedAt(childComplexity), true

	case "Group.updatedBy":
		if e.complexity.Group.UpdatedBy == nil {
			break
		}

		return e.complexity.Group.UpdatedBy(childComplexity), true

	case "Group.users":
		if e.complexity.Group.Users == nil {
			break
		}

		return e.complexity.Group.Users(childComplexity), true

	case "GroupBulkCreatePayload.groups":
		if e.complexity.GroupBulkCreatePayload.Groups == nil {
			break
		}

		return e.complexity.GroupBulkCreatePayload.Groups(childComplexity), true

	case "GroupConnection.edges":
		if e.complexity.GroupConnection.Edges == nil {
			break
		}

		return e.complexity.GroupConnection.Edges(childComplexity), true

	case "GroupConnection.pageInfo":
		if e.complexity.GroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupConnection.PageInfo(childComplexity), true

	case "GroupConnection.totalCount":
		if e.complexity.GroupConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupConnection.TotalCount(childComplexity), true

	case "GroupCreatePayload.group":
		if e.complexity.GroupCreatePayload.Group == nil {
			break
		}

		return e.complexity.GroupCreatePayload.Group(childComplexity), true

	case "GroupDeletePayload.deletedID":
		if e.complexity.GroupDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.GroupDeletePayload.DeletedID(childComplexity), true

	case "GroupEdge.cursor":
		if e.complexity.GroupEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupEdge.Cursor(childComplexity), true

	case "GroupEdge.node":
		if e.complexity.GroupEdge.Node == nil {
			break
		}

		return e.complexity.GroupEdge.Node(childComplexity), true

	case "GroupHistory.createdAt":
		if e.complexity.GroupHistory.CreatedAt == nil {
			break
		}

		return e.complexity.GroupHistory.CreatedAt(childComplexity), true

	case "GroupHistory.createdBy":
		if e.complexity.GroupHistory.CreatedBy == nil {
			break
		}

		return e.complexity.GroupHistory.CreatedBy(childComplexity), true

	case "GroupHistory.deletedAt":
		if e.complexity.GroupHistory.DeletedAt == nil {
			break
		}

		return e.complexity.GroupHistory.DeletedAt(childComplexity), true

	case "GroupHistory.deletedBy":
		if e.complexity.GroupHistory.DeletedBy == nil {
			break
		}

		return e.complexity.GroupHistory.DeletedBy(childComplexity), true

	case "GroupHistory.description":
		if e.complexity.GroupHistory.Description == nil {
			break
		}

		return e.complexity.GroupHistory.Description(childComplexity), true

	case "GroupHistory.displayName":
		if e.complexity.GroupHistory.DisplayName == nil {
			break
		}

		return e.complexity.GroupHistory.DisplayName(childComplexity), true

	case "GroupHistory.gravatarLogoURL":
		if e.complexity.GroupHistory.GravatarLogoURL == nil {
			break
		}

		return e.complexity.GroupHistory.GravatarLogoURL(childComplexity), true

	case "GroupHistory.historyTime":
		if e.complexity.GroupHistory.HistoryTime == nil {
			break
		}

		return e.complexity.GroupHistory.HistoryTime(childComplexity), true

	case "GroupHistory.id":
		if e.complexity.GroupHistory.ID == nil {
			break
		}

		return e.complexity.GroupHistory.ID(childComplexity), true

	case "GroupHistory.logoURL":
		if e.complexity.GroupHistory.LogoURL == nil {
			break
		}

		return e.complexity.GroupHistory.LogoURL(childComplexity), true

	case "GroupHistory.name":
		if e.complexity.GroupHistory.Name == nil {
			break
		}

		return e.complexity.GroupHistory.Name(childComplexity), true

	case "GroupHistory.operation":
		if e.complexity.GroupHistory.Operation == nil {
			break
		}

		return e.complexity.GroupHistory.Operation(childComplexity), true

	case "GroupHistory.ownerID":
		if e.complexity.GroupHistory.OwnerID == nil {
			break
		}

		return e.complexity.GroupHistory.OwnerID(childComplexity), true

	case "GroupHistory.ref":
		if e.complexity.GroupHistory.Ref == nil {
			break
		}

		return e.complexity.GroupHistory.Ref(childComplexity), true

	case "GroupHistory.tags":
		if e.complexity.GroupHistory.Tags == nil {
			break
		}

		return e.complexity.GroupHistory.Tags(childComplexity), true

	case "GroupHistory.updatedAt":
		if e.complexity.GroupHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupHistory.UpdatedAt(childComplexity), true

	case "GroupHistory.updatedBy":
		if e.complexity.GroupHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupHistory.UpdatedBy(childComplexity), true

	case "GroupHistoryConnection.edges":
		if e.complexity.GroupHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.GroupHistoryConnection.Edges(childComplexity), true

	case "GroupHistoryConnection.pageInfo":
		if e.complexity.GroupHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupHistoryConnection.PageInfo(childComplexity), true

	case "GroupHistoryConnection.totalCount":
		if e.complexity.GroupHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupHistoryConnection.TotalCount(childComplexity), true

	case "GroupHistoryEdge.cursor":
		if e.complexity.GroupHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupHistoryEdge.Cursor(childComplexity), true

	case "GroupHistoryEdge.node":
		if e.complexity.GroupHistoryEdge.Node == nil {
			break
		}

		return e.complexity.GroupHistoryEdge.Node(childComplexity), true

	case "GroupMembership.createdAt":
		if e.complexity.GroupMembership.CreatedAt == nil {
			break
		}

		return e.complexity.GroupMembership.CreatedAt(childComplexity), true

	case "GroupMembership.createdBy":
		if e.complexity.GroupMembership.CreatedBy == nil {
			break
		}

		return e.complexity.GroupMembership.CreatedBy(childComplexity), true

	case "GroupMembership.deletedAt":
		if e.complexity.GroupMembership.DeletedAt == nil {
			break
		}

		return e.complexity.GroupMembership.DeletedAt(childComplexity), true

	case "GroupMembership.deletedBy":
		if e.complexity.GroupMembership.DeletedBy == nil {
			break
		}

		return e.complexity.GroupMembership.DeletedBy(childComplexity), true

	case "GroupMembership.events":
		if e.complexity.GroupMembership.Events == nil {
			break
		}

		return e.complexity.GroupMembership.Events(childComplexity), true

	case "GroupMembership.group":
		if e.complexity.GroupMembership.Group == nil {
			break
		}

		return e.complexity.GroupMembership.Group(childComplexity), true

	case "GroupMembership.groupID":
		if e.complexity.GroupMembership.GroupID == nil {
			break
		}

		return e.complexity.GroupMembership.GroupID(childComplexity), true

	case "GroupMembership.id":
		if e.complexity.GroupMembership.ID == nil {
			break
		}

		return e.complexity.GroupMembership.ID(childComplexity), true

	case "GroupMembership.role":
		if e.complexity.GroupMembership.Role == nil {
			break
		}

		return e.complexity.GroupMembership.Role(childComplexity), true

	case "GroupMembership.updatedAt":
		if e.complexity.GroupMembership.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupMembership.UpdatedAt(childComplexity), true

	case "GroupMembership.updatedBy":
		if e.complexity.GroupMembership.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupMembership.UpdatedBy(childComplexity), true

	case "GroupMembership.user":
		if e.complexity.GroupMembership.User == nil {
			break
		}

		return e.complexity.GroupMembership.User(childComplexity), true

	case "GroupMembership.userID":
		if e.complexity.GroupMembership.UserID == nil {
			break
		}

		return e.complexity.GroupMembership.UserID(childComplexity), true

	case "GroupMembershipBulkCreatePayload.groupMemberships":
		if e.complexity.GroupMembershipBulkCreatePayload.GroupMemberships == nil {
			break
		}

		return e.complexity.GroupMembershipBulkCreatePayload.GroupMemberships(childComplexity), true

	case "GroupMembershipConnection.edges":
		if e.complexity.GroupMembershipConnection.Edges == nil {
			break
		}

		return e.complexity.GroupMembershipConnection.Edges(childComplexity), true

	case "GroupMembershipConnection.pageInfo":
		if e.complexity.GroupMembershipConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupMembershipConnection.PageInfo(childComplexity), true

	case "GroupMembershipConnection.totalCount":
		if e.complexity.GroupMembershipConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupMembershipConnection.TotalCount(childComplexity), true

	case "GroupMembershipCreatePayload.groupMembership":
		if e.complexity.GroupMembershipCreatePayload.GroupMembership == nil {
			break
		}

		return e.complexity.GroupMembershipCreatePayload.GroupMembership(childComplexity), true

	case "GroupMembershipDeletePayload.deletedID":
		if e.complexity.GroupMembershipDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.GroupMembershipDeletePayload.DeletedID(childComplexity), true

	case "GroupMembershipEdge.cursor":
		if e.complexity.GroupMembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupMembershipEdge.Cursor(childComplexity), true

	case "GroupMembershipEdge.node":
		if e.complexity.GroupMembershipEdge.Node == nil {
			break
		}

		return e.complexity.GroupMembershipEdge.Node(childComplexity), true

	case "GroupMembershipHistory.createdAt":
		if e.complexity.GroupMembershipHistory.CreatedAt == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.CreatedAt(childComplexity), true

	case "GroupMembershipHistory.createdBy":
		if e.complexity.GroupMembershipHistory.CreatedBy == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.CreatedBy(childComplexity), true

	case "GroupMembershipHistory.deletedAt":
		if e.complexity.GroupMembershipHistory.DeletedAt == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.DeletedAt(childComplexity), true

	case "GroupMembershipHistory.deletedBy":
		if e.complexity.GroupMembershipHistory.DeletedBy == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.DeletedBy(childComplexity), true

	case "GroupMembershipHistory.groupID":
		if e.complexity.GroupMembershipHistory.GroupID == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.GroupID(childComplexity), true

	case "GroupMembershipHistory.historyTime":
		if e.complexity.GroupMembershipHistory.HistoryTime == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.HistoryTime(childComplexity), true

	case "GroupMembershipHistory.id":
		if e.complexity.GroupMembershipHistory.ID == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.ID(childComplexity), true

	case "GroupMembershipHistory.operation":
		if e.complexity.GroupMembershipHistory.Operation == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.Operation(childComplexity), true

	case "GroupMembershipHistory.ref":
		if e.complexity.GroupMembershipHistory.Ref == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.Ref(childComplexity), true

	case "GroupMembershipHistory.role":
		if e.complexity.GroupMembershipHistory.Role == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.Role(childComplexity), true

	case "GroupMembershipHistory.updatedAt":
		if e.complexity.GroupMembershipHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.UpdatedAt(childComplexity), true

	case "GroupMembershipHistory.updatedBy":
		if e.complexity.GroupMembershipHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.UpdatedBy(childComplexity), true

	case "GroupMembershipHistory.userID":
		if e.complexity.GroupMembershipHistory.UserID == nil {
			break
		}

		return e.complexity.GroupMembershipHistory.UserID(childComplexity), true

	case "GroupMembershipHistoryConnection.edges":
		if e.complexity.GroupMembershipHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryConnection.Edges(childComplexity), true

	case "GroupMembershipHistoryConnection.pageInfo":
		if e.complexity.GroupMembershipHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryConnection.PageInfo(childComplexity), true

	case "GroupMembershipHistoryConnection.totalCount":
		if e.complexity.GroupMembershipHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryConnection.TotalCount(childComplexity), true

	case "GroupMembershipHistoryEdge.cursor":
		if e.complexity.GroupMembershipHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryEdge.Cursor(childComplexity), true

	case "GroupMembershipHistoryEdge.node":
		if e.complexity.GroupMembershipHistoryEdge.Node == nil {
			break
		}

		return e.complexity.GroupMembershipHistoryEdge.Node(childComplexity), true

	case "GroupMembershipUpdatePayload.groupMembership":
		if e.complexity.GroupMembershipUpdatePayload.GroupMembership == nil {
			break
		}

		return e.complexity.GroupMembershipUpdatePayload.GroupMembership(childComplexity), true

	case "GroupSearchResult.groups":
		if e.complexity.GroupSearchResult.Groups == nil {
			break
		}

		return e.complexity.GroupSearchResult.Groups(childComplexity), true

	case "GroupSetting.createdAt":
		if e.complexity.GroupSetting.CreatedAt == nil {
			break
		}

		return e.complexity.GroupSetting.CreatedAt(childComplexity), true

	case "GroupSetting.createdBy":
		if e.complexity.GroupSetting.CreatedBy == nil {
			break
		}

		return e.complexity.GroupSetting.CreatedBy(childComplexity), true

	case "GroupSetting.deletedAt":
		if e.complexity.GroupSetting.DeletedAt == nil {
			break
		}

		return e.complexity.GroupSetting.DeletedAt(childComplexity), true

	case "GroupSetting.deletedBy":
		if e.complexity.GroupSetting.DeletedBy == nil {
			break
		}

		return e.complexity.GroupSetting.DeletedBy(childComplexity), true

	case "GroupSetting.group":
		if e.complexity.GroupSetting.Group == nil {
			break
		}

		return e.complexity.GroupSetting.Group(childComplexity), true

	case "GroupSetting.groupID":
		if e.complexity.GroupSetting.GroupID == nil {
			break
		}

		return e.complexity.GroupSetting.GroupID(childComplexity), true

	case "GroupSetting.id":
		if e.complexity.GroupSetting.ID == nil {
			break
		}

		return e.complexity.GroupSetting.ID(childComplexity), true

	case "GroupSetting.joinPolicy":
		if e.complexity.GroupSetting.JoinPolicy == nil {
			break
		}

		return e.complexity.GroupSetting.JoinPolicy(childComplexity), true

	case "GroupSetting.syncToGithub":
		if e.complexity.GroupSetting.SyncToGithub == nil {
			break
		}

		return e.complexity.GroupSetting.SyncToGithub(childComplexity), true

	case "GroupSetting.syncToSlack":
		if e.complexity.GroupSetting.SyncToSlack == nil {
			break
		}

		return e.complexity.GroupSetting.SyncToSlack(childComplexity), true

	case "GroupSetting.tags":
		if e.complexity.GroupSetting.Tags == nil {
			break
		}

		return e.complexity.GroupSetting.Tags(childComplexity), true

	case "GroupSetting.updatedAt":
		if e.complexity.GroupSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupSetting.UpdatedAt(childComplexity), true

	case "GroupSetting.updatedBy":
		if e.complexity.GroupSetting.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupSetting.UpdatedBy(childComplexity), true

	case "GroupSetting.visibility":
		if e.complexity.GroupSetting.Visibility == nil {
			break
		}

		return e.complexity.GroupSetting.Visibility(childComplexity), true

	case "GroupSettingBulkCreatePayload.groupSettings":
		if e.complexity.GroupSettingBulkCreatePayload.GroupSettings == nil {
			break
		}

		return e.complexity.GroupSettingBulkCreatePayload.GroupSettings(childComplexity), true

	case "GroupSettingConnection.edges":
		if e.complexity.GroupSettingConnection.Edges == nil {
			break
		}

		return e.complexity.GroupSettingConnection.Edges(childComplexity), true

	case "GroupSettingConnection.pageInfo":
		if e.complexity.GroupSettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupSettingConnection.PageInfo(childComplexity), true

	case "GroupSettingConnection.totalCount":
		if e.complexity.GroupSettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupSettingConnection.TotalCount(childComplexity), true

	case "GroupSettingCreatePayload.groupSetting":
		if e.complexity.GroupSettingCreatePayload.GroupSetting == nil {
			break
		}

		return e.complexity.GroupSettingCreatePayload.GroupSetting(childComplexity), true

	case "GroupSettingDeletePayload.deletedID":
		if e.complexity.GroupSettingDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.GroupSettingDeletePayload.DeletedID(childComplexity), true

	case "GroupSettingEdge.cursor":
		if e.complexity.GroupSettingEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupSettingEdge.Cursor(childComplexity), true

	case "GroupSettingEdge.node":
		if e.complexity.GroupSettingEdge.Node == nil {
			break
		}

		return e.complexity.GroupSettingEdge.Node(childComplexity), true

	case "GroupSettingHistory.createdAt":
		if e.complexity.GroupSettingHistory.CreatedAt == nil {
			break
		}

		return e.complexity.GroupSettingHistory.CreatedAt(childComplexity), true

	case "GroupSettingHistory.createdBy":
		if e.complexity.GroupSettingHistory.CreatedBy == nil {
			break
		}

		return e.complexity.GroupSettingHistory.CreatedBy(childComplexity), true

	case "GroupSettingHistory.deletedAt":
		if e.complexity.GroupSettingHistory.DeletedAt == nil {
			break
		}

		return e.complexity.GroupSettingHistory.DeletedAt(childComplexity), true

	case "GroupSettingHistory.deletedBy":
		if e.complexity.GroupSettingHistory.DeletedBy == nil {
			break
		}

		return e.complexity.GroupSettingHistory.DeletedBy(childComplexity), true

	case "GroupSettingHistory.groupID":
		if e.complexity.GroupSettingHistory.GroupID == nil {
			break
		}

		return e.complexity.GroupSettingHistory.GroupID(childComplexity), true

	case "GroupSettingHistory.historyTime":
		if e.complexity.GroupSettingHistory.HistoryTime == nil {
			break
		}

		return e.complexity.GroupSettingHistory.HistoryTime(childComplexity), true

	case "GroupSettingHistory.id":
		if e.complexity.GroupSettingHistory.ID == nil {
			break
		}

		return e.complexity.GroupSettingHistory.ID(childComplexity), true

	case "GroupSettingHistory.joinPolicy":
		if e.complexity.GroupSettingHistory.JoinPolicy == nil {
			break
		}

		return e.complexity.GroupSettingHistory.JoinPolicy(childComplexity), true

	case "GroupSettingHistory.operation":
		if e.complexity.GroupSettingHistory.Operation == nil {
			break
		}

		return e.complexity.GroupSettingHistory.Operation(childComplexity), true

	case "GroupSettingHistory.ref":
		if e.complexity.GroupSettingHistory.Ref == nil {
			break
		}

		return e.complexity.GroupSettingHistory.Ref(childComplexity), true

	case "GroupSettingHistory.syncToGithub":
		if e.complexity.GroupSettingHistory.SyncToGithub == nil {
			break
		}

		return e.complexity.GroupSettingHistory.SyncToGithub(childComplexity), true

	case "GroupSettingHistory.syncToSlack":
		if e.complexity.GroupSettingHistory.SyncToSlack == nil {
			break
		}

		return e.complexity.GroupSettingHistory.SyncToSlack(childComplexity), true

	case "GroupSettingHistory.tags":
		if e.complexity.GroupSettingHistory.Tags == nil {
			break
		}

		return e.complexity.GroupSettingHistory.Tags(childComplexity), true

	case "GroupSettingHistory.updatedAt":
		if e.complexity.GroupSettingHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.GroupSettingHistory.UpdatedAt(childComplexity), true

	case "GroupSettingHistory.updatedBy":
		if e.complexity.GroupSettingHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.GroupSettingHistory.UpdatedBy(childComplexity), true

	case "GroupSettingHistory.visibility":
		if e.complexity.GroupSettingHistory.Visibility == nil {
			break
		}

		return e.complexity.GroupSettingHistory.Visibility(childComplexity), true

	case "GroupSettingHistoryConnection.edges":
		if e.complexity.GroupSettingHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.GroupSettingHistoryConnection.Edges(childComplexity), true

	case "GroupSettingHistoryConnection.pageInfo":
		if e.complexity.GroupSettingHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.GroupSettingHistoryConnection.PageInfo(childComplexity), true

	case "GroupSettingHistoryConnection.totalCount":
		if e.complexity.GroupSettingHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.GroupSettingHistoryConnection.TotalCount(childComplexity), true

	case "GroupSettingHistoryEdge.cursor":
		if e.complexity.GroupSettingHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.GroupSettingHistoryEdge.Cursor(childComplexity), true

	case "GroupSettingHistoryEdge.node":
		if e.complexity.GroupSettingHistoryEdge.Node == nil {
			break
		}

		return e.complexity.GroupSettingHistoryEdge.Node(childComplexity), true

	case "GroupSettingSearchResult.groupSettings":
		if e.complexity.GroupSettingSearchResult.GroupSettings == nil {
			break
		}

		return e.complexity.GroupSettingSearchResult.GroupSettings(childComplexity), true

	case "GroupSettingUpdatePayload.groupSetting":
		if e.complexity.GroupSettingUpdatePayload.GroupSetting == nil {
			break
		}

		return e.complexity.GroupSettingUpdatePayload.GroupSetting(childComplexity), true

	case "GroupUpdatePayload.group":
		if e.complexity.GroupUpdatePayload.Group == nil {
			break
		}

		return e.complexity.GroupUpdatePayload.Group(childComplexity), true

	case "Hush.createdAt":
		if e.complexity.Hush.CreatedAt == nil {
			break
		}

		return e.complexity.Hush.CreatedAt(childComplexity), true

	case "Hush.createdBy":
		if e.complexity.Hush.CreatedBy == nil {
			break
		}

		return e.complexity.Hush.CreatedBy(childComplexity), true

	case "Hush.deletedAt":
		if e.complexity.Hush.DeletedAt == nil {
			break
		}

		return e.complexity.Hush.DeletedAt(childComplexity), true

	case "Hush.deletedBy":
		if e.complexity.Hush.DeletedBy == nil {
			break
		}

		return e.complexity.Hush.DeletedBy(childComplexity), true

	case "Hush.description":
		if e.complexity.Hush.Description == nil {
			break
		}

		return e.complexity.Hush.Description(childComplexity), true

	case "Hush.events":
		if e.complexity.Hush.Events == nil {
			break
		}

		return e.complexity.Hush.Events(childComplexity), true

	case "Hush.id":
		if e.complexity.Hush.ID == nil {
			break
		}

		return e.complexity.Hush.ID(childComplexity), true

	case "Hush.integrations":
		if e.complexity.Hush.Integrations == nil {
			break
		}

		return e.complexity.Hush.Integrations(childComplexity), true

	case "Hush.kind":
		if e.complexity.Hush.Kind == nil {
			break
		}

		return e.complexity.Hush.Kind(childComplexity), true

	case "Hush.name":
		if e.complexity.Hush.Name == nil {
			break
		}

		return e.complexity.Hush.Name(childComplexity), true

	case "Hush.organization":
		if e.complexity.Hush.Organization == nil {
			break
		}

		return e.complexity.Hush.Organization(childComplexity), true

	case "Hush.secretName":
		if e.complexity.Hush.SecretName == nil {
			break
		}

		return e.complexity.Hush.SecretName(childComplexity), true

	case "Hush.updatedAt":
		if e.complexity.Hush.UpdatedAt == nil {
			break
		}

		return e.complexity.Hush.UpdatedAt(childComplexity), true

	case "Hush.updatedBy":
		if e.complexity.Hush.UpdatedBy == nil {
			break
		}

		return e.complexity.Hush.UpdatedBy(childComplexity), true

	case "HushBulkCreatePayload.hushes":
		if e.complexity.HushBulkCreatePayload.Hushes == nil {
			break
		}

		return e.complexity.HushBulkCreatePayload.Hushes(childComplexity), true

	case "HushConnection.edges":
		if e.complexity.HushConnection.Edges == nil {
			break
		}

		return e.complexity.HushConnection.Edges(childComplexity), true

	case "HushConnection.pageInfo":
		if e.complexity.HushConnection.PageInfo == nil {
			break
		}

		return e.complexity.HushConnection.PageInfo(childComplexity), true

	case "HushConnection.totalCount":
		if e.complexity.HushConnection.TotalCount == nil {
			break
		}

		return e.complexity.HushConnection.TotalCount(childComplexity), true

	case "HushCreatePayload.hush":
		if e.complexity.HushCreatePayload.Hush == nil {
			break
		}

		return e.complexity.HushCreatePayload.Hush(childComplexity), true

	case "HushDeletePayload.deletedID":
		if e.complexity.HushDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.HushDeletePayload.DeletedID(childComplexity), true

	case "HushEdge.cursor":
		if e.complexity.HushEdge.Cursor == nil {
			break
		}

		return e.complexity.HushEdge.Cursor(childComplexity), true

	case "HushEdge.node":
		if e.complexity.HushEdge.Node == nil {
			break
		}

		return e.complexity.HushEdge.Node(childComplexity), true

	case "HushHistory.createdAt":
		if e.complexity.HushHistory.CreatedAt == nil {
			break
		}

		return e.complexity.HushHistory.CreatedAt(childComplexity), true

	case "HushHistory.createdBy":
		if e.complexity.HushHistory.CreatedBy == nil {
			break
		}

		return e.complexity.HushHistory.CreatedBy(childComplexity), true

	case "HushHistory.deletedAt":
		if e.complexity.HushHistory.DeletedAt == nil {
			break
		}

		return e.complexity.HushHistory.DeletedAt(childComplexity), true

	case "HushHistory.deletedBy":
		if e.complexity.HushHistory.DeletedBy == nil {
			break
		}

		return e.complexity.HushHistory.DeletedBy(childComplexity), true

	case "HushHistory.description":
		if e.complexity.HushHistory.Description == nil {
			break
		}

		return e.complexity.HushHistory.Description(childComplexity), true

	case "HushHistory.historyTime":
		if e.complexity.HushHistory.HistoryTime == nil {
			break
		}

		return e.complexity.HushHistory.HistoryTime(childComplexity), true

	case "HushHistory.id":
		if e.complexity.HushHistory.ID == nil {
			break
		}

		return e.complexity.HushHistory.ID(childComplexity), true

	case "HushHistory.kind":
		if e.complexity.HushHistory.Kind == nil {
			break
		}

		return e.complexity.HushHistory.Kind(childComplexity), true

	case "HushHistory.name":
		if e.complexity.HushHistory.Name == nil {
			break
		}

		return e.complexity.HushHistory.Name(childComplexity), true

	case "HushHistory.operation":
		if e.complexity.HushHistory.Operation == nil {
			break
		}

		return e.complexity.HushHistory.Operation(childComplexity), true

	case "HushHistory.ref":
		if e.complexity.HushHistory.Ref == nil {
			break
		}

		return e.complexity.HushHistory.Ref(childComplexity), true

	case "HushHistory.secretName":
		if e.complexity.HushHistory.SecretName == nil {
			break
		}

		return e.complexity.HushHistory.SecretName(childComplexity), true

	case "HushHistory.updatedAt":
		if e.complexity.HushHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.HushHistory.UpdatedAt(childComplexity), true

	case "HushHistory.updatedBy":
		if e.complexity.HushHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.HushHistory.UpdatedBy(childComplexity), true

	case "HushHistoryConnection.edges":
		if e.complexity.HushHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.HushHistoryConnection.Edges(childComplexity), true

	case "HushHistoryConnection.pageInfo":
		if e.complexity.HushHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.HushHistoryConnection.PageInfo(childComplexity), true

	case "HushHistoryConnection.totalCount":
		if e.complexity.HushHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.HushHistoryConnection.TotalCount(childComplexity), true

	case "HushHistoryEdge.cursor":
		if e.complexity.HushHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.HushHistoryEdge.Cursor(childComplexity), true

	case "HushHistoryEdge.node":
		if e.complexity.HushHistoryEdge.Node == nil {
			break
		}

		return e.complexity.HushHistoryEdge.Node(childComplexity), true

	case "HushUpdatePayload.hush":
		if e.complexity.HushUpdatePayload.Hush == nil {
			break
		}

		return e.complexity.HushUpdatePayload.Hush(childComplexity), true

	case "Integration.createdAt":
		if e.complexity.Integration.CreatedAt == nil {
			break
		}

		return e.complexity.Integration.CreatedAt(childComplexity), true

	case "Integration.createdBy":
		if e.complexity.Integration.CreatedBy == nil {
			break
		}

		return e.complexity.Integration.CreatedBy(childComplexity), true

	case "Integration.deletedAt":
		if e.complexity.Integration.DeletedAt == nil {
			break
		}

		return e.complexity.Integration.DeletedAt(childComplexity), true

	case "Integration.deletedBy":
		if e.complexity.Integration.DeletedBy == nil {
			break
		}

		return e.complexity.Integration.DeletedBy(childComplexity), true

	case "Integration.description":
		if e.complexity.Integration.Description == nil {
			break
		}

		return e.complexity.Integration.Description(childComplexity), true

	case "Integration.events":
		if e.complexity.Integration.Events == nil {
			break
		}

		return e.complexity.Integration.Events(childComplexity), true

	case "Integration.id":
		if e.complexity.Integration.ID == nil {
			break
		}

		return e.complexity.Integration.ID(childComplexity), true

	case "Integration.kind":
		if e.complexity.Integration.Kind == nil {
			break
		}

		return e.complexity.Integration.Kind(childComplexity), true

	case "Integration.name":
		if e.complexity.Integration.Name == nil {
			break
		}

		return e.complexity.Integration.Name(childComplexity), true

	case "Integration.owner":
		if e.complexity.Integration.Owner == nil {
			break
		}

		return e.complexity.Integration.Owner(childComplexity), true

	case "Integration.ownerID":
		if e.complexity.Integration.OwnerID == nil {
			break
		}

		return e.complexity.Integration.OwnerID(childComplexity), true

	case "Integration.secrets":
		if e.complexity.Integration.Secrets == nil {
			break
		}

		return e.complexity.Integration.Secrets(childComplexity), true

	case "Integration.tags":
		if e.complexity.Integration.Tags == nil {
			break
		}

		return e.complexity.Integration.Tags(childComplexity), true

	case "Integration.updatedAt":
		if e.complexity.Integration.UpdatedAt == nil {
			break
		}

		return e.complexity.Integration.UpdatedAt(childComplexity), true

	case "Integration.updatedBy":
		if e.complexity.Integration.UpdatedBy == nil {
			break
		}

		return e.complexity.Integration.UpdatedBy(childComplexity), true

	case "IntegrationBulkCreatePayload.integrations":
		if e.complexity.IntegrationBulkCreatePayload.Integrations == nil {
			break
		}

		return e.complexity.IntegrationBulkCreatePayload.Integrations(childComplexity), true

	case "IntegrationConnection.edges":
		if e.complexity.IntegrationConnection.Edges == nil {
			break
		}

		return e.complexity.IntegrationConnection.Edges(childComplexity), true

	case "IntegrationConnection.pageInfo":
		if e.complexity.IntegrationConnection.PageInfo == nil {
			break
		}

		return e.complexity.IntegrationConnection.PageInfo(childComplexity), true

	case "IntegrationConnection.totalCount":
		if e.complexity.IntegrationConnection.TotalCount == nil {
			break
		}

		return e.complexity.IntegrationConnection.TotalCount(childComplexity), true

	case "IntegrationCreatePayload.integration":
		if e.complexity.IntegrationCreatePayload.Integration == nil {
			break
		}

		return e.complexity.IntegrationCreatePayload.Integration(childComplexity), true

	case "IntegrationDeletePayload.deletedID":
		if e.complexity.IntegrationDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.IntegrationDeletePayload.DeletedID(childComplexity), true

	case "IntegrationEdge.cursor":
		if e.complexity.IntegrationEdge.Cursor == nil {
			break
		}

		return e.complexity.IntegrationEdge.Cursor(childComplexity), true

	case "IntegrationEdge.node":
		if e.complexity.IntegrationEdge.Node == nil {
			break
		}

		return e.complexity.IntegrationEdge.Node(childComplexity), true

	case "IntegrationHistory.createdAt":
		if e.complexity.IntegrationHistory.CreatedAt == nil {
			break
		}

		return e.complexity.IntegrationHistory.CreatedAt(childComplexity), true

	case "IntegrationHistory.createdBy":
		if e.complexity.IntegrationHistory.CreatedBy == nil {
			break
		}

		return e.complexity.IntegrationHistory.CreatedBy(childComplexity), true

	case "IntegrationHistory.deletedAt":
		if e.complexity.IntegrationHistory.DeletedAt == nil {
			break
		}

		return e.complexity.IntegrationHistory.DeletedAt(childComplexity), true

	case "IntegrationHistory.deletedBy":
		if e.complexity.IntegrationHistory.DeletedBy == nil {
			break
		}

		return e.complexity.IntegrationHistory.DeletedBy(childComplexity), true

	case "IntegrationHistory.description":
		if e.complexity.IntegrationHistory.Description == nil {
			break
		}

		return e.complexity.IntegrationHistory.Description(childComplexity), true

	case "IntegrationHistory.historyTime":
		if e.complexity.IntegrationHistory.HistoryTime == nil {
			break
		}

		return e.complexity.IntegrationHistory.HistoryTime(childComplexity), true

	case "IntegrationHistory.id":
		if e.complexity.IntegrationHistory.ID == nil {
			break
		}

		return e.complexity.IntegrationHistory.ID(childComplexity), true

	case "IntegrationHistory.kind":
		if e.complexity.IntegrationHistory.Kind == nil {
			break
		}

		return e.complexity.IntegrationHistory.Kind(childComplexity), true

	case "IntegrationHistory.name":
		if e.complexity.IntegrationHistory.Name == nil {
			break
		}

		return e.complexity.IntegrationHistory.Name(childComplexity), true

	case "IntegrationHistory.operation":
		if e.complexity.IntegrationHistory.Operation == nil {
			break
		}

		return e.complexity.IntegrationHistory.Operation(childComplexity), true

	case "IntegrationHistory.ownerID":
		if e.complexity.IntegrationHistory.OwnerID == nil {
			break
		}

		return e.complexity.IntegrationHistory.OwnerID(childComplexity), true

	case "IntegrationHistory.ref":
		if e.complexity.IntegrationHistory.Ref == nil {
			break
		}

		return e.complexity.IntegrationHistory.Ref(childComplexity), true

	case "IntegrationHistory.tags":
		if e.complexity.IntegrationHistory.Tags == nil {
			break
		}

		return e.complexity.IntegrationHistory.Tags(childComplexity), true

	case "IntegrationHistory.updatedAt":
		if e.complexity.IntegrationHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.IntegrationHistory.UpdatedAt(childComplexity), true

	case "IntegrationHistory.updatedBy":
		if e.complexity.IntegrationHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.IntegrationHistory.UpdatedBy(childComplexity), true

	case "IntegrationHistoryConnection.edges":
		if e.complexity.IntegrationHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.IntegrationHistoryConnection.Edges(childComplexity), true

	case "IntegrationHistoryConnection.pageInfo":
		if e.complexity.IntegrationHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.IntegrationHistoryConnection.PageInfo(childComplexity), true

	case "IntegrationHistoryConnection.totalCount":
		if e.complexity.IntegrationHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.IntegrationHistoryConnection.TotalCount(childComplexity), true

	case "IntegrationHistoryEdge.cursor":
		if e.complexity.IntegrationHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.IntegrationHistoryEdge.Cursor(childComplexity), true

	case "IntegrationHistoryEdge.node":
		if e.complexity.IntegrationHistoryEdge.Node == nil {
			break
		}

		return e.complexity.IntegrationHistoryEdge.Node(childComplexity), true

	case "IntegrationSearchResult.integrations":
		if e.complexity.IntegrationSearchResult.Integrations == nil {
			break
		}

		return e.complexity.IntegrationSearchResult.Integrations(childComplexity), true

	case "IntegrationUpdatePayload.integration":
		if e.complexity.IntegrationUpdatePayload.Integration == nil {
			break
		}

		return e.complexity.IntegrationUpdatePayload.Integration(childComplexity), true

	case "InternalPolicy.background":
		if e.complexity.InternalPolicy.Background == nil {
			break
		}

		return e.complexity.InternalPolicy.Background(childComplexity), true

	case "InternalPolicy.blockedGroups":
		if e.complexity.InternalPolicy.BlockedGroups == nil {
			break
		}

		return e.complexity.InternalPolicy.BlockedGroups(childComplexity), true

	case "InternalPolicy.controlObjectives":
		if e.complexity.InternalPolicy.ControlObjectives == nil {
			break
		}

		return e.complexity.InternalPolicy.ControlObjectives(childComplexity), true

	case "InternalPolicy.controls":
		if e.complexity.InternalPolicy.Controls == nil {
			break
		}

		return e.complexity.InternalPolicy.Controls(childComplexity), true

	case "InternalPolicy.createdAt":
		if e.complexity.InternalPolicy.CreatedAt == nil {
			break
		}

		return e.complexity.InternalPolicy.CreatedAt(childComplexity), true

	case "InternalPolicy.createdBy":
		if e.complexity.InternalPolicy.CreatedBy == nil {
			break
		}

		return e.complexity.InternalPolicy.CreatedBy(childComplexity), true

	case "InternalPolicy.deletedAt":
		if e.complexity.InternalPolicy.DeletedAt == nil {
			break
		}

		return e.complexity.InternalPolicy.DeletedAt(childComplexity), true

	case "InternalPolicy.deletedBy":
		if e.complexity.InternalPolicy.DeletedBy == nil {
			break
		}

		return e.complexity.InternalPolicy.DeletedBy(childComplexity), true

	case "InternalPolicy.description":
		if e.complexity.InternalPolicy.Description == nil {
			break
		}

		return e.complexity.InternalPolicy.Description(childComplexity), true

	case "InternalPolicy.details":
		if e.complexity.InternalPolicy.Details == nil {
			break
		}

		return e.complexity.InternalPolicy.Details(childComplexity), true

	case "InternalPolicy.editors":
		if e.complexity.InternalPolicy.Editors == nil {
			break
		}

		return e.complexity.InternalPolicy.Editors(childComplexity), true

	case "InternalPolicy.id":
		if e.complexity.InternalPolicy.ID == nil {
			break
		}

		return e.complexity.InternalPolicy.ID(childComplexity), true

	case "InternalPolicy.name":
		if e.complexity.InternalPolicy.Name == nil {
			break
		}

		return e.complexity.InternalPolicy.Name(childComplexity), true

	case "InternalPolicy.narratives":
		if e.complexity.InternalPolicy.Narratives == nil {
			break
		}

		return e.complexity.InternalPolicy.Narratives(childComplexity), true

	case "InternalPolicy.owner":
		if e.complexity.InternalPolicy.Owner == nil {
			break
		}

		return e.complexity.InternalPolicy.Owner(childComplexity), true

	case "InternalPolicy.ownerID":
		if e.complexity.InternalPolicy.OwnerID == nil {
			break
		}

		return e.complexity.InternalPolicy.OwnerID(childComplexity), true

	case "InternalPolicy.policyType":
		if e.complexity.InternalPolicy.PolicyType == nil {
			break
		}

		return e.complexity.InternalPolicy.PolicyType(childComplexity), true

	case "InternalPolicy.procedures":
		if e.complexity.InternalPolicy.Procedures == nil {
			break
		}

		return e.complexity.InternalPolicy.Procedures(childComplexity), true

	case "InternalPolicy.programs":
		if e.complexity.InternalPolicy.Programs == nil {
			break
		}

		return e.complexity.InternalPolicy.Programs(childComplexity), true

	case "InternalPolicy.purposeAndScope":
		if e.complexity.InternalPolicy.PurposeAndScope == nil {
			break
		}

		return e.complexity.InternalPolicy.PurposeAndScope(childComplexity), true

	case "InternalPolicy.status":
		if e.complexity.InternalPolicy.Status == nil {
			break
		}

		return e.complexity.InternalPolicy.Status(childComplexity), true

	case "InternalPolicy.tags":
		if e.complexity.InternalPolicy.Tags == nil {
			break
		}

		return e.complexity.InternalPolicy.Tags(childComplexity), true

	case "InternalPolicy.tasks":
		if e.complexity.InternalPolicy.Tasks == nil {
			break
		}

		return e.complexity.InternalPolicy.Tasks(childComplexity), true

	case "InternalPolicy.updatedAt":
		if e.complexity.InternalPolicy.UpdatedAt == nil {
			break
		}

		return e.complexity.InternalPolicy.UpdatedAt(childComplexity), true

	case "InternalPolicy.updatedBy":
		if e.complexity.InternalPolicy.UpdatedBy == nil {
			break
		}

		return e.complexity.InternalPolicy.UpdatedBy(childComplexity), true

	case "InternalPolicy.version":
		if e.complexity.InternalPolicy.Version == nil {
			break
		}

		return e.complexity.InternalPolicy.Version(childComplexity), true

	case "InternalPolicyBulkCreatePayload.internalPolicies":
		if e.complexity.InternalPolicyBulkCreatePayload.InternalPolicies == nil {
			break
		}

		return e.complexity.InternalPolicyBulkCreatePayload.InternalPolicies(childComplexity), true

	case "InternalPolicyConnection.edges":
		if e.complexity.InternalPolicyConnection.Edges == nil {
			break
		}

		return e.complexity.InternalPolicyConnection.Edges(childComplexity), true

	case "InternalPolicyConnection.pageInfo":
		if e.complexity.InternalPolicyConnection.PageInfo == nil {
			break
		}

		return e.complexity.InternalPolicyConnection.PageInfo(childComplexity), true

	case "InternalPolicyConnection.totalCount":
		if e.complexity.InternalPolicyConnection.TotalCount == nil {
			break
		}

		return e.complexity.InternalPolicyConnection.TotalCount(childComplexity), true

	case "InternalPolicyCreatePayload.internalPolicy":
		if e.complexity.InternalPolicyCreatePayload.InternalPolicy == nil {
			break
		}

		return e.complexity.InternalPolicyCreatePayload.InternalPolicy(childComplexity), true

	case "InternalPolicyDeletePayload.deletedID":
		if e.complexity.InternalPolicyDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.InternalPolicyDeletePayload.DeletedID(childComplexity), true

	case "InternalPolicyEdge.cursor":
		if e.complexity.InternalPolicyEdge.Cursor == nil {
			break
		}

		return e.complexity.InternalPolicyEdge.Cursor(childComplexity), true

	case "InternalPolicyEdge.node":
		if e.complexity.InternalPolicyEdge.Node == nil {
			break
		}

		return e.complexity.InternalPolicyEdge.Node(childComplexity), true

	case "InternalPolicyHistory.background":
		if e.complexity.InternalPolicyHistory.Background == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Background(childComplexity), true

	case "InternalPolicyHistory.createdAt":
		if e.complexity.InternalPolicyHistory.CreatedAt == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.CreatedAt(childComplexity), true

	case "InternalPolicyHistory.createdBy":
		if e.complexity.InternalPolicyHistory.CreatedBy == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.CreatedBy(childComplexity), true

	case "InternalPolicyHistory.deletedAt":
		if e.complexity.InternalPolicyHistory.DeletedAt == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.DeletedAt(childComplexity), true

	case "InternalPolicyHistory.deletedBy":
		if e.complexity.InternalPolicyHistory.DeletedBy == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.DeletedBy(childComplexity), true

	case "InternalPolicyHistory.description":
		if e.complexity.InternalPolicyHistory.Description == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Description(childComplexity), true

	case "InternalPolicyHistory.details":
		if e.complexity.InternalPolicyHistory.Details == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Details(childComplexity), true

	case "InternalPolicyHistory.historyTime":
		if e.complexity.InternalPolicyHistory.HistoryTime == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.HistoryTime(childComplexity), true

	case "InternalPolicyHistory.id":
		if e.complexity.InternalPolicyHistory.ID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.ID(childComplexity), true

	case "InternalPolicyHistory.name":
		if e.complexity.InternalPolicyHistory.Name == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Name(childComplexity), true

	case "InternalPolicyHistory.operation":
		if e.complexity.InternalPolicyHistory.Operation == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Operation(childComplexity), true

	case "InternalPolicyHistory.ownerID":
		if e.complexity.InternalPolicyHistory.OwnerID == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.OwnerID(childComplexity), true

	case "InternalPolicyHistory.policyType":
		if e.complexity.InternalPolicyHistory.PolicyType == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.PolicyType(childComplexity), true

	case "InternalPolicyHistory.purposeAndScope":
		if e.complexity.InternalPolicyHistory.PurposeAndScope == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.PurposeAndScope(childComplexity), true

	case "InternalPolicyHistory.ref":
		if e.complexity.InternalPolicyHistory.Ref == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Ref(childComplexity), true

	case "InternalPolicyHistory.status":
		if e.complexity.InternalPolicyHistory.Status == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Status(childComplexity), true

	case "InternalPolicyHistory.tags":
		if e.complexity.InternalPolicyHistory.Tags == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Tags(childComplexity), true

	case "InternalPolicyHistory.updatedAt":
		if e.complexity.InternalPolicyHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.UpdatedAt(childComplexity), true

	case "InternalPolicyHistory.updatedBy":
		if e.complexity.InternalPolicyHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.UpdatedBy(childComplexity), true

	case "InternalPolicyHistory.version":
		if e.complexity.InternalPolicyHistory.Version == nil {
			break
		}

		return e.complexity.InternalPolicyHistory.Version(childComplexity), true

	case "InternalPolicyHistoryConnection.edges":
		if e.complexity.InternalPolicyHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryConnection.Edges(childComplexity), true

	case "InternalPolicyHistoryConnection.pageInfo":
		if e.complexity.InternalPolicyHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryConnection.PageInfo(childComplexity), true

	case "InternalPolicyHistoryConnection.totalCount":
		if e.complexity.InternalPolicyHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryConnection.TotalCount(childComplexity), true

	case "InternalPolicyHistoryEdge.cursor":
		if e.complexity.InternalPolicyHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryEdge.Cursor(childComplexity), true

	case "InternalPolicyHistoryEdge.node":
		if e.complexity.InternalPolicyHistoryEdge.Node == nil {
			break
		}

		return e.complexity.InternalPolicyHistoryEdge.Node(childComplexity), true

	case "InternalPolicySearchResult.internalPolicies":
		if e.complexity.InternalPolicySearchResult.InternalPolicies == nil {
			break
		}

		return e.complexity.InternalPolicySearchResult.InternalPolicies(childComplexity), true

	case "InternalPolicyUpdatePayload.internalPolicy":
		if e.complexity.InternalPolicyUpdatePayload.InternalPolicy == nil {
			break
		}

		return e.complexity.InternalPolicyUpdatePayload.InternalPolicy(childComplexity), true

	case "Invite.createdAt":
		if e.complexity.Invite.CreatedAt == nil {
			break
		}

		return e.complexity.Invite.CreatedAt(childComplexity), true

	case "Invite.createdBy":
		if e.complexity.Invite.CreatedBy == nil {
			break
		}

		return e.complexity.Invite.CreatedBy(childComplexity), true

	case "Invite.deletedAt":
		if e.complexity.Invite.DeletedAt == nil {
			break
		}

		return e.complexity.Invite.DeletedAt(childComplexity), true

	case "Invite.deletedBy":
		if e.complexity.Invite.DeletedBy == nil {
			break
		}

		return e.complexity.Invite.DeletedBy(childComplexity), true

	case "Invite.events":
		if e.complexity.Invite.Events == nil {
			break
		}

		return e.complexity.Invite.Events(childComplexity), true

	case "Invite.expires":
		if e.complexity.Invite.Expires == nil {
			break
		}

		return e.complexity.Invite.Expires(childComplexity), true

	case "Invite.id":
		if e.complexity.Invite.ID == nil {
			break
		}

		return e.complexity.Invite.ID(childComplexity), true

	case "Invite.owner":
		if e.complexity.Invite.Owner == nil {
			break
		}

		return e.complexity.Invite.Owner(childComplexity), true

	case "Invite.ownerID":
		if e.complexity.Invite.OwnerID == nil {
			break
		}

		return e.complexity.Invite.OwnerID(childComplexity), true

	case "Invite.recipient":
		if e.complexity.Invite.Recipient == nil {
			break
		}

		return e.complexity.Invite.Recipient(childComplexity), true

	case "Invite.requestorID":
		if e.complexity.Invite.RequestorID == nil {
			break
		}

		return e.complexity.Invite.RequestorID(childComplexity), true

	case "Invite.role":
		if e.complexity.Invite.Role == nil {
			break
		}

		return e.complexity.Invite.Role(childComplexity), true

	case "Invite.sendAttempts":
		if e.complexity.Invite.SendAttempts == nil {
			break
		}

		return e.complexity.Invite.SendAttempts(childComplexity), true

	case "Invite.status":
		if e.complexity.Invite.Status == nil {
			break
		}

		return e.complexity.Invite.Status(childComplexity), true

	case "Invite.updatedAt":
		if e.complexity.Invite.UpdatedAt == nil {
			break
		}

		return e.complexity.Invite.UpdatedAt(childComplexity), true

	case "Invite.updatedBy":
		if e.complexity.Invite.UpdatedBy == nil {
			break
		}

		return e.complexity.Invite.UpdatedBy(childComplexity), true

	case "InviteBulkCreatePayload.invites":
		if e.complexity.InviteBulkCreatePayload.Invites == nil {
			break
		}

		return e.complexity.InviteBulkCreatePayload.Invites(childComplexity), true

	case "InviteConnection.edges":
		if e.complexity.InviteConnection.Edges == nil {
			break
		}

		return e.complexity.InviteConnection.Edges(childComplexity), true

	case "InviteConnection.pageInfo":
		if e.complexity.InviteConnection.PageInfo == nil {
			break
		}

		return e.complexity.InviteConnection.PageInfo(childComplexity), true

	case "InviteConnection.totalCount":
		if e.complexity.InviteConnection.TotalCount == nil {
			break
		}

		return e.complexity.InviteConnection.TotalCount(childComplexity), true

	case "InviteCreatePayload.invite":
		if e.complexity.InviteCreatePayload.Invite == nil {
			break
		}

		return e.complexity.InviteCreatePayload.Invite(childComplexity), true

	case "InviteDeletePayload.deletedID":
		if e.complexity.InviteDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.InviteDeletePayload.DeletedID(childComplexity), true

	case "InviteEdge.cursor":
		if e.complexity.InviteEdge.Cursor == nil {
			break
		}

		return e.complexity.InviteEdge.Cursor(childComplexity), true

	case "InviteEdge.node":
		if e.complexity.InviteEdge.Node == nil {
			break
		}

		return e.complexity.InviteEdge.Node(childComplexity), true

	case "InviteUpdatePayload.invite":
		if e.complexity.InviteUpdatePayload.Invite == nil {
			break
		}

		return e.complexity.InviteUpdatePayload.Invite(childComplexity), true

	case "Mutation.createAPIToken":
		if e.complexity.Mutation.CreateAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_createAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAPIToken(childComplexity, args["input"].(generated.CreateAPITokenInput)), true

	case "Mutation.createActionPlan":
		if e.complexity.Mutation.CreateActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createActionPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateActionPlan(childComplexity, args["input"].(generated.CreateActionPlanInput)), true

	case "Mutation.createBulkAPIToken":
		if e.complexity.Mutation.CreateBulkAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkAPIToken(childComplexity, args["input"].([]*generated.CreateAPITokenInput)), true

	case "Mutation.createBulkActionPlan":
		if e.complexity.Mutation.CreateBulkActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkActionPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkActionPlan(childComplexity, args["input"].([]*generated.CreateActionPlanInput)), true

	case "Mutation.createBulkCSVAPIToken":
		if e.complexity.Mutation.CreateBulkCSVAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVAPIToken(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVActionPlan":
		if e.complexity.Mutation.CreateBulkCSVActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVActionPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVActionPlan(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVContact":
		if e.complexity.Mutation.CreateBulkCSVContact == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVContact(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVControl":
		if e.complexity.Mutation.CreateBulkCSVControl == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVControl(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVControlObjective":
		if e.complexity.Mutation.CreateBulkCSVControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVControlObjective_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVControlObjective(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVDocumentData":
		if e.complexity.Mutation.CreateBulkCSVDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVDocumentData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVDocumentData(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVEntity":
		if e.complexity.Mutation.CreateBulkCSVEntity == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVEntity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVEntity(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVEntityType":
		if e.complexity.Mutation.CreateBulkCSVEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVEntityType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVEntityType(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVEvent":
		if e.complexity.Mutation.CreateBulkCSVEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVEvent(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVGroup":
		if e.complexity.Mutation.CreateBulkCSVGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVGroup(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVGroupMembership":
		if e.complexity.Mutation.CreateBulkCSVGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVGroupMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVGroupMembership(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVGroupSetting":
		if e.complexity.Mutation.CreateBulkCSVGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVGroupSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVGroupSetting(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVHush":
		if e.complexity.Mutation.CreateBulkCSVHush == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVHush_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVHush(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVIntegration":
		if e.complexity.Mutation.CreateBulkCSVIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVIntegration(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVInternalPolicy":
		if e.complexity.Mutation.CreateBulkCSVInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVInternalPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVInternalPolicy(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVInvite":
		if e.complexity.Mutation.CreateBulkCSVInvite == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVInvite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVInvite(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVNarrative":
		if e.complexity.Mutation.CreateBulkCSVNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVNarrative_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVNarrative(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVOrgMembership":
		if e.complexity.Mutation.CreateBulkCSVOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVOrgMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVOrgMembership(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVOrganization":
		if e.complexity.Mutation.CreateBulkCSVOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVOrganization(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVOrganizationSetting":
		if e.complexity.Mutation.CreateBulkCSVOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVOrganizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVOrganizationSetting(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVPersonalAccessToken":
		if e.complexity.Mutation.CreateBulkCSVPersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVPersonalAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVPersonalAccessToken(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVProcedure":
		if e.complexity.Mutation.CreateBulkCSVProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVProcedure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVProcedure(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVProgram":
		if e.complexity.Mutation.CreateBulkCSVProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVProgram(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVProgramMembership":
		if e.complexity.Mutation.CreateBulkCSVProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVProgramMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVProgramMembership(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVRisk":
		if e.complexity.Mutation.CreateBulkCSVRisk == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVRisk(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVStandard":
		if e.complexity.Mutation.CreateBulkCSVStandard == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVStandard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVStandard(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVSubcontrol":
		if e.complexity.Mutation.CreateBulkCSVSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVSubcontrol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVSubcontrol(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVSubscriber":
		if e.complexity.Mutation.CreateBulkCSVSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVSubscriber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVSubscriber(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVTask":
		if e.complexity.Mutation.CreateBulkCSVTask == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVTask(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVTemplate":
		if e.complexity.Mutation.CreateBulkCSVTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVTemplate(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkCSVUserSetting":
		if e.complexity.Mutation.CreateBulkCSVUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkCSVUserSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkCSVUserSetting(childComplexity, args["input"].(graphql.Upload)), true

	case "Mutation.createBulkContact":
		if e.complexity.Mutation.CreateBulkContact == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkContact(childComplexity, args["input"].([]*generated.CreateContactInput)), true

	case "Mutation.createBulkControl":
		if e.complexity.Mutation.CreateBulkControl == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkControl(childComplexity, args["input"].([]*generated.CreateControlInput)), true

	case "Mutation.createBulkControlObjective":
		if e.complexity.Mutation.CreateBulkControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkControlObjective_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkControlObjective(childComplexity, args["input"].([]*generated.CreateControlObjectiveInput)), true

	case "Mutation.createBulkDocumentData":
		if e.complexity.Mutation.CreateBulkDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkDocumentData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkDocumentData(childComplexity, args["input"].([]*generated.CreateDocumentDataInput)), true

	case "Mutation.createBulkEntity":
		if e.complexity.Mutation.CreateBulkEntity == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkEntity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkEntity(childComplexity, args["input"].([]*generated.CreateEntityInput)), true

	case "Mutation.createBulkEntityType":
		if e.complexity.Mutation.CreateBulkEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkEntityType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkEntityType(childComplexity, args["input"].([]*generated.CreateEntityTypeInput)), true

	case "Mutation.createBulkEvent":
		if e.complexity.Mutation.CreateBulkEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkEvent(childComplexity, args["input"].([]*generated.CreateEventInput)), true

	case "Mutation.createBulkGroup":
		if e.complexity.Mutation.CreateBulkGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkGroup(childComplexity, args["input"].([]*generated.CreateGroupInput)), true

	case "Mutation.createBulkGroupMembership":
		if e.complexity.Mutation.CreateBulkGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkGroupMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkGroupMembership(childComplexity, args["input"].([]*generated.CreateGroupMembershipInput)), true

	case "Mutation.createBulkGroupSetting":
		if e.complexity.Mutation.CreateBulkGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkGroupSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkGroupSetting(childComplexity, args["input"].([]*generated.CreateGroupSettingInput)), true

	case "Mutation.createBulkHush":
		if e.complexity.Mutation.CreateBulkHush == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkHush_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkHush(childComplexity, args["input"].([]*generated.CreateHushInput)), true

	case "Mutation.createBulkIntegration":
		if e.complexity.Mutation.CreateBulkIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkIntegration(childComplexity, args["input"].([]*generated.CreateIntegrationInput)), true

	case "Mutation.createBulkInternalPolicy":
		if e.complexity.Mutation.CreateBulkInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkInternalPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkInternalPolicy(childComplexity, args["input"].([]*generated.CreateInternalPolicyInput)), true

	case "Mutation.createBulkInvite":
		if e.complexity.Mutation.CreateBulkInvite == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkInvite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkInvite(childComplexity, args["input"].([]*generated.CreateInviteInput)), true

	case "Mutation.createBulkNarrative":
		if e.complexity.Mutation.CreateBulkNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkNarrative_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkNarrative(childComplexity, args["input"].([]*generated.CreateNarrativeInput)), true

	case "Mutation.createBulkOrgMembership":
		if e.complexity.Mutation.CreateBulkOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkOrgMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkOrgMembership(childComplexity, args["input"].([]*generated.CreateOrgMembershipInput)), true

	case "Mutation.createBulkOrganization":
		if e.complexity.Mutation.CreateBulkOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkOrganization(childComplexity, args["input"].([]*generated.CreateOrganizationInput)), true

	case "Mutation.createBulkOrganizationSetting":
		if e.complexity.Mutation.CreateBulkOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkOrganizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkOrganizationSetting(childComplexity, args["input"].([]*generated.CreateOrganizationSettingInput)), true

	case "Mutation.createBulkPersonalAccessToken":
		if e.complexity.Mutation.CreateBulkPersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkPersonalAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkPersonalAccessToken(childComplexity, args["input"].([]*generated.CreatePersonalAccessTokenInput)), true

	case "Mutation.createBulkProcedure":
		if e.complexity.Mutation.CreateBulkProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkProcedure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkProcedure(childComplexity, args["input"].([]*generated.CreateProcedureInput)), true

	case "Mutation.createBulkProgram":
		if e.complexity.Mutation.CreateBulkProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkProgram(childComplexity, args["input"].([]*generated.CreateProgramInput)), true

	case "Mutation.createBulkProgramMembership":
		if e.complexity.Mutation.CreateBulkProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkProgramMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkProgramMembership(childComplexity, args["input"].([]*generated.CreateProgramMembershipInput)), true

	case "Mutation.createBulkRisk":
		if e.complexity.Mutation.CreateBulkRisk == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkRisk(childComplexity, args["input"].([]*generated.CreateRiskInput)), true

	case "Mutation.createBulkStandard":
		if e.complexity.Mutation.CreateBulkStandard == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkStandard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkStandard(childComplexity, args["input"].([]*generated.CreateStandardInput)), true

	case "Mutation.createBulkSubcontrol":
		if e.complexity.Mutation.CreateBulkSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkSubcontrol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkSubcontrol(childComplexity, args["input"].([]*generated.CreateSubcontrolInput)), true

	case "Mutation.createBulkSubscriber":
		if e.complexity.Mutation.CreateBulkSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkSubscriber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkSubscriber(childComplexity, args["input"].([]*generated.CreateSubscriberInput)), true

	case "Mutation.createBulkTask":
		if e.complexity.Mutation.CreateBulkTask == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkTask(childComplexity, args["input"].([]*generated.CreateTaskInput)), true

	case "Mutation.createBulkTemplate":
		if e.complexity.Mutation.CreateBulkTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkTemplate(childComplexity, args["input"].([]*generated.CreateTemplateInput)), true

	case "Mutation.createBulkUserSetting":
		if e.complexity.Mutation.CreateBulkUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createBulkUserSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBulkUserSetting(childComplexity, args["input"].([]*generated.CreateUserSettingInput)), true

	case "Mutation.createContact":
		if e.complexity.Mutation.CreateContact == nil {
			break
		}

		args, err := ec.field_Mutation_createContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateContact(childComplexity, args["input"].(generated.CreateContactInput)), true

	case "Mutation.createControl":
		if e.complexity.Mutation.CreateControl == nil {
			break
		}

		args, err := ec.field_Mutation_createControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControl(childComplexity, args["input"].(generated.CreateControlInput)), true

	case "Mutation.createControlObjective":
		if e.complexity.Mutation.CreateControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_createControlObjective_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControlObjective(childComplexity, args["input"].(generated.CreateControlObjectiveInput)), true

	case "Mutation.createControlWithSubcontrols":
		if e.complexity.Mutation.CreateControlWithSubcontrols == nil {
			break
		}

		args, err := ec.field_Mutation_createControlWithSubcontrols_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateControlWithSubcontrols(childComplexity, args["input"].(model.CreateControlWithSubcontrolsInput)), true

	case "Mutation.createDocumentData":
		if e.complexity.Mutation.CreateDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_createDocumentData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDocumentData(childComplexity, args["input"].(generated.CreateDocumentDataInput)), true

	case "Mutation.createEntity":
		if e.complexity.Mutation.CreateEntity == nil {
			break
		}

		args, err := ec.field_Mutation_createEntity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEntity(childComplexity, args["input"].(generated.CreateEntityInput)), true

	case "Mutation.createEntityType":
		if e.complexity.Mutation.CreateEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_createEntityType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEntityType(childComplexity, args["input"].(generated.CreateEntityTypeInput)), true

	case "Mutation.createEvent":
		if e.complexity.Mutation.CreateEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEvent(childComplexity, args["input"].(generated.CreateEventInput)), true

	case "Mutation.createFullProgram":
		if e.complexity.Mutation.CreateFullProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createFullProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFullProgram(childComplexity, args["input"].(model.CreateFullProgramInput)), true

	case "Mutation.createGroup":
		if e.complexity.Mutation.CreateGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroup(childComplexity, args["input"].(generated.CreateGroupInput)), true

	case "Mutation.createGroupMembership":
		if e.complexity.Mutation.CreateGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createGroupMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroupMembership(childComplexity, args["input"].(generated.CreateGroupMembershipInput)), true

	case "Mutation.createGroupSetting":
		if e.complexity.Mutation.CreateGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createGroupSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGroupSetting(childComplexity, args["input"].(generated.CreateGroupSettingInput)), true

	case "Mutation.createHush":
		if e.complexity.Mutation.CreateHush == nil {
			break
		}

		args, err := ec.field_Mutation_createHush_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHush(childComplexity, args["input"].(generated.CreateHushInput)), true

	case "Mutation.createIntegration":
		if e.complexity.Mutation.CreateIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_createIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIntegration(childComplexity, args["input"].(generated.CreateIntegrationInput)), true

	case "Mutation.createInternalPolicy":
		if e.complexity.Mutation.CreateInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createInternalPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateInternalPolicy(childComplexity, args["input"].(generated.CreateInternalPolicyInput)), true

	case "Mutation.createInvite":
		if e.complexity.Mutation.CreateInvite == nil {
			break
		}

		args, err := ec.field_Mutation_createInvite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateInvite(childComplexity, args["input"].(generated.CreateInviteInput)), true

	case "Mutation.createNarrative":
		if e.complexity.Mutation.CreateNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_createNarrative_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNarrative(childComplexity, args["input"].(generated.CreateNarrativeInput)), true

	case "Mutation.createOrgMembership":
		if e.complexity.Mutation.CreateOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createOrgMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrgMembership(childComplexity, args["input"].(generated.CreateOrgMembershipInput)), true

	case "Mutation.createOrganization":
		if e.complexity.Mutation.CreateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganization(childComplexity, args["input"].(generated.CreateOrganizationInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.createOrganizationSetting":
		if e.complexity.Mutation.CreateOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationSetting(childComplexity, args["input"].(generated.CreateOrganizationSettingInput)), true

	case "Mutation.createPersonalAccessToken":
		if e.complexity.Mutation.CreatePersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_createPersonalAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePersonalAccessToken(childComplexity, args["input"].(generated.CreatePersonalAccessTokenInput)), true

	case "Mutation.createProcedure":
		if e.complexity.Mutation.CreateProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_createProcedure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProcedure(childComplexity, args["input"].(generated.CreateProcedureInput)), true

	case "Mutation.createProgram":
		if e.complexity.Mutation.CreateProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProgram(childComplexity, args["input"].(generated.CreateProgramInput)), true

	case "Mutation.createProgramMembership":
		if e.complexity.Mutation.CreateProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_createProgramMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProgramMembership(childComplexity, args["input"].(generated.CreateProgramMembershipInput)), true

	case "Mutation.createProgramWithMembers":
		if e.complexity.Mutation.CreateProgramWithMembers == nil {
			break
		}

		args, err := ec.field_Mutation_createProgramWithMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProgramWithMembers(childComplexity, args["input"].(model.CreateProgramWithMembersInput)), true

	case "Mutation.createRisk":
		if e.complexity.Mutation.CreateRisk == nil {
			break
		}

		args, err := ec.field_Mutation_createRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRisk(childComplexity, args["input"].(generated.CreateRiskInput)), true

	case "Mutation.createStandard":
		if e.complexity.Mutation.CreateStandard == nil {
			break
		}

		args, err := ec.field_Mutation_createStandard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateStandard(childComplexity, args["input"].(generated.CreateStandardInput)), true

	case "Mutation.createSubcontrol":
		if e.complexity.Mutation.CreateSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_createSubcontrol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubcontrol(childComplexity, args["input"].(generated.CreateSubcontrolInput)), true

	case "Mutation.createSubscriber":
		if e.complexity.Mutation.CreateSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_createSubscriber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubscriber(childComplexity, args["input"].(generated.CreateSubscriberInput)), true

	case "Mutation.createTFASetting":
		if e.complexity.Mutation.CreateTFASetting == nil {
			break
		}

		args, err := ec.field_Mutation_createTFASetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTFASetting(childComplexity, args["input"].(generated.CreateTFASettingInput)), true

	case "Mutation.createTask":
		if e.complexity.Mutation.CreateTask == nil {
			break
		}

		args, err := ec.field_Mutation_createTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTask(childComplexity, args["input"].(generated.CreateTaskInput)), true

	case "Mutation.createTemplate":
		if e.complexity.Mutation.CreateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTemplate(childComplexity, args["input"].(generated.CreateTemplateInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(generated.CreateUserInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.createUserSetting":
		if e.complexity.Mutation.CreateUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createUserSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserSetting(childComplexity, args["input"].(generated.CreateUserSettingInput)), true

	case "Mutation.deleteAPIToken":
		if e.complexity.Mutation.DeleteAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAPIToken(childComplexity, args["id"].(string)), true

	case "Mutation.deleteActionPlan":
		if e.complexity.Mutation.DeleteActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_deleteActionPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteActionPlan(childComplexity, args["id"].(string)), true

	case "Mutation.deleteContact":
		if e.complexity.Mutation.DeleteContact == nil {
			break
		}

		args, err := ec.field_Mutation_deleteContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteContact(childComplexity, args["id"].(string)), true

	case "Mutation.deleteControl":
		if e.complexity.Mutation.DeleteControl == nil {
			break
		}

		args, err := ec.field_Mutation_deleteControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControl(childComplexity, args["id"].(string)), true

	case "Mutation.deleteControlObjective":
		if e.complexity.Mutation.DeleteControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_deleteControlObjective_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlObjective(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDocumentData":
		if e.complexity.Mutation.DeleteDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDocumentData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDocumentData(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEntity":
		if e.complexity.Mutation.DeleteEntity == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEntity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEntity(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEntityType":
		if e.complexity.Mutation.DeleteEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEntityType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEntityType(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEvent":
		if e.complexity.Mutation.DeleteEvent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEvent(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFile":
		if e.complexity.Mutation.DeleteFile == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFile(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGroup":
		if e.complexity.Mutation.DeleteGroup == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGroup(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGroupMembership":
		if e.complexity.Mutation.DeleteGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGroupMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGroupMembership(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGroupSetting":
		if e.complexity.Mutation.DeleteGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGroupSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGroupSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deleteHush":
		if e.complexity.Mutation.DeleteHush == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHush_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHush(childComplexity, args["id"].(string)), true

	case "Mutation.deleteIntegration":
		if e.complexity.Mutation.DeleteIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIntegration(childComplexity, args["id"].(string)), true

	case "Mutation.deleteInternalPolicy":
		if e.complexity.Mutation.DeleteInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInternalPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInternalPolicy(childComplexity, args["id"].(string)), true

	case "Mutation.deleteInvite":
		if e.complexity.Mutation.DeleteInvite == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInvite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInvite(childComplexity, args["id"].(string)), true

	case "Mutation.deleteNarrative":
		if e.complexity.Mutation.DeleteNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNarrative_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNarrative(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrgMembership":
		if e.complexity.Mutation.DeleteOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrgMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrgMembership(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrganization":
		if e.complexity.Mutation.DeleteOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganization(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrganizationSetting":
		if e.complexity.Mutation.DeleteOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganizationSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deletePersonalAccessToken":
		if e.complexity.Mutation.DeletePersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_deletePersonalAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePersonalAccessToken(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProcedure":
		if e.complexity.Mutation.DeleteProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProcedure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProcedure(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProgram":
		if e.complexity.Mutation.DeleteProgram == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProgram(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProgramMembership":
		if e.complexity.Mutation.DeleteProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProgramMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProgramMembership(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRisk":
		if e.complexity.Mutation.DeleteRisk == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRisk(childComplexity, args["id"].(string)), true

	case "Mutation.deleteStandard":
		if e.complexity.Mutation.DeleteStandard == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStandard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStandard(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSubcontrol":
		if e.complexity.Mutation.DeleteSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubcontrol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubcontrol(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSubscriber":
		if e.complexity.Mutation.DeleteSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubscriber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubscriber(childComplexity, args["email"].(string), args["ownerID"].(*string)), true

	case "Mutation.deleteTask":
		if e.complexity.Mutation.DeleteTask == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTask(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTemplate":
		if e.complexity.Mutation.DeleteTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTemplate(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.updateAPIToken":
		if e.complexity.Mutation.UpdateAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAPIToken(childComplexity, args["id"].(string), args["input"].(generated.UpdateAPITokenInput)), true

	case "Mutation.updateActionPlan":
		if e.complexity.Mutation.UpdateActionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_updateActionPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateActionPlan(childComplexity, args["id"].(string), args["input"].(generated.UpdateActionPlanInput)), true

	case "Mutation.updateContact":
		if e.complexity.Mutation.UpdateContact == nil {
			break
		}

		args, err := ec.field_Mutation_updateContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateContact(childComplexity, args["id"].(string), args["input"].(generated.UpdateContactInput)), true

	case "Mutation.updateControl":
		if e.complexity.Mutation.UpdateControl == nil {
			break
		}

		args, err := ec.field_Mutation_updateControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControl(childComplexity, args["id"].(string), args["input"].(generated.UpdateControlInput)), true

	case "Mutation.updateControlObjective":
		if e.complexity.Mutation.UpdateControlObjective == nil {
			break
		}

		args, err := ec.field_Mutation_updateControlObjective_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlObjective(childComplexity, args["id"].(string), args["input"].(generated.UpdateControlObjectiveInput)), true

	case "Mutation.updateDocumentData":
		if e.complexity.Mutation.UpdateDocumentData == nil {
			break
		}

		args, err := ec.field_Mutation_updateDocumentData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDocumentData(childComplexity, args["id"].(string), args["input"].(generated.UpdateDocumentDataInput)), true

	case "Mutation.updateEntity":
		if e.complexity.Mutation.UpdateEntity == nil {
			break
		}

		args, err := ec.field_Mutation_updateEntity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEntity(childComplexity, args["id"].(string), args["input"].(generated.UpdateEntityInput)), true

	case "Mutation.updateEntityType":
		if e.complexity.Mutation.UpdateEntityType == nil {
			break
		}

		args, err := ec.field_Mutation_updateEntityType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEntityType(childComplexity, args["id"].(string), args["input"].(generated.UpdateEntityTypeInput)), true

	case "Mutation.updateEvent":
		if e.complexity.Mutation.UpdateEvent == nil {
			break
		}

		args, err := ec.field_Mutation_updateEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEvent(childComplexity, args["id"].(string), args["input"].(generated.UpdateEventInput)), true

	case "Mutation.updateGroup":
		if e.complexity.Mutation.UpdateGroup == nil {
			break
		}

		args, err := ec.field_Mutation_updateGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGroup(childComplexity, args["id"].(string), args["input"].(generated.UpdateGroupInput)), true

	case "Mutation.updateGroupMembership":
		if e.complexity.Mutation.UpdateGroupMembership == nil {
			break
		}

		args, err := ec.field_Mutation_updateGroupMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGroupMembership(childComplexity, args["id"].(string), args["input"].(generated.UpdateGroupMembershipInput)), true

	case "Mutation.updateGroupSetting":
		if e.complexity.Mutation.UpdateGroupSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateGroupSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGroupSetting(childComplexity, args["id"].(string), args["input"].(generated.UpdateGroupSettingInput)), true

	case "Mutation.updateHush":
		if e.complexity.Mutation.UpdateHush == nil {
			break
		}

		args, err := ec.field_Mutation_updateHush_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHush(childComplexity, args["id"].(string), args["input"].(generated.UpdateHushInput)), true

	case "Mutation.updateIntegration":
		if e.complexity.Mutation.UpdateIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_updateIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIntegration(childComplexity, args["id"].(string), args["input"].(generated.UpdateIntegrationInput)), true

	case "Mutation.updateInternalPolicy":
		if e.complexity.Mutation.UpdateInternalPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_updateInternalPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateInternalPolicy(childComplexity, args["id"].(string), args["input"].(generated.UpdateInternalPolicyInput)), true

	case "Mutation.updateInvite":
		if e.complexity.Mutation.UpdateInvite == nil {
			break
		}

		args, err := ec.field_Mutation_updateInvite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateInvite(childComplexity, args["id"].(string), args["input"].(generated.UpdateInviteInput)), true

	case "Mutation.updateNarrative":
		if e.complexity.Mutation.UpdateNarrative == nil {
			break
		}

		args, err := ec.field_Mutation_updateNarrative_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNarrative(childComplexity, args["id"].(string), args["input"].(generated.UpdateNarrativeInput)), true

	case "Mutation.updateOrgMembership":
		if e.complexity.Mutation.UpdateOrgMembership == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgMembership(childComplexity, args["id"].(string), args["input"].(generated.UpdateOrgMembershipInput)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["id"].(string), args["input"].(generated.UpdateOrganizationInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.updateOrganizationSetting":
		if e.complexity.Mutation.UpdateOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationSetting(childComplexity, args["id"].(string), args["input"].(generated.UpdateOrganizationSettingInput)), true

	case "Mutation.updatePersonalAccessToken":
		if e.complexity.Mutation.UpdatePersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Mutation_updatePersonalAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePersonalAccessToken(childComplexity, args["id"].(string), args["input"].(generated.UpdatePersonalAccessTokenInput)), true

	case "Mutation.updateProcedure":
		if e.complexity.Mutation.UpdateProcedure == nil {
			break
		}

		args, err := ec.field_Mutation_updateProcedure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProcedure(childComplexity, args["id"].(string), args["input"].(generated.UpdateProcedureInput)), true

	case "Mutation.updateProgram":
		if e.complexity.Mutation.UpdateProgram == nil {
			break
		}

		args, err := ec.field_Mutation_updateProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProgram(childComplexity, args["id"].(string), args["input"].(generated.UpdateProgramInput)), true

	case "Mutation.updateProgramMembership":
		if e.complexity.Mutation.UpdateProgramMembership == nil {
			break
		}

		args, err := ec.field_Mutation_updateProgramMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProgramMembership(childComplexity, args["id"].(string), args["input"].(generated.UpdateProgramMembershipInput)), true

	case "Mutation.updateRisk":
		if e.complexity.Mutation.UpdateRisk == nil {
			break
		}

		args, err := ec.field_Mutation_updateRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRisk(childComplexity, args["id"].(string), args["input"].(generated.UpdateRiskInput)), true

	case "Mutation.updateStandard":
		if e.complexity.Mutation.UpdateStandard == nil {
			break
		}

		args, err := ec.field_Mutation_updateStandard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateStandard(childComplexity, args["id"].(string), args["input"].(generated.UpdateStandardInput)), true

	case "Mutation.updateSubcontrol":
		if e.complexity.Mutation.UpdateSubcontrol == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubcontrol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubcontrol(childComplexity, args["id"].(string), args["input"].(generated.UpdateSubcontrolInput)), true

	case "Mutation.updateSubscriber":
		if e.complexity.Mutation.UpdateSubscriber == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubscriber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubscriber(childComplexity, args["email"].(string), args["input"].(generated.UpdateSubscriberInput)), true

	case "Mutation.updateTFASetting":
		if e.complexity.Mutation.UpdateTFASetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateTFASetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTFASetting(childComplexity, args["input"].(generated.UpdateTFASettingInput)), true

	case "Mutation.updateTask":
		if e.complexity.Mutation.UpdateTask == nil {
			break
		}

		args, err := ec.field_Mutation_updateTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTask(childComplexity, args["id"].(string), args["input"].(generated.UpdateTaskInput)), true

	case "Mutation.updateTemplate":
		if e.complexity.Mutation.UpdateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTemplate(childComplexity, args["id"].(string), args["input"].(generated.UpdateTemplateInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(string), args["input"].(generated.UpdateUserInput), args["avatarFile"].(*graphql.Upload)), true

	case "Mutation.updateUserSetting":
		if e.complexity.Mutation.UpdateUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserSetting(childComplexity, args["id"].(string), args["input"].(generated.UpdateUserSettingInput)), true

	case "Narrative.blockedGroups":
		if e.complexity.Narrative.BlockedGroups == nil {
			break
		}

		return e.complexity.Narrative.BlockedGroups(childComplexity), true

	case "Narrative.control":
		if e.complexity.Narrative.Control == nil {
			break
		}

		return e.complexity.Narrative.Control(childComplexity), true

	case "Narrative.controlObjective":
		if e.complexity.Narrative.ControlObjective == nil {
			break
		}

		return e.complexity.Narrative.ControlObjective(childComplexity), true

	case "Narrative.createdAt":
		if e.complexity.Narrative.CreatedAt == nil {
			break
		}

		return e.complexity.Narrative.CreatedAt(childComplexity), true

	case "Narrative.createdBy":
		if e.complexity.Narrative.CreatedBy == nil {
			break
		}

		return e.complexity.Narrative.CreatedBy(childComplexity), true

	case "Narrative.deletedAt":
		if e.complexity.Narrative.DeletedAt == nil {
			break
		}

		return e.complexity.Narrative.DeletedAt(childComplexity), true

	case "Narrative.deletedBy":
		if e.complexity.Narrative.DeletedBy == nil {
			break
		}

		return e.complexity.Narrative.DeletedBy(childComplexity), true

	case "Narrative.description":
		if e.complexity.Narrative.Description == nil {
			break
		}

		return e.complexity.Narrative.Description(childComplexity), true

	case "Narrative.details":
		if e.complexity.Narrative.Details == nil {
			break
		}

		return e.complexity.Narrative.Details(childComplexity), true

	case "Narrative.editors":
		if e.complexity.Narrative.Editors == nil {
			break
		}

		return e.complexity.Narrative.Editors(childComplexity), true

	case "Narrative.id":
		if e.complexity.Narrative.ID == nil {
			break
		}

		return e.complexity.Narrative.ID(childComplexity), true

	case "Narrative.internalPolicy":
		if e.complexity.Narrative.InternalPolicy == nil {
			break
		}

		return e.complexity.Narrative.InternalPolicy(childComplexity), true

	case "Narrative.name":
		if e.complexity.Narrative.Name == nil {
			break
		}

		return e.complexity.Narrative.Name(childComplexity), true

	case "Narrative.owner":
		if e.complexity.Narrative.Owner == nil {
			break
		}

		return e.complexity.Narrative.Owner(childComplexity), true

	case "Narrative.ownerID":
		if e.complexity.Narrative.OwnerID == nil {
			break
		}

		return e.complexity.Narrative.OwnerID(childComplexity), true

	case "Narrative.procedure":
		if e.complexity.Narrative.Procedure == nil {
			break
		}

		return e.complexity.Narrative.Procedure(childComplexity), true

	case "Narrative.programs":
		if e.complexity.Narrative.Programs == nil {
			break
		}

		return e.complexity.Narrative.Programs(childComplexity), true

	case "Narrative.satisfies":
		if e.complexity.Narrative.Satisfies == nil {
			break
		}

		return e.complexity.Narrative.Satisfies(childComplexity), true

	case "Narrative.tags":
		if e.complexity.Narrative.Tags == nil {
			break
		}

		return e.complexity.Narrative.Tags(childComplexity), true

	case "Narrative.updatedAt":
		if e.complexity.Narrative.UpdatedAt == nil {
			break
		}

		return e.complexity.Narrative.UpdatedAt(childComplexity), true

	case "Narrative.updatedBy":
		if e.complexity.Narrative.UpdatedBy == nil {
			break
		}

		return e.complexity.Narrative.UpdatedBy(childComplexity), true

	case "Narrative.viewers":
		if e.complexity.Narrative.Viewers == nil {
			break
		}

		return e.complexity.Narrative.Viewers(childComplexity), true

	case "NarrativeBulkCreatePayload.narratives":
		if e.complexity.NarrativeBulkCreatePayload.Narratives == nil {
			break
		}

		return e.complexity.NarrativeBulkCreatePayload.Narratives(childComplexity), true

	case "NarrativeConnection.edges":
		if e.complexity.NarrativeConnection.Edges == nil {
			break
		}

		return e.complexity.NarrativeConnection.Edges(childComplexity), true

	case "NarrativeConnection.pageInfo":
		if e.complexity.NarrativeConnection.PageInfo == nil {
			break
		}

		return e.complexity.NarrativeConnection.PageInfo(childComplexity), true

	case "NarrativeConnection.totalCount":
		if e.complexity.NarrativeConnection.TotalCount == nil {
			break
		}

		return e.complexity.NarrativeConnection.TotalCount(childComplexity), true

	case "NarrativeCreatePayload.narrative":
		if e.complexity.NarrativeCreatePayload.Narrative == nil {
			break
		}

		return e.complexity.NarrativeCreatePayload.Narrative(childComplexity), true

	case "NarrativeDeletePayload.deletedID":
		if e.complexity.NarrativeDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.NarrativeDeletePayload.DeletedID(childComplexity), true

	case "NarrativeEdge.cursor":
		if e.complexity.NarrativeEdge.Cursor == nil {
			break
		}

		return e.complexity.NarrativeEdge.Cursor(childComplexity), true

	case "NarrativeEdge.node":
		if e.complexity.NarrativeEdge.Node == nil {
			break
		}

		return e.complexity.NarrativeEdge.Node(childComplexity), true

	case "NarrativeHistory.createdAt":
		if e.complexity.NarrativeHistory.CreatedAt == nil {
			break
		}

		return e.complexity.NarrativeHistory.CreatedAt(childComplexity), true

	case "NarrativeHistory.createdBy":
		if e.complexity.NarrativeHistory.CreatedBy == nil {
			break
		}

		return e.complexity.NarrativeHistory.CreatedBy(childComplexity), true

	case "NarrativeHistory.deletedAt":
		if e.complexity.NarrativeHistory.DeletedAt == nil {
			break
		}

		return e.complexity.NarrativeHistory.DeletedAt(childComplexity), true

	case "NarrativeHistory.deletedBy":
		if e.complexity.NarrativeHistory.DeletedBy == nil {
			break
		}

		return e.complexity.NarrativeHistory.DeletedBy(childComplexity), true

	case "NarrativeHistory.description":
		if e.complexity.NarrativeHistory.Description == nil {
			break
		}

		return e.complexity.NarrativeHistory.Description(childComplexity), true

	case "NarrativeHistory.details":
		if e.complexity.NarrativeHistory.Details == nil {
			break
		}

		return e.complexity.NarrativeHistory.Details(childComplexity), true

	case "NarrativeHistory.historyTime":
		if e.complexity.NarrativeHistory.HistoryTime == nil {
			break
		}

		return e.complexity.NarrativeHistory.HistoryTime(childComplexity), true

	case "NarrativeHistory.id":
		if e.complexity.NarrativeHistory.ID == nil {
			break
		}

		return e.complexity.NarrativeHistory.ID(childComplexity), true

	case "NarrativeHistory.name":
		if e.complexity.NarrativeHistory.Name == nil {
			break
		}

		return e.complexity.NarrativeHistory.Name(childComplexity), true

	case "NarrativeHistory.operation":
		if e.complexity.NarrativeHistory.Operation == nil {
			break
		}

		return e.complexity.NarrativeHistory.Operation(childComplexity), true

	case "NarrativeHistory.ownerID":
		if e.complexity.NarrativeHistory.OwnerID == nil {
			break
		}

		return e.complexity.NarrativeHistory.OwnerID(childComplexity), true

	case "NarrativeHistory.ref":
		if e.complexity.NarrativeHistory.Ref == nil {
			break
		}

		return e.complexity.NarrativeHistory.Ref(childComplexity), true

	case "NarrativeHistory.satisfies":
		if e.complexity.NarrativeHistory.Satisfies == nil {
			break
		}

		return e.complexity.NarrativeHistory.Satisfies(childComplexity), true

	case "NarrativeHistory.tags":
		if e.complexity.NarrativeHistory.Tags == nil {
			break
		}

		return e.complexity.NarrativeHistory.Tags(childComplexity), true

	case "NarrativeHistory.updatedAt":
		if e.complexity.NarrativeHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.NarrativeHistory.UpdatedAt(childComplexity), true

	case "NarrativeHistory.updatedBy":
		if e.complexity.NarrativeHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.NarrativeHistory.UpdatedBy(childComplexity), true

	case "NarrativeHistoryConnection.edges":
		if e.complexity.NarrativeHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.NarrativeHistoryConnection.Edges(childComplexity), true

	case "NarrativeHistoryConnection.pageInfo":
		if e.complexity.NarrativeHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.NarrativeHistoryConnection.PageInfo(childComplexity), true

	case "NarrativeHistoryConnection.totalCount":
		if e.complexity.NarrativeHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.NarrativeHistoryConnection.TotalCount(childComplexity), true

	case "NarrativeHistoryEdge.cursor":
		if e.complexity.NarrativeHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.NarrativeHistoryEdge.Cursor(childComplexity), true

	case "NarrativeHistoryEdge.node":
		if e.complexity.NarrativeHistoryEdge.Node == nil {
			break
		}

		return e.complexity.NarrativeHistoryEdge.Node(childComplexity), true

	case "NarrativeSearchResult.narratives":
		if e.complexity.NarrativeSearchResult.Narratives == nil {
			break
		}

		return e.complexity.NarrativeSearchResult.Narratives(childComplexity), true

	case "NarrativeUpdatePayload.narrative":
		if e.complexity.NarrativeUpdatePayload.Narrative == nil {
			break
		}

		return e.complexity.NarrativeUpdatePayload.Narrative(childComplexity), true

	case "Note.createdAt":
		if e.complexity.Note.CreatedAt == nil {
			break
		}

		return e.complexity.Note.CreatedAt(childComplexity), true

	case "Note.createdBy":
		if e.complexity.Note.CreatedBy == nil {
			break
		}

		return e.complexity.Note.CreatedBy(childComplexity), true

	case "Note.deletedAt":
		if e.complexity.Note.DeletedAt == nil {
			break
		}

		return e.complexity.Note.DeletedAt(childComplexity), true

	case "Note.deletedBy":
		if e.complexity.Note.DeletedBy == nil {
			break
		}

		return e.complexity.Note.DeletedBy(childComplexity), true

	case "Note.entity":
		if e.complexity.Note.Entity == nil {
			break
		}

		return e.complexity.Note.Entity(childComplexity), true

	case "Note.id":
		if e.complexity.Note.ID == nil {
			break
		}

		return e.complexity.Note.ID(childComplexity), true

	case "Note.owner":
		if e.complexity.Note.Owner == nil {
			break
		}

		return e.complexity.Note.Owner(childComplexity), true

	case "Note.ownerID":
		if e.complexity.Note.OwnerID == nil {
			break
		}

		return e.complexity.Note.OwnerID(childComplexity), true

	case "Note.program":
		if e.complexity.Note.Program == nil {
			break
		}

		return e.complexity.Note.Program(childComplexity), true

	case "Note.subcontrols":
		if e.complexity.Note.Subcontrols == nil {
			break
		}

		return e.complexity.Note.Subcontrols(childComplexity), true

	case "Note.tags":
		if e.complexity.Note.Tags == nil {
			break
		}

		return e.complexity.Note.Tags(childComplexity), true

	case "Note.text":
		if e.complexity.Note.Text == nil {
			break
		}

		return e.complexity.Note.Text(childComplexity), true

	case "Note.updatedAt":
		if e.complexity.Note.UpdatedAt == nil {
			break
		}

		return e.complexity.Note.UpdatedAt(childComplexity), true

	case "Note.updatedBy":
		if e.complexity.Note.UpdatedBy == nil {
			break
		}

		return e.complexity.Note.UpdatedBy(childComplexity), true

	case "NoteConnection.edges":
		if e.complexity.NoteConnection.Edges == nil {
			break
		}

		return e.complexity.NoteConnection.Edges(childComplexity), true

	case "NoteConnection.pageInfo":
		if e.complexity.NoteConnection.PageInfo == nil {
			break
		}

		return e.complexity.NoteConnection.PageInfo(childComplexity), true

	case "NoteConnection.totalCount":
		if e.complexity.NoteConnection.TotalCount == nil {
			break
		}

		return e.complexity.NoteConnection.TotalCount(childComplexity), true

	case "NoteEdge.cursor":
		if e.complexity.NoteEdge.Cursor == nil {
			break
		}

		return e.complexity.NoteEdge.Cursor(childComplexity), true

	case "NoteEdge.node":
		if e.complexity.NoteEdge.Node == nil {
			break
		}

		return e.complexity.NoteEdge.Node(childComplexity), true

	case "NoteHistory.createdAt":
		if e.complexity.NoteHistory.CreatedAt == nil {
			break
		}

		return e.complexity.NoteHistory.CreatedAt(childComplexity), true

	case "NoteHistory.createdBy":
		if e.complexity.NoteHistory.CreatedBy == nil {
			break
		}

		return e.complexity.NoteHistory.CreatedBy(childComplexity), true

	case "NoteHistory.deletedAt":
		if e.complexity.NoteHistory.DeletedAt == nil {
			break
		}

		return e.complexity.NoteHistory.DeletedAt(childComplexity), true

	case "NoteHistory.deletedBy":
		if e.complexity.NoteHistory.DeletedBy == nil {
			break
		}

		return e.complexity.NoteHistory.DeletedBy(childComplexity), true

	case "NoteHistory.historyTime":
		if e.complexity.NoteHistory.HistoryTime == nil {
			break
		}

		return e.complexity.NoteHistory.HistoryTime(childComplexity), true

	case "NoteHistory.id":
		if e.complexity.NoteHistory.ID == nil {
			break
		}

		return e.complexity.NoteHistory.ID(childComplexity), true

	case "NoteHistory.operation":
		if e.complexity.NoteHistory.Operation == nil {
			break
		}

		return e.complexity.NoteHistory.Operation(childComplexity), true

	case "NoteHistory.ownerID":
		if e.complexity.NoteHistory.OwnerID == nil {
			break
		}

		return e.complexity.NoteHistory.OwnerID(childComplexity), true

	case "NoteHistory.ref":
		if e.complexity.NoteHistory.Ref == nil {
			break
		}

		return e.complexity.NoteHistory.Ref(childComplexity), true

	case "NoteHistory.tags":
		if e.complexity.NoteHistory.Tags == nil {
			break
		}

		return e.complexity.NoteHistory.Tags(childComplexity), true

	case "NoteHistory.text":
		if e.complexity.NoteHistory.Text == nil {
			break
		}

		return e.complexity.NoteHistory.Text(childComplexity), true

	case "NoteHistory.updatedAt":
		if e.complexity.NoteHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.NoteHistory.UpdatedAt(childComplexity), true

	case "NoteHistory.updatedBy":
		if e.complexity.NoteHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.NoteHistory.UpdatedBy(childComplexity), true

	case "NoteHistoryConnection.edges":
		if e.complexity.NoteHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.NoteHistoryConnection.Edges(childComplexity), true

	case "NoteHistoryConnection.pageInfo":
		if e.complexity.NoteHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.NoteHistoryConnection.PageInfo(childComplexity), true

	case "NoteHistoryConnection.totalCount":
		if e.complexity.NoteHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.NoteHistoryConnection.TotalCount(childComplexity), true

	case "NoteHistoryEdge.cursor":
		if e.complexity.NoteHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.NoteHistoryEdge.Cursor(childComplexity), true

	case "NoteHistoryEdge.node":
		if e.complexity.NoteHistoryEdge.Node == nil {
			break
		}

		return e.complexity.NoteHistoryEdge.Node(childComplexity), true

	case "OrgMembership.createdAt":
		if e.complexity.OrgMembership.CreatedAt == nil {
			break
		}

		return e.complexity.OrgMembership.CreatedAt(childComplexity), true

	case "OrgMembership.createdBy":
		if e.complexity.OrgMembership.CreatedBy == nil {
			break
		}

		return e.complexity.OrgMembership.CreatedBy(childComplexity), true

	case "OrgMembership.deletedAt":
		if e.complexity.OrgMembership.DeletedAt == nil {
			break
		}

		return e.complexity.OrgMembership.DeletedAt(childComplexity), true

	case "OrgMembership.deletedBy":
		if e.complexity.OrgMembership.DeletedBy == nil {
			break
		}

		return e.complexity.OrgMembership.DeletedBy(childComplexity), true

	case "OrgMembership.events":
		if e.complexity.OrgMembership.Events == nil {
			break
		}

		return e.complexity.OrgMembership.Events(childComplexity), true

	case "OrgMembership.id":
		if e.complexity.OrgMembership.ID == nil {
			break
		}

		return e.complexity.OrgMembership.ID(childComplexity), true

	case "OrgMembership.organization":
		if e.complexity.OrgMembership.Organization == nil {
			break
		}

		return e.complexity.OrgMembership.Organization(childComplexity), true

	case "OrgMembership.organizationID":
		if e.complexity.OrgMembership.OrganizationID == nil {
			break
		}

		return e.complexity.OrgMembership.OrganizationID(childComplexity), true

	case "OrgMembership.role":
		if e.complexity.OrgMembership.Role == nil {
			break
		}

		return e.complexity.OrgMembership.Role(childComplexity), true

	case "OrgMembership.updatedAt":
		if e.complexity.OrgMembership.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgMembership.UpdatedAt(childComplexity), true

	case "OrgMembership.updatedBy":
		if e.complexity.OrgMembership.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgMembership.UpdatedBy(childComplexity), true

	case "OrgMembership.user":
		if e.complexity.OrgMembership.User == nil {
			break
		}

		return e.complexity.OrgMembership.User(childComplexity), true

	case "OrgMembership.userID":
		if e.complexity.OrgMembership.UserID == nil {
			break
		}

		return e.complexity.OrgMembership.UserID(childComplexity), true

	case "OrgMembershipBulkCreatePayload.orgMemberships":
		if e.complexity.OrgMembershipBulkCreatePayload.OrgMemberships == nil {
			break
		}

		return e.complexity.OrgMembershipBulkCreatePayload.OrgMemberships(childComplexity), true

	case "OrgMembershipConnection.edges":
		if e.complexity.OrgMembershipConnection.Edges == nil {
			break
		}

		return e.complexity.OrgMembershipConnection.Edges(childComplexity), true

	case "OrgMembershipConnection.pageInfo":
		if e.complexity.OrgMembershipConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgMembershipConnection.PageInfo(childComplexity), true

	case "OrgMembershipConnection.totalCount":
		if e.complexity.OrgMembershipConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgMembershipConnection.TotalCount(childComplexity), true

	case "OrgMembershipCreatePayload.orgMembership":
		if e.complexity.OrgMembershipCreatePayload.OrgMembership == nil {
			break
		}

		return e.complexity.OrgMembershipCreatePayload.OrgMembership(childComplexity), true

	case "OrgMembershipDeletePayload.deletedID":
		if e.complexity.OrgMembershipDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.OrgMembershipDeletePayload.DeletedID(childComplexity), true

	case "OrgMembershipEdge.cursor":
		if e.complexity.OrgMembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgMembershipEdge.Cursor(childComplexity), true

	case "OrgMembershipEdge.node":
		if e.complexity.OrgMembershipEdge.Node == nil {
			break
		}

		return e.complexity.OrgMembershipEdge.Node(childComplexity), true

	case "OrgMembershipHistory.createdAt":
		if e.complexity.OrgMembershipHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.CreatedAt(childComplexity), true

	case "OrgMembershipHistory.createdBy":
		if e.complexity.OrgMembershipHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.CreatedBy(childComplexity), true

	case "OrgMembershipHistory.deletedAt":
		if e.complexity.OrgMembershipHistory.DeletedAt == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.DeletedAt(childComplexity), true

	case "OrgMembershipHistory.deletedBy":
		if e.complexity.OrgMembershipHistory.DeletedBy == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.DeletedBy(childComplexity), true

	case "OrgMembershipHistory.historyTime":
		if e.complexity.OrgMembershipHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.HistoryTime(childComplexity), true

	case "OrgMembershipHistory.id":
		if e.complexity.OrgMembershipHistory.ID == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.ID(childComplexity), true

	case "OrgMembershipHistory.operation":
		if e.complexity.OrgMembershipHistory.Operation == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.Operation(childComplexity), true

	case "OrgMembershipHistory.organizationID":
		if e.complexity.OrgMembershipHistory.OrganizationID == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.OrganizationID(childComplexity), true

	case "OrgMembershipHistory.ref":
		if e.complexity.OrgMembershipHistory.Ref == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.Ref(childComplexity), true

	case "OrgMembershipHistory.role":
		if e.complexity.OrgMembershipHistory.Role == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.Role(childComplexity), true

	case "OrgMembershipHistory.updatedAt":
		if e.complexity.OrgMembershipHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.UpdatedAt(childComplexity), true

	case "OrgMembershipHistory.updatedBy":
		if e.complexity.OrgMembershipHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.UpdatedBy(childComplexity), true

	case "OrgMembershipHistory.userID":
		if e.complexity.OrgMembershipHistory.UserID == nil {
			break
		}

		return e.complexity.OrgMembershipHistory.UserID(childComplexity), true

	case "OrgMembershipHistoryConnection.edges":
		if e.complexity.OrgMembershipHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryConnection.Edges(childComplexity), true

	case "OrgMembershipHistoryConnection.pageInfo":
		if e.complexity.OrgMembershipHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryConnection.PageInfo(childComplexity), true

	case "OrgMembershipHistoryConnection.totalCount":
		if e.complexity.OrgMembershipHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryConnection.TotalCount(childComplexity), true

	case "OrgMembershipHistoryEdge.cursor":
		if e.complexity.OrgMembershipHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryEdge.Cursor(childComplexity), true

	case "OrgMembershipHistoryEdge.node":
		if e.complexity.OrgMembershipHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrgMembershipHistoryEdge.Node(childComplexity), true

	case "OrgMembershipUpdatePayload.orgMembership":
		if e.complexity.OrgMembershipUpdatePayload.OrgMembership == nil {
			break
		}

		return e.complexity.OrgMembershipUpdatePayload.OrgMembership(childComplexity), true

	case "OrgSubscription.active":
		if e.complexity.OrgSubscription.Active == nil {
			break
		}

		return e.complexity.OrgSubscription.Active(childComplexity), true

	case "OrgSubscription.createdAt":
		if e.complexity.OrgSubscription.CreatedAt == nil {
			break
		}

		return e.complexity.OrgSubscription.CreatedAt(childComplexity), true

	case "OrgSubscription.createdBy":
		if e.complexity.OrgSubscription.CreatedBy == nil {
			break
		}

		return e.complexity.OrgSubscription.CreatedBy(childComplexity), true

	case "OrgSubscription.deletedAt":
		if e.complexity.OrgSubscription.DeletedAt == nil {
			break
		}

		return e.complexity.OrgSubscription.DeletedAt(childComplexity), true

	case "OrgSubscription.deletedBy":
		if e.complexity.OrgSubscription.DeletedBy == nil {
			break
		}

		return e.complexity.OrgSubscription.DeletedBy(childComplexity), true

	case "OrgSubscription.expiresAt":
		if e.complexity.OrgSubscription.ExpiresAt == nil {
			break
		}

		return e.complexity.OrgSubscription.ExpiresAt(childComplexity), true

	case "OrgSubscription.featureLookupKeys":
		if e.complexity.OrgSubscription.FeatureLookupKeys == nil {
			break
		}

		return e.complexity.OrgSubscription.FeatureLookupKeys(childComplexity), true

	case "OrgSubscription.features":
		if e.complexity.OrgSubscription.Features == nil {
			break
		}

		return e.complexity.OrgSubscription.Features(childComplexity), true

	case "OrgSubscription.id":
		if e.complexity.OrgSubscription.ID == nil {
			break
		}

		return e.complexity.OrgSubscription.ID(childComplexity), true

	case "OrgSubscription.owner":
		if e.complexity.OrgSubscription.Owner == nil {
			break
		}

		return e.complexity.OrgSubscription.Owner(childComplexity), true

	case "OrgSubscription.ownerID":
		if e.complexity.OrgSubscription.OwnerID == nil {
			break
		}

		return e.complexity.OrgSubscription.OwnerID(childComplexity), true

	case "OrgSubscription.productPrice":
		if e.complexity.OrgSubscription.ProductPrice == nil {
			break
		}

		return e.complexity.OrgSubscription.ProductPrice(childComplexity), true

	case "OrgSubscription.productTier":
		if e.complexity.OrgSubscription.ProductTier == nil {
			break
		}

		return e.complexity.OrgSubscription.ProductTier(childComplexity), true

	case "OrgSubscription.stripeCustomerID":
		if e.complexity.OrgSubscription.StripeCustomerID == nil {
			break
		}

		return e.complexity.OrgSubscription.StripeCustomerID(childComplexity), true

	case "OrgSubscription.stripeProductTierID":
		if e.complexity.OrgSubscription.StripeProductTierID == nil {
			break
		}

		return e.complexity.OrgSubscription.StripeProductTierID(childComplexity), true

	case "OrgSubscription.stripeSubscriptionID":
		if e.complexity.OrgSubscription.StripeSubscriptionID == nil {
			break
		}

		return e.complexity.OrgSubscription.StripeSubscriptionID(childComplexity), true

	case "OrgSubscription.stripeSubscriptionStatus":
		if e.complexity.OrgSubscription.StripeSubscriptionStatus == nil {
			break
		}

		return e.complexity.OrgSubscription.StripeSubscriptionStatus(childComplexity), true

	case "OrgSubscription.subscriptionURL":
		if e.complexity.OrgSubscription.SubscriptionURL == nil {
			break
		}

		return e.complexity.OrgSubscription.SubscriptionURL(childComplexity), true

	case "OrgSubscription.tags":
		if e.complexity.OrgSubscription.Tags == nil {
			break
		}

		return e.complexity.OrgSubscription.Tags(childComplexity), true

	case "OrgSubscription.updatedAt":
		if e.complexity.OrgSubscription.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgSubscription.UpdatedAt(childComplexity), true

	case "OrgSubscription.updatedBy":
		if e.complexity.OrgSubscription.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgSubscription.UpdatedBy(childComplexity), true

	case "OrgSubscriptionConnection.edges":
		if e.complexity.OrgSubscriptionConnection.Edges == nil {
			break
		}

		return e.complexity.OrgSubscriptionConnection.Edges(childComplexity), true

	case "OrgSubscriptionConnection.pageInfo":
		if e.complexity.OrgSubscriptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgSubscriptionConnection.PageInfo(childComplexity), true

	case "OrgSubscriptionConnection.totalCount":
		if e.complexity.OrgSubscriptionConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgSubscriptionConnection.TotalCount(childComplexity), true

	case "OrgSubscriptionEdge.cursor":
		if e.complexity.OrgSubscriptionEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgSubscriptionEdge.Cursor(childComplexity), true

	case "OrgSubscriptionEdge.node":
		if e.complexity.OrgSubscriptionEdge.Node == nil {
			break
		}

		return e.complexity.OrgSubscriptionEdge.Node(childComplexity), true

	case "OrgSubscriptionHistory.active":
		if e.complexity.OrgSubscriptionHistory.Active == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Active(childComplexity), true

	case "OrgSubscriptionHistory.createdAt":
		if e.complexity.OrgSubscriptionHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.CreatedAt(childComplexity), true

	case "OrgSubscriptionHistory.createdBy":
		if e.complexity.OrgSubscriptionHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.CreatedBy(childComplexity), true

	case "OrgSubscriptionHistory.deletedAt":
		if e.complexity.OrgSubscriptionHistory.DeletedAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.DeletedAt(childComplexity), true

	case "OrgSubscriptionHistory.deletedBy":
		if e.complexity.OrgSubscriptionHistory.DeletedBy == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.DeletedBy(childComplexity), true

	case "OrgSubscriptionHistory.expiresAt":
		if e.complexity.OrgSubscriptionHistory.ExpiresAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.ExpiresAt(childComplexity), true

	case "OrgSubscriptionHistory.featureLookupKeys":
		if e.complexity.OrgSubscriptionHistory.FeatureLookupKeys == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.FeatureLookupKeys(childComplexity), true

	case "OrgSubscriptionHistory.features":
		if e.complexity.OrgSubscriptionHistory.Features == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Features(childComplexity), true

	case "OrgSubscriptionHistory.historyTime":
		if e.complexity.OrgSubscriptionHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.HistoryTime(childComplexity), true

	case "OrgSubscriptionHistory.id":
		if e.complexity.OrgSubscriptionHistory.ID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.ID(childComplexity), true

	case "OrgSubscriptionHistory.operation":
		if e.complexity.OrgSubscriptionHistory.Operation == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Operation(childComplexity), true

	case "OrgSubscriptionHistory.ownerID":
		if e.complexity.OrgSubscriptionHistory.OwnerID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.OwnerID(childComplexity), true

	case "OrgSubscriptionHistory.productPrice":
		if e.complexity.OrgSubscriptionHistory.ProductPrice == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.ProductPrice(childComplexity), true

	case "OrgSubscriptionHistory.productTier":
		if e.complexity.OrgSubscriptionHistory.ProductTier == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.ProductTier(childComplexity), true

	case "OrgSubscriptionHistory.ref":
		if e.complexity.OrgSubscriptionHistory.Ref == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Ref(childComplexity), true

	case "OrgSubscriptionHistory.stripeCustomerID":
		if e.complexity.OrgSubscriptionHistory.StripeCustomerID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.StripeCustomerID(childComplexity), true

	case "OrgSubscriptionHistory.stripeProductTierID":
		if e.complexity.OrgSubscriptionHistory.StripeProductTierID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.StripeProductTierID(childComplexity), true

	case "OrgSubscriptionHistory.stripeSubscriptionID":
		if e.complexity.OrgSubscriptionHistory.StripeSubscriptionID == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.StripeSubscriptionID(childComplexity), true

	case "OrgSubscriptionHistory.stripeSubscriptionStatus":
		if e.complexity.OrgSubscriptionHistory.StripeSubscriptionStatus == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.StripeSubscriptionStatus(childComplexity), true

	case "OrgSubscriptionHistory.tags":
		if e.complexity.OrgSubscriptionHistory.Tags == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.Tags(childComplexity), true

	case "OrgSubscriptionHistory.updatedAt":
		if e.complexity.OrgSubscriptionHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.UpdatedAt(childComplexity), true

	case "OrgSubscriptionHistory.updatedBy":
		if e.complexity.OrgSubscriptionHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistory.UpdatedBy(childComplexity), true

	case "OrgSubscriptionHistoryConnection.edges":
		if e.complexity.OrgSubscriptionHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryConnection.Edges(childComplexity), true

	case "OrgSubscriptionHistoryConnection.pageInfo":
		if e.complexity.OrgSubscriptionHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryConnection.PageInfo(childComplexity), true

	case "OrgSubscriptionHistoryConnection.totalCount":
		if e.complexity.OrgSubscriptionHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryConnection.TotalCount(childComplexity), true

	case "OrgSubscriptionHistoryEdge.cursor":
		if e.complexity.OrgSubscriptionHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryEdge.Cursor(childComplexity), true

	case "OrgSubscriptionHistoryEdge.node":
		if e.complexity.OrgSubscriptionHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrgSubscriptionHistoryEdge.Node(childComplexity), true

	case "OrgSubscriptionSearchResult.orgSubscriptions":
		if e.complexity.OrgSubscriptionSearchResult.OrgSubscriptions == nil {
			break
		}

		return e.complexity.OrgSubscriptionSearchResult.OrgSubscriptions(childComplexity), true

	case "Organization.apiTokens":
		if e.complexity.Organization.APITokens == nil {
			break
		}

		return e.complexity.Organization.APITokens(childComplexity), true

	case "Organization.avatarFile":
		if e.complexity.Organization.AvatarFile == nil {
			break
		}

		return e.complexity.Organization.AvatarFile(childComplexity), true

	case "Organization.avatarLocalFileID":
		if e.complexity.Organization.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.Organization.AvatarLocalFileID(childComplexity), true

	case "Organization.avatarRemoteURL":
		if e.complexity.Organization.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.Organization.AvatarRemoteURL(childComplexity), true

	case "Organization.avatarUpdatedAt":
		if e.complexity.Organization.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.Organization.AvatarUpdatedAt(childComplexity), true

	case "Organization.children":
		if e.complexity.Organization.Children == nil {
			break
		}

		args, err := ec.field_Organization_children_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Children(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrganizationOrder), args["where"].(*generated.OrganizationWhereInput)), true

	case "Organization.contacts":
		if e.complexity.Organization.Contacts == nil {
			break
		}

		return e.complexity.Organization.Contacts(childComplexity), true

	case "Organization.controlCreators":
		if e.complexity.Organization.ControlCreators == nil {
			break
		}

		return e.complexity.Organization.ControlCreators(childComplexity), true

	case "Organization.controlObjectiveCreators":
		if e.complexity.Organization.ControlObjectiveCreators == nil {
			break
		}

		return e.complexity.Organization.ControlObjectiveCreators(childComplexity), true

	case "Organization.controlObjectives":
		if e.complexity.Organization.ControlObjectives == nil {
			break
		}

		return e.complexity.Organization.ControlObjectives(childComplexity), true

	case "Organization.controls":
		if e.complexity.Organization.Controls == nil {
			break
		}

		return e.complexity.Organization.Controls(childComplexity), true

	case "Organization.createdAt":
		if e.complexity.Organization.CreatedAt == nil {
			break
		}

		return e.complexity.Organization.CreatedAt(childComplexity), true

	case "Organization.createdBy":
		if e.complexity.Organization.CreatedBy == nil {
			break
		}

		return e.complexity.Organization.CreatedBy(childComplexity), true

	case "Organization.dedicatedDb":
		if e.complexity.Organization.DedicatedDb == nil {
			break
		}

		return e.complexity.Organization.DedicatedDb(childComplexity), true

	case "Organization.deletedAt":
		if e.complexity.Organization.DeletedAt == nil {
			break
		}

		return e.complexity.Organization.DeletedAt(childComplexity), true

	case "Organization.deletedBy":
		if e.complexity.Organization.DeletedBy == nil {
			break
		}

		return e.complexity.Organization.DeletedBy(childComplexity), true

	case "Organization.description":
		if e.complexity.Organization.Description == nil {
			break
		}

		return e.complexity.Organization.Description(childComplexity), true

	case "Organization.displayName":
		if e.complexity.Organization.DisplayName == nil {
			break
		}

		return e.complexity.Organization.DisplayName(childComplexity), true

	case "Organization.documentData":
		if e.complexity.Organization.DocumentData == nil {
			break
		}

		return e.complexity.Organization.DocumentData(childComplexity), true

	case "Organization.entities":
		if e.complexity.Organization.Entities == nil {
			break
		}

		return e.complexity.Organization.Entities(childComplexity), true

	case "Organization.entityTypes":
		if e.complexity.Organization.EntityTypes == nil {
			break
		}

		return e.complexity.Organization.EntityTypes(childComplexity), true

	case "Organization.events":
		if e.complexity.Organization.Events == nil {
			break
		}

		return e.complexity.Organization.Events(childComplexity), true

	case "Organization.files":
		if e.complexity.Organization.Files == nil {
			break
		}

		return e.complexity.Organization.Files(childComplexity), true

	case "Organization.groupCreators":
		if e.complexity.Organization.GroupCreators == nil {
			break
		}

		return e.complexity.Organization.GroupCreators(childComplexity), true

	case "Organization.groups":
		if e.complexity.Organization.Groups == nil {
			break
		}

		return e.complexity.Organization.Groups(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.integrations":
		if e.complexity.Organization.Integrations == nil {
			break
		}

		return e.complexity.Organization.Integrations(childComplexity), true

	case "Organization.internalPolicies":
		if e.complexity.Organization.InternalPolicies == nil {
			break
		}

		return e.complexity.Organization.InternalPolicies(childComplexity), true

	case "Organization.internalPolicyCreators":
		if e.complexity.Organization.InternalPolicyCreators == nil {
			break
		}

		return e.complexity.Organization.InternalPolicyCreators(childComplexity), true

	case "Organization.invites":
		if e.complexity.Organization.Invites == nil {
			break
		}

		return e.complexity.Organization.Invites(childComplexity), true

	case "Organization.members":
		if e.complexity.Organization.Members == nil {
			break
		}

		return e.complexity.Organization.Members(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.narrativeCreators":
		if e.complexity.Organization.NarrativeCreators == nil {
			break
		}

		return e.complexity.Organization.NarrativeCreators(childComplexity), true

	case "Organization.narratives":
		if e.complexity.Organization.Narratives == nil {
			break
		}

		return e.complexity.Organization.Narratives(childComplexity), true

	case "Organization.notes":
		if e.complexity.Organization.Notes == nil {
			break
		}

		return e.complexity.Organization.Notes(childComplexity), true

	case "Organization.orgSubscriptions":
		if e.complexity.Organization.OrgSubscriptions == nil {
			break
		}

		return e.complexity.Organization.OrgSubscriptions(childComplexity), true

	case "Organization.parent":
		if e.complexity.Organization.Parent == nil {
			break
		}

		return e.complexity.Organization.Parent(childComplexity), true

	case "Organization.personalAccessTokens":
		if e.complexity.Organization.PersonalAccessTokens == nil {
			break
		}

		return e.complexity.Organization.PersonalAccessTokens(childComplexity), true

	case "Organization.personalOrg":
		if e.complexity.Organization.PersonalOrg == nil {
			break
		}

		return e.complexity.Organization.PersonalOrg(childComplexity), true

	case "Organization.procedureCreators":
		if e.complexity.Organization.ProcedureCreators == nil {
			break
		}

		return e.complexity.Organization.ProcedureCreators(childComplexity), true

	case "Organization.procedures":
		if e.complexity.Organization.Procedures == nil {
			break
		}

		return e.complexity.Organization.Procedures(childComplexity), true

	case "Organization.programCreators":
		if e.complexity.Organization.ProgramCreators == nil {
			break
		}

		return e.complexity.Organization.ProgramCreators(childComplexity), true

	case "Organization.programs":
		if e.complexity.Organization.Programs == nil {
			break
		}

		return e.complexity.Organization.Programs(childComplexity), true

	case "Organization.riskCreators":
		if e.complexity.Organization.RiskCreators == nil {
			break
		}

		return e.complexity.Organization.RiskCreators(childComplexity), true

	case "Organization.risks":
		if e.complexity.Organization.Risks == nil {
			break
		}

		return e.complexity.Organization.Risks(childComplexity), true

	case "Organization.secrets":
		if e.complexity.Organization.Secrets == nil {
			break
		}

		return e.complexity.Organization.Secrets(childComplexity), true

	case "Organization.setting":
		if e.complexity.Organization.Setting == nil {
			break
		}

		return e.complexity.Organization.Setting(childComplexity), true

	case "Organization.subcontrols":
		if e.complexity.Organization.Subcontrols == nil {
			break
		}

		return e.complexity.Organization.Subcontrols(childComplexity), true

	case "Organization.subscribers":
		if e.complexity.Organization.Subscribers == nil {
			break
		}

		return e.complexity.Organization.Subscribers(childComplexity), true

	case "Organization.tags":
		if e.complexity.Organization.Tags == nil {
			break
		}

		return e.complexity.Organization.Tags(childComplexity), true

	case "Organization.tasks":
		if e.complexity.Organization.Tasks == nil {
			break
		}

		return e.complexity.Organization.Tasks(childComplexity), true

	case "Organization.templateCreators":
		if e.complexity.Organization.TemplateCreators == nil {
			break
		}

		return e.complexity.Organization.TemplateCreators(childComplexity), true

	case "Organization.templates":
		if e.complexity.Organization.Templates == nil {
			break
		}

		return e.complexity.Organization.Templates(childComplexity), true

	case "Organization.updatedAt":
		if e.complexity.Organization.UpdatedAt == nil {
			break
		}

		return e.complexity.Organization.UpdatedAt(childComplexity), true

	case "Organization.updatedBy":
		if e.complexity.Organization.UpdatedBy == nil {
			break
		}

		return e.complexity.Organization.UpdatedBy(childComplexity), true

	case "Organization.users":
		if e.complexity.Organization.Users == nil {
			break
		}

		return e.complexity.Organization.Users(childComplexity), true

	case "OrganizationBulkCreatePayload.organizations":
		if e.complexity.OrganizationBulkCreatePayload.Organizations == nil {
			break
		}

		return e.complexity.OrganizationBulkCreatePayload.Organizations(childComplexity), true

	case "OrganizationConnection.edges":
		if e.complexity.OrganizationConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationConnection.Edges(childComplexity), true

	case "OrganizationConnection.pageInfo":
		if e.complexity.OrganizationConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationConnection.PageInfo(childComplexity), true

	case "OrganizationConnection.totalCount":
		if e.complexity.OrganizationConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationConnection.TotalCount(childComplexity), true

	case "OrganizationCreatePayload.organization":
		if e.complexity.OrganizationCreatePayload.Organization == nil {
			break
		}

		return e.complexity.OrganizationCreatePayload.Organization(childComplexity), true

	case "OrganizationDeletePayload.deletedID":
		if e.complexity.OrganizationDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.OrganizationDeletePayload.DeletedID(childComplexity), true

	case "OrganizationEdge.cursor":
		if e.complexity.OrganizationEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationEdge.Cursor(childComplexity), true

	case "OrganizationEdge.node":
		if e.complexity.OrganizationEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationEdge.Node(childComplexity), true

	case "OrganizationHistory.avatarLocalFileID":
		if e.complexity.OrganizationHistory.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.OrganizationHistory.AvatarLocalFileID(childComplexity), true

	case "OrganizationHistory.avatarRemoteURL":
		if e.complexity.OrganizationHistory.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.OrganizationHistory.AvatarRemoteURL(childComplexity), true

	case "OrganizationHistory.avatarUpdatedAt":
		if e.complexity.OrganizationHistory.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationHistory.AvatarUpdatedAt(childComplexity), true

	case "OrganizationHistory.createdAt":
		if e.complexity.OrganizationHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationHistory.CreatedAt(childComplexity), true

	case "OrganizationHistory.createdBy":
		if e.complexity.OrganizationHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrganizationHistory.CreatedBy(childComplexity), true

	case "OrganizationHistory.dedicatedDb":
		if e.complexity.OrganizationHistory.DedicatedDb == nil {
			break
		}

		return e.complexity.OrganizationHistory.DedicatedDb(childComplexity), true

	case "OrganizationHistory.deletedAt":
		if e.complexity.OrganizationHistory.DeletedAt == nil {
			break
		}

		return e.complexity.OrganizationHistory.DeletedAt(childComplexity), true

	case "OrganizationHistory.deletedBy":
		if e.complexity.OrganizationHistory.DeletedBy == nil {
			break
		}

		return e.complexity.OrganizationHistory.DeletedBy(childComplexity), true

	case "OrganizationHistory.description":
		if e.complexity.OrganizationHistory.Description == nil {
			break
		}

		return e.complexity.OrganizationHistory.Description(childComplexity), true

	case "OrganizationHistory.displayName":
		if e.complexity.OrganizationHistory.DisplayName == nil {
			break
		}

		return e.complexity.OrganizationHistory.DisplayName(childComplexity), true

	case "OrganizationHistory.historyTime":
		if e.complexity.OrganizationHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrganizationHistory.HistoryTime(childComplexity), true

	case "OrganizationHistory.id":
		if e.complexity.OrganizationHistory.ID == nil {
			break
		}

		return e.complexity.OrganizationHistory.ID(childComplexity), true

	case "OrganizationHistory.name":
		if e.complexity.OrganizationHistory.Name == nil {
			break
		}

		return e.complexity.OrganizationHistory.Name(childComplexity), true

	case "OrganizationHistory.operation":
		if e.complexity.OrganizationHistory.Operation == nil {
			break
		}

		return e.complexity.OrganizationHistory.Operation(childComplexity), true

	case "OrganizationHistory.personalOrg":
		if e.complexity.OrganizationHistory.PersonalOrg == nil {
			break
		}

		return e.complexity.OrganizationHistory.PersonalOrg(childComplexity), true

	case "OrganizationHistory.ref":
		if e.complexity.OrganizationHistory.Ref == nil {
			break
		}

		return e.complexity.OrganizationHistory.Ref(childComplexity), true

	case "OrganizationHistory.tags":
		if e.complexity.OrganizationHistory.Tags == nil {
			break
		}

		return e.complexity.OrganizationHistory.Tags(childComplexity), true

	case "OrganizationHistory.updatedAt":
		if e.complexity.OrganizationHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationHistory.UpdatedAt(childComplexity), true

	case "OrganizationHistory.updatedBy":
		if e.complexity.OrganizationHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrganizationHistory.UpdatedBy(childComplexity), true

	case "OrganizationHistoryConnection.edges":
		if e.complexity.OrganizationHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationHistoryConnection.Edges(childComplexity), true

	case "OrganizationHistoryConnection.pageInfo":
		if e.complexity.OrganizationHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationHistoryConnection.PageInfo(childComplexity), true

	case "OrganizationHistoryConnection.totalCount":
		if e.complexity.OrganizationHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationHistoryConnection.TotalCount(childComplexity), true

	case "OrganizationHistoryEdge.cursor":
		if e.complexity.OrganizationHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationHistoryEdge.Cursor(childComplexity), true

	case "OrganizationHistoryEdge.node":
		if e.complexity.OrganizationHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationHistoryEdge.Node(childComplexity), true

	case "OrganizationSearchResult.organizations":
		if e.complexity.OrganizationSearchResult.Organizations == nil {
			break
		}

		return e.complexity.OrganizationSearchResult.Organizations(childComplexity), true

	case "OrganizationSetting.billingAddress":
		if e.complexity.OrganizationSetting.BillingAddress == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingAddress(childComplexity), true

	case "OrganizationSetting.billingContact":
		if e.complexity.OrganizationSetting.BillingContact == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingContact(childComplexity), true

	case "OrganizationSetting.billingEmail":
		if e.complexity.OrganizationSetting.BillingEmail == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingEmail(childComplexity), true

	case "OrganizationSetting.billingNotificationsEnabled":
		if e.complexity.OrganizationSetting.BillingNotificationsEnabled == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingNotificationsEnabled(childComplexity), true

	case "OrganizationSetting.billingPhone":
		if e.complexity.OrganizationSetting.BillingPhone == nil {
			break
		}

		return e.complexity.OrganizationSetting.BillingPhone(childComplexity), true

	case "OrganizationSetting.createdAt":
		if e.complexity.OrganizationSetting.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationSetting.CreatedAt(childComplexity), true

	case "OrganizationSetting.createdBy":
		if e.complexity.OrganizationSetting.CreatedBy == nil {
			break
		}

		return e.complexity.OrganizationSetting.CreatedBy(childComplexity), true

	case "OrganizationSetting.deletedAt":
		if e.complexity.OrganizationSetting.DeletedAt == nil {
			break
		}

		return e.complexity.OrganizationSetting.DeletedAt(childComplexity), true

	case "OrganizationSetting.deletedBy":
		if e.complexity.OrganizationSetting.DeletedBy == nil {
			break
		}

		return e.complexity.OrganizationSetting.DeletedBy(childComplexity), true

	case "OrganizationSetting.domains":
		if e.complexity.OrganizationSetting.Domains == nil {
			break
		}

		return e.complexity.OrganizationSetting.Domains(childComplexity), true

	case "OrganizationSetting.files":
		if e.complexity.OrganizationSetting.Files == nil {
			break
		}

		return e.complexity.OrganizationSetting.Files(childComplexity), true

	case "OrganizationSetting.geoLocation":
		if e.complexity.OrganizationSetting.GeoLocation == nil {
			break
		}

		return e.complexity.OrganizationSetting.GeoLocation(childComplexity), true

	case "OrganizationSetting.id":
		if e.complexity.OrganizationSetting.ID == nil {
			break
		}

		return e.complexity.OrganizationSetting.ID(childComplexity), true

	case "OrganizationSetting.organization":
		if e.complexity.OrganizationSetting.Organization == nil {
			break
		}

		return e.complexity.OrganizationSetting.Organization(childComplexity), true

	case "OrganizationSetting.organizationID":
		if e.complexity.OrganizationSetting.OrganizationID == nil {
			break
		}

		return e.complexity.OrganizationSetting.OrganizationID(childComplexity), true

	case "OrganizationSetting.tags":
		if e.complexity.OrganizationSetting.Tags == nil {
			break
		}

		return e.complexity.OrganizationSetting.Tags(childComplexity), true

	case "OrganizationSetting.taxIdentifier":
		if e.complexity.OrganizationSetting.TaxIdentifier == nil {
			break
		}

		return e.complexity.OrganizationSetting.TaxIdentifier(childComplexity), true

	case "OrganizationSetting.updatedAt":
		if e.complexity.OrganizationSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationSetting.UpdatedAt(childComplexity), true

	case "OrganizationSetting.updatedBy":
		if e.complexity.OrganizationSetting.UpdatedBy == nil {
			break
		}

		return e.complexity.OrganizationSetting.UpdatedBy(childComplexity), true

	case "OrganizationSettingBulkCreatePayload.organizationSettings":
		if e.complexity.OrganizationSettingBulkCreatePayload.OrganizationSettings == nil {
			break
		}

		return e.complexity.OrganizationSettingBulkCreatePayload.OrganizationSettings(childComplexity), true

	case "OrganizationSettingConnection.edges":
		if e.complexity.OrganizationSettingConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationSettingConnection.Edges(childComplexity), true

	case "OrganizationSettingConnection.pageInfo":
		if e.complexity.OrganizationSettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationSettingConnection.PageInfo(childComplexity), true

	case "OrganizationSettingConnection.totalCount":
		if e.complexity.OrganizationSettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationSettingConnection.TotalCount(childComplexity), true

	case "OrganizationSettingCreatePayload.organizationSetting":
		if e.complexity.OrganizationSettingCreatePayload.OrganizationSetting == nil {
			break
		}

		return e.complexity.OrganizationSettingCreatePayload.OrganizationSetting(childComplexity), true

	case "OrganizationSettingDeletePayload.deletedID":
		if e.complexity.OrganizationSettingDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.OrganizationSettingDeletePayload.DeletedID(childComplexity), true

	case "OrganizationSettingEdge.cursor":
		if e.complexity.OrganizationSettingEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationSettingEdge.Cursor(childComplexity), true

	case "OrganizationSettingEdge.node":
		if e.complexity.OrganizationSettingEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationSettingEdge.Node(childComplexity), true

	case "OrganizationSettingHistory.billingAddress":
		if e.complexity.OrganizationSettingHistory.BillingAddress == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingAddress(childComplexity), true

	case "OrganizationSettingHistory.billingContact":
		if e.complexity.OrganizationSettingHistory.BillingContact == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingContact(childComplexity), true

	case "OrganizationSettingHistory.billingEmail":
		if e.complexity.OrganizationSettingHistory.BillingEmail == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingEmail(childComplexity), true

	case "OrganizationSettingHistory.billingNotificationsEnabled":
		if e.complexity.OrganizationSettingHistory.BillingNotificationsEnabled == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingNotificationsEnabled(childComplexity), true

	case "OrganizationSettingHistory.billingPhone":
		if e.complexity.OrganizationSettingHistory.BillingPhone == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.BillingPhone(childComplexity), true

	case "OrganizationSettingHistory.createdAt":
		if e.complexity.OrganizationSettingHistory.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.CreatedAt(childComplexity), true

	case "OrganizationSettingHistory.createdBy":
		if e.complexity.OrganizationSettingHistory.CreatedBy == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.CreatedBy(childComplexity), true

	case "OrganizationSettingHistory.deletedAt":
		if e.complexity.OrganizationSettingHistory.DeletedAt == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.DeletedAt(childComplexity), true

	case "OrganizationSettingHistory.deletedBy":
		if e.complexity.OrganizationSettingHistory.DeletedBy == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.DeletedBy(childComplexity), true

	case "OrganizationSettingHistory.domains":
		if e.complexity.OrganizationSettingHistory.Domains == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Domains(childComplexity), true

	case "OrganizationSettingHistory.geoLocation":
		if e.complexity.OrganizationSettingHistory.GeoLocation == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.GeoLocation(childComplexity), true

	case "OrganizationSettingHistory.historyTime":
		if e.complexity.OrganizationSettingHistory.HistoryTime == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.HistoryTime(childComplexity), true

	case "OrganizationSettingHistory.id":
		if e.complexity.OrganizationSettingHistory.ID == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.ID(childComplexity), true

	case "OrganizationSettingHistory.operation":
		if e.complexity.OrganizationSettingHistory.Operation == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Operation(childComplexity), true

	case "OrganizationSettingHistory.organizationID":
		if e.complexity.OrganizationSettingHistory.OrganizationID == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.OrganizationID(childComplexity), true

	case "OrganizationSettingHistory.ref":
		if e.complexity.OrganizationSettingHistory.Ref == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Ref(childComplexity), true

	case "OrganizationSettingHistory.tags":
		if e.complexity.OrganizationSettingHistory.Tags == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.Tags(childComplexity), true

	case "OrganizationSettingHistory.taxIdentifier":
		if e.complexity.OrganizationSettingHistory.TaxIdentifier == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.TaxIdentifier(childComplexity), true

	case "OrganizationSettingHistory.updatedAt":
		if e.complexity.OrganizationSettingHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.UpdatedAt(childComplexity), true

	case "OrganizationSettingHistory.updatedBy":
		if e.complexity.OrganizationSettingHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.OrganizationSettingHistory.UpdatedBy(childComplexity), true

	case "OrganizationSettingHistoryConnection.edges":
		if e.complexity.OrganizationSettingHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryConnection.Edges(childComplexity), true

	case "OrganizationSettingHistoryConnection.pageInfo":
		if e.complexity.OrganizationSettingHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryConnection.PageInfo(childComplexity), true

	case "OrganizationSettingHistoryConnection.totalCount":
		if e.complexity.OrganizationSettingHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryConnection.TotalCount(childComplexity), true

	case "OrganizationSettingHistoryEdge.cursor":
		if e.complexity.OrganizationSettingHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryEdge.Cursor(childComplexity), true

	case "OrganizationSettingHistoryEdge.node":
		if e.complexity.OrganizationSettingHistoryEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationSettingHistoryEdge.Node(childComplexity), true

	case "OrganizationSettingSearchResult.organizationSettings":
		if e.complexity.OrganizationSettingSearchResult.OrganizationSettings == nil {
			break
		}

		return e.complexity.OrganizationSettingSearchResult.OrganizationSettings(childComplexity), true

	case "OrganizationSettingUpdatePayload.organizationSetting":
		if e.complexity.OrganizationSettingUpdatePayload.OrganizationSetting == nil {
			break
		}

		return e.complexity.OrganizationSettingUpdatePayload.OrganizationSetting(childComplexity), true

	case "OrganizationUpdatePayload.organization":
		if e.complexity.OrganizationUpdatePayload.Organization == nil {
			break
		}

		return e.complexity.OrganizationUpdatePayload.Organization(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PersonalAccessToken.createdAt":
		if e.complexity.PersonalAccessToken.CreatedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.CreatedAt(childComplexity), true

	case "PersonalAccessToken.createdBy":
		if e.complexity.PersonalAccessToken.CreatedBy == nil {
			break
		}

		return e.complexity.PersonalAccessToken.CreatedBy(childComplexity), true

	case "PersonalAccessToken.deletedAt":
		if e.complexity.PersonalAccessToken.DeletedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.DeletedAt(childComplexity), true

	case "PersonalAccessToken.deletedBy":
		if e.complexity.PersonalAccessToken.DeletedBy == nil {
			break
		}

		return e.complexity.PersonalAccessToken.DeletedBy(childComplexity), true

	case "PersonalAccessToken.description":
		if e.complexity.PersonalAccessToken.Description == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Description(childComplexity), true

	case "PersonalAccessToken.events":
		if e.complexity.PersonalAccessToken.Events == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Events(childComplexity), true

	case "PersonalAccessToken.expiresAt":
		if e.complexity.PersonalAccessToken.ExpiresAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.ExpiresAt(childComplexity), true

	case "PersonalAccessToken.id":
		if e.complexity.PersonalAccessToken.ID == nil {
			break
		}

		return e.complexity.PersonalAccessToken.ID(childComplexity), true

	case "PersonalAccessToken.lastUsedAt":
		if e.complexity.PersonalAccessToken.LastUsedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.LastUsedAt(childComplexity), true

	case "PersonalAccessToken.name":
		if e.complexity.PersonalAccessToken.Name == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Name(childComplexity), true

	case "PersonalAccessToken.organizations":
		if e.complexity.PersonalAccessToken.Organizations == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Organizations(childComplexity), true

	case "PersonalAccessToken.owner":
		if e.complexity.PersonalAccessToken.Owner == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Owner(childComplexity), true

	case "PersonalAccessToken.scopes":
		if e.complexity.PersonalAccessToken.Scopes == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Scopes(childComplexity), true

	case "PersonalAccessToken.tags":
		if e.complexity.PersonalAccessToken.Tags == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Tags(childComplexity), true

	case "PersonalAccessToken.token":
		if e.complexity.PersonalAccessToken.Token == nil {
			break
		}

		return e.complexity.PersonalAccessToken.Token(childComplexity), true

	case "PersonalAccessToken.updatedAt":
		if e.complexity.PersonalAccessToken.UpdatedAt == nil {
			break
		}

		return e.complexity.PersonalAccessToken.UpdatedAt(childComplexity), true

	case "PersonalAccessToken.updatedBy":
		if e.complexity.PersonalAccessToken.UpdatedBy == nil {
			break
		}

		return e.complexity.PersonalAccessToken.UpdatedBy(childComplexity), true

	case "PersonalAccessTokenBulkCreatePayload.personalAccessTokens":
		if e.complexity.PersonalAccessTokenBulkCreatePayload.PersonalAccessTokens == nil {
			break
		}

		return e.complexity.PersonalAccessTokenBulkCreatePayload.PersonalAccessTokens(childComplexity), true

	case "PersonalAccessTokenConnection.edges":
		if e.complexity.PersonalAccessTokenConnection.Edges == nil {
			break
		}

		return e.complexity.PersonalAccessTokenConnection.Edges(childComplexity), true

	case "PersonalAccessTokenConnection.pageInfo":
		if e.complexity.PersonalAccessTokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.PersonalAccessTokenConnection.PageInfo(childComplexity), true

	case "PersonalAccessTokenConnection.totalCount":
		if e.complexity.PersonalAccessTokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.PersonalAccessTokenConnection.TotalCount(childComplexity), true

	case "PersonalAccessTokenCreatePayload.personalAccessToken":
		if e.complexity.PersonalAccessTokenCreatePayload.PersonalAccessToken == nil {
			break
		}

		return e.complexity.PersonalAccessTokenCreatePayload.PersonalAccessToken(childComplexity), true

	case "PersonalAccessTokenDeletePayload.deletedID":
		if e.complexity.PersonalAccessTokenDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.PersonalAccessTokenDeletePayload.DeletedID(childComplexity), true

	case "PersonalAccessTokenEdge.cursor":
		if e.complexity.PersonalAccessTokenEdge.Cursor == nil {
			break
		}

		return e.complexity.PersonalAccessTokenEdge.Cursor(childComplexity), true

	case "PersonalAccessTokenEdge.node":
		if e.complexity.PersonalAccessTokenEdge.Node == nil {
			break
		}

		return e.complexity.PersonalAccessTokenEdge.Node(childComplexity), true

	case "PersonalAccessTokenSearchResult.personalAccessTokens":
		if e.complexity.PersonalAccessTokenSearchResult.PersonalAccessTokens == nil {
			break
		}

		return e.complexity.PersonalAccessTokenSearchResult.PersonalAccessTokens(childComplexity), true

	case "PersonalAccessTokenUpdatePayload.personalAccessToken":
		if e.complexity.PersonalAccessTokenUpdatePayload.PersonalAccessToken == nil {
			break
		}

		return e.complexity.PersonalAccessTokenUpdatePayload.PersonalAccessToken(childComplexity), true

	case "Procedure.background":
		if e.complexity.Procedure.Background == nil {
			break
		}

		return e.complexity.Procedure.Background(childComplexity), true

	case "Procedure.blockedGroups":
		if e.complexity.Procedure.BlockedGroups == nil {
			break
		}

		return e.complexity.Procedure.BlockedGroups(childComplexity), true

	case "Procedure.controls":
		if e.complexity.Procedure.Controls == nil {
			break
		}

		return e.complexity.Procedure.Controls(childComplexity), true

	case "Procedure.createdAt":
		if e.complexity.Procedure.CreatedAt == nil {
			break
		}

		return e.complexity.Procedure.CreatedAt(childComplexity), true

	case "Procedure.createdBy":
		if e.complexity.Procedure.CreatedBy == nil {
			break
		}

		return e.complexity.Procedure.CreatedBy(childComplexity), true

	case "Procedure.deletedAt":
		if e.complexity.Procedure.DeletedAt == nil {
			break
		}

		return e.complexity.Procedure.DeletedAt(childComplexity), true

	case "Procedure.deletedBy":
		if e.complexity.Procedure.DeletedBy == nil {
			break
		}

		return e.complexity.Procedure.DeletedBy(childComplexity), true

	case "Procedure.description":
		if e.complexity.Procedure.Description == nil {
			break
		}

		return e.complexity.Procedure.Description(childComplexity), true

	case "Procedure.details":
		if e.complexity.Procedure.Details == nil {
			break
		}

		return e.complexity.Procedure.Details(childComplexity), true

	case "Procedure.editors":
		if e.complexity.Procedure.Editors == nil {
			break
		}

		return e.complexity.Procedure.Editors(childComplexity), true

	case "Procedure.id":
		if e.complexity.Procedure.ID == nil {
			break
		}

		return e.complexity.Procedure.ID(childComplexity), true

	case "Procedure.internalPolicies":
		if e.complexity.Procedure.InternalPolicies == nil {
			break
		}

		return e.complexity.Procedure.InternalPolicies(childComplexity), true

	case "Procedure.name":
		if e.complexity.Procedure.Name == nil {
			break
		}

		return e.complexity.Procedure.Name(childComplexity), true

	case "Procedure.narratives":
		if e.complexity.Procedure.Narratives == nil {
			break
		}

		return e.complexity.Procedure.Narratives(childComplexity), true

	case "Procedure.owner":
		if e.complexity.Procedure.Owner == nil {
			break
		}

		return e.complexity.Procedure.Owner(childComplexity), true

	case "Procedure.ownerID":
		if e.complexity.Procedure.OwnerID == nil {
			break
		}

		return e.complexity.Procedure.OwnerID(childComplexity), true

	case "Procedure.procedureType":
		if e.complexity.Procedure.ProcedureType == nil {
			break
		}

		return e.complexity.Procedure.ProcedureType(childComplexity), true

	case "Procedure.programs":
		if e.complexity.Procedure.Programs == nil {
			break
		}

		return e.complexity.Procedure.Programs(childComplexity), true

	case "Procedure.purposeAndScope":
		if e.complexity.Procedure.PurposeAndScope == nil {
			break
		}

		return e.complexity.Procedure.PurposeAndScope(childComplexity), true

	case "Procedure.risks":
		if e.complexity.Procedure.Risks == nil {
			break
		}

		return e.complexity.Procedure.Risks(childComplexity), true

	case "Procedure.satisfies":
		if e.complexity.Procedure.Satisfies == nil {
			break
		}

		return e.complexity.Procedure.Satisfies(childComplexity), true

	case "Procedure.status":
		if e.complexity.Procedure.Status == nil {
			break
		}

		return e.complexity.Procedure.Status(childComplexity), true

	case "Procedure.tags":
		if e.complexity.Procedure.Tags == nil {
			break
		}

		return e.complexity.Procedure.Tags(childComplexity), true

	case "Procedure.tasks":
		if e.complexity.Procedure.Tasks == nil {
			break
		}

		return e.complexity.Procedure.Tasks(childComplexity), true

	case "Procedure.updatedAt":
		if e.complexity.Procedure.UpdatedAt == nil {
			break
		}

		return e.complexity.Procedure.UpdatedAt(childComplexity), true

	case "Procedure.updatedBy":
		if e.complexity.Procedure.UpdatedBy == nil {
			break
		}

		return e.complexity.Procedure.UpdatedBy(childComplexity), true

	case "Procedure.version":
		if e.complexity.Procedure.Version == nil {
			break
		}

		return e.complexity.Procedure.Version(childComplexity), true

	case "ProcedureBulkCreatePayload.procedures":
		if e.complexity.ProcedureBulkCreatePayload.Procedures == nil {
			break
		}

		return e.complexity.ProcedureBulkCreatePayload.Procedures(childComplexity), true

	case "ProcedureConnection.edges":
		if e.complexity.ProcedureConnection.Edges == nil {
			break
		}

		return e.complexity.ProcedureConnection.Edges(childComplexity), true

	case "ProcedureConnection.pageInfo":
		if e.complexity.ProcedureConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProcedureConnection.PageInfo(childComplexity), true

	case "ProcedureConnection.totalCount":
		if e.complexity.ProcedureConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProcedureConnection.TotalCount(childComplexity), true

	case "ProcedureCreatePayload.procedure":
		if e.complexity.ProcedureCreatePayload.Procedure == nil {
			break
		}

		return e.complexity.ProcedureCreatePayload.Procedure(childComplexity), true

	case "ProcedureDeletePayload.deletedID":
		if e.complexity.ProcedureDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ProcedureDeletePayload.DeletedID(childComplexity), true

	case "ProcedureEdge.cursor":
		if e.complexity.ProcedureEdge.Cursor == nil {
			break
		}

		return e.complexity.ProcedureEdge.Cursor(childComplexity), true

	case "ProcedureEdge.node":
		if e.complexity.ProcedureEdge.Node == nil {
			break
		}

		return e.complexity.ProcedureEdge.Node(childComplexity), true

	case "ProcedureHistory.background":
		if e.complexity.ProcedureHistory.Background == nil {
			break
		}

		return e.complexity.ProcedureHistory.Background(childComplexity), true

	case "ProcedureHistory.createdAt":
		if e.complexity.ProcedureHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ProcedureHistory.CreatedAt(childComplexity), true

	case "ProcedureHistory.createdBy":
		if e.complexity.ProcedureHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ProcedureHistory.CreatedBy(childComplexity), true

	case "ProcedureHistory.deletedAt":
		if e.complexity.ProcedureHistory.DeletedAt == nil {
			break
		}

		return e.complexity.ProcedureHistory.DeletedAt(childComplexity), true

	case "ProcedureHistory.deletedBy":
		if e.complexity.ProcedureHistory.DeletedBy == nil {
			break
		}

		return e.complexity.ProcedureHistory.DeletedBy(childComplexity), true

	case "ProcedureHistory.description":
		if e.complexity.ProcedureHistory.Description == nil {
			break
		}

		return e.complexity.ProcedureHistory.Description(childComplexity), true

	case "ProcedureHistory.details":
		if e.complexity.ProcedureHistory.Details == nil {
			break
		}

		return e.complexity.ProcedureHistory.Details(childComplexity), true

	case "ProcedureHistory.historyTime":
		if e.complexity.ProcedureHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ProcedureHistory.HistoryTime(childComplexity), true

	case "ProcedureHistory.id":
		if e.complexity.ProcedureHistory.ID == nil {
			break
		}

		return e.complexity.ProcedureHistory.ID(childComplexity), true

	case "ProcedureHistory.name":
		if e.complexity.ProcedureHistory.Name == nil {
			break
		}

		return e.complexity.ProcedureHistory.Name(childComplexity), true

	case "ProcedureHistory.operation":
		if e.complexity.ProcedureHistory.Operation == nil {
			break
		}

		return e.complexity.ProcedureHistory.Operation(childComplexity), true

	case "ProcedureHistory.ownerID":
		if e.complexity.ProcedureHistory.OwnerID == nil {
			break
		}

		return e.complexity.ProcedureHistory.OwnerID(childComplexity), true

	case "ProcedureHistory.procedureType":
		if e.complexity.ProcedureHistory.ProcedureType == nil {
			break
		}

		return e.complexity.ProcedureHistory.ProcedureType(childComplexity), true

	case "ProcedureHistory.purposeAndScope":
		if e.complexity.ProcedureHistory.PurposeAndScope == nil {
			break
		}

		return e.complexity.ProcedureHistory.PurposeAndScope(childComplexity), true

	case "ProcedureHistory.ref":
		if e.complexity.ProcedureHistory.Ref == nil {
			break
		}

		return e.complexity.ProcedureHistory.Ref(childComplexity), true

	case "ProcedureHistory.satisfies":
		if e.complexity.ProcedureHistory.Satisfies == nil {
			break
		}

		return e.complexity.ProcedureHistory.Satisfies(childComplexity), true

	case "ProcedureHistory.status":
		if e.complexity.ProcedureHistory.Status == nil {
			break
		}

		return e.complexity.ProcedureHistory.Status(childComplexity), true

	case "ProcedureHistory.tags":
		if e.complexity.ProcedureHistory.Tags == nil {
			break
		}

		return e.complexity.ProcedureHistory.Tags(childComplexity), true

	case "ProcedureHistory.updatedAt":
		if e.complexity.ProcedureHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProcedureHistory.UpdatedAt(childComplexity), true

	case "ProcedureHistory.updatedBy":
		if e.complexity.ProcedureHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ProcedureHistory.UpdatedBy(childComplexity), true

	case "ProcedureHistory.version":
		if e.complexity.ProcedureHistory.Version == nil {
			break
		}

		return e.complexity.ProcedureHistory.Version(childComplexity), true

	case "ProcedureHistoryConnection.edges":
		if e.complexity.ProcedureHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ProcedureHistoryConnection.Edges(childComplexity), true

	case "ProcedureHistoryConnection.pageInfo":
		if e.complexity.ProcedureHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProcedureHistoryConnection.PageInfo(childComplexity), true

	case "ProcedureHistoryConnection.totalCount":
		if e.complexity.ProcedureHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProcedureHistoryConnection.TotalCount(childComplexity), true

	case "ProcedureHistoryEdge.cursor":
		if e.complexity.ProcedureHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ProcedureHistoryEdge.Cursor(childComplexity), true

	case "ProcedureHistoryEdge.node":
		if e.complexity.ProcedureHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ProcedureHistoryEdge.Node(childComplexity), true

	case "ProcedureSearchResult.procedures":
		if e.complexity.ProcedureSearchResult.Procedures == nil {
			break
		}

		return e.complexity.ProcedureSearchResult.Procedures(childComplexity), true

	case "ProcedureUpdatePayload.procedure":
		if e.complexity.ProcedureUpdatePayload.Procedure == nil {
			break
		}

		return e.complexity.ProcedureUpdatePayload.Procedure(childComplexity), true

	case "Program.actionPlans":
		if e.complexity.Program.ActionPlans == nil {
			break
		}

		return e.complexity.Program.ActionPlans(childComplexity), true

	case "Program.auditorReadComments":
		if e.complexity.Program.AuditorReadComments == nil {
			break
		}

		return e.complexity.Program.AuditorReadComments(childComplexity), true

	case "Program.auditorReady":
		if e.complexity.Program.AuditorReady == nil {
			break
		}

		return e.complexity.Program.AuditorReady(childComplexity), true

	case "Program.auditorWriteComments":
		if e.complexity.Program.AuditorWriteComments == nil {
			break
		}

		return e.complexity.Program.AuditorWriteComments(childComplexity), true

	case "Program.blockedGroups":
		if e.complexity.Program.BlockedGroups == nil {
			break
		}

		return e.complexity.Program.BlockedGroups(childComplexity), true

	case "Program.controlObjectives":
		if e.complexity.Program.ControlObjectives == nil {
			break
		}

		return e.complexity.Program.ControlObjectives(childComplexity), true

	case "Program.controls":
		if e.complexity.Program.Controls == nil {
			break
		}

		return e.complexity.Program.Controls(childComplexity), true

	case "Program.createdAt":
		if e.complexity.Program.CreatedAt == nil {
			break
		}

		return e.complexity.Program.CreatedAt(childComplexity), true

	case "Program.createdBy":
		if e.complexity.Program.CreatedBy == nil {
			break
		}

		return e.complexity.Program.CreatedBy(childComplexity), true

	case "Program.deletedAt":
		if e.complexity.Program.DeletedAt == nil {
			break
		}

		return e.complexity.Program.DeletedAt(childComplexity), true

	case "Program.deletedBy":
		if e.complexity.Program.DeletedBy == nil {
			break
		}

		return e.complexity.Program.DeletedBy(childComplexity), true

	case "Program.description":
		if e.complexity.Program.Description == nil {
			break
		}

		return e.complexity.Program.Description(childComplexity), true

	case "Program.editors":
		if e.complexity.Program.Editors == nil {
			break
		}

		return e.complexity.Program.Editors(childComplexity), true

	case "Program.endDate":
		if e.complexity.Program.EndDate == nil {
			break
		}

		return e.complexity.Program.EndDate(childComplexity), true

	case "Program.files":
		if e.complexity.Program.Files == nil {
			break
		}

		return e.complexity.Program.Files(childComplexity), true

	case "Program.id":
		if e.complexity.Program.ID == nil {
			break
		}

		return e.complexity.Program.ID(childComplexity), true

	case "Program.internalPolicies":
		if e.complexity.Program.InternalPolicies == nil {
			break
		}

		return e.complexity.Program.InternalPolicies(childComplexity), true

	case "Program.members":
		if e.complexity.Program.Members == nil {
			break
		}

		return e.complexity.Program.Members(childComplexity), true

	case "Program.name":
		if e.complexity.Program.Name == nil {
			break
		}

		return e.complexity.Program.Name(childComplexity), true

	case "Program.narratives":
		if e.complexity.Program.Narratives == nil {
			break
		}

		return e.complexity.Program.Narratives(childComplexity), true

	case "Program.notes":
		if e.complexity.Program.Notes == nil {
			break
		}

		return e.complexity.Program.Notes(childComplexity), true

	case "Program.owner":
		if e.complexity.Program.Owner == nil {
			break
		}

		return e.complexity.Program.Owner(childComplexity), true

	case "Program.ownerID":
		if e.complexity.Program.OwnerID == nil {
			break
		}

		return e.complexity.Program.OwnerID(childComplexity), true

	case "Program.procedures":
		if e.complexity.Program.Procedures == nil {
			break
		}

		return e.complexity.Program.Procedures(childComplexity), true

	case "Program.risks":
		if e.complexity.Program.Risks == nil {
			break
		}

		return e.complexity.Program.Risks(childComplexity), true

	case "Program.standards":
		if e.complexity.Program.Standards == nil {
			break
		}

		return e.complexity.Program.Standards(childComplexity), true

	case "Program.startDate":
		if e.complexity.Program.StartDate == nil {
			break
		}

		return e.complexity.Program.StartDate(childComplexity), true

	case "Program.status":
		if e.complexity.Program.Status == nil {
			break
		}

		return e.complexity.Program.Status(childComplexity), true

	case "Program.subcontrols":
		if e.complexity.Program.Subcontrols == nil {
			break
		}

		return e.complexity.Program.Subcontrols(childComplexity), true

	case "Program.tags":
		if e.complexity.Program.Tags == nil {
			break
		}

		return e.complexity.Program.Tags(childComplexity), true

	case "Program.tasks":
		if e.complexity.Program.Tasks == nil {
			break
		}

		return e.complexity.Program.Tasks(childComplexity), true

	case "Program.updatedAt":
		if e.complexity.Program.UpdatedAt == nil {
			break
		}

		return e.complexity.Program.UpdatedAt(childComplexity), true

	case "Program.updatedBy":
		if e.complexity.Program.UpdatedBy == nil {
			break
		}

		return e.complexity.Program.UpdatedBy(childComplexity), true

	case "Program.users":
		if e.complexity.Program.Users == nil {
			break
		}

		return e.complexity.Program.Users(childComplexity), true

	case "Program.viewers":
		if e.complexity.Program.Viewers == nil {
			break
		}

		return e.complexity.Program.Viewers(childComplexity), true

	case "ProgramBulkCreatePayload.programs":
		if e.complexity.ProgramBulkCreatePayload.Programs == nil {
			break
		}

		return e.complexity.ProgramBulkCreatePayload.Programs(childComplexity), true

	case "ProgramConnection.edges":
		if e.complexity.ProgramConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramConnection.Edges(childComplexity), true

	case "ProgramConnection.pageInfo":
		if e.complexity.ProgramConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramConnection.PageInfo(childComplexity), true

	case "ProgramConnection.totalCount":
		if e.complexity.ProgramConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramConnection.TotalCount(childComplexity), true

	case "ProgramCreatePayload.program":
		if e.complexity.ProgramCreatePayload.Program == nil {
			break
		}

		return e.complexity.ProgramCreatePayload.Program(childComplexity), true

	case "ProgramDeletePayload.deletedID":
		if e.complexity.ProgramDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ProgramDeletePayload.DeletedID(childComplexity), true

	case "ProgramEdge.cursor":
		if e.complexity.ProgramEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramEdge.Cursor(childComplexity), true

	case "ProgramEdge.node":
		if e.complexity.ProgramEdge.Node == nil {
			break
		}

		return e.complexity.ProgramEdge.Node(childComplexity), true

	case "ProgramHistory.auditorReadComments":
		if e.complexity.ProgramHistory.AuditorReadComments == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditorReadComments(childComplexity), true

	case "ProgramHistory.auditorReady":
		if e.complexity.ProgramHistory.AuditorReady == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditorReady(childComplexity), true

	case "ProgramHistory.auditorWriteComments":
		if e.complexity.ProgramHistory.AuditorWriteComments == nil {
			break
		}

		return e.complexity.ProgramHistory.AuditorWriteComments(childComplexity), true

	case "ProgramHistory.createdAt":
		if e.complexity.ProgramHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ProgramHistory.CreatedAt(childComplexity), true

	case "ProgramHistory.createdBy":
		if e.complexity.ProgramHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ProgramHistory.CreatedBy(childComplexity), true

	case "ProgramHistory.deletedAt":
		if e.complexity.ProgramHistory.DeletedAt == nil {
			break
		}

		return e.complexity.ProgramHistory.DeletedAt(childComplexity), true

	case "ProgramHistory.deletedBy":
		if e.complexity.ProgramHistory.DeletedBy == nil {
			break
		}

		return e.complexity.ProgramHistory.DeletedBy(childComplexity), true

	case "ProgramHistory.description":
		if e.complexity.ProgramHistory.Description == nil {
			break
		}

		return e.complexity.ProgramHistory.Description(childComplexity), true

	case "ProgramHistory.endDate":
		if e.complexity.ProgramHistory.EndDate == nil {
			break
		}

		return e.complexity.ProgramHistory.EndDate(childComplexity), true

	case "ProgramHistory.historyTime":
		if e.complexity.ProgramHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ProgramHistory.HistoryTime(childComplexity), true

	case "ProgramHistory.id":
		if e.complexity.ProgramHistory.ID == nil {
			break
		}

		return e.complexity.ProgramHistory.ID(childComplexity), true

	case "ProgramHistory.name":
		if e.complexity.ProgramHistory.Name == nil {
			break
		}

		return e.complexity.ProgramHistory.Name(childComplexity), true

	case "ProgramHistory.operation":
		if e.complexity.ProgramHistory.Operation == nil {
			break
		}

		return e.complexity.ProgramHistory.Operation(childComplexity), true

	case "ProgramHistory.ownerID":
		if e.complexity.ProgramHistory.OwnerID == nil {
			break
		}

		return e.complexity.ProgramHistory.OwnerID(childComplexity), true

	case "ProgramHistory.ref":
		if e.complexity.ProgramHistory.Ref == nil {
			break
		}

		return e.complexity.ProgramHistory.Ref(childComplexity), true

	case "ProgramHistory.startDate":
		if e.complexity.ProgramHistory.StartDate == nil {
			break
		}

		return e.complexity.ProgramHistory.StartDate(childComplexity), true

	case "ProgramHistory.status":
		if e.complexity.ProgramHistory.Status == nil {
			break
		}

		return e.complexity.ProgramHistory.Status(childComplexity), true

	case "ProgramHistory.tags":
		if e.complexity.ProgramHistory.Tags == nil {
			break
		}

		return e.complexity.ProgramHistory.Tags(childComplexity), true

	case "ProgramHistory.updatedAt":
		if e.complexity.ProgramHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProgramHistory.UpdatedAt(childComplexity), true

	case "ProgramHistory.updatedBy":
		if e.complexity.ProgramHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ProgramHistory.UpdatedBy(childComplexity), true

	case "ProgramHistoryConnection.edges":
		if e.complexity.ProgramHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramHistoryConnection.Edges(childComplexity), true

	case "ProgramHistoryConnection.pageInfo":
		if e.complexity.ProgramHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramHistoryConnection.PageInfo(childComplexity), true

	case "ProgramHistoryConnection.totalCount":
		if e.complexity.ProgramHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramHistoryConnection.TotalCount(childComplexity), true

	case "ProgramHistoryEdge.cursor":
		if e.complexity.ProgramHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramHistoryEdge.Cursor(childComplexity), true

	case "ProgramHistoryEdge.node":
		if e.complexity.ProgramHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ProgramHistoryEdge.Node(childComplexity), true

	case "ProgramMembership.createdAt":
		if e.complexity.ProgramMembership.CreatedAt == nil {
			break
		}

		return e.complexity.ProgramMembership.CreatedAt(childComplexity), true

	case "ProgramMembership.createdBy":
		if e.complexity.ProgramMembership.CreatedBy == nil {
			break
		}

		return e.complexity.ProgramMembership.CreatedBy(childComplexity), true

	case "ProgramMembership.deletedAt":
		if e.complexity.ProgramMembership.DeletedAt == nil {
			break
		}

		return e.complexity.ProgramMembership.DeletedAt(childComplexity), true

	case "ProgramMembership.deletedBy":
		if e.complexity.ProgramMembership.DeletedBy == nil {
			break
		}

		return e.complexity.ProgramMembership.DeletedBy(childComplexity), true

	case "ProgramMembership.id":
		if e.complexity.ProgramMembership.ID == nil {
			break
		}

		return e.complexity.ProgramMembership.ID(childComplexity), true

	case "ProgramMembership.program":
		if e.complexity.ProgramMembership.Program == nil {
			break
		}

		return e.complexity.ProgramMembership.Program(childComplexity), true

	case "ProgramMembership.programID":
		if e.complexity.ProgramMembership.ProgramID == nil {
			break
		}

		return e.complexity.ProgramMembership.ProgramID(childComplexity), true

	case "ProgramMembership.role":
		if e.complexity.ProgramMembership.Role == nil {
			break
		}

		return e.complexity.ProgramMembership.Role(childComplexity), true

	case "ProgramMembership.updatedAt":
		if e.complexity.ProgramMembership.UpdatedAt == nil {
			break
		}

		return e.complexity.ProgramMembership.UpdatedAt(childComplexity), true

	case "ProgramMembership.updatedBy":
		if e.complexity.ProgramMembership.UpdatedBy == nil {
			break
		}

		return e.complexity.ProgramMembership.UpdatedBy(childComplexity), true

	case "ProgramMembership.user":
		if e.complexity.ProgramMembership.User == nil {
			break
		}

		return e.complexity.ProgramMembership.User(childComplexity), true

	case "ProgramMembership.userID":
		if e.complexity.ProgramMembership.UserID == nil {
			break
		}

		return e.complexity.ProgramMembership.UserID(childComplexity), true

	case "ProgramMembershipBulkCreatePayload.programMemberships":
		if e.complexity.ProgramMembershipBulkCreatePayload.ProgramMemberships == nil {
			break
		}

		return e.complexity.ProgramMembershipBulkCreatePayload.ProgramMemberships(childComplexity), true

	case "ProgramMembershipConnection.edges":
		if e.complexity.ProgramMembershipConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramMembershipConnection.Edges(childComplexity), true

	case "ProgramMembershipConnection.pageInfo":
		if e.complexity.ProgramMembershipConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramMembershipConnection.PageInfo(childComplexity), true

	case "ProgramMembershipConnection.totalCount":
		if e.complexity.ProgramMembershipConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramMembershipConnection.TotalCount(childComplexity), true

	case "ProgramMembershipCreatePayload.programMembership":
		if e.complexity.ProgramMembershipCreatePayload.ProgramMembership == nil {
			break
		}

		return e.complexity.ProgramMembershipCreatePayload.ProgramMembership(childComplexity), true

	case "ProgramMembershipDeletePayload.deletedID":
		if e.complexity.ProgramMembershipDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.ProgramMembershipDeletePayload.DeletedID(childComplexity), true

	case "ProgramMembershipEdge.cursor":
		if e.complexity.ProgramMembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramMembershipEdge.Cursor(childComplexity), true

	case "ProgramMembershipEdge.node":
		if e.complexity.ProgramMembershipEdge.Node == nil {
			break
		}

		return e.complexity.ProgramMembershipEdge.Node(childComplexity), true

	case "ProgramMembershipHistory.createdAt":
		if e.complexity.ProgramMembershipHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.CreatedAt(childComplexity), true

	case "ProgramMembershipHistory.createdBy":
		if e.complexity.ProgramMembershipHistory.CreatedBy == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.CreatedBy(childComplexity), true

	case "ProgramMembershipHistory.deletedAt":
		if e.complexity.ProgramMembershipHistory.DeletedAt == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.DeletedAt(childComplexity), true

	case "ProgramMembershipHistory.deletedBy":
		if e.complexity.ProgramMembershipHistory.DeletedBy == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.DeletedBy(childComplexity), true

	case "ProgramMembershipHistory.historyTime":
		if e.complexity.ProgramMembershipHistory.HistoryTime == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.HistoryTime(childComplexity), true

	case "ProgramMembershipHistory.id":
		if e.complexity.ProgramMembershipHistory.ID == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.ID(childComplexity), true

	case "ProgramMembershipHistory.operation":
		if e.complexity.ProgramMembershipHistory.Operation == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.Operation(childComplexity), true

	case "ProgramMembershipHistory.programID":
		if e.complexity.ProgramMembershipHistory.ProgramID == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.ProgramID(childComplexity), true

	case "ProgramMembershipHistory.ref":
		if e.complexity.ProgramMembershipHistory.Ref == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.Ref(childComplexity), true

	case "ProgramMembershipHistory.role":
		if e.complexity.ProgramMembershipHistory.Role == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.Role(childComplexity), true

	case "ProgramMembershipHistory.updatedAt":
		if e.complexity.ProgramMembershipHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.UpdatedAt(childComplexity), true

	case "ProgramMembershipHistory.updatedBy":
		if e.complexity.ProgramMembershipHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.UpdatedBy(childComplexity), true

	case "ProgramMembershipHistory.userID":
		if e.complexity.ProgramMembershipHistory.UserID == nil {
			break
		}

		return e.complexity.ProgramMembershipHistory.UserID(childComplexity), true

	case "ProgramMembershipHistoryConnection.edges":
		if e.complexity.ProgramMembershipHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryConnection.Edges(childComplexity), true

	case "ProgramMembershipHistoryConnection.pageInfo":
		if e.complexity.ProgramMembershipHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryConnection.PageInfo(childComplexity), true

	case "ProgramMembershipHistoryConnection.totalCount":
		if e.complexity.ProgramMembershipHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryConnection.TotalCount(childComplexity), true

	case "ProgramMembershipHistoryEdge.cursor":
		if e.complexity.ProgramMembershipHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryEdge.Cursor(childComplexity), true

	case "ProgramMembershipHistoryEdge.node":
		if e.complexity.ProgramMembershipHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ProgramMembershipHistoryEdge.Node(childComplexity), true

	case "ProgramMembershipUpdatePayload.programMembership":
		if e.complexity.ProgramMembershipUpdatePayload.ProgramMembership == nil {
			break
		}

		return e.complexity.ProgramMembershipUpdatePayload.ProgramMembership(childComplexity), true

	case "ProgramSearchResult.programs":
		if e.complexity.ProgramSearchResult.Programs == nil {
			break
		}

		return e.complexity.ProgramSearchResult.Programs(childComplexity), true

	case "ProgramUpdatePayload.program":
		if e.complexity.ProgramUpdatePayload.Program == nil {
			break
		}

		return e.complexity.ProgramUpdatePayload.Program(childComplexity), true

	case "Query.apiToken":
		if e.complexity.Query.APIToken == nil {
			break
		}

		args, err := ec.field_Query_apiToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APIToken(childComplexity, args["id"].(string)), true

	case "Query.apiTokenSearch":
		if e.complexity.Query.APITokenSearch == nil {
			break
		}

		args, err := ec.field_Query_apiTokenSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APITokenSearch(childComplexity, args["query"].(string)), true

	case "Query.apiTokens":
		if e.complexity.Query.APITokens == nil {
			break
		}

		args, err := ec.field_Query_apiTokens_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APITokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.APITokenWhereInput)), true

	case "Query.actionPlan":
		if e.complexity.Query.ActionPlan == nil {
			break
		}

		args, err := ec.field_Query_actionPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlan(childComplexity, args["id"].(string)), true

	case "Query.actionPlanHistories":
		if e.complexity.Query.ActionPlanHistories == nil {
			break
		}

		args, err := ec.field_Query_actionPlanHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlanHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ActionPlanHistoryWhereInput)), true

	case "Query.actionPlanSearch":
		if e.complexity.Query.ActionPlanSearch == nil {
			break
		}

		args, err := ec.field_Query_actionPlanSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlanSearch(childComplexity, args["query"].(string)), true

	case "Query.actionPlans":
		if e.complexity.Query.ActionPlans == nil {
			break
		}

		args, err := ec.field_Query_actionPlans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ActionPlans(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ActionPlanWhereInput)), true

	case "Query.adminAPITokenSearch":
		if e.complexity.Query.AdminAPITokenSearch == nil {
			break
		}

		args, err := ec.field_Query_adminAPITokenSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminAPITokenSearch(childComplexity, args["query"].(string)), true

	case "Query.adminActionPlanSearch":
		if e.complexity.Query.AdminActionPlanSearch == nil {
			break
		}

		args, err := ec.field_Query_adminActionPlanSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminActionPlanSearch(childComplexity, args["query"].(string)), true

	case "Query.adminContactSearch":
		if e.complexity.Query.AdminContactSearch == nil {
			break
		}

		args, err := ec.field_Query_adminContactSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminContactSearch(childComplexity, args["query"].(string)), true

	case "Query.adminControlObjectiveSearch":
		if e.complexity.Query.AdminControlObjectiveSearch == nil {
			break
		}

		args, err := ec.field_Query_adminControlObjectiveSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminControlObjectiveSearch(childComplexity, args["query"].(string)), true

	case "Query.adminControlSearch":
		if e.complexity.Query.AdminControlSearch == nil {
			break
		}

		args, err := ec.field_Query_adminControlSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminControlSearch(childComplexity, args["query"].(string)), true

	case "Query.adminDocumentDataSearch":
		if e.complexity.Query.AdminDocumentDataSearch == nil {
			break
		}

		args, err := ec.field_Query_adminDocumentDataSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminDocumentDataSearch(childComplexity, args["query"].(string)), true

	case "Query.adminEntitySearch":
		if e.complexity.Query.AdminEntitySearch == nil {
			break
		}

		args, err := ec.field_Query_adminEntitySearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminEntitySearch(childComplexity, args["query"].(string)), true

	case "Query.adminEntityTypeSearch":
		if e.complexity.Query.AdminEntityTypeSearch == nil {
			break
		}

		args, err := ec.field_Query_adminEntityTypeSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminEntityTypeSearch(childComplexity, args["query"].(string)), true

	case "Query.adminEventSearch":
		if e.complexity.Query.AdminEventSearch == nil {
			break
		}

		args, err := ec.field_Query_adminEventSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminEventSearch(childComplexity, args["query"].(string)), true

	case "Query.adminFileSearch":
		if e.complexity.Query.AdminFileSearch == nil {
			break
		}

		args, err := ec.field_Query_adminFileSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminFileSearch(childComplexity, args["query"].(string)), true

	case "Query.adminGroupSearch":
		if e.complexity.Query.AdminGroupSearch == nil {
			break
		}

		args, err := ec.field_Query_adminGroupSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminGroupSearch(childComplexity, args["query"].(string)), true

	case "Query.adminGroupSettingSearch":
		if e.complexity.Query.AdminGroupSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_adminGroupSettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminGroupSettingSearch(childComplexity, args["query"].(string)), true

	case "Query.adminIntegrationSearch":
		if e.complexity.Query.AdminIntegrationSearch == nil {
			break
		}

		args, err := ec.field_Query_adminIntegrationSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminIntegrationSearch(childComplexity, args["query"].(string)), true

	case "Query.adminInternalPolicySearch":
		if e.complexity.Query.AdminInternalPolicySearch == nil {
			break
		}

		args, err := ec.field_Query_adminInternalPolicySearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminInternalPolicySearch(childComplexity, args["query"].(string)), true

	case "Query.adminNarrativeSearch":
		if e.complexity.Query.AdminNarrativeSearch == nil {
			break
		}

		args, err := ec.field_Query_adminNarrativeSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminNarrativeSearch(childComplexity, args["query"].(string)), true

	case "Query.adminOrgSubscriptionSearch":
		if e.complexity.Query.AdminOrgSubscriptionSearch == nil {
			break
		}

		args, err := ec.field_Query_adminOrgSubscriptionSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminOrgSubscriptionSearch(childComplexity, args["query"].(string)), true

	case "Query.adminOrganizationSearch":
		if e.complexity.Query.AdminOrganizationSearch == nil {
			break
		}

		args, err := ec.field_Query_adminOrganizationSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminOrganizationSearch(childComplexity, args["query"].(string)), true

	case "Query.adminOrganizationSettingSearch":
		if e.complexity.Query.AdminOrganizationSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_adminOrganizationSettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminOrganizationSettingSearch(childComplexity, args["query"].(string)), true

	case "Query.adminPersonalAccessTokenSearch":
		if e.complexity.Query.AdminPersonalAccessTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_adminPersonalAccessTokenSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminPersonalAccessTokenSearch(childComplexity, args["query"].(string)), true

	case "Query.adminProcedureSearch":
		if e.complexity.Query.AdminProcedureSearch == nil {
			break
		}

		args, err := ec.field_Query_adminProcedureSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminProcedureSearch(childComplexity, args["query"].(string)), true

	case "Query.adminProgramSearch":
		if e.complexity.Query.AdminProgramSearch == nil {
			break
		}

		args, err := ec.field_Query_adminProgramSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminProgramSearch(childComplexity, args["query"].(string)), true

	case "Query.adminRiskSearch":
		if e.complexity.Query.AdminRiskSearch == nil {
			break
		}

		args, err := ec.field_Query_adminRiskSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminRiskSearch(childComplexity, args["query"].(string)), true

	case "Query.adminSearch":
		if e.complexity.Query.AdminSearch == nil {
			break
		}

		args, err := ec.field_Query_adminSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminSearch(childComplexity, args["query"].(string)), true

	case "Query.adminStandardSearch":
		if e.complexity.Query.AdminStandardSearch == nil {
			break
		}

		args, err := ec.field_Query_adminStandardSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminStandardSearch(childComplexity, args["query"].(string)), true

	case "Query.adminSubcontrolSearch":
		if e.complexity.Query.AdminSubcontrolSearch == nil {
			break
		}

		args, err := ec.field_Query_adminSubcontrolSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminSubcontrolSearch(childComplexity, args["query"].(string)), true

	case "Query.adminSubscriberSearch":
		if e.complexity.Query.AdminSubscriberSearch == nil {
			break
		}

		args, err := ec.field_Query_adminSubscriberSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminSubscriberSearch(childComplexity, args["query"].(string)), true

	case "Query.adminTFASettingSearch":
		if e.complexity.Query.AdminTFASettingSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTFASettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTFASettingSearch(childComplexity, args["query"].(string)), true

	case "Query.adminTaskSearch":
		if e.complexity.Query.AdminTaskSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTaskSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTaskSearch(childComplexity, args["query"].(string)), true

	case "Query.adminTemplateSearch":
		if e.complexity.Query.AdminTemplateSearch == nil {
			break
		}

		args, err := ec.field_Query_adminTemplateSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTemplateSearch(childComplexity, args["query"].(string)), true

	case "Query.adminUserSearch":
		if e.complexity.Query.AdminUserSearch == nil {
			break
		}

		args, err := ec.field_Query_adminUserSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminUserSearch(childComplexity, args["query"].(string)), true

	case "Query.adminUserSettingSearch":
		if e.complexity.Query.AdminUserSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_adminUserSettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminUserSettingSearch(childComplexity, args["query"].(string)), true

	case "Query.auditLogs":
		if e.complexity.Query.AuditLogs == nil {
			break
		}

		args, err := ec.field_Query_auditLogs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuditLogs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*model.AuditLogWhereInput)), true

	case "Query.contact":
		if e.complexity.Query.Contact == nil {
			break
		}

		args, err := ec.field_Query_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contact(childComplexity, args["id"].(string)), true

	case "Query.contactHistories":
		if e.complexity.Query.ContactHistories == nil {
			break
		}

		args, err := ec.field_Query_contactHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ContactHistoryWhereInput)), true

	case "Query.contactSearch":
		if e.complexity.Query.ContactSearch == nil {
			break
		}

		args, err := ec.field_Query_contactSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactSearch(childComplexity, args["query"].(string)), true

	case "Query.contacts":
		if e.complexity.Query.Contacts == nil {
			break
		}

		args, err := ec.field_Query_contacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contacts(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ContactWhereInput)), true

	case "Query.control":
		if e.complexity.Query.Control == nil {
			break
		}

		args, err := ec.field_Query_control_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Control(childComplexity, args["id"].(string)), true

	case "Query.controlHistories":
		if e.complexity.Query.ControlHistories == nil {
			break
		}

		args, err := ec.field_Query_controlHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ControlHistoryWhereInput)), true

	case "Query.controlObjective":
		if e.complexity.Query.ControlObjective == nil {
			break
		}

		args, err := ec.field_Query_controlObjective_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjective(childComplexity, args["id"].(string)), true

	case "Query.controlObjectiveHistories":
		if e.complexity.Query.ControlObjectiveHistories == nil {
			break
		}

		args, err := ec.field_Query_controlObjectiveHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjectiveHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ControlObjectiveHistoryWhereInput)), true

	case "Query.controlObjectiveSearch":
		if e.complexity.Query.ControlObjectiveSearch == nil {
			break
		}

		args, err := ec.field_Query_controlObjectiveSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjectiveSearch(childComplexity, args["query"].(string)), true

	case "Query.controlObjectives":
		if e.complexity.Query.ControlObjectives == nil {
			break
		}

		args, err := ec.field_Query_controlObjectives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlObjectives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ControlObjectiveWhereInput)), true

	case "Query.controlSearch":
		if e.complexity.Query.ControlSearch == nil {
			break
		}

		args, err := ec.field_Query_controlSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlSearch(childComplexity, args["query"].(string)), true

	case "Query.controls":
		if e.complexity.Query.Controls == nil {
			break
		}

		args, err := ec.field_Query_controls_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Controls(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ControlWhereInput)), true

	case "Query.documentData":
		if e.complexity.Query.DocumentData == nil {
			break
		}

		args, err := ec.field_Query_documentData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentData(childComplexity, args["id"].(string)), true

	case "Query.documentDataHistories":
		if e.complexity.Query.DocumentDataHistories == nil {
			break
		}

		args, err := ec.field_Query_documentDataHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentDataHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.DocumentDataHistoryWhereInput)), true

	case "Query.documentDataSearch":
		if e.complexity.Query.DocumentDataSearch == nil {
			break
		}

		args, err := ec.field_Query_documentDataSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentDataSearch(childComplexity, args["query"].(string)), true

	case "Query.documentDataSlice":
		if e.complexity.Query.DocumentDataSlice == nil {
			break
		}

		args, err := ec.field_Query_documentDataSlice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentDataSlice(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.DocumentDataWhereInput)), true

	case "Query.entities":
		if e.complexity.Query.Entities == nil {
			break
		}

		args, err := ec.field_Query_entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Entities(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.EntityOrder), args["where"].(*generated.EntityWhereInput)), true

	case "Query.entity":
		if e.complexity.Query.Entity == nil {
			break
		}

		args, err := ec.field_Query_entity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Entity(childComplexity, args["id"].(string)), true

	case "Query.entityHistories":
		if e.complexity.Query.EntityHistories == nil {
			break
		}

		args, err := ec.field_Query_entityHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.EntityHistoryOrder), args["where"].(*generated.EntityHistoryWhereInput)), true

	case "Query.entitySearch":
		if e.complexity.Query.EntitySearch == nil {
			break
		}

		args, err := ec.field_Query_entitySearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntitySearch(childComplexity, args["query"].(string)), true

	case "Query.entityType":
		if e.complexity.Query.EntityType == nil {
			break
		}

		args, err := ec.field_Query_entityType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityType(childComplexity, args["id"].(string)), true

	case "Query.entityTypeHistories":
		if e.complexity.Query.EntityTypeHistories == nil {
			break
		}

		args, err := ec.field_Query_entityTypeHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityTypeHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.EntityTypeHistoryOrder), args["where"].(*generated.EntityTypeHistoryWhereInput)), true

	case "Query.entityTypeSearch":
		if e.complexity.Query.EntityTypeSearch == nil {
			break
		}

		args, err := ec.field_Query_entityTypeSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityTypeSearch(childComplexity, args["query"].(string)), true

	case "Query.entityTypes":
		if e.complexity.Query.EntityTypes == nil {
			break
		}

		args, err := ec.field_Query_entityTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityTypes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.EntityTypeOrder), args["where"].(*generated.EntityTypeWhereInput)), true

	case "Query.event":
		if e.complexity.Query.Event == nil {
			break
		}

		args, err := ec.field_Query_event_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Event(childComplexity, args["id"].(string)), true

	case "Query.eventHistories":
		if e.complexity.Query.EventHistories == nil {
			break
		}

		args, err := ec.field_Query_eventHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EventHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.EventHistoryWhereInput)), true

	case "Query.eventSearch":
		if e.complexity.Query.EventSearch == nil {
			break
		}

		args, err := ec.field_Query_eventSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EventSearch(childComplexity, args["query"].(string)), true

	case "Query.events":
		if e.complexity.Query.Events == nil {
			break
		}

		args, err := ec.field_Query_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Events(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.EventWhereInput)), true

	case "Query.file":
		if e.complexity.Query.File == nil {
			break
		}

		args, err := ec.field_Query_file_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.File(childComplexity, args["id"].(string)), true

	case "Query.fileHistories":
		if e.complexity.Query.FileHistories == nil {
			break
		}

		args, err := ec.field_Query_fileHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.FileHistoryWhereInput)), true

	case "Query.fileSearch":
		if e.complexity.Query.FileSearch == nil {
			break
		}

		args, err := ec.field_Query_fileSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileSearch(childComplexity, args["query"].(string)), true

	case "Query.files":
		if e.complexity.Query.Files == nil {
			break
		}

		args, err := ec.field_Query_files_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Files(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.FileWhereInput)), true

	case "Query.group":
		if e.complexity.Query.Group == nil {
			break
		}

		args, err := ec.field_Query_group_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Group(childComplexity, args["id"].(string)), true

	case "Query.groupHistories":
		if e.complexity.Query.GroupHistories == nil {
			break
		}

		args, err := ec.field_Query_groupHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.GroupHistoryOrder), args["where"].(*generated.GroupHistoryWhereInput)), true

	case "Query.groupMembership":
		if e.complexity.Query.GroupMembership == nil {
			break
		}

		args, err := ec.field_Query_groupMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupMembership(childComplexity, args["id"].(string)), true

	case "Query.groupMembershipHistories":
		if e.complexity.Query.GroupMembershipHistories == nil {
			break
		}

		args, err := ec.field_Query_groupMembershipHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupMembershipHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.GroupMembershipHistoryWhereInput)), true

	case "Query.groupMemberships":
		if e.complexity.Query.GroupMemberships == nil {
			break
		}

		args, err := ec.field_Query_groupMemberships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.GroupMembershipWhereInput)), true

	case "Query.groupSearch":
		if e.complexity.Query.GroupSearch == nil {
			break
		}

		args, err := ec.field_Query_groupSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSearch(childComplexity, args["query"].(string)), true

	case "Query.groupSetting":
		if e.complexity.Query.GroupSetting == nil {
			break
		}

		args, err := ec.field_Query_groupSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSetting(childComplexity, args["id"].(string)), true

	case "Query.groupSettingHistories":
		if e.complexity.Query.GroupSettingHistories == nil {
			break
		}

		args, err := ec.field_Query_groupSettingHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSettingHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.GroupSettingHistoryWhereInput)), true

	case "Query.groupSettingSearch":
		if e.complexity.Query.GroupSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_groupSettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSettingSearch(childComplexity, args["query"].(string)), true

	case "Query.groupSettings":
		if e.complexity.Query.GroupSettings == nil {
			break
		}

		args, err := ec.field_Query_groupSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GroupSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.GroupSettingWhereInput)), true

	case "Query.groups":
		if e.complexity.Query.Groups == nil {
			break
		}

		args, err := ec.field_Query_groups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Groups(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.GroupOrder), args["where"].(*generated.GroupWhereInput)), true

	case "Query.hush":
		if e.complexity.Query.Hush == nil {
			break
		}

		args, err := ec.field_Query_hush_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Hush(childComplexity, args["id"].(string)), true

	case "Query.hushHistories":
		if e.complexity.Query.HushHistories == nil {
			break
		}

		args, err := ec.field_Query_hushHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HushHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.HushHistoryOrder), args["where"].(*generated.HushHistoryWhereInput)), true

	case "Query.hushes":
		if e.complexity.Query.Hushes == nil {
			break
		}

		args, err := ec.field_Query_hushes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Hushes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.HushOrder), args["where"].(*generated.HushWhereInput)), true

	case "Query.integration":
		if e.complexity.Query.Integration == nil {
			break
		}

		args, err := ec.field_Query_integration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Integration(childComplexity, args["id"].(string)), true

	case "Query.integrationHistories":
		if e.complexity.Query.IntegrationHistories == nil {
			break
		}

		args, err := ec.field_Query_integrationHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IntegrationHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.IntegrationHistoryOrder), args["where"].(*generated.IntegrationHistoryWhereInput)), true

	case "Query.integrationSearch":
		if e.complexity.Query.IntegrationSearch == nil {
			break
		}

		args, err := ec.field_Query_integrationSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IntegrationSearch(childComplexity, args["query"].(string)), true

	case "Query.integrations":
		if e.complexity.Query.Integrations == nil {
			break
		}

		args, err := ec.field_Query_integrations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Integrations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.IntegrationOrder), args["where"].(*generated.IntegrationWhereInput)), true

	case "Query.internalPolicies":
		if e.complexity.Query.InternalPolicies == nil {
			break
		}

		args, err := ec.field_Query_internalPolicies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.InternalPolicyWhereInput)), true

	case "Query.internalPolicy":
		if e.complexity.Query.InternalPolicy == nil {
			break
		}

		args, err := ec.field_Query_internalPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicy(childComplexity, args["id"].(string)), true

	case "Query.internalPolicyHistories":
		if e.complexity.Query.InternalPolicyHistories == nil {
			break
		}

		args, err := ec.field_Query_internalPolicyHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicyHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.InternalPolicyHistoryWhereInput)), true

	case "Query.internalPolicySearch":
		if e.complexity.Query.InternalPolicySearch == nil {
			break
		}

		args, err := ec.field_Query_internalPolicySearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InternalPolicySearch(childComplexity, args["query"].(string)), true

	case "Query.invite":
		if e.complexity.Query.Invite == nil {
			break
		}

		args, err := ec.field_Query_invite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invite(childComplexity, args["id"].(string)), true

	case "Query.invites":
		if e.complexity.Query.Invites == nil {
			break
		}

		args, err := ec.field_Query_invites_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invites(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.InviteWhereInput)), true

	case "Query.narrative":
		if e.complexity.Query.Narrative == nil {
			break
		}

		args, err := ec.field_Query_narrative_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Narrative(childComplexity, args["id"].(string)), true

	case "Query.narrativeHistories":
		if e.complexity.Query.NarrativeHistories == nil {
			break
		}

		args, err := ec.field_Query_narrativeHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NarrativeHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.NarrativeHistoryWhereInput)), true

	case "Query.narrativeSearch":
		if e.complexity.Query.NarrativeSearch == nil {
			break
		}

		args, err := ec.field_Query_narrativeSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NarrativeSearch(childComplexity, args["query"].(string)), true

	case "Query.narratives":
		if e.complexity.Query.Narratives == nil {
			break
		}

		args, err := ec.field_Query_narratives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Narratives(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.NarrativeWhereInput)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Query.noteHistories":
		if e.complexity.Query.NoteHistories == nil {
			break
		}

		args, err := ec.field_Query_noteHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NoteHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.NoteHistoryWhereInput)), true

	case "Query.notes":
		if e.complexity.Query.Notes == nil {
			break
		}

		args, err := ec.field_Query_notes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.NoteWhereInput)), true

	case "Query.orgMembership":
		if e.complexity.Query.OrgMembership == nil {
			break
		}

		args, err := ec.field_Query_orgMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgMembership(childComplexity, args["id"].(string)), true

	case "Query.orgMembershipHistories":
		if e.complexity.Query.OrgMembershipHistories == nil {
			break
		}

		args, err := ec.field_Query_orgMembershipHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgMembershipHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.OrgMembershipHistoryWhereInput)), true

	case "Query.orgMemberships":
		if e.complexity.Query.OrgMemberships == nil {
			break
		}

		args, err := ec.field_Query_orgMemberships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.OrgMembershipWhereInput)), true

	case "Query.orgSubscription":
		if e.complexity.Query.OrgSubscription == nil {
			break
		}

		args, err := ec.field_Query_orgSubscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscription(childComplexity, args["id"].(string)), true

	case "Query.orgSubscriptionHistories":
		if e.complexity.Query.OrgSubscriptionHistories == nil {
			break
		}

		args, err := ec.field_Query_orgSubscriptionHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscriptionHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.OrgSubscriptionHistoryWhereInput)), true

	case "Query.orgSubscriptionSearch":
		if e.complexity.Query.OrgSubscriptionSearch == nil {
			break
		}

		args, err := ec.field_Query_orgSubscriptionSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscriptionSearch(childComplexity, args["query"].(string)), true

	case "Query.orgSubscriptions":
		if e.complexity.Query.OrgSubscriptions == nil {
			break
		}

		args, err := ec.field_Query_orgSubscriptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgSubscriptions(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.OrgSubscriptionWhereInput)), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["id"].(string)), true

	case "Query.organizationHistories":
		if e.complexity.Query.OrganizationHistories == nil {
			break
		}

		args, err := ec.field_Query_organizationHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrganizationHistoryOrder), args["where"].(*generated.OrganizationHistoryWhereInput)), true

	case "Query.organizationSearch":
		if e.complexity.Query.OrganizationSearch == nil {
			break
		}

		args, err := ec.field_Query_organizationSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSearch(childComplexity, args["query"].(string)), true

	case "Query.organizationSetting":
		if e.complexity.Query.OrganizationSetting == nil {
			break
		}

		args, err := ec.field_Query_organizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSetting(childComplexity, args["id"].(string)), true

	case "Query.organizationSettingHistories":
		if e.complexity.Query.OrganizationSettingHistories == nil {
			break
		}

		args, err := ec.field_Query_organizationSettingHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSettingHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.OrganizationSettingHistoryWhereInput)), true

	case "Query.organizationSettingSearch":
		if e.complexity.Query.OrganizationSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_organizationSettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSettingSearch(childComplexity, args["query"].(string)), true

	case "Query.organizationSettings":
		if e.complexity.Query.OrganizationSettings == nil {
			break
		}

		args, err := ec.field_Query_organizationSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.OrganizationSettingWhereInput)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		args, err := ec.field_Query_organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organizations(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.OrganizationOrder), args["where"].(*generated.OrganizationWhereInput)), true

	case "Query.personalAccessToken":
		if e.complexity.Query.PersonalAccessToken == nil {
			break
		}

		args, err := ec.field_Query_personalAccessToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonalAccessToken(childComplexity, args["id"].(string)), true

	case "Query.personalAccessTokenSearch":
		if e.complexity.Query.PersonalAccessTokenSearch == nil {
			break
		}

		args, err := ec.field_Query_personalAccessTokenSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonalAccessTokenSearch(childComplexity, args["query"].(string)), true

	case "Query.personalAccessTokens":
		if e.complexity.Query.PersonalAccessTokens == nil {
			break
		}

		args, err := ec.field_Query_personalAccessTokens_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PersonalAccessTokens(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.PersonalAccessTokenWhereInput)), true

	case "Query.procedure":
		if e.complexity.Query.Procedure == nil {
			break
		}

		args, err := ec.field_Query_procedure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Procedure(childComplexity, args["id"].(string)), true

	case "Query.procedureHistories":
		if e.complexity.Query.ProcedureHistories == nil {
			break
		}

		args, err := ec.field_Query_procedureHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProcedureHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ProcedureHistoryWhereInput)), true

	case "Query.procedureSearch":
		if e.complexity.Query.ProcedureSearch == nil {
			break
		}

		args, err := ec.field_Query_procedureSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProcedureSearch(childComplexity, args["query"].(string)), true

	case "Query.procedures":
		if e.complexity.Query.Procedures == nil {
			break
		}

		args, err := ec.field_Query_procedures_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Procedures(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ProcedureWhereInput)), true

	case "Query.program":
		if e.complexity.Query.Program == nil {
			break
		}

		args, err := ec.field_Query_program_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Program(childComplexity, args["id"].(string)), true

	case "Query.programHistories":
		if e.complexity.Query.ProgramHistories == nil {
			break
		}

		args, err := ec.field_Query_programHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ProgramHistoryWhereInput)), true

	case "Query.programMembership":
		if e.complexity.Query.ProgramMembership == nil {
			break
		}

		args, err := ec.field_Query_programMembership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramMembership(childComplexity, args["id"].(string)), true

	case "Query.programMembershipHistories":
		if e.complexity.Query.ProgramMembershipHistories == nil {
			break
		}

		args, err := ec.field_Query_programMembershipHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramMembershipHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ProgramMembershipHistoryWhereInput)), true

	case "Query.programMemberships":
		if e.complexity.Query.ProgramMemberships == nil {
			break
		}

		args, err := ec.field_Query_programMemberships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramMemberships(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ProgramMembershipWhereInput)), true

	case "Query.programSearch":
		if e.complexity.Query.ProgramSearch == nil {
			break
		}

		args, err := ec.field_Query_programSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProgramSearch(childComplexity, args["query"].(string)), true

	case "Query.programs":
		if e.complexity.Query.Programs == nil {
			break
		}

		args, err := ec.field_Query_programs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Programs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.ProgramWhereInput)), true

	case "Query.risk":
		if e.complexity.Query.Risk == nil {
			break
		}

		args, err := ec.field_Query_risk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Risk(childComplexity, args["id"].(string)), true

	case "Query.riskHistories":
		if e.complexity.Query.RiskHistories == nil {
			break
		}

		args, err := ec.field_Query_riskHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RiskHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.RiskHistoryWhereInput)), true

	case "Query.riskSearch":
		if e.complexity.Query.RiskSearch == nil {
			break
		}

		args, err := ec.field_Query_riskSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RiskSearch(childComplexity, args["query"].(string)), true

	case "Query.risks":
		if e.complexity.Query.Risks == nil {
			break
		}

		args, err := ec.field_Query_risks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Risks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.RiskWhereInput)), true

	case "Query.search":
		if e.complexity.Query.Search == nil {
			break
		}

		args, err := ec.field_Query_search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Search(childComplexity, args["query"].(string)), true

	case "Query.standard":
		if e.complexity.Query.Standard == nil {
			break
		}

		args, err := ec.field_Query_standard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Standard(childComplexity, args["id"].(string)), true

	case "Query.standardHistories":
		if e.complexity.Query.StandardHistories == nil {
			break
		}

		args, err := ec.field_Query_standardHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StandardHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.StandardHistoryWhereInput)), true

	case "Query.standardSearch":
		if e.complexity.Query.StandardSearch == nil {
			break
		}

		args, err := ec.field_Query_standardSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StandardSearch(childComplexity, args["query"].(string)), true

	case "Query.standards":
		if e.complexity.Query.Standards == nil {
			break
		}

		args, err := ec.field_Query_standards_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Standards(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.StandardWhereInput)), true

	case "Query.subcontrol":
		if e.complexity.Query.Subcontrol == nil {
			break
		}

		args, err := ec.field_Query_subcontrol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subcontrol(childComplexity, args["id"].(string)), true

	case "Query.subcontrolHistories":
		if e.complexity.Query.SubcontrolHistories == nil {
			break
		}

		args, err := ec.field_Query_subcontrolHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubcontrolHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.SubcontrolHistoryWhereInput)), true

	case "Query.subcontrolSearch":
		if e.complexity.Query.SubcontrolSearch == nil {
			break
		}

		args, err := ec.field_Query_subcontrolSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubcontrolSearch(childComplexity, args["query"].(string)), true

	case "Query.subcontrols":
		if e.complexity.Query.Subcontrols == nil {
			break
		}

		args, err := ec.field_Query_subcontrols_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subcontrols(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.SubcontrolWhereInput)), true

	case "Query.subscriber":
		if e.complexity.Query.Subscriber == nil {
			break
		}

		args, err := ec.field_Query_subscriber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subscriber(childComplexity, args["email"].(string)), true

	case "Query.subscriberSearch":
		if e.complexity.Query.SubscriberSearch == nil {
			break
		}

		args, err := ec.field_Query_subscriberSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubscriberSearch(childComplexity, args["query"].(string)), true

	case "Query.subscribers":
		if e.complexity.Query.Subscribers == nil {
			break
		}

		args, err := ec.field_Query_subscribers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Subscribers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.SubscriberWhereInput)), true

	case "Query.tFASettingSearch":
		if e.complexity.Query.TFASettingSearch == nil {
			break
		}

		args, err := ec.field_Query_tFASettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TFASettingSearch(childComplexity, args["query"].(string)), true

	case "Query.task":
		if e.complexity.Query.Task == nil {
			break
		}

		args, err := ec.field_Query_task_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Task(childComplexity, args["id"].(string)), true

	case "Query.taskHistories":
		if e.complexity.Query.TaskHistories == nil {
			break
		}

		args, err := ec.field_Query_taskHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.TaskHistoryWhereInput)), true

	case "Query.taskSearch":
		if e.complexity.Query.TaskSearch == nil {
			break
		}

		args, err := ec.field_Query_taskSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskSearch(childComplexity, args["query"].(string)), true

	case "Query.tasks":
		if e.complexity.Query.Tasks == nil {
			break
		}

		args, err := ec.field_Query_tasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tasks(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.TaskWhereInput)), true

	case "Query.template":
		if e.complexity.Query.Template == nil {
			break
		}

		args, err := ec.field_Query_template_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Template(childComplexity, args["id"].(string)), true

	case "Query.templateHistories":
		if e.complexity.Query.TemplateHistories == nil {
			break
		}

		args, err := ec.field_Query_templateHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TemplateHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TemplateHistoryOrder), args["where"].(*generated.TemplateHistoryWhereInput)), true

	case "Query.templateSearch":
		if e.complexity.Query.TemplateSearch == nil {
			break
		}

		args, err := ec.field_Query_templateSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TemplateSearch(childComplexity, args["query"].(string)), true

	case "Query.templates":
		if e.complexity.Query.Templates == nil {
			break
		}

		args, err := ec.field_Query_templates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Templates(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.TemplateOrder), args["where"].(*generated.TemplateWhereInput)), true

	case "Query.tfaSetting":
		if e.complexity.Query.TfaSetting == nil {
			break
		}

		args, err := ec.field_Query_tfaSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TfaSetting(childComplexity, args["id"].(*string)), true

	case "Query.tfaSettings":
		if e.complexity.Query.TfaSettings == nil {
			break
		}

		args, err := ec.field_Query_tfaSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TfaSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.TFASettingWhereInput)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.userHistories":
		if e.complexity.Query.UserHistories == nil {
			break
		}

		args, err := ec.field_Query_userHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.UserHistoryOrder), args["where"].(*generated.UserHistoryWhereInput)), true

	case "Query.userSearch":
		if e.complexity.Query.UserSearch == nil {
			break
		}

		args, err := ec.field_Query_userSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSearch(childComplexity, args["query"].(string)), true

	case "Query.userSetting":
		if e.complexity.Query.UserSetting == nil {
			break
		}

		args, err := ec.field_Query_userSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSetting(childComplexity, args["id"].(string)), true

	case "Query.userSettingHistories":
		if e.complexity.Query.UserSettingHistories == nil {
			break
		}

		args, err := ec.field_Query_userSettingHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSettingHistories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.UserSettingHistoryWhereInput)), true

	case "Query.userSettingSearch":
		if e.complexity.Query.UserSettingSearch == nil {
			break
		}

		args, err := ec.field_Query_userSettingSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSettingSearch(childComplexity, args["query"].(string)), true

	case "Query.userSettings":
		if e.complexity.Query.UserSettings == nil {
			break
		}

		args, err := ec.field_Query_userSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSettings(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["where"].(*generated.UserSettingWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*generated.UserOrder), args["where"].(*generated.UserWhereInput)), true

	case "Risk.actionPlans":
		if e.complexity.Risk.ActionPlans == nil {
			break
		}

		return e.complexity.Risk.ActionPlans(childComplexity), true

	case "Risk.blockedGroups":
		if e.complexity.Risk.BlockedGroups == nil {
			break
		}

		return e.complexity.Risk.BlockedGroups(childComplexity), true

	case "Risk.businessCosts":
		if e.complexity.Risk.BusinessCosts == nil {
			break
		}

		return e.complexity.Risk.BusinessCosts(childComplexity), true

	case "Risk.control":
		if e.complexity.Risk.Control == nil {
			break
		}

		return e.complexity.Risk.Control(childComplexity), true

	case "Risk.createdAt":
		if e.complexity.Risk.CreatedAt == nil {
			break
		}

		return e.complexity.Risk.CreatedAt(childComplexity), true

	case "Risk.createdBy":
		if e.complexity.Risk.CreatedBy == nil {
			break
		}

		return e.complexity.Risk.CreatedBy(childComplexity), true

	case "Risk.deletedAt":
		if e.complexity.Risk.DeletedAt == nil {
			break
		}

		return e.complexity.Risk.DeletedAt(childComplexity), true

	case "Risk.deletedBy":
		if e.complexity.Risk.DeletedBy == nil {
			break
		}

		return e.complexity.Risk.DeletedBy(childComplexity), true

	case "Risk.description":
		if e.complexity.Risk.Description == nil {
			break
		}

		return e.complexity.Risk.Description(childComplexity), true

	case "Risk.details":
		if e.complexity.Risk.Details == nil {
			break
		}

		return e.complexity.Risk.Details(childComplexity), true

	case "Risk.editors":
		if e.complexity.Risk.Editors == nil {
			break
		}

		return e.complexity.Risk.Editors(childComplexity), true

	case "Risk.id":
		if e.complexity.Risk.ID == nil {
			break
		}

		return e.complexity.Risk.ID(childComplexity), true

	case "Risk.impact":
		if e.complexity.Risk.Impact == nil {
			break
		}

		return e.complexity.Risk.Impact(childComplexity), true

	case "Risk.likelihood":
		if e.complexity.Risk.Likelihood == nil {
			break
		}

		return e.complexity.Risk.Likelihood(childComplexity), true

	case "Risk.mitigation":
		if e.complexity.Risk.Mitigation == nil {
			break
		}

		return e.complexity.Risk.Mitigation(childComplexity), true

	case "Risk.name":
		if e.complexity.Risk.Name == nil {
			break
		}

		return e.complexity.Risk.Name(childComplexity), true

	case "Risk.owner":
		if e.complexity.Risk.Owner == nil {
			break
		}

		return e.complexity.Risk.Owner(childComplexity), true

	case "Risk.ownerID":
		if e.complexity.Risk.OwnerID == nil {
			break
		}

		return e.complexity.Risk.OwnerID(childComplexity), true

	case "Risk.procedure":
		if e.complexity.Risk.Procedure == nil {
			break
		}

		return e.complexity.Risk.Procedure(childComplexity), true

	case "Risk.programs":
		if e.complexity.Risk.Programs == nil {
			break
		}

		return e.complexity.Risk.Programs(childComplexity), true

	case "Risk.riskType":
		if e.complexity.Risk.RiskType == nil {
			break
		}

		return e.complexity.Risk.RiskType(childComplexity), true

	case "Risk.satisfies":
		if e.complexity.Risk.Satisfies == nil {
			break
		}

		return e.complexity.Risk.Satisfies(childComplexity), true

	case "Risk.status":
		if e.complexity.Risk.Status == nil {
			break
		}

		return e.complexity.Risk.Status(childComplexity), true

	case "Risk.tags":
		if e.complexity.Risk.Tags == nil {
			break
		}

		return e.complexity.Risk.Tags(childComplexity), true

	case "Risk.updatedAt":
		if e.complexity.Risk.UpdatedAt == nil {
			break
		}

		return e.complexity.Risk.UpdatedAt(childComplexity), true

	case "Risk.updatedBy":
		if e.complexity.Risk.UpdatedBy == nil {
			break
		}

		return e.complexity.Risk.UpdatedBy(childComplexity), true

	case "Risk.viewers":
		if e.complexity.Risk.Viewers == nil {
			break
		}

		return e.complexity.Risk.Viewers(childComplexity), true

	case "RiskBulkCreatePayload.risks":
		if e.complexity.RiskBulkCreatePayload.Risks == nil {
			break
		}

		return e.complexity.RiskBulkCreatePayload.Risks(childComplexity), true

	case "RiskConnection.edges":
		if e.complexity.RiskConnection.Edges == nil {
			break
		}

		return e.complexity.RiskConnection.Edges(childComplexity), true

	case "RiskConnection.pageInfo":
		if e.complexity.RiskConnection.PageInfo == nil {
			break
		}

		return e.complexity.RiskConnection.PageInfo(childComplexity), true

	case "RiskConnection.totalCount":
		if e.complexity.RiskConnection.TotalCount == nil {
			break
		}

		return e.complexity.RiskConnection.TotalCount(childComplexity), true

	case "RiskCreatePayload.risk":
		if e.complexity.RiskCreatePayload.Risk == nil {
			break
		}

		return e.complexity.RiskCreatePayload.Risk(childComplexity), true

	case "RiskDeletePayload.deletedID":
		if e.complexity.RiskDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.RiskDeletePayload.DeletedID(childComplexity), true

	case "RiskEdge.cursor":
		if e.complexity.RiskEdge.Cursor == nil {
			break
		}

		return e.complexity.RiskEdge.Cursor(childComplexity), true

	case "RiskEdge.node":
		if e.complexity.RiskEdge.Node == nil {
			break
		}

		return e.complexity.RiskEdge.Node(childComplexity), true

	case "RiskHistory.businessCosts":
		if e.complexity.RiskHistory.BusinessCosts == nil {
			break
		}

		return e.complexity.RiskHistory.BusinessCosts(childComplexity), true

	case "RiskHistory.createdAt":
		if e.complexity.RiskHistory.CreatedAt == nil {
			break
		}

		return e.complexity.RiskHistory.CreatedAt(childComplexity), true

	case "RiskHistory.createdBy":
		if e.complexity.RiskHistory.CreatedBy == nil {
			break
		}

		return e.complexity.RiskHistory.CreatedBy(childComplexity), true

	case "RiskHistory.deletedAt":
		if e.complexity.RiskHistory.DeletedAt == nil {
			break
		}

		return e.complexity.RiskHistory.DeletedAt(childComplexity), true

	case "RiskHistory.deletedBy":
		if e.complexity.RiskHistory.DeletedBy == nil {
			break
		}

		return e.complexity.RiskHistory.DeletedBy(childComplexity), true

	case "RiskHistory.description":
		if e.complexity.RiskHistory.Description == nil {
			break
		}

		return e.complexity.RiskHistory.Description(childComplexity), true

	case "RiskHistory.details":
		if e.complexity.RiskHistory.Details == nil {
			break
		}

		return e.complexity.RiskHistory.Details(childComplexity), true

	case "RiskHistory.historyTime":
		if e.complexity.RiskHistory.HistoryTime == nil {
			break
		}

		return e.complexity.RiskHistory.HistoryTime(childComplexity), true

	case "RiskHistory.id":
		if e.complexity.RiskHistory.ID == nil {
			break
		}

		return e.complexity.RiskHistory.ID(childComplexity), true

	case "RiskHistory.impact":
		if e.complexity.RiskHistory.Impact == nil {
			break
		}

		return e.complexity.RiskHistory.Impact(childComplexity), true

	case "RiskHistory.likelihood":
		if e.complexity.RiskHistory.Likelihood == nil {
			break
		}

		return e.complexity.RiskHistory.Likelihood(childComplexity), true

	case "RiskHistory.mitigation":
		if e.complexity.RiskHistory.Mitigation == nil {
			break
		}

		return e.complexity.RiskHistory.Mitigation(childComplexity), true

	case "RiskHistory.name":
		if e.complexity.RiskHistory.Name == nil {
			break
		}

		return e.complexity.RiskHistory.Name(childComplexity), true

	case "RiskHistory.operation":
		if e.complexity.RiskHistory.Operation == nil {
			break
		}

		return e.complexity.RiskHistory.Operation(childComplexity), true

	case "RiskHistory.ownerID":
		if e.complexity.RiskHistory.OwnerID == nil {
			break
		}

		return e.complexity.RiskHistory.OwnerID(childComplexity), true

	case "RiskHistory.ref":
		if e.complexity.RiskHistory.Ref == nil {
			break
		}

		return e.complexity.RiskHistory.Ref(childComplexity), true

	case "RiskHistory.riskType":
		if e.complexity.RiskHistory.RiskType == nil {
			break
		}

		return e.complexity.RiskHistory.RiskType(childComplexity), true

	case "RiskHistory.satisfies":
		if e.complexity.RiskHistory.Satisfies == nil {
			break
		}

		return e.complexity.RiskHistory.Satisfies(childComplexity), true

	case "RiskHistory.status":
		if e.complexity.RiskHistory.Status == nil {
			break
		}

		return e.complexity.RiskHistory.Status(childComplexity), true

	case "RiskHistory.tags":
		if e.complexity.RiskHistory.Tags == nil {
			break
		}

		return e.complexity.RiskHistory.Tags(childComplexity), true

	case "RiskHistory.updatedAt":
		if e.complexity.RiskHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.RiskHistory.UpdatedAt(childComplexity), true

	case "RiskHistory.updatedBy":
		if e.complexity.RiskHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.RiskHistory.UpdatedBy(childComplexity), true

	case "RiskHistoryConnection.edges":
		if e.complexity.RiskHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.RiskHistoryConnection.Edges(childComplexity), true

	case "RiskHistoryConnection.pageInfo":
		if e.complexity.RiskHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.RiskHistoryConnection.PageInfo(childComplexity), true

	case "RiskHistoryConnection.totalCount":
		if e.complexity.RiskHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.RiskHistoryConnection.TotalCount(childComplexity), true

	case "RiskHistoryEdge.cursor":
		if e.complexity.RiskHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.RiskHistoryEdge.Cursor(childComplexity), true

	case "RiskHistoryEdge.node":
		if e.complexity.RiskHistoryEdge.Node == nil {
			break
		}

		return e.complexity.RiskHistoryEdge.Node(childComplexity), true

	case "RiskSearchResult.risks":
		if e.complexity.RiskSearchResult.Risks == nil {
			break
		}

		return e.complexity.RiskSearchResult.Risks(childComplexity), true

	case "RiskUpdatePayload.risk":
		if e.complexity.RiskUpdatePayload.Risk == nil {
			break
		}

		return e.complexity.RiskUpdatePayload.Risk(childComplexity), true

	case "SearchResultConnection.nodes":
		if e.complexity.SearchResultConnection.Nodes == nil {
			break
		}

		return e.complexity.SearchResultConnection.Nodes(childComplexity), true

	case "SearchResultConnection.page":
		if e.complexity.SearchResultConnection.Page == nil {
			break
		}

		return e.complexity.SearchResultConnection.Page(childComplexity), true

	case "SearchResultConnection.totalCount":
		if e.complexity.SearchResultConnection.TotalCount == nil {
			break
		}

		return e.complexity.SearchResultConnection.TotalCount(childComplexity), true

	case "Standard.actionPlans":
		if e.complexity.Standard.ActionPlans == nil {
			break
		}

		return e.complexity.Standard.ActionPlans(childComplexity), true

	case "Standard.background":
		if e.complexity.Standard.Background == nil {
			break
		}

		return e.complexity.Standard.Background(childComplexity), true

	case "Standard.controlObjectives":
		if e.complexity.Standard.ControlObjectives == nil {
			break
		}

		return e.complexity.Standard.ControlObjectives(childComplexity), true

	case "Standard.controls":
		if e.complexity.Standard.Controls == nil {
			break
		}

		return e.complexity.Standard.Controls(childComplexity), true

	case "Standard.createdAt":
		if e.complexity.Standard.CreatedAt == nil {
			break
		}

		return e.complexity.Standard.CreatedAt(childComplexity), true

	case "Standard.createdBy":
		if e.complexity.Standard.CreatedBy == nil {
			break
		}

		return e.complexity.Standard.CreatedBy(childComplexity), true

	case "Standard.deletedAt":
		if e.complexity.Standard.DeletedAt == nil {
			break
		}

		return e.complexity.Standard.DeletedAt(childComplexity), true

	case "Standard.deletedBy":
		if e.complexity.Standard.DeletedBy == nil {
			break
		}

		return e.complexity.Standard.DeletedBy(childComplexity), true

	case "Standard.description":
		if e.complexity.Standard.Description == nil {
			break
		}

		return e.complexity.Standard.Description(childComplexity), true

	case "Standard.details":
		if e.complexity.Standard.Details == nil {
			break
		}

		return e.complexity.Standard.Details(childComplexity), true

	case "Standard.family":
		if e.complexity.Standard.Family == nil {
			break
		}

		return e.complexity.Standard.Family(childComplexity), true

	case "Standard.id":
		if e.complexity.Standard.ID == nil {
			break
		}

		return e.complexity.Standard.ID(childComplexity), true

	case "Standard.name":
		if e.complexity.Standard.Name == nil {
			break
		}

		return e.complexity.Standard.Name(childComplexity), true

	case "Standard.procedures":
		if e.complexity.Standard.Procedures == nil {
			break
		}

		return e.complexity.Standard.Procedures(childComplexity), true

	case "Standard.programs":
		if e.complexity.Standard.Programs == nil {
			break
		}

		return e.complexity.Standard.Programs(childComplexity), true

	case "Standard.purposeAndScope":
		if e.complexity.Standard.PurposeAndScope == nil {
			break
		}

		return e.complexity.Standard.PurposeAndScope(childComplexity), true

	case "Standard.satisfies":
		if e.complexity.Standard.Satisfies == nil {
			break
		}

		return e.complexity.Standard.Satisfies(childComplexity), true

	case "Standard.standardType":
		if e.complexity.Standard.StandardType == nil {
			break
		}

		return e.complexity.Standard.StandardType(childComplexity), true

	case "Standard.status":
		if e.complexity.Standard.Status == nil {
			break
		}

		return e.complexity.Standard.Status(childComplexity), true

	case "Standard.tags":
		if e.complexity.Standard.Tags == nil {
			break
		}

		return e.complexity.Standard.Tags(childComplexity), true

	case "Standard.updatedAt":
		if e.complexity.Standard.UpdatedAt == nil {
			break
		}

		return e.complexity.Standard.UpdatedAt(childComplexity), true

	case "Standard.updatedBy":
		if e.complexity.Standard.UpdatedBy == nil {
			break
		}

		return e.complexity.Standard.UpdatedBy(childComplexity), true

	case "Standard.version":
		if e.complexity.Standard.Version == nil {
			break
		}

		return e.complexity.Standard.Version(childComplexity), true

	case "StandardBulkCreatePayload.standards":
		if e.complexity.StandardBulkCreatePayload.Standards == nil {
			break
		}

		return e.complexity.StandardBulkCreatePayload.Standards(childComplexity), true

	case "StandardConnection.edges":
		if e.complexity.StandardConnection.Edges == nil {
			break
		}

		return e.complexity.StandardConnection.Edges(childComplexity), true

	case "StandardConnection.pageInfo":
		if e.complexity.StandardConnection.PageInfo == nil {
			break
		}

		return e.complexity.StandardConnection.PageInfo(childComplexity), true

	case "StandardConnection.totalCount":
		if e.complexity.StandardConnection.TotalCount == nil {
			break
		}

		return e.complexity.StandardConnection.TotalCount(childComplexity), true

	case "StandardCreatePayload.standard":
		if e.complexity.StandardCreatePayload.Standard == nil {
			break
		}

		return e.complexity.StandardCreatePayload.Standard(childComplexity), true

	case "StandardDeletePayload.deletedID":
		if e.complexity.StandardDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.StandardDeletePayload.DeletedID(childComplexity), true

	case "StandardEdge.cursor":
		if e.complexity.StandardEdge.Cursor == nil {
			break
		}

		return e.complexity.StandardEdge.Cursor(childComplexity), true

	case "StandardEdge.node":
		if e.complexity.StandardEdge.Node == nil {
			break
		}

		return e.complexity.StandardEdge.Node(childComplexity), true

	case "StandardHistory.background":
		if e.complexity.StandardHistory.Background == nil {
			break
		}

		return e.complexity.StandardHistory.Background(childComplexity), true

	case "StandardHistory.createdAt":
		if e.complexity.StandardHistory.CreatedAt == nil {
			break
		}

		return e.complexity.StandardHistory.CreatedAt(childComplexity), true

	case "StandardHistory.createdBy":
		if e.complexity.StandardHistory.CreatedBy == nil {
			break
		}

		return e.complexity.StandardHistory.CreatedBy(childComplexity), true

	case "StandardHistory.deletedAt":
		if e.complexity.StandardHistory.DeletedAt == nil {
			break
		}

		return e.complexity.StandardHistory.DeletedAt(childComplexity), true

	case "StandardHistory.deletedBy":
		if e.complexity.StandardHistory.DeletedBy == nil {
			break
		}

		return e.complexity.StandardHistory.DeletedBy(childComplexity), true

	case "StandardHistory.description":
		if e.complexity.StandardHistory.Description == nil {
			break
		}

		return e.complexity.StandardHistory.Description(childComplexity), true

	case "StandardHistory.details":
		if e.complexity.StandardHistory.Details == nil {
			break
		}

		return e.complexity.StandardHistory.Details(childComplexity), true

	case "StandardHistory.family":
		if e.complexity.StandardHistory.Family == nil {
			break
		}

		return e.complexity.StandardHistory.Family(childComplexity), true

	case "StandardHistory.historyTime":
		if e.complexity.StandardHistory.HistoryTime == nil {
			break
		}

		return e.complexity.StandardHistory.HistoryTime(childComplexity), true

	case "StandardHistory.id":
		if e.complexity.StandardHistory.ID == nil {
			break
		}

		return e.complexity.StandardHistory.ID(childComplexity), true

	case "StandardHistory.name":
		if e.complexity.StandardHistory.Name == nil {
			break
		}

		return e.complexity.StandardHistory.Name(childComplexity), true

	case "StandardHistory.operation":
		if e.complexity.StandardHistory.Operation == nil {
			break
		}

		return e.complexity.StandardHistory.Operation(childComplexity), true

	case "StandardHistory.purposeAndScope":
		if e.complexity.StandardHistory.PurposeAndScope == nil {
			break
		}

		return e.complexity.StandardHistory.PurposeAndScope(childComplexity), true

	case "StandardHistory.ref":
		if e.complexity.StandardHistory.Ref == nil {
			break
		}

		return e.complexity.StandardHistory.Ref(childComplexity), true

	case "StandardHistory.satisfies":
		if e.complexity.StandardHistory.Satisfies == nil {
			break
		}

		return e.complexity.StandardHistory.Satisfies(childComplexity), true

	case "StandardHistory.standardType":
		if e.complexity.StandardHistory.StandardType == nil {
			break
		}

		return e.complexity.StandardHistory.StandardType(childComplexity), true

	case "StandardHistory.status":
		if e.complexity.StandardHistory.Status == nil {
			break
		}

		return e.complexity.StandardHistory.Status(childComplexity), true

	case "StandardHistory.tags":
		if e.complexity.StandardHistory.Tags == nil {
			break
		}

		return e.complexity.StandardHistory.Tags(childComplexity), true

	case "StandardHistory.updatedAt":
		if e.complexity.StandardHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.StandardHistory.UpdatedAt(childComplexity), true

	case "StandardHistory.updatedBy":
		if e.complexity.StandardHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.StandardHistory.UpdatedBy(childComplexity), true

	case "StandardHistory.version":
		if e.complexity.StandardHistory.Version == nil {
			break
		}

		return e.complexity.StandardHistory.Version(childComplexity), true

	case "StandardHistoryConnection.edges":
		if e.complexity.StandardHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.StandardHistoryConnection.Edges(childComplexity), true

	case "StandardHistoryConnection.pageInfo":
		if e.complexity.StandardHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.StandardHistoryConnection.PageInfo(childComplexity), true

	case "StandardHistoryConnection.totalCount":
		if e.complexity.StandardHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.StandardHistoryConnection.TotalCount(childComplexity), true

	case "StandardHistoryEdge.cursor":
		if e.complexity.StandardHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.StandardHistoryEdge.Cursor(childComplexity), true

	case "StandardHistoryEdge.node":
		if e.complexity.StandardHistoryEdge.Node == nil {
			break
		}

		return e.complexity.StandardHistoryEdge.Node(childComplexity), true

	case "StandardSearchResult.standards":
		if e.complexity.StandardSearchResult.Standards == nil {
			break
		}

		return e.complexity.StandardSearchResult.Standards(childComplexity), true

	case "StandardUpdatePayload.standard":
		if e.complexity.StandardUpdatePayload.Standard == nil {
			break
		}

		return e.complexity.StandardUpdatePayload.Standard(childComplexity), true

	case "Subcontrol.class":
		if e.complexity.Subcontrol.Class == nil {
			break
		}

		return e.complexity.Subcontrol.Class(childComplexity), true

	case "Subcontrol.controls":
		if e.complexity.Subcontrol.Controls == nil {
			break
		}

		return e.complexity.Subcontrol.Controls(childComplexity), true

	case "Subcontrol.createdAt":
		if e.complexity.Subcontrol.CreatedAt == nil {
			break
		}

		return e.complexity.Subcontrol.CreatedAt(childComplexity), true

	case "Subcontrol.createdBy":
		if e.complexity.Subcontrol.CreatedBy == nil {
			break
		}

		return e.complexity.Subcontrol.CreatedBy(childComplexity), true

	case "Subcontrol.deletedAt":
		if e.complexity.Subcontrol.DeletedAt == nil {
			break
		}

		return e.complexity.Subcontrol.DeletedAt(childComplexity), true

	case "Subcontrol.deletedBy":
		if e.complexity.Subcontrol.DeletedBy == nil {
			break
		}

		return e.complexity.Subcontrol.DeletedBy(childComplexity), true

	case "Subcontrol.description":
		if e.complexity.Subcontrol.Description == nil {
			break
		}

		return e.complexity.Subcontrol.Description(childComplexity), true

	case "Subcontrol.details":
		if e.complexity.Subcontrol.Details == nil {
			break
		}

		return e.complexity.Subcontrol.Details(childComplexity), true

	case "Subcontrol.family":
		if e.complexity.Subcontrol.Family == nil {
			break
		}

		return e.complexity.Subcontrol.Family(childComplexity), true

	case "Subcontrol.id":
		if e.complexity.Subcontrol.ID == nil {
			break
		}

		return e.complexity.Subcontrol.ID(childComplexity), true

	case "Subcontrol.implementationDate":
		if e.complexity.Subcontrol.ImplementationDate == nil {
			break
		}

		return e.complexity.Subcontrol.ImplementationDate(childComplexity), true

	case "Subcontrol.implementationEvidence":
		if e.complexity.Subcontrol.ImplementationEvidence == nil {
			break
		}

		return e.complexity.Subcontrol.ImplementationEvidence(childComplexity), true

	case "Subcontrol.implementationStatus":
		if e.complexity.Subcontrol.ImplementationStatus == nil {
			break
		}

		return e.complexity.Subcontrol.ImplementationStatus(childComplexity), true

	case "Subcontrol.implementationVerification":
		if e.complexity.Subcontrol.ImplementationVerification == nil {
			break
		}

		return e.complexity.Subcontrol.ImplementationVerification(childComplexity), true

	case "Subcontrol.implementationVerificationDate":
		if e.complexity.Subcontrol.ImplementationVerificationDate == nil {
			break
		}

		return e.complexity.Subcontrol.ImplementationVerificationDate(childComplexity), true

	case "Subcontrol.mappedFrameworks":
		if e.complexity.Subcontrol.MappedFrameworks == nil {
			break
		}

		return e.complexity.Subcontrol.MappedFrameworks(childComplexity), true

	case "Subcontrol.name":
		if e.complexity.Subcontrol.Name == nil {
			break
		}

		return e.complexity.Subcontrol.Name(childComplexity), true

	case "Subcontrol.notes":
		if e.complexity.Subcontrol.Notes == nil {
			break
		}

		return e.complexity.Subcontrol.Notes(childComplexity), true

	case "Subcontrol.owner":
		if e.complexity.Subcontrol.Owner == nil {
			break
		}

		return e.complexity.Subcontrol.Owner(childComplexity), true

	case "Subcontrol.ownerID":
		if e.complexity.Subcontrol.OwnerID == nil {
			break
		}

		return e.complexity.Subcontrol.OwnerID(childComplexity), true

	case "Subcontrol.programs":
		if e.complexity.Subcontrol.Programs == nil {
			break
		}

		return e.complexity.Subcontrol.Programs(childComplexity), true

	case "Subcontrol.source":
		if e.complexity.Subcontrol.Source == nil {
			break
		}

		return e.complexity.Subcontrol.Source(childComplexity), true

	case "Subcontrol.status":
		if e.complexity.Subcontrol.Status == nil {
			break
		}

		return e.complexity.Subcontrol.Status(childComplexity), true

	case "Subcontrol.subcontrolNumber":
		if e.complexity.Subcontrol.SubcontrolNumber == nil {
			break
		}

		return e.complexity.Subcontrol.SubcontrolNumber(childComplexity), true

	case "Subcontrol.subcontrolType":
		if e.complexity.Subcontrol.SubcontrolType == nil {
			break
		}

		return e.complexity.Subcontrol.SubcontrolType(childComplexity), true

	case "Subcontrol.tags":
		if e.complexity.Subcontrol.Tags == nil {
			break
		}

		return e.complexity.Subcontrol.Tags(childComplexity), true

	case "Subcontrol.tasks":
		if e.complexity.Subcontrol.Tasks == nil {
			break
		}

		return e.complexity.Subcontrol.Tasks(childComplexity), true

	case "Subcontrol.updatedAt":
		if e.complexity.Subcontrol.UpdatedAt == nil {
			break
		}

		return e.complexity.Subcontrol.UpdatedAt(childComplexity), true

	case "Subcontrol.updatedBy":
		if e.complexity.Subcontrol.UpdatedBy == nil {
			break
		}

		return e.complexity.Subcontrol.UpdatedBy(childComplexity), true

	case "Subcontrol.user":
		if e.complexity.Subcontrol.User == nil {
			break
		}

		return e.complexity.Subcontrol.User(childComplexity), true

	case "Subcontrol.version":
		if e.complexity.Subcontrol.Version == nil {
			break
		}

		return e.complexity.Subcontrol.Version(childComplexity), true

	case "SubcontrolBulkCreatePayload.subcontrols":
		if e.complexity.SubcontrolBulkCreatePayload.Subcontrols == nil {
			break
		}

		return e.complexity.SubcontrolBulkCreatePayload.Subcontrols(childComplexity), true

	case "SubcontrolConnection.edges":
		if e.complexity.SubcontrolConnection.Edges == nil {
			break
		}

		return e.complexity.SubcontrolConnection.Edges(childComplexity), true

	case "SubcontrolConnection.pageInfo":
		if e.complexity.SubcontrolConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubcontrolConnection.PageInfo(childComplexity), true

	case "SubcontrolConnection.totalCount":
		if e.complexity.SubcontrolConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubcontrolConnection.TotalCount(childComplexity), true

	case "SubcontrolCreatePayload.subcontrol":
		if e.complexity.SubcontrolCreatePayload.Subcontrol == nil {
			break
		}

		return e.complexity.SubcontrolCreatePayload.Subcontrol(childComplexity), true

	case "SubcontrolDeletePayload.deletedID":
		if e.complexity.SubcontrolDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.SubcontrolDeletePayload.DeletedID(childComplexity), true

	case "SubcontrolEdge.cursor":
		if e.complexity.SubcontrolEdge.Cursor == nil {
			break
		}

		return e.complexity.SubcontrolEdge.Cursor(childComplexity), true

	case "SubcontrolEdge.node":
		if e.complexity.SubcontrolEdge.Node == nil {
			break
		}

		return e.complexity.SubcontrolEdge.Node(childComplexity), true

	case "SubcontrolHistory.class":
		if e.complexity.SubcontrolHistory.Class == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Class(childComplexity), true

	case "SubcontrolHistory.createdAt":
		if e.complexity.SubcontrolHistory.CreatedAt == nil {
			break
		}

		return e.complexity.SubcontrolHistory.CreatedAt(childComplexity), true

	case "SubcontrolHistory.createdBy":
		if e.complexity.SubcontrolHistory.CreatedBy == nil {
			break
		}

		return e.complexity.SubcontrolHistory.CreatedBy(childComplexity), true

	case "SubcontrolHistory.deletedAt":
		if e.complexity.SubcontrolHistory.DeletedAt == nil {
			break
		}

		return e.complexity.SubcontrolHistory.DeletedAt(childComplexity), true

	case "SubcontrolHistory.deletedBy":
		if e.complexity.SubcontrolHistory.DeletedBy == nil {
			break
		}

		return e.complexity.SubcontrolHistory.DeletedBy(childComplexity), true

	case "SubcontrolHistory.description":
		if e.complexity.SubcontrolHistory.Description == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Description(childComplexity), true

	case "SubcontrolHistory.details":
		if e.complexity.SubcontrolHistory.Details == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Details(childComplexity), true

	case "SubcontrolHistory.family":
		if e.complexity.SubcontrolHistory.Family == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Family(childComplexity), true

	case "SubcontrolHistory.historyTime":
		if e.complexity.SubcontrolHistory.HistoryTime == nil {
			break
		}

		return e.complexity.SubcontrolHistory.HistoryTime(childComplexity), true

	case "SubcontrolHistory.id":
		if e.complexity.SubcontrolHistory.ID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ID(childComplexity), true

	case "SubcontrolHistory.implementationDate":
		if e.complexity.SubcontrolHistory.ImplementationDate == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ImplementationDate(childComplexity), true

	case "SubcontrolHistory.implementationEvidence":
		if e.complexity.SubcontrolHistory.ImplementationEvidence == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ImplementationEvidence(childComplexity), true

	case "SubcontrolHistory.implementationStatus":
		if e.complexity.SubcontrolHistory.ImplementationStatus == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ImplementationStatus(childComplexity), true

	case "SubcontrolHistory.implementationVerification":
		if e.complexity.SubcontrolHistory.ImplementationVerification == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ImplementationVerification(childComplexity), true

	case "SubcontrolHistory.implementationVerificationDate":
		if e.complexity.SubcontrolHistory.ImplementationVerificationDate == nil {
			break
		}

		return e.complexity.SubcontrolHistory.ImplementationVerificationDate(childComplexity), true

	case "SubcontrolHistory.mappedFrameworks":
		if e.complexity.SubcontrolHistory.MappedFrameworks == nil {
			break
		}

		return e.complexity.SubcontrolHistory.MappedFrameworks(childComplexity), true

	case "SubcontrolHistory.name":
		if e.complexity.SubcontrolHistory.Name == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Name(childComplexity), true

	case "SubcontrolHistory.operation":
		if e.complexity.SubcontrolHistory.Operation == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Operation(childComplexity), true

	case "SubcontrolHistory.ownerID":
		if e.complexity.SubcontrolHistory.OwnerID == nil {
			break
		}

		return e.complexity.SubcontrolHistory.OwnerID(childComplexity), true

	case "SubcontrolHistory.ref":
		if e.complexity.SubcontrolHistory.Ref == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Ref(childComplexity), true

	case "SubcontrolHistory.source":
		if e.complexity.SubcontrolHistory.Source == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Source(childComplexity), true

	case "SubcontrolHistory.status":
		if e.complexity.SubcontrolHistory.Status == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Status(childComplexity), true

	case "SubcontrolHistory.subcontrolNumber":
		if e.complexity.SubcontrolHistory.SubcontrolNumber == nil {
			break
		}

		return e.complexity.SubcontrolHistory.SubcontrolNumber(childComplexity), true

	case "SubcontrolHistory.subcontrolType":
		if e.complexity.SubcontrolHistory.SubcontrolType == nil {
			break
		}

		return e.complexity.SubcontrolHistory.SubcontrolType(childComplexity), true

	case "SubcontrolHistory.tags":
		if e.complexity.SubcontrolHistory.Tags == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Tags(childComplexity), true

	case "SubcontrolHistory.updatedAt":
		if e.complexity.SubcontrolHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.SubcontrolHistory.UpdatedAt(childComplexity), true

	case "SubcontrolHistory.updatedBy":
		if e.complexity.SubcontrolHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.SubcontrolHistory.UpdatedBy(childComplexity), true

	case "SubcontrolHistory.version":
		if e.complexity.SubcontrolHistory.Version == nil {
			break
		}

		return e.complexity.SubcontrolHistory.Version(childComplexity), true

	case "SubcontrolHistoryConnection.edges":
		if e.complexity.SubcontrolHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.SubcontrolHistoryConnection.Edges(childComplexity), true

	case "SubcontrolHistoryConnection.pageInfo":
		if e.complexity.SubcontrolHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubcontrolHistoryConnection.PageInfo(childComplexity), true

	case "SubcontrolHistoryConnection.totalCount":
		if e.complexity.SubcontrolHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubcontrolHistoryConnection.TotalCount(childComplexity), true

	case "SubcontrolHistoryEdge.cursor":
		if e.complexity.SubcontrolHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.SubcontrolHistoryEdge.Cursor(childComplexity), true

	case "SubcontrolHistoryEdge.node":
		if e.complexity.SubcontrolHistoryEdge.Node == nil {
			break
		}

		return e.complexity.SubcontrolHistoryEdge.Node(childComplexity), true

	case "SubcontrolSearchResult.subcontrols":
		if e.complexity.SubcontrolSearchResult.Subcontrols == nil {
			break
		}

		return e.complexity.SubcontrolSearchResult.Subcontrols(childComplexity), true

	case "SubcontrolUpdatePayload.subcontrol":
		if e.complexity.SubcontrolUpdatePayload.Subcontrol == nil {
			break
		}

		return e.complexity.SubcontrolUpdatePayload.Subcontrol(childComplexity), true

	case "Subscriber.active":
		if e.complexity.Subscriber.Active == nil {
			break
		}

		return e.complexity.Subscriber.Active(childComplexity), true

	case "Subscriber.createdAt":
		if e.complexity.Subscriber.CreatedAt == nil {
			break
		}

		return e.complexity.Subscriber.CreatedAt(childComplexity), true

	case "Subscriber.createdBy":
		if e.complexity.Subscriber.CreatedBy == nil {
			break
		}

		return e.complexity.Subscriber.CreatedBy(childComplexity), true

	case "Subscriber.deletedAt":
		if e.complexity.Subscriber.DeletedAt == nil {
			break
		}

		return e.complexity.Subscriber.DeletedAt(childComplexity), true

	case "Subscriber.deletedBy":
		if e.complexity.Subscriber.DeletedBy == nil {
			break
		}

		return e.complexity.Subscriber.DeletedBy(childComplexity), true

	case "Subscriber.email":
		if e.complexity.Subscriber.Email == nil {
			break
		}

		return e.complexity.Subscriber.Email(childComplexity), true

	case "Subscriber.events":
		if e.complexity.Subscriber.Events == nil {
			break
		}

		return e.complexity.Subscriber.Events(childComplexity), true

	case "Subscriber.id":
		if e.complexity.Subscriber.ID == nil {
			break
		}

		return e.complexity.Subscriber.ID(childComplexity), true

	case "Subscriber.owner":
		if e.complexity.Subscriber.Owner == nil {
			break
		}

		return e.complexity.Subscriber.Owner(childComplexity), true

	case "Subscriber.ownerID":
		if e.complexity.Subscriber.OwnerID == nil {
			break
		}

		return e.complexity.Subscriber.OwnerID(childComplexity), true

	case "Subscriber.phoneNumber":
		if e.complexity.Subscriber.PhoneNumber == nil {
			break
		}

		return e.complexity.Subscriber.PhoneNumber(childComplexity), true

	case "Subscriber.tags":
		if e.complexity.Subscriber.Tags == nil {
			break
		}

		return e.complexity.Subscriber.Tags(childComplexity), true

	case "Subscriber.updatedAt":
		if e.complexity.Subscriber.UpdatedAt == nil {
			break
		}

		return e.complexity.Subscriber.UpdatedAt(childComplexity), true

	case "Subscriber.updatedBy":
		if e.complexity.Subscriber.UpdatedBy == nil {
			break
		}

		return e.complexity.Subscriber.UpdatedBy(childComplexity), true

	case "Subscriber.verifiedEmail":
		if e.complexity.Subscriber.VerifiedEmail == nil {
			break
		}

		return e.complexity.Subscriber.VerifiedEmail(childComplexity), true

	case "Subscriber.verifiedPhone":
		if e.complexity.Subscriber.VerifiedPhone == nil {
			break
		}

		return e.complexity.Subscriber.VerifiedPhone(childComplexity), true

	case "SubscriberBulkCreatePayload.subscribers":
		if e.complexity.SubscriberBulkCreatePayload.Subscribers == nil {
			break
		}

		return e.complexity.SubscriberBulkCreatePayload.Subscribers(childComplexity), true

	case "SubscriberConnection.edges":
		if e.complexity.SubscriberConnection.Edges == nil {
			break
		}

		return e.complexity.SubscriberConnection.Edges(childComplexity), true

	case "SubscriberConnection.pageInfo":
		if e.complexity.SubscriberConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubscriberConnection.PageInfo(childComplexity), true

	case "SubscriberConnection.totalCount":
		if e.complexity.SubscriberConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubscriberConnection.TotalCount(childComplexity), true

	case "SubscriberCreatePayload.subscriber":
		if e.complexity.SubscriberCreatePayload.Subscriber == nil {
			break
		}

		return e.complexity.SubscriberCreatePayload.Subscriber(childComplexity), true

	case "SubscriberDeletePayload.email":
		if e.complexity.SubscriberDeletePayload.Email == nil {
			break
		}

		return e.complexity.SubscriberDeletePayload.Email(childComplexity), true

	case "SubscriberEdge.cursor":
		if e.complexity.SubscriberEdge.Cursor == nil {
			break
		}

		return e.complexity.SubscriberEdge.Cursor(childComplexity), true

	case "SubscriberEdge.node":
		if e.complexity.SubscriberEdge.Node == nil {
			break
		}

		return e.complexity.SubscriberEdge.Node(childComplexity), true

	case "SubscriberSearchResult.subscribers":
		if e.complexity.SubscriberSearchResult.Subscribers == nil {
			break
		}

		return e.complexity.SubscriberSearchResult.Subscribers(childComplexity), true

	case "SubscriberUpdatePayload.subscriber":
		if e.complexity.SubscriberUpdatePayload.Subscriber == nil {
			break
		}

		return e.complexity.SubscriberUpdatePayload.Subscriber(childComplexity), true

	case "TFASetting.createdAt":
		if e.complexity.TFASetting.CreatedAt == nil {
			break
		}

		return e.complexity.TFASetting.CreatedAt(childComplexity), true

	case "TFASetting.createdBy":
		if e.complexity.TFASetting.CreatedBy == nil {
			break
		}

		return e.complexity.TFASetting.CreatedBy(childComplexity), true

	case "TFASetting.deletedAt":
		if e.complexity.TFASetting.DeletedAt == nil {
			break
		}

		return e.complexity.TFASetting.DeletedAt(childComplexity), true

	case "TFASetting.deletedBy":
		if e.complexity.TFASetting.DeletedBy == nil {
			break
		}

		return e.complexity.TFASetting.DeletedBy(childComplexity), true

	case "TFASetting.id":
		if e.complexity.TFASetting.ID == nil {
			break
		}

		return e.complexity.TFASetting.ID(childComplexity), true

	case "TFASetting.owner":
		if e.complexity.TFASetting.Owner == nil {
			break
		}

		return e.complexity.TFASetting.Owner(childComplexity), true

	case "TFASetting.recoveryCodes":
		if e.complexity.TFASetting.RecoveryCodes == nil {
			break
		}

		return e.complexity.TFASetting.RecoveryCodes(childComplexity), true

	case "TFASetting.tags":
		if e.complexity.TFASetting.Tags == nil {
			break
		}

		return e.complexity.TFASetting.Tags(childComplexity), true

	case "TFASetting.tfaSecret":
		if e.complexity.TFASetting.TfaSecret == nil {
			break
		}

		return e.complexity.TFASetting.TfaSecret(childComplexity), true

	case "TFASetting.totpAllowed":
		if e.complexity.TFASetting.TotpAllowed == nil {
			break
		}

		return e.complexity.TFASetting.TotpAllowed(childComplexity), true

	case "TFASetting.updatedAt":
		if e.complexity.TFASetting.UpdatedAt == nil {
			break
		}

		return e.complexity.TFASetting.UpdatedAt(childComplexity), true

	case "TFASetting.updatedBy":
		if e.complexity.TFASetting.UpdatedBy == nil {
			break
		}

		return e.complexity.TFASetting.UpdatedBy(childComplexity), true

	case "TFASetting.verified":
		if e.complexity.TFASetting.Verified == nil {
			break
		}

		return e.complexity.TFASetting.Verified(childComplexity), true

	case "TFASettingConnection.edges":
		if e.complexity.TFASettingConnection.Edges == nil {
			break
		}

		return e.complexity.TFASettingConnection.Edges(childComplexity), true

	case "TFASettingConnection.pageInfo":
		if e.complexity.TFASettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.TFASettingConnection.PageInfo(childComplexity), true

	case "TFASettingConnection.totalCount":
		if e.complexity.TFASettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.TFASettingConnection.TotalCount(childComplexity), true

	case "TFASettingCreatePayload.tfaSetting":
		if e.complexity.TFASettingCreatePayload.TfaSetting == nil {
			break
		}

		return e.complexity.TFASettingCreatePayload.TfaSetting(childComplexity), true

	case "TFASettingEdge.cursor":
		if e.complexity.TFASettingEdge.Cursor == nil {
			break
		}

		return e.complexity.TFASettingEdge.Cursor(childComplexity), true

	case "TFASettingEdge.node":
		if e.complexity.TFASettingEdge.Node == nil {
			break
		}

		return e.complexity.TFASettingEdge.Node(childComplexity), true

	case "TFASettingSearchResult.tFASettings":
		if e.complexity.TFASettingSearchResult.TFASettings == nil {
			break
		}

		return e.complexity.TFASettingSearchResult.TFASettings(childComplexity), true

	case "TFASettingUpdatePayload.tfaSetting":
		if e.complexity.TFASettingUpdatePayload.TfaSetting == nil {
			break
		}

		return e.complexity.TFASettingUpdatePayload.TfaSetting(childComplexity), true

	case "Task.assignee":
		if e.complexity.Task.Assignee == nil {
			break
		}

		return e.complexity.Task.Assignee(childComplexity), true

	case "Task.assigner":
		if e.complexity.Task.Assigner == nil {
			break
		}

		return e.complexity.Task.Assigner(childComplexity), true

	case "Task.completed":
		if e.complexity.Task.Completed == nil {
			break
		}

		return e.complexity.Task.Completed(childComplexity), true

	case "Task.control":
		if e.complexity.Task.Control == nil {
			break
		}

		return e.complexity.Task.Control(childComplexity), true

	case "Task.controlObjective":
		if e.complexity.Task.ControlObjective == nil {
			break
		}

		return e.complexity.Task.ControlObjective(childComplexity), true

	case "Task.createdAt":
		if e.complexity.Task.CreatedAt == nil {
			break
		}

		return e.complexity.Task.CreatedAt(childComplexity), true

	case "Task.createdBy":
		if e.complexity.Task.CreatedBy == nil {
			break
		}

		return e.complexity.Task.CreatedBy(childComplexity), true

	case "Task.deletedAt":
		if e.complexity.Task.DeletedAt == nil {
			break
		}

		return e.complexity.Task.DeletedAt(childComplexity), true

	case "Task.deletedBy":
		if e.complexity.Task.DeletedBy == nil {
			break
		}

		return e.complexity.Task.DeletedBy(childComplexity), true

	case "Task.description":
		if e.complexity.Task.Description == nil {
			break
		}

		return e.complexity.Task.Description(childComplexity), true

	case "Task.details":
		if e.complexity.Task.Details == nil {
			break
		}

		return e.complexity.Task.Details(childComplexity), true

	case "Task.due":
		if e.complexity.Task.Due == nil {
			break
		}

		return e.complexity.Task.Due(childComplexity), true

	case "Task.group":
		if e.complexity.Task.Group == nil {
			break
		}

		return e.complexity.Task.Group(childComplexity), true

	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true

	case "Task.internalPolicy":
		if e.complexity.Task.InternalPolicy == nil {
			break
		}

		return e.complexity.Task.InternalPolicy(childComplexity), true

	case "Task.organization":
		if e.complexity.Task.Organization == nil {
			break
		}

		return e.complexity.Task.Organization(childComplexity), true

	case "Task.procedure":
		if e.complexity.Task.Procedure == nil {
			break
		}

		return e.complexity.Task.Procedure(childComplexity), true

	case "Task.program":
		if e.complexity.Task.Program == nil {
			break
		}

		return e.complexity.Task.Program(childComplexity), true

	case "Task.status":
		if e.complexity.Task.Status == nil {
			break
		}

		return e.complexity.Task.Status(childComplexity), true

	case "Task.subcontrol":
		if e.complexity.Task.Subcontrol == nil {
			break
		}

		return e.complexity.Task.Subcontrol(childComplexity), true

	case "Task.tags":
		if e.complexity.Task.Tags == nil {
			break
		}

		return e.complexity.Task.Tags(childComplexity), true

	case "Task.title":
		if e.complexity.Task.Title == nil {
			break
		}

		return e.complexity.Task.Title(childComplexity), true

	case "Task.updatedAt":
		if e.complexity.Task.UpdatedAt == nil {
			break
		}

		return e.complexity.Task.UpdatedAt(childComplexity), true

	case "Task.updatedBy":
		if e.complexity.Task.UpdatedBy == nil {
			break
		}

		return e.complexity.Task.UpdatedBy(childComplexity), true

	case "TaskBulkCreatePayload.tasks":
		if e.complexity.TaskBulkCreatePayload.Tasks == nil {
			break
		}

		return e.complexity.TaskBulkCreatePayload.Tasks(childComplexity), true

	case "TaskConnection.edges":
		if e.complexity.TaskConnection.Edges == nil {
			break
		}

		return e.complexity.TaskConnection.Edges(childComplexity), true

	case "TaskConnection.pageInfo":
		if e.complexity.TaskConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskConnection.PageInfo(childComplexity), true

	case "TaskConnection.totalCount":
		if e.complexity.TaskConnection.TotalCount == nil {
			break
		}

		return e.complexity.TaskConnection.TotalCount(childComplexity), true

	case "TaskCreatePayload.task":
		if e.complexity.TaskCreatePayload.Task == nil {
			break
		}

		return e.complexity.TaskCreatePayload.Task(childComplexity), true

	case "TaskDeletePayload.deletedID":
		if e.complexity.TaskDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TaskDeletePayload.DeletedID(childComplexity), true

	case "TaskEdge.cursor":
		if e.complexity.TaskEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskEdge.Cursor(childComplexity), true

	case "TaskEdge.node":
		if e.complexity.TaskEdge.Node == nil {
			break
		}

		return e.complexity.TaskEdge.Node(childComplexity), true

	case "TaskHistory.completed":
		if e.complexity.TaskHistory.Completed == nil {
			break
		}

		return e.complexity.TaskHistory.Completed(childComplexity), true

	case "TaskHistory.createdAt":
		if e.complexity.TaskHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TaskHistory.CreatedAt(childComplexity), true

	case "TaskHistory.createdBy":
		if e.complexity.TaskHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TaskHistory.CreatedBy(childComplexity), true

	case "TaskHistory.deletedAt":
		if e.complexity.TaskHistory.DeletedAt == nil {
			break
		}

		return e.complexity.TaskHistory.DeletedAt(childComplexity), true

	case "TaskHistory.deletedBy":
		if e.complexity.TaskHistory.DeletedBy == nil {
			break
		}

		return e.complexity.TaskHistory.DeletedBy(childComplexity), true

	case "TaskHistory.description":
		if e.complexity.TaskHistory.Description == nil {
			break
		}

		return e.complexity.TaskHistory.Description(childComplexity), true

	case "TaskHistory.details":
		if e.complexity.TaskHistory.Details == nil {
			break
		}

		return e.complexity.TaskHistory.Details(childComplexity), true

	case "TaskHistory.due":
		if e.complexity.TaskHistory.Due == nil {
			break
		}

		return e.complexity.TaskHistory.Due(childComplexity), true

	case "TaskHistory.historyTime":
		if e.complexity.TaskHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TaskHistory.HistoryTime(childComplexity), true

	case "TaskHistory.id":
		if e.complexity.TaskHistory.ID == nil {
			break
		}

		return e.complexity.TaskHistory.ID(childComplexity), true

	case "TaskHistory.operation":
		if e.complexity.TaskHistory.Operation == nil {
			break
		}

		return e.complexity.TaskHistory.Operation(childComplexity), true

	case "TaskHistory.ref":
		if e.complexity.TaskHistory.Ref == nil {
			break
		}

		return e.complexity.TaskHistory.Ref(childComplexity), true

	case "TaskHistory.status":
		if e.complexity.TaskHistory.Status == nil {
			break
		}

		return e.complexity.TaskHistory.Status(childComplexity), true

	case "TaskHistory.tags":
		if e.complexity.TaskHistory.Tags == nil {
			break
		}

		return e.complexity.TaskHistory.Tags(childComplexity), true

	case "TaskHistory.title":
		if e.complexity.TaskHistory.Title == nil {
			break
		}

		return e.complexity.TaskHistory.Title(childComplexity), true

	case "TaskHistory.updatedAt":
		if e.complexity.TaskHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TaskHistory.UpdatedAt(childComplexity), true

	case "TaskHistory.updatedBy":
		if e.complexity.TaskHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TaskHistory.UpdatedBy(childComplexity), true

	case "TaskHistoryConnection.edges":
		if e.complexity.TaskHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TaskHistoryConnection.Edges(childComplexity), true

	case "TaskHistoryConnection.pageInfo":
		if e.complexity.TaskHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskHistoryConnection.PageInfo(childComplexity), true

	case "TaskHistoryConnection.totalCount":
		if e.complexity.TaskHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TaskHistoryConnection.TotalCount(childComplexity), true

	case "TaskHistoryEdge.cursor":
		if e.complexity.TaskHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskHistoryEdge.Cursor(childComplexity), true

	case "TaskHistoryEdge.node":
		if e.complexity.TaskHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TaskHistoryEdge.Node(childComplexity), true

	case "TaskSearchResult.tasks":
		if e.complexity.TaskSearchResult.Tasks == nil {
			break
		}

		return e.complexity.TaskSearchResult.Tasks(childComplexity), true

	case "TaskUpdatePayload.task":
		if e.complexity.TaskUpdatePayload.Task == nil {
			break
		}

		return e.complexity.TaskUpdatePayload.Task(childComplexity), true

	case "Template.createdAt":
		if e.complexity.Template.CreatedAt == nil {
			break
		}

		return e.complexity.Template.CreatedAt(childComplexity), true

	case "Template.createdBy":
		if e.complexity.Template.CreatedBy == nil {
			break
		}

		return e.complexity.Template.CreatedBy(childComplexity), true

	case "Template.deletedAt":
		if e.complexity.Template.DeletedAt == nil {
			break
		}

		return e.complexity.Template.DeletedAt(childComplexity), true

	case "Template.deletedBy":
		if e.complexity.Template.DeletedBy == nil {
			break
		}

		return e.complexity.Template.DeletedBy(childComplexity), true

	case "Template.description":
		if e.complexity.Template.Description == nil {
			break
		}

		return e.complexity.Template.Description(childComplexity), true

	case "Template.documents":
		if e.complexity.Template.Documents == nil {
			break
		}

		return e.complexity.Template.Documents(childComplexity), true

	case "Template.files":
		if e.complexity.Template.Files == nil {
			break
		}

		return e.complexity.Template.Files(childComplexity), true

	case "Template.id":
		if e.complexity.Template.ID == nil {
			break
		}

		return e.complexity.Template.ID(childComplexity), true

	case "Template.jsonconfig":
		if e.complexity.Template.Jsonconfig == nil {
			break
		}

		return e.complexity.Template.Jsonconfig(childComplexity), true

	case "Template.name":
		if e.complexity.Template.Name == nil {
			break
		}

		return e.complexity.Template.Name(childComplexity), true

	case "Template.owner":
		if e.complexity.Template.Owner == nil {
			break
		}

		return e.complexity.Template.Owner(childComplexity), true

	case "Template.ownerID":
		if e.complexity.Template.OwnerID == nil {
			break
		}

		return e.complexity.Template.OwnerID(childComplexity), true

	case "Template.tags":
		if e.complexity.Template.Tags == nil {
			break
		}

		return e.complexity.Template.Tags(childComplexity), true

	case "Template.templateType":
		if e.complexity.Template.TemplateType == nil {
			break
		}

		return e.complexity.Template.TemplateType(childComplexity), true

	case "Template.uischema":
		if e.complexity.Template.Uischema == nil {
			break
		}

		return e.complexity.Template.Uischema(childComplexity), true

	case "Template.updatedAt":
		if e.complexity.Template.UpdatedAt == nil {
			break
		}

		return e.complexity.Template.UpdatedAt(childComplexity), true

	case "Template.updatedBy":
		if e.complexity.Template.UpdatedBy == nil {
			break
		}

		return e.complexity.Template.UpdatedBy(childComplexity), true

	case "TemplateBulkCreatePayload.templates":
		if e.complexity.TemplateBulkCreatePayload.Templates == nil {
			break
		}

		return e.complexity.TemplateBulkCreatePayload.Templates(childComplexity), true

	case "TemplateConnection.edges":
		if e.complexity.TemplateConnection.Edges == nil {
			break
		}

		return e.complexity.TemplateConnection.Edges(childComplexity), true

	case "TemplateConnection.pageInfo":
		if e.complexity.TemplateConnection.PageInfo == nil {
			break
		}

		return e.complexity.TemplateConnection.PageInfo(childComplexity), true

	case "TemplateConnection.totalCount":
		if e.complexity.TemplateConnection.TotalCount == nil {
			break
		}

		return e.complexity.TemplateConnection.TotalCount(childComplexity), true

	case "TemplateCreatePayload.template":
		if e.complexity.TemplateCreatePayload.Template == nil {
			break
		}

		return e.complexity.TemplateCreatePayload.Template(childComplexity), true

	case "TemplateDeletePayload.deletedID":
		if e.complexity.TemplateDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.TemplateDeletePayload.DeletedID(childComplexity), true

	case "TemplateEdge.cursor":
		if e.complexity.TemplateEdge.Cursor == nil {
			break
		}

		return e.complexity.TemplateEdge.Cursor(childComplexity), true

	case "TemplateEdge.node":
		if e.complexity.TemplateEdge.Node == nil {
			break
		}

		return e.complexity.TemplateEdge.Node(childComplexity), true

	case "TemplateHistory.createdAt":
		if e.complexity.TemplateHistory.CreatedAt == nil {
			break
		}

		return e.complexity.TemplateHistory.CreatedAt(childComplexity), true

	case "TemplateHistory.createdBy":
		if e.complexity.TemplateHistory.CreatedBy == nil {
			break
		}

		return e.complexity.TemplateHistory.CreatedBy(childComplexity), true

	case "TemplateHistory.deletedAt":
		if e.complexity.TemplateHistory.DeletedAt == nil {
			break
		}

		return e.complexity.TemplateHistory.DeletedAt(childComplexity), true

	case "TemplateHistory.deletedBy":
		if e.complexity.TemplateHistory.DeletedBy == nil {
			break
		}

		return e.complexity.TemplateHistory.DeletedBy(childComplexity), true

	case "TemplateHistory.description":
		if e.complexity.TemplateHistory.Description == nil {
			break
		}

		return e.complexity.TemplateHistory.Description(childComplexity), true

	case "TemplateHistory.historyTime":
		if e.complexity.TemplateHistory.HistoryTime == nil {
			break
		}

		return e.complexity.TemplateHistory.HistoryTime(childComplexity), true

	case "TemplateHistory.id":
		if e.complexity.TemplateHistory.ID == nil {
			break
		}

		return e.complexity.TemplateHistory.ID(childComplexity), true

	case "TemplateHistory.jsonconfig":
		if e.complexity.TemplateHistory.Jsonconfig == nil {
			break
		}

		return e.complexity.TemplateHistory.Jsonconfig(childComplexity), true

	case "TemplateHistory.name":
		if e.complexity.TemplateHistory.Name == nil {
			break
		}

		return e.complexity.TemplateHistory.Name(childComplexity), true

	case "TemplateHistory.operation":
		if e.complexity.TemplateHistory.Operation == nil {
			break
		}

		return e.complexity.TemplateHistory.Operation(childComplexity), true

	case "TemplateHistory.ownerID":
		if e.complexity.TemplateHistory.OwnerID == nil {
			break
		}

		return e.complexity.TemplateHistory.OwnerID(childComplexity), true

	case "TemplateHistory.ref":
		if e.complexity.TemplateHistory.Ref == nil {
			break
		}

		return e.complexity.TemplateHistory.Ref(childComplexity), true

	case "TemplateHistory.tags":
		if e.complexity.TemplateHistory.Tags == nil {
			break
		}

		return e.complexity.TemplateHistory.Tags(childComplexity), true

	case "TemplateHistory.templateType":
		if e.complexity.TemplateHistory.TemplateType == nil {
			break
		}

		return e.complexity.TemplateHistory.TemplateType(childComplexity), true

	case "TemplateHistory.uischema":
		if e.complexity.TemplateHistory.Uischema == nil {
			break
		}

		return e.complexity.TemplateHistory.Uischema(childComplexity), true

	case "TemplateHistory.updatedAt":
		if e.complexity.TemplateHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.TemplateHistory.UpdatedAt(childComplexity), true

	case "TemplateHistory.updatedBy":
		if e.complexity.TemplateHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.TemplateHistory.UpdatedBy(childComplexity), true

	case "TemplateHistoryConnection.edges":
		if e.complexity.TemplateHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.TemplateHistoryConnection.Edges(childComplexity), true

	case "TemplateHistoryConnection.pageInfo":
		if e.complexity.TemplateHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.TemplateHistoryConnection.PageInfo(childComplexity), true

	case "TemplateHistoryConnection.totalCount":
		if e.complexity.TemplateHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.TemplateHistoryConnection.TotalCount(childComplexity), true

	case "TemplateHistoryEdge.cursor":
		if e.complexity.TemplateHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.TemplateHistoryEdge.Cursor(childComplexity), true

	case "TemplateHistoryEdge.node":
		if e.complexity.TemplateHistoryEdge.Node == nil {
			break
		}

		return e.complexity.TemplateHistoryEdge.Node(childComplexity), true

	case "TemplateSearchResult.templates":
		if e.complexity.TemplateSearchResult.Templates == nil {
			break
		}

		return e.complexity.TemplateSearchResult.Templates(childComplexity), true

	case "TemplateUpdatePayload.template":
		if e.complexity.TemplateUpdatePayload.Template == nil {
			break
		}

		return e.complexity.TemplateUpdatePayload.Template(childComplexity), true

	case "User.actionPlans":
		if e.complexity.User.ActionPlans == nil {
			break
		}

		return e.complexity.User.ActionPlans(childComplexity), true

	case "User.assigneeTasks":
		if e.complexity.User.AssigneeTasks == nil {
			break
		}

		return e.complexity.User.AssigneeTasks(childComplexity), true

	case "User.assignerTasks":
		if e.complexity.User.AssignerTasks == nil {
			break
		}

		return e.complexity.User.AssignerTasks(childComplexity), true

	case "User.authProvider":
		if e.complexity.User.AuthProvider == nil {
			break
		}

		return e.complexity.User.AuthProvider(childComplexity), true

	case "User.avatarFile":
		if e.complexity.User.AvatarFile == nil {
			break
		}

		return e.complexity.User.AvatarFile(childComplexity), true

	case "User.avatarLocalFileID":
		if e.complexity.User.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.User.AvatarLocalFileID(childComplexity), true

	case "User.avatarRemoteURL":
		if e.complexity.User.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.User.AvatarRemoteURL(childComplexity), true

	case "User.avatarUpdatedAt":
		if e.complexity.User.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.User.AvatarUpdatedAt(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.createdBy":
		if e.complexity.User.CreatedBy == nil {
			break
		}

		return e.complexity.User.CreatedBy(childComplexity), true

	case "User.deletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.deletedBy":
		if e.complexity.User.DeletedBy == nil {
			break
		}

		return e.complexity.User.DeletedBy(childComplexity), true

	case "User.displayName":
		if e.complexity.User.DisplayName == nil {
			break
		}

		return e.complexity.User.DisplayName(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.events":
		if e.complexity.User.Events == nil {
			break
		}

		return e.complexity.User.Events(childComplexity), true

	case "User.files":
		if e.complexity.User.Files == nil {
			break
		}

		return e.complexity.User.Files(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.groupMemberships":
		if e.complexity.User.GroupMemberships == nil {
			break
		}

		return e.complexity.User.GroupMemberships(childComplexity), true

	case "User.groups":
		if e.complexity.User.Groups == nil {
			break
		}

		return e.complexity.User.Groups(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.lastSeen":
		if e.complexity.User.LastSeen == nil {
			break
		}

		return e.complexity.User.LastSeen(childComplexity), true

	case "User.orgMemberships":
		if e.complexity.User.OrgMemberships == nil {
			break
		}

		return e.complexity.User.OrgMemberships(childComplexity), true

	case "User.organizations":
		if e.complexity.User.Organizations == nil {
			break
		}

		return e.complexity.User.Organizations(childComplexity), true

	case "User.personalAccessTokens":
		if e.complexity.User.PersonalAccessTokens == nil {
			break
		}

		return e.complexity.User.PersonalAccessTokens(childComplexity), true

	case "User.programMemberships":
		if e.complexity.User.ProgramMemberships == nil {
			break
		}

		return e.complexity.User.ProgramMemberships(childComplexity), true

	case "User.programs":
		if e.complexity.User.Programs == nil {
			break
		}

		return e.complexity.User.Programs(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.setting":
		if e.complexity.User.Setting == nil {
			break
		}

		return e.complexity.User.Setting(childComplexity), true

	case "User.sub":
		if e.complexity.User.Sub == nil {
			break
		}

		return e.complexity.User.Sub(childComplexity), true

	case "User.subcontrols":
		if e.complexity.User.Subcontrols == nil {
			break
		}

		return e.complexity.User.Subcontrols(childComplexity), true

	case "User.tags":
		if e.complexity.User.Tags == nil {
			break
		}

		return e.complexity.User.Tags(childComplexity), true

	case "User.tfaSettings":
		if e.complexity.User.TfaSettings == nil {
			break
		}

		return e.complexity.User.TfaSettings(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.updatedBy":
		if e.complexity.User.UpdatedBy == nil {
			break
		}

		return e.complexity.User.UpdatedBy(childComplexity), true

	case "UserBulkCreatePayload.users":
		if e.complexity.UserBulkCreatePayload.Users == nil {
			break
		}

		return e.complexity.UserBulkCreatePayload.Users(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserCreatePayload.user":
		if e.complexity.UserCreatePayload.User == nil {
			break
		}

		return e.complexity.UserCreatePayload.User(childComplexity), true

	case "UserDeletePayload.deletedID":
		if e.complexity.UserDeletePayload.DeletedID == nil {
			break
		}

		return e.complexity.UserDeletePayload.DeletedID(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserHistory.authProvider":
		if e.complexity.UserHistory.AuthProvider == nil {
			break
		}

		return e.complexity.UserHistory.AuthProvider(childComplexity), true

	case "UserHistory.avatarLocalFileID":
		if e.complexity.UserHistory.AvatarLocalFileID == nil {
			break
		}

		return e.complexity.UserHistory.AvatarLocalFileID(childComplexity), true

	case "UserHistory.avatarRemoteURL":
		if e.complexity.UserHistory.AvatarRemoteURL == nil {
			break
		}

		return e.complexity.UserHistory.AvatarRemoteURL(childComplexity), true

	case "UserHistory.avatarUpdatedAt":
		if e.complexity.UserHistory.AvatarUpdatedAt == nil {
			break
		}

		return e.complexity.UserHistory.AvatarUpdatedAt(childComplexity), true

	case "UserHistory.createdAt":
		if e.complexity.UserHistory.CreatedAt == nil {
			break
		}

		return e.complexity.UserHistory.CreatedAt(childComplexity), true

	case "UserHistory.createdBy":
		if e.complexity.UserHistory.CreatedBy == nil {
			break
		}

		return e.complexity.UserHistory.CreatedBy(childComplexity), true

	case "UserHistory.deletedAt":
		if e.complexity.UserHistory.DeletedAt == nil {
			break
		}

		return e.complexity.UserHistory.DeletedAt(childComplexity), true

	case "UserHistory.deletedBy":
		if e.complexity.UserHistory.DeletedBy == nil {
			break
		}

		return e.complexity.UserHistory.DeletedBy(childComplexity), true

	case "UserHistory.displayName":
		if e.complexity.UserHistory.DisplayName == nil {
			break
		}

		return e.complexity.UserHistory.DisplayName(childComplexity), true

	case "UserHistory.email":
		if e.complexity.UserHistory.Email == nil {
			break
		}

		return e.complexity.UserHistory.Email(childComplexity), true

	case "UserHistory.firstName":
		if e.complexity.UserHistory.FirstName == nil {
			break
		}

		return e.complexity.UserHistory.FirstName(childComplexity), true

	case "UserHistory.historyTime":
		if e.complexity.UserHistory.HistoryTime == nil {
			break
		}

		return e.complexity.UserHistory.HistoryTime(childComplexity), true

	case "UserHistory.id":
		if e.complexity.UserHistory.ID == nil {
			break
		}

		return e.complexity.UserHistory.ID(childComplexity), true

	case "UserHistory.lastName":
		if e.complexity.UserHistory.LastName == nil {
			break
		}

		return e.complexity.UserHistory.LastName(childComplexity), true

	case "UserHistory.lastSeen":
		if e.complexity.UserHistory.LastSeen == nil {
			break
		}

		return e.complexity.UserHistory.LastSeen(childComplexity), true

	case "UserHistory.operation":
		if e.complexity.UserHistory.Operation == nil {
			break
		}

		return e.complexity.UserHistory.Operation(childComplexity), true

	case "UserHistory.ref":
		if e.complexity.UserHistory.Ref == nil {
			break
		}

		return e.complexity.UserHistory.Ref(childComplexity), true

	case "UserHistory.role":
		if e.complexity.UserHistory.Role == nil {
			break
		}

		return e.complexity.UserHistory.Role(childComplexity), true

	case "UserHistory.sub":
		if e.complexity.UserHistory.Sub == nil {
			break
		}

		return e.complexity.UserHistory.Sub(childComplexity), true

	case "UserHistory.tags":
		if e.complexity.UserHistory.Tags == nil {
			break
		}

		return e.complexity.UserHistory.Tags(childComplexity), true

	case "UserHistory.updatedAt":
		if e.complexity.UserHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.UserHistory.UpdatedAt(childComplexity), true

	case "UserHistory.updatedBy":
		if e.complexity.UserHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.UserHistory.UpdatedBy(childComplexity), true

	case "UserHistoryConnection.edges":
		if e.complexity.UserHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.UserHistoryConnection.Edges(childComplexity), true

	case "UserHistoryConnection.pageInfo":
		if e.complexity.UserHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserHistoryConnection.PageInfo(childComplexity), true

	case "UserHistoryConnection.totalCount":
		if e.complexity.UserHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserHistoryConnection.TotalCount(childComplexity), true

	case "UserHistoryEdge.cursor":
		if e.complexity.UserHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.UserHistoryEdge.Cursor(childComplexity), true

	case "UserHistoryEdge.node":
		if e.complexity.UserHistoryEdge.Node == nil {
			break
		}

		return e.complexity.UserHistoryEdge.Node(childComplexity), true

	case "UserSearchResult.users":
		if e.complexity.UserSearchResult.Users == nil {
			break
		}

		return e.complexity.UserSearchResult.Users(childComplexity), true

	case "UserSetting.createdAt":
		if e.complexity.UserSetting.CreatedAt == nil {
			break
		}

		return e.complexity.UserSetting.CreatedAt(childComplexity), true

	case "UserSetting.createdBy":
		if e.complexity.UserSetting.CreatedBy == nil {
			break
		}

		return e.complexity.UserSetting.CreatedBy(childComplexity), true

	case "UserSetting.defaultOrg":
		if e.complexity.UserSetting.DefaultOrg == nil {
			break
		}

		return e.complexity.UserSetting.DefaultOrg(childComplexity), true

	case "UserSetting.deletedAt":
		if e.complexity.UserSetting.DeletedAt == nil {
			break
		}

		return e.complexity.UserSetting.DeletedAt(childComplexity), true

	case "UserSetting.deletedBy":
		if e.complexity.UserSetting.DeletedBy == nil {
			break
		}

		return e.complexity.UserSetting.DeletedBy(childComplexity), true

	case "UserSetting.emailConfirmed":
		if e.complexity.UserSetting.EmailConfirmed == nil {
			break
		}

		return e.complexity.UserSetting.EmailConfirmed(childComplexity), true

	case "UserSetting.files":
		if e.complexity.UserSetting.Files == nil {
			break
		}

		return e.complexity.UserSetting.Files(childComplexity), true

	case "UserSetting.id":
		if e.complexity.UserSetting.ID == nil {
			break
		}

		return e.complexity.UserSetting.ID(childComplexity), true

	case "UserSetting.isTfaEnabled":
		if e.complexity.UserSetting.IsTfaEnabled == nil {
			break
		}

		return e.complexity.UserSetting.IsTfaEnabled(childComplexity), true

	case "UserSetting.isWebauthnAllowed":
		if e.complexity.UserSetting.IsWebauthnAllowed == nil {
			break
		}

		return e.complexity.UserSetting.IsWebauthnAllowed(childComplexity), true

	case "UserSetting.locked":
		if e.complexity.UserSetting.Locked == nil {
			break
		}

		return e.complexity.UserSetting.Locked(childComplexity), true

	case "UserSetting.silencedAt":
		if e.complexity.UserSetting.SilencedAt == nil {
			break
		}

		return e.complexity.UserSetting.SilencedAt(childComplexity), true

	case "UserSetting.status":
		if e.complexity.UserSetting.Status == nil {
			break
		}

		return e.complexity.UserSetting.Status(childComplexity), true

	case "UserSetting.suspendedAt":
		if e.complexity.UserSetting.SuspendedAt == nil {
			break
		}

		return e.complexity.UserSetting.SuspendedAt(childComplexity), true

	case "UserSetting.tags":
		if e.complexity.UserSetting.Tags == nil {
			break
		}

		return e.complexity.UserSetting.Tags(childComplexity), true

	case "UserSetting.updatedAt":
		if e.complexity.UserSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.UserSetting.UpdatedAt(childComplexity), true

	case "UserSetting.updatedBy":
		if e.complexity.UserSetting.UpdatedBy == nil {
			break
		}

		return e.complexity.UserSetting.UpdatedBy(childComplexity), true

	case "UserSetting.user":
		if e.complexity.UserSetting.User == nil {
			break
		}

		return e.complexity.UserSetting.User(childComplexity), true

	case "UserSetting.userID":
		if e.complexity.UserSetting.UserID == nil {
			break
		}

		return e.complexity.UserSetting.UserID(childComplexity), true

	case "UserSettingBulkCreatePayload.userSettings":
		if e.complexity.UserSettingBulkCreatePayload.UserSettings == nil {
			break
		}

		return e.complexity.UserSettingBulkCreatePayload.UserSettings(childComplexity), true

	case "UserSettingConnection.edges":
		if e.complexity.UserSettingConnection.Edges == nil {
			break
		}

		return e.complexity.UserSettingConnection.Edges(childComplexity), true

	case "UserSettingConnection.pageInfo":
		if e.complexity.UserSettingConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserSettingConnection.PageInfo(childComplexity), true

	case "UserSettingConnection.totalCount":
		if e.complexity.UserSettingConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserSettingConnection.TotalCount(childComplexity), true

	case "UserSettingCreatePayload.userSetting":
		if e.complexity.UserSettingCreatePayload.UserSetting == nil {
			break
		}

		return e.complexity.UserSettingCreatePayload.UserSetting(childComplexity), true

	case "UserSettingEdge.cursor":
		if e.complexity.UserSettingEdge.Cursor == nil {
			break
		}

		return e.complexity.UserSettingEdge.Cursor(childComplexity), true

	case "UserSettingEdge.node":
		if e.complexity.UserSettingEdge.Node == nil {
			break
		}

		return e.complexity.UserSettingEdge.Node(childComplexity), true

	case "UserSettingHistory.createdAt":
		if e.complexity.UserSettingHistory.CreatedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.CreatedAt(childComplexity), true

	case "UserSettingHistory.createdBy":
		if e.complexity.UserSettingHistory.CreatedBy == nil {
			break
		}

		return e.complexity.UserSettingHistory.CreatedBy(childComplexity), true

	case "UserSettingHistory.deletedAt":
		if e.complexity.UserSettingHistory.DeletedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.DeletedAt(childComplexity), true

	case "UserSettingHistory.deletedBy":
		if e.complexity.UserSettingHistory.DeletedBy == nil {
			break
		}

		return e.complexity.UserSettingHistory.DeletedBy(childComplexity), true

	case "UserSettingHistory.emailConfirmed":
		if e.complexity.UserSettingHistory.EmailConfirmed == nil {
			break
		}

		return e.complexity.UserSettingHistory.EmailConfirmed(childComplexity), true

	case "UserSettingHistory.historyTime":
		if e.complexity.UserSettingHistory.HistoryTime == nil {
			break
		}

		return e.complexity.UserSettingHistory.HistoryTime(childComplexity), true

	case "UserSettingHistory.id":
		if e.complexity.UserSettingHistory.ID == nil {
			break
		}

		return e.complexity.UserSettingHistory.ID(childComplexity), true

	case "UserSettingHistory.isTfaEnabled":
		if e.complexity.UserSettingHistory.IsTfaEnabled == nil {
			break
		}

		return e.complexity.UserSettingHistory.IsTfaEnabled(childComplexity), true

	case "UserSettingHistory.isWebauthnAllowed":
		if e.complexity.UserSettingHistory.IsWebauthnAllowed == nil {
			break
		}

		return e.complexity.UserSettingHistory.IsWebauthnAllowed(childComplexity), true

	case "UserSettingHistory.locked":
		if e.complexity.UserSettingHistory.Locked == nil {
			break
		}

		return e.complexity.UserSettingHistory.Locked(childComplexity), true

	case "UserSettingHistory.operation":
		if e.complexity.UserSettingHistory.Operation == nil {
			break
		}

		return e.complexity.UserSettingHistory.Operation(childComplexity), true

	case "UserSettingHistory.ref":
		if e.complexity.UserSettingHistory.Ref == nil {
			break
		}

		return e.complexity.UserSettingHistory.Ref(childComplexity), true

	case "UserSettingHistory.silencedAt":
		if e.complexity.UserSettingHistory.SilencedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.SilencedAt(childComplexity), true

	case "UserSettingHistory.status":
		if e.complexity.UserSettingHistory.Status == nil {
			break
		}

		return e.complexity.UserSettingHistory.Status(childComplexity), true

	case "UserSettingHistory.suspendedAt":
		if e.complexity.UserSettingHistory.SuspendedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.SuspendedAt(childComplexity), true

	case "UserSettingHistory.tags":
		if e.complexity.UserSettingHistory.Tags == nil {
			break
		}

		return e.complexity.UserSettingHistory.Tags(childComplexity), true

	case "UserSettingHistory.updatedAt":
		if e.complexity.UserSettingHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.UserSettingHistory.UpdatedAt(childComplexity), true

	case "UserSettingHistory.updatedBy":
		if e.complexity.UserSettingHistory.UpdatedBy == nil {
			break
		}

		return e.complexity.UserSettingHistory.UpdatedBy(childComplexity), true

	case "UserSettingHistory.userID":
		if e.complexity.UserSettingHistory.UserID == nil {
			break
		}

		return e.complexity.UserSettingHistory.UserID(childComplexity), true

	case "UserSettingHistoryConnection.edges":
		if e.complexity.UserSettingHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.UserSettingHistoryConnection.Edges(childComplexity), true

	case "UserSettingHistoryConnection.pageInfo":
		if e.complexity.UserSettingHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserSettingHistoryConnection.PageInfo(childComplexity), true

	case "UserSettingHistoryConnection.totalCount":
		if e.complexity.UserSettingHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserSettingHistoryConnection.TotalCount(childComplexity), true

	case "UserSettingHistoryEdge.cursor":
		if e.complexity.UserSettingHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.UserSettingHistoryEdge.Cursor(childComplexity), true

	case "UserSettingHistoryEdge.node":
		if e.complexity.UserSettingHistoryEdge.Node == nil {
			break
		}

		return e.complexity.UserSettingHistoryEdge.Node(childComplexity), true

	case "UserSettingSearchResult.userSettings":
		if e.complexity.UserSettingSearchResult.UserSettings == nil {
			break
		}

		return e.complexity.UserSettingSearchResult.UserSettings(childComplexity), true

	case "UserSettingUpdatePayload.userSetting":
		if e.complexity.UserSettingUpdatePayload.UserSetting == nil {
			break
		}

		return e.complexity.UserSettingUpdatePayload.UserSetting(childComplexity), true

	case "UserUpdatePayload.user":
		if e.complexity.UserUpdatePayload.User == nil {
			break
		}

		return e.complexity.UserUpdatePayload.User(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAPITokenWhereInput,
		ec.unmarshalInputActionPlanHistoryWhereInput,
		ec.unmarshalInputActionPlanWhereInput,
		ec.unmarshalInputAuditLogWhereInput,
		ec.unmarshalInputContactHistoryWhereInput,
		ec.unmarshalInputContactWhereInput,
		ec.unmarshalInputControlHistoryWhereInput,
		ec.unmarshalInputControlObjectiveHistoryWhereInput,
		ec.unmarshalInputControlObjectiveWhereInput,
		ec.unmarshalInputControlWhereInput,
		ec.unmarshalInputCreateAPITokenInput,
		ec.unmarshalInputCreateActionPlanInput,
		ec.unmarshalInputCreateContactInput,
		ec.unmarshalInputCreateControlInput,
		ec.unmarshalInputCreateControlObjectiveInput,
		ec.unmarshalInputCreateControlWithSubcontrolsInput,
		ec.unmarshalInputCreateDocumentDataInput,
		ec.unmarshalInputCreateEntityInput,
		ec.unmarshalInputCreateEntityTypeInput,
		ec.unmarshalInputCreateEventInput,
		ec.unmarshalInputCreateFileInput,
		ec.unmarshalInputCreateFullProgramInput,
		ec.unmarshalInputCreateGroupInput,
		ec.unmarshalInputCreateGroupMembershipInput,
		ec.unmarshalInputCreateGroupSettingInput,
		ec.unmarshalInputCreateHushInput,
		ec.unmarshalInputCreateIntegrationInput,
		ec.unmarshalInputCreateInternalPolicyInput,
		ec.unmarshalInputCreateInviteInput,
		ec.unmarshalInputCreateMemberWithProgramInput,
		ec.unmarshalInputCreateNarrativeInput,
		ec.unmarshalInputCreateNoteInput,
		ec.unmarshalInputCreateOrgMembershipInput,
		ec.unmarshalInputCreateOrganizationInput,
		ec.unmarshalInputCreateOrganizationSettingInput,
		ec.unmarshalInputCreatePersonalAccessTokenInput,
		ec.unmarshalInputCreateProcedureInput,
		ec.unmarshalInputCreateProgramInput,
		ec.unmarshalInputCreateProgramMembershipInput,
		ec.unmarshalInputCreateProgramWithMembersInput,
		ec.unmarshalInputCreateRiskInput,
		ec.unmarshalInputCreateStandardInput,
		ec.unmarshalInputCreateSubcontrolInput,
		ec.unmarshalInputCreateSubscriberInput,
		ec.unmarshalInputCreateTFASettingInput,
		ec.unmarshalInputCreateTaskInput,
		ec.unmarshalInputCreateTemplateInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateUserSettingInput,
		ec.unmarshalInputDocumentDataHistoryWhereInput,
		ec.unmarshalInputDocumentDataWhereInput,
		ec.unmarshalInputEntityHistoryOrder,
		ec.unmarshalInputEntityHistoryWhereInput,
		ec.unmarshalInputEntityOrder,
		ec.unmarshalInputEntityTypeHistoryOrder,
		ec.unmarshalInputEntityTypeHistoryWhereInput,
		ec.unmarshalInputEntityTypeOrder,
		ec.unmarshalInputEntityTypeWhereInput,
		ec.unmarshalInputEntityWhereInput,
		ec.unmarshalInputEventHistoryWhereInput,
		ec.unmarshalInputEventWhereInput,
		ec.unmarshalInputFileHistoryWhereInput,
		ec.unmarshalInputFileWhereInput,
		ec.unmarshalInputGroupHistoryOrder,
		ec.unmarshalInputGroupHistoryWhereInput,
		ec.unmarshalInputGroupMembershipHistoryWhereInput,
		ec.unmarshalInputGroupMembershipWhereInput,
		ec.unmarshalInputGroupOrder,
		ec.unmarshalInputGroupSettingHistoryWhereInput,
		ec.unmarshalInputGroupSettingWhereInput,
		ec.unmarshalInputGroupWhereInput,
		ec.unmarshalInputHushHistoryOrder,
		ec.unmarshalInputHushHistoryWhereInput,
		ec.unmarshalInputHushOrder,
		ec.unmarshalInputHushWhereInput,
		ec.unmarshalInputIntegrationHistoryOrder,
		ec.unmarshalInputIntegrationHistoryWhereInput,
		ec.unmarshalInputIntegrationOrder,
		ec.unmarshalInputIntegrationWhereInput,
		ec.unmarshalInputInternalPolicyHistoryWhereInput,
		ec.unmarshalInputInternalPolicyWhereInput,
		ec.unmarshalInputInviteWhereInput,
		ec.unmarshalInputNarrativeHistoryWhereInput,
		ec.unmarshalInputNarrativeWhereInput,
		ec.unmarshalInputNoteHistoryWhereInput,
		ec.unmarshalInputNoteWhereInput,
		ec.unmarshalInputOrgMembershipHistoryWhereInput,
		ec.unmarshalInputOrgMembershipWhereInput,
		ec.unmarshalInputOrgSubscriptionHistoryWhereInput,
		ec.unmarshalInputOrgSubscriptionWhereInput,
		ec.unmarshalInputOrganizationHistoryOrder,
		ec.unmarshalInputOrganizationHistoryWhereInput,
		ec.unmarshalInputOrganizationOrder,
		ec.unmarshalInputOrganizationSettingHistoryWhereInput,
		ec.unmarshalInputOrganizationSettingWhereInput,
		ec.unmarshalInputOrganizationWhereInput,
		ec.unmarshalInputPersonalAccessTokenWhereInput,
		ec.unmarshalInputProcedureHistoryWhereInput,
		ec.unmarshalInputProcedureWhereInput,
		ec.unmarshalInputProgramHistoryWhereInput,
		ec.unmarshalInputProgramMembershipHistoryWhereInput,
		ec.unmarshalInputProgramMembershipWhereInput,
		ec.unmarshalInputProgramWhereInput,
		ec.unmarshalInputRiskHistoryWhereInput,
		ec.unmarshalInputRiskWhereInput,
		ec.unmarshalInputStandardHistoryWhereInput,
		ec.unmarshalInputStandardWhereInput,
		ec.unmarshalInputSubcontrolHistoryWhereInput,
		ec.unmarshalInputSubcontrolWhereInput,
		ec.unmarshalInputSubscriberWhereInput,
		ec.unmarshalInputTFASettingWhereInput,
		ec.unmarshalInputTaskHistoryWhereInput,
		ec.unmarshalInputTaskWhereInput,
		ec.unmarshalInputTemplateHistoryOrder,
		ec.unmarshalInputTemplateHistoryWhereInput,
		ec.unmarshalInputTemplateOrder,
		ec.unmarshalInputTemplateWhereInput,
		ec.unmarshalInputUpdateAPITokenInput,
		ec.unmarshalInputUpdateActionPlanInput,
		ec.unmarshalInputUpdateContactInput,
		ec.unmarshalInputUpdateControlInput,
		ec.unmarshalInputUpdateControlObjectiveInput,
		ec.unmarshalInputUpdateDocumentDataInput,
		ec.unmarshalInputUpdateEntityInput,
		ec.unmarshalInputUpdateEntityTypeInput,
		ec.unmarshalInputUpdateEventInput,
		ec.unmarshalInputUpdateFileInput,
		ec.unmarshalInputUpdateGroupInput,
		ec.unmarshalInputUpdateGroupMembershipInput,
		ec.unmarshalInputUpdateGroupSettingInput,
		ec.unmarshalInputUpdateHushInput,
		ec.unmarshalInputUpdateIntegrationInput,
		ec.unmarshalInputUpdateInternalPolicyInput,
		ec.unmarshalInputUpdateInviteInput,
		ec.unmarshalInputUpdateNarrativeInput,
		ec.unmarshalInputUpdateNoteInput,
		ec.unmarshalInputUpdateOrgMembershipInput,
		ec.unmarshalInputUpdateOrganizationInput,
		ec.unmarshalInputUpdateOrganizationSettingInput,
		ec.unmarshalInputUpdatePersonalAccessTokenInput,
		ec.unmarshalInputUpdateProcedureInput,
		ec.unmarshalInputUpdateProgramInput,
		ec.unmarshalInputUpdateProgramMembershipInput,
		ec.unmarshalInputUpdateRiskInput,
		ec.unmarshalInputUpdateStandardInput,
		ec.unmarshalInputUpdateSubcontrolInput,
		ec.unmarshalInputUpdateSubscriberInput,
		ec.unmarshalInputUpdateTFASettingInput,
		ec.unmarshalInputUpdateTaskInput,
		ec.unmarshalInputUpdateTemplateInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserSettingInput,
		ec.unmarshalInputUserHistoryOrder,
		ec.unmarshalInputUserHistoryWhereInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserSettingHistoryWhereInput,
		ec.unmarshalInputUserSettingWhereInput,
		ec.unmarshalInputUserWhereInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/actionplan.graphql", Input: `extend type Query {
    """
    Look up actionPlan by ID
    """
     actionPlan(
        """
        ID of the actionPlan
        """
        id: ID!
    ):  ActionPlan!
}

extend type Mutation{
    """
    Create a new actionPlan
    """
    createActionPlan(
        """
        values of the actionPlan
        """
        input: CreateActionPlanInput!
    ): ActionPlanCreatePayload!
    """
    Create multiple new actionPlans
    """
    createBulkActionPlan(
        """
        values of the actionPlan
        """
        input: [CreateActionPlanInput!]
    ): ActionPlanBulkCreatePayload!
    """
    Create multiple new actionPlans via file upload
    """
    createBulkCSVActionPlan(
        """
        csv file containing values of the actionPlan
        """
        input: Upload!
    ): ActionPlanBulkCreatePayload!
    """
    Update an existing actionPlan
    """
    updateActionPlan(
        """
        ID of the actionPlan
        """
        id: ID!
        """
        New values for the actionPlan
        """
        input: UpdateActionPlanInput!
    ): ActionPlanUpdatePayload!
    """
    Delete an existing actionPlan
    """
    deleteActionPlan(
        """
        ID of the actionPlan
        """
        id: ID!
    ): ActionPlanDeletePayload!
}

"""
Return response for createActionPlan mutation
"""
type ActionPlanCreatePayload {
    """
    Created actionPlan
    """
    actionPlan: ActionPlan!
}

"""
Return response for updateActionPlan mutation
"""
type ActionPlanUpdatePayload {
    """
    Updated actionPlan
    """
    actionPlan: ActionPlan!
}

"""
Return response for deleteActionPlan mutation
"""
type ActionPlanDeletePayload {
    """
    Deleted actionPlan ID
    """
    deletedID: ID!
}

"""
Return response for createBulkActionPlan mutation
"""
type ActionPlanBulkCreatePayload {
    """
    Created actionPlans
    """
    actionPlans: [ActionPlan!]
}`, BuiltIn: false},
	{Name: "../schema/adminsearch.graphql", Input: `extend type Query{
    """
    Search across APIToken objects
    """
    adminAPITokenSearch(
        """
        Search query
        """
        query: String!
    ): APITokenSearchResult
    """
    Search across ActionPlan objects
    """
    adminActionPlanSearch(
        """
        Search query
        """
        query: String!
    ): ActionPlanSearchResult
    """
    Search across Contact objects
    """
    adminContactSearch(
        """
        Search query
        """
        query: String!
    ): ContactSearchResult
    """
    Search across Control objects
    """
    adminControlSearch(
        """
        Search query
        """
        query: String!
    ): ControlSearchResult
    """
    Search across ControlObjective objects
    """
    adminControlObjectiveSearch(
        """
        Search query
        """
        query: String!
    ): ControlObjectiveSearchResult
    """
    Search across DocumentData objects
    """
    adminDocumentDataSearch(
        """
        Search query
        """
        query: String!
    ): DocumentDataSearchResult
    """
    Search across Entity objects
    """
    adminEntitySearch(
        """
        Search query
        """
        query: String!
    ): EntitySearchResult
    """
    Search across EntityType objects
    """
    adminEntityTypeSearch(
        """
        Search query
        """
        query: String!
    ): EntityTypeSearchResult
    """
    Search across Event objects
    """
    adminEventSearch(
        """
        Search query
        """
        query: String!
    ): EventSearchResult
    """
    Search across File objects
    """
    adminFileSearch(
        """
        Search query
        """
        query: String!
    ): FileSearchResult
    """
    Search across Group objects
    """
    adminGroupSearch(
        """
        Search query
        """
        query: String!
    ): GroupSearchResult
    """
    Search across GroupSetting objects
    """
    adminGroupSettingSearch(
        """
        Search query
        """
        query: String!
    ): GroupSettingSearchResult
    """
    Search across Integration objects
    """
    adminIntegrationSearch(
        """
        Search query
        """
        query: String!
    ): IntegrationSearchResult
    """
    Search across InternalPolicy objects
    """
    adminInternalPolicySearch(
        """
        Search query
        """
        query: String!
    ): InternalPolicySearchResult
    """
    Search across Narrative objects
    """
    adminNarrativeSearch(
        """
        Search query
        """
        query: String!
    ): NarrativeSearchResult
    """
    Search across OrgSubscription objects
    """
    adminOrgSubscriptionSearch(
        """
        Search query
        """
        query: String!
    ): OrgSubscriptionSearchResult
    """
    Search across Organization objects
    """
    adminOrganizationSearch(
        """
        Search query
        """
        query: String!
    ): OrganizationSearchResult
    """
    Search across OrganizationSetting objects
    """
    adminOrganizationSettingSearch(
        """
        Search query
        """
        query: String!
    ): OrganizationSettingSearchResult
    """
    Search across PersonalAccessToken objects
    """
    adminPersonalAccessTokenSearch(
        """
        Search query
        """
        query: String!
    ): PersonalAccessTokenSearchResult
    """
    Search across Procedure objects
    """
    adminProcedureSearch(
        """
        Search query
        """
        query: String!
    ): ProcedureSearchResult
    """
    Search across Program objects
    """
    adminProgramSearch(
        """
        Search query
        """
        query: String!
    ): ProgramSearchResult
    """
    Search across Risk objects
    """
    adminRiskSearch(
        """
        Search query
        """
        query: String!
    ): RiskSearchResult
    """
    Search across Standard objects
    """
    adminStandardSearch(
        """
        Search query
        """
        query: String!
    ): StandardSearchResult
    """
    Search across Subcontrol objects
    """
    adminSubcontrolSearch(
        """
        Search query
        """
        query: String!
    ): SubcontrolSearchResult
    """
    Search across Subscriber objects
    """
    adminSubscriberSearch(
        """
        Search query
        """
        query: String!
    ): SubscriberSearchResult
    """
    Search across TFASetting objects
    """
    adminTFASettingSearch(
        """
        Search query
        """
        query: String!
    ): TFASettingSearchResult
    """
    Search across Task objects
    """
    adminTaskSearch(
        """
        Search query
        """
        query: String!
    ): TaskSearchResult
    """
    Search across Template objects
    """
    adminTemplateSearch(
        """
        Search query
        """
        query: String!
    ): TemplateSearchResult
    """
    Search across User objects
    """
    adminUserSearch(
        """
        Search query
        """
        query: String!
    ): UserSearchResult
    """
    Search across UserSetting objects
    """
    adminUserSettingSearch(
        """
        Search query
        """
        query: String!
    ): UserSettingSearchResult
}`, BuiltIn: false},
	{Name: "../schema/apitoken.graphql", Input: `extend type Query {
    """
    Look up apiToken by ID
    """
     apiToken(
        """
        ID of the apiToken
        """
        id: ID!
    ):  APIToken!
}

extend type Mutation{
    """
    Create a new apiToken
    """
    createAPIToken(
        """
        values of the apiToken
        """
        input: CreateAPITokenInput!
    ): APITokenCreatePayload!
    """
    Create multiple new apiTokens
    """
    createBulkAPIToken(
        """
        values of the apiToken
        """
        input: [CreateAPITokenInput!]
    ): APITokenBulkCreatePayload!
    """
    Create multiple new apiTokens via file upload
    """
    createBulkCSVAPIToken(
        """
        csv file containing values of the apiToken
        """
        input: Upload!
    ): APITokenBulkCreatePayload!
    """
    Update an existing apiToken
    """
    updateAPIToken(
        """
        ID of the apiToken
        """
        id: ID!
        """
        New values for the apiToken
        """
        input: UpdateAPITokenInput!
    ): APITokenUpdatePayload!
    """
    Delete an existing apiToken
    """
    deleteAPIToken(
        """
        ID of the apiToken
        """
        id: ID!
    ): APITokenDeletePayload!
}

"""
Return response for createAPIToken mutation
"""
type APITokenCreatePayload {
    """
    Created apiToken
    """
    apiToken: APIToken!
}

"""
Return response for updateAPIToken mutation
"""
type APITokenUpdatePayload {
    """
    Updated apiToken
    """
    apiToken: APIToken!
}

"""
Return response for deleteAPIToken mutation
"""
type APITokenDeletePayload {
    """
    Deleted apiToken ID
    """
    deletedID: ID!
}

"""
Return response for createBulkAPIToken mutation
"""
type APITokenBulkCreatePayload {
    """
    Created apiTokens
    """
    apiTokens: [APIToken!]
}`, BuiltIn: false},
	{Name: "../schema/audit.graphql", Input: `extend type Query {
  auditLogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for AuditLogs returned from the connection.
    """
    where: AuditLogWhereInput
  ): AuditLogConnection!
}

"""
A connection to a list of items.
"""
type AuditLogConnection {
  """
  A list of edges.
  """
  edges: [AuditLogEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AuditLogEdge {
  """
  The item at the end of the edge.
  """
  node: AuditLog
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

type AuditLog implements Node {
    table: String
    time: Time
    id: ID!
    operation: String
    changes: [String!]
    updatedBy: ID
}

extend input AuditLogWhereInput {
  refID: ID
  updatedBy: ID
  operation: String
  table: ID
  before: Time
  after: Time
}`, BuiltIn: false},
	{Name: "../schema/contact.graphql", Input: `extend type Query {
    """
    Look up contact by ID
    """
     contact(
        """
        ID of the contact
        """
        id: ID!
    ):  Contact!
}

extend type Mutation{
    """
    Create a new contact
    """
    createContact(
        """
        values of the contact
        """
        input: CreateContactInput!
    ): ContactCreatePayload!
    """
    Create multiple new contacts
    """
    createBulkContact(
        """
        values of the contact
        """
        input: [CreateContactInput!]
    ): ContactBulkCreatePayload!
    """
    Create multiple new contacts via file upload
    """
    createBulkCSVContact(
        """
        csv file containing values of the contact
        """
        input: Upload!
    ): ContactBulkCreatePayload!
    """
    Update an existing contact
    """
    updateContact(
        """
        ID of the contact
        """
        id: ID!
        """
        New values for the contact
        """
        input: UpdateContactInput!
    ): ContactUpdatePayload!
    """
    Delete an existing contact
    """
    deleteContact(
        """
        ID of the contact
        """
        id: ID!
    ): ContactDeletePayload!
}

"""
Return response for createContact mutation
"""
type ContactCreatePayload {
    """
    Created contact
    """
    contact: Contact!
}

"""
Return response for updateContact mutation
"""
type ContactUpdatePayload {
    """
    Updated contact
    """
    contact: Contact!
}

"""
Return response for deleteContact mutation
"""
type ContactDeletePayload {
    """
    Deleted contact ID
    """
    deletedID: ID!
}

"""
Return response for createBulkContact mutation
"""
type ContactBulkCreatePayload {
    """
    Created contacts
    """
    contacts: [Contact!]
}`, BuiltIn: false},
	{Name: "../schema/control.graphql", Input: `extend type Query {
    """
    Look up control by ID
    """
     control(
        """
        ID of the control
        """
        id: ID!
    ):  Control!
}

extend type Mutation{
    """
    Create a new control
    """
    createControl(
        """
        values of the control
        """
        input: CreateControlInput!
    ): ControlCreatePayload!
    """
    Create multiple new controls
    """
    createBulkControl(
        """
        values of the control
        """
        input: [CreateControlInput!]
    ): ControlBulkCreatePayload!
    """
    Create multiple new controls via file upload
    """
    createBulkCSVControl(
        """
        csv file containing values of the control
        """
        input: Upload!
    ): ControlBulkCreatePayload!
    """
    Update an existing control
    """
    updateControl(
        """
        ID of the control
        """
        id: ID!
        """
        New values for the control
        """
        input: UpdateControlInput!
    ): ControlUpdatePayload!
    """
    Delete an existing control
    """
    deleteControl(
        """
        ID of the control
        """
        id: ID!
    ): ControlDeletePayload!
}

"""
Return response for createControl mutation
"""
type ControlCreatePayload {
    """
    Created control
    """
    control: Control!
}

"""
Return response for updateControl mutation
"""
type ControlUpdatePayload {
    """
    Updated control
    """
    control: Control!
}

"""
Return response for deleteControl mutation
"""
type ControlDeletePayload {
    """
    Deleted control ID
    """
    deletedID: ID!
}

"""
Return response for createBulkControl mutation
"""
type ControlBulkCreatePayload {
    """
    Created controls
    """
    controls: [Control!]
}`, BuiltIn: false},
	{Name: "../schema/controlobjective.graphql", Input: `extend type Query {
    """
    Look up controlObjective by ID
    """
     controlObjective(
        """
        ID of the controlObjective
        """
        id: ID!
    ):  ControlObjective!
}

extend type Mutation{
    """
    Create a new controlObjective
    """
    createControlObjective(
        """
        values of the controlObjective
        """
        input: CreateControlObjectiveInput!
    ): ControlObjectiveCreatePayload!
    """
    Create multiple new controlObjectives
    """
    createBulkControlObjective(
        """
        values of the controlObjective
        """
        input: [CreateControlObjectiveInput!]
    ): ControlObjectiveBulkCreatePayload!
    """
    Create multiple new controlObjectives via file upload
    """
    createBulkCSVControlObjective(
        """
        csv file containing values of the controlObjective
        """
        input: Upload!
    ): ControlObjectiveBulkCreatePayload!
    """
    Update an existing controlObjective
    """
    updateControlObjective(
        """
        ID of the controlObjective
        """
        id: ID!
        """
        New values for the controlObjective
        """
        input: UpdateControlObjectiveInput!
    ): ControlObjectiveUpdatePayload!
    """
    Delete an existing controlObjective
    """
    deleteControlObjective(
        """
        ID of the controlObjective
        """
        id: ID!
    ): ControlObjectiveDeletePayload!
}

"""
Return response for createControlObjective mutation
"""
type ControlObjectiveCreatePayload {
    """
    Created controlObjective
    """
    controlObjective: ControlObjective!
}

"""
Return response for updateControlObjective mutation
"""
type ControlObjectiveUpdatePayload {
    """
    Updated controlObjective
    """
    controlObjective: ControlObjective!
}

"""
Return response for deleteControlObjective mutation
"""
type ControlObjectiveDeletePayload {
    """
    Deleted controlObjective ID
    """
    deletedID: ID!
}

"""
Return response for createBulkControlObjective mutation
"""
type ControlObjectiveBulkCreatePayload {
    """
    Created controlObjectives
    """
    controlObjectives: [ControlObjective!]
}`, BuiltIn: false},
	{Name: "../schema/documentdata.graphql", Input: `extend type Query {
    """
    Look up documentData by ID
    """
     documentData(
        """
        ID of the documentData
        """
        id: ID!
    ):  DocumentData!
}

extend type Mutation{
    """
    Create a new documentData
    """
    createDocumentData(
        """
        values of the documentData
        """
        input: CreateDocumentDataInput!
    ): DocumentDataCreatePayload!
    """
    Create multiple new documentData
    """
    createBulkDocumentData(
        """
        values of the documentData
        """
        input: [CreateDocumentDataInput!]
    ): DocumentDataBulkCreatePayload!
    """
    Create multiple new documentData via file upload
    """
    createBulkCSVDocumentData(
        """
        csv file containing values of the documentData
        """
        input: Upload!
    ): DocumentDataBulkCreatePayload!
    """
    Update an existing documentData
    """
    updateDocumentData(
        """
        ID of the documentData
        """
        id: ID!
        """
        New values for the documentData
        """
        input: UpdateDocumentDataInput!
    ): DocumentDataUpdatePayload!
    """
    Delete an existing documentData
    """
    deleteDocumentData(
        """
        ID of the documentData
        """
        id: ID!
    ): DocumentDataDeletePayload!
}

"""
Return response for createDocumentData mutation
"""
type DocumentDataCreatePayload {
    """
    Created documentData
    """
    documentData: DocumentData!
}

"""
Return response for updateDocumentData mutation
"""
type DocumentDataUpdatePayload {
    """
    Updated documentData
    """
    documentData: DocumentData!
}

"""
Return response for deleteDocumentData mutation
"""
type DocumentDataDeletePayload {
    """
    Deleted documentData ID
    """
    deletedID: ID!
}

"""
Return response for createBulkDocumentData mutation
"""
type DocumentDataBulkCreatePayload {
    """
    Created documentData
    """
    documentData: [DocumentData!]
}`, BuiltIn: false},
	{Name: "../schema/ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type APIToken implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name associated with the token
  """
  name: String!
  token: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  lastUsedAt: Time
  owner: Organization
}
"""
A connection to a list of items.
"""
type APITokenConnection {
  """
  A list of edges.
  """
  edges: [APITokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type APITokenEdge {
  """
  The item at the end of the edge.
  """
  node: APIToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
APITokenWhereInput is used for filtering APIToken objects.
Input was generated by ent.
"""
input APITokenWhereInput {
  not: APITokenWhereInput
  and: [APITokenWhereInput!]
  or: [APITokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
type ActionPlan implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the action plan
  """
  name: String!
  """
  description of the action plan
  """
  description: String
  """
  status of the action plan
  """
  status: String
  """
  due date of the action plan
  """
  dueDate: Time
  """
  priority of the action plan
  """
  priority: String
  """
  source of the action plan
  """
  source: String
  """
  json data including details of the action plan
  """
  details: Map
  standard: [Standard!]
  risk: [Risk!]
  control: [Control!]
  user: [User!]
  program: [Program!]
}
"""
A connection to a list of items.
"""
type ActionPlanConnection {
  """
  A list of edges.
  """
  edges: [ActionPlanEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ActionPlanEdge {
  """
  The item at the end of the edge.
  """
  node: ActionPlan
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ActionPlanHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ActionPlanHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the action plan
  """
  name: String!
  """
  description of the action plan
  """
  description: String
  """
  status of the action plan
  """
  status: String
  """
  due date of the action plan
  """
  dueDate: Time
  """
  priority of the action plan
  """
  priority: String
  """
  source of the action plan
  """
  source: String
  """
  json data including details of the action plan
  """
  details: Map
}
"""
A connection to a list of items.
"""
type ActionPlanHistoryConnection {
  """
  A list of edges.
  """
  edges: [ActionPlanHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ActionPlanHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ActionPlanHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ActionPlanHistoryOpType is enum for the field operation
"""
enum ActionPlanHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
ActionPlanHistoryWhereInput is used for filtering ActionPlanHistory objects.
Input was generated by ent.
"""
input ActionPlanHistoryWhereInput {
  not: ActionPlanHistoryWhereInput
  and: [ActionPlanHistoryWhereInput!]
  or: [ActionPlanHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ActionPlanHistoryOpType
  operationNEQ: ActionPlanHistoryOpType
  operationIn: [ActionPlanHistoryOpType!]
  operationNotIn: [ActionPlanHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  due_date field predicates
  """
  dueDate: Time
  dueDateNEQ: Time
  dueDateIn: [Time!]
  dueDateNotIn: [Time!]
  dueDateGT: Time
  dueDateGTE: Time
  dueDateLT: Time
  dueDateLTE: Time
  dueDateIsNil: Boolean
  dueDateNotNil: Boolean
  """
  priority field predicates
  """
  priority: String
  priorityNEQ: String
  priorityIn: [String!]
  priorityNotIn: [String!]
  priorityGT: String
  priorityGTE: String
  priorityLT: String
  priorityLTE: String
  priorityContains: String
  priorityHasPrefix: String
  priorityHasSuffix: String
  priorityIsNil: Boolean
  priorityNotNil: Boolean
  priorityEqualFold: String
  priorityContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
}
"""
ActionPlanWhereInput is used for filtering ActionPlan objects.
Input was generated by ent.
"""
input ActionPlanWhereInput {
  not: ActionPlanWhereInput
  and: [ActionPlanWhereInput!]
  or: [ActionPlanWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  due_date field predicates
  """
  dueDate: Time
  dueDateNEQ: Time
  dueDateIn: [Time!]
  dueDateNotIn: [Time!]
  dueDateGT: Time
  dueDateGTE: Time
  dueDateLT: Time
  dueDateLTE: Time
  dueDateIsNil: Boolean
  dueDateNotNil: Boolean
  """
  priority field predicates
  """
  priority: String
  priorityNEQ: String
  priorityIn: [String!]
  priorityNotIn: [String!]
  priorityGT: String
  priorityGTE: String
  priorityLT: String
  priorityLTE: String
  priorityContains: String
  priorityHasPrefix: String
  priorityHasSuffix: String
  priorityIsNil: Boolean
  priorityNotNil: Boolean
  priorityEqualFold: String
  priorityContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  standard edge predicates
  """
  hasStandard: Boolean
  hasStandardWith: [StandardWhereInput!]
  """
  risk edge predicates
  """
  hasRisk: Boolean
  hasRiskWith: [RiskWhereInput!]
  """
  control edge predicates
  """
  hasControl: Boolean
  hasControlWith: [ControlWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  program edge predicates
  """
  hasProgram: Boolean
  hasProgramWith: [ProgramWhereInput!]
}
type Contact implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the full name of the contact
  """
  fullName: String!
  """
  the title of the contact
  """
  title: String
  """
  the company of the contact
  """
  company: String
  """
  the email of the contact
  """
  email: String
  """
  the phone number of the contact
  """
  phoneNumber: String
  """
  the address of the contact
  """
  address: String
  """
  status of the contact
  """
  status: ContactUserStatus!
  owner: Organization
  entities: [Entity!]
  files: [File!]
}
"""
A connection to a list of items.
"""
type ContactConnection {
  """
  A list of edges.
  """
  edges: [ContactEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ContactEdge {
  """
  The item at the end of the edge.
  """
  node: Contact
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ContactHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ContactHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the full name of the contact
  """
  fullName: String!
  """
  the title of the contact
  """
  title: String
  """
  the company of the contact
  """
  company: String
  """
  the email of the contact
  """
  email: String
  """
  the phone number of the contact
  """
  phoneNumber: String
  """
  the address of the contact
  """
  address: String
  """
  status of the contact
  """
  status: ContactHistoryUserStatus!
}
"""
A connection to a list of items.
"""
type ContactHistoryConnection {
  """
  A list of edges.
  """
  edges: [ContactHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ContactHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ContactHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ContactHistoryOpType is enum for the field operation
"""
enum ContactHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
ContactHistoryUserStatus is enum for the field status
"""
enum ContactHistoryUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
ContactHistoryWhereInput is used for filtering ContactHistory objects.
Input was generated by ent.
"""
input ContactHistoryWhereInput {
  not: ContactHistoryWhereInput
  and: [ContactHistoryWhereInput!]
  or: [ContactHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ContactHistoryOpType
  operationNEQ: ContactHistoryOpType
  operationIn: [ContactHistoryOpType!]
  operationNotIn: [ContactHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  full_name field predicates
  """
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  company field predicates
  """
  company: String
  companyNEQ: String
  companyIn: [String!]
  companyNotIn: [String!]
  companyGT: String
  companyGTE: String
  companyLT: String
  companyLTE: String
  companyContains: String
  companyHasPrefix: String
  companyHasSuffix: String
  companyIsNil: Boolean
  companyNotNil: Boolean
  companyEqualFold: String
  companyContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIsNil: Boolean
  phoneNumberNotNil: Boolean
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  status field predicates
  """
  status: ContactHistoryUserStatus
  statusNEQ: ContactHistoryUserStatus
  statusIn: [ContactHistoryUserStatus!]
  statusNotIn: [ContactHistoryUserStatus!]
}
"""
ContactUserStatus is enum for the field status
"""
enum ContactUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
ContactWhereInput is used for filtering Contact objects.
Input was generated by ent.
"""
input ContactWhereInput {
  not: ContactWhereInput
  and: [ContactWhereInput!]
  or: [ContactWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  full_name field predicates
  """
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  company field predicates
  """
  company: String
  companyNEQ: String
  companyIn: [String!]
  companyNotIn: [String!]
  companyGT: String
  companyGTE: String
  companyLT: String
  companyLTE: String
  companyContains: String
  companyHasPrefix: String
  companyHasSuffix: String
  companyIsNil: Boolean
  companyNotNil: Boolean
  companyEqualFold: String
  companyContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIsNil: Boolean
  phoneNumberNotNil: Boolean
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  status field predicates
  """
  status: ContactUserStatus
  statusNEQ: ContactUserStatus
  statusIn: [ContactUserStatus!]
  statusNotIn: [ContactUserStatus!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
type Control implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID!
  """
  the name of the control
  """
  name: String!
  """
  description of the control
  """
  description: String
  """
  status of the control
  """
  status: String
  """
  type of the control
  """
  controlType: String
  """
  version of the control
  """
  version: String
  """
  control number or identifier
  """
  controlNumber: String
  """
  family associated with the control
  """
  family: String
  """
  class associated with the control
  """
  class: String
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: String
  """
  which control objectives are satisfied by the control
  """
  satisfies: String
  """
  mapped frameworks
  """
  mappedFrameworks: String
  """
  json data including details of the control
  """
  details: Map
  owner: Organization!
  """
  groups that are blocked from viewing or editing the risk
  """
  blockedGroups: [Group!]
  """
  provides edit access to the risk to members of the group
  """
  editors: [Group!]
  """
  provides view access to the risk to members of the group
  """
  viewers: [Group!]
  procedures: [Procedure!]
  subcontrols: [Subcontrol!]
  controlObjectives: [ControlObjective!]
  standard: [Standard!]
  narratives: [Narrative!]
  risks: [Risk!]
  actionPlans: [ActionPlan!]
  tasks: [Task!]
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type ControlConnection {
  """
  A list of edges.
  """
  edges: [ControlEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ControlEdge {
  """
  The item at the end of the edge.
  """
  node: Control
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ControlHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ControlHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String!
  """
  the name of the control
  """
  name: String!
  """
  description of the control
  """
  description: String
  """
  status of the control
  """
  status: String
  """
  type of the control
  """
  controlType: String
  """
  version of the control
  """
  version: String
  """
  control number or identifier
  """
  controlNumber: String
  """
  family associated with the control
  """
  family: String
  """
  class associated with the control
  """
  class: String
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: String
  """
  which control objectives are satisfied by the control
  """
  satisfies: String
  """
  mapped frameworks
  """
  mappedFrameworks: String
  """
  json data including details of the control
  """
  details: Map
}
"""
A connection to a list of items.
"""
type ControlHistoryConnection {
  """
  A list of edges.
  """
  edges: [ControlHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ControlHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ControlHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ControlHistoryOpType is enum for the field operation
"""
enum ControlHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
ControlHistoryWhereInput is used for filtering ControlHistory objects.
Input was generated by ent.
"""
input ControlHistoryWhereInput {
  not: ControlHistoryWhereInput
  and: [ControlHistoryWhereInput!]
  or: [ControlHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ControlHistoryOpType
  operationNEQ: ControlHistoryOpType
  operationIn: [ControlHistoryOpType!]
  operationNotIn: [ControlHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  control_type field predicates
  """
  controlType: String
  controlTypeNEQ: String
  controlTypeIn: [String!]
  controlTypeNotIn: [String!]
  controlTypeGT: String
  controlTypeGTE: String
  controlTypeLT: String
  controlTypeLTE: String
  controlTypeContains: String
  controlTypeHasPrefix: String
  controlTypeHasSuffix: String
  controlTypeIsNil: Boolean
  controlTypeNotNil: Boolean
  controlTypeEqualFold: String
  controlTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  control_number field predicates
  """
  controlNumber: String
  controlNumberNEQ: String
  controlNumberIn: [String!]
  controlNumberNotIn: [String!]
  controlNumberGT: String
  controlNumberGTE: String
  controlNumberLT: String
  controlNumberLTE: String
  controlNumberContains: String
  controlNumberHasPrefix: String
  controlNumberHasSuffix: String
  controlNumberIsNil: Boolean
  controlNumberNotNil: Boolean
  controlNumberEqualFold: String
  controlNumberContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  class field predicates
  """
  class: String
  classNEQ: String
  classIn: [String!]
  classNotIn: [String!]
  classGT: String
  classGTE: String
  classLT: String
  classLTE: String
  classContains: String
  classHasPrefix: String
  classHasSuffix: String
  classIsNil: Boolean
  classNotNil: Boolean
  classEqualFold: String
  classContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
  """
  mapped_frameworks field predicates
  """
  mappedFrameworks: String
  mappedFrameworksNEQ: String
  mappedFrameworksIn: [String!]
  mappedFrameworksNotIn: [String!]
  mappedFrameworksGT: String
  mappedFrameworksGTE: String
  mappedFrameworksLT: String
  mappedFrameworksLTE: String
  mappedFrameworksContains: String
  mappedFrameworksHasPrefix: String
  mappedFrameworksHasSuffix: String
  mappedFrameworksIsNil: Boolean
  mappedFrameworksNotNil: Boolean
  mappedFrameworksEqualFold: String
  mappedFrameworksContainsFold: String
}
type ControlObjective implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID!
  """
  the name of the control objective
  """
  name: String!
  """
  description of the control objective
  """
  description: String
  """
  status of the control objective
  """
  status: String
  """
  type of the control objective
  """
  controlObjectiveType: String
  """
  version of the control objective
  """
  version: String
  """
  number of the control objective
  """
  controlNumber: String
  """
  family of the control objective
  """
  family: String
  """
  class associated with the control objective
  """
  class: String
  """
  source of the control objective, e.g. framework, template, user-defined, etc.
  """
  source: String
  """
  mapped frameworks
  """
  mappedFrameworks: String
  """
  json data including details of the control objective
  """
  details: Map
  owner: Organization!
  """
  groups that are blocked from viewing or editing the risk
  """
  blockedGroups: [Group!]
  """
  provides edit access to the risk to members of the group
  """
  editors: [Group!]
  """
  provides view access to the risk to members of the group
  """
  viewers: [Group!]
  internalPolicies: [InternalPolicy!]
  controls: [Control!]
  procedures: [Procedure!]
  risks: [Risk!]
  subcontrols: [Subcontrol!]
  standard: [Standard!]
  narratives: [Narrative!]
  tasks: [Task!]
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type ControlObjectiveConnection {
  """
  A list of edges.
  """
  edges: [ControlObjectiveEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ControlObjectiveEdge {
  """
  The item at the end of the edge.
  """
  node: ControlObjective
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ControlObjectiveHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ControlObjectiveHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String!
  """
  the name of the control objective
  """
  name: String!
  """
  description of the control objective
  """
  description: String
  """
  status of the control objective
  """
  status: String
  """
  type of the control objective
  """
  controlObjectiveType: String
  """
  version of the control objective
  """
  version: String
  """
  number of the control objective
  """
  controlNumber: String
  """
  family of the control objective
  """
  family: String
  """
  class associated with the control objective
  """
  class: String
  """
  source of the control objective, e.g. framework, template, user-defined, etc.
  """
  source: String
  """
  mapped frameworks
  """
  mappedFrameworks: String
  """
  json data including details of the control objective
  """
  details: Map
}
"""
A connection to a list of items.
"""
type ControlObjectiveHistoryConnection {
  """
  A list of edges.
  """
  edges: [ControlObjectiveHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ControlObjectiveHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ControlObjectiveHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ControlObjectiveHistoryOpType is enum for the field operation
"""
enum ControlObjectiveHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
ControlObjectiveHistoryWhereInput is used for filtering ControlObjectiveHistory objects.
Input was generated by ent.
"""
input ControlObjectiveHistoryWhereInput {
  not: ControlObjectiveHistoryWhereInput
  and: [ControlObjectiveHistoryWhereInput!]
  or: [ControlObjectiveHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ControlObjectiveHistoryOpType
  operationNEQ: ControlObjectiveHistoryOpType
  operationIn: [ControlObjectiveHistoryOpType!]
  operationNotIn: [ControlObjectiveHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  control_objective_type field predicates
  """
  controlObjectiveType: String
  controlObjectiveTypeNEQ: String
  controlObjectiveTypeIn: [String!]
  controlObjectiveTypeNotIn: [String!]
  controlObjectiveTypeGT: String
  controlObjectiveTypeGTE: String
  controlObjectiveTypeLT: String
  controlObjectiveTypeLTE: String
  controlObjectiveTypeContains: String
  controlObjectiveTypeHasPrefix: String
  controlObjectiveTypeHasSuffix: String
  controlObjectiveTypeIsNil: Boolean
  controlObjectiveTypeNotNil: Boolean
  controlObjectiveTypeEqualFold: String
  controlObjectiveTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  control_number field predicates
  """
  controlNumber: String
  controlNumberNEQ: String
  controlNumberIn: [String!]
  controlNumberNotIn: [String!]
  controlNumberGT: String
  controlNumberGTE: String
  controlNumberLT: String
  controlNumberLTE: String
  controlNumberContains: String
  controlNumberHasPrefix: String
  controlNumberHasSuffix: String
  controlNumberIsNil: Boolean
  controlNumberNotNil: Boolean
  controlNumberEqualFold: String
  controlNumberContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  class field predicates
  """
  class: String
  classNEQ: String
  classIn: [String!]
  classNotIn: [String!]
  classGT: String
  classGTE: String
  classLT: String
  classLTE: String
  classContains: String
  classHasPrefix: String
  classHasSuffix: String
  classIsNil: Boolean
  classNotNil: Boolean
  classEqualFold: String
  classContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  mapped_frameworks field predicates
  """
  mappedFrameworks: String
  mappedFrameworksNEQ: String
  mappedFrameworksIn: [String!]
  mappedFrameworksNotIn: [String!]
  mappedFrameworksGT: String
  mappedFrameworksGTE: String
  mappedFrameworksLT: String
  mappedFrameworksLTE: String
  mappedFrameworksContains: String
  mappedFrameworksHasPrefix: String
  mappedFrameworksHasSuffix: String
  mappedFrameworksIsNil: Boolean
  mappedFrameworksNotNil: Boolean
  mappedFrameworksEqualFold: String
  mappedFrameworksContainsFold: String
}
"""
ControlObjectiveWhereInput is used for filtering ControlObjective objects.
Input was generated by ent.
"""
input ControlObjectiveWhereInput {
  not: ControlObjectiveWhereInput
  and: [ControlObjectiveWhereInput!]
  or: [ControlObjectiveWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  control_objective_type field predicates
  """
  controlObjectiveType: String
  controlObjectiveTypeNEQ: String
  controlObjectiveTypeIn: [String!]
  controlObjectiveTypeNotIn: [String!]
  controlObjectiveTypeGT: String
  controlObjectiveTypeGTE: String
  controlObjectiveTypeLT: String
  controlObjectiveTypeLTE: String
  controlObjectiveTypeContains: String
  controlObjectiveTypeHasPrefix: String
  controlObjectiveTypeHasSuffix: String
  controlObjectiveTypeIsNil: Boolean
  controlObjectiveTypeNotNil: Boolean
  controlObjectiveTypeEqualFold: String
  controlObjectiveTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  control_number field predicates
  """
  controlNumber: String
  controlNumberNEQ: String
  controlNumberIn: [String!]
  controlNumberNotIn: [String!]
  controlNumberGT: String
  controlNumberGTE: String
  controlNumberLT: String
  controlNumberLTE: String
  controlNumberContains: String
  controlNumberHasPrefix: String
  controlNumberHasSuffix: String
  controlNumberIsNil: Boolean
  controlNumberNotNil: Boolean
  controlNumberEqualFold: String
  controlNumberContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  class field predicates
  """
  class: String
  classNEQ: String
  classIn: [String!]
  classNotIn: [String!]
  classGT: String
  classGTE: String
  classLT: String
  classLTE: String
  classContains: String
  classHasPrefix: String
  classHasSuffix: String
  classIsNil: Boolean
  classNotNil: Boolean
  classEqualFold: String
  classContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  mapped_frameworks field predicates
  """
  mappedFrameworks: String
  mappedFrameworksNEQ: String
  mappedFrameworksIn: [String!]
  mappedFrameworksNotIn: [String!]
  mappedFrameworksGT: String
  mappedFrameworksGTE: String
  mappedFrameworksLT: String
  mappedFrameworksLTE: String
  mappedFrameworksContains: String
  mappedFrameworksHasPrefix: String
  mappedFrameworksHasSuffix: String
  mappedFrameworksIsNil: Boolean
  mappedFrameworksNotNil: Boolean
  mappedFrameworksEqualFold: String
  mappedFrameworksContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  standard edge predicates
  """
  hasStandard: Boolean
  hasStandardWith: [StandardWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
"""
ControlWhereInput is used for filtering Control objects.
Input was generated by ent.
"""
input ControlWhereInput {
  not: ControlWhereInput
  and: [ControlWhereInput!]
  or: [ControlWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  control_type field predicates
  """
  controlType: String
  controlTypeNEQ: String
  controlTypeIn: [String!]
  controlTypeNotIn: [String!]
  controlTypeGT: String
  controlTypeGTE: String
  controlTypeLT: String
  controlTypeLTE: String
  controlTypeContains: String
  controlTypeHasPrefix: String
  controlTypeHasSuffix: String
  controlTypeIsNil: Boolean
  controlTypeNotNil: Boolean
  controlTypeEqualFold: String
  controlTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  control_number field predicates
  """
  controlNumber: String
  controlNumberNEQ: String
  controlNumberIn: [String!]
  controlNumberNotIn: [String!]
  controlNumberGT: String
  controlNumberGTE: String
  controlNumberLT: String
  controlNumberLTE: String
  controlNumberContains: String
  controlNumberHasPrefix: String
  controlNumberHasSuffix: String
  controlNumberIsNil: Boolean
  controlNumberNotNil: Boolean
  controlNumberEqualFold: String
  controlNumberContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  class field predicates
  """
  class: String
  classNEQ: String
  classIn: [String!]
  classNotIn: [String!]
  classGT: String
  classGTE: String
  classLT: String
  classLTE: String
  classContains: String
  classHasPrefix: String
  classHasSuffix: String
  classIsNil: Boolean
  classNotNil: Boolean
  classEqualFold: String
  classContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
  """
  mapped_frameworks field predicates
  """
  mappedFrameworks: String
  mappedFrameworksNEQ: String
  mappedFrameworksIn: [String!]
  mappedFrameworksNotIn: [String!]
  mappedFrameworksGT: String
  mappedFrameworksGTE: String
  mappedFrameworksLT: String
  mappedFrameworksLTE: String
  mappedFrameworksContains: String
  mappedFrameworksHasPrefix: String
  mappedFrameworksHasSuffix: String
  mappedFrameworksIsNil: Boolean
  mappedFrameworksNotNil: Boolean
  mappedFrameworksEqualFold: String
  mappedFrameworksContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  standard edge predicates
  """
  hasStandard: Boolean
  hasStandardWith: [StandardWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
"""
CreateAPITokenInput is used for create APIToken object.
Input was generated by ent.
"""
input CreateAPITokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name associated with the token
  """
  name: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  lastUsedAt: Time
  ownerID: ID
}
"""
CreateActionPlanInput is used for create ActionPlan object.
Input was generated by ent.
"""
input CreateActionPlanInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the action plan
  """
  name: String!
  """
  description of the action plan
  """
  description: String
  """
  status of the action plan
  """
  status: String
  """
  due date of the action plan
  """
  dueDate: Time
  """
  priority of the action plan
  """
  priority: String
  """
  source of the action plan
  """
  source: String
  """
  json data including details of the action plan
  """
  details: Map
  standardIDs: [ID!]
  riskIDs: [ID!]
  controlIDs: [ID!]
  userIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateContactInput is used for create Contact object.
Input was generated by ent.
"""
input CreateContactInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the full name of the contact
  """
  fullName: String!
  """
  the title of the contact
  """
  title: String
  """
  the company of the contact
  """
  company: String
  """
  the email of the contact
  """
  email: String
  """
  the phone number of the contact
  """
  phoneNumber: String
  """
  the address of the contact
  """
  address: String
  """
  status of the contact
  """
  status: ContactUserStatus
  ownerID: ID
  entityIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateControlInput is used for create Control object.
Input was generated by ent.
"""
input CreateControlInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the control
  """
  name: String!
  """
  description of the control
  """
  description: String
  """
  status of the control
  """
  status: String
  """
  type of the control
  """
  controlType: String
  """
  version of the control
  """
  version: String
  """
  control number or identifier
  """
  controlNumber: String
  """
  family associated with the control
  """
  family: String
  """
  class associated with the control
  """
  class: String
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: String
  """
  which control objectives are satisfied by the control
  """
  satisfies: String
  """
  mapped frameworks
  """
  mappedFrameworks: String
  """
  json data including details of the control
  """
  details: Map
  ownerID: ID!
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  procedureIDs: [ID!]
  subcontrolIDs: [ID!]
  controlObjectiveIDs: [ID!]
  standardIDs: [ID!]
  narrativeIDs: [ID!]
  riskIDs: [ID!]
  actionPlanIDs: [ID!]
  taskIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateControlObjectiveInput is used for create ControlObjective object.
Input was generated by ent.
"""
input CreateControlObjectiveInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the control objective
  """
  name: String!
  """
  description of the control objective
  """
  description: String
  """
  status of the control objective
  """
  status: String
  """
  type of the control objective
  """
  controlObjectiveType: String
  """
  version of the control objective
  """
  version: String
  """
  number of the control objective
  """
  controlNumber: String
  """
  family of the control objective
  """
  family: String
  """
  class associated with the control objective
  """
  class: String
  """
  source of the control objective, e.g. framework, template, user-defined, etc.
  """
  source: String
  """
  mapped frameworks
  """
  mappedFrameworks: String
  """
  json data including details of the control objective
  """
  details: Map
  ownerID: ID!
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  internalPolicyIDs: [ID!]
  controlIDs: [ID!]
  procedureIDs: [ID!]
  riskIDs: [ID!]
  subcontrolIDs: [ID!]
  standardIDs: [ID!]
  narrativeIDs: [ID!]
  taskIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateDocumentDataInput is used for create DocumentData object.
Input was generated by ent.
"""
input CreateDocumentDataInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the json data of the document
  """
  data: JSON!
  ownerID: ID
  templateID: ID!
  entityIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateEntityInput is used for create Entity object.
Input was generated by ent.
"""
input CreateEntityInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the entity
  """
  name: String
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the entity
  """
  description: String
  """
  domains associated with the entity
  """
  domains: [String!]
  """
  status of the entity
  """
  status: String
  ownerID: ID
  contactIDs: [ID!]
  documentIDs: [ID!]
  noteIDs: [ID!]
  fileIDs: [ID!]
  entityTypeID: ID
}
"""
CreateEntityTypeInput is used for create EntityType object.
Input was generated by ent.
"""
input CreateEntityTypeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the entity
  """
  name: String!
  ownerID: ID
  entityIDs: [ID!]
}
"""
CreateEventInput is used for create Event object.
Input was generated by ent.
"""
input CreateEventInput {
  """
  tags associated with the object
  """
  tags: [String!]
  eventID: String
  correlationID: String
  eventType: String!
  metadata: Map
  userIDs: [ID!]
  groupIDs: [ID!]
  integrationIDs: [ID!]
  organizationIDs: [ID!]
  inviteIDs: [ID!]
  personalAccessTokenIDs: [ID!]
  hushIDs: [ID!]
  subscriberIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateFileInput is used for create File object.
Input was generated by ent.
"""
input CreateFileInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String!
  """
  the extension of the file provided
  """
  providedFileExtension: String!
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  persistedFileSize: Int
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String!
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  """
  the full URI of the file
  """
  uri: String
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
  userIDs: [ID!]
  organizationIDs: [ID!]
  groupIDs: [ID!]
  contactIDs: [ID!]
  entityIDs: [ID!]
  userSettingIDs: [ID!]
  organizationSettingIDs: [ID!]
  templateIDs: [ID!]
  documentDatumIDs: [ID!]
  eventIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the group - must be unique within the organization
  """
  name: String!
  """
  the groups description
  """
  description: String
  """
  the URL to an auto generated gravatar image for the group
  """
  gravatarLogoURL: String
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  """
  The group's displayed 'friendly' name
  """
  displayName: String
  ownerID: ID
  controlCreatorIDs: [ID!]
  controlObjectiveCreatorIDs: [ID!]
  groupCreatorIDs: [ID!]
  internalPolicyCreatorIDs: [ID!]
  narrativeCreatorIDs: [ID!]
  procedureCreatorIDs: [ID!]
  programCreatorIDs: [ID!]
  riskCreatorIDs: [ID!]
  templateCreatorIDs: [ID!]
  procedureEditorIDs: [ID!]
  procedureBlockedGroupIDs: [ID!]
  internalPolicyEditorIDs: [ID!]
  internalPolicyBlockedGroupIDs: [ID!]
  programEditorIDs: [ID!]
  programBlockedGroupIDs: [ID!]
  programViewerIDs: [ID!]
  riskEditorIDs: [ID!]
  riskBlockedGroupIDs: [ID!]
  riskViewerIDs: [ID!]
  controlObjectiveEditorIDs: [ID!]
  controlObjectiveBlockedGroupIDs: [ID!]
  controlObjectiveViewerIDs: [ID!]
  controlEditorIDs: [ID!]
  controlBlockedGroupIDs: [ID!]
  controlViewerIDs: [ID!]
  narrativeEditorIDs: [ID!]
  narrativeBlockedGroupIDs: [ID!]
  narrativeViewerIDs: [ID!]
  settingID: ID!
  userIDs: [ID!]
  eventIDs: [ID!]
  integrationIDs: [ID!]
  fileIDs: [ID!]
  taskIDs: [ID!]
}
"""
CreateGroupMembershipInput is used for create GroupMembership object.
Input was generated by ent.
"""
input CreateGroupMembershipInput {
  role: GroupMembershipRole
  groupID: ID!
  userID: ID!
  eventIDs: [ID!]
}
"""
CreateGroupSettingInput is used for create GroupSetting object.
Input was generated by ent.
"""
input CreateGroupSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingVisibility
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingJoinPolicy
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  groupID: ID
}
"""
CreateHushInput is used for create Hush object.
Input was generated by ent.
"""
input CreateHushInput {
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String!
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  """
  the generic name of a secret associated with the organization
  """
  secretName: String
  """
  the secret value
  """
  secretValue: String
  integrationIDs: [ID!]
  organizationIDs: [ID!]
  eventIDs: [ID!]
}
"""
CreateIntegrationInput is used for create Integration object.
Input was generated by ent.
"""
input CreateIntegrationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the integration - must be unique within the organization
  """
  name: String!
  """
  a description of the integration
  """
  description: String
  kind: String
  ownerID: ID
  secretIDs: [ID!]
  eventIDs: [ID!]
}
"""
CreateInternalPolicyInput is used for create InternalPolicy object.
Input was generated by ent.
"""
input CreateInternalPolicyInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the policy
  """
  name: String!
  """
  description of the policy
  """
  description: String
  """
  status of the policy
  """
  status: String
  """
  type of the policy
  """
  policyType: String
  """
  version of the policy
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the policy
  """
  background: String
  """
  json data for the policy document
  """
  details: Map
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  controlObjectiveIDs: [ID!]
  controlIDs: [ID!]
  procedureIDs: [ID!]
  narrativeIDs: [ID!]
  taskIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateInviteInput is used for create Invite object.
Input was generated by ent.
"""
input CreateInviteInput {
  """
  the expiration date of the invitation token which defaults to 14 days in the future from creation
  """
  expires: Time
  """
  the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization
  """
  recipient: String!
  """
  the status of the invitation
  """
  status: InviteInviteStatus
  role: InviteRole
  """
  the number of attempts made to perform email send of the invitation, maximum of 5
  """
  sendAttempts: Int
  """
  the user who initiated the invitation
  """
  requestorID: String
  ownerID: ID
  eventIDs: [ID!]
}
"""
CreateNarrativeInput is used for create Narrative object.
Input was generated by ent.
"""
input CreateNarrativeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the narrative
  """
  name: String!
  """
  the description of the narrative
  """
  description: String
  """
  which controls are satisfied by the narrative
  """
  satisfies: String
  """
  json data for the narrative document
  """
  details: Map
  ownerID: ID!
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  internalPolicyIDs: [ID!]
  controlIDs: [ID!]
  procedureIDs: [ID!]
  controlObjectiveIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateNoteInput is used for create Note object.
Input was generated by ent.
"""
input CreateNoteInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the text of the note
  """
  text: String!
  ownerID: ID
  entityID: ID
  subcontrolIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateOrgMembershipInput is used for create OrgMembership object.
Input was generated by ent.
"""
input CreateOrgMembershipInput {
  role: OrgMembershipRole
  organizationID: ID!
  userID: ID!
  eventIDs: [ID!]
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the organization
  """
  name: String!
  """
  The organization's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the organization
  """
  description: String
  """
  orgs directly associated with a user
  """
  personalOrg: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  Whether the organization has a dedicated database
  """
  dedicatedDb: Boolean
  controlCreatorIDs: [ID!]
  controlObjectiveCreatorIDs: [ID!]
  groupCreatorIDs: [ID!]
  internalPolicyCreatorIDs: [ID!]
  narrativeCreatorIDs: [ID!]
  procedureCreatorIDs: [ID!]
  programCreatorIDs: [ID!]
  riskCreatorIDs: [ID!]
  templateCreatorIDs: [ID!]
  parentID: ID
  groupIDs: [ID!]
  templateIDs: [ID!]
  integrationIDs: [ID!]
  settingID: ID
  documentDatumIDs: [ID!]
  orgSubscriptionIDs: [ID!]
  personalAccessTokenIDs: [ID!]
  apiTokenIDs: [ID!]
  userIDs: [ID!]
  inviteIDs: [ID!]
  subscriberIDs: [ID!]
  eventIDs: [ID!]
  secretIDs: [ID!]
  fileIDs: [ID!]
  avatarFileID: ID
  entityIDs: [ID!]
  entityTypeIDs: [ID!]
  contactIDs: [ID!]
  noteIDs: [ID!]
  taskIDs: [ID!]
  programIDs: [ID!]
  procedureIDs: [ID!]
  internalPolicyIDs: [ID!]
  riskIDs: [ID!]
  controlObjectiveIDs: [ID!]
  narrativeIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
}
"""
CreateOrganizationSettingInput is used for create OrganizationSetting object.
Input was generated by ent.
"""
input CreateOrganizationSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  domains associated with the organization
  """
  domains: [String!]
  """
  Name of the person to contact for billing
  """
  billingContact: String
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  """
  Phone number to contact for billing
  """
  billingPhone: String
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingRegion
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean
  organizationID: ID
  fileIDs: [ID!]
}
"""
CreatePersonalAccessTokenInput is used for create PersonalAccessToken object.
Input was generated by ent.
"""
input CreatePersonalAccessTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name associated with the token
  """
  name: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  lastUsedAt: Time
  ownerID: ID!
  organizationIDs: [ID!]
  eventIDs: [ID!]
}
"""
CreateProcedureInput is used for create Procedure object.
Input was generated by ent.
"""
input CreateProcedureInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the procedure
  """
  name: String!
  """
  description of the procedure
  """
  description: String
  """
  status of the procedure
  """
  status: String
  """
  type of the procedure
  """
  procedureType: String
  """
  version of the procedure
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the procedure
  """
  background: String
  """
  which controls are satisfied by the procedure
  """
  satisfies: String
  """
  json data for the procedure document
  """
  details: Map
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  controlIDs: [ID!]
  internalPolicyIDs: [ID!]
  narrativeIDs: [ID!]
  riskIDs: [ID!]
  taskIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateProgramInput is used for create Program object.
Input was generated by ent.
"""
input CreateProgramInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the program
  """
  name: String!
  """
  the description of the program
  """
  description: String
  """
  the status of the program
  """
  status: ProgramProgramStatus
  """
  the start date of the period
  """
  startDate: Time
  """
  the end date of the period
  """
  endDate: Time
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean
  ownerID: ID
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  controlIDs: [ID!]
  subcontrolIDs: [ID!]
  controlObjectiveIDs: [ID!]
  internalPolicyIDs: [ID!]
  procedureIDs: [ID!]
  riskIDs: [ID!]
  taskIDs: [ID!]
  noteIDs: [ID!]
  fileIDs: [ID!]
  narrativeIDs: [ID!]
  actionPlanIDs: [ID!]
  standardIDs: [ID!]
  userIDs: [ID!]
}
"""
CreateProgramMembershipInput is used for create ProgramMembership object.
Input was generated by ent.
"""
input CreateProgramMembershipInput {
  role: ProgramMembershipRole
  programID: ID!
  userID: ID!
}
"""
CreateRiskInput is used for create Risk object.
Input was generated by ent.
"""
input CreateRiskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the risk
  """
  name: String!
  """
  description of the risk
  """
  description: String
  """
  status of the risk - mitigated or not, inflight, etc.
  """
  status: String
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  """
  business costs associated with the risk
  """
  businessCosts: String
  """
  impact of the risk - high, medium, low
  """
  impact: RiskRiskImpact
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskRiskLikelihood
  """
  mitigation for the risk
  """
  mitigation: String
  """
  which controls are satisfied by the risk
  """
  satisfies: String
  """
  json data for the risk document
  """
  details: Map
  ownerID: ID!
  blockedGroupIDs: [ID!]
  editorIDs: [ID!]
  viewerIDs: [ID!]
  controlIDs: [ID!]
  procedureIDs: [ID!]
  actionPlanIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateStandardInput is used for create Standard object.
Input was generated by ent.
"""
input CreateStandardInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
  """
  name: String!
  """
  description of the standard
  """
  description: String
  """
  family of the standard, e.g. 800-53, 800-171, 27001, etc.
  """
  family: String
  """
  status of the standard - active, deprecated, etc.
  """
  status: String
  """
  type of the standard - security, privacy, etc.
  """
  standardType: String
  """
  version of the standard
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the standard
  """
  background: String
  """
  which controls are satisfied by the standard
  """
  satisfies: String
  """
  json data with details of the standard
  """
  details: Map
  controlObjectiveIDs: [ID!]
  controlIDs: [ID!]
  procedureIDs: [ID!]
  actionPlanIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateSubcontrolInput is used for create Subcontrol object.
Input was generated by ent.
"""
input CreateSubcontrolInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the subcontrol
  """
  name: String!
  """
  description of the subcontrol
  """
  description: String
  """
  status of the subcontrol
  """
  status: String
  """
  type of the subcontrol
  """
  subcontrolType: String
  """
  version of the control
  """
  version: String
  """
  number of the subcontrol
  """
  subcontrolNumber: String
  """
  subcontrol family
  """
  family: String
  """
  subcontrol class
  """
  class: String
  """
  source of the control, e.g. framework, template, user-defined, etc.
  """
  source: String
  """
  mapped frameworks that the subcontrol is part of
  """
  mappedFrameworks: String
  """
  implementation evidence of the subcontrol
  """
  implementationEvidence: String
  """
  implementation status
  """
  implementationStatus: String
  """
  date the subcontrol was implemented
  """
  implementationDate: Time
  """
  implementation verification
  """
  implementationVerification: String
  """
  date the subcontrol implementation was verified
  """
  implementationVerificationDate: Time
  """
  json data details of the subcontrol
  """
  details: Map
  ownerID: ID!
  controlIDs: [ID!]!
  userIDs: [ID!]
  taskIDs: [ID!]
  notesID: ID
  programIDs: [ID!]
}
"""
CreateSubscriberInput is used for create Subscriber object.
Input was generated by ent.
"""
input CreateSubscriberInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  email address of the subscriber
  """
  email: String!
  """
  phone number of the subscriber
  """
  phoneNumber: String
  ownerID: ID
  eventIDs: [ID!]
}
"""
CreateTFASettingInput is used for create TFASetting object.
Input was generated by ent.
"""
input CreateTFASettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
  """
  totpAllowed: Boolean
  ownerID: ID
}
"""
CreateTaskInput is used for create Task object.
Input was generated by ent.
"""
input CreateTaskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the title of the task
  """
  title: String!
  """
  the description of the task
  """
  description: String
  """
  the details of the task
  """
  details: Map
  """
  the status of the task
  """
  status: TaskTaskStatus
  """
  the due date of the task
  """
  due: Time
  """
  the completion date of the task
  """
  completed: Time
  assignerID: ID!
  assigneeID: ID
  organizationIDs: [ID!]
  groupIDs: [ID!]
  internalPolicyIDs: [ID!]
  procedureIDs: [ID!]
  controlIDs: [ID!]
  controlObjectiveIDs: [ID!]
  subcontrolIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateTemplateInput is used for create Template object.
Input was generated by ent.
"""
input CreateTemplateInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the template
  """
  name: String!
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateDocumentType
  """
  the description of the template
  """
  description: String
  """
  the jsonschema object of the template
  """
  jsonconfig: JSON!
  """
  the uischema for the template to render in the UI
  """
  uischema: JSON
  ownerID: ID
  documentIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """
  tags associated with the object
  """
  tags: [String!]
  email: String!
  firstName: String
  lastName: String
  """
  The user's displayed 'friendly' name
  """
  displayName: String!
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  the time the user was last seen
  """
  lastSeen: Time
  """
  user password hash
  """
  password: String
  """
  the Subject of the user JWT
  """
  sub: String
  """
  auth provider used to register the account
  """
  authProvider: UserAuthProvider
  """
  the user's role
  """
  role: UserRole
  personalAccessTokenIDs: [ID!]
  tfaSettingIDs: [ID!]
  settingID: ID!
  emailVerificationTokenIDs: [ID!]
  passwordResetTokenIDs: [ID!]
  groupIDs: [ID!]
  organizationIDs: [ID!]
  webauthnIDs: [ID!]
  fileIDs: [ID!]
  avatarFileID: ID
  eventIDs: [ID!]
  actionPlanIDs: [ID!]
  subcontrolIDs: [ID!]
  assignerTaskIDs: [ID!]
  assigneeTaskIDs: [ID!]
  programIDs: [ID!]
}
"""
CreateUserSettingInput is used for create UserSetting object.
Input was generated by ent.
"""
input CreateUserSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  """
  The time the user was suspended
  """
  suspendedAt: Time
  """
  status of the user account
  """
  status: UserSettingUserStatus
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean
  """
  specifies a user may complete authentication by verifying a WebAuthn capable device
  """
  isWebauthnAllowed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
  userID: ID
  defaultOrgID: ID
  fileIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DocumentData implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the template id of the document
  """
  templateID: ID!
  """
  the json data of the document
  """
  data: JSON!
  owner: Organization
  template: Template!
  entity: [Entity!]
  files: [File!]
}
"""
A connection to a list of items.
"""
type DocumentDataConnection {
  """
  A list of edges.
  """
  edges: [DocumentDataEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DocumentDataEdge {
  """
  The item at the end of the edge.
  """
  node: DocumentData
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type DocumentDataHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: DocumentDataHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the template id of the document
  """
  templateID: String!
  """
  the json data of the document
  """
  data: JSON!
}
"""
A connection to a list of items.
"""
type DocumentDataHistoryConnection {
  """
  A list of edges.
  """
  edges: [DocumentDataHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DocumentDataHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: DocumentDataHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DocumentDataHistoryOpType is enum for the field operation
"""
enum DocumentDataHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
DocumentDataHistoryWhereInput is used for filtering DocumentDataHistory objects.
Input was generated by ent.
"""
input DocumentDataHistoryWhereInput {
  not: DocumentDataHistoryWhereInput
  and: [DocumentDataHistoryWhereInput!]
  or: [DocumentDataHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: DocumentDataHistoryOpType
  operationNEQ: DocumentDataHistoryOpType
  operationIn: [DocumentDataHistoryOpType!]
  operationNotIn: [DocumentDataHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  template_id field predicates
  """
  templateID: String
  templateIDNEQ: String
  templateIDIn: [String!]
  templateIDNotIn: [String!]
  templateIDGT: String
  templateIDGTE: String
  templateIDLT: String
  templateIDLTE: String
  templateIDContains: String
  templateIDHasPrefix: String
  templateIDHasSuffix: String
  templateIDEqualFold: String
  templateIDContainsFold: String
}
"""
DocumentDataWhereInput is used for filtering DocumentData objects.
Input was generated by ent.
"""
input DocumentDataWhereInput {
  not: DocumentDataWhereInput
  and: [DocumentDataWhereInput!]
  or: [DocumentDataWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  template_id field predicates
  """
  templateID: ID
  templateIDNEQ: ID
  templateIDIn: [ID!]
  templateIDNotIn: [ID!]
  templateIDGT: ID
  templateIDGTE: ID
  templateIDLT: ID
  templateIDLTE: ID
  templateIDContains: ID
  templateIDHasPrefix: ID
  templateIDHasSuffix: ID
  templateIDEqualFold: ID
  templateIDContainsFold: ID
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  template edge predicates
  """
  hasTemplate: Boolean
  hasTemplateWith: [TemplateWhereInput!]
  """
  entity edge predicates
  """
  hasEntity: Boolean
  hasEntityWith: [EntityWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
type Entity implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the entity
  """
  name: String
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the entity
  """
  description: String
  """
  domains associated with the entity
  """
  domains: [String!]
  """
  The type of the entity
  """
  entityTypeID: ID
  """
  status of the entity
  """
  status: String
  owner: Organization
  contacts: [Contact!]
  documents: [DocumentData!]
  notes: [Note!]
  files: [File!]
  entityType: EntityType
}
"""
A connection to a list of items.
"""
type EntityConnection {
  """
  A list of edges.
  """
  edges: [EntityEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityEdge {
  """
  The item at the end of the edge.
  """
  node: Entity
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type EntityHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: EntityHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the entity
  """
  name: String
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the entity
  """
  description: String
  """
  domains associated with the entity
  """
  domains: [String!]
  """
  The type of the entity
  """
  entityTypeID: String
  """
  status of the entity
  """
  status: String
}
"""
A connection to a list of items.
"""
type EntityHistoryConnection {
  """
  A list of edges.
  """
  edges: [EntityHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: EntityHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EntityHistoryOpType is enum for the field operation
"""
enum EntityHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for EntityHistory connections
"""
input EntityHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EntityHistories.
  """
  field: EntityHistoryOrderField!
}
"""
Properties by which EntityHistory connections can be ordered.
"""
enum EntityHistoryOrderField {
  name
  display_name
}
"""
EntityHistoryWhereInput is used for filtering EntityHistory objects.
Input was generated by ent.
"""
input EntityHistoryWhereInput {
  not: EntityHistoryWhereInput
  and: [EntityHistoryWhereInput!]
  or: [EntityHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: EntityHistoryOpType
  operationNEQ: EntityHistoryOpType
  operationIn: [EntityHistoryOpType!]
  operationNotIn: [EntityHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  entity_type_id field predicates
  """
  entityTypeID: String
  entityTypeIDNEQ: String
  entityTypeIDIn: [String!]
  entityTypeIDNotIn: [String!]
  entityTypeIDGT: String
  entityTypeIDGTE: String
  entityTypeIDLT: String
  entityTypeIDLTE: String
  entityTypeIDContains: String
  entityTypeIDHasPrefix: String
  entityTypeIDHasSuffix: String
  entityTypeIDIsNil: Boolean
  entityTypeIDNotNil: Boolean
  entityTypeIDEqualFold: String
  entityTypeIDContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
}
"""
Ordering options for Entity connections
"""
input EntityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Entities.
  """
  field: EntityOrderField!
}
"""
Properties by which Entity connections can be ordered.
"""
enum EntityOrderField {
  name
  display_name
}
type EntityType implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the entity
  """
  name: String!
  owner: Organization
  entities: [Entity!]
}
"""
A connection to a list of items.
"""
type EntityTypeConnection {
  """
  A list of edges.
  """
  edges: [EntityTypeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityTypeEdge {
  """
  The item at the end of the edge.
  """
  node: EntityType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type EntityTypeHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: EntityTypeHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the entity
  """
  name: String!
}
"""
A connection to a list of items.
"""
type EntityTypeHistoryConnection {
  """
  A list of edges.
  """
  edges: [EntityTypeHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityTypeHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: EntityTypeHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EntityTypeHistoryOpType is enum for the field operation
"""
enum EntityTypeHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for EntityTypeHistory connections
"""
input EntityTypeHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EntityTypeHistories.
  """
  field: EntityTypeHistoryOrderField!
}
"""
Properties by which EntityTypeHistory connections can be ordered.
"""
enum EntityTypeHistoryOrderField {
  name
}
"""
EntityTypeHistoryWhereInput is used for filtering EntityTypeHistory objects.
Input was generated by ent.
"""
input EntityTypeHistoryWhereInput {
  not: EntityTypeHistoryWhereInput
  and: [EntityTypeHistoryWhereInput!]
  or: [EntityTypeHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: EntityTypeHistoryOpType
  operationNEQ: EntityTypeHistoryOpType
  operationIn: [EntityTypeHistoryOpType!]
  operationNotIn: [EntityTypeHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
Ordering options for EntityType connections
"""
input EntityTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EntityTypes.
  """
  field: EntityTypeOrderField!
}
"""
Properties by which EntityType connections can be ordered.
"""
enum EntityTypeOrderField {
  name
}
"""
EntityTypeWhereInput is used for filtering EntityType objects.
Input was generated by ent.
"""
input EntityTypeWhereInput {
  not: EntityTypeWhereInput
  and: [EntityTypeWhereInput!]
  or: [EntityTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
}
"""
EntityWhereInput is used for filtering Entity objects.
Input was generated by ent.
"""
input EntityWhereInput {
  not: EntityWhereInput
  and: [EntityWhereInput!]
  or: [EntityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  entity_type_id field predicates
  """
  entityTypeID: ID
  entityTypeIDNEQ: ID
  entityTypeIDIn: [ID!]
  entityTypeIDNotIn: [ID!]
  entityTypeIDGT: ID
  entityTypeIDGTE: ID
  entityTypeIDLT: ID
  entityTypeIDLTE: ID
  entityTypeIDContains: ID
  entityTypeIDHasPrefix: ID
  entityTypeIDHasSuffix: ID
  entityTypeIDIsNil: Boolean
  entityTypeIDNotNil: Boolean
  entityTypeIDEqualFold: ID
  entityTypeIDContainsFold: ID
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  contacts edge predicates
  """
  hasContacts: Boolean
  hasContactsWith: [ContactWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentDataWhereInput!]
  """
  notes edge predicates
  """
  hasNotes: Boolean
  hasNotesWith: [NoteWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  entity_type edge predicates
  """
  hasEntityType: Boolean
  hasEntityTypeWith: [EntityTypeWhereInput!]
}
type Event implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  eventID: String
  correlationID: String
  eventType: String!
  metadata: Map
  user: [User!]
  group: [Group!]
  integration: [Integration!]
  organization: [Organization!]
  invite: [Invite!]
  personalAccessToken: [PersonalAccessToken!]
  hush: [Hush!]
  orgmembership: [OrgMembership!]
  groupmembership: [GroupMembership!]
  subscriber: [Subscriber!]
  file: [File!]
}
"""
A connection to a list of items.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EventEdge {
  """
  The item at the end of the edge.
  """
  node: Event
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type EventHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: EventHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  eventID: String
  correlationID: String
  eventType: String!
  metadata: Map
}
"""
A connection to a list of items.
"""
type EventHistoryConnection {
  """
  A list of edges.
  """
  edges: [EventHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EventHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: EventHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EventHistoryOpType is enum for the field operation
"""
enum EventHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
EventHistoryWhereInput is used for filtering EventHistory objects.
Input was generated by ent.
"""
input EventHistoryWhereInput {
  not: EventHistoryWhereInput
  and: [EventHistoryWhereInput!]
  or: [EventHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: EventHistoryOpType
  operationNEQ: EventHistoryOpType
  operationIn: [EventHistoryOpType!]
  operationNotIn: [EventHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  event_id field predicates
  """
  eventID: String
  eventIDNEQ: String
  eventIDIn: [String!]
  eventIDNotIn: [String!]
  eventIDGT: String
  eventIDGTE: String
  eventIDLT: String
  eventIDLTE: String
  eventIDContains: String
  eventIDHasPrefix: String
  eventIDHasSuffix: String
  eventIDIsNil: Boolean
  eventIDNotNil: Boolean
  eventIDEqualFold: String
  eventIDContainsFold: String
  """
  correlation_id field predicates
  """
  correlationID: String
  correlationIDNEQ: String
  correlationIDIn: [String!]
  correlationIDNotIn: [String!]
  correlationIDGT: String
  correlationIDGTE: String
  correlationIDLT: String
  correlationIDLTE: String
  correlationIDContains: String
  correlationIDHasPrefix: String
  correlationIDHasSuffix: String
  correlationIDIsNil: Boolean
  correlationIDNotNil: Boolean
  correlationIDEqualFold: String
  correlationIDContainsFold: String
  """
  event_type field predicates
  """
  eventType: String
  eventTypeNEQ: String
  eventTypeIn: [String!]
  eventTypeNotIn: [String!]
  eventTypeGT: String
  eventTypeGTE: String
  eventTypeLT: String
  eventTypeLTE: String
  eventTypeContains: String
  eventTypeHasPrefix: String
  eventTypeHasSuffix: String
  eventTypeEqualFold: String
  eventTypeContainsFold: String
}
"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  not: EventWhereInput
  and: [EventWhereInput!]
  or: [EventWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  event_id field predicates
  """
  eventID: String
  eventIDNEQ: String
  eventIDIn: [String!]
  eventIDNotIn: [String!]
  eventIDGT: String
  eventIDGTE: String
  eventIDLT: String
  eventIDLTE: String
  eventIDContains: String
  eventIDHasPrefix: String
  eventIDHasSuffix: String
  eventIDIsNil: Boolean
  eventIDNotNil: Boolean
  eventIDEqualFold: String
  eventIDContainsFold: String
  """
  correlation_id field predicates
  """
  correlationID: String
  correlationIDNEQ: String
  correlationIDIn: [String!]
  correlationIDNotIn: [String!]
  correlationIDGT: String
  correlationIDGTE: String
  correlationIDLT: String
  correlationIDLTE: String
  correlationIDContains: String
  correlationIDHasPrefix: String
  correlationIDHasSuffix: String
  correlationIDIsNil: Boolean
  correlationIDNotNil: Boolean
  correlationIDEqualFold: String
  correlationIDContainsFold: String
  """
  event_type field predicates
  """
  eventType: String
  eventTypeNEQ: String
  eventTypeIn: [String!]
  eventTypeNotIn: [String!]
  eventTypeGT: String
  eventTypeGTE: String
  eventTypeLT: String
  eventTypeLTE: String
  eventTypeContains: String
  eventTypeHasPrefix: String
  eventTypeHasSuffix: String
  eventTypeEqualFold: String
  eventTypeContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  group edge predicates
  """
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """
  integration edge predicates
  """
  hasIntegration: Boolean
  hasIntegrationWith: [IntegrationWhereInput!]
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """
  invite edge predicates
  """
  hasInvite: Boolean
  hasInviteWith: [InviteWhereInput!]
  """
  personal_access_token edge predicates
  """
  hasPersonalAccessToken: Boolean
  hasPersonalAccessTokenWith: [PersonalAccessTokenWhereInput!]
  """
  hush edge predicates
  """
  hasHush: Boolean
  hasHushWith: [HushWhereInput!]
  """
  orgmembership edge predicates
  """
  hasOrgmembership: Boolean
  hasOrgmembershipWith: [OrgMembershipWhereInput!]
  """
  groupmembership edge predicates
  """
  hasGroupmembership: Boolean
  hasGroupmembershipWith: [GroupMembershipWhereInput!]
  """
  subscriber edge predicates
  """
  hasSubscriber: Boolean
  hasSubscriberWith: [SubscriberWhereInput!]
  """
  file edge predicates
  """
  hasFile: Boolean
  hasFileWith: [FileWhereInput!]
}
type File implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String!
  """
  the extension of the file provided
  """
  providedFileExtension: String!
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  persistedFileSize: Int
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String!
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  """
  the full URI of the file
  """
  uri: String
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
  user: [User!]
  organization: [Organization!]
  group: [Group!]
  contact: [Contact!]
  entity: [Entity!]
  userSetting: [UserSetting!]
  organizationSetting: [OrganizationSetting!]
  template: [Template!]
  documentData: [DocumentData!]
  events: [Event!]
  program: [Program!]
}
"""
A connection to a list of items.
"""
type FileConnection {
  """
  A list of edges.
  """
  edges: [FileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type FileHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: FileHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String!
  """
  the extension of the file provided
  """
  providedFileExtension: String!
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  persistedFileSize: Int
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String!
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  """
  the full URI of the file
  """
  uri: String
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
}
"""
A connection to a list of items.
"""
type FileHistoryConnection {
  """
  A list of edges.
  """
  edges: [FileHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: FileHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
FileHistoryOpType is enum for the field operation
"""
enum FileHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
FileHistoryWhereInput is used for filtering FileHistory objects.
Input was generated by ent.
"""
input FileHistoryWhereInput {
  not: FileHistoryWhereInput
  and: [FileHistoryWhereInput!]
  or: [FileHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: FileHistoryOpType
  operationNEQ: FileHistoryOpType
  operationIn: [FileHistoryOpType!]
  operationNotIn: [FileHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  provided_file_name field predicates
  """
  providedFileName: String
  providedFileNameNEQ: String
  providedFileNameIn: [String!]
  providedFileNameNotIn: [String!]
  providedFileNameGT: String
  providedFileNameGTE: String
  providedFileNameLT: String
  providedFileNameLTE: String
  providedFileNameContains: String
  providedFileNameHasPrefix: String
  providedFileNameHasSuffix: String
  providedFileNameEqualFold: String
  providedFileNameContainsFold: String
  """
  provided_file_extension field predicates
  """
  providedFileExtension: String
  providedFileExtensionNEQ: String
  providedFileExtensionIn: [String!]
  providedFileExtensionNotIn: [String!]
  providedFileExtensionGT: String
  providedFileExtensionGTE: String
  providedFileExtensionLT: String
  providedFileExtensionLTE: String
  providedFileExtensionContains: String
  providedFileExtensionHasPrefix: String
  providedFileExtensionHasSuffix: String
  providedFileExtensionEqualFold: String
  providedFileExtensionContainsFold: String
  """
  provided_file_size field predicates
  """
  providedFileSize: Int
  providedFileSizeNEQ: Int
  providedFileSizeIn: [Int!]
  providedFileSizeNotIn: [Int!]
  providedFileSizeGT: Int
  providedFileSizeGTE: Int
  providedFileSizeLT: Int
  providedFileSizeLTE: Int
  providedFileSizeIsNil: Boolean
  providedFileSizeNotNil: Boolean
  """
  persisted_file_size field predicates
  """
  persistedFileSize: Int
  persistedFileSizeNEQ: Int
  persistedFileSizeIn: [Int!]
  persistedFileSizeNotIn: [Int!]
  persistedFileSizeGT: Int
  persistedFileSizeGTE: Int
  persistedFileSizeLT: Int
  persistedFileSizeLTE: Int
  persistedFileSizeIsNil: Boolean
  persistedFileSizeNotNil: Boolean
  """
  detected_mime_type field predicates
  """
  detectedMimeType: String
  detectedMimeTypeNEQ: String
  detectedMimeTypeIn: [String!]
  detectedMimeTypeNotIn: [String!]
  detectedMimeTypeGT: String
  detectedMimeTypeGTE: String
  detectedMimeTypeLT: String
  detectedMimeTypeLTE: String
  detectedMimeTypeContains: String
  detectedMimeTypeHasPrefix: String
  detectedMimeTypeHasSuffix: String
  detectedMimeTypeIsNil: Boolean
  detectedMimeTypeNotNil: Boolean
  detectedMimeTypeEqualFold: String
  detectedMimeTypeContainsFold: String
  """
  md5_hash field predicates
  """
  md5Hash: String
  md5HashNEQ: String
  md5HashIn: [String!]
  md5HashNotIn: [String!]
  md5HashGT: String
  md5HashGTE: String
  md5HashLT: String
  md5HashLTE: String
  md5HashContains: String
  md5HashHasPrefix: String
  md5HashHasSuffix: String
  md5HashIsNil: Boolean
  md5HashNotNil: Boolean
  md5HashEqualFold: String
  md5HashContainsFold: String
  """
  detected_content_type field predicates
  """
  detectedContentType: String
  detectedContentTypeNEQ: String
  detectedContentTypeIn: [String!]
  detectedContentTypeNotIn: [String!]
  detectedContentTypeGT: String
  detectedContentTypeGTE: String
  detectedContentTypeLT: String
  detectedContentTypeLTE: String
  detectedContentTypeContains: String
  detectedContentTypeHasPrefix: String
  detectedContentTypeHasSuffix: String
  detectedContentTypeEqualFold: String
  detectedContentTypeContainsFold: String
  """
  store_key field predicates
  """
  storeKey: String
  storeKeyNEQ: String
  storeKeyIn: [String!]
  storeKeyNotIn: [String!]
  storeKeyGT: String
  storeKeyGTE: String
  storeKeyLT: String
  storeKeyLTE: String
  storeKeyContains: String
  storeKeyHasPrefix: String
  storeKeyHasSuffix: String
  storeKeyIsNil: Boolean
  storeKeyNotNil: Boolean
  storeKeyEqualFold: String
  storeKeyContainsFold: String
  """
  category_type field predicates
  """
  categoryType: String
  categoryTypeNEQ: String
  categoryTypeIn: [String!]
  categoryTypeNotIn: [String!]
  categoryTypeGT: String
  categoryTypeGTE: String
  categoryTypeLT: String
  categoryTypeLTE: String
  categoryTypeContains: String
  categoryTypeHasPrefix: String
  categoryTypeHasSuffix: String
  categoryTypeIsNil: Boolean
  categoryTypeNotNil: Boolean
  categoryTypeEqualFold: String
  categoryTypeContainsFold: String
  """
  uri field predicates
  """
  uri: String
  uriNEQ: String
  uriIn: [String!]
  uriNotIn: [String!]
  uriGT: String
  uriGTE: String
  uriLT: String
  uriLTE: String
  uriContains: String
  uriHasPrefix: String
  uriHasSuffix: String
  uriIsNil: Boolean
  uriNotNil: Boolean
  uriEqualFold: String
  uriContainsFold: String
  """
  storage_scheme field predicates
  """
  storageScheme: String
  storageSchemeNEQ: String
  storageSchemeIn: [String!]
  storageSchemeNotIn: [String!]
  storageSchemeGT: String
  storageSchemeGTE: String
  storageSchemeLT: String
  storageSchemeLTE: String
  storageSchemeContains: String
  storageSchemeHasPrefix: String
  storageSchemeHasSuffix: String
  storageSchemeIsNil: Boolean
  storageSchemeNotNil: Boolean
  storageSchemeEqualFold: String
  storageSchemeContainsFold: String
  """
  storage_volume field predicates
  """
  storageVolume: String
  storageVolumeNEQ: String
  storageVolumeIn: [String!]
  storageVolumeNotIn: [String!]
  storageVolumeGT: String
  storageVolumeGTE: String
  storageVolumeLT: String
  storageVolumeLTE: String
  storageVolumeContains: String
  storageVolumeHasPrefix: String
  storageVolumeHasSuffix: String
  storageVolumeIsNil: Boolean
  storageVolumeNotNil: Boolean
  storageVolumeEqualFold: String
  storageVolumeContainsFold: String
  """
  storage_path field predicates
  """
  storagePath: String
  storagePathNEQ: String
  storagePathIn: [String!]
  storagePathNotIn: [String!]
  storagePathGT: String
  storagePathGTE: String
  storagePathLT: String
  storagePathLTE: String
  storagePathContains: String
  storagePathHasPrefix: String
  storagePathHasSuffix: String
  storagePathIsNil: Boolean
  storagePathNotNil: Boolean
  storagePathEqualFold: String
  storagePathContainsFold: String
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  provided_file_name field predicates
  """
  providedFileName: String
  providedFileNameNEQ: String
  providedFileNameIn: [String!]
  providedFileNameNotIn: [String!]
  providedFileNameGT: String
  providedFileNameGTE: String
  providedFileNameLT: String
  providedFileNameLTE: String
  providedFileNameContains: String
  providedFileNameHasPrefix: String
  providedFileNameHasSuffix: String
  providedFileNameEqualFold: String
  providedFileNameContainsFold: String
  """
  provided_file_extension field predicates
  """
  providedFileExtension: String
  providedFileExtensionNEQ: String
  providedFileExtensionIn: [String!]
  providedFileExtensionNotIn: [String!]
  providedFileExtensionGT: String
  providedFileExtensionGTE: String
  providedFileExtensionLT: String
  providedFileExtensionLTE: String
  providedFileExtensionContains: String
  providedFileExtensionHasPrefix: String
  providedFileExtensionHasSuffix: String
  providedFileExtensionEqualFold: String
  providedFileExtensionContainsFold: String
  """
  provided_file_size field predicates
  """
  providedFileSize: Int
  providedFileSizeNEQ: Int
  providedFileSizeIn: [Int!]
  providedFileSizeNotIn: [Int!]
  providedFileSizeGT: Int
  providedFileSizeGTE: Int
  providedFileSizeLT: Int
  providedFileSizeLTE: Int
  providedFileSizeIsNil: Boolean
  providedFileSizeNotNil: Boolean
  """
  persisted_file_size field predicates
  """
  persistedFileSize: Int
  persistedFileSizeNEQ: Int
  persistedFileSizeIn: [Int!]
  persistedFileSizeNotIn: [Int!]
  persistedFileSizeGT: Int
  persistedFileSizeGTE: Int
  persistedFileSizeLT: Int
  persistedFileSizeLTE: Int
  persistedFileSizeIsNil: Boolean
  persistedFileSizeNotNil: Boolean
  """
  detected_mime_type field predicates
  """
  detectedMimeType: String
  detectedMimeTypeNEQ: String
  detectedMimeTypeIn: [String!]
  detectedMimeTypeNotIn: [String!]
  detectedMimeTypeGT: String
  detectedMimeTypeGTE: String
  detectedMimeTypeLT: String
  detectedMimeTypeLTE: String
  detectedMimeTypeContains: String
  detectedMimeTypeHasPrefix: String
  detectedMimeTypeHasSuffix: String
  detectedMimeTypeIsNil: Boolean
  detectedMimeTypeNotNil: Boolean
  detectedMimeTypeEqualFold: String
  detectedMimeTypeContainsFold: String
  """
  md5_hash field predicates
  """
  md5Hash: String
  md5HashNEQ: String
  md5HashIn: [String!]
  md5HashNotIn: [String!]
  md5HashGT: String
  md5HashGTE: String
  md5HashLT: String
  md5HashLTE: String
  md5HashContains: String
  md5HashHasPrefix: String
  md5HashHasSuffix: String
  md5HashIsNil: Boolean
  md5HashNotNil: Boolean
  md5HashEqualFold: String
  md5HashContainsFold: String
  """
  detected_content_type field predicates
  """
  detectedContentType: String
  detectedContentTypeNEQ: String
  detectedContentTypeIn: [String!]
  detectedContentTypeNotIn: [String!]
  detectedContentTypeGT: String
  detectedContentTypeGTE: String
  detectedContentTypeLT: String
  detectedContentTypeLTE: String
  detectedContentTypeContains: String
  detectedContentTypeHasPrefix: String
  detectedContentTypeHasSuffix: String
  detectedContentTypeEqualFold: String
  detectedContentTypeContainsFold: String
  """
  store_key field predicates
  """
  storeKey: String
  storeKeyNEQ: String
  storeKeyIn: [String!]
  storeKeyNotIn: [String!]
  storeKeyGT: String
  storeKeyGTE: String
  storeKeyLT: String
  storeKeyLTE: String
  storeKeyContains: String
  storeKeyHasPrefix: String
  storeKeyHasSuffix: String
  storeKeyIsNil: Boolean
  storeKeyNotNil: Boolean
  storeKeyEqualFold: String
  storeKeyContainsFold: String
  """
  category_type field predicates
  """
  categoryType: String
  categoryTypeNEQ: String
  categoryTypeIn: [String!]
  categoryTypeNotIn: [String!]
  categoryTypeGT: String
  categoryTypeGTE: String
  categoryTypeLT: String
  categoryTypeLTE: String
  categoryTypeContains: String
  categoryTypeHasPrefix: String
  categoryTypeHasSuffix: String
  categoryTypeIsNil: Boolean
  categoryTypeNotNil: Boolean
  categoryTypeEqualFold: String
  categoryTypeContainsFold: String
  """
  uri field predicates
  """
  uri: String
  uriNEQ: String
  uriIn: [String!]
  uriNotIn: [String!]
  uriGT: String
  uriGTE: String
  uriLT: String
  uriLTE: String
  uriContains: String
  uriHasPrefix: String
  uriHasSuffix: String
  uriIsNil: Boolean
  uriNotNil: Boolean
  uriEqualFold: String
  uriContainsFold: String
  """
  storage_scheme field predicates
  """
  storageScheme: String
  storageSchemeNEQ: String
  storageSchemeIn: [String!]
  storageSchemeNotIn: [String!]
  storageSchemeGT: String
  storageSchemeGTE: String
  storageSchemeLT: String
  storageSchemeLTE: String
  storageSchemeContains: String
  storageSchemeHasPrefix: String
  storageSchemeHasSuffix: String
  storageSchemeIsNil: Boolean
  storageSchemeNotNil: Boolean
  storageSchemeEqualFold: String
  storageSchemeContainsFold: String
  """
  storage_volume field predicates
  """
  storageVolume: String
  storageVolumeNEQ: String
  storageVolumeIn: [String!]
  storageVolumeNotIn: [String!]
  storageVolumeGT: String
  storageVolumeGTE: String
  storageVolumeLT: String
  storageVolumeLTE: String
  storageVolumeContains: String
  storageVolumeHasPrefix: String
  storageVolumeHasSuffix: String
  storageVolumeIsNil: Boolean
  storageVolumeNotNil: Boolean
  storageVolumeEqualFold: String
  storageVolumeContainsFold: String
  """
  storage_path field predicates
  """
  storagePath: String
  storagePathNEQ: String
  storagePathIn: [String!]
  storagePathNotIn: [String!]
  storagePathGT: String
  storagePathGTE: String
  storagePathLT: String
  storagePathLTE: String
  storagePathContains: String
  storagePathHasPrefix: String
  storagePathHasSuffix: String
  storagePathIsNil: Boolean
  storagePathNotNil: Boolean
  storagePathEqualFold: String
  storagePathContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """
  group edge predicates
  """
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """
  contact edge predicates
  """
  hasContact: Boolean
  hasContactWith: [ContactWhereInput!]
  """
  entity edge predicates
  """
  hasEntity: Boolean
  hasEntityWith: [EntityWhereInput!]
  """
  user_setting edge predicates
  """
  hasUserSetting: Boolean
  hasUserSettingWith: [UserSettingWhereInput!]
  """
  organization_setting edge predicates
  """
  hasOrganizationSetting: Boolean
  hasOrganizationSettingWith: [OrganizationSettingWhereInput!]
  """
  template edge predicates
  """
  hasTemplate: Boolean
  hasTemplateWith: [TemplateWhereInput!]
  """
  document_data edge predicates
  """
  hasDocumentData: Boolean
  hasDocumentDataWith: [DocumentDataWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  program edge predicates
  """
  hasProgram: Boolean
  hasProgramWith: [ProgramWhereInput!]
}
type Group implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the group - must be unique within the organization
  """
  name: String!
  """
  the groups description
  """
  description: String
  """
  the URL to an auto generated gravatar image for the group
  """
  gravatarLogoURL: String
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  """
  The group's displayed 'friendly' name
  """
  displayName: String!
  owner: Organization
  controlCreators: [Organization!]
  controlObjectiveCreators: [Organization!]
  groupCreators: [Organization!]
  internalPolicyCreators: [Organization!]
  narrativeCreators: [Organization!]
  procedureCreators: [Organization!]
  programCreators: [Organization!]
  riskCreators: [Organization!]
  templateCreators: [Organization!]
  procedureEditors: [Procedure!]
  procedureBlockedGroups: [Procedure!]
  internalPolicyEditors: [InternalPolicy!]
  internalPolicyBlockedGroups: [InternalPolicy!]
  programEditors: [Program!]
  programBlockedGroups: [Program!]
  programViewers: [Program!]
  riskEditors: [Risk!]
  riskBlockedGroups: [Risk!]
  riskViewers: [Risk!]
  controlObjectiveEditors: [ControlObjective!]
  controlObjectiveBlockedGroups: [ControlObjective!]
  controlObjectiveViewers: [ControlObjective!]
  controlEditors: [Control!]
  controlBlockedGroups: [Control!]
  controlViewers: [Control!]
  narrativeEditors: [Narrative!]
  narrativeBlockedGroups: [Narrative!]
  narrativeViewers: [Narrative!]
  setting: GroupSetting!
  users: [User!]
  events: [Event!]
  integrations: [Integration!]
  files: [File!]
  tasks: [Task!]
  members: [GroupMembership!]
}
"""
A connection to a list of items.
"""
type GroupConnection {
  """
  A list of edges.
  """
  edges: [GroupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupEdge {
  """
  The item at the end of the edge.
  """
  node: Group
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type GroupHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: GroupHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the group - must be unique within the organization
  """
  name: String!
  """
  the groups description
  """
  description: String
  """
  the URL to an auto generated gravatar image for the group
  """
  gravatarLogoURL: String
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  """
  The group's displayed 'friendly' name
  """
  displayName: String!
}
"""
A connection to a list of items.
"""
type GroupHistoryConnection {
  """
  A list of edges.
  """
  edges: [GroupHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: GroupHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GroupHistoryOpType is enum for the field operation
"""
enum GroupHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for GroupHistory connections
"""
input GroupHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order GroupHistories.
  """
  field: GroupHistoryOrderField!
}
"""
Properties by which GroupHistory connections can be ordered.
"""
enum GroupHistoryOrderField {
  name
  display_name
}
"""
GroupHistoryWhereInput is used for filtering GroupHistory objects.
Input was generated by ent.
"""
input GroupHistoryWhereInput {
  not: GroupHistoryWhereInput
  and: [GroupHistoryWhereInput!]
  or: [GroupHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: GroupHistoryOpType
  operationNEQ: GroupHistoryOpType
  operationIn: [GroupHistoryOpType!]
  operationNotIn: [GroupHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
}
type GroupMembership implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  role: GroupMembershipRole!
  groupID: ID!
  userID: ID!
  group: Group!
  user: User!
  events: [Event!]
}
"""
A connection to a list of items.
"""
type GroupMembershipConnection {
  """
  A list of edges.
  """
  edges: [GroupMembershipEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupMembershipEdge {
  """
  The item at the end of the edge.
  """
  node: GroupMembership
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type GroupMembershipHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: GroupMembershipHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  role: GroupMembershipHistoryRole!
  groupID: String!
  userID: String!
}
"""
A connection to a list of items.
"""
type GroupMembershipHistoryConnection {
  """
  A list of edges.
  """
  edges: [GroupMembershipHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupMembershipHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: GroupMembershipHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GroupMembershipHistoryOpType is enum for the field operation
"""
enum GroupMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
GroupMembershipHistoryRole is enum for the field role
"""
enum GroupMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
GroupMembershipHistoryWhereInput is used for filtering GroupMembershipHistory objects.
Input was generated by ent.
"""
input GroupMembershipHistoryWhereInput {
  not: GroupMembershipHistoryWhereInput
  and: [GroupMembershipHistoryWhereInput!]
  or: [GroupMembershipHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: GroupMembershipHistoryOpType
  operationNEQ: GroupMembershipHistoryOpType
  operationIn: [GroupMembershipHistoryOpType!]
  operationNotIn: [GroupMembershipHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  role field predicates
  """
  role: GroupMembershipHistoryRole
  roleNEQ: GroupMembershipHistoryRole
  roleIn: [GroupMembershipHistoryRole!]
  roleNotIn: [GroupMembershipHistoryRole!]
  """
  group_id field predicates
  """
  groupID: String
  groupIDNEQ: String
  groupIDIn: [String!]
  groupIDNotIn: [String!]
  groupIDGT: String
  groupIDGTE: String
  groupIDLT: String
  groupIDLTE: String
  groupIDContains: String
  groupIDHasPrefix: String
  groupIDHasSuffix: String
  groupIDEqualFold: String
  groupIDContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
}
"""
GroupMembershipRole is enum for the field role
"""
enum GroupMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
GroupMembershipWhereInput is used for filtering GroupMembership objects.
Input was generated by ent.
"""
input GroupMembershipWhereInput {
  not: GroupMembershipWhereInput
  and: [GroupMembershipWhereInput!]
  or: [GroupMembershipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  role field predicates
  """
  role: GroupMembershipRole
  roleNEQ: GroupMembershipRole
  roleIn: [GroupMembershipRole!]
  roleNotIn: [GroupMembershipRole!]
}
"""
Ordering options for Group connections
"""
input GroupOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Groups.
  """
  field: GroupOrderField!
}
"""
Properties by which Group connections can be ordered.
"""
enum GroupOrderField {
  name
  display_name
}
type GroupSetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingVisibility!
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingJoinPolicy!
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  """
  the group id associated with the settings
  """
  groupID: ID
  group: Group
}
"""
A connection to a list of items.
"""
type GroupSettingConnection {
  """
  A list of edges.
  """
  edges: [GroupSettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupSettingEdge {
  """
  The item at the end of the edge.
  """
  node: GroupSetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type GroupSettingHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: GroupSettingHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingHistoryVisibility!
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingHistoryJoinPolicy!
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  """
  the group id associated with the settings
  """
  groupID: String
}
"""
A connection to a list of items.
"""
type GroupSettingHistoryConnection {
  """
  A list of edges.
  """
  edges: [GroupSettingHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupSettingHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: GroupSettingHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GroupSettingHistoryJoinPolicy is enum for the field join_policy
"""
enum GroupSettingHistoryJoinPolicy @goModel(model: "github.com/theopenlane/core/pkg/enums.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}
"""
GroupSettingHistoryOpType is enum for the field operation
"""
enum GroupSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
GroupSettingHistoryVisibility is enum for the field visibility
"""
enum GroupSettingHistoryVisibility @goModel(model: "github.com/theopenlane/core/pkg/enums.Visibility") {
  PUBLIC
  PRIVATE
}
"""
GroupSettingHistoryWhereInput is used for filtering GroupSettingHistory objects.
Input was generated by ent.
"""
input GroupSettingHistoryWhereInput {
  not: GroupSettingHistoryWhereInput
  and: [GroupSettingHistoryWhereInput!]
  or: [GroupSettingHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: GroupSettingHistoryOpType
  operationNEQ: GroupSettingHistoryOpType
  operationIn: [GroupSettingHistoryOpType!]
  operationNotIn: [GroupSettingHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  visibility field predicates
  """
  visibility: GroupSettingHistoryVisibility
  visibilityNEQ: GroupSettingHistoryVisibility
  visibilityIn: [GroupSettingHistoryVisibility!]
  visibilityNotIn: [GroupSettingHistoryVisibility!]
  """
  join_policy field predicates
  """
  joinPolicy: GroupSettingHistoryJoinPolicy
  joinPolicyNEQ: GroupSettingHistoryJoinPolicy
  joinPolicyIn: [GroupSettingHistoryJoinPolicy!]
  joinPolicyNotIn: [GroupSettingHistoryJoinPolicy!]
  """
  sync_to_slack field predicates
  """
  syncToSlack: Boolean
  syncToSlackNEQ: Boolean
  syncToSlackIsNil: Boolean
  syncToSlackNotNil: Boolean
  """
  sync_to_github field predicates
  """
  syncToGithub: Boolean
  syncToGithubNEQ: Boolean
  syncToGithubIsNil: Boolean
  syncToGithubNotNil: Boolean
  """
  group_id field predicates
  """
  groupID: String
  groupIDNEQ: String
  groupIDIn: [String!]
  groupIDNotIn: [String!]
  groupIDGT: String
  groupIDGTE: String
  groupIDLT: String
  groupIDLTE: String
  groupIDContains: String
  groupIDHasPrefix: String
  groupIDHasSuffix: String
  groupIDIsNil: Boolean
  groupIDNotNil: Boolean
  groupIDEqualFold: String
  groupIDContainsFold: String
}
"""
GroupSettingJoinPolicy is enum for the field join_policy
"""
enum GroupSettingJoinPolicy @goModel(model: "github.com/theopenlane/core/pkg/enums.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}
"""
GroupSettingVisibility is enum for the field visibility
"""
enum GroupSettingVisibility @goModel(model: "github.com/theopenlane/core/pkg/enums.Visibility") {
  PUBLIC
  PRIVATE
}
"""
GroupSettingWhereInput is used for filtering GroupSetting objects.
Input was generated by ent.
"""
input GroupSettingWhereInput {
  not: GroupSettingWhereInput
  and: [GroupSettingWhereInput!]
  or: [GroupSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  visibility field predicates
  """
  visibility: GroupSettingVisibility
  visibilityNEQ: GroupSettingVisibility
  visibilityIn: [GroupSettingVisibility!]
  visibilityNotIn: [GroupSettingVisibility!]
  """
  join_policy field predicates
  """
  joinPolicy: GroupSettingJoinPolicy
  joinPolicyNEQ: GroupSettingJoinPolicy
  joinPolicyIn: [GroupSettingJoinPolicy!]
  joinPolicyNotIn: [GroupSettingJoinPolicy!]
  """
  sync_to_slack field predicates
  """
  syncToSlack: Boolean
  syncToSlackNEQ: Boolean
  syncToSlackIsNil: Boolean
  syncToSlackNotNil: Boolean
  """
  sync_to_github field predicates
  """
  syncToGithub: Boolean
  syncToGithubNEQ: Boolean
  syncToGithubIsNil: Boolean
  syncToGithubNotNil: Boolean
  """
  group_id field predicates
  """
  groupID: ID
  groupIDNEQ: ID
  groupIDIn: [ID!]
  groupIDNotIn: [ID!]
  groupIDGT: ID
  groupIDGTE: ID
  groupIDLT: ID
  groupIDLTE: ID
  groupIDContains: ID
  groupIDHasPrefix: ID
  groupIDHasSuffix: ID
  groupIDIsNil: Boolean
  groupIDNotNil: Boolean
  groupIDEqualFold: ID
  groupIDContainsFold: ID
  """
  group edge predicates
  """
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  control_creators edge predicates
  """
  hasControlCreators: Boolean
  hasControlCreatorsWith: [OrganizationWhereInput!]
  """
  control_objective_creators edge predicates
  """
  hasControlObjectiveCreators: Boolean
  hasControlObjectiveCreatorsWith: [OrganizationWhereInput!]
  """
  group_creators edge predicates
  """
  hasGroupCreators: Boolean
  hasGroupCreatorsWith: [OrganizationWhereInput!]
  """
  internal_policy_creators edge predicates
  """
  hasInternalPolicyCreators: Boolean
  hasInternalPolicyCreatorsWith: [OrganizationWhereInput!]
  """
  narrative_creators edge predicates
  """
  hasNarrativeCreators: Boolean
  hasNarrativeCreatorsWith: [OrganizationWhereInput!]
  """
  procedure_creators edge predicates
  """
  hasProcedureCreators: Boolean
  hasProcedureCreatorsWith: [OrganizationWhereInput!]
  """
  program_creators edge predicates
  """
  hasProgramCreators: Boolean
  hasProgramCreatorsWith: [OrganizationWhereInput!]
  """
  risk_creators edge predicates
  """
  hasRiskCreators: Boolean
  hasRiskCreatorsWith: [OrganizationWhereInput!]
  """
  template_creators edge predicates
  """
  hasTemplateCreators: Boolean
  hasTemplateCreatorsWith: [OrganizationWhereInput!]
  """
  procedure_editors edge predicates
  """
  hasProcedureEditors: Boolean
  hasProcedureEditorsWith: [ProcedureWhereInput!]
  """
  procedure_blocked_groups edge predicates
  """
  hasProcedureBlockedGroups: Boolean
  hasProcedureBlockedGroupsWith: [ProcedureWhereInput!]
  """
  internal_policy_editors edge predicates
  """
  hasInternalPolicyEditors: Boolean
  hasInternalPolicyEditorsWith: [InternalPolicyWhereInput!]
  """
  internal_policy_blocked_groups edge predicates
  """
  hasInternalPolicyBlockedGroups: Boolean
  hasInternalPolicyBlockedGroupsWith: [InternalPolicyWhereInput!]
  """
  program_editors edge predicates
  """
  hasProgramEditors: Boolean
  hasProgramEditorsWith: [ProgramWhereInput!]
  """
  program_blocked_groups edge predicates
  """
  hasProgramBlockedGroups: Boolean
  hasProgramBlockedGroupsWith: [ProgramWhereInput!]
  """
  program_viewers edge predicates
  """
  hasProgramViewers: Boolean
  hasProgramViewersWith: [ProgramWhereInput!]
  """
  risk_editors edge predicates
  """
  hasRiskEditors: Boolean
  hasRiskEditorsWith: [RiskWhereInput!]
  """
  risk_blocked_groups edge predicates
  """
  hasRiskBlockedGroups: Boolean
  hasRiskBlockedGroupsWith: [RiskWhereInput!]
  """
  risk_viewers edge predicates
  """
  hasRiskViewers: Boolean
  hasRiskViewersWith: [RiskWhereInput!]
  """
  control_objective_editors edge predicates
  """
  hasControlObjectiveEditors: Boolean
  hasControlObjectiveEditorsWith: [ControlObjectiveWhereInput!]
  """
  control_objective_blocked_groups edge predicates
  """
  hasControlObjectiveBlockedGroups: Boolean
  hasControlObjectiveBlockedGroupsWith: [ControlObjectiveWhereInput!]
  """
  control_objective_viewers edge predicates
  """
  hasControlObjectiveViewers: Boolean
  hasControlObjectiveViewersWith: [ControlObjectiveWhereInput!]
  """
  control_editors edge predicates
  """
  hasControlEditors: Boolean
  hasControlEditorsWith: [ControlWhereInput!]
  """
  control_blocked_groups edge predicates
  """
  hasControlBlockedGroups: Boolean
  hasControlBlockedGroupsWith: [ControlWhereInput!]
  """
  control_viewers edge predicates
  """
  hasControlViewers: Boolean
  hasControlViewersWith: [ControlWhereInput!]
  """
  narrative_editors edge predicates
  """
  hasNarrativeEditors: Boolean
  hasNarrativeEditorsWith: [NarrativeWhereInput!]
  """
  narrative_blocked_groups edge predicates
  """
  hasNarrativeBlockedGroups: Boolean
  hasNarrativeBlockedGroupsWith: [NarrativeWhereInput!]
  """
  narrative_viewers edge predicates
  """
  hasNarrativeViewers: Boolean
  hasNarrativeViewersWith: [NarrativeWhereInput!]
  """
  setting edge predicates
  """
  hasSetting: Boolean
  hasSettingWith: [GroupSettingWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  members edge predicates
  """
  hasMembers: Boolean
  hasMembersWith: [GroupMembershipWhereInput!]
}
type Hush implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String!
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  """
  the generic name of a secret associated with the organization
  """
  secretName: String
  """
  the integration associated with the secret
  """
  integrations: [Integration!]
  organization: [Organization!]
  events: [Event!]
}
"""
A connection to a list of items.
"""
type HushConnection {
  """
  A list of edges.
  """
  edges: [HushEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HushEdge {
  """
  The item at the end of the edge.
  """
  node: Hush
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type HushHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: HushHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String!
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  """
  the generic name of a secret associated with the organization
  """
  secretName: String
}
"""
A connection to a list of items.
"""
type HushHistoryConnection {
  """
  A list of edges.
  """
  edges: [HushHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HushHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: HushHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
HushHistoryOpType is enum for the field operation
"""
enum HushHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for HushHistory connections
"""
input HushHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order HushHistories.
  """
  field: HushHistoryOrderField!
}
"""
Properties by which HushHistory connections can be ordered.
"""
enum HushHistoryOrderField {
  name
  kind
}
"""
HushHistoryWhereInput is used for filtering HushHistory objects.
Input was generated by ent.
"""
input HushHistoryWhereInput {
  not: HushHistoryWhereInput
  and: [HushHistoryWhereInput!]
  or: [HushHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: HushHistoryOpType
  operationNEQ: HushHistoryOpType
  operationIn: [HushHistoryOpType!]
  operationNotIn: [HushHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
  """
  secret_name field predicates
  """
  secretName: String
  secretNameNEQ: String
  secretNameIn: [String!]
  secretNameNotIn: [String!]
  secretNameGT: String
  secretNameGTE: String
  secretNameLT: String
  secretNameLTE: String
  secretNameContains: String
  secretNameHasPrefix: String
  secretNameHasSuffix: String
  secretNameIsNil: Boolean
  secretNameNotNil: Boolean
  secretNameEqualFold: String
  secretNameContainsFold: String
}
"""
Ordering options for Hush connections
"""
input HushOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Hushes.
  """
  field: HushOrderField!
}
"""
Properties by which Hush connections can be ordered.
"""
enum HushOrderField {
  name
  kind
}
"""
HushWhereInput is used for filtering Hush objects.
Input was generated by ent.
"""
input HushWhereInput {
  not: HushWhereInput
  and: [HushWhereInput!]
  or: [HushWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
  """
  secret_name field predicates
  """
  secretName: String
  secretNameNEQ: String
  secretNameIn: [String!]
  secretNameNotIn: [String!]
  secretNameGT: String
  secretNameGTE: String
  secretNameLT: String
  secretNameLTE: String
  secretNameContains: String
  secretNameHasPrefix: String
  secretNameHasSuffix: String
  secretNameIsNil: Boolean
  secretNameNotNil: Boolean
  secretNameEqualFold: String
  secretNameContainsFold: String
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type Integration implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the integration - must be unique within the organization
  """
  name: String!
  """
  a description of the integration
  """
  description: String
  kind: String
  owner: Organization
  """
  the secrets associated with the integration
  """
  secrets: [Hush!]
  events: [Event!]
}
"""
A connection to a list of items.
"""
type IntegrationConnection {
  """
  A list of edges.
  """
  edges: [IntegrationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type IntegrationEdge {
  """
  The item at the end of the edge.
  """
  node: Integration
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type IntegrationHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: IntegrationHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the integration - must be unique within the organization
  """
  name: String!
  """
  a description of the integration
  """
  description: String
  kind: String
}
"""
A connection to a list of items.
"""
type IntegrationHistoryConnection {
  """
  A list of edges.
  """
  edges: [IntegrationHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type IntegrationHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: IntegrationHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
IntegrationHistoryOpType is enum for the field operation
"""
enum IntegrationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for IntegrationHistory connections
"""
input IntegrationHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order IntegrationHistories.
  """
  field: IntegrationHistoryOrderField!
}
"""
Properties by which IntegrationHistory connections can be ordered.
"""
enum IntegrationHistoryOrderField {
  name
  kind
}
"""
IntegrationHistoryWhereInput is used for filtering IntegrationHistory objects.
Input was generated by ent.
"""
input IntegrationHistoryWhereInput {
  not: IntegrationHistoryWhereInput
  and: [IntegrationHistoryWhereInput!]
  or: [IntegrationHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: IntegrationHistoryOpType
  operationNEQ: IntegrationHistoryOpType
  operationIn: [IntegrationHistoryOpType!]
  operationNotIn: [IntegrationHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
}
"""
Ordering options for Integration connections
"""
input IntegrationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Integrations.
  """
  field: IntegrationOrderField!
}
"""
Properties by which Integration connections can be ordered.
"""
enum IntegrationOrderField {
  name
  kind
}
"""
IntegrationWhereInput is used for filtering Integration objects.
Input was generated by ent.
"""
input IntegrationWhereInput {
  not: IntegrationWhereInput
  and: [IntegrationWhereInput!]
  or: [IntegrationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIsNil: Boolean
  kindNotNil: Boolean
  kindEqualFold: String
  kindContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  secrets edge predicates
  """
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type InternalPolicy implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the policy
  """
  name: String!
  """
  description of the policy
  """
  description: String
  """
  status of the policy
  """
  status: String
  """
  type of the policy
  """
  policyType: String
  """
  version of the policy
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the policy
  """
  background: String
  """
  json data for the policy document
  """
  details: Map
  owner: Organization
  """
  groups that are blocked from viewing or editing the risk
  """
  blockedGroups: [Group!]
  """
  provides edit access to the risk to members of the group
  """
  editors: [Group!]
  controlObjectives: [ControlObjective!]
  controls: [Control!]
  procedures: [Procedure!]
  narratives: [Narrative!]
  tasks: [Task!]
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type InternalPolicyConnection {
  """
  A list of edges.
  """
  edges: [InternalPolicyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type InternalPolicyEdge {
  """
  The item at the end of the edge.
  """
  node: InternalPolicy
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type InternalPolicyHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: InternalPolicyHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the policy
  """
  name: String!
  """
  description of the policy
  """
  description: String
  """
  status of the policy
  """
  status: String
  """
  type of the policy
  """
  policyType: String
  """
  version of the policy
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the policy
  """
  background: String
  """
  json data for the policy document
  """
  details: Map
}
"""
A connection to a list of items.
"""
type InternalPolicyHistoryConnection {
  """
  A list of edges.
  """
  edges: [InternalPolicyHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type InternalPolicyHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: InternalPolicyHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
InternalPolicyHistoryOpType is enum for the field operation
"""
enum InternalPolicyHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
InternalPolicyHistoryWhereInput is used for filtering InternalPolicyHistory objects.
Input was generated by ent.
"""
input InternalPolicyHistoryWhereInput {
  not: InternalPolicyHistoryWhereInput
  and: [InternalPolicyHistoryWhereInput!]
  or: [InternalPolicyHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: InternalPolicyHistoryOpType
  operationNEQ: InternalPolicyHistoryOpType
  operationIn: [InternalPolicyHistoryOpType!]
  operationNotIn: [InternalPolicyHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  policy_type field predicates
  """
  policyType: String
  policyTypeNEQ: String
  policyTypeIn: [String!]
  policyTypeNotIn: [String!]
  policyTypeGT: String
  policyTypeGTE: String
  policyTypeLT: String
  policyTypeLTE: String
  policyTypeContains: String
  policyTypeHasPrefix: String
  policyTypeHasSuffix: String
  policyTypeIsNil: Boolean
  policyTypeNotNil: Boolean
  policyTypeEqualFold: String
  policyTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  purpose_and_scope field predicates
  """
  purposeAndScope: String
  purposeAndScopeNEQ: String
  purposeAndScopeIn: [String!]
  purposeAndScopeNotIn: [String!]
  purposeAndScopeGT: String
  purposeAndScopeGTE: String
  purposeAndScopeLT: String
  purposeAndScopeLTE: String
  purposeAndScopeContains: String
  purposeAndScopeHasPrefix: String
  purposeAndScopeHasSuffix: String
  purposeAndScopeIsNil: Boolean
  purposeAndScopeNotNil: Boolean
  purposeAndScopeEqualFold: String
  purposeAndScopeContainsFold: String
  """
  background field predicates
  """
  background: String
  backgroundNEQ: String
  backgroundIn: [String!]
  backgroundNotIn: [String!]
  backgroundGT: String
  backgroundGTE: String
  backgroundLT: String
  backgroundLTE: String
  backgroundContains: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIsNil: Boolean
  backgroundNotNil: Boolean
  backgroundEqualFold: String
  backgroundContainsFold: String
}
"""
InternalPolicyWhereInput is used for filtering InternalPolicy objects.
Input was generated by ent.
"""
input InternalPolicyWhereInput {
  not: InternalPolicyWhereInput
  and: [InternalPolicyWhereInput!]
  or: [InternalPolicyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  policy_type field predicates
  """
  policyType: String
  policyTypeNEQ: String
  policyTypeIn: [String!]
  policyTypeNotIn: [String!]
  policyTypeGT: String
  policyTypeGTE: String
  policyTypeLT: String
  policyTypeLTE: String
  policyTypeContains: String
  policyTypeHasPrefix: String
  policyTypeHasSuffix: String
  policyTypeIsNil: Boolean
  policyTypeNotNil: Boolean
  policyTypeEqualFold: String
  policyTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  purpose_and_scope field predicates
  """
  purposeAndScope: String
  purposeAndScopeNEQ: String
  purposeAndScopeIn: [String!]
  purposeAndScopeNotIn: [String!]
  purposeAndScopeGT: String
  purposeAndScopeGTE: String
  purposeAndScopeLT: String
  purposeAndScopeLTE: String
  purposeAndScopeContains: String
  purposeAndScopeHasPrefix: String
  purposeAndScopeHasSuffix: String
  purposeAndScopeIsNil: Boolean
  purposeAndScopeNotNil: Boolean
  purposeAndScopeEqualFold: String
  purposeAndScopeContainsFold: String
  """
  background field predicates
  """
  background: String
  backgroundNEQ: String
  backgroundIn: [String!]
  backgroundNotIn: [String!]
  backgroundGT: String
  backgroundGTE: String
  backgroundLT: String
  backgroundLTE: String
  backgroundContains: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIsNil: Boolean
  backgroundNotNil: Boolean
  backgroundEqualFold: String
  backgroundContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
type Invite implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the expiration date of the invitation token which defaults to 14 days in the future from creation
  """
  expires: Time
  """
  the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization
  """
  recipient: String!
  """
  the status of the invitation
  """
  status: InviteInviteStatus!
  role: InviteRole!
  """
  the number of attempts made to perform email send of the invitation, maximum of 5
  """
  sendAttempts: Int!
  """
  the user who initiated the invitation
  """
  requestorID: String
  owner: Organization
  events: [Event!]
}
"""
A connection to a list of items.
"""
type InviteConnection {
  """
  A list of edges.
  """
  edges: [InviteEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type InviteEdge {
  """
  The item at the end of the edge.
  """
  node: Invite
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
InviteInviteStatus is enum for the field status
"""
enum InviteInviteStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.InviteStatus") {
  INVITATION_SENT
  APPROVAL_REQUIRED
  INVITATION_ACCEPTED
  INVITATION_EXPIRED
}
"""
InviteRole is enum for the field role
"""
enum InviteRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
InviteWhereInput is used for filtering Invite objects.
Input was generated by ent.
"""
input InviteWhereInput {
  not: InviteWhereInput
  and: [InviteWhereInput!]
  or: [InviteWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  expires field predicates
  """
  expires: Time
  expiresNEQ: Time
  expiresIn: [Time!]
  expiresNotIn: [Time!]
  expiresGT: Time
  expiresGTE: Time
  expiresLT: Time
  expiresLTE: Time
  expiresIsNil: Boolean
  expiresNotNil: Boolean
  """
  recipient field predicates
  """
  recipient: String
  recipientNEQ: String
  recipientIn: [String!]
  recipientNotIn: [String!]
  recipientGT: String
  recipientGTE: String
  recipientLT: String
  recipientLTE: String
  recipientContains: String
  recipientHasPrefix: String
  recipientHasSuffix: String
  recipientEqualFold: String
  recipientContainsFold: String
  """
  status field predicates
  """
  status: InviteInviteStatus
  statusNEQ: InviteInviteStatus
  statusIn: [InviteInviteStatus!]
  statusNotIn: [InviteInviteStatus!]
  """
  role field predicates
  """
  role: InviteRole
  roleNEQ: InviteRole
  roleIn: [InviteRole!]
  roleNotIn: [InviteRole!]
  """
  send_attempts field predicates
  """
  sendAttempts: Int
  sendAttemptsNEQ: Int
  sendAttemptsIn: [Int!]
  sendAttemptsNotIn: [Int!]
  sendAttemptsGT: Int
  sendAttemptsGTE: Int
  sendAttemptsLT: Int
  sendAttemptsLTE: Int
  """
  requestor_id field predicates
  """
  requestorID: String
  requestorIDNEQ: String
  requestorIDIn: [String!]
  requestorIDNotIn: [String!]
  requestorIDGT: String
  requestorIDGTE: String
  requestorIDLT: String
  requestorIDLTE: String
  requestorIDContains: String
  requestorIDHasPrefix: String
  requestorIDHasSuffix: String
  requestorIDIsNil: Boolean
  requestorIDNotNil: Boolean
  requestorIDEqualFold: String
  requestorIDContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
"""
A valid JSON string.
"""
scalar JSON
"""
The builtin Map type
"""
scalar Map
type Narrative implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID!
  """
  the name of the narrative
  """
  name: String!
  """
  the description of the narrative
  """
  description: String
  """
  which controls are satisfied by the narrative
  """
  satisfies: String
  """
  json data for the narrative document
  """
  details: Map
  owner: Organization!
  """
  groups that are blocked from viewing or editing the risk
  """
  blockedGroups: [Group!]
  """
  provides edit access to the risk to members of the group
  """
  editors: [Group!]
  """
  provides view access to the risk to members of the group
  """
  viewers: [Group!]
  internalPolicy: [InternalPolicy!]
  control: [Control!]
  procedure: [Procedure!]
  controlObjective: [ControlObjective!]
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type NarrativeConnection {
  """
  A list of edges.
  """
  edges: [NarrativeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NarrativeEdge {
  """
  The item at the end of the edge.
  """
  node: Narrative
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type NarrativeHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: NarrativeHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String!
  """
  the name of the narrative
  """
  name: String!
  """
  the description of the narrative
  """
  description: String
  """
  which controls are satisfied by the narrative
  """
  satisfies: String
  """
  json data for the narrative document
  """
  details: Map
}
"""
A connection to a list of items.
"""
type NarrativeHistoryConnection {
  """
  A list of edges.
  """
  edges: [NarrativeHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NarrativeHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: NarrativeHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
NarrativeHistoryOpType is enum for the field operation
"""
enum NarrativeHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
NarrativeHistoryWhereInput is used for filtering NarrativeHistory objects.
Input was generated by ent.
"""
input NarrativeHistoryWhereInput {
  not: NarrativeHistoryWhereInput
  and: [NarrativeHistoryWhereInput!]
  or: [NarrativeHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: NarrativeHistoryOpType
  operationNEQ: NarrativeHistoryOpType
  operationIn: [NarrativeHistoryOpType!]
  operationNotIn: [NarrativeHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
}
"""
NarrativeWhereInput is used for filtering Narrative objects.
Input was generated by ent.
"""
input NarrativeWhereInput {
  not: NarrativeWhereInput
  and: [NarrativeWhereInput!]
  or: [NarrativeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  internal_policy edge predicates
  """
  hasInternalPolicy: Boolean
  hasInternalPolicyWith: [InternalPolicyWhereInput!]
  """
  control edge predicates
  """
  hasControl: Boolean
  hasControlWith: [ControlWhereInput!]
  """
  procedure edge predicates
  """
  hasProcedure: Boolean
  hasProcedureWith: [ProcedureWhereInput!]
  """
  control_objective edge predicates
  """
  hasControlObjective: Boolean
  hasControlObjectiveWith: [ControlObjectiveWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/theopenlane/core/internal/ent/generated.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Note implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the text of the note
  """
  text: String!
  owner: Organization
  entity: Entity
  subcontrols: [Subcontrol!]
  program: [Program!]
}
"""
A connection to a list of items.
"""
type NoteConnection {
  """
  A list of edges.
  """
  edges: [NoteEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NoteEdge {
  """
  The item at the end of the edge.
  """
  node: Note
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type NoteHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: NoteHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the text of the note
  """
  text: String!
}
"""
A connection to a list of items.
"""
type NoteHistoryConnection {
  """
  A list of edges.
  """
  edges: [NoteHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NoteHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: NoteHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
NoteHistoryOpType is enum for the field operation
"""
enum NoteHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
NoteHistoryWhereInput is used for filtering NoteHistory objects.
Input was generated by ent.
"""
input NoteHistoryWhereInput {
  not: NoteHistoryWhereInput
  and: [NoteHistoryWhereInput!]
  or: [NoteHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: NoteHistoryOpType
  operationNEQ: NoteHistoryOpType
  operationIn: [NoteHistoryOpType!]
  operationNotIn: [NoteHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
}
"""
NoteWhereInput is used for filtering Note objects.
Input was generated by ent.
"""
input NoteWhereInput {
  not: NoteWhereInput
  and: [NoteWhereInput!]
  or: [NoteWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  entity edge predicates
  """
  hasEntity: Boolean
  hasEntityWith: [EntityWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  program edge predicates
  """
  hasProgram: Boolean
  hasProgramWith: [ProgramWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
type OrgMembership implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  role: OrgMembershipRole!
  organizationID: ID!
  userID: ID!
  organization: Organization!
  user: User!
  events: [Event!]
}
"""
A connection to a list of items.
"""
type OrgMembershipConnection {
  """
  A list of edges.
  """
  edges: [OrgMembershipEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgMembershipEdge {
  """
  The item at the end of the edge.
  """
  node: OrgMembership
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrgMembershipHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrgMembershipHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  role: OrgMembershipHistoryRole!
  organizationID: String!
  userID: String!
}
"""
A connection to a list of items.
"""
type OrgMembershipHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrgMembershipHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgMembershipHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrgMembershipHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrgMembershipHistoryOpType is enum for the field operation
"""
enum OrgMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
OrgMembershipHistoryRole is enum for the field role
"""
enum OrgMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  OWNER
}
"""
OrgMembershipHistoryWhereInput is used for filtering OrgMembershipHistory objects.
Input was generated by ent.
"""
input OrgMembershipHistoryWhereInput {
  not: OrgMembershipHistoryWhereInput
  and: [OrgMembershipHistoryWhereInput!]
  or: [OrgMembershipHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrgMembershipHistoryOpType
  operationNEQ: OrgMembershipHistoryOpType
  operationIn: [OrgMembershipHistoryOpType!]
  operationNotIn: [OrgMembershipHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  role field predicates
  """
  role: OrgMembershipHistoryRole
  roleNEQ: OrgMembershipHistoryRole
  roleIn: [OrgMembershipHistoryRole!]
  roleNotIn: [OrgMembershipHistoryRole!]
  """
  organization_id field predicates
  """
  organizationID: String
  organizationIDNEQ: String
  organizationIDIn: [String!]
  organizationIDNotIn: [String!]
  organizationIDGT: String
  organizationIDGTE: String
  organizationIDLT: String
  organizationIDLTE: String
  organizationIDContains: String
  organizationIDHasPrefix: String
  organizationIDHasSuffix: String
  organizationIDEqualFold: String
  organizationIDContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
}
"""
OrgMembershipRole is enum for the field role
"""
enum OrgMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  OWNER
}
"""
OrgMembershipWhereInput is used for filtering OrgMembership objects.
Input was generated by ent.
"""
input OrgMembershipWhereInput {
  not: OrgMembershipWhereInput
  and: [OrgMembershipWhereInput!]
  or: [OrgMembershipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  role field predicates
  """
  role: OrgMembershipRole
  roleNEQ: OrgMembershipRole
  roleIn: [OrgMembershipRole!]
  roleNotIn: [OrgMembershipRole!]
}
type OrgSubscription implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the stripe subscription id
  """
  stripeSubscriptionID: String
  """
  the common name of the product tier the subscription is associated with, e.g. starter tier
  """
  productTier: String
  """
  the price of the product tier
  """
  productPrice: Price
  """
  the product id that represents the tier in stripe
  """
  stripeProductTierID: String
  """
  the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
  """
  stripeSubscriptionStatus: String
  """
  indicates if the subscription is active
  """
  active: Boolean!
  """
  the customer ID the subscription is associated to
  """
  stripeCustomerID: String
  """
  the time the subscription is set to expire; only populated if subscription is cancelled
  """
  expiresAt: Time
  """
  the features associated with the subscription
  """
  features: [String!]
  """
  the feature lookup keys associated with the subscription
  """
  featureLookupKeys: [String!]
  owner: Organization
}
"""
A connection to a list of items.
"""
type OrgSubscriptionConnection {
  """
  A list of edges.
  """
  edges: [OrgSubscriptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgSubscriptionEdge {
  """
  The item at the end of the edge.
  """
  node: OrgSubscription
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrgSubscriptionHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrgSubscriptionHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the stripe subscription id
  """
  stripeSubscriptionID: String
  """
  the common name of the product tier the subscription is associated with, e.g. starter tier
  """
  productTier: String
  """
  the price of the product tier
  """
  productPrice: Price
  """
  the product id that represents the tier in stripe
  """
  stripeProductTierID: String
  """
  the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
  """
  stripeSubscriptionStatus: String
  """
  indicates if the subscription is active
  """
  active: Boolean!
  """
  the customer ID the subscription is associated to
  """
  stripeCustomerID: String
  """
  the time the subscription is set to expire; only populated if subscription is cancelled
  """
  expiresAt: Time
  """
  the features associated with the subscription
  """
  features: [String!]
  """
  the feature lookup keys associated with the subscription
  """
  featureLookupKeys: [String!]
}
"""
A connection to a list of items.
"""
type OrgSubscriptionHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrgSubscriptionHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgSubscriptionHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrgSubscriptionHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrgSubscriptionHistoryOpType is enum for the field operation
"""
enum OrgSubscriptionHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
OrgSubscriptionHistoryWhereInput is used for filtering OrgSubscriptionHistory objects.
Input was generated by ent.
"""
input OrgSubscriptionHistoryWhereInput {
  not: OrgSubscriptionHistoryWhereInput
  and: [OrgSubscriptionHistoryWhereInput!]
  or: [OrgSubscriptionHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrgSubscriptionHistoryOpType
  operationNEQ: OrgSubscriptionHistoryOpType
  operationIn: [OrgSubscriptionHistoryOpType!]
  operationNotIn: [OrgSubscriptionHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  stripe_subscription_id field predicates
  """
  stripeSubscriptionID: String
  stripeSubscriptionIDNEQ: String
  stripeSubscriptionIDIn: [String!]
  stripeSubscriptionIDNotIn: [String!]
  stripeSubscriptionIDGT: String
  stripeSubscriptionIDGTE: String
  stripeSubscriptionIDLT: String
  stripeSubscriptionIDLTE: String
  stripeSubscriptionIDContains: String
  stripeSubscriptionIDHasPrefix: String
  stripeSubscriptionIDHasSuffix: String
  stripeSubscriptionIDIsNil: Boolean
  stripeSubscriptionIDNotNil: Boolean
  stripeSubscriptionIDEqualFold: String
  stripeSubscriptionIDContainsFold: String
  """
  product_tier field predicates
  """
  productTier: String
  productTierNEQ: String
  productTierIn: [String!]
  productTierNotIn: [String!]
  productTierGT: String
  productTierGTE: String
  productTierLT: String
  productTierLTE: String
  productTierContains: String
  productTierHasPrefix: String
  productTierHasSuffix: String
  productTierIsNil: Boolean
  productTierNotNil: Boolean
  productTierEqualFold: String
  productTierContainsFold: String
  """
  stripe_product_tier_id field predicates
  """
  stripeProductTierID: String
  stripeProductTierIDNEQ: String
  stripeProductTierIDIn: [String!]
  stripeProductTierIDNotIn: [String!]
  stripeProductTierIDGT: String
  stripeProductTierIDGTE: String
  stripeProductTierIDLT: String
  stripeProductTierIDLTE: String
  stripeProductTierIDContains: String
  stripeProductTierIDHasPrefix: String
  stripeProductTierIDHasSuffix: String
  stripeProductTierIDIsNil: Boolean
  stripeProductTierIDNotNil: Boolean
  stripeProductTierIDEqualFold: String
  stripeProductTierIDContainsFold: String
  """
  stripe_subscription_status field predicates
  """
  stripeSubscriptionStatus: String
  stripeSubscriptionStatusNEQ: String
  stripeSubscriptionStatusIn: [String!]
  stripeSubscriptionStatusNotIn: [String!]
  stripeSubscriptionStatusGT: String
  stripeSubscriptionStatusGTE: String
  stripeSubscriptionStatusLT: String
  stripeSubscriptionStatusLTE: String
  stripeSubscriptionStatusContains: String
  stripeSubscriptionStatusHasPrefix: String
  stripeSubscriptionStatusHasSuffix: String
  stripeSubscriptionStatusIsNil: Boolean
  stripeSubscriptionStatusNotNil: Boolean
  stripeSubscriptionStatusEqualFold: String
  stripeSubscriptionStatusContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  stripe_customer_id field predicates
  """
  stripeCustomerID: String
  stripeCustomerIDNEQ: String
  stripeCustomerIDIn: [String!]
  stripeCustomerIDNotIn: [String!]
  stripeCustomerIDGT: String
  stripeCustomerIDGTE: String
  stripeCustomerIDLT: String
  stripeCustomerIDLTE: String
  stripeCustomerIDContains: String
  stripeCustomerIDHasPrefix: String
  stripeCustomerIDHasSuffix: String
  stripeCustomerIDIsNil: Boolean
  stripeCustomerIDNotNil: Boolean
  stripeCustomerIDEqualFold: String
  stripeCustomerIDContainsFold: String
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
}
"""
OrgSubscriptionWhereInput is used for filtering OrgSubscription objects.
Input was generated by ent.
"""
input OrgSubscriptionWhereInput {
  not: OrgSubscriptionWhereInput
  and: [OrgSubscriptionWhereInput!]
  or: [OrgSubscriptionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  stripe_subscription_id field predicates
  """
  stripeSubscriptionID: String
  stripeSubscriptionIDNEQ: String
  stripeSubscriptionIDIn: [String!]
  stripeSubscriptionIDNotIn: [String!]
  stripeSubscriptionIDGT: String
  stripeSubscriptionIDGTE: String
  stripeSubscriptionIDLT: String
  stripeSubscriptionIDLTE: String
  stripeSubscriptionIDContains: String
  stripeSubscriptionIDHasPrefix: String
  stripeSubscriptionIDHasSuffix: String
  stripeSubscriptionIDIsNil: Boolean
  stripeSubscriptionIDNotNil: Boolean
  stripeSubscriptionIDEqualFold: String
  stripeSubscriptionIDContainsFold: String
  """
  product_tier field predicates
  """
  productTier: String
  productTierNEQ: String
  productTierIn: [String!]
  productTierNotIn: [String!]
  productTierGT: String
  productTierGTE: String
  productTierLT: String
  productTierLTE: String
  productTierContains: String
  productTierHasPrefix: String
  productTierHasSuffix: String
  productTierIsNil: Boolean
  productTierNotNil: Boolean
  productTierEqualFold: String
  productTierContainsFold: String
  """
  stripe_product_tier_id field predicates
  """
  stripeProductTierID: String
  stripeProductTierIDNEQ: String
  stripeProductTierIDIn: [String!]
  stripeProductTierIDNotIn: [String!]
  stripeProductTierIDGT: String
  stripeProductTierIDGTE: String
  stripeProductTierIDLT: String
  stripeProductTierIDLTE: String
  stripeProductTierIDContains: String
  stripeProductTierIDHasPrefix: String
  stripeProductTierIDHasSuffix: String
  stripeProductTierIDIsNil: Boolean
  stripeProductTierIDNotNil: Boolean
  stripeProductTierIDEqualFold: String
  stripeProductTierIDContainsFold: String
  """
  stripe_subscription_status field predicates
  """
  stripeSubscriptionStatus: String
  stripeSubscriptionStatusNEQ: String
  stripeSubscriptionStatusIn: [String!]
  stripeSubscriptionStatusNotIn: [String!]
  stripeSubscriptionStatusGT: String
  stripeSubscriptionStatusGTE: String
  stripeSubscriptionStatusLT: String
  stripeSubscriptionStatusLTE: String
  stripeSubscriptionStatusContains: String
  stripeSubscriptionStatusHasPrefix: String
  stripeSubscriptionStatusHasSuffix: String
  stripeSubscriptionStatusIsNil: Boolean
  stripeSubscriptionStatusNotNil: Boolean
  stripeSubscriptionStatusEqualFold: String
  stripeSubscriptionStatusContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  stripe_customer_id field predicates
  """
  stripeCustomerID: String
  stripeCustomerIDNEQ: String
  stripeCustomerIDIn: [String!]
  stripeCustomerIDNotIn: [String!]
  stripeCustomerIDGT: String
  stripeCustomerIDGTE: String
  stripeCustomerIDLT: String
  stripeCustomerIDLTE: String
  stripeCustomerIDContains: String
  stripeCustomerIDHasPrefix: String
  stripeCustomerIDHasSuffix: String
  stripeCustomerIDIsNil: Boolean
  stripeCustomerIDNotNil: Boolean
  stripeCustomerIDEqualFold: String
  stripeCustomerIDContainsFold: String
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
type Organization implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the name of the organization
  """
  name: String!
  """
  The organization's displayed 'friendly' name
  """
  displayName: String!
  """
  An optional description of the organization
  """
  description: String
  """
  orgs directly associated with a user
  """
  personalOrg: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The organizations's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: ID
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  Whether the organization has a dedicated database
  """
  dedicatedDb: Boolean!
  """
  groups that are allowed to create controls
  """
  controlCreators: [Group!]
  """
  groups that are allowed to create control_objectives
  """
  controlObjectiveCreators: [Group!]
  """
  groups that are allowed to create groups
  """
  groupCreators: [Group!]
  """
  groups that are allowed to create internal_policys
  """
  internalPolicyCreators: [Group!]
  """
  groups that are allowed to create narratives
  """
  narrativeCreators: [Group!]
  """
  groups that are allowed to create procedures
  """
  procedureCreators: [Group!]
  """
  groups that are allowed to create programs
  """
  programCreators: [Group!]
  """
  groups that are allowed to create risks
  """
  riskCreators: [Group!]
  """
  groups that are allowed to create templates
  """
  templateCreators: [Group!]
  parent: Organization
  children(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Organizations returned from the connection.
    """
    orderBy: OrganizationOrder

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  groups: [Group!]
  templates: [Template!]
  integrations: [Integration!]
  setting: OrganizationSetting
  documentData: [DocumentData!]
  orgSubscriptions: [OrgSubscription!]
  personalAccessTokens: [PersonalAccessToken!]
  apiTokens: [APIToken!]
  users: [User!]
  invites: [Invite!]
  subscribers: [Subscriber!]
  events: [Event!]
  secrets: [Hush!]
  files: [File!]
  avatarFile: File
  entities: [Entity!]
  entityTypes: [EntityType!]
  contacts: [Contact!]
  notes: [Note!]
  tasks: [Task!]
  programs: [Program!]
  procedures: [Procedure!]
  internalPolicies: [InternalPolicy!]
  risks: [Risk!]
  controlObjectives: [ControlObjective!]
  narratives: [Narrative!]
  controls: [Control!]
  subcontrols: [Subcontrol!]
  members: [OrgMembership!]
}
"""
A connection to a list of items.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  The item at the end of the edge.
  """
  node: Organization
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrganizationHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrganizationHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the name of the organization
  """
  name: String!
  """
  The organization's displayed 'friendly' name
  """
  displayName: String!
  """
  An optional description of the organization
  """
  description: String
  """
  orgs directly associated with a user
  """
  personalOrg: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The organizations's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  Whether the organization has a dedicated database
  """
  dedicatedDb: Boolean!
}
"""
A connection to a list of items.
"""
type OrganizationHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrganizationHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrganizationHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrganizationHistoryOpType is enum for the field operation
"""
enum OrganizationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for OrganizationHistory connections
"""
input OrganizationHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrganizationHistories.
  """
  field: OrganizationHistoryOrderField!
}
"""
Properties by which OrganizationHistory connections can be ordered.
"""
enum OrganizationHistoryOrderField {
  name
  display_name
}
"""
OrganizationHistoryWhereInput is used for filtering OrganizationHistory objects.
Input was generated by ent.
"""
input OrganizationHistoryWhereInput {
  not: OrganizationHistoryWhereInput
  and: [OrganizationHistoryWhereInput!]
  or: [OrganizationHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrganizationHistoryOpType
  operationNEQ: OrganizationHistoryOpType
  operationIn: [OrganizationHistoryOpType!]
  operationNotIn: [OrganizationHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  parent_organization_id field predicates
  """
  parentOrganizationID: ID
  parentOrganizationIDNEQ: ID
  parentOrganizationIDIn: [ID!]
  parentOrganizationIDNotIn: [ID!]
  parentOrganizationIDGT: ID
  parentOrganizationIDGTE: ID
  parentOrganizationIDLT: ID
  parentOrganizationIDLTE: ID
  parentOrganizationIDContains: ID
  parentOrganizationIDHasPrefix: ID
  parentOrganizationIDHasSuffix: ID
  parentOrganizationIDIsNil: Boolean
  parentOrganizationIDNotNil: Boolean
  parentOrganizationIDEqualFold: ID
  parentOrganizationIDContainsFold: ID
  """
  personal_org field predicates
  """
  personalOrg: Boolean
  personalOrgNEQ: Boolean
  personalOrgIsNil: Boolean
  personalOrgNotNil: Boolean
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: String
  avatarLocalFileIDNEQ: String
  avatarLocalFileIDIn: [String!]
  avatarLocalFileIDNotIn: [String!]
  avatarLocalFileIDGT: String
  avatarLocalFileIDGTE: String
  avatarLocalFileIDLT: String
  avatarLocalFileIDLTE: String
  avatarLocalFileIDContains: String
  avatarLocalFileIDHasPrefix: String
  avatarLocalFileIDHasSuffix: String
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: String
  avatarLocalFileIDContainsFold: String
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
}
"""
Ordering options for Organization connections
"""
input OrganizationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Organizations.
  """
  field: OrganizationOrderField!
}
"""
Properties by which Organization connections can be ordered.
"""
enum OrganizationOrderField {
  name
  display_name
}
type OrganizationSetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  domains associated with the organization
  """
  domains: [String!]
  """
  Name of the person to contact for billing
  """
  billingContact: String
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  """
  Phone number to contact for billing
  """
  billingPhone: String
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingRegion
  """
  the ID of the organization the settings belong to
  """
  organizationID: ID
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean!
  organization: Organization
  files: [File!]
}
"""
A connection to a list of items.
"""
type OrganizationSettingConnection {
  """
  A list of edges.
  """
  edges: [OrganizationSettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationSettingEdge {
  """
  The item at the end of the edge.
  """
  node: OrganizationSetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrganizationSettingHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: OrganizationSettingHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  domains associated with the organization
  """
  domains: [String!]
  """
  Name of the person to contact for billing
  """
  billingContact: String
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  """
  Phone number to contact for billing
  """
  billingPhone: String
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingHistoryRegion
  """
  the ID of the organization the settings belong to
  """
  organizationID: String
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean!
}
"""
A connection to a list of items.
"""
type OrganizationSettingHistoryConnection {
  """
  A list of edges.
  """
  edges: [OrganizationSettingHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationSettingHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: OrganizationSettingHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrganizationSettingHistoryOpType is enum for the field operation
"""
enum OrganizationSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
OrganizationSettingHistoryRegion is enum for the field geo_location
"""
enum OrganizationSettingHistoryRegion @goModel(model: "github.com/theopenlane/core/pkg/enums.Region") {
  AMER
  EMEA
  APAC
}
"""
OrganizationSettingHistoryWhereInput is used for filtering OrganizationSettingHistory objects.
Input was generated by ent.
"""
input OrganizationSettingHistoryWhereInput {
  not: OrganizationSettingHistoryWhereInput
  and: [OrganizationSettingHistoryWhereInput!]
  or: [OrganizationSettingHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: OrganizationSettingHistoryOpType
  operationNEQ: OrganizationSettingHistoryOpType
  operationIn: [OrganizationSettingHistoryOpType!]
  operationNotIn: [OrganizationSettingHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  billing_contact field predicates
  """
  billingContact: String
  billingContactNEQ: String
  billingContactIn: [String!]
  billingContactNotIn: [String!]
  billingContactGT: String
  billingContactGTE: String
  billingContactLT: String
  billingContactLTE: String
  billingContactContains: String
  billingContactHasPrefix: String
  billingContactHasSuffix: String
  billingContactIsNil: Boolean
  billingContactNotNil: Boolean
  billingContactEqualFold: String
  billingContactContainsFold: String
  """
  billing_email field predicates
  """
  billingEmail: String
  billingEmailNEQ: String
  billingEmailIn: [String!]
  billingEmailNotIn: [String!]
  billingEmailGT: String
  billingEmailGTE: String
  billingEmailLT: String
  billingEmailLTE: String
  billingEmailContains: String
  billingEmailHasPrefix: String
  billingEmailHasSuffix: String
  billingEmailIsNil: Boolean
  billingEmailNotNil: Boolean
  billingEmailEqualFold: String
  billingEmailContainsFold: String
  """
  billing_phone field predicates
  """
  billingPhone: String
  billingPhoneNEQ: String
  billingPhoneIn: [String!]
  billingPhoneNotIn: [String!]
  billingPhoneGT: String
  billingPhoneGTE: String
  billingPhoneLT: String
  billingPhoneLTE: String
  billingPhoneContains: String
  billingPhoneHasPrefix: String
  billingPhoneHasSuffix: String
  billingPhoneIsNil: Boolean
  billingPhoneNotNil: Boolean
  billingPhoneEqualFold: String
  billingPhoneContainsFold: String
  """
  tax_identifier field predicates
  """
  taxIdentifier: String
  taxIdentifierNEQ: String
  taxIdentifierIn: [String!]
  taxIdentifierNotIn: [String!]
  taxIdentifierGT: String
  taxIdentifierGTE: String
  taxIdentifierLT: String
  taxIdentifierLTE: String
  taxIdentifierContains: String
  taxIdentifierHasPrefix: String
  taxIdentifierHasSuffix: String
  taxIdentifierIsNil: Boolean
  taxIdentifierNotNil: Boolean
  taxIdentifierEqualFold: String
  taxIdentifierContainsFold: String
  """
  geo_location field predicates
  """
  geoLocation: OrganizationSettingHistoryRegion
  geoLocationNEQ: OrganizationSettingHistoryRegion
  geoLocationIn: [OrganizationSettingHistoryRegion!]
  geoLocationNotIn: [OrganizationSettingHistoryRegion!]
  geoLocationIsNil: Boolean
  geoLocationNotNil: Boolean
  """
  organization_id field predicates
  """
  organizationID: String
  organizationIDNEQ: String
  organizationIDIn: [String!]
  organizationIDNotIn: [String!]
  organizationIDGT: String
  organizationIDGTE: String
  organizationIDLT: String
  organizationIDLTE: String
  organizationIDContains: String
  organizationIDHasPrefix: String
  organizationIDHasSuffix: String
  organizationIDIsNil: Boolean
  organizationIDNotNil: Boolean
  organizationIDEqualFold: String
  organizationIDContainsFold: String
  """
  billing_notifications_enabled field predicates
  """
  billingNotificationsEnabled: Boolean
  billingNotificationsEnabledNEQ: Boolean
}
"""
OrganizationSettingRegion is enum for the field geo_location
"""
enum OrganizationSettingRegion @goModel(model: "github.com/theopenlane/core/pkg/enums.Region") {
  AMER
  EMEA
  APAC
}
"""
OrganizationSettingWhereInput is used for filtering OrganizationSetting objects.
Input was generated by ent.
"""
input OrganizationSettingWhereInput {
  not: OrganizationSettingWhereInput
  and: [OrganizationSettingWhereInput!]
  or: [OrganizationSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  billing_contact field predicates
  """
  billingContact: String
  billingContactNEQ: String
  billingContactIn: [String!]
  billingContactNotIn: [String!]
  billingContactGT: String
  billingContactGTE: String
  billingContactLT: String
  billingContactLTE: String
  billingContactContains: String
  billingContactHasPrefix: String
  billingContactHasSuffix: String
  billingContactIsNil: Boolean
  billingContactNotNil: Boolean
  billingContactEqualFold: String
  billingContactContainsFold: String
  """
  billing_email field predicates
  """
  billingEmail: String
  billingEmailNEQ: String
  billingEmailIn: [String!]
  billingEmailNotIn: [String!]
  billingEmailGT: String
  billingEmailGTE: String
  billingEmailLT: String
  billingEmailLTE: String
  billingEmailContains: String
  billingEmailHasPrefix: String
  billingEmailHasSuffix: String
  billingEmailIsNil: Boolean
  billingEmailNotNil: Boolean
  billingEmailEqualFold: String
  billingEmailContainsFold: String
  """
  billing_phone field predicates
  """
  billingPhone: String
  billingPhoneNEQ: String
  billingPhoneIn: [String!]
  billingPhoneNotIn: [String!]
  billingPhoneGT: String
  billingPhoneGTE: String
  billingPhoneLT: String
  billingPhoneLTE: String
  billingPhoneContains: String
  billingPhoneHasPrefix: String
  billingPhoneHasSuffix: String
  billingPhoneIsNil: Boolean
  billingPhoneNotNil: Boolean
  billingPhoneEqualFold: String
  billingPhoneContainsFold: String
  """
  tax_identifier field predicates
  """
  taxIdentifier: String
  taxIdentifierNEQ: String
  taxIdentifierIn: [String!]
  taxIdentifierNotIn: [String!]
  taxIdentifierGT: String
  taxIdentifierGTE: String
  taxIdentifierLT: String
  taxIdentifierLTE: String
  taxIdentifierContains: String
  taxIdentifierHasPrefix: String
  taxIdentifierHasSuffix: String
  taxIdentifierIsNil: Boolean
  taxIdentifierNotNil: Boolean
  taxIdentifierEqualFold: String
  taxIdentifierContainsFold: String
  """
  geo_location field predicates
  """
  geoLocation: OrganizationSettingRegion
  geoLocationNEQ: OrganizationSettingRegion
  geoLocationIn: [OrganizationSettingRegion!]
  geoLocationNotIn: [OrganizationSettingRegion!]
  geoLocationIsNil: Boolean
  geoLocationNotNil: Boolean
  """
  organization_id field predicates
  """
  organizationID: ID
  organizationIDNEQ: ID
  organizationIDIn: [ID!]
  organizationIDNotIn: [ID!]
  organizationIDGT: ID
  organizationIDGTE: ID
  organizationIDLT: ID
  organizationIDLTE: ID
  organizationIDContains: ID
  organizationIDHasPrefix: ID
  organizationIDHasSuffix: ID
  organizationIDIsNil: Boolean
  organizationIDNotNil: Boolean
  organizationIDEqualFold: ID
  organizationIDContainsFold: ID
  """
  billing_notifications_enabled field predicates
  """
  billingNotificationsEnabled: Boolean
  billingNotificationsEnabledNEQ: Boolean
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  parent_organization_id field predicates
  """
  parentOrganizationID: ID
  parentOrganizationIDNEQ: ID
  parentOrganizationIDIn: [ID!]
  parentOrganizationIDNotIn: [ID!]
  parentOrganizationIDGT: ID
  parentOrganizationIDGTE: ID
  parentOrganizationIDLT: ID
  parentOrganizationIDLTE: ID
  parentOrganizationIDContains: ID
  parentOrganizationIDHasPrefix: ID
  parentOrganizationIDHasSuffix: ID
  parentOrganizationIDIsNil: Boolean
  parentOrganizationIDNotNil: Boolean
  parentOrganizationIDEqualFold: ID
  parentOrganizationIDContainsFold: ID
  """
  personal_org field predicates
  """
  personalOrg: Boolean
  personalOrgNEQ: Boolean
  personalOrgIsNil: Boolean
  personalOrgNotNil: Boolean
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: ID
  avatarLocalFileIDNEQ: ID
  avatarLocalFileIDIn: [ID!]
  avatarLocalFileIDNotIn: [ID!]
  avatarLocalFileIDGT: ID
  avatarLocalFileIDGTE: ID
  avatarLocalFileIDLT: ID
  avatarLocalFileIDLTE: ID
  avatarLocalFileIDContains: ID
  avatarLocalFileIDHasPrefix: ID
  avatarLocalFileIDHasSuffix: ID
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: ID
  avatarLocalFileIDContainsFold: ID
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
  """
  control_creators edge predicates
  """
  hasControlCreators: Boolean
  hasControlCreatorsWith: [GroupWhereInput!]
  """
  control_objective_creators edge predicates
  """
  hasControlObjectiveCreators: Boolean
  hasControlObjectiveCreatorsWith: [GroupWhereInput!]
  """
  group_creators edge predicates
  """
  hasGroupCreators: Boolean
  hasGroupCreatorsWith: [GroupWhereInput!]
  """
  internal_policy_creators edge predicates
  """
  hasInternalPolicyCreators: Boolean
  hasInternalPolicyCreatorsWith: [GroupWhereInput!]
  """
  narrative_creators edge predicates
  """
  hasNarrativeCreators: Boolean
  hasNarrativeCreatorsWith: [GroupWhereInput!]
  """
  procedure_creators edge predicates
  """
  hasProcedureCreators: Boolean
  hasProcedureCreatorsWith: [GroupWhereInput!]
  """
  program_creators edge predicates
  """
  hasProgramCreators: Boolean
  hasProgramCreatorsWith: [GroupWhereInput!]
  """
  risk_creators edge predicates
  """
  hasRiskCreators: Boolean
  hasRiskCreatorsWith: [GroupWhereInput!]
  """
  template_creators edge predicates
  """
  hasTemplateCreators: Boolean
  hasTemplateCreatorsWith: [GroupWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [OrganizationWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [OrganizationWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  templates edge predicates
  """
  hasTemplates: Boolean
  hasTemplatesWith: [TemplateWhereInput!]
  """
  integrations edge predicates
  """
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """
  setting edge predicates
  """
  hasSetting: Boolean
  hasSettingWith: [OrganizationSettingWhereInput!]
  """
  document_data edge predicates
  """
  hasDocumentData: Boolean
  hasDocumentDataWith: [DocumentDataWhereInput!]
  """
  org_subscriptions edge predicates
  """
  hasOrgSubscriptions: Boolean
  hasOrgSubscriptionsWith: [OrgSubscriptionWhereInput!]
  """
  personal_access_tokens edge predicates
  """
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """
  api_tokens edge predicates
  """
  hasAPITokens: Boolean
  hasAPITokensWith: [APITokenWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  invites edge predicates
  """
  hasInvites: Boolean
  hasInvitesWith: [InviteWhereInput!]
  """
  subscribers edge predicates
  """
  hasSubscribers: Boolean
  hasSubscribersWith: [SubscriberWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  secrets edge predicates
  """
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  avatar_file edge predicates
  """
  hasAvatarFile: Boolean
  hasAvatarFileWith: [FileWhereInput!]
  """
  entities edge predicates
  """
  hasEntities: Boolean
  hasEntitiesWith: [EntityWhereInput!]
  """
  entity_types edge predicates
  """
  hasEntityTypes: Boolean
  hasEntityTypesWith: [EntityTypeWhereInput!]
  """
  contacts edge predicates
  """
  hasContacts: Boolean
  hasContactsWith: [ContactWhereInput!]
  """
  notes edge predicates
  """
  hasNotes: Boolean
  hasNotesWith: [NoteWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  members edge predicates
  """
  hasMembers: Boolean
  hasMembersWith: [OrgMembershipWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type PersonalAccessToken implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name associated with the token
  """
  name: String!
  token: String!
  """
  when the token expires
  """
  expiresAt: Time
  """
  a description of the token's purpose
  """
  description: String
  scopes: [String!]
  lastUsedAt: Time
  owner: User!
  """
  the organization(s) the token is associated with
  """
  organizations: [Organization!]
  events: [Event!]
}
"""
A connection to a list of items.
"""
type PersonalAccessTokenConnection {
  """
  A list of edges.
  """
  edges: [PersonalAccessTokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PersonalAccessTokenEdge {
  """
  The item at the end of the edge.
  """
  node: PersonalAccessToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PersonalAccessTokenWhereInput is used for filtering PersonalAccessToken objects.
Input was generated by ent.
"""
input PersonalAccessTokenWhereInput {
  not: PersonalAccessTokenWhereInput
  and: [PersonalAccessTokenWhereInput!]
  or: [PersonalAccessTokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """
  last_used_at field predicates
  """
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  organizations edge predicates
  """
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type Procedure implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the procedure
  """
  name: String!
  """
  description of the procedure
  """
  description: String
  """
  status of the procedure
  """
  status: String
  """
  type of the procedure
  """
  procedureType: String
  """
  version of the procedure
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the procedure
  """
  background: String
  """
  which controls are satisfied by the procedure
  """
  satisfies: String
  """
  json data for the procedure document
  """
  details: Map
  owner: Organization
  """
  groups that are blocked from viewing or editing the risk
  """
  blockedGroups: [Group!]
  """
  provides edit access to the risk to members of the group
  """
  editors: [Group!]
  controls: [Control!]
  internalPolicies: [InternalPolicy!]
  narratives: [Narrative!]
  risks: [Risk!]
  tasks: [Task!]
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type ProcedureConnection {
  """
  A list of edges.
  """
  edges: [ProcedureEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProcedureEdge {
  """
  The item at the end of the edge.
  """
  node: Procedure
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ProcedureHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ProcedureHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the procedure
  """
  name: String!
  """
  description of the procedure
  """
  description: String
  """
  status of the procedure
  """
  status: String
  """
  type of the procedure
  """
  procedureType: String
  """
  version of the procedure
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the procedure
  """
  background: String
  """
  which controls are satisfied by the procedure
  """
  satisfies: String
  """
  json data for the procedure document
  """
  details: Map
}
"""
A connection to a list of items.
"""
type ProcedureHistoryConnection {
  """
  A list of edges.
  """
  edges: [ProcedureHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProcedureHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ProcedureHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProcedureHistoryOpType is enum for the field operation
"""
enum ProcedureHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
ProcedureHistoryWhereInput is used for filtering ProcedureHistory objects.
Input was generated by ent.
"""
input ProcedureHistoryWhereInput {
  not: ProcedureHistoryWhereInput
  and: [ProcedureHistoryWhereInput!]
  or: [ProcedureHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ProcedureHistoryOpType
  operationNEQ: ProcedureHistoryOpType
  operationIn: [ProcedureHistoryOpType!]
  operationNotIn: [ProcedureHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  procedure_type field predicates
  """
  procedureType: String
  procedureTypeNEQ: String
  procedureTypeIn: [String!]
  procedureTypeNotIn: [String!]
  procedureTypeGT: String
  procedureTypeGTE: String
  procedureTypeLT: String
  procedureTypeLTE: String
  procedureTypeContains: String
  procedureTypeHasPrefix: String
  procedureTypeHasSuffix: String
  procedureTypeIsNil: Boolean
  procedureTypeNotNil: Boolean
  procedureTypeEqualFold: String
  procedureTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  purpose_and_scope field predicates
  """
  purposeAndScope: String
  purposeAndScopeNEQ: String
  purposeAndScopeIn: [String!]
  purposeAndScopeNotIn: [String!]
  purposeAndScopeGT: String
  purposeAndScopeGTE: String
  purposeAndScopeLT: String
  purposeAndScopeLTE: String
  purposeAndScopeContains: String
  purposeAndScopeHasPrefix: String
  purposeAndScopeHasSuffix: String
  purposeAndScopeIsNil: Boolean
  purposeAndScopeNotNil: Boolean
  purposeAndScopeEqualFold: String
  purposeAndScopeContainsFold: String
  """
  background field predicates
  """
  background: String
  backgroundNEQ: String
  backgroundIn: [String!]
  backgroundNotIn: [String!]
  backgroundGT: String
  backgroundGTE: String
  backgroundLT: String
  backgroundLTE: String
  backgroundContains: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIsNil: Boolean
  backgroundNotNil: Boolean
  backgroundEqualFold: String
  backgroundContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
}
"""
ProcedureWhereInput is used for filtering Procedure objects.
Input was generated by ent.
"""
input ProcedureWhereInput {
  not: ProcedureWhereInput
  and: [ProcedureWhereInput!]
  or: [ProcedureWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  procedure_type field predicates
  """
  procedureType: String
  procedureTypeNEQ: String
  procedureTypeIn: [String!]
  procedureTypeNotIn: [String!]
  procedureTypeGT: String
  procedureTypeGTE: String
  procedureTypeLT: String
  procedureTypeLTE: String
  procedureTypeContains: String
  procedureTypeHasPrefix: String
  procedureTypeHasSuffix: String
  procedureTypeIsNil: Boolean
  procedureTypeNotNil: Boolean
  procedureTypeEqualFold: String
  procedureTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  purpose_and_scope field predicates
  """
  purposeAndScope: String
  purposeAndScopeNEQ: String
  purposeAndScopeIn: [String!]
  purposeAndScopeNotIn: [String!]
  purposeAndScopeGT: String
  purposeAndScopeGTE: String
  purposeAndScopeLT: String
  purposeAndScopeLTE: String
  purposeAndScopeContains: String
  purposeAndScopeHasPrefix: String
  purposeAndScopeHasSuffix: String
  purposeAndScopeIsNil: Boolean
  purposeAndScopeNotNil: Boolean
  purposeAndScopeEqualFold: String
  purposeAndScopeContainsFold: String
  """
  background field predicates
  """
  background: String
  backgroundNEQ: String
  backgroundIn: [String!]
  backgroundNotIn: [String!]
  backgroundGT: String
  backgroundGTE: String
  backgroundLT: String
  backgroundLTE: String
  backgroundContains: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIsNil: Boolean
  backgroundNotNil: Boolean
  backgroundEqualFold: String
  backgroundContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
type Program implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the program
  """
  name: String!
  """
  the description of the program
  """
  description: String
  """
  the status of the program
  """
  status: ProgramProgramStatus!
  """
  the start date of the period
  """
  startDate: Time
  """
  the end date of the period
  """
  endDate: Time
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean!
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean!
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean!
  owner: Organization
  """
  groups that are blocked from viewing or editing the risk
  """
  blockedGroups: [Group!]
  """
  provides edit access to the risk to members of the group
  """
  editors: [Group!]
  """
  provides view access to the risk to members of the group
  """
  viewers: [Group!]
  controls: [Control!]
  subcontrols: [Subcontrol!]
  controlObjectives: [ControlObjective!]
  internalPolicies: [InternalPolicy!]
  procedures: [Procedure!]
  risks: [Risk!]
  tasks: [Task!]
  notes: [Note!]
  files: [File!]
  narratives: [Narrative!]
  actionPlans: [ActionPlan!]
  """
  the framework(s) that the program is based on
  """
  standards: [Standard!]
  users: [User!]
  members: [ProgramMembership!]
}
"""
A connection to a list of items.
"""
type ProgramConnection {
  """
  A list of edges.
  """
  edges: [ProgramEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramEdge {
  """
  The item at the end of the edge.
  """
  node: Program
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ProgramHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ProgramHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the program
  """
  name: String!
  """
  the description of the program
  """
  description: String
  """
  the status of the program
  """
  status: ProgramHistoryProgramStatus!
  """
  the start date of the period
  """
  startDate: Time
  """
  the end date of the period
  """
  endDate: Time
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean!
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean!
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean!
}
"""
A connection to a list of items.
"""
type ProgramHistoryConnection {
  """
  A list of edges.
  """
  edges: [ProgramHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProgramHistoryOpType is enum for the field operation
"""
enum ProgramHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
ProgramHistoryProgramStatus is enum for the field status
"""
enum ProgramHistoryProgramStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramStatus") {
  NOT_STARTED
  IN_PROGRESS
  READY_FOR_AUDITOR
  COMPLETED
  ACTION_REQUIRED
}
"""
ProgramHistoryWhereInput is used for filtering ProgramHistory objects.
Input was generated by ent.
"""
input ProgramHistoryWhereInput {
  not: ProgramHistoryWhereInput
  and: [ProgramHistoryWhereInput!]
  or: [ProgramHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ProgramHistoryOpType
  operationNEQ: ProgramHistoryOpType
  operationIn: [ProgramHistoryOpType!]
  operationNotIn: [ProgramHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: ProgramHistoryProgramStatus
  statusNEQ: ProgramHistoryProgramStatus
  statusIn: [ProgramHistoryProgramStatus!]
  statusNotIn: [ProgramHistoryProgramStatus!]
  """
  start_date field predicates
  """
  startDate: Time
  startDateNEQ: Time
  startDateIn: [Time!]
  startDateNotIn: [Time!]
  startDateGT: Time
  startDateGTE: Time
  startDateLT: Time
  startDateLTE: Time
  startDateIsNil: Boolean
  startDateNotNil: Boolean
  """
  end_date field predicates
  """
  endDate: Time
  endDateNEQ: Time
  endDateIn: [Time!]
  endDateNotIn: [Time!]
  endDateGT: Time
  endDateGTE: Time
  endDateLT: Time
  endDateLTE: Time
  endDateIsNil: Boolean
  endDateNotNil: Boolean
  """
  auditor_ready field predicates
  """
  auditorReady: Boolean
  auditorReadyNEQ: Boolean
  """
  auditor_write_comments field predicates
  """
  auditorWriteComments: Boolean
  auditorWriteCommentsNEQ: Boolean
  """
  auditor_read_comments field predicates
  """
  auditorReadComments: Boolean
  auditorReadCommentsNEQ: Boolean
}
type ProgramMembership implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  role: ProgramMembershipRole!
  programID: ID!
  userID: ID!
  program: Program!
  user: User!
}
"""
A connection to a list of items.
"""
type ProgramMembershipConnection {
  """
  A list of edges.
  """
  edges: [ProgramMembershipEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramMembershipEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramMembership
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ProgramMembershipHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: ProgramMembershipHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  role: ProgramMembershipHistoryRole!
  programID: String!
  userID: String!
}
"""
A connection to a list of items.
"""
type ProgramMembershipHistoryConnection {
  """
  A list of edges.
  """
  edges: [ProgramMembershipHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramMembershipHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramMembershipHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProgramMembershipHistoryOpType is enum for the field operation
"""
enum ProgramMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
ProgramMembershipHistoryRole is enum for the field role
"""
enum ProgramMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
ProgramMembershipHistoryWhereInput is used for filtering ProgramMembershipHistory objects.
Input was generated by ent.
"""
input ProgramMembershipHistoryWhereInput {
  not: ProgramMembershipHistoryWhereInput
  and: [ProgramMembershipHistoryWhereInput!]
  or: [ProgramMembershipHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: ProgramMembershipHistoryOpType
  operationNEQ: ProgramMembershipHistoryOpType
  operationIn: [ProgramMembershipHistoryOpType!]
  operationNotIn: [ProgramMembershipHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  role field predicates
  """
  role: ProgramMembershipHistoryRole
  roleNEQ: ProgramMembershipHistoryRole
  roleIn: [ProgramMembershipHistoryRole!]
  roleNotIn: [ProgramMembershipHistoryRole!]
  """
  program_id field predicates
  """
  programID: String
  programIDNEQ: String
  programIDIn: [String!]
  programIDNotIn: [String!]
  programIDGT: String
  programIDGTE: String
  programIDLT: String
  programIDLTE: String
  programIDContains: String
  programIDHasPrefix: String
  programIDHasSuffix: String
  programIDEqualFold: String
  programIDContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
}
"""
ProgramMembershipRole is enum for the field role
"""
enum ProgramMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
}
"""
ProgramMembershipWhereInput is used for filtering ProgramMembership objects.
Input was generated by ent.
"""
input ProgramMembershipWhereInput {
  not: ProgramMembershipWhereInput
  and: [ProgramMembershipWhereInput!]
  or: [ProgramMembershipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  role field predicates
  """
  role: ProgramMembershipRole
  roleNEQ: ProgramMembershipRole
  roleIn: [ProgramMembershipRole!]
  roleNotIn: [ProgramMembershipRole!]
}
"""
ProgramProgramStatus is enum for the field status
"""
enum ProgramProgramStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramStatus") {
  NOT_STARTED
  IN_PROGRESS
  READY_FOR_AUDITOR
  COMPLETED
  ACTION_REQUIRED
}
"""
ProgramWhereInput is used for filtering Program objects.
Input was generated by ent.
"""
input ProgramWhereInput {
  not: ProgramWhereInput
  and: [ProgramWhereInput!]
  or: [ProgramWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: ProgramProgramStatus
  statusNEQ: ProgramProgramStatus
  statusIn: [ProgramProgramStatus!]
  statusNotIn: [ProgramProgramStatus!]
  """
  start_date field predicates
  """
  startDate: Time
  startDateNEQ: Time
  startDateIn: [Time!]
  startDateNotIn: [Time!]
  startDateGT: Time
  startDateGTE: Time
  startDateLT: Time
  startDateLTE: Time
  startDateIsNil: Boolean
  startDateNotNil: Boolean
  """
  end_date field predicates
  """
  endDate: Time
  endDateNEQ: Time
  endDateIn: [Time!]
  endDateNotIn: [Time!]
  endDateGT: Time
  endDateGTE: Time
  endDateLT: Time
  endDateLTE: Time
  endDateIsNil: Boolean
  endDateNotNil: Boolean
  """
  auditor_ready field predicates
  """
  auditorReady: Boolean
  auditorReadyNEQ: Boolean
  """
  auditor_write_comments field predicates
  """
  auditorWriteComments: Boolean
  auditorWriteCommentsNEQ: Boolean
  """
  auditor_read_comments field predicates
  """
  auditorReadComments: Boolean
  auditorReadCommentsNEQ: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  internal_policies edge predicates
  """
  hasInternalPolicies: Boolean
  hasInternalPoliciesWith: [InternalPolicyWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  risks edge predicates
  """
  hasRisks: Boolean
  hasRisksWith: [RiskWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  notes edge predicates
  """
  hasNotes: Boolean
  hasNotesWith: [NoteWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  narratives edge predicates
  """
  hasNarratives: Boolean
  hasNarrativesWith: [NarrativeWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  standards edge predicates
  """
  hasStandards: Boolean
  hasStandardsWith: [StandardWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  members edge predicates
  """
  hasMembers: Boolean
  hasMembersWith: [ProgramMembershipWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  apiTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for APITokens returned from the connection.
    """
    where: APITokenWhereInput
  ): APITokenConnection!
  actionPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ActionPlans returned from the connection.
    """
    where: ActionPlanWhereInput
  ): ActionPlanConnection!
  actionPlanHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ActionPlanHistories returned from the connection.
    """
    where: ActionPlanHistoryWhereInput
  ): ActionPlanHistoryConnection!
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Contacts returned from the connection.
    """
    where: ContactWhereInput
  ): ContactConnection!
  contactHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ContactHistories returned from the connection.
    """
    where: ContactHistoryWhereInput
  ): ContactHistoryConnection!
  controls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Controls returned from the connection.
    """
    where: ControlWhereInput
  ): ControlConnection!
  controlHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ControlHistories returned from the connection.
    """
    where: ControlHistoryWhereInput
  ): ControlHistoryConnection!
  controlObjectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ControlObjectives returned from the connection.
    """
    where: ControlObjectiveWhereInput
  ): ControlObjectiveConnection!
  controlObjectiveHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ControlObjectiveHistories returned from the connection.
    """
    where: ControlObjectiveHistoryWhereInput
  ): ControlObjectiveHistoryConnection!
  documentDataSlice(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DocumentDataSlice returned from the connection.
    """
    where: DocumentDataWhereInput
  ): DocumentDataConnection!
  documentDataHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DocumentDataHistories returned from the connection.
    """
    where: DocumentDataHistoryWhereInput
  ): DocumentDataHistoryConnection!
  entities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Entities returned from the connection.
    """
    orderBy: EntityOrder

    """
    Filtering options for Entities returned from the connection.
    """
    where: EntityWhereInput
  ): EntityConnection!
  entityHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EntityHistories returned from the connection.
    """
    orderBy: EntityHistoryOrder

    """
    Filtering options for EntityHistories returned from the connection.
    """
    where: EntityHistoryWhereInput
  ): EntityHistoryConnection!
  entityTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EntityTypes returned from the connection.
    """
    orderBy: EntityTypeOrder

    """
    Filtering options for EntityTypes returned from the connection.
    """
    where: EntityTypeWhereInput
  ): EntityTypeConnection!
  entityTypeHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EntityTypeHistories returned from the connection.
    """
    orderBy: EntityTypeHistoryOrder

    """
    Filtering options for EntityTypeHistories returned from the connection.
    """
    where: EntityTypeHistoryWhereInput
  ): EntityTypeHistoryConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  eventHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for EventHistories returned from the connection.
    """
    where: EventHistoryWhereInput
  ): EventHistoryConnection!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  fileHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for FileHistories returned from the connection.
    """
    where: FileHistoryWhereInput
  ): FileHistoryConnection!
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Groups returned from the connection.
    """
    orderBy: GroupOrder

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupConnection!
  groupHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for GroupHistories returned from the connection.
    """
    orderBy: GroupHistoryOrder

    """
    Filtering options for GroupHistories returned from the connection.
    """
    where: GroupHistoryWhereInput
  ): GroupHistoryConnection!
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for GroupMemberships returned from the connection.
    """
    where: GroupMembershipWhereInput
  ): GroupMembershipConnection!
  groupMembershipHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for GroupMembershipHistories returned from the connection.
    """
    where: GroupMembershipHistoryWhereInput
  ): GroupMembershipHistoryConnection!
  groupSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for GroupSettings returned from the connection.
    """
    where: GroupSettingWhereInput
  ): GroupSettingConnection!
  groupSettingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for GroupSettingHistories returned from the connection.
    """
    where: GroupSettingHistoryWhereInput
  ): GroupSettingHistoryConnection!
  hushes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Hushes returned from the connection.
    """
    orderBy: HushOrder

    """
    Filtering options for Hushes returned from the connection.
    """
    where: HushWhereInput
  ): HushConnection!
  hushHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for HushHistories returned from the connection.
    """
    orderBy: HushHistoryOrder

    """
    Filtering options for HushHistories returned from the connection.
    """
    where: HushHistoryWhereInput
  ): HushHistoryConnection!
  integrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Integrations returned from the connection.
    """
    orderBy: IntegrationOrder

    """
    Filtering options for Integrations returned from the connection.
    """
    where: IntegrationWhereInput
  ): IntegrationConnection!
  integrationHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IntegrationHistories returned from the connection.
    """
    orderBy: IntegrationHistoryOrder

    """
    Filtering options for IntegrationHistories returned from the connection.
    """
    where: IntegrationHistoryWhereInput
  ): IntegrationHistoryConnection!
  internalPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for InternalPolicies returned from the connection.
    """
    where: InternalPolicyWhereInput
  ): InternalPolicyConnection!
  internalPolicyHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for InternalPolicyHistories returned from the connection.
    """
    where: InternalPolicyHistoryWhereInput
  ): InternalPolicyHistoryConnection!
  invites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Invites returned from the connection.
    """
    where: InviteWhereInput
  ): InviteConnection!
  narratives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Narratives returned from the connection.
    """
    where: NarrativeWhereInput
  ): NarrativeConnection!
  narrativeHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for NarrativeHistories returned from the connection.
    """
    where: NarrativeHistoryWhereInput
  ): NarrativeHistoryConnection!
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Notes returned from the connection.
    """
    where: NoteWhereInput
  ): NoteConnection!
  noteHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for NoteHistories returned from the connection.
    """
    where: NoteHistoryWhereInput
  ): NoteHistoryConnection!
  orgMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for OrgMemberships returned from the connection.
    """
    where: OrgMembershipWhereInput
  ): OrgMembershipConnection!
  orgMembershipHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for OrgMembershipHistories returned from the connection.
    """
    where: OrgMembershipHistoryWhereInput
  ): OrgMembershipHistoryConnection!
  orgSubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for OrgSubscriptions returned from the connection.
    """
    where: OrgSubscriptionWhereInput
  ): OrgSubscriptionConnection!
  orgSubscriptionHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for OrgSubscriptionHistories returned from the connection.
    """
    where: OrgSubscriptionHistoryWhereInput
  ): OrgSubscriptionHistoryConnection!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Organizations returned from the connection.
    """
    orderBy: OrganizationOrder

    """
    Filtering options for Organizations returned from the connection.
    """
    where: OrganizationWhereInput
  ): OrganizationConnection!
  organizationHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrganizationHistories returned from the connection.
    """
    orderBy: OrganizationHistoryOrder

    """
    Filtering options for OrganizationHistories returned from the connection.
    """
    where: OrganizationHistoryWhereInput
  ): OrganizationHistoryConnection!
  organizationSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for OrganizationSettings returned from the connection.
    """
    where: OrganizationSettingWhereInput
  ): OrganizationSettingConnection!
  organizationSettingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for OrganizationSettingHistories returned from the connection.
    """
    where: OrganizationSettingHistoryWhereInput
  ): OrganizationSettingHistoryConnection!
  personalAccessTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for PersonalAccessTokens returned from the connection.
    """
    where: PersonalAccessTokenWhereInput
  ): PersonalAccessTokenConnection!
  procedures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Procedures returned from the connection.
    """
    where: ProcedureWhereInput
  ): ProcedureConnection!
  procedureHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ProcedureHistories returned from the connection.
    """
    where: ProcedureHistoryWhereInput
  ): ProcedureHistoryConnection!
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Programs returned from the connection.
    """
    where: ProgramWhereInput
  ): ProgramConnection!
  programHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ProgramHistories returned from the connection.
    """
    where: ProgramHistoryWhereInput
  ): ProgramHistoryConnection!
  programMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ProgramMemberships returned from the connection.
    """
    where: ProgramMembershipWhereInput
  ): ProgramMembershipConnection!
  programMembershipHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ProgramMembershipHistories returned from the connection.
    """
    where: ProgramMembershipHistoryWhereInput
  ): ProgramMembershipHistoryConnection!
  risks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Risks returned from the connection.
    """
    where: RiskWhereInput
  ): RiskConnection!
  riskHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for RiskHistories returned from the connection.
    """
    where: RiskHistoryWhereInput
  ): RiskHistoryConnection!
  standards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Standards returned from the connection.
    """
    where: StandardWhereInput
  ): StandardConnection!
  standardHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for StandardHistories returned from the connection.
    """
    where: StandardHistoryWhereInput
  ): StandardHistoryConnection!
  subcontrols(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Subcontrols returned from the connection.
    """
    where: SubcontrolWhereInput
  ): SubcontrolConnection!
  subcontrolHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for SubcontrolHistories returned from the connection.
    """
    where: SubcontrolHistoryWhereInput
  ): SubcontrolHistoryConnection!
  subscribers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Subscribers returned from the connection.
    """
    where: SubscriberWhereInput
  ): SubscriberConnection!
  tfaSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for TFASettings returned from the connection.
    """
    where: TFASettingWhereInput
  ): TFASettingConnection!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  taskHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for TaskHistories returned from the connection.
    """
    where: TaskHistoryWhereInput
  ): TaskHistoryConnection!
  templates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Templates returned from the connection.
    """
    orderBy: TemplateOrder

    """
    Filtering options for Templates returned from the connection.
    """
    where: TemplateWhereInput
  ): TemplateConnection!
  templateHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TemplateHistories returned from the connection.
    """
    orderBy: TemplateHistoryOrder

    """
    Filtering options for TemplateHistories returned from the connection.
    """
    where: TemplateHistoryWhereInput
  ): TemplateHistoryConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  userHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserHistories returned from the connection.
    """
    orderBy: UserHistoryOrder

    """
    Filtering options for UserHistories returned from the connection.
    """
    where: UserHistoryWhereInput
  ): UserHistoryConnection!
  userSettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for UserSettings returned from the connection.
    """
    where: UserSettingWhereInput
  ): UserSettingConnection!
  userSettingHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for UserSettingHistories returned from the connection.
    """
    where: UserSettingHistoryWhereInput
  ): UserSettingHistoryConnection!
}
type Risk implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID!
  """
  the name of the risk
  """
  name: String!
  """
  description of the risk
  """
  description: String
  """
  status of the risk - mitigated or not, inflight, etc.
  """
  status: String
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  """
  business costs associated with the risk
  """
  businessCosts: String
  """
  impact of the risk - high, medium, low
  """
  impact: RiskRiskImpact
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskRiskLikelihood
  """
  mitigation for the risk
  """
  mitigation: String
  """
  which controls are satisfied by the risk
  """
  satisfies: String
  """
  json data for the risk document
  """
  details: Map
  owner: Organization!
  """
  groups that are blocked from viewing or editing the risk
  """
  blockedGroups: [Group!]
  """
  provides edit access to the risk to members of the group
  """
  editors: [Group!]
  """
  provides view access to the risk to members of the group
  """
  viewers: [Group!]
  control: [Control!]
  procedure: [Procedure!]
  actionPlans: [ActionPlan!]
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type RiskConnection {
  """
  A list of edges.
  """
  edges: [RiskEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RiskEdge {
  """
  The item at the end of the edge.
  """
  node: Risk
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RiskHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: RiskHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String!
  """
  the name of the risk
  """
  name: String!
  """
  description of the risk
  """
  description: String
  """
  status of the risk - mitigated or not, inflight, etc.
  """
  status: String
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  """
  business costs associated with the risk
  """
  businessCosts: String
  """
  impact of the risk - high, medium, low
  """
  impact: RiskHistoryRiskImpact
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskHistoryRiskLikelihood
  """
  mitigation for the risk
  """
  mitigation: String
  """
  which controls are satisfied by the risk
  """
  satisfies: String
  """
  json data for the risk document
  """
  details: Map
}
"""
A connection to a list of items.
"""
type RiskHistoryConnection {
  """
  A list of edges.
  """
  edges: [RiskHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RiskHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: RiskHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
RiskHistoryOpType is enum for the field operation
"""
enum RiskHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
RiskHistoryRiskImpact is enum for the field impact
"""
enum RiskHistoryRiskImpact @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskImpact") {
  LOW
  MODERATE
  HIGH
}
"""
RiskHistoryRiskLikelihood is enum for the field likelihood
"""
enum RiskHistoryRiskLikelihood @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskLikelihood") {
  UNLIKELY
  LIKELY
  HIGHLY_LIKELY
}
"""
RiskHistoryWhereInput is used for filtering RiskHistory objects.
Input was generated by ent.
"""
input RiskHistoryWhereInput {
  not: RiskHistoryWhereInput
  and: [RiskHistoryWhereInput!]
  or: [RiskHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: RiskHistoryOpType
  operationNEQ: RiskHistoryOpType
  operationIn: [RiskHistoryOpType!]
  operationNotIn: [RiskHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  risk_type field predicates
  """
  riskType: String
  riskTypeNEQ: String
  riskTypeIn: [String!]
  riskTypeNotIn: [String!]
  riskTypeGT: String
  riskTypeGTE: String
  riskTypeLT: String
  riskTypeLTE: String
  riskTypeContains: String
  riskTypeHasPrefix: String
  riskTypeHasSuffix: String
  riskTypeIsNil: Boolean
  riskTypeNotNil: Boolean
  riskTypeEqualFold: String
  riskTypeContainsFold: String
  """
  business_costs field predicates
  """
  businessCosts: String
  businessCostsNEQ: String
  businessCostsIn: [String!]
  businessCostsNotIn: [String!]
  businessCostsGT: String
  businessCostsGTE: String
  businessCostsLT: String
  businessCostsLTE: String
  businessCostsContains: String
  businessCostsHasPrefix: String
  businessCostsHasSuffix: String
  businessCostsIsNil: Boolean
  businessCostsNotNil: Boolean
  businessCostsEqualFold: String
  businessCostsContainsFold: String
  """
  impact field predicates
  """
  impact: RiskHistoryRiskImpact
  impactNEQ: RiskHistoryRiskImpact
  impactIn: [RiskHistoryRiskImpact!]
  impactNotIn: [RiskHistoryRiskImpact!]
  impactIsNil: Boolean
  impactNotNil: Boolean
  """
  likelihood field predicates
  """
  likelihood: RiskHistoryRiskLikelihood
  likelihoodNEQ: RiskHistoryRiskLikelihood
  likelihoodIn: [RiskHistoryRiskLikelihood!]
  likelihoodNotIn: [RiskHistoryRiskLikelihood!]
  likelihoodIsNil: Boolean
  likelihoodNotNil: Boolean
  """
  mitigation field predicates
  """
  mitigation: String
  mitigationNEQ: String
  mitigationIn: [String!]
  mitigationNotIn: [String!]
  mitigationGT: String
  mitigationGTE: String
  mitigationLT: String
  mitigationLTE: String
  mitigationContains: String
  mitigationHasPrefix: String
  mitigationHasSuffix: String
  mitigationIsNil: Boolean
  mitigationNotNil: Boolean
  mitigationEqualFold: String
  mitigationContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
}
"""
RiskRiskImpact is enum for the field impact
"""
enum RiskRiskImpact @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskImpact") {
  LOW
  MODERATE
  HIGH
}
"""
RiskRiskLikelihood is enum for the field likelihood
"""
enum RiskRiskLikelihood @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskLikelihood") {
  UNLIKELY
  LIKELY
  HIGHLY_LIKELY
}
"""
RiskWhereInput is used for filtering Risk objects.
Input was generated by ent.
"""
input RiskWhereInput {
  not: RiskWhereInput
  and: [RiskWhereInput!]
  or: [RiskWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  risk_type field predicates
  """
  riskType: String
  riskTypeNEQ: String
  riskTypeIn: [String!]
  riskTypeNotIn: [String!]
  riskTypeGT: String
  riskTypeGTE: String
  riskTypeLT: String
  riskTypeLTE: String
  riskTypeContains: String
  riskTypeHasPrefix: String
  riskTypeHasSuffix: String
  riskTypeIsNil: Boolean
  riskTypeNotNil: Boolean
  riskTypeEqualFold: String
  riskTypeContainsFold: String
  """
  business_costs field predicates
  """
  businessCosts: String
  businessCostsNEQ: String
  businessCostsIn: [String!]
  businessCostsNotIn: [String!]
  businessCostsGT: String
  businessCostsGTE: String
  businessCostsLT: String
  businessCostsLTE: String
  businessCostsContains: String
  businessCostsHasPrefix: String
  businessCostsHasSuffix: String
  businessCostsIsNil: Boolean
  businessCostsNotNil: Boolean
  businessCostsEqualFold: String
  businessCostsContainsFold: String
  """
  impact field predicates
  """
  impact: RiskRiskImpact
  impactNEQ: RiskRiskImpact
  impactIn: [RiskRiskImpact!]
  impactNotIn: [RiskRiskImpact!]
  impactIsNil: Boolean
  impactNotNil: Boolean
  """
  likelihood field predicates
  """
  likelihood: RiskRiskLikelihood
  likelihoodNEQ: RiskRiskLikelihood
  likelihoodIn: [RiskRiskLikelihood!]
  likelihoodNotIn: [RiskRiskLikelihood!]
  likelihoodIsNil: Boolean
  likelihoodNotNil: Boolean
  """
  mitigation field predicates
  """
  mitigation: String
  mitigationNEQ: String
  mitigationIn: [String!]
  mitigationNotIn: [String!]
  mitigationGT: String
  mitigationGTE: String
  mitigationLT: String
  mitigationLTE: String
  mitigationContains: String
  mitigationHasPrefix: String
  mitigationHasSuffix: String
  mitigationIsNil: Boolean
  mitigationNotNil: Boolean
  mitigationEqualFold: String
  mitigationContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  blocked_groups edge predicates
  """
  hasBlockedGroups: Boolean
  hasBlockedGroupsWith: [GroupWhereInput!]
  """
  editors edge predicates
  """
  hasEditors: Boolean
  hasEditorsWith: [GroupWhereInput!]
  """
  viewers edge predicates
  """
  hasViewers: Boolean
  hasViewersWith: [GroupWhereInput!]
  """
  control edge predicates
  """
  hasControl: Boolean
  hasControlWith: [ControlWhereInput!]
  """
  procedure edge predicates
  """
  hasProcedure: Boolean
  hasProcedureWith: [ProcedureWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
type Standard implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
  """
  name: String!
  """
  description of the standard
  """
  description: String
  """
  family of the standard, e.g. 800-53, 800-171, 27001, etc.
  """
  family: String
  """
  status of the standard - active, deprecated, etc.
  """
  status: String
  """
  type of the standard - security, privacy, etc.
  """
  standardType: String
  """
  version of the standard
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the standard
  """
  background: String
  """
  which controls are satisfied by the standard
  """
  satisfies: String
  """
  json data with details of the standard
  """
  details: Map
  controlObjectives: [ControlObjective!]
  controls: [Control!]
  procedures: [Procedure!]
  actionPlans: [ActionPlan!]
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type StandardConnection {
  """
  A list of edges.
  """
  edges: [StandardEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type StandardEdge {
  """
  The item at the end of the edge.
  """
  node: Standard
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type StandardHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: StandardHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
  """
  name: String!
  """
  description of the standard
  """
  description: String
  """
  family of the standard, e.g. 800-53, 800-171, 27001, etc.
  """
  family: String
  """
  status of the standard - active, deprecated, etc.
  """
  status: String
  """
  type of the standard - security, privacy, etc.
  """
  standardType: String
  """
  version of the standard
  """
  version: String
  """
  purpose and scope
  """
  purposeAndScope: String
  """
  background of the standard
  """
  background: String
  """
  which controls are satisfied by the standard
  """
  satisfies: String
  """
  json data with details of the standard
  """
  details: Map
}
"""
A connection to a list of items.
"""
type StandardHistoryConnection {
  """
  A list of edges.
  """
  edges: [StandardHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type StandardHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: StandardHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
StandardHistoryOpType is enum for the field operation
"""
enum StandardHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
StandardHistoryWhereInput is used for filtering StandardHistory objects.
Input was generated by ent.
"""
input StandardHistoryWhereInput {
  not: StandardHistoryWhereInput
  and: [StandardHistoryWhereInput!]
  or: [StandardHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: StandardHistoryOpType
  operationNEQ: StandardHistoryOpType
  operationIn: [StandardHistoryOpType!]
  operationNotIn: [StandardHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  standard_type field predicates
  """
  standardType: String
  standardTypeNEQ: String
  standardTypeIn: [String!]
  standardTypeNotIn: [String!]
  standardTypeGT: String
  standardTypeGTE: String
  standardTypeLT: String
  standardTypeLTE: String
  standardTypeContains: String
  standardTypeHasPrefix: String
  standardTypeHasSuffix: String
  standardTypeIsNil: Boolean
  standardTypeNotNil: Boolean
  standardTypeEqualFold: String
  standardTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  purpose_and_scope field predicates
  """
  purposeAndScope: String
  purposeAndScopeNEQ: String
  purposeAndScopeIn: [String!]
  purposeAndScopeNotIn: [String!]
  purposeAndScopeGT: String
  purposeAndScopeGTE: String
  purposeAndScopeLT: String
  purposeAndScopeLTE: String
  purposeAndScopeContains: String
  purposeAndScopeHasPrefix: String
  purposeAndScopeHasSuffix: String
  purposeAndScopeIsNil: Boolean
  purposeAndScopeNotNil: Boolean
  purposeAndScopeEqualFold: String
  purposeAndScopeContainsFold: String
  """
  background field predicates
  """
  background: String
  backgroundNEQ: String
  backgroundIn: [String!]
  backgroundNotIn: [String!]
  backgroundGT: String
  backgroundGTE: String
  backgroundLT: String
  backgroundLTE: String
  backgroundContains: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIsNil: Boolean
  backgroundNotNil: Boolean
  backgroundEqualFold: String
  backgroundContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
}
"""
StandardWhereInput is used for filtering Standard objects.
Input was generated by ent.
"""
input StandardWhereInput {
  not: StandardWhereInput
  and: [StandardWhereInput!]
  or: [StandardWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  standard_type field predicates
  """
  standardType: String
  standardTypeNEQ: String
  standardTypeIn: [String!]
  standardTypeNotIn: [String!]
  standardTypeGT: String
  standardTypeGTE: String
  standardTypeLT: String
  standardTypeLTE: String
  standardTypeContains: String
  standardTypeHasPrefix: String
  standardTypeHasSuffix: String
  standardTypeIsNil: Boolean
  standardTypeNotNil: Boolean
  standardTypeEqualFold: String
  standardTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  purpose_and_scope field predicates
  """
  purposeAndScope: String
  purposeAndScopeNEQ: String
  purposeAndScopeIn: [String!]
  purposeAndScopeNotIn: [String!]
  purposeAndScopeGT: String
  purposeAndScopeGTE: String
  purposeAndScopeLT: String
  purposeAndScopeLTE: String
  purposeAndScopeContains: String
  purposeAndScopeHasPrefix: String
  purposeAndScopeHasSuffix: String
  purposeAndScopeIsNil: Boolean
  purposeAndScopeNotNil: Boolean
  purposeAndScopeEqualFold: String
  purposeAndScopeContainsFold: String
  """
  background field predicates
  """
  background: String
  backgroundNEQ: String
  backgroundIn: [String!]
  backgroundNotIn: [String!]
  backgroundGT: String
  backgroundGTE: String
  backgroundLT: String
  backgroundLTE: String
  backgroundContains: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIsNil: Boolean
  backgroundNotNil: Boolean
  backgroundEqualFold: String
  backgroundContainsFold: String
  """
  satisfies field predicates
  """
  satisfies: String
  satisfiesNEQ: String
  satisfiesIn: [String!]
  satisfiesNotIn: [String!]
  satisfiesGT: String
  satisfiesGTE: String
  satisfiesLT: String
  satisfiesLTE: String
  satisfiesContains: String
  satisfiesHasPrefix: String
  satisfiesHasSuffix: String
  satisfiesIsNil: Boolean
  satisfiesNotNil: Boolean
  satisfiesEqualFold: String
  satisfiesContainsFold: String
  """
  control_objectives edge predicates
  """
  hasControlObjectives: Boolean
  hasControlObjectivesWith: [ControlObjectiveWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  procedures edge predicates
  """
  hasProcedures: Boolean
  hasProceduresWith: [ProcedureWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
type Subcontrol implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: ID!
  """
  the name of the subcontrol
  """
  name: String!
  """
  description of the subcontrol
  """
  description: String
  """
  status of the subcontrol
  """
  status: String
  """
  type of the subcontrol
  """
  subcontrolType: String
  """
  version of the control
  """
  version: String
  """
  number of the subcontrol
  """
  subcontrolNumber: String
  """
  subcontrol family
  """
  family: String
  """
  subcontrol class
  """
  class: String
  """
  source of the control, e.g. framework, template, user-defined, etc.
  """
  source: String
  """
  mapped frameworks that the subcontrol is part of
  """
  mappedFrameworks: String
  """
  implementation evidence of the subcontrol
  """
  implementationEvidence: String
  """
  implementation status
  """
  implementationStatus: String
  """
  date the subcontrol was implemented
  """
  implementationDate: Time
  """
  implementation verification
  """
  implementationVerification: String
  """
  date the subcontrol implementation was verified
  """
  implementationVerificationDate: Time
  """
  json data details of the subcontrol
  """
  details: Map
  owner: Organization!
  controls: [Control!]!
  user: [User!]
  tasks: [Task!]
  notes: Note
  programs: [Program!]
}
"""
A connection to a list of items.
"""
type SubcontrolConnection {
  """
  A list of edges.
  """
  edges: [SubcontrolEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SubcontrolEdge {
  """
  The item at the end of the edge.
  """
  node: Subcontrol
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type SubcontrolHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: SubcontrolHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the ID of the organization owner of the object
  """
  ownerID: String!
  """
  the name of the subcontrol
  """
  name: String!
  """
  description of the subcontrol
  """
  description: String
  """
  status of the subcontrol
  """
  status: String
  """
  type of the subcontrol
  """
  subcontrolType: String
  """
  version of the control
  """
  version: String
  """
  number of the subcontrol
  """
  subcontrolNumber: String
  """
  subcontrol family
  """
  family: String
  """
  subcontrol class
  """
  class: String
  """
  source of the control, e.g. framework, template, user-defined, etc.
  """
  source: String
  """
  mapped frameworks that the subcontrol is part of
  """
  mappedFrameworks: String
  """
  implementation evidence of the subcontrol
  """
  implementationEvidence: String
  """
  implementation status
  """
  implementationStatus: String
  """
  date the subcontrol was implemented
  """
  implementationDate: Time
  """
  implementation verification
  """
  implementationVerification: String
  """
  date the subcontrol implementation was verified
  """
  implementationVerificationDate: Time
  """
  json data details of the subcontrol
  """
  details: Map
}
"""
A connection to a list of items.
"""
type SubcontrolHistoryConnection {
  """
  A list of edges.
  """
  edges: [SubcontrolHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SubcontrolHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: SubcontrolHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SubcontrolHistoryOpType is enum for the field operation
"""
enum SubcontrolHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
SubcontrolHistoryWhereInput is used for filtering SubcontrolHistory objects.
Input was generated by ent.
"""
input SubcontrolHistoryWhereInput {
  not: SubcontrolHistoryWhereInput
  and: [SubcontrolHistoryWhereInput!]
  or: [SubcontrolHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: SubcontrolHistoryOpType
  operationNEQ: SubcontrolHistoryOpType
  operationIn: [SubcontrolHistoryOpType!]
  operationNotIn: [SubcontrolHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  subcontrol_type field predicates
  """
  subcontrolType: String
  subcontrolTypeNEQ: String
  subcontrolTypeIn: [String!]
  subcontrolTypeNotIn: [String!]
  subcontrolTypeGT: String
  subcontrolTypeGTE: String
  subcontrolTypeLT: String
  subcontrolTypeLTE: String
  subcontrolTypeContains: String
  subcontrolTypeHasPrefix: String
  subcontrolTypeHasSuffix: String
  subcontrolTypeIsNil: Boolean
  subcontrolTypeNotNil: Boolean
  subcontrolTypeEqualFold: String
  subcontrolTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  subcontrol_number field predicates
  """
  subcontrolNumber: String
  subcontrolNumberNEQ: String
  subcontrolNumberIn: [String!]
  subcontrolNumberNotIn: [String!]
  subcontrolNumberGT: String
  subcontrolNumberGTE: String
  subcontrolNumberLT: String
  subcontrolNumberLTE: String
  subcontrolNumberContains: String
  subcontrolNumberHasPrefix: String
  subcontrolNumberHasSuffix: String
  subcontrolNumberIsNil: Boolean
  subcontrolNumberNotNil: Boolean
  subcontrolNumberEqualFold: String
  subcontrolNumberContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  class field predicates
  """
  class: String
  classNEQ: String
  classIn: [String!]
  classNotIn: [String!]
  classGT: String
  classGTE: String
  classLT: String
  classLTE: String
  classContains: String
  classHasPrefix: String
  classHasSuffix: String
  classIsNil: Boolean
  classNotNil: Boolean
  classEqualFold: String
  classContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  mapped_frameworks field predicates
  """
  mappedFrameworks: String
  mappedFrameworksNEQ: String
  mappedFrameworksIn: [String!]
  mappedFrameworksNotIn: [String!]
  mappedFrameworksGT: String
  mappedFrameworksGTE: String
  mappedFrameworksLT: String
  mappedFrameworksLTE: String
  mappedFrameworksContains: String
  mappedFrameworksHasPrefix: String
  mappedFrameworksHasSuffix: String
  mappedFrameworksIsNil: Boolean
  mappedFrameworksNotNil: Boolean
  mappedFrameworksEqualFold: String
  mappedFrameworksContainsFold: String
  """
  implementation_evidence field predicates
  """
  implementationEvidence: String
  implementationEvidenceNEQ: String
  implementationEvidenceIn: [String!]
  implementationEvidenceNotIn: [String!]
  implementationEvidenceGT: String
  implementationEvidenceGTE: String
  implementationEvidenceLT: String
  implementationEvidenceLTE: String
  implementationEvidenceContains: String
  implementationEvidenceHasPrefix: String
  implementationEvidenceHasSuffix: String
  implementationEvidenceIsNil: Boolean
  implementationEvidenceNotNil: Boolean
  implementationEvidenceEqualFold: String
  implementationEvidenceContainsFold: String
  """
  implementation_status field predicates
  """
  implementationStatus: String
  implementationStatusNEQ: String
  implementationStatusIn: [String!]
  implementationStatusNotIn: [String!]
  implementationStatusGT: String
  implementationStatusGTE: String
  implementationStatusLT: String
  implementationStatusLTE: String
  implementationStatusContains: String
  implementationStatusHasPrefix: String
  implementationStatusHasSuffix: String
  implementationStatusIsNil: Boolean
  implementationStatusNotNil: Boolean
  implementationStatusEqualFold: String
  implementationStatusContainsFold: String
  """
  implementation_date field predicates
  """
  implementationDate: Time
  implementationDateNEQ: Time
  implementationDateIn: [Time!]
  implementationDateNotIn: [Time!]
  implementationDateGT: Time
  implementationDateGTE: Time
  implementationDateLT: Time
  implementationDateLTE: Time
  implementationDateIsNil: Boolean
  implementationDateNotNil: Boolean
  """
  implementation_verification field predicates
  """
  implementationVerification: String
  implementationVerificationNEQ: String
  implementationVerificationIn: [String!]
  implementationVerificationNotIn: [String!]
  implementationVerificationGT: String
  implementationVerificationGTE: String
  implementationVerificationLT: String
  implementationVerificationLTE: String
  implementationVerificationContains: String
  implementationVerificationHasPrefix: String
  implementationVerificationHasSuffix: String
  implementationVerificationIsNil: Boolean
  implementationVerificationNotNil: Boolean
  implementationVerificationEqualFold: String
  implementationVerificationContainsFold: String
  """
  implementation_verification_date field predicates
  """
  implementationVerificationDate: Time
  implementationVerificationDateNEQ: Time
  implementationVerificationDateIn: [Time!]
  implementationVerificationDateNotIn: [Time!]
  implementationVerificationDateGT: Time
  implementationVerificationDateGTE: Time
  implementationVerificationDateLT: Time
  implementationVerificationDateLTE: Time
  implementationVerificationDateIsNil: Boolean
  implementationVerificationDateNotNil: Boolean
}
"""
SubcontrolWhereInput is used for filtering Subcontrol objects.
Input was generated by ent.
"""
input SubcontrolWhereInput {
  not: SubcontrolWhereInput
  and: [SubcontrolWhereInput!]
  or: [SubcontrolWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  subcontrol_type field predicates
  """
  subcontrolType: String
  subcontrolTypeNEQ: String
  subcontrolTypeIn: [String!]
  subcontrolTypeNotIn: [String!]
  subcontrolTypeGT: String
  subcontrolTypeGTE: String
  subcontrolTypeLT: String
  subcontrolTypeLTE: String
  subcontrolTypeContains: String
  subcontrolTypeHasPrefix: String
  subcontrolTypeHasSuffix: String
  subcontrolTypeIsNil: Boolean
  subcontrolTypeNotNil: Boolean
  subcontrolTypeEqualFold: String
  subcontrolTypeContainsFold: String
  """
  version field predicates
  """
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIsNil: Boolean
  versionNotNil: Boolean
  versionEqualFold: String
  versionContainsFold: String
  """
  subcontrol_number field predicates
  """
  subcontrolNumber: String
  subcontrolNumberNEQ: String
  subcontrolNumberIn: [String!]
  subcontrolNumberNotIn: [String!]
  subcontrolNumberGT: String
  subcontrolNumberGTE: String
  subcontrolNumberLT: String
  subcontrolNumberLTE: String
  subcontrolNumberContains: String
  subcontrolNumberHasPrefix: String
  subcontrolNumberHasSuffix: String
  subcontrolNumberIsNil: Boolean
  subcontrolNumberNotNil: Boolean
  subcontrolNumberEqualFold: String
  subcontrolNumberContainsFold: String
  """
  family field predicates
  """
  family: String
  familyNEQ: String
  familyIn: [String!]
  familyNotIn: [String!]
  familyGT: String
  familyGTE: String
  familyLT: String
  familyLTE: String
  familyContains: String
  familyHasPrefix: String
  familyHasSuffix: String
  familyIsNil: Boolean
  familyNotNil: Boolean
  familyEqualFold: String
  familyContainsFold: String
  """
  class field predicates
  """
  class: String
  classNEQ: String
  classIn: [String!]
  classNotIn: [String!]
  classGT: String
  classGTE: String
  classLT: String
  classLTE: String
  classContains: String
  classHasPrefix: String
  classHasSuffix: String
  classIsNil: Boolean
  classNotNil: Boolean
  classEqualFold: String
  classContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  mapped_frameworks field predicates
  """
  mappedFrameworks: String
  mappedFrameworksNEQ: String
  mappedFrameworksIn: [String!]
  mappedFrameworksNotIn: [String!]
  mappedFrameworksGT: String
  mappedFrameworksGTE: String
  mappedFrameworksLT: String
  mappedFrameworksLTE: String
  mappedFrameworksContains: String
  mappedFrameworksHasPrefix: String
  mappedFrameworksHasSuffix: String
  mappedFrameworksIsNil: Boolean
  mappedFrameworksNotNil: Boolean
  mappedFrameworksEqualFold: String
  mappedFrameworksContainsFold: String
  """
  implementation_evidence field predicates
  """
  implementationEvidence: String
  implementationEvidenceNEQ: String
  implementationEvidenceIn: [String!]
  implementationEvidenceNotIn: [String!]
  implementationEvidenceGT: String
  implementationEvidenceGTE: String
  implementationEvidenceLT: String
  implementationEvidenceLTE: String
  implementationEvidenceContains: String
  implementationEvidenceHasPrefix: String
  implementationEvidenceHasSuffix: String
  implementationEvidenceIsNil: Boolean
  implementationEvidenceNotNil: Boolean
  implementationEvidenceEqualFold: String
  implementationEvidenceContainsFold: String
  """
  implementation_status field predicates
  """
  implementationStatus: String
  implementationStatusNEQ: String
  implementationStatusIn: [String!]
  implementationStatusNotIn: [String!]
  implementationStatusGT: String
  implementationStatusGTE: String
  implementationStatusLT: String
  implementationStatusLTE: String
  implementationStatusContains: String
  implementationStatusHasPrefix: String
  implementationStatusHasSuffix: String
  implementationStatusIsNil: Boolean
  implementationStatusNotNil: Boolean
  implementationStatusEqualFold: String
  implementationStatusContainsFold: String
  """
  implementation_date field predicates
  """
  implementationDate: Time
  implementationDateNEQ: Time
  implementationDateIn: [Time!]
  implementationDateNotIn: [Time!]
  implementationDateGT: Time
  implementationDateGTE: Time
  implementationDateLT: Time
  implementationDateLTE: Time
  implementationDateIsNil: Boolean
  implementationDateNotNil: Boolean
  """
  implementation_verification field predicates
  """
  implementationVerification: String
  implementationVerificationNEQ: String
  implementationVerificationIn: [String!]
  implementationVerificationNotIn: [String!]
  implementationVerificationGT: String
  implementationVerificationGTE: String
  implementationVerificationLT: String
  implementationVerificationLTE: String
  implementationVerificationContains: String
  implementationVerificationHasPrefix: String
  implementationVerificationHasSuffix: String
  implementationVerificationIsNil: Boolean
  implementationVerificationNotNil: Boolean
  implementationVerificationEqualFold: String
  implementationVerificationContainsFold: String
  """
  implementation_verification_date field predicates
  """
  implementationVerificationDate: Time
  implementationVerificationDateNEQ: Time
  implementationVerificationDateIn: [Time!]
  implementationVerificationDateNotIn: [Time!]
  implementationVerificationDateGT: Time
  implementationVerificationDateGTE: Time
  implementationVerificationDateLT: Time
  implementationVerificationDateLTE: Time
  implementationVerificationDateIsNil: Boolean
  implementationVerificationDateNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  controls edge predicates
  """
  hasControls: Boolean
  hasControlsWith: [ControlWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  notes edge predicates
  """
  hasNotes: Boolean
  hasNotesWith: [NoteWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
}
type Subscriber implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  email address of the subscriber
  """
  email: String!
  """
  phone number of the subscriber
  """
  phoneNumber: String
  """
  indicates if the email address has been verified
  """
  verifiedEmail: Boolean!
  """
  indicates if the phone number has been verified
  """
  verifiedPhone: Boolean!
  """
  indicates if the subscriber is active or not, active users will have at least one verified contact method
  """
  active: Boolean!
  owner: Organization
  events: [Event!]
}
"""
A connection to a list of items.
"""
type SubscriberConnection {
  """
  A list of edges.
  """
  edges: [SubscriberEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SubscriberEdge {
  """
  The item at the end of the edge.
  """
  node: Subscriber
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SubscriberWhereInput is used for filtering Subscriber objects.
Input was generated by ent.
"""
input SubscriberWhereInput {
  not: SubscriberWhereInput
  and: [SubscriberWhereInput!]
  or: [SubscriberWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIsNil: Boolean
  phoneNumberNotNil: Boolean
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  verified_email field predicates
  """
  verifiedEmail: Boolean
  verifiedEmailNEQ: Boolean
  """
  verified_phone field predicates
  """
  verifiedPhone: Boolean
  verifiedPhoneNEQ: Boolean
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
type TFASetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  TFA secret for the user
  """
  tfaSecret: String
  """
  specifies if the TFA device has been verified
  """
  verified: Boolean!
  """
  recovery codes for 2fa
  """
  recoveryCodes: [String!]
  """
  specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
  """
  totpAllowed: Boolean
  owner: User
}
"""
A connection to a list of items.
"""
type TFASettingConnection {
  """
  A list of edges.
  """
  edges: [TFASettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TFASettingEdge {
  """
  The item at the end of the edge.
  """
  node: TFASetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TFASettingWhereInput is used for filtering TFASetting objects.
Input was generated by ent.
"""
input TFASettingWhereInput {
  not: TFASettingWhereInput
  and: [TFASettingWhereInput!]
  or: [TFASettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  tfa_secret field predicates
  """
  tfaSecret: String
  tfaSecretNEQ: String
  tfaSecretIn: [String!]
  tfaSecretNotIn: [String!]
  tfaSecretGT: String
  tfaSecretGTE: String
  tfaSecretLT: String
  tfaSecretLTE: String
  tfaSecretContains: String
  tfaSecretHasPrefix: String
  tfaSecretHasSuffix: String
  tfaSecretIsNil: Boolean
  tfaSecretNotNil: Boolean
  tfaSecretEqualFold: String
  tfaSecretContainsFold: String
  """
  verified field predicates
  """
  verified: Boolean
  verifiedNEQ: Boolean
  """
  totp_allowed field predicates
  """
  totpAllowed: Boolean
  totpAllowedNEQ: Boolean
  totpAllowedIsNil: Boolean
  totpAllowedNotNil: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
type Task implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the title of the task
  """
  title: String!
  """
  the description of the task
  """
  description: String
  """
  the details of the task
  """
  details: Map
  """
  the status of the task
  """
  status: TaskTaskStatus!
  """
  the due date of the task
  """
  due: Time
  """
  the completion date of the task
  """
  completed: Time
  assigner: User!
  assignee: User
  organization: [Organization!]
  group: [Group!]
  internalPolicy: [InternalPolicy!]
  procedure: [Procedure!]
  control: [Control!]
  controlObjective: [ControlObjective!]
  subcontrol: [Subcontrol!]
  program: [Program!]
}
"""
A connection to a list of items.
"""
type TaskConnection {
  """
  A list of edges.
  """
  edges: [TaskEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TaskEdge {
  """
  The item at the end of the edge.
  """
  node: Task
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TaskHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TaskHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the title of the task
  """
  title: String!
  """
  the description of the task
  """
  description: String
  """
  the details of the task
  """
  details: Map
  """
  the status of the task
  """
  status: TaskHistoryTaskStatus!
  """
  the due date of the task
  """
  due: Time
  """
  the completion date of the task
  """
  completed: Time
}
"""
A connection to a list of items.
"""
type TaskHistoryConnection {
  """
  A list of edges.
  """
  edges: [TaskHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TaskHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TaskHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TaskHistoryOpType is enum for the field operation
"""
enum TaskHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
TaskHistoryTaskStatus is enum for the field status
"""
enum TaskHistoryTaskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.TaskStatus") {
  OPEN
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  WONT_DO
}
"""
TaskHistoryWhereInput is used for filtering TaskHistory objects.
Input was generated by ent.
"""
input TaskHistoryWhereInput {
  not: TaskHistoryWhereInput
  and: [TaskHistoryWhereInput!]
  or: [TaskHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TaskHistoryOpType
  operationNEQ: TaskHistoryOpType
  operationIn: [TaskHistoryOpType!]
  operationNotIn: [TaskHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: TaskHistoryTaskStatus
  statusNEQ: TaskHistoryTaskStatus
  statusIn: [TaskHistoryTaskStatus!]
  statusNotIn: [TaskHistoryTaskStatus!]
  """
  due field predicates
  """
  due: Time
  dueNEQ: Time
  dueIn: [Time!]
  dueNotIn: [Time!]
  dueGT: Time
  dueGTE: Time
  dueLT: Time
  dueLTE: Time
  dueIsNil: Boolean
  dueNotNil: Boolean
  """
  completed field predicates
  """
  completed: Time
  completedNEQ: Time
  completedIn: [Time!]
  completedNotIn: [Time!]
  completedGT: Time
  completedGTE: Time
  completedLT: Time
  completedLTE: Time
  completedIsNil: Boolean
  completedNotNil: Boolean
}
"""
TaskTaskStatus is enum for the field status
"""
enum TaskTaskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.TaskStatus") {
  OPEN
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  WONT_DO
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: TaskTaskStatus
  statusNEQ: TaskTaskStatus
  statusIn: [TaskTaskStatus!]
  statusNotIn: [TaskTaskStatus!]
  """
  due field predicates
  """
  due: Time
  dueNEQ: Time
  dueIn: [Time!]
  dueNotIn: [Time!]
  dueGT: Time
  dueGTE: Time
  dueLT: Time
  dueLTE: Time
  dueIsNil: Boolean
  dueNotNil: Boolean
  """
  completed field predicates
  """
  completed: Time
  completedNEQ: Time
  completedIn: [Time!]
  completedNotIn: [Time!]
  completedGT: Time
  completedGTE: Time
  completedLT: Time
  completedLTE: Time
  completedIsNil: Boolean
  completedNotNil: Boolean
  """
  assigner edge predicates
  """
  hasAssigner: Boolean
  hasAssignerWith: [UserWhereInput!]
  """
  assignee edge predicates
  """
  hasAssignee: Boolean
  hasAssigneeWith: [UserWhereInput!]
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """
  group edge predicates
  """
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """
  internal_policy edge predicates
  """
  hasInternalPolicy: Boolean
  hasInternalPolicyWith: [InternalPolicyWhereInput!]
  """
  procedure edge predicates
  """
  hasProcedure: Boolean
  hasProcedureWith: [ProcedureWhereInput!]
  """
  control edge predicates
  """
  hasControl: Boolean
  hasControlWith: [ControlWhereInput!]
  """
  control_objective edge predicates
  """
  hasControlObjective: Boolean
  hasControlObjectiveWith: [ControlObjectiveWhereInput!]
  """
  subcontrol edge predicates
  """
  hasSubcontrol: Boolean
  hasSubcontrolWith: [SubcontrolWhereInput!]
  """
  program edge predicates
  """
  hasProgram: Boolean
  hasProgramWith: [ProgramWhereInput!]
}
type Template implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: ID
  """
  the name of the template
  """
  name: String!
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateDocumentType!
  """
  the description of the template
  """
  description: String
  """
  the jsonschema object of the template
  """
  jsonconfig: JSON!
  """
  the uischema for the template to render in the UI
  """
  uischema: JSON
  owner: Organization
  documents: [DocumentData!]
  files: [File!]
}
"""
A connection to a list of items.
"""
type TemplateConnection {
  """
  A list of edges.
  """
  edges: [TemplateEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
TemplateDocumentType is enum for the field template_type
"""
enum TemplateDocumentType @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentType") {
  ROOTTEMPLATE
  DOCUMENT
}
"""
An edge in a connection.
"""
type TemplateEdge {
  """
  The item at the end of the edge.
  """
  node: Template
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TemplateHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: TemplateHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  """
  the organization id that owns the object
  """
  ownerID: String
  """
  the name of the template
  """
  name: String!
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateHistoryDocumentType!
  """
  the description of the template
  """
  description: String
  """
  the jsonschema object of the template
  """
  jsonconfig: JSON!
  """
  the uischema for the template to render in the UI
  """
  uischema: JSON
}
"""
A connection to a list of items.
"""
type TemplateHistoryConnection {
  """
  A list of edges.
  """
  edges: [TemplateHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
TemplateHistoryDocumentType is enum for the field template_type
"""
enum TemplateHistoryDocumentType @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentType") {
  ROOTTEMPLATE
  DOCUMENT
}
"""
An edge in a connection.
"""
type TemplateHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TemplateHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TemplateHistoryOpType is enum for the field operation
"""
enum TemplateHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TemplateHistory connections
"""
input TemplateHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TemplateHistories.
  """
  field: TemplateHistoryOrderField!
}
"""
Properties by which TemplateHistory connections can be ordered.
"""
enum TemplateHistoryOrderField {
  name
}
"""
TemplateHistoryWhereInput is used for filtering TemplateHistory objects.
Input was generated by ent.
"""
input TemplateHistoryWhereInput {
  not: TemplateHistoryWhereInput
  and: [TemplateHistoryWhereInput!]
  or: [TemplateHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: TemplateHistoryOpType
  operationNEQ: TemplateHistoryOpType
  operationIn: [TemplateHistoryOpType!]
  operationNotIn: [TemplateHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  template_type field predicates
  """
  templateType: TemplateHistoryDocumentType
  templateTypeNEQ: TemplateHistoryDocumentType
  templateTypeIn: [TemplateHistoryDocumentType!]
  templateTypeNotIn: [TemplateHistoryDocumentType!]
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
}
"""
Ordering options for Template connections
"""
input TemplateOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Templates.
  """
  field: TemplateOrderField!
}
"""
Properties by which Template connections can be ordered.
"""
enum TemplateOrderField {
  name
}
"""
TemplateWhereInput is used for filtering Template objects.
Input was generated by ent.
"""
input TemplateWhereInput {
  not: TemplateWhereInput
  and: [TemplateWhereInput!]
  or: [TemplateWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDContains: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: ID
  ownerIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  template_type field predicates
  """
  templateType: TemplateDocumentType
  templateTypeNEQ: TemplateDocumentType
  templateTypeIn: [TemplateDocumentType!]
  templateTypeNotIn: [TemplateDocumentType!]
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentDataWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateAPITokenInput is used for update APIToken object.
Input was generated by ent.
"""
input UpdateAPITokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name associated with the token
  """
  name: String
  """
  a description of the token's purpose
  """
  description: String
  clearDescription: Boolean
  scopes: [String!]
  appendScopes: [String!]
  clearScopes: Boolean
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateActionPlanInput is used for update ActionPlan object.
Input was generated by ent.
"""
input UpdateActionPlanInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the action plan
  """
  name: String
  """
  description of the action plan
  """
  description: String
  clearDescription: Boolean
  """
  status of the action plan
  """
  status: String
  clearStatus: Boolean
  """
  due date of the action plan
  """
  dueDate: Time
  clearDueDate: Boolean
  """
  priority of the action plan
  """
  priority: String
  clearPriority: Boolean
  """
  source of the action plan
  """
  source: String
  clearSource: Boolean
  """
  json data including details of the action plan
  """
  details: Map
  clearDetails: Boolean
  addStandardIDs: [ID!]
  removeStandardIDs: [ID!]
  clearStandard: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisk: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControl: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUser: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearProgram: Boolean
}
"""
UpdateContactInput is used for update Contact object.
Input was generated by ent.
"""
input UpdateContactInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the full name of the contact
  """
  fullName: String
  """
  the title of the contact
  """
  title: String
  clearTitle: Boolean
  """
  the company of the contact
  """
  company: String
  clearCompany: Boolean
  """
  the email of the contact
  """
  email: String
  clearEmail: Boolean
  """
  the phone number of the contact
  """
  phoneNumber: String
  clearPhoneNumber: Boolean
  """
  the address of the contact
  """
  address: String
  clearAddress: Boolean
  """
  status of the contact
  """
  status: ContactUserStatus
  ownerID: ID
  clearOwner: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateControlInput is used for update Control object.
Input was generated by ent.
"""
input UpdateControlInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the control
  """
  name: String
  """
  description of the control
  """
  description: String
  clearDescription: Boolean
  """
  status of the control
  """
  status: String
  clearStatus: Boolean
  """
  type of the control
  """
  controlType: String
  clearControlType: Boolean
  """
  version of the control
  """
  version: String
  clearVersion: Boolean
  """
  control number or identifier
  """
  controlNumber: String
  clearControlNumber: Boolean
  """
  family associated with the control
  """
  family: String
  clearFamily: Boolean
  """
  class associated with the control
  """
  class: String
  clearClass: Boolean
  """
  source of the control, e.g. framework, template, custom, etc.
  """
  source: String
  clearSource: Boolean
  """
  which control objectives are satisfied by the control
  """
  satisfies: String
  clearSatisfies: Boolean
  """
  mapped frameworks
  """
  mappedFrameworks: String
  clearMappedFrameworks: Boolean
  """
  json data including details of the control
  """
  details: Map
  clearDetails: Boolean
  ownerID: ID
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addStandardIDs: [ID!]
  removeStandardIDs: [ID!]
  clearStandard: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateControlObjectiveInput is used for update ControlObjective object.
Input was generated by ent.
"""
input UpdateControlObjectiveInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the control objective
  """
  name: String
  """
  description of the control objective
  """
  description: String
  clearDescription: Boolean
  """
  status of the control objective
  """
  status: String
  clearStatus: Boolean
  """
  type of the control objective
  """
  controlObjectiveType: String
  clearControlObjectiveType: Boolean
  """
  version of the control objective
  """
  version: String
  clearVersion: Boolean
  """
  number of the control objective
  """
  controlNumber: String
  clearControlNumber: Boolean
  """
  family of the control objective
  """
  family: String
  clearFamily: Boolean
  """
  class associated with the control objective
  """
  class: String
  clearClass: Boolean
  """
  source of the control objective, e.g. framework, template, user-defined, etc.
  """
  source: String
  clearSource: Boolean
  """
  mapped frameworks
  """
  mappedFrameworks: String
  clearMappedFrameworks: Boolean
  """
  json data including details of the control objective
  """
  details: Map
  clearDetails: Boolean
  ownerID: ID
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addStandardIDs: [ID!]
  removeStandardIDs: [ID!]
  clearStandard: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateDocumentDataInput is used for update DocumentData object.
Input was generated by ent.
"""
input UpdateDocumentDataInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the json data of the document
  """
  data: JSON
  ownerID: ID
  clearOwner: Boolean
  templateID: ID
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntity: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateEntityInput is used for update Entity object.
Input was generated by ent.
"""
input UpdateEntityInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the entity
  """
  name: String
  clearName: Boolean
  """
  The entity's displayed 'friendly' name
  """
  displayName: String
  clearDisplayName: Boolean
  """
  An optional description of the entity
  """
  description: String
  clearDescription: Boolean
  """
  domains associated with the entity
  """
  domains: [String!]
  appendDomains: [String!]
  clearDomains: Boolean
  """
  status of the entity
  """
  status: String
  clearStatus: Boolean
  ownerID: ID
  clearOwner: Boolean
  addContactIDs: [ID!]
  removeContactIDs: [ID!]
  clearContacts: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
  addNoteIDs: [ID!]
  removeNoteIDs: [ID!]
  clearNotes: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  entityTypeID: ID
  clearEntityType: Boolean
}
"""
UpdateEntityTypeInput is used for update EntityType object.
Input was generated by ent.
"""
input UpdateEntityTypeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the entity
  """
  name: String
  ownerID: ID
  clearOwner: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
}
"""
UpdateEventInput is used for update Event object.
Input was generated by ent.
"""
input UpdateEventInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  eventID: String
  clearEventID: Boolean
  correlationID: String
  clearCorrelationID: Boolean
  eventType: String
  metadata: Map
  clearMetadata: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUser: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroup: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegration: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganization: Boolean
  addInviteIDs: [ID!]
  removeInviteIDs: [ID!]
  clearInvite: Boolean
  addPersonalAccessTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  clearPersonalAccessToken: Boolean
  addHushIDs: [ID!]
  removeHushIDs: [ID!]
  clearHush: Boolean
  addSubscriberIDs: [ID!]
  removeSubscriberIDs: [ID!]
  clearSubscriber: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFile: Boolean
}
"""
UpdateFileInput is used for update File object.
Input was generated by ent.
"""
input UpdateFileInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the file provided in the payload key without the extension
  """
  providedFileName: String
  """
  the extension of the file provided
  """
  providedFileExtension: String
  """
  the computed size of the file in the original http request
  """
  providedFileSize: Int
  clearProvidedFileSize: Boolean
  persistedFileSize: Int
  clearPersistedFileSize: Boolean
  """
  the mime type detected by the system
  """
  detectedMimeType: String
  clearDetectedMimeType: Boolean
  """
  the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
  """
  md5Hash: String
  clearMd5Hash: Boolean
  """
  the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
  """
  detectedContentType: String
  """
  the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
  """
  storeKey: String
  clearStoreKey: Boolean
  """
  the category type of the file, if any (e.g. evidence, invoice, etc.)
  """
  categoryType: String
  clearCategoryType: Boolean
  """
  the full URI of the file
  """
  uri: String
  clearURI: Boolean
  """
  the storage scheme of the file, e.g. file://, s3://, etc.
  """
  storageScheme: String
  clearStorageScheme: Boolean
  """
  the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
  """
  storageVolume: String
  clearStorageVolume: Boolean
  """
  the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
  """
  storagePath: String
  clearStoragePath: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUser: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganization: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroup: Boolean
  addContactIDs: [ID!]
  removeContactIDs: [ID!]
  clearContact: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntity: Boolean
  addUserSettingIDs: [ID!]
  removeUserSettingIDs: [ID!]
  clearUserSetting: Boolean
  addOrganizationSettingIDs: [ID!]
  removeOrganizationSettingIDs: [ID!]
  clearOrganizationSetting: Boolean
  addTemplateIDs: [ID!]
  removeTemplateIDs: [ID!]
  clearTemplate: Boolean
  addDocumentDatumIDs: [ID!]
  removeDocumentDatumIDs: [ID!]
  clearDocumentData: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearProgram: Boolean
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the group - must be unique within the organization
  """
  name: String
  """
  the groups description
  """
  description: String
  clearDescription: Boolean
  """
  the URL to an auto generated gravatar image for the group
  """
  gravatarLogoURL: String
  clearGravatarLogoURL: Boolean
  """
  the URL to an image uploaded by the customer for the groups avatar image
  """
  logoURL: String
  clearLogoURL: Boolean
  """
  The group's displayed 'friendly' name
  """
  displayName: String
  ownerID: ID
  clearOwner: Boolean
  addControlCreatorIDs: [ID!]
  removeControlCreatorIDs: [ID!]
  clearControlCreators: Boolean
  addControlObjectiveCreatorIDs: [ID!]
  removeControlObjectiveCreatorIDs: [ID!]
  clearControlObjectiveCreators: Boolean
  addGroupCreatorIDs: [ID!]
  removeGroupCreatorIDs: [ID!]
  clearGroupCreators: Boolean
  addInternalPolicyCreatorIDs: [ID!]
  removeInternalPolicyCreatorIDs: [ID!]
  clearInternalPolicyCreators: Boolean
  addNarrativeCreatorIDs: [ID!]
  removeNarrativeCreatorIDs: [ID!]
  clearNarrativeCreators: Boolean
  addProcedureCreatorIDs: [ID!]
  removeProcedureCreatorIDs: [ID!]
  clearProcedureCreators: Boolean
  addProgramCreatorIDs: [ID!]
  removeProgramCreatorIDs: [ID!]
  clearProgramCreators: Boolean
  addRiskCreatorIDs: [ID!]
  removeRiskCreatorIDs: [ID!]
  clearRiskCreators: Boolean
  addTemplateCreatorIDs: [ID!]
  removeTemplateCreatorIDs: [ID!]
  clearTemplateCreators: Boolean
  addProcedureEditorIDs: [ID!]
  removeProcedureEditorIDs: [ID!]
  clearProcedureEditors: Boolean
  addProcedureBlockedGroupIDs: [ID!]
  removeProcedureBlockedGroupIDs: [ID!]
  clearProcedureBlockedGroups: Boolean
  addInternalPolicyEditorIDs: [ID!]
  removeInternalPolicyEditorIDs: [ID!]
  clearInternalPolicyEditors: Boolean
  addInternalPolicyBlockedGroupIDs: [ID!]
  removeInternalPolicyBlockedGroupIDs: [ID!]
  clearInternalPolicyBlockedGroups: Boolean
  addProgramEditorIDs: [ID!]
  removeProgramEditorIDs: [ID!]
  clearProgramEditors: Boolean
  addProgramBlockedGroupIDs: [ID!]
  removeProgramBlockedGroupIDs: [ID!]
  clearProgramBlockedGroups: Boolean
  addProgramViewerIDs: [ID!]
  removeProgramViewerIDs: [ID!]
  clearProgramViewers: Boolean
  addRiskEditorIDs: [ID!]
  removeRiskEditorIDs: [ID!]
  clearRiskEditors: Boolean
  addRiskBlockedGroupIDs: [ID!]
  removeRiskBlockedGroupIDs: [ID!]
  clearRiskBlockedGroups: Boolean
  addRiskViewerIDs: [ID!]
  removeRiskViewerIDs: [ID!]
  clearRiskViewers: Boolean
  addControlObjectiveEditorIDs: [ID!]
  removeControlObjectiveEditorIDs: [ID!]
  clearControlObjectiveEditors: Boolean
  addControlObjectiveBlockedGroupIDs: [ID!]
  removeControlObjectiveBlockedGroupIDs: [ID!]
  clearControlObjectiveBlockedGroups: Boolean
  addControlObjectiveViewerIDs: [ID!]
  removeControlObjectiveViewerIDs: [ID!]
  clearControlObjectiveViewers: Boolean
  addControlEditorIDs: [ID!]
  removeControlEditorIDs: [ID!]
  clearControlEditors: Boolean
  addControlBlockedGroupIDs: [ID!]
  removeControlBlockedGroupIDs: [ID!]
  clearControlBlockedGroups: Boolean
  addControlViewerIDs: [ID!]
  removeControlViewerIDs: [ID!]
  clearControlViewers: Boolean
  addNarrativeEditorIDs: [ID!]
  removeNarrativeEditorIDs: [ID!]
  clearNarrativeEditors: Boolean
  addNarrativeBlockedGroupIDs: [ID!]
  removeNarrativeBlockedGroupIDs: [ID!]
  clearNarrativeBlockedGroups: Boolean
  addNarrativeViewerIDs: [ID!]
  removeNarrativeViewerIDs: [ID!]
  clearNarrativeViewers: Boolean
  settingID: ID
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
}
"""
UpdateGroupMembershipInput is used for update GroupMembership object.
Input was generated by ent.
"""
input UpdateGroupMembershipInput {
  role: GroupMembershipRole
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateGroupSettingInput is used for update GroupSetting object.
Input was generated by ent.
"""
input UpdateGroupSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
  """
  visibility: GroupSettingVisibility
  """
  the policy governing ability to freely join a group, whether it requires an invitation, application, or either
  """
  joinPolicy: GroupSettingJoinPolicy
  """
  whether to sync group members to slack groups
  """
  syncToSlack: Boolean
  clearSyncToSlack: Boolean
  """
  whether to sync group members to github groups
  """
  syncToGithub: Boolean
  clearSyncToGithub: Boolean
  groupID: ID
  clearGroup: Boolean
}
"""
UpdateHushInput is used for update Hush object.
Input was generated by ent.
"""
input UpdateHushInput {
  """
  the logical name of the corresponding hush secret or it's general grouping
  """
  name: String
  """
  a description of the hush value or purpose, such as github PAT
  """
  description: String
  clearDescription: Boolean
  """
  the kind of secret, such as sshkey, certificate, api token, etc.
  """
  kind: String
  clearKind: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganization: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateIntegrationInput is used for update Integration object.
Input was generated by ent.
"""
input UpdateIntegrationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the integration - must be unique within the organization
  """
  name: String
  """
  a description of the integration
  """
  description: String
  clearDescription: Boolean
  kind: String
  clearKind: Boolean
  ownerID: ID
  clearOwner: Boolean
  addSecretIDs: [ID!]
  removeSecretIDs: [ID!]
  clearSecrets: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateInternalPolicyInput is used for update InternalPolicy object.
Input was generated by ent.
"""
input UpdateInternalPolicyInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the policy
  """
  name: String
  """
  description of the policy
  """
  description: String
  clearDescription: Boolean
  """
  status of the policy
  """
  status: String
  clearStatus: Boolean
  """
  type of the policy
  """
  policyType: String
  clearPolicyType: Boolean
  """
  version of the policy
  """
  version: String
  clearVersion: Boolean
  """
  purpose and scope
  """
  purposeAndScope: String
  clearPurposeAndScope: Boolean
  """
  background of the policy
  """
  background: String
  clearBackground: Boolean
  """
  json data for the policy document
  """
  details: Map
  clearDetails: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateInviteInput is used for update Invite object.
Input was generated by ent.
"""
input UpdateInviteInput {
  """
  the expiration date of the invitation token which defaults to 14 days in the future from creation
  """
  expires: Time
  clearExpires: Boolean
  """
  the status of the invitation
  """
  status: InviteInviteStatus
  role: InviteRole
  """
  the number of attempts made to perform email send of the invitation, maximum of 5
  """
  sendAttempts: Int
  ownerID: ID
  clearOwner: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateNarrativeInput is used for update Narrative object.
Input was generated by ent.
"""
input UpdateNarrativeInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the narrative
  """
  name: String
  """
  the description of the narrative
  """
  description: String
  clearDescription: Boolean
  """
  which controls are satisfied by the narrative
  """
  satisfies: String
  clearSatisfies: Boolean
  """
  json data for the narrative document
  """
  details: Map
  clearDetails: Boolean
  ownerID: ID
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicy: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControl: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedure: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjective: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateNoteInput is used for update Note object.
Input was generated by ent.
"""
input UpdateNoteInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the text of the note
  """
  text: String
  ownerID: ID
  clearOwner: Boolean
  entityID: ID
  clearEntity: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearProgram: Boolean
}
"""
UpdateOrgMembershipInput is used for update OrgMembership object.
Input was generated by ent.
"""
input UpdateOrgMembershipInput {
  role: OrgMembershipRole
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the organization
  """
  name: String
  """
  The organization's displayed 'friendly' name
  """
  displayName: String
  """
  An optional description of the organization
  """
  description: String
  clearDescription: Boolean
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  clearAvatarRemoteURL: Boolean
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  clearAvatarUpdatedAt: Boolean
  addControlCreatorIDs: [ID!]
  removeControlCreatorIDs: [ID!]
  clearControlCreators: Boolean
  addControlObjectiveCreatorIDs: [ID!]
  removeControlObjectiveCreatorIDs: [ID!]
  clearControlObjectiveCreators: Boolean
  addGroupCreatorIDs: [ID!]
  removeGroupCreatorIDs: [ID!]
  clearGroupCreators: Boolean
  addInternalPolicyCreatorIDs: [ID!]
  removeInternalPolicyCreatorIDs: [ID!]
  clearInternalPolicyCreators: Boolean
  addNarrativeCreatorIDs: [ID!]
  removeNarrativeCreatorIDs: [ID!]
  clearNarrativeCreators: Boolean
  addProcedureCreatorIDs: [ID!]
  removeProcedureCreatorIDs: [ID!]
  clearProcedureCreators: Boolean
  addProgramCreatorIDs: [ID!]
  removeProgramCreatorIDs: [ID!]
  clearProgramCreators: Boolean
  addRiskCreatorIDs: [ID!]
  removeRiskCreatorIDs: [ID!]
  clearRiskCreators: Boolean
  addTemplateCreatorIDs: [ID!]
  removeTemplateCreatorIDs: [ID!]
  clearTemplateCreators: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addTemplateIDs: [ID!]
  removeTemplateIDs: [ID!]
  clearTemplates: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  settingID: ID
  clearSetting: Boolean
  addDocumentDatumIDs: [ID!]
  removeDocumentDatumIDs: [ID!]
  clearDocumentData: Boolean
  addOrgSubscriptionIDs: [ID!]
  removeOrgSubscriptionIDs: [ID!]
  clearOrgSubscriptions: Boolean
  addPersonalAccessTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  clearPersonalAccessTokens: Boolean
  addAPITokenIDs: [ID!]
  removeAPITokenIDs: [ID!]
  clearAPITokens: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addInviteIDs: [ID!]
  removeInviteIDs: [ID!]
  clearInvites: Boolean
  addSubscriberIDs: [ID!]
  removeSubscriberIDs: [ID!]
  clearSubscribers: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addSecretIDs: [ID!]
  removeSecretIDs: [ID!]
  clearSecrets: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  avatarFileID: ID
  clearAvatarFile: Boolean
  addEntityIDs: [ID!]
  removeEntityIDs: [ID!]
  clearEntities: Boolean
  addEntityTypeIDs: [ID!]
  removeEntityTypeIDs: [ID!]
  clearEntityTypes: Boolean
  addContactIDs: [ID!]
  removeContactIDs: [ID!]
  clearContacts: Boolean
  addNoteIDs: [ID!]
  removeNoteIDs: [ID!]
  clearNotes: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
}
"""
UpdateOrganizationSettingInput is used for update OrganizationSetting object.
Input was generated by ent.
"""
input UpdateOrganizationSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  domains associated with the organization
  """
  domains: [String!]
  appendDomains: [String!]
  clearDomains: Boolean
  """
  Name of the person to contact for billing
  """
  billingContact: String
  clearBillingContact: Boolean
  """
  Email address of the person to contact for billing
  """
  billingEmail: String
  clearBillingEmail: Boolean
  """
  Phone number to contact for billing
  """
  billingPhone: String
  clearBillingPhone: Boolean
  """
  the billing address to send billing information to
  """
  billingAddress: Address
  clearBillingAddress: Boolean
  """
  Usually government-issued tax ID or business ID such as ABN in Australia
  """
  taxIdentifier: String
  clearTaxIdentifier: Boolean
  """
  geographical location of the organization
  """
  geoLocation: OrganizationSettingRegion
  clearGeoLocation: Boolean
  """
  should we send email notifications related to billing
  """
  billingNotificationsEnabled: Boolean
  organizationID: ID
  clearOrganization: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdatePersonalAccessTokenInput is used for update PersonalAccessToken object.
Input was generated by ent.
"""
input UpdatePersonalAccessTokenInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name associated with the token
  """
  name: String
  """
  a description of the token's purpose
  """
  description: String
  clearDescription: Boolean
  scopes: [String!]
  appendScopes: [String!]
  clearScopes: Boolean
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganizations: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateProcedureInput is used for update Procedure object.
Input was generated by ent.
"""
input UpdateProcedureInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the procedure
  """
  name: String
  """
  description of the procedure
  """
  description: String
  clearDescription: Boolean
  """
  status of the procedure
  """
  status: String
  clearStatus: Boolean
  """
  type of the procedure
  """
  procedureType: String
  clearProcedureType: Boolean
  """
  version of the procedure
  """
  version: String
  clearVersion: Boolean
  """
  purpose and scope
  """
  purposeAndScope: String
  clearPurposeAndScope: Boolean
  """
  background of the procedure
  """
  background: String
  clearBackground: Boolean
  """
  which controls are satisfied by the procedure
  """
  satisfies: String
  clearSatisfies: Boolean
  """
  json data for the procedure document
  """
  details: Map
  clearDetails: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateProgramInput is used for update Program object.
Input was generated by ent.
"""
input UpdateProgramInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the program
  """
  name: String
  """
  the description of the program
  """
  description: String
  clearDescription: Boolean
  """
  the status of the program
  """
  status: ProgramProgramStatus
  """
  the start date of the period
  """
  startDate: Time
  clearStartDate: Boolean
  """
  the end date of the period
  """
  endDate: Time
  clearEndDate: Boolean
  """
  is the program ready for the auditor
  """
  auditorReady: Boolean
  """
  can the auditor write comments
  """
  auditorWriteComments: Boolean
  """
  can the auditor read comments
  """
  auditorReadComments: Boolean
  ownerID: ID
  clearOwner: Boolean
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicies: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addRiskIDs: [ID!]
  removeRiskIDs: [ID!]
  clearRisks: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addNoteIDs: [ID!]
  removeNoteIDs: [ID!]
  clearNotes: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  addNarrativeIDs: [ID!]
  removeNarrativeIDs: [ID!]
  clearNarratives: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addStandardIDs: [ID!]
  removeStandardIDs: [ID!]
  clearStandards: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
}
"""
UpdateProgramMembershipInput is used for update ProgramMembership object.
Input was generated by ent.
"""
input UpdateProgramMembershipInput {
  role: ProgramMembershipRole
}
"""
UpdateRiskInput is used for update Risk object.
Input was generated by ent.
"""
input UpdateRiskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the risk
  """
  name: String
  """
  description of the risk
  """
  description: String
  clearDescription: Boolean
  """
  status of the risk - mitigated or not, inflight, etc.
  """
  status: String
  clearStatus: Boolean
  """
  type of the risk, e.g. strategic, operational, financial, external, etc.
  """
  riskType: String
  clearRiskType: Boolean
  """
  business costs associated with the risk
  """
  businessCosts: String
  clearBusinessCosts: Boolean
  """
  impact of the risk - high, medium, low
  """
  impact: RiskRiskImpact
  clearImpact: Boolean
  """
  likelihood of the risk occurring; unlikely, likely, highly likely
  """
  likelihood: RiskRiskLikelihood
  clearLikelihood: Boolean
  """
  mitigation for the risk
  """
  mitigation: String
  clearMitigation: Boolean
  """
  which controls are satisfied by the risk
  """
  satisfies: String
  clearSatisfies: Boolean
  """
  json data for the risk document
  """
  details: Map
  clearDetails: Boolean
  ownerID: ID
  addBlockedGroupIDs: [ID!]
  removeBlockedGroupIDs: [ID!]
  clearBlockedGroups: Boolean
  addEditorIDs: [ID!]
  removeEditorIDs: [ID!]
  clearEditors: Boolean
  addViewerIDs: [ID!]
  removeViewerIDs: [ID!]
  clearViewers: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControl: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedure: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateStandardInput is used for update Standard object.
Input was generated by ent.
"""
input UpdateStandardInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
  """
  name: String
  """
  description of the standard
  """
  description: String
  clearDescription: Boolean
  """
  family of the standard, e.g. 800-53, 800-171, 27001, etc.
  """
  family: String
  clearFamily: Boolean
  """
  status of the standard - active, deprecated, etc.
  """
  status: String
  clearStatus: Boolean
  """
  type of the standard - security, privacy, etc.
  """
  standardType: String
  clearStandardType: Boolean
  """
  version of the standard
  """
  version: String
  clearVersion: Boolean
  """
  purpose and scope
  """
  purposeAndScope: String
  clearPurposeAndScope: Boolean
  """
  background of the standard
  """
  background: String
  clearBackground: Boolean
  """
  which controls are satisfied by the standard
  """
  satisfies: String
  clearSatisfies: Boolean
  """
  json data with details of the standard
  """
  details: Map
  clearDetails: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjectives: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControls: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedures: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateSubcontrolInput is used for update Subcontrol object.
Input was generated by ent.
"""
input UpdateSubcontrolInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the subcontrol
  """
  name: String
  """
  description of the subcontrol
  """
  description: String
  clearDescription: Boolean
  """
  status of the subcontrol
  """
  status: String
  clearStatus: Boolean
  """
  type of the subcontrol
  """
  subcontrolType: String
  clearSubcontrolType: Boolean
  """
  version of the control
  """
  version: String
  clearVersion: Boolean
  """
  number of the subcontrol
  """
  subcontrolNumber: String
  clearSubcontrolNumber: Boolean
  """
  subcontrol family
  """
  family: String
  clearFamily: Boolean
  """
  subcontrol class
  """
  class: String
  clearClass: Boolean
  """
  source of the control, e.g. framework, template, user-defined, etc.
  """
  source: String
  clearSource: Boolean
  """
  mapped frameworks that the subcontrol is part of
  """
  mappedFrameworks: String
  clearMappedFrameworks: Boolean
  """
  implementation evidence of the subcontrol
  """
  implementationEvidence: String
  clearImplementationEvidence: Boolean
  """
  implementation status
  """
  implementationStatus: String
  clearImplementationStatus: Boolean
  """
  date the subcontrol was implemented
  """
  implementationDate: Time
  clearImplementationDate: Boolean
  """
  implementation verification
  """
  implementationVerification: String
  clearImplementationVerification: Boolean
  """
  date the subcontrol implementation was verified
  """
  implementationVerificationDate: Time
  clearImplementationVerificationDate: Boolean
  """
  json data details of the subcontrol
  """
  details: Map
  clearDetails: Boolean
  ownerID: ID
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUser: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  notesID: ID
  clearNotes: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateSubscriberInput is used for update Subscriber object.
Input was generated by ent.
"""
input UpdateSubscriberInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  email address of the subscriber
  """
  email: String
  """
  phone number of the subscriber
  """
  phoneNumber: String
  clearPhoneNumber: Boolean
  ownerID: ID
  clearOwner: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
}
"""
UpdateTFASettingInput is used for update TFASetting object.
Input was generated by ent.
"""
input UpdateTFASettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  specifies if the TFA device has been verified
  """
  verified: Boolean
  """
  specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
  """
  totpAllowed: Boolean
  clearTotpAllowed: Boolean
}
"""
UpdateTaskInput is used for update Task object.
Input was generated by ent.
"""
input UpdateTaskInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the title of the task
  """
  title: String
  """
  the description of the task
  """
  description: String
  clearDescription: Boolean
  """
  the details of the task
  """
  details: Map
  clearDetails: Boolean
  """
  the status of the task
  """
  status: TaskTaskStatus
  """
  the due date of the task
  """
  due: Time
  clearDue: Boolean
  """
  the completion date of the task
  """
  completed: Time
  clearCompleted: Boolean
  assignerID: ID
  assigneeID: ID
  clearAssignee: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganization: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroup: Boolean
  addInternalPolicyIDs: [ID!]
  removeInternalPolicyIDs: [ID!]
  clearInternalPolicy: Boolean
  addProcedureIDs: [ID!]
  removeProcedureIDs: [ID!]
  clearProcedure: Boolean
  addControlIDs: [ID!]
  removeControlIDs: [ID!]
  clearControl: Boolean
  addControlObjectiveIDs: [ID!]
  removeControlObjectiveIDs: [ID!]
  clearControlObjective: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrol: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearProgram: Boolean
}
"""
UpdateTemplateInput is used for update Template object.
Input was generated by ent.
"""
input UpdateTemplateInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  the name of the template
  """
  name: String
  """
  the type of the template, either a provided template or an implementation (document)
  """
  templateType: TemplateDocumentType
  """
  the description of the template
  """
  description: String
  clearDescription: Boolean
  """
  the jsonschema object of the template
  """
  jsonconfig: JSON
  """
  the uischema for the template to render in the UI
  """
  uischema: JSON
  clearUischema: Boolean
  ownerID: ID
  clearOwner: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  email: String
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  """
  The user's displayed 'friendly' name
  """
  displayName: String
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  clearAvatarRemoteURL: Boolean
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  clearAvatarUpdatedAt: Boolean
  """
  the time the user was last seen
  """
  lastSeen: Time
  clearLastSeen: Boolean
  """
  user password hash
  """
  password: String
  clearPassword: Boolean
  """
  the Subject of the user JWT
  """
  sub: String
  clearSub: Boolean
  """
  auth provider used to register the account
  """
  authProvider: UserAuthProvider
  """
  the user's role
  """
  role: UserRole
  clearRole: Boolean
  addPersonalAccessTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  clearPersonalAccessTokens: Boolean
  addTfaSettingIDs: [ID!]
  removeTfaSettingIDs: [ID!]
  clearTfaSettings: Boolean
  settingID: ID
  addEmailVerificationTokenIDs: [ID!]
  removeEmailVerificationTokenIDs: [ID!]
  clearEmailVerificationTokens: Boolean
  addPasswordResetTokenIDs: [ID!]
  removePasswordResetTokenIDs: [ID!]
  clearPasswordResetTokens: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganizations: Boolean
  addWebauthnIDs: [ID!]
  removeWebauthnIDs: [ID!]
  clearWebauthn: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
  avatarFileID: ID
  clearAvatarFile: Boolean
  addEventIDs: [ID!]
  removeEventIDs: [ID!]
  clearEvents: Boolean
  addActionPlanIDs: [ID!]
  removeActionPlanIDs: [ID!]
  clearActionPlans: Boolean
  addSubcontrolIDs: [ID!]
  removeSubcontrolIDs: [ID!]
  clearSubcontrols: Boolean
  addAssignerTaskIDs: [ID!]
  removeAssignerTaskIDs: [ID!]
  clearAssignerTasks: Boolean
  addAssigneeTaskIDs: [ID!]
  removeAssigneeTaskIDs: [ID!]
  clearAssigneeTasks: Boolean
  addProgramIDs: [ID!]
  removeProgramIDs: [ID!]
  clearPrograms: Boolean
}
"""
UpdateUserSettingInput is used for update UserSetting object.
Input was generated by ent.
"""
input UpdateUserSettingInput {
  """
  tags associated with the object
  """
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  clearSilencedAt: Boolean
  """
  The time the user was suspended
  """
  suspendedAt: Time
  clearSuspendedAt: Boolean
  """
  status of the user account
  """
  status: UserSettingUserStatus
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean
  """
  specifies a user may complete authentication by verifying a WebAuthn capable device
  """
  isWebauthnAllowed: Boolean
  clearIsWebauthnAllowed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
  clearIsTfaEnabled: Boolean
  userID: ID
  clearUser: Boolean
  defaultOrgID: ID
  clearDefaultOrg: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  email: String!
  firstName: String
  lastName: String
  """
  The user's displayed 'friendly' name
  """
  displayName: String!
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The user's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: ID
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  the time the user was last seen
  """
  lastSeen: Time
  """
  the Subject of the user JWT
  """
  sub: String
  """
  auth provider used to register the account
  """
  authProvider: UserAuthProvider!
  """
  the user's role
  """
  role: UserRole
  personalAccessTokens: [PersonalAccessToken!]
  tfaSettings: [TFASetting!]
  setting: UserSetting!
  groups: [Group!]
  organizations: [Organization!]
  files: [File!]
  avatarFile: File
  events: [Event!]
  actionPlans: [ActionPlan!]
  subcontrols: [Subcontrol!]
  assignerTasks: [Task!]
  assigneeTasks: [Task!]
  programs: [Program!]
  groupMemberships: [GroupMembership!]
  orgMemberships: [OrgMembership!]
  programMemberships: [ProgramMembership!]
}
"""
UserAuthProvider is enum for the field auth_provider
"""
enum UserAuthProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.AuthProvider") {
  CREDENTIALS
  GOOGLE
  GITHUB
  WEBAUTHN
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type UserHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: UserHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  email: String!
  firstName: String
  lastName: String
  """
  The user's displayed 'friendly' name
  """
  displayName: String!
  """
  URL of the user's remote avatar
  """
  avatarRemoteURL: String
  """
  The user's local avatar file id, takes precedence over the avatar remote URL
  """
  avatarLocalFileID: String
  """
  The time the user's (local) avatar was last updated
  """
  avatarUpdatedAt: Time
  """
  the time the user was last seen
  """
  lastSeen: Time
  """
  the Subject of the user JWT
  """
  sub: String
  """
  auth provider used to register the account
  """
  authProvider: UserHistoryAuthProvider!
  """
  the user's role
  """
  role: UserHistoryRole
}
"""
UserHistoryAuthProvider is enum for the field auth_provider
"""
enum UserHistoryAuthProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.AuthProvider") {
  CREDENTIALS
  GOOGLE
  GITHUB
  WEBAUTHN
}
"""
A connection to a list of items.
"""
type UserHistoryConnection {
  """
  A list of edges.
  """
  edges: [UserHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: UserHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserHistoryOpType is enum for the field operation
"""
enum UserHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for UserHistory connections
"""
input UserHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserHistories.
  """
  field: UserHistoryOrderField!
}
"""
Properties by which UserHistory connections can be ordered.
"""
enum UserHistoryOrderField {
  first_name
  last_name
  display_name
}
"""
UserHistoryRole is enum for the field role
"""
enum UserHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  USER
}
"""
UserHistoryWhereInput is used for filtering UserHistory objects.
Input was generated by ent.
"""
input UserHistoryWhereInput {
  not: UserHistoryWhereInput
  and: [UserHistoryWhereInput!]
  or: [UserHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: UserHistoryOpType
  operationNEQ: UserHistoryOpType
  operationIn: [UserHistoryOpType!]
  operationNotIn: [UserHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: String
  avatarLocalFileIDNEQ: String
  avatarLocalFileIDIn: [String!]
  avatarLocalFileIDNotIn: [String!]
  avatarLocalFileIDGT: String
  avatarLocalFileIDGTE: String
  avatarLocalFileIDLT: String
  avatarLocalFileIDLTE: String
  avatarLocalFileIDContains: String
  avatarLocalFileIDHasPrefix: String
  avatarLocalFileIDHasSuffix: String
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: String
  avatarLocalFileIDContainsFold: String
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
  """
  last_seen field predicates
  """
  lastSeen: Time
  lastSeenNEQ: Time
  lastSeenIn: [Time!]
  lastSeenNotIn: [Time!]
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenIsNil: Boolean
  lastSeenNotNil: Boolean
  """
  sub field predicates
  """
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subIsNil: Boolean
  subNotNil: Boolean
  subEqualFold: String
  subContainsFold: String
  """
  auth_provider field predicates
  """
  authProvider: UserHistoryAuthProvider
  authProviderNEQ: UserHistoryAuthProvider
  authProviderIn: [UserHistoryAuthProvider!]
  authProviderNotIn: [UserHistoryAuthProvider!]
  """
  role field predicates
  """
  role: UserHistoryRole
  roleNEQ: UserHistoryRole
  roleIn: [UserHistoryRole!]
  roleNotIn: [UserHistoryRole!]
  roleIsNil: Boolean
  roleNotNil: Boolean
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  first_name
  last_name
  display_name
}
"""
UserRole is enum for the field role
"""
enum UserRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
  ADMIN
  MEMBER
  USER
}
type UserSetting implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  userID: ID
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean!
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  """
  The time the user was suspended
  """
  suspendedAt: Time
  """
  status of the user account
  """
  status: UserSettingUserStatus!
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean!
  """
  specifies a user may complete authentication by verifying a WebAuthn capable device
  """
  isWebauthnAllowed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
  user: User
  """
  organization to load on user login
  """
  defaultOrg: Organization
  files: [File!]
}
"""
A connection to a list of items.
"""
type UserSettingConnection {
  """
  A list of edges.
  """
  edges: [UserSettingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserSettingEdge {
  """
  The item at the end of the edge.
  """
  node: UserSetting
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type UserSettingHistory implements Node {
  id: ID!
  historyTime: Time!
  ref: String
  operation: UserSettingHistoryOpType!
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """
  tags associated with the object
  """
  tags: [String!]
  deletedAt: Time
  deletedBy: String
  userID: String
  """
  user account is locked if unconfirmed or explicitly locked
  """
  locked: Boolean!
  """
  The time notifications regarding the user were silenced
  """
  silencedAt: Time
  """
  The time the user was suspended
  """
  suspendedAt: Time
  """
  status of the user account
  """
  status: UserSettingHistoryUserStatus!
  """
  whether the user has confirmed their email address
  """
  emailConfirmed: Boolean!
  """
  specifies a user may complete authentication by verifying a WebAuthn capable device
  """
  isWebauthnAllowed: Boolean
  """
  whether the user has two factor authentication enabled
  """
  isTfaEnabled: Boolean
}
"""
A connection to a list of items.
"""
type UserSettingHistoryConnection {
  """
  A list of edges.
  """
  edges: [UserSettingHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserSettingHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: UserSettingHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserSettingHistoryOpType is enum for the field operation
"""
enum UserSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
UserSettingHistoryUserStatus is enum for the field status
"""
enum UserSettingHistoryUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
UserSettingHistoryWhereInput is used for filtering UserSettingHistory objects.
Input was generated by ent.
"""
input UserSettingHistoryWhereInput {
  not: UserSettingHistoryWhereInput
  and: [UserSettingHistoryWhereInput!]
  or: [UserSettingHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  ref field predicates
  """
  ref: String
  refNEQ: String
  refIn: [String!]
  refNotIn: [String!]
  refGT: String
  refGTE: String
  refLT: String
  refLTE: String
  refContains: String
  refHasPrefix: String
  refHasSuffix: String
  refIsNil: Boolean
  refNotNil: Boolean
  refEqualFold: String
  refContainsFold: String
  """
  operation field predicates
  """
  operation: UserSettingHistoryOpType
  operationNEQ: UserSettingHistoryOpType
  operationIn: [UserSettingHistoryOpType!]
  operationNotIn: [UserSettingHistoryOpType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: String
  userIDContainsFold: String
  """
  locked field predicates
  """
  locked: Boolean
  lockedNEQ: Boolean
  """
  silenced_at field predicates
  """
  silencedAt: Time
  silencedAtNEQ: Time
  silencedAtIn: [Time!]
  silencedAtNotIn: [Time!]
  silencedAtGT: Time
  silencedAtGTE: Time
  silencedAtLT: Time
  silencedAtLTE: Time
  silencedAtIsNil: Boolean
  silencedAtNotNil: Boolean
  """
  suspended_at field predicates
  """
  suspendedAt: Time
  suspendedAtNEQ: Time
  suspendedAtIn: [Time!]
  suspendedAtNotIn: [Time!]
  suspendedAtGT: Time
  suspendedAtGTE: Time
  suspendedAtLT: Time
  suspendedAtLTE: Time
  suspendedAtIsNil: Boolean
  suspendedAtNotNil: Boolean
  """
  status field predicates
  """
  status: UserSettingHistoryUserStatus
  statusNEQ: UserSettingHistoryUserStatus
  statusIn: [UserSettingHistoryUserStatus!]
  statusNotIn: [UserSettingHistoryUserStatus!]
  """
  email_confirmed field predicates
  """
  emailConfirmed: Boolean
  emailConfirmedNEQ: Boolean
  """
  is_webauthn_allowed field predicates
  """
  isWebauthnAllowed: Boolean
  isWebauthnAllowedNEQ: Boolean
  isWebauthnAllowedIsNil: Boolean
  isWebauthnAllowedNotNil: Boolean
  """
  is_tfa_enabled field predicates
  """
  isTfaEnabled: Boolean
  isTfaEnabledNEQ: Boolean
  isTfaEnabledIsNil: Boolean
  isTfaEnabledNotNil: Boolean
}
"""
UserSettingUserStatus is enum for the field status
"""
enum UserSettingUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
  ONBOARDING
}
"""
UserSettingWhereInput is used for filtering UserSetting objects.
Input was generated by ent.
"""
input UserSettingWhereInput {
  not: UserSettingWhereInput
  and: [UserSettingWhereInput!]
  or: [UserSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """
  locked field predicates
  """
  locked: Boolean
  lockedNEQ: Boolean
  """
  silenced_at field predicates
  """
  silencedAt: Time
  silencedAtNEQ: Time
  silencedAtIn: [Time!]
  silencedAtNotIn: [Time!]
  silencedAtGT: Time
  silencedAtGTE: Time
  silencedAtLT: Time
  silencedAtLTE: Time
  silencedAtIsNil: Boolean
  silencedAtNotNil: Boolean
  """
  suspended_at field predicates
  """
  suspendedAt: Time
  suspendedAtNEQ: Time
  suspendedAtIn: [Time!]
  suspendedAtNotIn: [Time!]
  suspendedAtGT: Time
  suspendedAtGTE: Time
  suspendedAtLT: Time
  suspendedAtLTE: Time
  suspendedAtIsNil: Boolean
  suspendedAtNotNil: Boolean
  """
  status field predicates
  """
  status: UserSettingUserStatus
  statusNEQ: UserSettingUserStatus
  statusIn: [UserSettingUserStatus!]
  statusNotIn: [UserSettingUserStatus!]
  """
  email_confirmed field predicates
  """
  emailConfirmed: Boolean
  emailConfirmedNEQ: Boolean
  """
  is_webauthn_allowed field predicates
  """
  isWebauthnAllowed: Boolean
  isWebauthnAllowedNEQ: Boolean
  isWebauthnAllowedIsNil: Boolean
  isWebauthnAllowedNotNil: Boolean
  """
  is_tfa_enabled field predicates
  """
  isTfaEnabled: Boolean
  isTfaEnabledNEQ: Boolean
  isTfaEnabledIsNil: Boolean
  isTfaEnabledNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  default_org edge predicates
  """
  hasDefaultOrg: Boolean
  hasDefaultOrgWith: [OrganizationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """
  updated_by field predicates
  """
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  deleted_by field predicates
  """
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  avatar_remote_url field predicates
  """
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """
  avatar_local_file_id field predicates
  """
  avatarLocalFileID: ID
  avatarLocalFileIDNEQ: ID
  avatarLocalFileIDIn: [ID!]
  avatarLocalFileIDNotIn: [ID!]
  avatarLocalFileIDGT: ID
  avatarLocalFileIDGTE: ID
  avatarLocalFileIDLT: ID
  avatarLocalFileIDLTE: ID
  avatarLocalFileIDContains: ID
  avatarLocalFileIDHasPrefix: ID
  avatarLocalFileIDHasSuffix: ID
  avatarLocalFileIDIsNil: Boolean
  avatarLocalFileIDNotNil: Boolean
  avatarLocalFileIDEqualFold: ID
  avatarLocalFileIDContainsFold: ID
  """
  avatar_updated_at field predicates
  """
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
  """
  last_seen field predicates
  """
  lastSeen: Time
  lastSeenNEQ: Time
  lastSeenIn: [Time!]
  lastSeenNotIn: [Time!]
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenIsNil: Boolean
  lastSeenNotNil: Boolean
  """
  sub field predicates
  """
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subIsNil: Boolean
  subNotNil: Boolean
  subEqualFold: String
  subContainsFold: String
  """
  auth_provider field predicates
  """
  authProvider: UserAuthProvider
  authProviderNEQ: UserAuthProvider
  authProviderIn: [UserAuthProvider!]
  authProviderNotIn: [UserAuthProvider!]
  """
  role field predicates
  """
  role: UserRole
  roleNEQ: UserRole
  roleIn: [UserRole!]
  roleNotIn: [UserRole!]
  roleIsNil: Boolean
  roleNotNil: Boolean
  """
  personal_access_tokens edge predicates
  """
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """
  tfa_settings edge predicates
  """
  hasTfaSettings: Boolean
  hasTfaSettingsWith: [TFASettingWhereInput!]
  """
  setting edge predicates
  """
  hasSetting: Boolean
  hasSettingWith: [UserSettingWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  organizations edge predicates
  """
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  avatar_file edge predicates
  """
  hasAvatarFile: Boolean
  hasAvatarFileWith: [FileWhereInput!]
  """
  events edge predicates
  """
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """
  action_plans edge predicates
  """
  hasActionPlans: Boolean
  hasActionPlansWith: [ActionPlanWhereInput!]
  """
  subcontrols edge predicates
  """
  hasSubcontrols: Boolean
  hasSubcontrolsWith: [SubcontrolWhereInput!]
  """
  assigner_tasks edge predicates
  """
  hasAssignerTasks: Boolean
  hasAssignerTasksWith: [TaskWhereInput!]
  """
  assignee_tasks edge predicates
  """
  hasAssigneeTasks: Boolean
  hasAssigneeTasksWith: [TaskWhereInput!]
  """
  programs edge predicates
  """
  hasPrograms: Boolean
  hasProgramsWith: [ProgramWhereInput!]
  """
  group_memberships edge predicates
  """
  hasGroupMemberships: Boolean
  hasGroupMembershipsWith: [GroupMembershipWhereInput!]
  """
  org_memberships edge predicates
  """
  hasOrgMemberships: Boolean
  hasOrgMembershipsWith: [OrgMembershipWhereInput!]
  """
  program_memberships edge predicates
  """
  hasProgramMemberships: Boolean
  hasProgramMembershipsWith: [ProgramMembershipWhereInput!]
}
`, BuiltIn: false},
	{Name: "../schema/entity.graphql", Input: `extend type Query {
    """
    Look up entity by ID
    """
     entity(
        """
        ID of the entity
        """
        id: ID!
    ):  Entity!
}

extend type Mutation{
    """
    Create a new entity
    """
    createEntity(
        """
        values of the entity
        """
        input: CreateEntityInput!
    ): EntityCreatePayload!
    """
    Create multiple new entities
    """
    createBulkEntity(
        """
        values of the entity
        """
        input: [CreateEntityInput!]
    ): EntityBulkCreatePayload!
    """
    Create multiple new entities via file upload
    """
    createBulkCSVEntity(
        """
        csv file containing values of the entity
        """
        input: Upload!
    ): EntityBulkCreatePayload!
    """
    Update an existing entity
    """
    updateEntity(
        """
        ID of the entity
        """
        id: ID!
        """
        New values for the entity
        """
        input: UpdateEntityInput!
    ): EntityUpdatePayload!
    """
    Delete an existing entity
    """
    deleteEntity(
        """
        ID of the entity
        """
        id: ID!
    ): EntityDeletePayload!
}

"""
Return response for createEntity mutation
"""
type EntityCreatePayload {
    """
    Created entity
    """
    entity: Entity!
}

"""
Return response for updateEntity mutation
"""
type EntityUpdatePayload {
    """
    Updated entity
    """
    entity: Entity!
}

"""
Return response for deleteEntity mutation
"""
type EntityDeletePayload {
    """
    Deleted entity ID
    """
    deletedID: ID!
}

"""
Return response for createBulkEntity mutation
"""
type EntityBulkCreatePayload {
    """
    Created entities
    """
    entities: [Entity!]
}`, BuiltIn: false},
	{Name: "../schema/entityextended.graphql", Input: `extend input CreateEntityInput {
  note: CreateNoteInput
}

extend input UpdateEntityInput {
  note:  CreateNoteInput
}
`, BuiltIn: false},
	{Name: "../schema/entitytype.graphql", Input: `extend type Query {
    """
    Look up entityType by ID
    """
     entityType(
        """
        ID of the entityType
        """
        id: ID!
    ):  EntityType!
}

extend type Mutation{
    """
    Create a new entityType
    """
    createEntityType(
        """
        values of the entityType
        """
        input: CreateEntityTypeInput!
    ): EntityTypeCreatePayload!
    """
    Create multiple new entityTypes
    """
    createBulkEntityType(
        """
        values of the entityType
        """
        input: [CreateEntityTypeInput!]
    ): EntityTypeBulkCreatePayload!
    """
    Create multiple new entityTypes via file upload
    """
    createBulkCSVEntityType(
        """
        csv file containing values of the entityType
        """
        input: Upload!
    ): EntityTypeBulkCreatePayload!
    """
    Update an existing entityType
    """
    updateEntityType(
        """
        ID of the entityType
        """
        id: ID!
        """
        New values for the entityType
        """
        input: UpdateEntityTypeInput!
    ): EntityTypeUpdatePayload!
    """
    Delete an existing entityType
    """
    deleteEntityType(
        """
        ID of the entityType
        """
        id: ID!
    ): EntityTypeDeletePayload!
}

"""
Return response for createEntityType mutation
"""
type EntityTypeCreatePayload {
    """
    Created entityType
    """
    entityType: EntityType!
}

"""
Return response for updateEntityType mutation
"""
type EntityTypeUpdatePayload {
    """
    Updated entityType
    """
    entityType: EntityType!
}

"""
Return response for deleteEntityType mutation
"""
type EntityTypeDeletePayload {
    """
    Deleted entityType ID
    """
    deletedID: ID!
}

"""
Return response for createBulkEntityType mutation
"""
type EntityTypeBulkCreatePayload {
    """
    Created entityTypes
    """
    entityTypes: [EntityType!]
}`, BuiltIn: false},
	{Name: "../schema/event.graphql", Input: `extend type Query {
    """
    Look up event by ID
    """
     event(
        """
        ID of the event
        """
        id: ID!
    ):  Event!
}

extend type Mutation{
    """
    Create a new event
    """
    createEvent(
        """
        values of the event
        """
        input: CreateEventInput!
    ): EventCreatePayload!
    """
    Create multiple new events
    """
    createBulkEvent(
        """
        values of the event
        """
        input: [CreateEventInput!]
    ): EventBulkCreatePayload!
    """
    Create multiple new events via file upload
    """
    createBulkCSVEvent(
        """
        csv file containing values of the event
        """
        input: Upload!
    ): EventBulkCreatePayload!
    """
    Update an existing event
    """
    updateEvent(
        """
        ID of the event
        """
        id: ID!
        """
        New values for the event
        """
        input: UpdateEventInput!
    ): EventUpdatePayload!
    """
    Delete an existing event
    """
    deleteEvent(
        """
        ID of the event
        """
        id: ID!
    ): EventDeletePayload!
}

"""
Return response for createEvent mutation
"""
type EventCreatePayload {
    """
    Created event
    """
    event: Event!
}

"""
Return response for updateEvent mutation
"""
type EventUpdatePayload {
    """
    Updated event
    """
    event: Event!
}

"""
Return response for deleteEvent mutation
"""
type EventDeletePayload {
    """
    Deleted event ID
    """
    deletedID: ID!
}

"""
Return response for createBulkEvent mutation
"""
type EventBulkCreatePayload {
    """
    Created events
    """
    events: [Event!]
}`, BuiltIn: false},
	{Name: "../schema/file.graphql", Input: `extend type Query {
    """
    Look up file by ID
    """
     file(
        """
        ID of the file
        """
        id: ID!
    ):  File!
}

extend type Mutation{
    """
    Delete an existing file
    """
    deleteFile(
        """
        ID of the file
        """
        id: ID!
    ): FileDeletePayload!
}

"""
Return response for deleteFile mutation
"""
type FileDeletePayload {
    """
    Deleted file ID
    """
    deletedID: ID!
}

`, BuiltIn: false},
	{Name: "../schema/fileextended.graphql", Input: `extend type File {
    presignedURL: String
}`, BuiltIn: false},
	{Name: "../schema/group.graphql", Input: `extend type Query {
    """
    Look up group by ID
    """
     group(
        """
        ID of the group
        """
        id: ID!
    ):  Group!
}

extend type Mutation{
    """
    Create a new group
    """
    createGroup(
        """
        values of the group
        """
        input: CreateGroupInput!
    ): GroupCreatePayload!
    """
    Create multiple new groups
    """
    createBulkGroup(
        """
        values of the group
        """
        input: [CreateGroupInput!]
    ): GroupBulkCreatePayload!
    """
    Create multiple new groups via file upload
    """
    createBulkCSVGroup(
        """
        csv file containing values of the group
        """
        input: Upload!
    ): GroupBulkCreatePayload!
    """
    Update an existing group
    """
    updateGroup(
        """
        ID of the group
        """
        id: ID!
        """
        New values for the group
        """
        input: UpdateGroupInput!
    ): GroupUpdatePayload!
    """
    Delete an existing group
    """
    deleteGroup(
        """
        ID of the group
        """
        id: ID!
    ): GroupDeletePayload!
}

"""
Return response for createGroup mutation
"""
type GroupCreatePayload {
    """
    Created group
    """
    group: Group!
}

"""
Return response for updateGroup mutation
"""
type GroupUpdatePayload {
    """
    Updated group
    """
    group: Group!
}

"""
Return response for deleteGroup mutation
"""
type GroupDeletePayload {
    """
    Deleted group ID
    """
    deletedID: ID!
}

"""
Return response for createBulkGroup mutation
"""
type GroupBulkCreatePayload {
    """
    Created groups
    """
    groups: [Group!]
}`, BuiltIn: false},
	{Name: "../schema/groupextended.graphql", Input: `extend input CreateGroupInput {
  createGroupSettings: CreateGroupSettingInput
}

extend input UpdateGroupInput {
  addGroupMembers: [CreateGroupMembershipInput!]
  updateGroupSettings: UpdateGroupSettingInput
}

extend input GroupMembershipWhereInput {
  groupID: String
  userID: String
}`, BuiltIn: false},
	{Name: "../schema/groupmembership.graphql", Input: `extend type Query {
    """
    Look up groupMembership by ID
    """
     groupMembership(
        """
        ID of the groupMembership
        """
        id: ID!
    ):  GroupMembership!
}

extend type Mutation{
    """
    Create a new groupMembership
    """
    createGroupMembership(
        """
        values of the groupMembership
        """
        input: CreateGroupMembershipInput!
    ): GroupMembershipCreatePayload!
    """
    Create multiple new groupMemberships
    """
    createBulkGroupMembership(
        """
        values of the groupMembership
        """
        input: [CreateGroupMembershipInput!]
    ): GroupMembershipBulkCreatePayload!
    """
    Create multiple new groupMemberships via file upload
    """
    createBulkCSVGroupMembership(
        """
        csv file containing values of the groupMembership
        """
        input: Upload!
    ): GroupMembershipBulkCreatePayload!
    """
    Update an existing groupMembership
    """
    updateGroupMembership(
        """
        ID of the groupMembership
        """
        id: ID!
        """
        New values for the groupMembership
        """
        input: UpdateGroupMembershipInput!
    ): GroupMembershipUpdatePayload!
    """
    Delete an existing groupMembership
    """
    deleteGroupMembership(
        """
        ID of the groupMembership
        """
        id: ID!
    ): GroupMembershipDeletePayload!
}

"""
Return response for createGroupMembership mutation
"""
type GroupMembershipCreatePayload {
    """
    Created groupMembership
    """
    groupMembership: GroupMembership!
}

"""
Return response for updateGroupMembership mutation
"""
type GroupMembershipUpdatePayload {
    """
    Updated groupMembership
    """
    groupMembership: GroupMembership!
}

"""
Return response for deleteGroupMembership mutation
"""
type GroupMembershipDeletePayload {
    """
    Deleted groupMembership ID
    """
    deletedID: ID!
}

"""
Return response for createBulkGroupMembership mutation
"""
type GroupMembershipBulkCreatePayload {
    """
    Created groupMemberships
    """
    groupMemberships: [GroupMembership!]
}`, BuiltIn: false},
	{Name: "../schema/groupsetting.graphql", Input: `extend type Query {
    """
    Look up groupSetting by ID
    """
     groupSetting(
        """
        ID of the groupSetting
        """
        id: ID!
    ):  GroupSetting!
}

extend type Mutation{
    """
    Create a new groupSetting
    """
    createGroupSetting(
        """
        values of the groupSetting
        """
        input: CreateGroupSettingInput!
    ): GroupSettingCreatePayload!
    """
    Create multiple new groupSettings
    """
    createBulkGroupSetting(
        """
        values of the groupSetting
        """
        input: [CreateGroupSettingInput!]
    ): GroupSettingBulkCreatePayload!
    """
    Create multiple new groupSettings via file upload
    """
    createBulkCSVGroupSetting(
        """
        csv file containing values of the groupSetting
        """
        input: Upload!
    ): GroupSettingBulkCreatePayload!
    """
    Update an existing groupSetting
    """
    updateGroupSetting(
        """
        ID of the groupSetting
        """
        id: ID!
        """
        New values for the groupSetting
        """
        input: UpdateGroupSettingInput!
    ): GroupSettingUpdatePayload!
    """
    Delete an existing groupSetting
    """
    deleteGroupSetting(
        """
        ID of the groupSetting
        """
        id: ID!
    ): GroupSettingDeletePayload!
}

"""
Return response for createGroupSetting mutation
"""
type GroupSettingCreatePayload {
    """
    Created groupSetting
    """
    groupSetting: GroupSetting!
}

"""
Return response for updateGroupSetting mutation
"""
type GroupSettingUpdatePayload {
    """
    Updated groupSetting
    """
    groupSetting: GroupSetting!
}

"""
Return response for deleteGroupSetting mutation
"""
type GroupSettingDeletePayload {
    """
    Deleted groupSetting ID
    """
    deletedID: ID!
}

"""
Return response for createBulkGroupSetting mutation
"""
type GroupSettingBulkCreatePayload {
    """
    Created groupSettings
    """
    groupSettings: [GroupSetting!]
}`, BuiltIn: false},
	{Name: "../schema/hush.graphql", Input: `extend type Query {
    """
    Look up hush by ID
    """
     hush(
        """
        ID of the hush
        """
        id: ID!
    ):  Hush!
}

extend type Mutation{
    """
    Create a new hush
    """
    createHush(
        """
        values of the hush
        """
        input: CreateHushInput!
    ): HushCreatePayload!
    """
    Create multiple new hushs
    """
    createBulkHush(
        """
        values of the hush
        """
        input: [CreateHushInput!]
    ): HushBulkCreatePayload!
    """
    Create multiple new hushs via file upload
    """
    createBulkCSVHush(
        """
        csv file containing values of the hush
        """
        input: Upload!
    ): HushBulkCreatePayload!
    """
    Update an existing hush
    """
    updateHush(
        """
        ID of the hush
        """
        id: ID!
        """
        New values for the hush
        """
        input: UpdateHushInput!
    ): HushUpdatePayload!
    """
    Delete an existing hush
    """
    deleteHush(
        """
        ID of the hush
        """
        id: ID!
    ): HushDeletePayload!
}

"""
Return response for createHush mutation
"""
type HushCreatePayload {
    """
    Created hush
    """
    hush: Hush!
}

"""
Return response for updateHush mutation
"""
type HushUpdatePayload {
    """
    Updated hush
    """
    hush: Hush!
}

"""
Return response for deleteHush mutation
"""
type HushDeletePayload {
    """
    Deleted hush ID
    """
    deletedID: ID!
}

"""
Return response for createBulkHush mutation
"""
type HushBulkCreatePayload {
    """
    Created hushs
    """
    hushes: [Hush!]
}`, BuiltIn: false},
	{Name: "../schema/integration.graphql", Input: `extend type Query {
    """
    Look up integration by ID
    """
     integration(
        """
        ID of the integration
        """
        id: ID!
    ):  Integration!
}

extend type Mutation{
    """
    Create a new integration
    """
    createIntegration(
        """
        values of the integration
        """
        input: CreateIntegrationInput!
    ): IntegrationCreatePayload!
    """
    Create multiple new integrations
    """
    createBulkIntegration(
        """
        values of the integration
        """
        input: [CreateIntegrationInput!]
    ): IntegrationBulkCreatePayload!
    """
    Create multiple new integrations via file upload
    """
    createBulkCSVIntegration(
        """
        csv file containing values of the integration
        """
        input: Upload!
    ): IntegrationBulkCreatePayload!
    """
    Update an existing integration
    """
    updateIntegration(
        """
        ID of the integration
        """
        id: ID!
        """
        New values for the integration
        """
        input: UpdateIntegrationInput!
    ): IntegrationUpdatePayload!
    """
    Delete an existing integration
    """
    deleteIntegration(
        """
        ID of the integration
        """
        id: ID!
    ): IntegrationDeletePayload!
}

"""
Return response for createIntegration mutation
"""
type IntegrationCreatePayload {
    """
    Created integration
    """
    integration: Integration!
}

"""
Return response for updateIntegration mutation
"""
type IntegrationUpdatePayload {
    """
    Updated integration
    """
    integration: Integration!
}

"""
Return response for deleteIntegration mutation
"""
type IntegrationDeletePayload {
    """
    Deleted integration ID
    """
    deletedID: ID!
}

"""
Return response for createBulkIntegration mutation
"""
type IntegrationBulkCreatePayload {
    """
    Created integrations
    """
    integrations: [Integration!]
}`, BuiltIn: false},
	{Name: "../schema/internalpolicy.graphql", Input: `extend type Query {
    """
    Look up internalPolicy by ID
    """
     internalPolicy(
        """
        ID of the internalPolicy
        """
        id: ID!
    ):  InternalPolicy!
}

extend type Mutation{
    """
    Create a new internalPolicy
    """
    createInternalPolicy(
        """
        values of the internalPolicy
        """
        input: CreateInternalPolicyInput!
    ): InternalPolicyCreatePayload!
    """
    Create multiple new internalPolicys
    """
    createBulkInternalPolicy(
        """
        values of the internalPolicy
        """
        input: [CreateInternalPolicyInput!]
    ): InternalPolicyBulkCreatePayload!
    """
    Create multiple new internalPolicys via file upload
    """
    createBulkCSVInternalPolicy(
        """
        csv file containing values of the internalPolicy
        """
        input: Upload!
    ): InternalPolicyBulkCreatePayload!
    """
    Update an existing internalPolicy
    """
    updateInternalPolicy(
        """
        ID of the internalPolicy
        """
        id: ID!
        """
        New values for the internalPolicy
        """
        input: UpdateInternalPolicyInput!
    ): InternalPolicyUpdatePayload!
    """
    Delete an existing internalPolicy
    """
    deleteInternalPolicy(
        """
        ID of the internalPolicy
        """
        id: ID!
    ): InternalPolicyDeletePayload!
}

"""
Return response for createInternalPolicy mutation
"""
type InternalPolicyCreatePayload {
    """
    Created internalPolicy
    """
    internalPolicy: InternalPolicy!
}

"""
Return response for updateInternalPolicy mutation
"""
type InternalPolicyUpdatePayload {
    """
    Updated internalPolicy
    """
    internalPolicy: InternalPolicy!
}

"""
Return response for deleteInternalPolicy mutation
"""
type InternalPolicyDeletePayload {
    """
    Deleted internalPolicy ID
    """
    deletedID: ID!
}

"""
Return response for createBulkInternalPolicy mutation
"""
type InternalPolicyBulkCreatePayload {
    """
    Created internalPolicys
    """
    internalPolicies: [InternalPolicy!]
}`, BuiltIn: false},
	{Name: "../schema/invite.graphql", Input: `extend type Query {
    """
    Look up invite by ID
    """
     invite(
        """
        ID of the invite
        """
        id: ID!
    ):  Invite!
}

extend type Mutation{
    """
    Create a new invite
    """
    createInvite(
        """
        values of the invite
        """
        input: CreateInviteInput!
    ): InviteCreatePayload!
    """
    Create multiple new invites
    """
    createBulkInvite(
        """
        values of the invite
        """
        input: [CreateInviteInput!]
    ): InviteBulkCreatePayload!
    """
    Create multiple new invites via file upload
    """
    createBulkCSVInvite(
        """
        csv file containing values of the invite
        """
        input: Upload!
    ): InviteBulkCreatePayload!
    """
    Update an existing invite
    """
    updateInvite(
        """
        ID of the invite
        """
        id: ID!
        """
        New values for the invite
        """
        input: UpdateInviteInput!
    ): InviteUpdatePayload!
    """
    Delete an existing invite
    """
    deleteInvite(
        """
        ID of the invite
        """
        id: ID!
    ): InviteDeletePayload!
}

"""
Return response for createInvite mutation
"""
type InviteCreatePayload {
    """
    Created invite
    """
    invite: Invite!
}

"""
Return response for updateInvite mutation
"""
type InviteUpdatePayload {
    """
    Updated invite
    """
    invite: Invite!
}

"""
Return response for deleteInvite mutation
"""
type InviteDeletePayload {
    """
    Deleted invite ID
    """
    deletedID: ID!
}

"""
Return response for createBulkInvite mutation
"""
type InviteBulkCreatePayload {
    """
    Created invites
    """
    invites: [Invite!]
}`, BuiltIn: false},
	{Name: "../schema/narrative.graphql", Input: `extend type Query {
    """
    Look up narrative by ID
    """
     narrative(
        """
        ID of the narrative
        """
        id: ID!
    ):  Narrative!
}

extend type Mutation{
    """
    Create a new narrative
    """
    createNarrative(
        """
        values of the narrative
        """
        input: CreateNarrativeInput!
    ): NarrativeCreatePayload!
    """
    Create multiple new narratives
    """
    createBulkNarrative(
        """
        values of the narrative
        """
        input: [CreateNarrativeInput!]
    ): NarrativeBulkCreatePayload!
    """
    Create multiple new narratives via file upload
    """
    createBulkCSVNarrative(
        """
        csv file containing values of the narrative
        """
        input: Upload!
    ): NarrativeBulkCreatePayload!
    """
    Update an existing narrative
    """
    updateNarrative(
        """
        ID of the narrative
        """
        id: ID!
        """
        New values for the narrative
        """
        input: UpdateNarrativeInput!
    ): NarrativeUpdatePayload!
    """
    Delete an existing narrative
    """
    deleteNarrative(
        """
        ID of the narrative
        """
        id: ID!
    ): NarrativeDeletePayload!
}

"""
Return response for createNarrative mutation
"""
type NarrativeCreatePayload {
    """
    Created narrative
    """
    narrative: Narrative!
}

"""
Return response for updateNarrative mutation
"""
type NarrativeUpdatePayload {
    """
    Updated narrative
    """
    narrative: Narrative!
}

"""
Return response for deleteNarrative mutation
"""
type NarrativeDeletePayload {
    """
    Deleted narrative ID
    """
    deletedID: ID!
}

"""
Return response for createBulkNarrative mutation
"""
type NarrativeBulkCreatePayload {
    """
    Created narratives
    """
    narratives: [Narrative!]
}`, BuiltIn: false},
	{Name: "../schema/organization.graphql", Input: `extend type Query {
    """
    Look up organization by ID
    """
     organization(
        """
        ID of the organization
        """
        id: ID!
    ):  Organization!
}

extend type Mutation{
    """
    Create a new organization
    """
    createOrganization(
        """
        values of the organization
        """
        input: CreateOrganizationInput!
        avatarFile: Upload
    ): OrganizationCreatePayload!
    """
    Create multiple new organizations
    """
    createBulkOrganization(
        """
        values of the organization
        """
        input: [CreateOrganizationInput!]
    ): OrganizationBulkCreatePayload!
    """
    Create multiple new organizations via file upload
    """
    createBulkCSVOrganization(
        """
        csv file containing values of the organization
        """
        input: Upload!
    ): OrganizationBulkCreatePayload!
    """
    Update an existing organization
    """
    updateOrganization(
        """
        ID of the organization
        """
        id: ID!
        """
        New values for the organization
        """
        input: UpdateOrganizationInput!
        avatarFile: Upload
    ): OrganizationUpdatePayload!
    """
    Delete an existing organization
    """
    deleteOrganization(
        """
        ID of the organization
        """
        id: ID!
    ): OrganizationDeletePayload!
}

"""
Return response for createOrganization mutation
"""
type OrganizationCreatePayload {
    """
    Created organization
    """
    organization: Organization!
}

"""
Return response for updateOrganization mutation
"""
type OrganizationUpdatePayload {
    """
    Updated organization
    """
    organization: Organization!
}

"""
Return response for deleteOrganization mutation
"""
type OrganizationDeletePayload {
    """
    Deleted organization ID
    """
    deletedID: ID!
}

"""
Return response for createBulkOrganization mutation
"""
type OrganizationBulkCreatePayload {
    """
    Created organizations
    """
    organizations: [Organization!]
}`, BuiltIn: false},
	{Name: "../schema/organizationsetting.graphql", Input: `extend type Query {
    """
    Look up organizationSetting by ID
    """
     organizationSetting(
        """
        ID of the organizationSetting
        """
        id: ID!
    ):  OrganizationSetting!
}

extend type Mutation{
    """
    Create a new organizationSetting
    """
    createOrganizationSetting(
        """
        values of the organizationSetting
        """
        input: CreateOrganizationSettingInput!
    ): OrganizationSettingCreatePayload!
    """
    Create multiple new organizationSettings
    """
    createBulkOrganizationSetting(
        """
        values of the organizationSetting
        """
        input: [CreateOrganizationSettingInput!]
    ): OrganizationSettingBulkCreatePayload!
    """
    Create multiple new organizationSettings via file upload
    """
    createBulkCSVOrganizationSetting(
        """
        csv file containing values of the organizationSetting
        """
        input: Upload!
    ): OrganizationSettingBulkCreatePayload!
    """
    Update an existing organizationSetting
    """
    updateOrganizationSetting(
        """
        ID of the organizationSetting
        """
        id: ID!
        """
        New values for the organizationSetting
        """
        input: UpdateOrganizationSettingInput!
    ): OrganizationSettingUpdatePayload!
    """
    Delete an existing organizationSetting
    """
    deleteOrganizationSetting(
        """
        ID of the organizationSetting
        """
        id: ID!
    ): OrganizationSettingDeletePayload!
}

"""
Return response for createOrganizationSetting mutation
"""
type OrganizationSettingCreatePayload {
    """
    Created organizationSetting
    """
    organizationSetting: OrganizationSetting!
}

"""
Return response for updateOrganizationSetting mutation
"""
type OrganizationSettingUpdatePayload {
    """
    Updated organizationSetting
    """
    organizationSetting: OrganizationSetting!
}

"""
Return response for deleteOrganizationSetting mutation
"""
type OrganizationSettingDeletePayload {
    """
    Deleted organizationSetting ID
    """
    deletedID: ID!
}

"""
Return response for createBulkOrganizationSetting mutation
"""
type OrganizationSettingBulkCreatePayload {
    """
    Created organizationSettings
    """
    organizationSettings: [OrganizationSetting!]
}`, BuiltIn: false},
	{Name: "../schema/orgextended.graphql", Input: `extend input CreateOrganizationInput {
  createOrgSettings: CreateOrganizationSettingInput
}

extend input UpdateOrganizationInput {
  addOrgMembers: [CreateOrgMembershipInput!]
  updateOrgSettings: UpdateOrganizationSettingInput
}

extend input OrgMembershipWhereInput {
  organizationID: String
  userID: String
}`, BuiltIn: false},
	{Name: "../schema/orgmembership.graphql", Input: `extend type Query {
    """
    Look up orgMembership by ID
    """
     orgMembership(
        """
        ID of the orgMembership
        """
        id: ID!
    ):  OrgMembership!
}

extend type Mutation{
    """
    Create a new orgMembership
    """
    createOrgMembership(
        """
        values of the orgMembership
        """
        input: CreateOrgMembershipInput!
    ): OrgMembershipCreatePayload!
    """
    Create multiple new orgMemberships
    """
    createBulkOrgMembership(
        """
        values of the orgMembership
        """
        input: [CreateOrgMembershipInput!]
    ): OrgMembershipBulkCreatePayload!
    """
    Create multiple new orgMemberships via file upload
    """
    createBulkCSVOrgMembership(
        """
        csv file containing values of the orgMembership
        """
        input: Upload!
    ): OrgMembershipBulkCreatePayload!
    """
    Update an existing orgMembership
    """
    updateOrgMembership(
        """
        ID of the orgMembership
        """
        id: ID!
        """
        New values for the orgMembership
        """
        input: UpdateOrgMembershipInput!
    ): OrgMembershipUpdatePayload!
    """
    Delete an existing orgMembership
    """
    deleteOrgMembership(
        """
        ID of the orgMembership
        """
        id: ID!
    ): OrgMembershipDeletePayload!
}

"""
Return response for createOrgMembership mutation
"""
type OrgMembershipCreatePayload {
    """
    Created orgMembership
    """
    orgMembership: OrgMembership!
}

"""
Return response for updateOrgMembership mutation
"""
type OrgMembershipUpdatePayload {
    """
    Updated orgMembership
    """
    orgMembership: OrgMembership!
}

"""
Return response for deleteOrgMembership mutation
"""
type OrgMembershipDeletePayload {
    """
    Deleted orgMembership ID
    """
    deletedID: ID!
}

"""
Return response for createBulkOrgMembership mutation
"""
type OrgMembershipBulkCreatePayload {
    """
    Created orgMemberships
    """
    orgMemberships: [OrgMembership!]
}`, BuiltIn: false},
	{Name: "../schema/orgsubscription.graphql", Input: `extend type Query {
    """
    Look up orgSubscription by ID
    """
     orgSubscription(
        """
        ID of the orgSubscription
        """
        id: ID!
    ):  OrgSubscription!
}
`, BuiltIn: false},
	{Name: "../schema/orgsubscriptionextended.graphql", Input: `extend type OrgSubscription {
    subscriptionURL: String
}`, BuiltIn: false},
	{Name: "../schema/personalaccesstoken.graphql", Input: `extend type Query {
    """
    Look up personalAccessToken by ID
    """
     personalAccessToken(
        """
        ID of the personalAccessToken
        """
        id: ID!
    ):  PersonalAccessToken!
}

extend type Mutation{
    """
    Create a new personalAccessToken
    """
    createPersonalAccessToken(
        """
        values of the personalAccessToken
        """
        input: CreatePersonalAccessTokenInput!
    ): PersonalAccessTokenCreatePayload!
    """
    Create multiple new personalAccessTokens
    """
    createBulkPersonalAccessToken(
        """
        values of the personalAccessToken
        """
        input: [CreatePersonalAccessTokenInput!]
    ): PersonalAccessTokenBulkCreatePayload!
    """
    Create multiple new personalAccessTokens via file upload
    """
    createBulkCSVPersonalAccessToken(
        """
        csv file containing values of the personalAccessToken
        """
        input: Upload!
    ): PersonalAccessTokenBulkCreatePayload!
    """
    Update an existing personalAccessToken
    """
    updatePersonalAccessToken(
        """
        ID of the personalAccessToken
        """
        id: ID!
        """
        New values for the personalAccessToken
        """
        input: UpdatePersonalAccessTokenInput!
    ): PersonalAccessTokenUpdatePayload!
    """
    Delete an existing personalAccessToken
    """
    deletePersonalAccessToken(
        """
        ID of the personalAccessToken
        """
        id: ID!
    ): PersonalAccessTokenDeletePayload!
}

"""
Return response for createPersonalAccessToken mutation
"""
type PersonalAccessTokenCreatePayload {
    """
    Created personalAccessToken
    """
    personalAccessToken: PersonalAccessToken!
}

"""
Return response for updatePersonalAccessToken mutation
"""
type PersonalAccessTokenUpdatePayload {
    """
    Updated personalAccessToken
    """
    personalAccessToken: PersonalAccessToken!
}

"""
Return response for deletePersonalAccessToken mutation
"""
type PersonalAccessTokenDeletePayload {
    """
    Deleted personalAccessToken ID
    """
    deletedID: ID!
}

"""
Return response for createBulkPersonalAccessToken mutation
"""
type PersonalAccessTokenBulkCreatePayload {
    """
    Created personalAccessTokens
    """
    personalAccessTokens: [PersonalAccessToken!]
}`, BuiltIn: false},
	{Name: "../schema/procedure.graphql", Input: `extend type Query {
    """
    Look up procedure by ID
    """
     procedure(
        """
        ID of the procedure
        """
        id: ID!
    ):  Procedure!
}

extend type Mutation{
    """
    Create a new procedure
    """
    createProcedure(
        """
        values of the procedure
        """
        input: CreateProcedureInput!
    ): ProcedureCreatePayload!
    """
    Create multiple new procedures
    """
    createBulkProcedure(
        """
        values of the procedure
        """
        input: [CreateProcedureInput!]
    ): ProcedureBulkCreatePayload!
    """
    Create multiple new procedures via file upload
    """
    createBulkCSVProcedure(
        """
        csv file containing values of the procedure
        """
        input: Upload!
    ): ProcedureBulkCreatePayload!
    """
    Update an existing procedure
    """
    updateProcedure(
        """
        ID of the procedure
        """
        id: ID!
        """
        New values for the procedure
        """
        input: UpdateProcedureInput!
    ): ProcedureUpdatePayload!
    """
    Delete an existing procedure
    """
    deleteProcedure(
        """
        ID of the procedure
        """
        id: ID!
    ): ProcedureDeletePayload!
}

"""
Return response for createProcedure mutation
"""
type ProcedureCreatePayload {
    """
    Created procedure
    """
    procedure: Procedure!
}

"""
Return response for updateProcedure mutation
"""
type ProcedureUpdatePayload {
    """
    Updated procedure
    """
    procedure: Procedure!
}

"""
Return response for deleteProcedure mutation
"""
type ProcedureDeletePayload {
    """
    Deleted procedure ID
    """
    deletedID: ID!
}

"""
Return response for createBulkProcedure mutation
"""
type ProcedureBulkCreatePayload {
    """
    Created procedures
    """
    procedures: [Procedure!]
}`, BuiltIn: false},
	{Name: "../schema/program.graphql", Input: `extend type Query {
    """
    Look up program by ID
    """
     program(
        """
        ID of the program
        """
        id: ID!
    ):  Program!
}

extend type Mutation{
    """
    Create a new program
    """
    createProgram(
        """
        values of the program
        """
        input: CreateProgramInput!
    ): ProgramCreatePayload!
    """
    Create multiple new programs
    """
    createBulkProgram(
        """
        values of the program
        """
        input: [CreateProgramInput!]
    ): ProgramBulkCreatePayload!
    """
    Create multiple new programs via file upload
    """
    createBulkCSVProgram(
        """
        csv file containing values of the program
        """
        input: Upload!
    ): ProgramBulkCreatePayload!
    """
    Update an existing program
    """
    updateProgram(
        """
        ID of the program
        """
        id: ID!
        """
        New values for the program
        """
        input: UpdateProgramInput!
    ): ProgramUpdatePayload!
    """
    Delete an existing program
    """
    deleteProgram(
        """
        ID of the program
        """
        id: ID!
    ): ProgramDeletePayload!
}

"""
Return response for createProgram mutation
"""
type ProgramCreatePayload {
    """
    Created program
    """
    program: Program!
}

"""
Return response for updateProgram mutation
"""
type ProgramUpdatePayload {
    """
    Updated program
    """
    program: Program!
}

"""
Return response for deleteProgram mutation
"""
type ProgramDeletePayload {
    """
    Deleted program ID
    """
    deletedID: ID!
}

"""
Return response for createBulkProgram mutation
"""
type ProgramBulkCreatePayload {
    """
    Created programs
    """
    programs: [Program!]
}`, BuiltIn: false},
	{Name: "../schema/programextended.graphql", Input: `extend input UpdateProgramInput {
  addProgramMembers: [CreateProgramMembershipInput!]
}

extend input ProgramMembershipWhereInput {
  programID: String
  userID: String
}

input CreateControlWithSubcontrolsInput{
  control: CreateControlInput
  subcontrols: [CreateSubcontrolInput!]
}

input CreateFullProgramInput{
  program: CreateProgramInput!
  standard: CreateStandardInput!
  controls: [CreateControlWithSubcontrolsInput!]
  risks: [CreateRiskInput!]
  internalPolicies: [CreateInternalPolicyInput!]
  procedures: [CreateProcedureInput!]
  members: [CreateMemberWithProgramInput!]
}

input CreateProgramWithMembersInput{
  program: CreateProgramInput!
  members: [CreateMemberWithProgramInput!]
}

input CreateMemberWithProgramInput {
  role: ProgramMembershipRole
  userID: ID!
}

extend type Mutation{
    """
    Create a new program with members
    """
    createProgramWithMembers(
        """
        values of the program
        """
        input: CreateProgramWithMembersInput!
    ): ProgramCreatePayload!
    """
    Create a new program with options for edges (members, policies, procedures, risks, controls, standard)
    """
    createFullProgram(
        """
        values of the program
        """
        input: CreateFullProgramInput!
    ): ProgramCreatePayload!
    """
    Create a controls with subcontrols
    """
    createControlWithSubcontrols(
        """
        values of the program
        """
        input: CreateControlWithSubcontrolsInput!
    ): ControlCreatePayload!
}`, BuiltIn: false},
	{Name: "../schema/programmembership.graphql", Input: `extend type Query {
    """
    Look up programMembership by ID
    """
     programMembership(
        """
        ID of the programMembership
        """
        id: ID!
    ):  ProgramMembership!
}

extend type Mutation{
    """
    Create a new programMembership
    """
    createProgramMembership(
        """
        values of the programMembership
        """
        input: CreateProgramMembershipInput!
    ): ProgramMembershipCreatePayload!
    """
    Create multiple new programMemberships
    """
    createBulkProgramMembership(
        """
        values of the programMembership
        """
        input: [CreateProgramMembershipInput!]
    ): ProgramMembershipBulkCreatePayload!
    """
    Create multiple new programMemberships via file upload
    """
    createBulkCSVProgramMembership(
        """
        csv file containing values of the programMembership
        """
        input: Upload!
    ): ProgramMembershipBulkCreatePayload!
    """
    Update an existing programMembership
    """
    updateProgramMembership(
        """
        ID of the programMembership
        """
        id: ID!
        """
        New values for the programMembership
        """
        input: UpdateProgramMembershipInput!
    ): ProgramMembershipUpdatePayload!
    """
    Delete an existing programMembership
    """
    deleteProgramMembership(
        """
        ID of the programMembership
        """
        id: ID!
    ): ProgramMembershipDeletePayload!
}

"""
Return response for createProgramMembership mutation
"""
type ProgramMembershipCreatePayload {
    """
    Created programMembership
    """
    programMembership: ProgramMembership!
}

"""
Return response for updateProgramMembership mutation
"""
type ProgramMembershipUpdatePayload {
    """
    Updated programMembership
    """
    programMembership: ProgramMembership!
}

"""
Return response for deleteProgramMembership mutation
"""
type ProgramMembershipDeletePayload {
    """
    Deleted programMembership ID
    """
    deletedID: ID!
}

"""
Return response for createBulkProgramMembership mutation
"""
type ProgramMembershipBulkCreatePayload {
    """
    Created programMemberships
    """
    programMemberships: [ProgramMembership!]
}`, BuiltIn: false},
	{Name: "../schema/risk.graphql", Input: `extend type Query {
    """
    Look up risk by ID
    """
     risk(
        """
        ID of the risk
        """
        id: ID!
    ):  Risk!
}

extend type Mutation{
    """
    Create a new risk
    """
    createRisk(
        """
        values of the risk
        """
        input: CreateRiskInput!
    ): RiskCreatePayload!
    """
    Create multiple new risks
    """
    createBulkRisk(
        """
        values of the risk
        """
        input: [CreateRiskInput!]
    ): RiskBulkCreatePayload!
    """
    Create multiple new risks via file upload
    """
    createBulkCSVRisk(
        """
        csv file containing values of the risk
        """
        input: Upload!
    ): RiskBulkCreatePayload!
    """
    Update an existing risk
    """
    updateRisk(
        """
        ID of the risk
        """
        id: ID!
        """
        New values for the risk
        """
        input: UpdateRiskInput!
    ): RiskUpdatePayload!
    """
    Delete an existing risk
    """
    deleteRisk(
        """
        ID of the risk
        """
        id: ID!
    ): RiskDeletePayload!
}

"""
Return response for createRisk mutation
"""
type RiskCreatePayload {
    """
    Created risk
    """
    risk: Risk!
}

"""
Return response for updateRisk mutation
"""
type RiskUpdatePayload {
    """
    Updated risk
    """
    risk: Risk!
}

"""
Return response for deleteRisk mutation
"""
type RiskDeletePayload {
    """
    Deleted risk ID
    """
    deletedID: ID!
}

"""
Return response for createBulkRisk mutation
"""
type RiskBulkCreatePayload {
    """
    Created risks
    """
    risks: [Risk!]
}`, BuiltIn: false},
	{Name: "../schema/scalars.graphql", Input: `scalar Upload
scalar Address
scalar Price`, BuiltIn: false},
	{Name: "../schema/search.graphql", Input: `extend type Query{
    """
    Search across APIToken objects
    """
    apiTokenSearch(
        """
        Search query
        """
        query: String!
    ): APITokenSearchResult
    """
    Search across ActionPlan objects
    """
    actionPlanSearch(
        """
        Search query
        """
        query: String!
    ): ActionPlanSearchResult
    """
    Search across Contact objects
    """
    contactSearch(
        """
        Search query
        """
        query: String!
    ): ContactSearchResult
    """
    Search across Control objects
    """
    controlSearch(
        """
        Search query
        """
        query: String!
    ): ControlSearchResult
    """
    Search across ControlObjective objects
    """
    controlObjectiveSearch(
        """
        Search query
        """
        query: String!
    ): ControlObjectiveSearchResult
    """
    Search across DocumentData objects
    """
    documentDataSearch(
        """
        Search query
        """
        query: String!
    ): DocumentDataSearchResult
    """
    Search across Entity objects
    """
    entitySearch(
        """
        Search query
        """
        query: String!
    ): EntitySearchResult
    """
    Search across EntityType objects
    """
    entityTypeSearch(
        """
        Search query
        """
        query: String!
    ): EntityTypeSearchResult
    """
    Search across Event objects
    """
    eventSearch(
        """
        Search query
        """
        query: String!
    ): EventSearchResult
    """
    Search across File objects
    """
    fileSearch(
        """
        Search query
        """
        query: String!
    ): FileSearchResult
    """
    Search across Group objects
    """
    groupSearch(
        """
        Search query
        """
        query: String!
    ): GroupSearchResult
    """
    Search across GroupSetting objects
    """
    groupSettingSearch(
        """
        Search query
        """
        query: String!
    ): GroupSettingSearchResult
    """
    Search across Integration objects
    """
    integrationSearch(
        """
        Search query
        """
        query: String!
    ): IntegrationSearchResult
    """
    Search across InternalPolicy objects
    """
    internalPolicySearch(
        """
        Search query
        """
        query: String!
    ): InternalPolicySearchResult
    """
    Search across Narrative objects
    """
    narrativeSearch(
        """
        Search query
        """
        query: String!
    ): NarrativeSearchResult
    """
    Search across OrgSubscription objects
    """
    orgSubscriptionSearch(
        """
        Search query
        """
        query: String!
    ): OrgSubscriptionSearchResult
    """
    Search across Organization objects
    """
    organizationSearch(
        """
        Search query
        """
        query: String!
    ): OrganizationSearchResult
    """
    Search across OrganizationSetting objects
    """
    organizationSettingSearch(
        """
        Search query
        """
        query: String!
    ): OrganizationSettingSearchResult
    """
    Search across PersonalAccessToken objects
    """
    personalAccessTokenSearch(
        """
        Search query
        """
        query: String!
    ): PersonalAccessTokenSearchResult
    """
    Search across Procedure objects
    """
    procedureSearch(
        """
        Search query
        """
        query: String!
    ): ProcedureSearchResult
    """
    Search across Program objects
    """
    programSearch(
        """
        Search query
        """
        query: String!
    ): ProgramSearchResult
    """
    Search across Risk objects
    """
    riskSearch(
        """
        Search query
        """
        query: String!
    ): RiskSearchResult
    """
    Search across Standard objects
    """
    standardSearch(
        """
        Search query
        """
        query: String!
    ): StandardSearchResult
    """
    Search across Subcontrol objects
    """
    subcontrolSearch(
        """
        Search query
        """
        query: String!
    ): SubcontrolSearchResult
    """
    Search across Subscriber objects
    """
    subscriberSearch(
        """
        Search query
        """
        query: String!
    ): SubscriberSearchResult
    """
    Search across TFASetting objects
    """
    tFASettingSearch(
        """
        Search query
        """
        query: String!
    ): TFASettingSearchResult
    """
    Search across Task objects
    """
    taskSearch(
        """
        Search query
        """
        query: String!
    ): TaskSearchResult
    """
    Search across Template objects
    """
    templateSearch(
        """
        Search query
        """
        query: String!
    ): TemplateSearchResult
    """
    Search across User objects
    """
    userSearch(
        """
        Search query
        """
        query: String!
    ): UserSearchResult
    """
    Search across UserSetting objects
    """
    userSettingSearch(
        """
        Search query
        """
        query: String!
    ): UserSettingSearchResult
}
union SearchResult =
  | APITokenSearchResult
  | ActionPlanSearchResult
  | ContactSearchResult
  | ControlSearchResult
  | ControlObjectiveSearchResult
  | DocumentDataSearchResult
  | EntitySearchResult
  | EntityTypeSearchResult
  | EventSearchResult
  | FileSearchResult
  | GroupSearchResult
  | GroupSettingSearchResult
  | IntegrationSearchResult
  | InternalPolicySearchResult
  | NarrativeSearchResult
  | OrgSubscriptionSearchResult
  | OrganizationSearchResult
  | OrganizationSettingSearchResult
  | PersonalAccessTokenSearchResult
  | ProcedureSearchResult
  | ProgramSearchResult
  | RiskSearchResult
  | StandardSearchResult
  | SubcontrolSearchResult
  | SubscriberSearchResult
  | TFASettingSearchResult
  | TaskSearchResult
  | TemplateSearchResult
  | UserSearchResult
  | UserSettingSearchResult

type SearchResultConnection {
  """
  Information to aid in pagination.
  """
  page: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
  """
  A list of nodes with results.
  """
  nodes: [SearchResult!]!
}

extend type Query{
    """
    Search across all objects
    """
    search(
        """
        Search query
        """
        query: String!
    ): SearchResultConnection
    """
    Admin search across all objects
    """
    adminSearch(
        """
        Search query
        """
        query: String!
    ): SearchResultConnection
}

type  APITokenSearchResult {
   apiTokens: [ APIToken!]
}

type  ActionPlanSearchResult {
   actionPlans: [ ActionPlan!]
}

type  ContactSearchResult {
   contacts: [ Contact!]
}

type  ControlSearchResult {
   controls: [ Control!]
}

type  ControlObjectiveSearchResult {
   controlObjectives: [ ControlObjective!]
}

type  DocumentDataSearchResult {
   documentData: [ DocumentData!]
}

type  EntitySearchResult {
   entities: [ Entity!]
}

type  EntityTypeSearchResult {
   entityTypes: [ EntityType!]
}

type  EventSearchResult {
   events: [ Event!]
}

type  FileSearchResult {
   files: [ File!]
}

type  GroupSearchResult {
   groups: [ Group!]
}

type  GroupSettingSearchResult {
   groupSettings: [ GroupSetting!]
}

type  IntegrationSearchResult {
   integrations: [ Integration!]
}

type  InternalPolicySearchResult {
   internalPolicies: [ InternalPolicy!]
}

type  NarrativeSearchResult {
   narratives: [ Narrative!]
}

type  OrgSubscriptionSearchResult {
   orgSubscriptions: [ OrgSubscription!]
}

type  OrganizationSearchResult {
   organizations: [ Organization!]
}

type  OrganizationSettingSearchResult {
   organizationSettings: [ OrganizationSetting!]
}

type  PersonalAccessTokenSearchResult {
   personalAccessTokens: [ PersonalAccessToken!]
}

type  ProcedureSearchResult {
   procedures: [ Procedure!]
}

type  ProgramSearchResult {
   programs: [ Program!]
}

type  RiskSearchResult {
   risks: [ Risk!]
}

type  StandardSearchResult {
   standards: [ Standard!]
}

type  SubcontrolSearchResult {
   subcontrols: [ Subcontrol!]
}

type  SubscriberSearchResult {
   subscribers: [ Subscriber!]
}

type  TFASettingSearchResult {
   tFASettings: [ TFASetting!]
}

type  TaskSearchResult {
   tasks: [ Task!]
}

type  TemplateSearchResult {
   templates: [ Template!]
}

type  UserSearchResult {
   users: [ User!]
}

type  UserSettingSearchResult {
   userSettings: [ UserSetting!]
}
`, BuiltIn: false},
	{Name: "../schema/standard.graphql", Input: `extend type Query {
    """
    Look up standard by ID
    """
     standard(
        """
        ID of the standard
        """
        id: ID!
    ):  Standard!
}

extend type Mutation{
    """
    Create a new standard
    """
    createStandard(
        """
        values of the standard
        """
        input: CreateStandardInput!
    ): StandardCreatePayload!
    """
    Create multiple new standards
    """
    createBulkStandard(
        """
        values of the standard
        """
        input: [CreateStandardInput!]
    ): StandardBulkCreatePayload!
    """
    Create multiple new standards via file upload
    """
    createBulkCSVStandard(
        """
        csv file containing values of the standard
        """
        input: Upload!
    ): StandardBulkCreatePayload!
    """
    Update an existing standard
    """
    updateStandard(
        """
        ID of the standard
        """
        id: ID!
        """
        New values for the standard
        """
        input: UpdateStandardInput!
    ): StandardUpdatePayload!
    """
    Delete an existing standard
    """
    deleteStandard(
        """
        ID of the standard
        """
        id: ID!
    ): StandardDeletePayload!
}

"""
Return response for createStandard mutation
"""
type StandardCreatePayload {
    """
    Created standard
    """
    standard: Standard!
}

"""
Return response for updateStandard mutation
"""
type StandardUpdatePayload {
    """
    Updated standard
    """
    standard: Standard!
}

"""
Return response for deleteStandard mutation
"""
type StandardDeletePayload {
    """
    Deleted standard ID
    """
    deletedID: ID!
}

"""
Return response for createBulkStandard mutation
"""
type StandardBulkCreatePayload {
    """
    Created standards
    """
    standards: [Standard!]
}`, BuiltIn: false},
	{Name: "../schema/subcontrol.graphql", Input: `extend type Query {
    """
    Look up subcontrol by ID
    """
     subcontrol(
        """
        ID of the subcontrol
        """
        id: ID!
    ):  Subcontrol!
}

extend type Mutation{
    """
    Create a new subcontrol
    """
    createSubcontrol(
        """
        values of the subcontrol
        """
        input: CreateSubcontrolInput!
    ): SubcontrolCreatePayload!
    """
    Create multiple new subcontrols
    """
    createBulkSubcontrol(
        """
        values of the subcontrol
        """
        input: [CreateSubcontrolInput!]
    ): SubcontrolBulkCreatePayload!
    """
    Create multiple new subcontrols via file upload
    """
    createBulkCSVSubcontrol(
        """
        csv file containing values of the subcontrol
        """
        input: Upload!
    ): SubcontrolBulkCreatePayload!
    """
    Update an existing subcontrol
    """
    updateSubcontrol(
        """
        ID of the subcontrol
        """
        id: ID!
        """
        New values for the subcontrol
        """
        input: UpdateSubcontrolInput!
    ): SubcontrolUpdatePayload!
    """
    Delete an existing subcontrol
    """
    deleteSubcontrol(
        """
        ID of the subcontrol
        """
        id: ID!
    ): SubcontrolDeletePayload!
}

"""
Return response for createSubcontrol mutation
"""
type SubcontrolCreatePayload {
    """
    Created subcontrol
    """
    subcontrol: Subcontrol!
}

"""
Return response for updateSubcontrol mutation
"""
type SubcontrolUpdatePayload {
    """
    Updated subcontrol
    """
    subcontrol: Subcontrol!
}

"""
Return response for deleteSubcontrol mutation
"""
type SubcontrolDeletePayload {
    """
    Deleted subcontrol ID
    """
    deletedID: ID!
}

"""
Return response for createBulkSubcontrol mutation
"""
type SubcontrolBulkCreatePayload {
    """
    Created subcontrols
    """
    subcontrols: [Subcontrol!]
}`, BuiltIn: false},
	{Name: "../schema/subscriber.graphql", Input: `extend type Query {
    """
    Look up subscriber by Email
    """
     subscriber(
        """
        Email of the subscriber
        """
        email: String!
    ):  Subscriber!
}

extend type Mutation{
    """
    Create a new subscriber
    """
    createSubscriber(
        """
        values of the subscriber
        """
        input: CreateSubscriberInput!
    ): SubscriberCreatePayload!
    """
    Create new subscribers
    """
    createBulkSubscriber(
        """
        values of the subscriber
        """
        input: [CreateSubscriberInput!]
    ): SubscriberBulkCreatePayload!
        """
    Create new subscribers via CSV file
    """
    createBulkCSVSubscriber(
        """
        values of the subscriber
        """
        input: Upload!
    ): SubscriberBulkCreatePayload!
    """
    Update an existing subscriber
    """
    updateSubscriber(
        """
        Email of the subscriber
        """
        email: String!
        """
        New values for the subscriber
        """
        input: UpdateSubscriberInput!
    ): SubscriberUpdatePayload!
    """
    Delete an existing subscriber by Email
    """
    deleteSubscriber(
        """
        Email of the subscriber
        """
        email: String!
        """
        OwnerID of the subscriber
        """
        ownerID: ID
    ): SubscriberDeletePayload!
}

"""
Return response for createSubscriber mutation
"""
type SubscriberCreatePayload {
    """
    Created subscriber
    """
    subscriber: Subscriber!
}

"""
Return response for updateSubscriber mutation
"""
type SubscriberUpdatePayload {
    """
    Updated subscriber
    """
    subscriber: Subscriber!
}

"""
Return response for deleteSubscriber mutation
"""
type SubscriberDeletePayload {
    """
    Deleted subscriber email
    """
    email: String!
}

"""
Return response for createBulkSubscriber mutation
"""
type SubscriberBulkCreatePayload {
    """
    Created subscribers
    """
    subscribers: [Subscriber!]
}

`, BuiltIn: false},
	{Name: "../schema/task.graphql", Input: `extend type Query {
    """
    Look up task by ID
    """
     task(
        """
        ID of the task
        """
        id: ID!
    ):  Task!
}

extend type Mutation{
    """
    Create a new task
    """
    createTask(
        """
        values of the task
        """
        input: CreateTaskInput!
    ): TaskCreatePayload!
    """
    Create multiple new tasks
    """
    createBulkTask(
        """
        values of the task
        """
        input: [CreateTaskInput!]
    ): TaskBulkCreatePayload!
    """
    Create multiple new tasks via file upload
    """
    createBulkCSVTask(
        """
        csv file containing values of the task
        """
        input: Upload!
    ): TaskBulkCreatePayload!
    """
    Update an existing task
    """
    updateTask(
        """
        ID of the task
        """
        id: ID!
        """
        New values for the task
        """
        input: UpdateTaskInput!
    ): TaskUpdatePayload!
    """
    Delete an existing task
    """
    deleteTask(
        """
        ID of the task
        """
        id: ID!
    ): TaskDeletePayload!
}

"""
Return response for createTask mutation
"""
type TaskCreatePayload {
    """
    Created task
    """
    task: Task!
}

"""
Return response for updateTask mutation
"""
type TaskUpdatePayload {
    """
    Updated task
    """
    task: Task!
}

"""
Return response for deleteTask mutation
"""
type TaskDeletePayload {
    """
    Deleted task ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTask mutation
"""
type TaskBulkCreatePayload {
    """
    Created tasks
    """
    tasks: [Task!]
}`, BuiltIn: false},
	{Name: "../schema/template.graphql", Input: `extend type Query {
    """
    Look up template by ID
    """
     template(
        """
        ID of the template
        """
        id: ID!
    ):  Template!
}

extend type Mutation{
    """
    Create a new template
    """
    createTemplate(
        """
        values of the template
        """
        input: CreateTemplateInput!
    ): TemplateCreatePayload!
    """
    Create multiple new templates
    """
    createBulkTemplate(
        """
        values of the template
        """
        input: [CreateTemplateInput!]
    ): TemplateBulkCreatePayload!
    """
    Create multiple new templates via file upload
    """
    createBulkCSVTemplate(
        """
        csv file containing values of the template
        """
        input: Upload!
    ): TemplateBulkCreatePayload!
    """
    Update an existing template
    """
    updateTemplate(
        """
        ID of the template
        """
        id: ID!
        """
        New values for the template
        """
        input: UpdateTemplateInput!
    ): TemplateUpdatePayload!
    """
    Delete an existing template
    """
    deleteTemplate(
        """
        ID of the template
        """
        id: ID!
    ): TemplateDeletePayload!
}

"""
Return response for createTemplate mutation
"""
type TemplateCreatePayload {
    """
    Created template
    """
    template: Template!
}

"""
Return response for updateTemplate mutation
"""
type TemplateUpdatePayload {
    """
    Updated template
    """
    template: Template!
}

"""
Return response for deleteTemplate mutation
"""
type TemplateDeletePayload {
    """
    Deleted template ID
    """
    deletedID: ID!
}

"""
Return response for createBulkTemplate mutation
"""
type TemplateBulkCreatePayload {
    """
    Created templates
    """
    templates: [Template!]
}`, BuiltIn: false},
	{Name: "../schema/tfasetting.graphql", Input: `extend type Query {
    """
    Look up tfaSetting for the current user
    """
     tfaSetting(
        """
        ID of the tfaSetting
        """
        id: ID
    ):  TFASetting!
}

extend type Mutation{
    """
    Create a new tfaSetting
    """
    createTFASetting(
        """
        values of the tfaSetting
        """
        input: CreateTFASettingInput!
    ): TFASettingCreatePayload!
    """
    Update an existing tfaSetting
    """
    updateTFASetting(
        """
        New values for the tfaSetting
        """
        input: UpdateTFASettingInput!
    ): TFASettingUpdatePayload!
}

"""
Return response for createTFASetting mutation
"""
type TFASettingCreatePayload {
    """
    Created tfaSetting
    """
    tfaSetting: TFASetting!
}

"""
Return response for updateTFASetting mutation
"""
type TFASettingUpdatePayload {
    """
    Updated tfaSetting
    """
    tfaSetting: TFASetting!
}

extend input UpdateTFASettingInput {
    """
    Whether to regenerate backup codes
    """
    regenBackupCodes: Boolean
}`, BuiltIn: false},
	{Name: "../schema/user.graphql", Input: `extend type Query {
    """
    Look up user by ID
    """
     user(
        """
        ID of the user
        """
        id: ID!
    ):  User!
}

extend type Mutation{
    """
    Create a new user
    """
    createUser(
        """
        values of the user
        """
        input: CreateUserInput!
        avatarFile: Upload
    ): UserCreatePayload!
    """
    Update an existing user
    """
    updateUser(
        """
        ID of the user
        """
        id: ID!
        """
        New values for the user
        """
        input: UpdateUserInput!
        avatarFile: Upload
    ): UserUpdatePayload!
    """
    Delete an existing user
    """
    deleteUser(
        """
        ID of the user
        """
        id: ID!
    ): UserDeletePayload!
}

"""
Return response for createUser mutation
"""
type UserCreatePayload {
    """
    Created user
    """
    user: User!
}

"""
Return response for updateUser mutation
"""
type UserUpdatePayload {
    """
    Updated user
    """
    user: User!
}

"""
Return response for deleteUser mutation
"""
type UserDeletePayload {
    """
    Deleted user ID
    """
    deletedID: ID!
}

"""
Return response for createBulkUser mutation
"""
type UserBulkCreatePayload {
    """
    Created users
    """
    users: [User!]
}`, BuiltIn: false},
	{Name: "../schema/usersetting.graphql", Input: `extend type Query {
    """
    Look up userSetting by ID
    """
     userSetting(
        """
        ID of the userSetting
        """
        id: ID!
    ):  UserSetting!
}

extend type Mutation{
    """
    Create a new userSetting
    """
    createUserSetting(
        """
        values of the userSetting
        """
        input: CreateUserSettingInput!
    ): UserSettingCreatePayload!
    """
    Create multiple new userSettings
    """
    createBulkUserSetting(
        """
        values of the userSetting
        """
        input: [CreateUserSettingInput!]
    ): UserSettingBulkCreatePayload!
    """
    Create multiple new userSettings via file upload
    """
    createBulkCSVUserSetting(
        """
        csv file containing values of the userSetting
        """
        input: Upload!
    ): UserSettingBulkCreatePayload!
    """
    Update an existing userSetting
    """
    updateUserSetting(
        """
        ID of the userSetting
        """
        id: ID!
        """
        New values for the userSetting
        """
        input: UpdateUserSettingInput!
    ): UserSettingUpdatePayload!
}

"""
Return response for createUserSetting mutation
"""
type UserSettingCreatePayload {
    """
    Created userSetting
    """
    userSetting: UserSetting!
}

"""
Return response for updateUserSetting mutation
"""
type UserSettingUpdatePayload {
    """
    Updated userSetting
    """
    userSetting: UserSetting!
}

"""
Return response for createBulkUserSetting mutation
"""
type UserSettingBulkCreatePayload {
    """
    Created userSettings
    """
    userSettings: [UserSetting!]
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
