// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TrustCenterCreatePayload_trustCenter(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterCreatePayload_trustCenter,
		func(ctx context.Context) (any, error) { return obj.TrustCenter, nil },
		nil,
		ec.marshalNTrustCenter2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenter,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterCreatePayload_trustCenter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenter_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenter_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenter_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenter_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenter_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_TrustCenter_ownerID(ctx, field)
			case "slug":
				return ec.fieldContext_TrustCenter_slug(ctx, field)
			case "customDomainID":
				return ec.fieldContext_TrustCenter_customDomainID(ctx, field)
			case "owner":
				return ec.fieldContext_TrustCenter_owner(ctx, field)
			case "customDomain":
				return ec.fieldContext_TrustCenter_customDomain(ctx, field)
			case "setting":
				return ec.fieldContext_TrustCenter_setting(ctx, field)
			case "trustCenterSubprocessors":
				return ec.fieldContext_TrustCenter_trustCenterSubprocessors(ctx, field)
			case "trustCenterDocs":
				return ec.fieldContext_TrustCenter_trustCenterDocs(ctx, field)
			case "trustCenterCompliances":
				return ec.fieldContext_TrustCenter_trustCenterCompliances(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterDeletePayload_deletedID,
		func(ctx context.Context) (any, error) { return obj.DeletedID, nil },
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterUpdatePayload_trustCenter(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterUpdatePayload_trustCenter,
		func(ctx context.Context) (any, error) { return obj.TrustCenter, nil },
		nil,
		ec.marshalNTrustCenter2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenter,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterUpdatePayload_trustCenter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenter_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenter_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenter_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenter_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenter_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_TrustCenter_ownerID(ctx, field)
			case "slug":
				return ec.fieldContext_TrustCenter_slug(ctx, field)
			case "customDomainID":
				return ec.fieldContext_TrustCenter_customDomainID(ctx, field)
			case "owner":
				return ec.fieldContext_TrustCenter_owner(ctx, field)
			case "customDomain":
				return ec.fieldContext_TrustCenter_customDomain(ctx, field)
			case "setting":
				return ec.fieldContext_TrustCenter_setting(ctx, field)
			case "trustCenterSubprocessors":
				return ec.fieldContext_TrustCenter_trustCenterSubprocessors(ctx, field)
			case "trustCenterDocs":
				return ec.fieldContext_TrustCenter_trustCenterDocs(ctx, field)
			case "trustCenterCompliances":
				return ec.fieldContext_TrustCenter_trustCenterCompliances(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenter", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var trustCenterCreatePayloadImplementors = []string{"TrustCenterCreatePayload"}

func (ec *executionContext) _TrustCenterCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterCreatePayload")
		case "trustCenter":
			out.Values[i] = ec._TrustCenterCreatePayload_trustCenter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterDeletePayloadImplementors = []string{"TrustCenterDeletePayload"}

func (ec *executionContext) _TrustCenterDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TrustCenterDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterUpdatePayloadImplementors = []string{"TrustCenterUpdatePayload"}

func (ec *executionContext) _TrustCenterUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterUpdatePayload")
		case "trustCenter":
			out.Values[i] = ec._TrustCenterUpdatePayload_trustCenter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTrustCenterCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterCreatePayload) graphql.Marshaler {
	return ec._TrustCenterCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterDeletePayload) graphql.Marshaler {
	return ec._TrustCenterDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterUpdatePayload) graphql.Marshaler {
	return ec._TrustCenterUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
