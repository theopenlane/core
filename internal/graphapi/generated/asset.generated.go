// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AssetBulkCreatePayload_assets(ctx context.Context, field graphql.CollectedField, obj *model.AssetBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AssetBulkCreatePayload_assets,
		func(ctx context.Context) (any, error) {
			return obj.Assets, nil
		},
		nil,
		ec.marshalOAsset2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAssetᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_AssetBulkCreatePayload_assets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssetBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Asset_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Asset_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Asset_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Asset_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Asset_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Asset_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Asset_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_Asset_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_Asset_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_Asset_systemInternalID(ctx, field)
			case "assetType":
				return ec.fieldContext_Asset_assetType(ctx, field)
			case "name":
				return ec.fieldContext_Asset_name(ctx, field)
			case "description":
				return ec.fieldContext_Asset_description(ctx, field)
			case "identifier":
				return ec.fieldContext_Asset_identifier(ctx, field)
			case "website":
				return ec.fieldContext_Asset_website(ctx, field)
			case "cpe":
				return ec.fieldContext_Asset_cpe(ctx, field)
			case "categories":
				return ec.fieldContext_Asset_categories(ctx, field)
			case "owner":
				return ec.fieldContext_Asset_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Asset_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Asset_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Asset_viewers(ctx, field)
			case "scans":
				return ec.fieldContext_Asset_scans(ctx, field)
			case "entities":
				return ec.fieldContext_Asset_entities(ctx, field)
			case "controls":
				return ec.fieldContext_Asset_controls(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Asset", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AssetCreatePayload_asset(ctx context.Context, field graphql.CollectedField, obj *model.AssetCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AssetCreatePayload_asset,
		func(ctx context.Context) (any, error) {
			return obj.Asset, nil
		},
		nil,
		ec.marshalNAsset2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAsset,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AssetCreatePayload_asset(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssetCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Asset_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Asset_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Asset_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Asset_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Asset_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Asset_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Asset_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_Asset_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_Asset_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_Asset_systemInternalID(ctx, field)
			case "assetType":
				return ec.fieldContext_Asset_assetType(ctx, field)
			case "name":
				return ec.fieldContext_Asset_name(ctx, field)
			case "description":
				return ec.fieldContext_Asset_description(ctx, field)
			case "identifier":
				return ec.fieldContext_Asset_identifier(ctx, field)
			case "website":
				return ec.fieldContext_Asset_website(ctx, field)
			case "cpe":
				return ec.fieldContext_Asset_cpe(ctx, field)
			case "categories":
				return ec.fieldContext_Asset_categories(ctx, field)
			case "owner":
				return ec.fieldContext_Asset_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Asset_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Asset_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Asset_viewers(ctx, field)
			case "scans":
				return ec.fieldContext_Asset_scans(ctx, field)
			case "entities":
				return ec.fieldContext_Asset_entities(ctx, field)
			case "controls":
				return ec.fieldContext_Asset_controls(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Asset", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AssetDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.AssetDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AssetDeletePayload_deletedID,
		func(ctx context.Context) (any, error) {
			return obj.DeletedID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AssetDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssetDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AssetUpdatePayload_asset(ctx context.Context, field graphql.CollectedField, obj *model.AssetUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AssetUpdatePayload_asset,
		func(ctx context.Context) (any, error) {
			return obj.Asset, nil
		},
		nil,
		ec.marshalNAsset2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAsset,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AssetUpdatePayload_asset(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssetUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Asset_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Asset_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Asset_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Asset_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Asset_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Asset_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Asset_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_Asset_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_Asset_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_Asset_systemInternalID(ctx, field)
			case "assetType":
				return ec.fieldContext_Asset_assetType(ctx, field)
			case "name":
				return ec.fieldContext_Asset_name(ctx, field)
			case "description":
				return ec.fieldContext_Asset_description(ctx, field)
			case "identifier":
				return ec.fieldContext_Asset_identifier(ctx, field)
			case "website":
				return ec.fieldContext_Asset_website(ctx, field)
			case "cpe":
				return ec.fieldContext_Asset_cpe(ctx, field)
			case "categories":
				return ec.fieldContext_Asset_categories(ctx, field)
			case "owner":
				return ec.fieldContext_Asset_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Asset_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Asset_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Asset_viewers(ctx, field)
			case "scans":
				return ec.fieldContext_Asset_scans(ctx, field)
			case "entities":
				return ec.fieldContext_Asset_entities(ctx, field)
			case "controls":
				return ec.fieldContext_Asset_controls(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Asset", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var assetBulkCreatePayloadImplementors = []string{"AssetBulkCreatePayload"}

func (ec *executionContext) _AssetBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssetBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assetBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssetBulkCreatePayload")
		case "assets":
			out.Values[i] = ec._AssetBulkCreatePayload_assets(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var assetCreatePayloadImplementors = []string{"AssetCreatePayload"}

func (ec *executionContext) _AssetCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssetCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assetCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssetCreatePayload")
		case "asset":
			out.Values[i] = ec._AssetCreatePayload_asset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var assetDeletePayloadImplementors = []string{"AssetDeletePayload"}

func (ec *executionContext) _AssetDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssetDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assetDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssetDeletePayload")
		case "deletedID":
			out.Values[i] = ec._AssetDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var assetUpdatePayloadImplementors = []string{"AssetUpdatePayload"}

func (ec *executionContext) _AssetUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssetUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assetUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssetUpdatePayload")
		case "asset":
			out.Values[i] = ec._AssetUpdatePayload_asset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAssetBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.AssetBulkCreatePayload) graphql.Marshaler {
	return ec._AssetBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssetBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssetBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssetBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAssetCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.AssetCreatePayload) graphql.Marshaler {
	return ec._AssetCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssetCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssetCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssetCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAssetDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.AssetDeletePayload) graphql.Marshaler {
	return ec._AssetDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssetDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssetDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssetDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAssetUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.AssetUpdatePayload) graphql.Marshaler {
	return ec._AssetUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssetUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssetUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssetUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssetUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
