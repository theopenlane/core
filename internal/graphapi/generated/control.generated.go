// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ControlBulkCreatePayload_controls(ctx context.Context, field graphql.CollectedField, obj *model.ControlBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlBulkCreatePayload_controls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Controls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Control)
	fc.Result = res
	return ec.marshalOControl2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlBulkCreatePayload_controls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Control_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Control_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Control_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Control_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Control_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Control_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Control_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Control_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Control_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Control_name(ctx, field)
			case "description":
				return ec.fieldContext_Control_description(ctx, field)
			case "status":
				return ec.fieldContext_Control_status(ctx, field)
			case "controlType":
				return ec.fieldContext_Control_controlType(ctx, field)
			case "version":
				return ec.fieldContext_Control_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_Control_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_Control_family(ctx, field)
			case "class":
				return ec.fieldContext_Control_class(ctx, field)
			case "source":
				return ec.fieldContext_Control_source(ctx, field)
			case "satisfies":
				return ec.fieldContext_Control_satisfies(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_Control_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_Control_details(ctx, field)
			case "owner":
				return ec.fieldContext_Control_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Control_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Control_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Control_viewers(ctx, field)
			case "procedures":
				return ec.fieldContext_Control_procedures(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Control_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Control_controlObjectives(ctx, field)
			case "standard":
				return ec.fieldContext_Control_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_Control_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Control_risks(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Control_actionPlans(ctx, field)
			case "tasks":
				return ec.fieldContext_Control_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Control_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Control", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlCreatePayload_control(ctx context.Context, field graphql.CollectedField, obj *model.ControlCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlCreatePayload_control(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Control, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Control)
	fc.Result = res
	return ec.marshalNControl2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlCreatePayload_control(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Control_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Control_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Control_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Control_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Control_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Control_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Control_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Control_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Control_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Control_name(ctx, field)
			case "description":
				return ec.fieldContext_Control_description(ctx, field)
			case "status":
				return ec.fieldContext_Control_status(ctx, field)
			case "controlType":
				return ec.fieldContext_Control_controlType(ctx, field)
			case "version":
				return ec.fieldContext_Control_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_Control_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_Control_family(ctx, field)
			case "class":
				return ec.fieldContext_Control_class(ctx, field)
			case "source":
				return ec.fieldContext_Control_source(ctx, field)
			case "satisfies":
				return ec.fieldContext_Control_satisfies(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_Control_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_Control_details(ctx, field)
			case "owner":
				return ec.fieldContext_Control_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Control_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Control_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Control_viewers(ctx, field)
			case "procedures":
				return ec.fieldContext_Control_procedures(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Control_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Control_controlObjectives(ctx, field)
			case "standard":
				return ec.fieldContext_Control_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_Control_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Control_risks(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Control_actionPlans(ctx, field)
			case "tasks":
				return ec.fieldContext_Control_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Control_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Control", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.ControlDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlUpdatePayload_control(ctx context.Context, field graphql.CollectedField, obj *model.ControlUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlUpdatePayload_control(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Control, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Control)
	fc.Result = res
	return ec.marshalNControl2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlUpdatePayload_control(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Control_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Control_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Control_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Control_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Control_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Control_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Control_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Control_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Control_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Control_name(ctx, field)
			case "description":
				return ec.fieldContext_Control_description(ctx, field)
			case "status":
				return ec.fieldContext_Control_status(ctx, field)
			case "controlType":
				return ec.fieldContext_Control_controlType(ctx, field)
			case "version":
				return ec.fieldContext_Control_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_Control_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_Control_family(ctx, field)
			case "class":
				return ec.fieldContext_Control_class(ctx, field)
			case "source":
				return ec.fieldContext_Control_source(ctx, field)
			case "satisfies":
				return ec.fieldContext_Control_satisfies(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_Control_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_Control_details(ctx, field)
			case "owner":
				return ec.fieldContext_Control_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Control_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Control_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Control_viewers(ctx, field)
			case "procedures":
				return ec.fieldContext_Control_procedures(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Control_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Control_controlObjectives(ctx, field)
			case "standard":
				return ec.fieldContext_Control_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_Control_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Control_risks(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Control_actionPlans(ctx, field)
			case "tasks":
				return ec.fieldContext_Control_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Control_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Control", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var controlBulkCreatePayloadImplementors = []string{"ControlBulkCreatePayload"}

func (ec *executionContext) _ControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlBulkCreatePayload")
		case "controls":
			out.Values[i] = ec._ControlBulkCreatePayload_controls(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlCreatePayloadImplementors = []string{"ControlCreatePayload"}

func (ec *executionContext) _ControlCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlCreatePayload")
		case "control":
			out.Values[i] = ec._ControlCreatePayload_control(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlDeletePayloadImplementors = []string{"ControlDeletePayload"}

func (ec *executionContext) _ControlDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlDeletePayload")
		case "deletedID":
			out.Values[i] = ec._ControlDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlUpdatePayloadImplementors = []string{"ControlUpdatePayload"}

func (ec *executionContext) _ControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlUpdatePayload")
		case "control":
			out.Values[i] = ec._ControlUpdatePayload_control(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNControlBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlBulkCreatePayload) graphql.Marshaler {
	return ec._ControlBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNControlCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlCreatePayload) graphql.Marshaler {
	return ec._ControlCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNControlDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlDeletePayload) graphql.Marshaler {
	return ec._ControlDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNControlUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlUpdatePayload) graphql.Marshaler {
	return ec._ControlUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
