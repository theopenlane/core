// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TemplateBulkCreatePayload_templates(ctx context.Context, field graphql.CollectedField, obj *model.TemplateBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateBulkCreatePayload_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Template)
	fc.Result = res
	return ec.marshalOTemplate2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateBulkCreatePayload_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Template_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Template_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Template_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Template_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Template_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Template_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Template_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Template_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Template_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Template_name(ctx, field)
			case "templateType":
				return ec.fieldContext_Template_templateType(ctx, field)
			case "description":
				return ec.fieldContext_Template_description(ctx, field)
			case "jsonconfig":
				return ec.fieldContext_Template_jsonconfig(ctx, field)
			case "uischema":
				return ec.fieldContext_Template_uischema(ctx, field)
			case "owner":
				return ec.fieldContext_Template_owner(ctx, field)
			case "documents":
				return ec.fieldContext_Template_documents(ctx, field)
			case "files":
				return ec.fieldContext_Template_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Template", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateCreatePayload_template(ctx context.Context, field graphql.CollectedField, obj *model.TemplateCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateCreatePayload_template(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateCreatePayload_template(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Template_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Template_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Template_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Template_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Template_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Template_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Template_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Template_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Template_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Template_name(ctx, field)
			case "templateType":
				return ec.fieldContext_Template_templateType(ctx, field)
			case "description":
				return ec.fieldContext_Template_description(ctx, field)
			case "jsonconfig":
				return ec.fieldContext_Template_jsonconfig(ctx, field)
			case "uischema":
				return ec.fieldContext_Template_uischema(ctx, field)
			case "owner":
				return ec.fieldContext_Template_owner(ctx, field)
			case "documents":
				return ec.fieldContext_Template_documents(ctx, field)
			case "files":
				return ec.fieldContext_Template_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Template", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TemplateDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateUpdatePayload_template(ctx context.Context, field graphql.CollectedField, obj *model.TemplateUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateUpdatePayload_template(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateUpdatePayload_template(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Template_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Template_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Template_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Template_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Template_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Template_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Template_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Template_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Template_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Template_name(ctx, field)
			case "templateType":
				return ec.fieldContext_Template_templateType(ctx, field)
			case "description":
				return ec.fieldContext_Template_description(ctx, field)
			case "jsonconfig":
				return ec.fieldContext_Template_jsonconfig(ctx, field)
			case "uischema":
				return ec.fieldContext_Template_uischema(ctx, field)
			case "owner":
				return ec.fieldContext_Template_owner(ctx, field)
			case "documents":
				return ec.fieldContext_Template_documents(ctx, field)
			case "files":
				return ec.fieldContext_Template_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Template", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var templateBulkCreatePayloadImplementors = []string{"TemplateBulkCreatePayload"}

func (ec *executionContext) _TemplateBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateBulkCreatePayload")
		case "templates":
			out.Values[i] = ec._TemplateBulkCreatePayload_templates(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateCreatePayloadImplementors = []string{"TemplateCreatePayload"}

func (ec *executionContext) _TemplateCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateCreatePayload")
		case "template":
			out.Values[i] = ec._TemplateCreatePayload_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateDeletePayloadImplementors = []string{"TemplateDeletePayload"}

func (ec *executionContext) _TemplateDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TemplateDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateUpdatePayloadImplementors = []string{"TemplateUpdatePayload"}

func (ec *executionContext) _TemplateUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateUpdatePayload")
		case "template":
			out.Values[i] = ec._TemplateUpdatePayload_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTemplateBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateBulkCreatePayload) graphql.Marshaler {
	return ec._TemplateBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateCreatePayload) graphql.Marshaler {
	return ec._TemplateCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateDeletePayload) graphql.Marshaler {
	return ec._TemplateDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateUpdatePayload) graphql.Marshaler {
	return ec._TemplateUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
