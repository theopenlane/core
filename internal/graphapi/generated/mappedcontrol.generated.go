// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _MappedControlBulkCreatePayload_mappedControls(ctx context.Context, field graphql.CollectedField, obj *model.MappedControlBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappedControlBulkCreatePayload_mappedControls,
		func(ctx context.Context) (any, error) { return obj.MappedControls, nil },
		nil,
		ec.marshalOMappedControl2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappedControlᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MappedControlBulkCreatePayload_mappedControls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappedControlBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MappedControl_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MappedControl_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MappedControl_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_MappedControl_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_MappedControl_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_MappedControl_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_MappedControl_ownerID(ctx, field)
			case "mappingType":
				return ec.fieldContext_MappedControl_mappingType(ctx, field)
			case "relation":
				return ec.fieldContext_MappedControl_relation(ctx, field)
			case "confidence":
				return ec.fieldContext_MappedControl_confidence(ctx, field)
			case "source":
				return ec.fieldContext_MappedControl_source(ctx, field)
			case "owner":
				return ec.fieldContext_MappedControl_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_MappedControl_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_MappedControl_editors(ctx, field)
			case "fromControls":
				return ec.fieldContext_MappedControl_fromControls(ctx, field)
			case "toControls":
				return ec.fieldContext_MappedControl_toControls(ctx, field)
			case "fromSubcontrols":
				return ec.fieldContext_MappedControl_fromSubcontrols(ctx, field)
			case "toSubcontrols":
				return ec.fieldContext_MappedControl_toSubcontrols(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappedControl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MappedControlCreatePayload_mappedControl(ctx context.Context, field graphql.CollectedField, obj *model.MappedControlCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappedControlCreatePayload_mappedControl,
		func(ctx context.Context) (any, error) { return obj.MappedControl, nil },
		nil,
		ec.marshalNMappedControl2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappedControl,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MappedControlCreatePayload_mappedControl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappedControlCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MappedControl_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MappedControl_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MappedControl_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_MappedControl_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_MappedControl_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_MappedControl_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_MappedControl_ownerID(ctx, field)
			case "mappingType":
				return ec.fieldContext_MappedControl_mappingType(ctx, field)
			case "relation":
				return ec.fieldContext_MappedControl_relation(ctx, field)
			case "confidence":
				return ec.fieldContext_MappedControl_confidence(ctx, field)
			case "source":
				return ec.fieldContext_MappedControl_source(ctx, field)
			case "owner":
				return ec.fieldContext_MappedControl_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_MappedControl_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_MappedControl_editors(ctx, field)
			case "fromControls":
				return ec.fieldContext_MappedControl_fromControls(ctx, field)
			case "toControls":
				return ec.fieldContext_MappedControl_toControls(ctx, field)
			case "fromSubcontrols":
				return ec.fieldContext_MappedControl_fromSubcontrols(ctx, field)
			case "toSubcontrols":
				return ec.fieldContext_MappedControl_toSubcontrols(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappedControl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MappedControlDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.MappedControlDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappedControlDeletePayload_deletedID,
		func(ctx context.Context) (any, error) { return obj.DeletedID, nil },
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MappedControlDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappedControlDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MappedControlUpdatePayload_mappedControl(ctx context.Context, field graphql.CollectedField, obj *model.MappedControlUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappedControlUpdatePayload_mappedControl,
		func(ctx context.Context) (any, error) { return obj.MappedControl, nil },
		nil,
		ec.marshalNMappedControl2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappedControl,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MappedControlUpdatePayload_mappedControl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappedControlUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MappedControl_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MappedControl_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MappedControl_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_MappedControl_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_MappedControl_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_MappedControl_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_MappedControl_ownerID(ctx, field)
			case "mappingType":
				return ec.fieldContext_MappedControl_mappingType(ctx, field)
			case "relation":
				return ec.fieldContext_MappedControl_relation(ctx, field)
			case "confidence":
				return ec.fieldContext_MappedControl_confidence(ctx, field)
			case "source":
				return ec.fieldContext_MappedControl_source(ctx, field)
			case "owner":
				return ec.fieldContext_MappedControl_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_MappedControl_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_MappedControl_editors(ctx, field)
			case "fromControls":
				return ec.fieldContext_MappedControl_fromControls(ctx, field)
			case "toControls":
				return ec.fieldContext_MappedControl_toControls(ctx, field)
			case "fromSubcontrols":
				return ec.fieldContext_MappedControl_fromSubcontrols(ctx, field)
			case "toSubcontrols":
				return ec.fieldContext_MappedControl_toSubcontrols(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappedControl", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mappedControlBulkCreatePayloadImplementors = []string{"MappedControlBulkCreatePayload"}

func (ec *executionContext) _MappedControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappedControlBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappedControlBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappedControlBulkCreatePayload")
		case "mappedControls":
			out.Values[i] = ec._MappedControlBulkCreatePayload_mappedControls(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mappedControlCreatePayloadImplementors = []string{"MappedControlCreatePayload"}

func (ec *executionContext) _MappedControlCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappedControlCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappedControlCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappedControlCreatePayload")
		case "mappedControl":
			out.Values[i] = ec._MappedControlCreatePayload_mappedControl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mappedControlDeletePayloadImplementors = []string{"MappedControlDeletePayload"}

func (ec *executionContext) _MappedControlDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappedControlDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappedControlDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappedControlDeletePayload")
		case "deletedID":
			out.Values[i] = ec._MappedControlDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mappedControlUpdatePayloadImplementors = []string{"MappedControlUpdatePayload"}

func (ec *executionContext) _MappedControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappedControlUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappedControlUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappedControlUpdatePayload")
		case "mappedControl":
			out.Values[i] = ec._MappedControlUpdatePayload_mappedControl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNMappedControlBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.MappedControlBulkCreatePayload) graphql.Marshaler {
	return ec._MappedControlBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappedControlBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappedControlBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappedControlBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNMappedControlCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.MappedControlCreatePayload) graphql.Marshaler {
	return ec._MappedControlCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappedControlCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappedControlCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappedControlCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNMappedControlDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.MappedControlDeletePayload) graphql.Marshaler {
	return ec._MappedControlDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappedControlDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappedControlDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappedControlDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNMappedControlUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.MappedControlUpdatePayload) graphql.Marshaler {
	return ec._MappedControlUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappedControlUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappedControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappedControlUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappedControlUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
