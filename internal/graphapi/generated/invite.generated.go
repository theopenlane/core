// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _InviteBulkCreatePayload_invites(ctx context.Context, field graphql.CollectedField, obj *model.InviteBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InviteBulkCreatePayload_invites(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invites, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Invite)
	fc.Result = res
	return ec.marshalOInvite2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInviteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InviteBulkCreatePayload_invites(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InviteBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Invite_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Invite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Invite_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Invite_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Invite_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Invite_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Invite_deletedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_Invite_ownerID(ctx, field)
			case "expires":
				return ec.fieldContext_Invite_expires(ctx, field)
			case "recipient":
				return ec.fieldContext_Invite_recipient(ctx, field)
			case "status":
				return ec.fieldContext_Invite_status(ctx, field)
			case "role":
				return ec.fieldContext_Invite_role(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_Invite_sendAttempts(ctx, field)
			case "requestorID":
				return ec.fieldContext_Invite_requestorID(ctx, field)
			case "owner":
				return ec.fieldContext_Invite_owner(ctx, field)
			case "events":
				return ec.fieldContext_Invite_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invite", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InviteCreatePayload_invite(ctx context.Context, field graphql.CollectedField, obj *model.InviteCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InviteCreatePayload_invite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Invite)
	fc.Result = res
	return ec.marshalNInvite2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInvite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InviteCreatePayload_invite(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InviteCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Invite_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Invite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Invite_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Invite_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Invite_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Invite_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Invite_deletedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_Invite_ownerID(ctx, field)
			case "expires":
				return ec.fieldContext_Invite_expires(ctx, field)
			case "recipient":
				return ec.fieldContext_Invite_recipient(ctx, field)
			case "status":
				return ec.fieldContext_Invite_status(ctx, field)
			case "role":
				return ec.fieldContext_Invite_role(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_Invite_sendAttempts(ctx, field)
			case "requestorID":
				return ec.fieldContext_Invite_requestorID(ctx, field)
			case "owner":
				return ec.fieldContext_Invite_owner(ctx, field)
			case "events":
				return ec.fieldContext_Invite_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invite", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InviteDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.InviteDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InviteDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InviteDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InviteDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InviteUpdatePayload_invite(ctx context.Context, field graphql.CollectedField, obj *model.InviteUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InviteUpdatePayload_invite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Invite)
	fc.Result = res
	return ec.marshalNInvite2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInvite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InviteUpdatePayload_invite(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InviteUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Invite_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Invite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Invite_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Invite_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Invite_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Invite_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Invite_deletedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_Invite_ownerID(ctx, field)
			case "expires":
				return ec.fieldContext_Invite_expires(ctx, field)
			case "recipient":
				return ec.fieldContext_Invite_recipient(ctx, field)
			case "status":
				return ec.fieldContext_Invite_status(ctx, field)
			case "role":
				return ec.fieldContext_Invite_role(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_Invite_sendAttempts(ctx, field)
			case "requestorID":
				return ec.fieldContext_Invite_requestorID(ctx, field)
			case "owner":
				return ec.fieldContext_Invite_owner(ctx, field)
			case "events":
				return ec.fieldContext_Invite_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invite", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var inviteBulkCreatePayloadImplementors = []string{"InviteBulkCreatePayload"}

func (ec *executionContext) _InviteBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InviteBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteBulkCreatePayload")
		case "invites":
			out.Values[i] = ec._InviteBulkCreatePayload_invites(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var inviteCreatePayloadImplementors = []string{"InviteCreatePayload"}

func (ec *executionContext) _InviteCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InviteCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteCreatePayload")
		case "invite":
			out.Values[i] = ec._InviteCreatePayload_invite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var inviteDeletePayloadImplementors = []string{"InviteDeletePayload"}

func (ec *executionContext) _InviteDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InviteDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteDeletePayload")
		case "deletedID":
			out.Values[i] = ec._InviteDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var inviteUpdatePayloadImplementors = []string{"InviteUpdatePayload"}

func (ec *executionContext) _InviteUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InviteUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteUpdatePayload")
		case "invite":
			out.Values[i] = ec._InviteUpdatePayload_invite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNInviteBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.InviteBulkCreatePayload) graphql.Marshaler {
	return ec._InviteBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInviteBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.InviteBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InviteBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNInviteCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.InviteCreatePayload) graphql.Marshaler {
	return ec._InviteCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInviteCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.InviteCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InviteCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNInviteDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.InviteDeletePayload) graphql.Marshaler {
	return ec._InviteDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInviteDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.InviteDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InviteDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNInviteUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.InviteUpdatePayload) graphql.Marshaler {
	return ec._InviteUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInviteUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInviteUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.InviteUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InviteUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
