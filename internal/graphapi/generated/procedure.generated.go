// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ProcedureBulkCreatePayload_procedures(ctx context.Context, field graphql.CollectedField, obj *model.ProcedureBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProcedureBulkCreatePayload_procedures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Procedures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Procedure)
	fc.Result = res
	return ec.marshalOProcedure2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProcedureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProcedureBulkCreatePayload_procedures(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProcedureBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Procedure_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Procedure_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Procedure_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Procedure_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Procedure_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Procedure_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Procedure_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Procedure_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Procedure_tags(ctx, field)
			case "revision":
				return ec.fieldContext_Procedure_revision(ctx, field)
			case "ownerID":
				return ec.fieldContext_Procedure_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Procedure_name(ctx, field)
			case "status":
				return ec.fieldContext_Procedure_status(ctx, field)
			case "procedureType":
				return ec.fieldContext_Procedure_procedureType(ctx, field)
			case "details":
				return ec.fieldContext_Procedure_details(ctx, field)
			case "approvalRequired":
				return ec.fieldContext_Procedure_approvalRequired(ctx, field)
			case "reviewDue":
				return ec.fieldContext_Procedure_reviewDue(ctx, field)
			case "reviewFrequency":
				return ec.fieldContext_Procedure_reviewFrequency(ctx, field)
			case "approverID":
				return ec.fieldContext_Procedure_approverID(ctx, field)
			case "delegateID":
				return ec.fieldContext_Procedure_delegateID(ctx, field)
			case "owner":
				return ec.fieldContext_Procedure_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Procedure_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Procedure_editors(ctx, field)
			case "approver":
				return ec.fieldContext_Procedure_approver(ctx, field)
			case "delegate":
				return ec.fieldContext_Procedure_delegate(ctx, field)
			case "controls":
				return ec.fieldContext_Procedure_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Procedure_subcontrols(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Procedure_internalPolicies(ctx, field)
			case "programs":
				return ec.fieldContext_Procedure_programs(ctx, field)
			case "narratives":
				return ec.fieldContext_Procedure_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Procedure_risks(ctx, field)
			case "tasks":
				return ec.fieldContext_Procedure_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Procedure", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProcedureCreatePayload_procedure(ctx context.Context, field graphql.CollectedField, obj *model.ProcedureCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProcedureCreatePayload_procedure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Procedure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Procedure)
	fc.Result = res
	return ec.marshalNProcedure2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProcedure(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProcedureCreatePayload_procedure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProcedureCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Procedure_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Procedure_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Procedure_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Procedure_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Procedure_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Procedure_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Procedure_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Procedure_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Procedure_tags(ctx, field)
			case "revision":
				return ec.fieldContext_Procedure_revision(ctx, field)
			case "ownerID":
				return ec.fieldContext_Procedure_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Procedure_name(ctx, field)
			case "status":
				return ec.fieldContext_Procedure_status(ctx, field)
			case "procedureType":
				return ec.fieldContext_Procedure_procedureType(ctx, field)
			case "details":
				return ec.fieldContext_Procedure_details(ctx, field)
			case "approvalRequired":
				return ec.fieldContext_Procedure_approvalRequired(ctx, field)
			case "reviewDue":
				return ec.fieldContext_Procedure_reviewDue(ctx, field)
			case "reviewFrequency":
				return ec.fieldContext_Procedure_reviewFrequency(ctx, field)
			case "approverID":
				return ec.fieldContext_Procedure_approverID(ctx, field)
			case "delegateID":
				return ec.fieldContext_Procedure_delegateID(ctx, field)
			case "owner":
				return ec.fieldContext_Procedure_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Procedure_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Procedure_editors(ctx, field)
			case "approver":
				return ec.fieldContext_Procedure_approver(ctx, field)
			case "delegate":
				return ec.fieldContext_Procedure_delegate(ctx, field)
			case "controls":
				return ec.fieldContext_Procedure_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Procedure_subcontrols(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Procedure_internalPolicies(ctx, field)
			case "programs":
				return ec.fieldContext_Procedure_programs(ctx, field)
			case "narratives":
				return ec.fieldContext_Procedure_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Procedure_risks(ctx, field)
			case "tasks":
				return ec.fieldContext_Procedure_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Procedure", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProcedureDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.ProcedureDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProcedureDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProcedureDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProcedureDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProcedureUpdatePayload_procedure(ctx context.Context, field graphql.CollectedField, obj *model.ProcedureUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProcedureUpdatePayload_procedure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Procedure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Procedure)
	fc.Result = res
	return ec.marshalNProcedure2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProcedure(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProcedureUpdatePayload_procedure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProcedureUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Procedure_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Procedure_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Procedure_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Procedure_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Procedure_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Procedure_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Procedure_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Procedure_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Procedure_tags(ctx, field)
			case "revision":
				return ec.fieldContext_Procedure_revision(ctx, field)
			case "ownerID":
				return ec.fieldContext_Procedure_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Procedure_name(ctx, field)
			case "status":
				return ec.fieldContext_Procedure_status(ctx, field)
			case "procedureType":
				return ec.fieldContext_Procedure_procedureType(ctx, field)
			case "details":
				return ec.fieldContext_Procedure_details(ctx, field)
			case "approvalRequired":
				return ec.fieldContext_Procedure_approvalRequired(ctx, field)
			case "reviewDue":
				return ec.fieldContext_Procedure_reviewDue(ctx, field)
			case "reviewFrequency":
				return ec.fieldContext_Procedure_reviewFrequency(ctx, field)
			case "approverID":
				return ec.fieldContext_Procedure_approverID(ctx, field)
			case "delegateID":
				return ec.fieldContext_Procedure_delegateID(ctx, field)
			case "owner":
				return ec.fieldContext_Procedure_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Procedure_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Procedure_editors(ctx, field)
			case "approver":
				return ec.fieldContext_Procedure_approver(ctx, field)
			case "delegate":
				return ec.fieldContext_Procedure_delegate(ctx, field)
			case "controls":
				return ec.fieldContext_Procedure_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Procedure_subcontrols(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Procedure_internalPolicies(ctx, field)
			case "programs":
				return ec.fieldContext_Procedure_programs(ctx, field)
			case "narratives":
				return ec.fieldContext_Procedure_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Procedure_risks(ctx, field)
			case "tasks":
				return ec.fieldContext_Procedure_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Procedure", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var procedureBulkCreatePayloadImplementors = []string{"ProcedureBulkCreatePayload"}

func (ec *executionContext) _ProcedureBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ProcedureBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcedureBulkCreatePayload")
		case "procedures":
			out.Values[i] = ec._ProcedureBulkCreatePayload_procedures(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var procedureCreatePayloadImplementors = []string{"ProcedureCreatePayload"}

func (ec *executionContext) _ProcedureCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ProcedureCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcedureCreatePayload")
		case "procedure":
			out.Values[i] = ec._ProcedureCreatePayload_procedure(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var procedureDeletePayloadImplementors = []string{"ProcedureDeletePayload"}

func (ec *executionContext) _ProcedureDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ProcedureDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcedureDeletePayload")
		case "deletedID":
			out.Values[i] = ec._ProcedureDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var procedureUpdatePayloadImplementors = []string{"ProcedureUpdatePayload"}

func (ec *executionContext) _ProcedureUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ProcedureUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcedureUpdatePayload")
		case "procedure":
			out.Values[i] = ec._ProcedureUpdatePayload_procedure(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNProcedureBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ProcedureBulkCreatePayload) graphql.Marshaler {
	return ec._ProcedureBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNProcedureBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ProcedureBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProcedureBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNProcedureCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ProcedureCreatePayload) graphql.Marshaler {
	return ec._ProcedureCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNProcedureCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ProcedureCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProcedureCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNProcedureDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.ProcedureDeletePayload) graphql.Marshaler {
	return ec._ProcedureDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNProcedureDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.ProcedureDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProcedureDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNProcedureUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.ProcedureUpdatePayload) graphql.Marshaler {
	return ec._ProcedureUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNProcedureUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ProcedureUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProcedureUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
