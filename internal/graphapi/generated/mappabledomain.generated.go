// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _MappableDomainBulkCreatePayload_mappableDomains(ctx context.Context, field graphql.CollectedField, obj *model.MappableDomainBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappableDomainBulkCreatePayload_mappableDomains,
		func(ctx context.Context) (any, error) {
			return obj.MappableDomains, nil
		},
		nil,
		ec.marshalOMappableDomain2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappableDomainᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MappableDomainBulkCreatePayload_mappableDomains(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappableDomainBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MappableDomain_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MappableDomain_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MappableDomain_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_MappableDomain_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_MappableDomain_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_MappableDomain_tags(ctx, field)
			case "name":
				return ec.fieldContext_MappableDomain_name(ctx, field)
			case "zoneID":
				return ec.fieldContext_MappableDomain_zoneID(ctx, field)
			case "customDomains":
				return ec.fieldContext_MappableDomain_customDomains(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappableDomain", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MappableDomainCreatePayload_mappableDomain(ctx context.Context, field graphql.CollectedField, obj *model.MappableDomainCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappableDomainCreatePayload_mappableDomain,
		func(ctx context.Context) (any, error) {
			return obj.MappableDomain, nil
		},
		nil,
		ec.marshalNMappableDomain2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappableDomain,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MappableDomainCreatePayload_mappableDomain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappableDomainCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MappableDomain_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MappableDomain_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MappableDomain_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_MappableDomain_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_MappableDomain_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_MappableDomain_tags(ctx, field)
			case "name":
				return ec.fieldContext_MappableDomain_name(ctx, field)
			case "zoneID":
				return ec.fieldContext_MappableDomain_zoneID(ctx, field)
			case "customDomains":
				return ec.fieldContext_MappableDomain_customDomains(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappableDomain", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MappableDomainDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.MappableDomainDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappableDomainDeletePayload_deletedID,
		func(ctx context.Context) (any, error) {
			return obj.DeletedID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MappableDomainDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappableDomainDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MappableDomainUpdatePayload_mappableDomain(ctx context.Context, field graphql.CollectedField, obj *model.MappableDomainUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MappableDomainUpdatePayload_mappableDomain,
		func(ctx context.Context) (any, error) {
			return obj.MappableDomain, nil
		},
		nil,
		ec.marshalNMappableDomain2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappableDomain,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MappableDomainUpdatePayload_mappableDomain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MappableDomainUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MappableDomain_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MappableDomain_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MappableDomain_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_MappableDomain_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_MappableDomain_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_MappableDomain_tags(ctx, field)
			case "name":
				return ec.fieldContext_MappableDomain_name(ctx, field)
			case "zoneID":
				return ec.fieldContext_MappableDomain_zoneID(ctx, field)
			case "customDomains":
				return ec.fieldContext_MappableDomain_customDomains(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappableDomain", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mappableDomainBulkCreatePayloadImplementors = []string{"MappableDomainBulkCreatePayload"}

func (ec *executionContext) _MappableDomainBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappableDomainBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappableDomainBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappableDomainBulkCreatePayload")
		case "mappableDomains":
			out.Values[i] = ec._MappableDomainBulkCreatePayload_mappableDomains(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mappableDomainCreatePayloadImplementors = []string{"MappableDomainCreatePayload"}

func (ec *executionContext) _MappableDomainCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappableDomainCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappableDomainCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappableDomainCreatePayload")
		case "mappableDomain":
			out.Values[i] = ec._MappableDomainCreatePayload_mappableDomain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mappableDomainDeletePayloadImplementors = []string{"MappableDomainDeletePayload"}

func (ec *executionContext) _MappableDomainDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappableDomainDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappableDomainDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappableDomainDeletePayload")
		case "deletedID":
			out.Values[i] = ec._MappableDomainDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mappableDomainUpdatePayloadImplementors = []string{"MappableDomainUpdatePayload"}

func (ec *executionContext) _MappableDomainUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.MappableDomainUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mappableDomainUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MappableDomainUpdatePayload")
		case "mappableDomain":
			out.Values[i] = ec._MappableDomainUpdatePayload_mappableDomain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNMappableDomainBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.MappableDomainBulkCreatePayload) graphql.Marshaler {
	return ec._MappableDomainBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappableDomainBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappableDomainBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappableDomainBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNMappableDomainCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.MappableDomainCreatePayload) graphql.Marshaler {
	return ec._MappableDomainCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappableDomainCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappableDomainCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappableDomainCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNMappableDomainDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.MappableDomainDeletePayload) graphql.Marshaler {
	return ec._MappableDomainDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappableDomainDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappableDomainDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappableDomainDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNMappableDomainUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.MappableDomainUpdatePayload) graphql.Marshaler {
	return ec._MappableDomainUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMappableDomainUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐMappableDomainUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.MappableDomainUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MappableDomainUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
