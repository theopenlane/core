// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _SubcontrolBulkCreatePayload_subcontrols(ctx context.Context, field graphql.CollectedField, obj *model.SubcontrolBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubcontrolBulkCreatePayload_subcontrols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcontrols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Subcontrol)
	fc.Result = res
	return ec.marshalOSubcontrol2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubcontrolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubcontrolBulkCreatePayload_subcontrols(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubcontrolBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Subcontrol_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Subcontrol_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Subcontrol_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Subcontrol_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Subcontrol_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Subcontrol_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Subcontrol_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Subcontrol_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Subcontrol_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Subcontrol_ownerID(ctx, field)
			case "description":
				return ec.fieldContext_Subcontrol_description(ctx, field)
			case "referenceID":
				return ec.fieldContext_Subcontrol_referenceID(ctx, field)
			case "auditorReferenceID":
				return ec.fieldContext_Subcontrol_auditorReferenceID(ctx, field)
			case "status":
				return ec.fieldContext_Subcontrol_status(ctx, field)
			case "source":
				return ec.fieldContext_Subcontrol_source(ctx, field)
			case "controlType":
				return ec.fieldContext_Subcontrol_controlType(ctx, field)
			case "category":
				return ec.fieldContext_Subcontrol_category(ctx, field)
			case "categoryID":
				return ec.fieldContext_Subcontrol_categoryID(ctx, field)
			case "subcategory":
				return ec.fieldContext_Subcontrol_subcategory(ctx, field)
			case "mappedCategories":
				return ec.fieldContext_Subcontrol_mappedCategories(ctx, field)
			case "assessmentObjectives":
				return ec.fieldContext_Subcontrol_assessmentObjectives(ctx, field)
			case "assessmentMethods":
				return ec.fieldContext_Subcontrol_assessmentMethods(ctx, field)
			case "controlQuestions":
				return ec.fieldContext_Subcontrol_controlQuestions(ctx, field)
			case "implementationGuidance":
				return ec.fieldContext_Subcontrol_implementationGuidance(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_Subcontrol_exampleEvidence(ctx, field)
			case "references":
				return ec.fieldContext_Subcontrol_references(ctx, field)
			case "refCode":
				return ec.fieldContext_Subcontrol_refCode(ctx, field)
			case "controlID":
				return ec.fieldContext_Subcontrol_controlID(ctx, field)
			case "owner":
				return ec.fieldContext_Subcontrol_owner(ctx, field)
			case "control":
				return ec.fieldContext_Subcontrol_control(ctx, field)
			case "mappedControls":
				return ec.fieldContext_Subcontrol_mappedControls(ctx, field)
			case "evidence":
				return ec.fieldContext_Subcontrol_evidence(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Subcontrol_controlObjectives(ctx, field)
			case "tasks":
				return ec.fieldContext_Subcontrol_tasks(ctx, field)
			case "narratives":
				return ec.fieldContext_Subcontrol_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Subcontrol_risks(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Subcontrol_actionPlans(ctx, field)
			case "procedures":
				return ec.fieldContext_Subcontrol_procedures(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Subcontrol_internalPolicies(ctx, field)
			case "controlOwner":
				return ec.fieldContext_Subcontrol_controlOwner(ctx, field)
			case "delegate":
				return ec.fieldContext_Subcontrol_delegate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Subcontrol", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubcontrolCreatePayload_subcontrol(ctx context.Context, field graphql.CollectedField, obj *model.SubcontrolCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubcontrolCreatePayload_subcontrol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcontrol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Subcontrol)
	fc.Result = res
	return ec.marshalNSubcontrol2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubcontrol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubcontrolCreatePayload_subcontrol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubcontrolCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Subcontrol_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Subcontrol_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Subcontrol_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Subcontrol_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Subcontrol_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Subcontrol_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Subcontrol_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Subcontrol_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Subcontrol_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Subcontrol_ownerID(ctx, field)
			case "description":
				return ec.fieldContext_Subcontrol_description(ctx, field)
			case "referenceID":
				return ec.fieldContext_Subcontrol_referenceID(ctx, field)
			case "auditorReferenceID":
				return ec.fieldContext_Subcontrol_auditorReferenceID(ctx, field)
			case "status":
				return ec.fieldContext_Subcontrol_status(ctx, field)
			case "source":
				return ec.fieldContext_Subcontrol_source(ctx, field)
			case "controlType":
				return ec.fieldContext_Subcontrol_controlType(ctx, field)
			case "category":
				return ec.fieldContext_Subcontrol_category(ctx, field)
			case "categoryID":
				return ec.fieldContext_Subcontrol_categoryID(ctx, field)
			case "subcategory":
				return ec.fieldContext_Subcontrol_subcategory(ctx, field)
			case "mappedCategories":
				return ec.fieldContext_Subcontrol_mappedCategories(ctx, field)
			case "assessmentObjectives":
				return ec.fieldContext_Subcontrol_assessmentObjectives(ctx, field)
			case "assessmentMethods":
				return ec.fieldContext_Subcontrol_assessmentMethods(ctx, field)
			case "controlQuestions":
				return ec.fieldContext_Subcontrol_controlQuestions(ctx, field)
			case "implementationGuidance":
				return ec.fieldContext_Subcontrol_implementationGuidance(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_Subcontrol_exampleEvidence(ctx, field)
			case "references":
				return ec.fieldContext_Subcontrol_references(ctx, field)
			case "refCode":
				return ec.fieldContext_Subcontrol_refCode(ctx, field)
			case "controlID":
				return ec.fieldContext_Subcontrol_controlID(ctx, field)
			case "owner":
				return ec.fieldContext_Subcontrol_owner(ctx, field)
			case "control":
				return ec.fieldContext_Subcontrol_control(ctx, field)
			case "mappedControls":
				return ec.fieldContext_Subcontrol_mappedControls(ctx, field)
			case "evidence":
				return ec.fieldContext_Subcontrol_evidence(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Subcontrol_controlObjectives(ctx, field)
			case "tasks":
				return ec.fieldContext_Subcontrol_tasks(ctx, field)
			case "narratives":
				return ec.fieldContext_Subcontrol_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Subcontrol_risks(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Subcontrol_actionPlans(ctx, field)
			case "procedures":
				return ec.fieldContext_Subcontrol_procedures(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Subcontrol_internalPolicies(ctx, field)
			case "controlOwner":
				return ec.fieldContext_Subcontrol_controlOwner(ctx, field)
			case "delegate":
				return ec.fieldContext_Subcontrol_delegate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Subcontrol", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubcontrolDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.SubcontrolDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubcontrolDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubcontrolDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubcontrolDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubcontrolUpdatePayload_subcontrol(ctx context.Context, field graphql.CollectedField, obj *model.SubcontrolUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubcontrolUpdatePayload_subcontrol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcontrol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Subcontrol)
	fc.Result = res
	return ec.marshalNSubcontrol2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubcontrol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubcontrolUpdatePayload_subcontrol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubcontrolUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Subcontrol_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Subcontrol_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Subcontrol_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Subcontrol_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Subcontrol_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Subcontrol_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Subcontrol_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Subcontrol_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Subcontrol_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Subcontrol_ownerID(ctx, field)
			case "description":
				return ec.fieldContext_Subcontrol_description(ctx, field)
			case "referenceID":
				return ec.fieldContext_Subcontrol_referenceID(ctx, field)
			case "auditorReferenceID":
				return ec.fieldContext_Subcontrol_auditorReferenceID(ctx, field)
			case "status":
				return ec.fieldContext_Subcontrol_status(ctx, field)
			case "source":
				return ec.fieldContext_Subcontrol_source(ctx, field)
			case "controlType":
				return ec.fieldContext_Subcontrol_controlType(ctx, field)
			case "category":
				return ec.fieldContext_Subcontrol_category(ctx, field)
			case "categoryID":
				return ec.fieldContext_Subcontrol_categoryID(ctx, field)
			case "subcategory":
				return ec.fieldContext_Subcontrol_subcategory(ctx, field)
			case "mappedCategories":
				return ec.fieldContext_Subcontrol_mappedCategories(ctx, field)
			case "assessmentObjectives":
				return ec.fieldContext_Subcontrol_assessmentObjectives(ctx, field)
			case "assessmentMethods":
				return ec.fieldContext_Subcontrol_assessmentMethods(ctx, field)
			case "controlQuestions":
				return ec.fieldContext_Subcontrol_controlQuestions(ctx, field)
			case "implementationGuidance":
				return ec.fieldContext_Subcontrol_implementationGuidance(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_Subcontrol_exampleEvidence(ctx, field)
			case "references":
				return ec.fieldContext_Subcontrol_references(ctx, field)
			case "refCode":
				return ec.fieldContext_Subcontrol_refCode(ctx, field)
			case "controlID":
				return ec.fieldContext_Subcontrol_controlID(ctx, field)
			case "owner":
				return ec.fieldContext_Subcontrol_owner(ctx, field)
			case "control":
				return ec.fieldContext_Subcontrol_control(ctx, field)
			case "mappedControls":
				return ec.fieldContext_Subcontrol_mappedControls(ctx, field)
			case "evidence":
				return ec.fieldContext_Subcontrol_evidence(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Subcontrol_controlObjectives(ctx, field)
			case "tasks":
				return ec.fieldContext_Subcontrol_tasks(ctx, field)
			case "narratives":
				return ec.fieldContext_Subcontrol_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Subcontrol_risks(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Subcontrol_actionPlans(ctx, field)
			case "procedures":
				return ec.fieldContext_Subcontrol_procedures(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Subcontrol_internalPolicies(ctx, field)
			case "controlOwner":
				return ec.fieldContext_Subcontrol_controlOwner(ctx, field)
			case "delegate":
				return ec.fieldContext_Subcontrol_delegate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Subcontrol", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var subcontrolBulkCreatePayloadImplementors = []string{"SubcontrolBulkCreatePayload"}

func (ec *executionContext) _SubcontrolBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.SubcontrolBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subcontrolBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubcontrolBulkCreatePayload")
		case "subcontrols":
			out.Values[i] = ec._SubcontrolBulkCreatePayload_subcontrols(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subcontrolCreatePayloadImplementors = []string{"SubcontrolCreatePayload"}

func (ec *executionContext) _SubcontrolCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.SubcontrolCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subcontrolCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubcontrolCreatePayload")
		case "subcontrol":
			out.Values[i] = ec._SubcontrolCreatePayload_subcontrol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subcontrolDeletePayloadImplementors = []string{"SubcontrolDeletePayload"}

func (ec *executionContext) _SubcontrolDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.SubcontrolDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subcontrolDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubcontrolDeletePayload")
		case "deletedID":
			out.Values[i] = ec._SubcontrolDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subcontrolUpdatePayloadImplementors = []string{"SubcontrolUpdatePayload"}

func (ec *executionContext) _SubcontrolUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.SubcontrolUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subcontrolUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubcontrolUpdatePayload")
		case "subcontrol":
			out.Values[i] = ec._SubcontrolUpdatePayload_subcontrol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNSubcontrolBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.SubcontrolBulkCreatePayload) graphql.Marshaler {
	return ec._SubcontrolBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubcontrolBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.SubcontrolBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubcontrolBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSubcontrolCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.SubcontrolCreatePayload) graphql.Marshaler {
	return ec._SubcontrolCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubcontrolCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.SubcontrolCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubcontrolCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSubcontrolDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.SubcontrolDeletePayload) graphql.Marshaler {
	return ec._SubcontrolDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubcontrolDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.SubcontrolDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubcontrolDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSubcontrolUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.SubcontrolUpdatePayload) graphql.Marshaler {
	return ec._SubcontrolUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubcontrolUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.SubcontrolUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubcontrolUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
