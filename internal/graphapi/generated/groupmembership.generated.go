// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _GroupMembershipBulkCreatePayload_groupMemberships(ctx context.Context, field graphql.CollectedField, obj *model.GroupMembershipBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupMembershipBulkCreatePayload_groupMemberships(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupMemberships, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.GroupMembership)
	fc.Result = res
	return ec.marshalOGroupMembership2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroupMembershipᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupMembershipBulkCreatePayload_groupMemberships(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupMembershipBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GroupMembership_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_GroupMembership_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GroupMembership_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GroupMembership_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GroupMembership_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_GroupMembership_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_GroupMembership_deletedBy(ctx, field)
			case "role":
				return ec.fieldContext_GroupMembership_role(ctx, field)
			case "groupID":
				return ec.fieldContext_GroupMembership_groupID(ctx, field)
			case "userID":
				return ec.fieldContext_GroupMembership_userID(ctx, field)
			case "group":
				return ec.fieldContext_GroupMembership_group(ctx, field)
			case "user":
				return ec.fieldContext_GroupMembership_user(ctx, field)
			case "events":
				return ec.fieldContext_GroupMembership_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GroupMembership", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GroupMembershipCreatePayload_groupMembership(ctx context.Context, field graphql.CollectedField, obj *model.GroupMembershipCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupMembershipCreatePayload_groupMembership(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupMembership, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.GroupMembership)
	fc.Result = res
	return ec.marshalNGroupMembership2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroupMembership(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupMembershipCreatePayload_groupMembership(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupMembershipCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GroupMembership_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_GroupMembership_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GroupMembership_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GroupMembership_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GroupMembership_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_GroupMembership_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_GroupMembership_deletedBy(ctx, field)
			case "role":
				return ec.fieldContext_GroupMembership_role(ctx, field)
			case "groupID":
				return ec.fieldContext_GroupMembership_groupID(ctx, field)
			case "userID":
				return ec.fieldContext_GroupMembership_userID(ctx, field)
			case "group":
				return ec.fieldContext_GroupMembership_group(ctx, field)
			case "user":
				return ec.fieldContext_GroupMembership_user(ctx, field)
			case "events":
				return ec.fieldContext_GroupMembership_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GroupMembership", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GroupMembershipDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.GroupMembershipDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupMembershipDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupMembershipDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupMembershipDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GroupMembershipUpdatePayload_groupMembership(ctx context.Context, field graphql.CollectedField, obj *model.GroupMembershipUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupMembershipUpdatePayload_groupMembership(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupMembership, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.GroupMembership)
	fc.Result = res
	return ec.marshalNGroupMembership2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroupMembership(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupMembershipUpdatePayload_groupMembership(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupMembershipUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GroupMembership_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_GroupMembership_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GroupMembership_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GroupMembership_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GroupMembership_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_GroupMembership_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_GroupMembership_deletedBy(ctx, field)
			case "role":
				return ec.fieldContext_GroupMembership_role(ctx, field)
			case "groupID":
				return ec.fieldContext_GroupMembership_groupID(ctx, field)
			case "userID":
				return ec.fieldContext_GroupMembership_userID(ctx, field)
			case "group":
				return ec.fieldContext_GroupMembership_group(ctx, field)
			case "user":
				return ec.fieldContext_GroupMembership_user(ctx, field)
			case "events":
				return ec.fieldContext_GroupMembership_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GroupMembership", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var groupMembershipBulkCreatePayloadImplementors = []string{"GroupMembershipBulkCreatePayload"}

func (ec *executionContext) _GroupMembershipBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupMembershipBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupMembershipBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupMembershipBulkCreatePayload")
		case "groupMemberships":
			out.Values[i] = ec._GroupMembershipBulkCreatePayload_groupMemberships(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var groupMembershipCreatePayloadImplementors = []string{"GroupMembershipCreatePayload"}

func (ec *executionContext) _GroupMembershipCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupMembershipCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupMembershipCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupMembershipCreatePayload")
		case "groupMembership":
			out.Values[i] = ec._GroupMembershipCreatePayload_groupMembership(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var groupMembershipDeletePayloadImplementors = []string{"GroupMembershipDeletePayload"}

func (ec *executionContext) _GroupMembershipDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupMembershipDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupMembershipDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupMembershipDeletePayload")
		case "deletedID":
			out.Values[i] = ec._GroupMembershipDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var groupMembershipUpdatePayloadImplementors = []string{"GroupMembershipUpdatePayload"}

func (ec *executionContext) _GroupMembershipUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupMembershipUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupMembershipUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupMembershipUpdatePayload")
		case "groupMembership":
			out.Values[i] = ec._GroupMembershipUpdatePayload_groupMembership(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNGroupMembershipBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupMembershipBulkCreatePayload) graphql.Marshaler {
	return ec._GroupMembershipBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupMembershipBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupMembershipBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupMembershipBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNGroupMembershipCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupMembershipCreatePayload) graphql.Marshaler {
	return ec._GroupMembershipCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupMembershipCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupMembershipCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupMembershipCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNGroupMembershipDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupMembershipDeletePayload) graphql.Marshaler {
	return ec._GroupMembershipDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupMembershipDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupMembershipDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupMembershipDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNGroupMembershipUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupMembershipUpdatePayload) graphql.Marshaler {
	return ec._GroupMembershipUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupMembershipUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupMembershipUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupMembershipUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupMembershipUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
