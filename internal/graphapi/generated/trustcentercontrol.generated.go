// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TrustCenterControlBulkCreatePayload_trustCenterControls(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterControlBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterControlBulkCreatePayload_trustCenterControls,
		func(ctx context.Context) (any, error) { return obj.TrustCenterControls, nil },
		nil,
		ec.marshalOTrustCenterControl2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterControlᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TrustCenterControlBulkCreatePayload_trustCenterControls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterControlBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterControl_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterControl_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterControl_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterControl_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterControl_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenterControl_tags(ctx, field)
			case "controlID":
				return ec.fieldContext_TrustCenterControl_controlID(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterControl_trustCenterID(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterControl_trustCenter(ctx, field)
			case "control":
				return ec.fieldContext_TrustCenterControl_control(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterControl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterControlCreatePayload_trustCenterControl(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterControlCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterControlCreatePayload_trustCenterControl,
		func(ctx context.Context) (any, error) { return obj.TrustCenterControl, nil },
		nil,
		ec.marshalNTrustCenterControl2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterControl,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterControlCreatePayload_trustCenterControl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterControlCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterControl_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterControl_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterControl_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterControl_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterControl_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenterControl_tags(ctx, field)
			case "controlID":
				return ec.fieldContext_TrustCenterControl_controlID(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterControl_trustCenterID(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterControl_trustCenter(ctx, field)
			case "control":
				return ec.fieldContext_TrustCenterControl_control(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterControl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterControlDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterControlDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterControlDeletePayload_deletedID,
		func(ctx context.Context) (any, error) { return obj.DeletedID, nil },
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterControlDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterControlDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterControlUpdatePayload_trustCenterControl(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterControlUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterControlUpdatePayload_trustCenterControl,
		func(ctx context.Context) (any, error) { return obj.TrustCenterControl, nil },
		nil,
		ec.marshalNTrustCenterControl2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterControl,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterControlUpdatePayload_trustCenterControl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterControlUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterControl_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterControl_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterControl_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterControl_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterControl_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenterControl_tags(ctx, field)
			case "controlID":
				return ec.fieldContext_TrustCenterControl_controlID(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterControl_trustCenterID(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterControl_trustCenter(ctx, field)
			case "control":
				return ec.fieldContext_TrustCenterControl_control(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterControl", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var trustCenterControlBulkCreatePayloadImplementors = []string{"TrustCenterControlBulkCreatePayload"}

func (ec *executionContext) _TrustCenterControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterControlBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterControlBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterControlBulkCreatePayload")
		case "trustCenterControls":
			out.Values[i] = ec._TrustCenterControlBulkCreatePayload_trustCenterControls(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterControlCreatePayloadImplementors = []string{"TrustCenterControlCreatePayload"}

func (ec *executionContext) _TrustCenterControlCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterControlCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterControlCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterControlCreatePayload")
		case "trustCenterControl":
			out.Values[i] = ec._TrustCenterControlCreatePayload_trustCenterControl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterControlDeletePayloadImplementors = []string{"TrustCenterControlDeletePayload"}

func (ec *executionContext) _TrustCenterControlDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterControlDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterControlDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterControlDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TrustCenterControlDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterControlUpdatePayloadImplementors = []string{"TrustCenterControlUpdatePayload"}

func (ec *executionContext) _TrustCenterControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterControlUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterControlUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterControlUpdatePayload")
		case "trustCenterControl":
			out.Values[i] = ec._TrustCenterControlUpdatePayload_trustCenterControl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTrustCenterControlBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterControlBulkCreatePayload) graphql.Marshaler {
	return ec._TrustCenterControlBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterControlBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterControlBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterControlBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterControlCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterControlCreatePayload) graphql.Marshaler {
	return ec._TrustCenterControlCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterControlCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterControlCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterControlCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterControlDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterControlDeletePayload) graphql.Marshaler {
	return ec._TrustCenterControlDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterControlDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterControlDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterControlDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterControlUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterControlUpdatePayload) graphql.Marshaler {
	return ec._TrustCenterControlUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterControlUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterControlUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterControlUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterControlUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
