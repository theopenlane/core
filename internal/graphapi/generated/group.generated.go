// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _GroupBulkCreatePayload_groups(ctx context.Context, field graphql.CollectedField, obj *model.GroupBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupBulkCreatePayload_groups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Group)
	fc.Result = res
	return ec.marshalOGroup2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupBulkCreatePayload_groups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Group_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Group_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Group_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Group_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Group_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Group_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Group_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Group_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Group_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Group_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Group_name(ctx, field)
			case "description":
				return ec.fieldContext_Group_description(ctx, field)
			case "isManaged":
				return ec.fieldContext_Group_isManaged(ctx, field)
			case "gravatarLogoURL":
				return ec.fieldContext_Group_gravatarLogoURL(ctx, field)
			case "logoURL":
				return ec.fieldContext_Group_logoURL(ctx, field)
			case "displayName":
				return ec.fieldContext_Group_displayName(ctx, field)
			case "owner":
				return ec.fieldContext_Group_owner(ctx, field)
			case "procedureEditors":
				return ec.fieldContext_Group_procedureEditors(ctx, field)
			case "procedureBlockedGroups":
				return ec.fieldContext_Group_procedureBlockedGroups(ctx, field)
			case "internalPolicyEditors":
				return ec.fieldContext_Group_internalPolicyEditors(ctx, field)
			case "internalPolicyBlockedGroups":
				return ec.fieldContext_Group_internalPolicyBlockedGroups(ctx, field)
			case "programEditors":
				return ec.fieldContext_Group_programEditors(ctx, field)
			case "programBlockedGroups":
				return ec.fieldContext_Group_programBlockedGroups(ctx, field)
			case "programViewers":
				return ec.fieldContext_Group_programViewers(ctx, field)
			case "riskEditors":
				return ec.fieldContext_Group_riskEditors(ctx, field)
			case "riskBlockedGroups":
				return ec.fieldContext_Group_riskBlockedGroups(ctx, field)
			case "riskViewers":
				return ec.fieldContext_Group_riskViewers(ctx, field)
			case "controlObjectiveEditors":
				return ec.fieldContext_Group_controlObjectiveEditors(ctx, field)
			case "controlObjectiveBlockedGroups":
				return ec.fieldContext_Group_controlObjectiveBlockedGroups(ctx, field)
			case "controlObjectiveViewers":
				return ec.fieldContext_Group_controlObjectiveViewers(ctx, field)
			case "controlEditors":
				return ec.fieldContext_Group_controlEditors(ctx, field)
			case "controlBlockedGroups":
				return ec.fieldContext_Group_controlBlockedGroups(ctx, field)
			case "controlViewers":
				return ec.fieldContext_Group_controlViewers(ctx, field)
			case "narrativeEditors":
				return ec.fieldContext_Group_narrativeEditors(ctx, field)
			case "narrativeBlockedGroups":
				return ec.fieldContext_Group_narrativeBlockedGroups(ctx, field)
			case "narrativeViewers":
				return ec.fieldContext_Group_narrativeViewers(ctx, field)
			case "setting":
				return ec.fieldContext_Group_setting(ctx, field)
			case "users":
				return ec.fieldContext_Group_users(ctx, field)
			case "events":
				return ec.fieldContext_Group_events(ctx, field)
			case "integrations":
				return ec.fieldContext_Group_integrations(ctx, field)
			case "files":
				return ec.fieldContext_Group_files(ctx, field)
			case "tasks":
				return ec.fieldContext_Group_tasks(ctx, field)
			case "members":
				return ec.fieldContext_Group_members(ctx, field)
			case "permissions":
				return ec.fieldContext_Group_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Group", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GroupCreatePayload_group(ctx context.Context, field graphql.CollectedField, obj *model.GroupCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupCreatePayload_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Group)
	fc.Result = res
	return ec.marshalNGroup2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupCreatePayload_group(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Group_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Group_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Group_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Group_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Group_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Group_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Group_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Group_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Group_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Group_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Group_name(ctx, field)
			case "description":
				return ec.fieldContext_Group_description(ctx, field)
			case "isManaged":
				return ec.fieldContext_Group_isManaged(ctx, field)
			case "gravatarLogoURL":
				return ec.fieldContext_Group_gravatarLogoURL(ctx, field)
			case "logoURL":
				return ec.fieldContext_Group_logoURL(ctx, field)
			case "displayName":
				return ec.fieldContext_Group_displayName(ctx, field)
			case "owner":
				return ec.fieldContext_Group_owner(ctx, field)
			case "procedureEditors":
				return ec.fieldContext_Group_procedureEditors(ctx, field)
			case "procedureBlockedGroups":
				return ec.fieldContext_Group_procedureBlockedGroups(ctx, field)
			case "internalPolicyEditors":
				return ec.fieldContext_Group_internalPolicyEditors(ctx, field)
			case "internalPolicyBlockedGroups":
				return ec.fieldContext_Group_internalPolicyBlockedGroups(ctx, field)
			case "programEditors":
				return ec.fieldContext_Group_programEditors(ctx, field)
			case "programBlockedGroups":
				return ec.fieldContext_Group_programBlockedGroups(ctx, field)
			case "programViewers":
				return ec.fieldContext_Group_programViewers(ctx, field)
			case "riskEditors":
				return ec.fieldContext_Group_riskEditors(ctx, field)
			case "riskBlockedGroups":
				return ec.fieldContext_Group_riskBlockedGroups(ctx, field)
			case "riskViewers":
				return ec.fieldContext_Group_riskViewers(ctx, field)
			case "controlObjectiveEditors":
				return ec.fieldContext_Group_controlObjectiveEditors(ctx, field)
			case "controlObjectiveBlockedGroups":
				return ec.fieldContext_Group_controlObjectiveBlockedGroups(ctx, field)
			case "controlObjectiveViewers":
				return ec.fieldContext_Group_controlObjectiveViewers(ctx, field)
			case "controlEditors":
				return ec.fieldContext_Group_controlEditors(ctx, field)
			case "controlBlockedGroups":
				return ec.fieldContext_Group_controlBlockedGroups(ctx, field)
			case "controlViewers":
				return ec.fieldContext_Group_controlViewers(ctx, field)
			case "narrativeEditors":
				return ec.fieldContext_Group_narrativeEditors(ctx, field)
			case "narrativeBlockedGroups":
				return ec.fieldContext_Group_narrativeBlockedGroups(ctx, field)
			case "narrativeViewers":
				return ec.fieldContext_Group_narrativeViewers(ctx, field)
			case "setting":
				return ec.fieldContext_Group_setting(ctx, field)
			case "users":
				return ec.fieldContext_Group_users(ctx, field)
			case "events":
				return ec.fieldContext_Group_events(ctx, field)
			case "integrations":
				return ec.fieldContext_Group_integrations(ctx, field)
			case "files":
				return ec.fieldContext_Group_files(ctx, field)
			case "tasks":
				return ec.fieldContext_Group_tasks(ctx, field)
			case "members":
				return ec.fieldContext_Group_members(ctx, field)
			case "permissions":
				return ec.fieldContext_Group_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Group", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GroupDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.GroupDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GroupUpdatePayload_group(ctx context.Context, field graphql.CollectedField, obj *model.GroupUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupUpdatePayload_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Group)
	fc.Result = res
	return ec.marshalNGroup2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupUpdatePayload_group(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Group_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Group_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Group_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Group_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Group_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Group_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Group_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Group_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Group_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Group_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Group_name(ctx, field)
			case "description":
				return ec.fieldContext_Group_description(ctx, field)
			case "isManaged":
				return ec.fieldContext_Group_isManaged(ctx, field)
			case "gravatarLogoURL":
				return ec.fieldContext_Group_gravatarLogoURL(ctx, field)
			case "logoURL":
				return ec.fieldContext_Group_logoURL(ctx, field)
			case "displayName":
				return ec.fieldContext_Group_displayName(ctx, field)
			case "owner":
				return ec.fieldContext_Group_owner(ctx, field)
			case "procedureEditors":
				return ec.fieldContext_Group_procedureEditors(ctx, field)
			case "procedureBlockedGroups":
				return ec.fieldContext_Group_procedureBlockedGroups(ctx, field)
			case "internalPolicyEditors":
				return ec.fieldContext_Group_internalPolicyEditors(ctx, field)
			case "internalPolicyBlockedGroups":
				return ec.fieldContext_Group_internalPolicyBlockedGroups(ctx, field)
			case "programEditors":
				return ec.fieldContext_Group_programEditors(ctx, field)
			case "programBlockedGroups":
				return ec.fieldContext_Group_programBlockedGroups(ctx, field)
			case "programViewers":
				return ec.fieldContext_Group_programViewers(ctx, field)
			case "riskEditors":
				return ec.fieldContext_Group_riskEditors(ctx, field)
			case "riskBlockedGroups":
				return ec.fieldContext_Group_riskBlockedGroups(ctx, field)
			case "riskViewers":
				return ec.fieldContext_Group_riskViewers(ctx, field)
			case "controlObjectiveEditors":
				return ec.fieldContext_Group_controlObjectiveEditors(ctx, field)
			case "controlObjectiveBlockedGroups":
				return ec.fieldContext_Group_controlObjectiveBlockedGroups(ctx, field)
			case "controlObjectiveViewers":
				return ec.fieldContext_Group_controlObjectiveViewers(ctx, field)
			case "controlEditors":
				return ec.fieldContext_Group_controlEditors(ctx, field)
			case "controlBlockedGroups":
				return ec.fieldContext_Group_controlBlockedGroups(ctx, field)
			case "controlViewers":
				return ec.fieldContext_Group_controlViewers(ctx, field)
			case "narrativeEditors":
				return ec.fieldContext_Group_narrativeEditors(ctx, field)
			case "narrativeBlockedGroups":
				return ec.fieldContext_Group_narrativeBlockedGroups(ctx, field)
			case "narrativeViewers":
				return ec.fieldContext_Group_narrativeViewers(ctx, field)
			case "setting":
				return ec.fieldContext_Group_setting(ctx, field)
			case "users":
				return ec.fieldContext_Group_users(ctx, field)
			case "events":
				return ec.fieldContext_Group_events(ctx, field)
			case "integrations":
				return ec.fieldContext_Group_integrations(ctx, field)
			case "files":
				return ec.fieldContext_Group_files(ctx, field)
			case "tasks":
				return ec.fieldContext_Group_tasks(ctx, field)
			case "members":
				return ec.fieldContext_Group_members(ctx, field)
			case "permissions":
				return ec.fieldContext_Group_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Group", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var groupBulkCreatePayloadImplementors = []string{"GroupBulkCreatePayload"}

func (ec *executionContext) _GroupBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupBulkCreatePayload")
		case "groups":
			out.Values[i] = ec._GroupBulkCreatePayload_groups(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var groupCreatePayloadImplementors = []string{"GroupCreatePayload"}

func (ec *executionContext) _GroupCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupCreatePayload")
		case "group":
			out.Values[i] = ec._GroupCreatePayload_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var groupDeletePayloadImplementors = []string{"GroupDeletePayload"}

func (ec *executionContext) _GroupDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupDeletePayload")
		case "deletedID":
			out.Values[i] = ec._GroupDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var groupUpdatePayloadImplementors = []string{"GroupUpdatePayload"}

func (ec *executionContext) _GroupUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.GroupUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupUpdatePayload")
		case "group":
			out.Values[i] = ec._GroupUpdatePayload_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNGroupBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupBulkCreatePayload) graphql.Marshaler {
	return ec._GroupBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNGroupCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupCreatePayload) graphql.Marshaler {
	return ec._GroupCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNGroupDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupDeletePayload) graphql.Marshaler {
	return ec._GroupDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNGroupUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.GroupUpdatePayload) graphql.Marshaler {
	return ec._GroupUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNGroupUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.GroupUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GroupUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
