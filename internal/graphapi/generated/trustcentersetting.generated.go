// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TrustCenterSettingBulkCreatePayload_trustCenterSettings(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterSettingBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterSettingBulkCreatePayload_trustCenterSettings,
		func(ctx context.Context) (any, error) { return obj.TrustCenterSettings, nil },
		nil,
		ec.marshalOTrustCenterSetting2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterSettingᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TrustCenterSettingBulkCreatePayload_trustCenterSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterSettingBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterSetting_updatedBy(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterSetting_trustCenterID(ctx, field)
			case "title":
				return ec.fieldContext_TrustCenterSetting_title(ctx, field)
			case "overview":
				return ec.fieldContext_TrustCenterSetting_overview(ctx, field)
			case "logoRemoteURL":
				return ec.fieldContext_TrustCenterSetting_logoRemoteURL(ctx, field)
			case "logoLocalFileID":
				return ec.fieldContext_TrustCenterSetting_logoLocalFileID(ctx, field)
			case "faviconRemoteURL":
				return ec.fieldContext_TrustCenterSetting_faviconRemoteURL(ctx, field)
			case "faviconLocalFileID":
				return ec.fieldContext_TrustCenterSetting_faviconLocalFileID(ctx, field)
			case "themeMode":
				return ec.fieldContext_TrustCenterSetting_themeMode(ctx, field)
			case "primaryColor":
				return ec.fieldContext_TrustCenterSetting_primaryColor(ctx, field)
			case "font":
				return ec.fieldContext_TrustCenterSetting_font(ctx, field)
			case "foregroundColor":
				return ec.fieldContext_TrustCenterSetting_foregroundColor(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_TrustCenterSetting_backgroundColor(ctx, field)
			case "accentColor":
				return ec.fieldContext_TrustCenterSetting_accentColor(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterSetting_trustCenter(ctx, field)
			case "files":
				return ec.fieldContext_TrustCenterSetting_files(ctx, field)
			case "logoFile":
				return ec.fieldContext_TrustCenterSetting_logoFile(ctx, field)
			case "faviconFile":
				return ec.fieldContext_TrustCenterSetting_faviconFile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterSettingCreatePayload_trustCenterSetting(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterSettingCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterSettingCreatePayload_trustCenterSetting,
		func(ctx context.Context) (any, error) { return obj.TrustCenterSetting, nil },
		nil,
		ec.marshalNTrustCenterSetting2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterSetting,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterSettingCreatePayload_trustCenterSetting(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterSettingCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterSetting_updatedBy(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterSetting_trustCenterID(ctx, field)
			case "title":
				return ec.fieldContext_TrustCenterSetting_title(ctx, field)
			case "overview":
				return ec.fieldContext_TrustCenterSetting_overview(ctx, field)
			case "logoRemoteURL":
				return ec.fieldContext_TrustCenterSetting_logoRemoteURL(ctx, field)
			case "logoLocalFileID":
				return ec.fieldContext_TrustCenterSetting_logoLocalFileID(ctx, field)
			case "faviconRemoteURL":
				return ec.fieldContext_TrustCenterSetting_faviconRemoteURL(ctx, field)
			case "faviconLocalFileID":
				return ec.fieldContext_TrustCenterSetting_faviconLocalFileID(ctx, field)
			case "themeMode":
				return ec.fieldContext_TrustCenterSetting_themeMode(ctx, field)
			case "primaryColor":
				return ec.fieldContext_TrustCenterSetting_primaryColor(ctx, field)
			case "font":
				return ec.fieldContext_TrustCenterSetting_font(ctx, field)
			case "foregroundColor":
				return ec.fieldContext_TrustCenterSetting_foregroundColor(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_TrustCenterSetting_backgroundColor(ctx, field)
			case "accentColor":
				return ec.fieldContext_TrustCenterSetting_accentColor(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterSetting_trustCenter(ctx, field)
			case "files":
				return ec.fieldContext_TrustCenterSetting_files(ctx, field)
			case "logoFile":
				return ec.fieldContext_TrustCenterSetting_logoFile(ctx, field)
			case "faviconFile":
				return ec.fieldContext_TrustCenterSetting_faviconFile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterSettingDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterSettingDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterSettingDeletePayload_deletedID,
		func(ctx context.Context) (any, error) { return obj.DeletedID, nil },
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterSettingDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterSettingDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterSettingUpdatePayload_trustCenterSetting(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterSettingUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterSettingUpdatePayload_trustCenterSetting,
		func(ctx context.Context) (any, error) { return obj.TrustCenterSetting, nil },
		nil,
		ec.marshalNTrustCenterSetting2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterSetting,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterSettingUpdatePayload_trustCenterSetting(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterSettingUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterSetting_updatedBy(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterSetting_trustCenterID(ctx, field)
			case "title":
				return ec.fieldContext_TrustCenterSetting_title(ctx, field)
			case "overview":
				return ec.fieldContext_TrustCenterSetting_overview(ctx, field)
			case "logoRemoteURL":
				return ec.fieldContext_TrustCenterSetting_logoRemoteURL(ctx, field)
			case "logoLocalFileID":
				return ec.fieldContext_TrustCenterSetting_logoLocalFileID(ctx, field)
			case "faviconRemoteURL":
				return ec.fieldContext_TrustCenterSetting_faviconRemoteURL(ctx, field)
			case "faviconLocalFileID":
				return ec.fieldContext_TrustCenterSetting_faviconLocalFileID(ctx, field)
			case "themeMode":
				return ec.fieldContext_TrustCenterSetting_themeMode(ctx, field)
			case "primaryColor":
				return ec.fieldContext_TrustCenterSetting_primaryColor(ctx, field)
			case "font":
				return ec.fieldContext_TrustCenterSetting_font(ctx, field)
			case "foregroundColor":
				return ec.fieldContext_TrustCenterSetting_foregroundColor(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_TrustCenterSetting_backgroundColor(ctx, field)
			case "accentColor":
				return ec.fieldContext_TrustCenterSetting_accentColor(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterSetting_trustCenter(ctx, field)
			case "files":
				return ec.fieldContext_TrustCenterSetting_files(ctx, field)
			case "logoFile":
				return ec.fieldContext_TrustCenterSetting_logoFile(ctx, field)
			case "faviconFile":
				return ec.fieldContext_TrustCenterSetting_faviconFile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterSetting", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var trustCenterSettingBulkCreatePayloadImplementors = []string{"TrustCenterSettingBulkCreatePayload"}

func (ec *executionContext) _TrustCenterSettingBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterSettingBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterSettingBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterSettingBulkCreatePayload")
		case "trustCenterSettings":
			out.Values[i] = ec._TrustCenterSettingBulkCreatePayload_trustCenterSettings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterSettingCreatePayloadImplementors = []string{"TrustCenterSettingCreatePayload"}

func (ec *executionContext) _TrustCenterSettingCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterSettingCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterSettingCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterSettingCreatePayload")
		case "trustCenterSetting":
			out.Values[i] = ec._TrustCenterSettingCreatePayload_trustCenterSetting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterSettingDeletePayloadImplementors = []string{"TrustCenterSettingDeletePayload"}

func (ec *executionContext) _TrustCenterSettingDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterSettingDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterSettingDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterSettingDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TrustCenterSettingDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterSettingUpdatePayloadImplementors = []string{"TrustCenterSettingUpdatePayload"}

func (ec *executionContext) _TrustCenterSettingUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterSettingUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterSettingUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterSettingUpdatePayload")
		case "trustCenterSetting":
			out.Values[i] = ec._TrustCenterSettingUpdatePayload_trustCenterSetting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTrustCenterSettingCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterSettingCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterSettingCreatePayload) graphql.Marshaler {
	return ec._TrustCenterSettingCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterSettingCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterSettingCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterSettingCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterSettingCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterSettingDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterSettingDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterSettingDeletePayload) graphql.Marshaler {
	return ec._TrustCenterSettingDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterSettingDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterSettingDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterSettingDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterSettingDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterSettingUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterSettingUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterSettingUpdatePayload) graphql.Marshaler {
	return ec._TrustCenterSettingUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterSettingUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterSettingUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterSettingUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterSettingUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
