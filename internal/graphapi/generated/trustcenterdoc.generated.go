// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TrustCenterDocBulkCreatePayload_trustCenterDocs(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterDocBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterDocBulkCreatePayload_trustCenterDocs,
		func(ctx context.Context) (any, error) { return obj.TrustCenterDocs, nil },
		nil,
		ec.marshalOTrustCenterDoc2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterDocᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TrustCenterDocBulkCreatePayload_trustCenterDocs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterDocBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterDoc_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterDoc_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterDoc_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterDoc_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterDoc_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenterDoc_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterDoc", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterDocCreatePayload_trustCenterDoc(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterDocCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterDocCreatePayload_trustCenterDoc,
		func(ctx context.Context) (any, error) { return obj.TrustCenterDoc, nil },
		nil,
		ec.marshalNTrustCenterDoc2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterDoc,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterDocCreatePayload_trustCenterDoc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterDocCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterDoc_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterDoc_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterDoc_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterDoc_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterDoc_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenterDoc_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterDoc", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterDocDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterDocDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterDocDeletePayload_deletedID,
		func(ctx context.Context) (any, error) { return obj.DeletedID, nil },
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterDocDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterDocDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterDocUpdatePayload_trustCenterDoc(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterDocUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterDocUpdatePayload_trustCenterDoc,
		func(ctx context.Context) (any, error) { return obj.TrustCenterDoc, nil },
		nil,
		ec.marshalNTrustCenterDoc2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterDoc,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterDocUpdatePayload_trustCenterDoc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterDocUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterDoc_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterDoc_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterDoc_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterDoc_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterDoc_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TrustCenterDoc_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterDoc", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var trustCenterDocBulkCreatePayloadImplementors = []string{"TrustCenterDocBulkCreatePayload"}

func (ec *executionContext) _TrustCenterDocBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterDocBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterDocBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterDocBulkCreatePayload")
		case "trustCenterDocs":
			out.Values[i] = ec._TrustCenterDocBulkCreatePayload_trustCenterDocs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterDocCreatePayloadImplementors = []string{"TrustCenterDocCreatePayload"}

func (ec *executionContext) _TrustCenterDocCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterDocCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterDocCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterDocCreatePayload")
		case "trustCenterDoc":
			out.Values[i] = ec._TrustCenterDocCreatePayload_trustCenterDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterDocDeletePayloadImplementors = []string{"TrustCenterDocDeletePayload"}

func (ec *executionContext) _TrustCenterDocDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterDocDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterDocDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterDocDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TrustCenterDocDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterDocUpdatePayloadImplementors = []string{"TrustCenterDocUpdatePayload"}

func (ec *executionContext) _TrustCenterDocUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterDocUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterDocUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterDocUpdatePayload")
		case "trustCenterDoc":
			out.Values[i] = ec._TrustCenterDocUpdatePayload_trustCenterDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTrustCenterDocBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterDocBulkCreatePayload) graphql.Marshaler {
	return ec._TrustCenterDocBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterDocBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterDocBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterDocBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterDocCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterDocCreatePayload) graphql.Marshaler {
	return ec._TrustCenterDocCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterDocCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterDocCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterDocCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterDocDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterDocDeletePayload) graphql.Marshaler {
	return ec._TrustCenterDocDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterDocDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterDocDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterDocDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterDocUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterDocUpdatePayload) graphql.Marshaler {
	return ec._TrustCenterDocUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterDocUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDocUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterDocUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterDocUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
