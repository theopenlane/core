// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TrustCenterDomainCreatePayload_customDomain(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterDomainCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterDomainCreatePayload_customDomain,
		func(ctx context.Context) (any, error) {
			return obj.CustomDomain, nil
		},
		nil,
		ec.marshalNCustomDomain2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCustomDomain,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterDomainCreatePayload_customDomain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterDomainCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomDomain_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomDomain_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomDomain_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_CustomDomain_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_CustomDomain_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_CustomDomain_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_CustomDomain_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_CustomDomain_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_CustomDomain_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_CustomDomain_systemInternalID(ctx, field)
			case "cnameRecord":
				return ec.fieldContext_CustomDomain_cnameRecord(ctx, field)
			case "mappableDomainID":
				return ec.fieldContext_CustomDomain_mappableDomainID(ctx, field)
			case "dnsVerificationID":
				return ec.fieldContext_CustomDomain_dnsVerificationID(ctx, field)
			case "owner":
				return ec.fieldContext_CustomDomain_owner(ctx, field)
			case "mappableDomain":
				return ec.fieldContext_CustomDomain_mappableDomain(ctx, field)
			case "dnsVerification":
				return ec.fieldContext_CustomDomain_dnsVerification(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomDomain", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateTrustCenterDomainInput(ctx context.Context, obj any) (model.CreateTrustCenterDomainInput, error) {
	var it model.CreateTrustCenterDomainInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cnameRecord", "trustCenterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cnameRecord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cnameRecord"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CnameRecord = data
		case "trustCenterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trustCenterID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrustCenterID = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var trustCenterDomainCreatePayloadImplementors = []string{"TrustCenterDomainCreatePayload"}

func (ec *executionContext) _TrustCenterDomainCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterDomainCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterDomainCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterDomainCreatePayload")
		case "customDomain":
			out.Values[i] = ec._TrustCenterDomainCreatePayload_customDomain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateTrustCenterDomainInput2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateTrustCenterDomainInput(ctx context.Context, v any) (model.CreateTrustCenterDomainInput, error) {
	res, err := ec.unmarshalInputCreateTrustCenterDomainInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTrustCenterDomainCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDomainCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterDomainCreatePayload) graphql.Marshaler {
	return ec._TrustCenterDomainCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterDomainCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterDomainCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterDomainCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterDomainCreatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
