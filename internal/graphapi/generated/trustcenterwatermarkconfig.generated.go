// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TrustCenterWatermarkConfigBulkCreatePayload_trustCenterWatermarkConfigs(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterWatermarkConfigBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterWatermarkConfigBulkCreatePayload_trustCenterWatermarkConfigs,
		func(ctx context.Context) (any, error) {
			return obj.TrustCenterWatermarkConfigs, nil
		},
		nil,
		ec.marshalOTrustCenterWatermarkConfig2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterWatermarkConfigᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TrustCenterWatermarkConfigBulkCreatePayload_trustCenterWatermarkConfigs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterWatermarkConfigBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterWatermarkConfig_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterWatermarkConfig_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterWatermarkConfig_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterWatermarkConfig_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterWatermarkConfig_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TrustCenterWatermarkConfig_ownerID(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterWatermarkConfig_trustCenterID(ctx, field)
			case "logoID":
				return ec.fieldContext_TrustCenterWatermarkConfig_logoID(ctx, field)
			case "text":
				return ec.fieldContext_TrustCenterWatermarkConfig_text(ctx, field)
			case "fontSize":
				return ec.fieldContext_TrustCenterWatermarkConfig_fontSize(ctx, field)
			case "opacity":
				return ec.fieldContext_TrustCenterWatermarkConfig_opacity(ctx, field)
			case "rotation":
				return ec.fieldContext_TrustCenterWatermarkConfig_rotation(ctx, field)
			case "color":
				return ec.fieldContext_TrustCenterWatermarkConfig_color(ctx, field)
			case "font":
				return ec.fieldContext_TrustCenterWatermarkConfig_font(ctx, field)
			case "owner":
				return ec.fieldContext_TrustCenterWatermarkConfig_owner(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterWatermarkConfig_trustCenter(ctx, field)
			case "file":
				return ec.fieldContext_TrustCenterWatermarkConfig_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterWatermarkConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterWatermarkConfigCreatePayload_trustCenterWatermarkConfig(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterWatermarkConfigCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterWatermarkConfigCreatePayload_trustCenterWatermarkConfig,
		func(ctx context.Context) (any, error) {
			return obj.TrustCenterWatermarkConfig, nil
		},
		nil,
		ec.marshalNTrustCenterWatermarkConfig2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterWatermarkConfig,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterWatermarkConfigCreatePayload_trustCenterWatermarkConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterWatermarkConfigCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterWatermarkConfig_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterWatermarkConfig_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterWatermarkConfig_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterWatermarkConfig_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterWatermarkConfig_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TrustCenterWatermarkConfig_ownerID(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterWatermarkConfig_trustCenterID(ctx, field)
			case "logoID":
				return ec.fieldContext_TrustCenterWatermarkConfig_logoID(ctx, field)
			case "text":
				return ec.fieldContext_TrustCenterWatermarkConfig_text(ctx, field)
			case "fontSize":
				return ec.fieldContext_TrustCenterWatermarkConfig_fontSize(ctx, field)
			case "opacity":
				return ec.fieldContext_TrustCenterWatermarkConfig_opacity(ctx, field)
			case "rotation":
				return ec.fieldContext_TrustCenterWatermarkConfig_rotation(ctx, field)
			case "color":
				return ec.fieldContext_TrustCenterWatermarkConfig_color(ctx, field)
			case "font":
				return ec.fieldContext_TrustCenterWatermarkConfig_font(ctx, field)
			case "owner":
				return ec.fieldContext_TrustCenterWatermarkConfig_owner(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterWatermarkConfig_trustCenter(ctx, field)
			case "file":
				return ec.fieldContext_TrustCenterWatermarkConfig_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterWatermarkConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterWatermarkConfigDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterWatermarkConfigDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterWatermarkConfigDeletePayload_deletedID,
		func(ctx context.Context) (any, error) {
			return obj.DeletedID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterWatermarkConfigDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterWatermarkConfigDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterWatermarkConfigUpdatePayload_trustCenterWatermarkConfig(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterWatermarkConfigUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterWatermarkConfigUpdatePayload_trustCenterWatermarkConfig,
		func(ctx context.Context) (any, error) {
			return obj.TrustCenterWatermarkConfig, nil
		},
		nil,
		ec.marshalNTrustCenterWatermarkConfig2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterWatermarkConfig,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterWatermarkConfigUpdatePayload_trustCenterWatermarkConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterWatermarkConfigUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrustCenterWatermarkConfig_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrustCenterWatermarkConfig_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrustCenterWatermarkConfig_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TrustCenterWatermarkConfig_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TrustCenterWatermarkConfig_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TrustCenterWatermarkConfig_ownerID(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_TrustCenterWatermarkConfig_trustCenterID(ctx, field)
			case "logoID":
				return ec.fieldContext_TrustCenterWatermarkConfig_logoID(ctx, field)
			case "text":
				return ec.fieldContext_TrustCenterWatermarkConfig_text(ctx, field)
			case "fontSize":
				return ec.fieldContext_TrustCenterWatermarkConfig_fontSize(ctx, field)
			case "opacity":
				return ec.fieldContext_TrustCenterWatermarkConfig_opacity(ctx, field)
			case "rotation":
				return ec.fieldContext_TrustCenterWatermarkConfig_rotation(ctx, field)
			case "color":
				return ec.fieldContext_TrustCenterWatermarkConfig_color(ctx, field)
			case "font":
				return ec.fieldContext_TrustCenterWatermarkConfig_font(ctx, field)
			case "owner":
				return ec.fieldContext_TrustCenterWatermarkConfig_owner(ctx, field)
			case "trustCenter":
				return ec.fieldContext_TrustCenterWatermarkConfig_trustCenter(ctx, field)
			case "file":
				return ec.fieldContext_TrustCenterWatermarkConfig_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterWatermarkConfig", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var trustCenterWatermarkConfigBulkCreatePayloadImplementors = []string{"TrustCenterWatermarkConfigBulkCreatePayload"}

func (ec *executionContext) _TrustCenterWatermarkConfigBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterWatermarkConfigBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterWatermarkConfigBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterWatermarkConfigBulkCreatePayload")
		case "trustCenterWatermarkConfigs":
			out.Values[i] = ec._TrustCenterWatermarkConfigBulkCreatePayload_trustCenterWatermarkConfigs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterWatermarkConfigCreatePayloadImplementors = []string{"TrustCenterWatermarkConfigCreatePayload"}

func (ec *executionContext) _TrustCenterWatermarkConfigCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterWatermarkConfigCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterWatermarkConfigCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterWatermarkConfigCreatePayload")
		case "trustCenterWatermarkConfig":
			out.Values[i] = ec._TrustCenterWatermarkConfigCreatePayload_trustCenterWatermarkConfig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterWatermarkConfigDeletePayloadImplementors = []string{"TrustCenterWatermarkConfigDeletePayload"}

func (ec *executionContext) _TrustCenterWatermarkConfigDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterWatermarkConfigDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterWatermarkConfigDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterWatermarkConfigDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TrustCenterWatermarkConfigDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterWatermarkConfigUpdatePayloadImplementors = []string{"TrustCenterWatermarkConfigUpdatePayload"}

func (ec *executionContext) _TrustCenterWatermarkConfigUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterWatermarkConfigUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterWatermarkConfigUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterWatermarkConfigUpdatePayload")
		case "trustCenterWatermarkConfig":
			out.Values[i] = ec._TrustCenterWatermarkConfigUpdatePayload_trustCenterWatermarkConfig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTrustCenterWatermarkConfigCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterWatermarkConfigCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterWatermarkConfigCreatePayload) graphql.Marshaler {
	return ec._TrustCenterWatermarkConfigCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterWatermarkConfigCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterWatermarkConfigCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterWatermarkConfigCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterWatermarkConfigCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterWatermarkConfigDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterWatermarkConfigDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterWatermarkConfigDeletePayload) graphql.Marshaler {
	return ec._TrustCenterWatermarkConfigDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterWatermarkConfigDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterWatermarkConfigDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterWatermarkConfigDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterWatermarkConfigDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterWatermarkConfigUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterWatermarkConfigUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterWatermarkConfigUpdatePayload) graphql.Marshaler {
	return ec._TrustCenterWatermarkConfigUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterWatermarkConfigUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterWatermarkConfigUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterWatermarkConfigUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterWatermarkConfigUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
