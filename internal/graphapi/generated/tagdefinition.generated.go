// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TagDefinitionBulkCreatePayload_tagDefinitions(ctx context.Context, field graphql.CollectedField, obj *model.TagDefinitionBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TagDefinitionBulkCreatePayload_tagDefinitions,
		func(ctx context.Context) (any, error) {
			return obj.TagDefinitions, nil
		},
		nil,
		ec.marshalOTagDefinition2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTagDefinitionᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TagDefinitionBulkCreatePayload_tagDefinitions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TagDefinitionBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TagDefinition_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TagDefinition_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TagDefinition_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TagDefinition_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TagDefinition_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TagDefinition_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_TagDefinition_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_TagDefinition_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_TagDefinition_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_TagDefinition_systemInternalID(ctx, field)
			case "name":
				return ec.fieldContext_TagDefinition_name(ctx, field)
			case "aliases":
				return ec.fieldContext_TagDefinition_aliases(ctx, field)
			case "slug":
				return ec.fieldContext_TagDefinition_slug(ctx, field)
			case "description":
				return ec.fieldContext_TagDefinition_description(ctx, field)
			case "color":
				return ec.fieldContext_TagDefinition_color(ctx, field)
			case "systemGenerated":
				return ec.fieldContext_TagDefinition_systemGenerated(ctx, field)
			case "owner":
				return ec.fieldContext_TagDefinition_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TagDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TagDefinitionCreatePayload_tagDefinition(ctx context.Context, field graphql.CollectedField, obj *model.TagDefinitionCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TagDefinitionCreatePayload_tagDefinition,
		func(ctx context.Context) (any, error) {
			return obj.TagDefinition, nil
		},
		nil,
		ec.marshalNTagDefinition2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTagDefinition,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TagDefinitionCreatePayload_tagDefinition(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TagDefinitionCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TagDefinition_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TagDefinition_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TagDefinition_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TagDefinition_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TagDefinition_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TagDefinition_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_TagDefinition_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_TagDefinition_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_TagDefinition_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_TagDefinition_systemInternalID(ctx, field)
			case "name":
				return ec.fieldContext_TagDefinition_name(ctx, field)
			case "aliases":
				return ec.fieldContext_TagDefinition_aliases(ctx, field)
			case "slug":
				return ec.fieldContext_TagDefinition_slug(ctx, field)
			case "description":
				return ec.fieldContext_TagDefinition_description(ctx, field)
			case "color":
				return ec.fieldContext_TagDefinition_color(ctx, field)
			case "systemGenerated":
				return ec.fieldContext_TagDefinition_systemGenerated(ctx, field)
			case "owner":
				return ec.fieldContext_TagDefinition_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TagDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TagDefinitionDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TagDefinitionDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TagDefinitionDeletePayload_deletedID,
		func(ctx context.Context) (any, error) {
			return obj.DeletedID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TagDefinitionDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TagDefinitionDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TagDefinitionUpdatePayload_tagDefinition(ctx context.Context, field graphql.CollectedField, obj *model.TagDefinitionUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TagDefinitionUpdatePayload_tagDefinition,
		func(ctx context.Context) (any, error) {
			return obj.TagDefinition, nil
		},
		nil,
		ec.marshalNTagDefinition2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTagDefinition,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TagDefinitionUpdatePayload_tagDefinition(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TagDefinitionUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TagDefinition_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TagDefinition_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TagDefinition_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TagDefinition_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TagDefinition_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_TagDefinition_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_TagDefinition_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_TagDefinition_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_TagDefinition_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_TagDefinition_systemInternalID(ctx, field)
			case "name":
				return ec.fieldContext_TagDefinition_name(ctx, field)
			case "aliases":
				return ec.fieldContext_TagDefinition_aliases(ctx, field)
			case "slug":
				return ec.fieldContext_TagDefinition_slug(ctx, field)
			case "description":
				return ec.fieldContext_TagDefinition_description(ctx, field)
			case "color":
				return ec.fieldContext_TagDefinition_color(ctx, field)
			case "systemGenerated":
				return ec.fieldContext_TagDefinition_systemGenerated(ctx, field)
			case "owner":
				return ec.fieldContext_TagDefinition_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TagDefinition", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var tagDefinitionBulkCreatePayloadImplementors = []string{"TagDefinitionBulkCreatePayload"}

func (ec *executionContext) _TagDefinitionBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TagDefinitionBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagDefinitionBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagDefinitionBulkCreatePayload")
		case "tagDefinitions":
			out.Values[i] = ec._TagDefinitionBulkCreatePayload_tagDefinitions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tagDefinitionCreatePayloadImplementors = []string{"TagDefinitionCreatePayload"}

func (ec *executionContext) _TagDefinitionCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TagDefinitionCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagDefinitionCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagDefinitionCreatePayload")
		case "tagDefinition":
			out.Values[i] = ec._TagDefinitionCreatePayload_tagDefinition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tagDefinitionDeletePayloadImplementors = []string{"TagDefinitionDeletePayload"}

func (ec *executionContext) _TagDefinitionDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TagDefinitionDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagDefinitionDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagDefinitionDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TagDefinitionDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tagDefinitionUpdatePayloadImplementors = []string{"TagDefinitionUpdatePayload"}

func (ec *executionContext) _TagDefinitionUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TagDefinitionUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagDefinitionUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagDefinitionUpdatePayload")
		case "tagDefinition":
			out.Values[i] = ec._TagDefinitionUpdatePayload_tagDefinition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTagDefinitionBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TagDefinitionBulkCreatePayload) graphql.Marshaler {
	return ec._TagDefinitionBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTagDefinitionBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TagDefinitionBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TagDefinitionBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTagDefinitionCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TagDefinitionCreatePayload) graphql.Marshaler {
	return ec._TagDefinitionCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTagDefinitionCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TagDefinitionCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TagDefinitionCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTagDefinitionDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TagDefinitionDeletePayload) graphql.Marshaler {
	return ec._TagDefinitionDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTagDefinitionDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TagDefinitionDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TagDefinitionDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTagDefinitionUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TagDefinitionUpdatePayload) graphql.Marshaler {
	return ec._TagDefinitionUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTagDefinitionUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTagDefinitionUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TagDefinitionUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TagDefinitionUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
