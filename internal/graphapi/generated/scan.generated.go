// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ScanBulkCreatePayload_scans(ctx context.Context, field graphql.CollectedField, obj *model.ScanBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScanBulkCreatePayload_scans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scans, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Scan)
	fc.Result = res
	return ec.marshalOScan2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScanBulkCreatePayload_scans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScanBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Scan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Scan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Scan_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Scan_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Scan_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Scan_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Scan_ownerID(ctx, field)
			case "target":
				return ec.fieldContext_Scan_target(ctx, field)
			case "scanType":
				return ec.fieldContext_Scan_scanType(ctx, field)
			case "metadata":
				return ec.fieldContext_Scan_metadata(ctx, field)
			case "status":
				return ec.fieldContext_Scan_status(ctx, field)
			case "owner":
				return ec.fieldContext_Scan_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Scan_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Scan_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Scan_viewers(ctx, field)
			case "assets":
				return ec.fieldContext_Scan_assets(ctx, field)
			case "entities":
				return ec.fieldContext_Scan_entities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Scan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScanBulkUpdatePayload_scans(ctx context.Context, field graphql.CollectedField, obj *model.ScanBulkUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScanBulkUpdatePayload_scans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scans, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Scan)
	fc.Result = res
	return ec.marshalOScan2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScanBulkUpdatePayload_scans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScanBulkUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Scan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Scan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Scan_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Scan_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Scan_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Scan_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Scan_ownerID(ctx, field)
			case "target":
				return ec.fieldContext_Scan_target(ctx, field)
			case "scanType":
				return ec.fieldContext_Scan_scanType(ctx, field)
			case "metadata":
				return ec.fieldContext_Scan_metadata(ctx, field)
			case "status":
				return ec.fieldContext_Scan_status(ctx, field)
			case "owner":
				return ec.fieldContext_Scan_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Scan_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Scan_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Scan_viewers(ctx, field)
			case "assets":
				return ec.fieldContext_Scan_assets(ctx, field)
			case "entities":
				return ec.fieldContext_Scan_entities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Scan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScanBulkUpdatePayload_updatedIDs(ctx context.Context, field graphql.CollectedField, obj *model.ScanBulkUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScanBulkUpdatePayload_updatedIDs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedIDs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScanBulkUpdatePayload_updatedIDs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScanBulkUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScanCreatePayload_scan(ctx context.Context, field graphql.CollectedField, obj *model.ScanCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScanCreatePayload_scan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Scan)
	fc.Result = res
	return ec.marshalNScan2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScanCreatePayload_scan(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScanCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Scan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Scan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Scan_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Scan_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Scan_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Scan_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Scan_ownerID(ctx, field)
			case "target":
				return ec.fieldContext_Scan_target(ctx, field)
			case "scanType":
				return ec.fieldContext_Scan_scanType(ctx, field)
			case "metadata":
				return ec.fieldContext_Scan_metadata(ctx, field)
			case "status":
				return ec.fieldContext_Scan_status(ctx, field)
			case "owner":
				return ec.fieldContext_Scan_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Scan_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Scan_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Scan_viewers(ctx, field)
			case "assets":
				return ec.fieldContext_Scan_assets(ctx, field)
			case "entities":
				return ec.fieldContext_Scan_entities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Scan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScanDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.ScanDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScanDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScanDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScanDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScanUpdatePayload_scan(ctx context.Context, field graphql.CollectedField, obj *model.ScanUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScanUpdatePayload_scan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Scan)
	fc.Result = res
	return ec.marshalNScan2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScanUpdatePayload_scan(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScanUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Scan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Scan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Scan_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Scan_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Scan_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Scan_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Scan_ownerID(ctx, field)
			case "target":
				return ec.fieldContext_Scan_target(ctx, field)
			case "scanType":
				return ec.fieldContext_Scan_scanType(ctx, field)
			case "metadata":
				return ec.fieldContext_Scan_metadata(ctx, field)
			case "status":
				return ec.fieldContext_Scan_status(ctx, field)
			case "owner":
				return ec.fieldContext_Scan_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Scan_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Scan_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Scan_viewers(ctx, field)
			case "assets":
				return ec.fieldContext_Scan_assets(ctx, field)
			case "entities":
				return ec.fieldContext_Scan_entities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Scan", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBulkUpdateScanInput(ctx context.Context, obj any) (model.BulkUpdateScanInput, error) {
	var it model.BulkUpdateScanInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "input":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			data, err := ec.unmarshalNUpdateScanInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐUpdateScanInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Input = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var scanBulkCreatePayloadImplementors = []string{"ScanBulkCreatePayload"}

func (ec *executionContext) _ScanBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScanBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scanBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScanBulkCreatePayload")
		case "scans":
			out.Values[i] = ec._ScanBulkCreatePayload_scans(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scanBulkUpdatePayloadImplementors = []string{"ScanBulkUpdatePayload"}

func (ec *executionContext) _ScanBulkUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScanBulkUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scanBulkUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScanBulkUpdatePayload")
		case "scans":
			out.Values[i] = ec._ScanBulkUpdatePayload_scans(ctx, field, obj)
		case "updatedIDs":
			out.Values[i] = ec._ScanBulkUpdatePayload_updatedIDs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scanCreatePayloadImplementors = []string{"ScanCreatePayload"}

func (ec *executionContext) _ScanCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScanCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scanCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScanCreatePayload")
		case "scan":
			out.Values[i] = ec._ScanCreatePayload_scan(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scanDeletePayloadImplementors = []string{"ScanDeletePayload"}

func (ec *executionContext) _ScanDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScanDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scanDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScanDeletePayload")
		case "deletedID":
			out.Values[i] = ec._ScanDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scanUpdatePayloadImplementors = []string{"ScanUpdatePayload"}

func (ec *executionContext) _ScanUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScanUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scanUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScanUpdatePayload")
		case "scan":
			out.Values[i] = ec._ScanUpdatePayload_scan(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBulkUpdateScanInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐBulkUpdateScanInput(ctx context.Context, v any) (*model.BulkUpdateScanInput, error) {
	res, err := ec.unmarshalInputBulkUpdateScanInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScanBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ScanBulkCreatePayload) graphql.Marshaler {
	return ec._ScanBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScanBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScanBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScanBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNScanBulkUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanBulkUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.ScanBulkUpdatePayload) graphql.Marshaler {
	return ec._ScanBulkUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScanBulkUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanBulkUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScanBulkUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScanBulkUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNScanCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ScanCreatePayload) graphql.Marshaler {
	return ec._ScanCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScanCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScanCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScanCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNScanDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.ScanDeletePayload) graphql.Marshaler {
	return ec._ScanDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScanDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScanDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScanDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNScanUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.ScanUpdatePayload) graphql.Marshaler {
	return ec._ScanUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScanUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScanUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScanUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScanUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBulkUpdateScanInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐBulkUpdateScanInputᚄ(ctx context.Context, v any) ([]*model.BulkUpdateScanInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.BulkUpdateScanInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBulkUpdateScanInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐBulkUpdateScanInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// endregion ***************************** type.gotpl *****************************
