// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AssessmentBulkCreatePayload_assessments(ctx context.Context, field graphql.CollectedField, obj *model.AssessmentBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AssessmentBulkCreatePayload_assessments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assessments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Assessment)
	fc.Result = res
	return ec.marshalOAssessment2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAssessmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AssessmentBulkCreatePayload_assessments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssessmentBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Assessment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Assessment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Assessment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Assessment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Assessment_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Assessment_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Assessment_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Assessment_name(ctx, field)
			case "assessmentType":
				return ec.fieldContext_Assessment_assessmentType(ctx, field)
			case "templateID":
				return ec.fieldContext_Assessment_templateID(ctx, field)
			case "assessmentOwnerID":
				return ec.fieldContext_Assessment_assessmentOwnerID(ctx, field)
			case "owner":
				return ec.fieldContext_Assessment_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Assessment_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Assessment_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Assessment_viewers(ctx, field)
			case "template":
				return ec.fieldContext_Assessment_template(ctx, field)
			case "users":
				return ec.fieldContext_Assessment_users(ctx, field)
			case "assessmentResponses":
				return ec.fieldContext_Assessment_assessmentResponses(ctx, field)
			case "assessmentOwner":
				return ec.fieldContext_Assessment_assessmentOwner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Assessment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AssessmentCreatePayload_assessment(ctx context.Context, field graphql.CollectedField, obj *model.AssessmentCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AssessmentCreatePayload_assessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Assessment)
	fc.Result = res
	return ec.marshalNAssessment2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAssessment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AssessmentCreatePayload_assessment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssessmentCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Assessment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Assessment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Assessment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Assessment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Assessment_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Assessment_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Assessment_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Assessment_name(ctx, field)
			case "assessmentType":
				return ec.fieldContext_Assessment_assessmentType(ctx, field)
			case "templateID":
				return ec.fieldContext_Assessment_templateID(ctx, field)
			case "assessmentOwnerID":
				return ec.fieldContext_Assessment_assessmentOwnerID(ctx, field)
			case "owner":
				return ec.fieldContext_Assessment_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Assessment_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Assessment_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Assessment_viewers(ctx, field)
			case "template":
				return ec.fieldContext_Assessment_template(ctx, field)
			case "users":
				return ec.fieldContext_Assessment_users(ctx, field)
			case "assessmentResponses":
				return ec.fieldContext_Assessment_assessmentResponses(ctx, field)
			case "assessmentOwner":
				return ec.fieldContext_Assessment_assessmentOwner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Assessment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AssessmentDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.AssessmentDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AssessmentDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AssessmentDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssessmentDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AssessmentUpdatePayload_assessment(ctx context.Context, field graphql.CollectedField, obj *model.AssessmentUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AssessmentUpdatePayload_assessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Assessment)
	fc.Result = res
	return ec.marshalNAssessment2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAssessment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AssessmentUpdatePayload_assessment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssessmentUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Assessment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Assessment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Assessment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Assessment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Assessment_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Assessment_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Assessment_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Assessment_name(ctx, field)
			case "assessmentType":
				return ec.fieldContext_Assessment_assessmentType(ctx, field)
			case "templateID":
				return ec.fieldContext_Assessment_templateID(ctx, field)
			case "assessmentOwnerID":
				return ec.fieldContext_Assessment_assessmentOwnerID(ctx, field)
			case "owner":
				return ec.fieldContext_Assessment_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Assessment_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Assessment_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Assessment_viewers(ctx, field)
			case "template":
				return ec.fieldContext_Assessment_template(ctx, field)
			case "users":
				return ec.fieldContext_Assessment_users(ctx, field)
			case "assessmentResponses":
				return ec.fieldContext_Assessment_assessmentResponses(ctx, field)
			case "assessmentOwner":
				return ec.fieldContext_Assessment_assessmentOwner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Assessment", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var assessmentBulkCreatePayloadImplementors = []string{"AssessmentBulkCreatePayload"}

func (ec *executionContext) _AssessmentBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssessmentBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assessmentBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssessmentBulkCreatePayload")
		case "assessments":
			out.Values[i] = ec._AssessmentBulkCreatePayload_assessments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var assessmentCreatePayloadImplementors = []string{"AssessmentCreatePayload"}

func (ec *executionContext) _AssessmentCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssessmentCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assessmentCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssessmentCreatePayload")
		case "assessment":
			out.Values[i] = ec._AssessmentCreatePayload_assessment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var assessmentDeletePayloadImplementors = []string{"AssessmentDeletePayload"}

func (ec *executionContext) _AssessmentDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssessmentDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assessmentDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssessmentDeletePayload")
		case "deletedID":
			out.Values[i] = ec._AssessmentDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var assessmentUpdatePayloadImplementors = []string{"AssessmentUpdatePayload"}

func (ec *executionContext) _AssessmentUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AssessmentUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assessmentUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssessmentUpdatePayload")
		case "assessment":
			out.Values[i] = ec._AssessmentUpdatePayload_assessment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAssessmentBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.AssessmentBulkCreatePayload) graphql.Marshaler {
	return ec._AssessmentBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssessmentBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssessmentBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssessmentBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAssessmentCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.AssessmentCreatePayload) graphql.Marshaler {
	return ec._AssessmentCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssessmentCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssessmentCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssessmentCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAssessmentDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.AssessmentDeletePayload) graphql.Marshaler {
	return ec._AssessmentDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssessmentDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssessmentDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssessmentDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAssessmentUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.AssessmentUpdatePayload) graphql.Marshaler {
	return ec._AssessmentUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssessmentUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAssessmentUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AssessmentUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AssessmentUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
