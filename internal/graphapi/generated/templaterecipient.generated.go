// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TemplateRecipientBulkCreatePayload_templateRecipients(ctx context.Context, field graphql.CollectedField, obj *model.TemplateRecipientBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateRecipientBulkCreatePayload_templateRecipients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemplateRecipients, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.TemplateRecipient)
	fc.Result = res
	return ec.marshalOTemplateRecipient2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateRecipientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateRecipientBulkCreatePayload_templateRecipients(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateRecipientBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TemplateRecipient_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TemplateRecipient_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TemplateRecipient_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TemplateRecipient_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TemplateRecipient_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TemplateRecipient_ownerID(ctx, field)
			case "token":
				return ec.fieldContext_TemplateRecipient_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_TemplateRecipient_expiresAt(ctx, field)
			case "email":
				return ec.fieldContext_TemplateRecipient_email(ctx, field)
			case "secret":
				return ec.fieldContext_TemplateRecipient_secret(ctx, field)
			case "templateID":
				return ec.fieldContext_TemplateRecipient_templateID(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_TemplateRecipient_sendAttempts(ctx, field)
			case "status":
				return ec.fieldContext_TemplateRecipient_status(ctx, field)
			case "documentDataID":
				return ec.fieldContext_TemplateRecipient_documentDataID(ctx, field)
			case "owner":
				return ec.fieldContext_TemplateRecipient_owner(ctx, field)
			case "document":
				return ec.fieldContext_TemplateRecipient_document(ctx, field)
			case "template":
				return ec.fieldContext_TemplateRecipient_template(ctx, field)
			case "events":
				return ec.fieldContext_TemplateRecipient_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateRecipient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateRecipientCreatePayload_templateRecipient(ctx context.Context, field graphql.CollectedField, obj *model.TemplateRecipientCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateRecipientCreatePayload_templateRecipient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemplateRecipient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.TemplateRecipient)
	fc.Result = res
	return ec.marshalNTemplateRecipient2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateRecipient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateRecipientCreatePayload_templateRecipient(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateRecipientCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TemplateRecipient_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TemplateRecipient_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TemplateRecipient_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TemplateRecipient_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TemplateRecipient_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TemplateRecipient_ownerID(ctx, field)
			case "token":
				return ec.fieldContext_TemplateRecipient_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_TemplateRecipient_expiresAt(ctx, field)
			case "email":
				return ec.fieldContext_TemplateRecipient_email(ctx, field)
			case "secret":
				return ec.fieldContext_TemplateRecipient_secret(ctx, field)
			case "templateID":
				return ec.fieldContext_TemplateRecipient_templateID(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_TemplateRecipient_sendAttempts(ctx, field)
			case "status":
				return ec.fieldContext_TemplateRecipient_status(ctx, field)
			case "documentDataID":
				return ec.fieldContext_TemplateRecipient_documentDataID(ctx, field)
			case "owner":
				return ec.fieldContext_TemplateRecipient_owner(ctx, field)
			case "document":
				return ec.fieldContext_TemplateRecipient_document(ctx, field)
			case "template":
				return ec.fieldContext_TemplateRecipient_template(ctx, field)
			case "events":
				return ec.fieldContext_TemplateRecipient_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateRecipient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateRecipientDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TemplateRecipientDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateRecipientDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateRecipientDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateRecipientDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateRecipientUpdatePayload_templateRecipient(ctx context.Context, field graphql.CollectedField, obj *model.TemplateRecipientUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateRecipientUpdatePayload_templateRecipient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemplateRecipient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.TemplateRecipient)
	fc.Result = res
	return ec.marshalNTemplateRecipient2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateRecipient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateRecipientUpdatePayload_templateRecipient(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateRecipientUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TemplateRecipient_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TemplateRecipient_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TemplateRecipient_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TemplateRecipient_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TemplateRecipient_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TemplateRecipient_ownerID(ctx, field)
			case "token":
				return ec.fieldContext_TemplateRecipient_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_TemplateRecipient_expiresAt(ctx, field)
			case "email":
				return ec.fieldContext_TemplateRecipient_email(ctx, field)
			case "secret":
				return ec.fieldContext_TemplateRecipient_secret(ctx, field)
			case "templateID":
				return ec.fieldContext_TemplateRecipient_templateID(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_TemplateRecipient_sendAttempts(ctx, field)
			case "status":
				return ec.fieldContext_TemplateRecipient_status(ctx, field)
			case "documentDataID":
				return ec.fieldContext_TemplateRecipient_documentDataID(ctx, field)
			case "owner":
				return ec.fieldContext_TemplateRecipient_owner(ctx, field)
			case "document":
				return ec.fieldContext_TemplateRecipient_document(ctx, field)
			case "template":
				return ec.fieldContext_TemplateRecipient_template(ctx, field)
			case "events":
				return ec.fieldContext_TemplateRecipient_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateRecipient", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var templateRecipientBulkCreatePayloadImplementors = []string{"TemplateRecipientBulkCreatePayload"}

func (ec *executionContext) _TemplateRecipientBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateRecipientBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateRecipientBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateRecipientBulkCreatePayload")
		case "templateRecipients":
			out.Values[i] = ec._TemplateRecipientBulkCreatePayload_templateRecipients(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateRecipientCreatePayloadImplementors = []string{"TemplateRecipientCreatePayload"}

func (ec *executionContext) _TemplateRecipientCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateRecipientCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateRecipientCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateRecipientCreatePayload")
		case "templateRecipient":
			out.Values[i] = ec._TemplateRecipientCreatePayload_templateRecipient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateRecipientDeletePayloadImplementors = []string{"TemplateRecipientDeletePayload"}

func (ec *executionContext) _TemplateRecipientDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateRecipientDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateRecipientDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateRecipientDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TemplateRecipientDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateRecipientUpdatePayloadImplementors = []string{"TemplateRecipientUpdatePayload"}

func (ec *executionContext) _TemplateRecipientUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateRecipientUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateRecipientUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateRecipientUpdatePayload")
		case "templateRecipient":
			out.Values[i] = ec._TemplateRecipientUpdatePayload_templateRecipient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTemplateRecipientCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateRecipientCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateRecipientCreatePayload) graphql.Marshaler {
	return ec._TemplateRecipientCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateRecipientCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateRecipientCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateRecipientCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateRecipientCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateRecipientDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateRecipientDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateRecipientDeletePayload) graphql.Marshaler {
	return ec._TemplateRecipientDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateRecipientDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateRecipientDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateRecipientDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateRecipientDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateRecipientUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateRecipientUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateRecipientUpdatePayload) graphql.Marshaler {
	return ec._TemplateRecipientUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateRecipientUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateRecipientUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateRecipientUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateRecipientUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
