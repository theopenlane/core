// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _InternalPolicyBulkCreatePayload_internalPolicies(ctx context.Context, field graphql.CollectedField, obj *model.InternalPolicyBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InternalPolicyBulkCreatePayload_internalPolicies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.InternalPolicy)
	fc.Result = res
	return ec.marshalOInternalPolicy2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInternalPolicyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InternalPolicyBulkCreatePayload_internalPolicies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InternalPolicyBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InternalPolicy_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InternalPolicy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InternalPolicy_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_InternalPolicy_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_InternalPolicy_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_InternalPolicy_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_InternalPolicy_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_InternalPolicy_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_InternalPolicy_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_InternalPolicy_name(ctx, field)
			case "description":
				return ec.fieldContext_InternalPolicy_description(ctx, field)
			case "status":
				return ec.fieldContext_InternalPolicy_status(ctx, field)
			case "policyType":
				return ec.fieldContext_InternalPolicy_policyType(ctx, field)
			case "version":
				return ec.fieldContext_InternalPolicy_version(ctx, field)
			case "purposeAndScope":
				return ec.fieldContext_InternalPolicy_purposeAndScope(ctx, field)
			case "background":
				return ec.fieldContext_InternalPolicy_background(ctx, field)
			case "details":
				return ec.fieldContext_InternalPolicy_details(ctx, field)
			case "owner":
				return ec.fieldContext_InternalPolicy_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_InternalPolicy_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_InternalPolicy_editors(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_InternalPolicy_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_InternalPolicy_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_InternalPolicy_procedures(ctx, field)
			case "narratives":
				return ec.fieldContext_InternalPolicy_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_InternalPolicy_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_InternalPolicy_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InternalPolicy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InternalPolicyCreatePayload_internalPolicy(ctx context.Context, field graphql.CollectedField, obj *model.InternalPolicyCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InternalPolicyCreatePayload_internalPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.InternalPolicy)
	fc.Result = res
	return ec.marshalNInternalPolicy2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInternalPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InternalPolicyCreatePayload_internalPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InternalPolicyCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InternalPolicy_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InternalPolicy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InternalPolicy_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_InternalPolicy_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_InternalPolicy_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_InternalPolicy_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_InternalPolicy_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_InternalPolicy_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_InternalPolicy_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_InternalPolicy_name(ctx, field)
			case "description":
				return ec.fieldContext_InternalPolicy_description(ctx, field)
			case "status":
				return ec.fieldContext_InternalPolicy_status(ctx, field)
			case "policyType":
				return ec.fieldContext_InternalPolicy_policyType(ctx, field)
			case "version":
				return ec.fieldContext_InternalPolicy_version(ctx, field)
			case "purposeAndScope":
				return ec.fieldContext_InternalPolicy_purposeAndScope(ctx, field)
			case "background":
				return ec.fieldContext_InternalPolicy_background(ctx, field)
			case "details":
				return ec.fieldContext_InternalPolicy_details(ctx, field)
			case "owner":
				return ec.fieldContext_InternalPolicy_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_InternalPolicy_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_InternalPolicy_editors(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_InternalPolicy_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_InternalPolicy_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_InternalPolicy_procedures(ctx, field)
			case "narratives":
				return ec.fieldContext_InternalPolicy_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_InternalPolicy_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_InternalPolicy_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InternalPolicy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InternalPolicyDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.InternalPolicyDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InternalPolicyDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InternalPolicyDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InternalPolicyDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InternalPolicyUpdatePayload_internalPolicy(ctx context.Context, field graphql.CollectedField, obj *model.InternalPolicyUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InternalPolicyUpdatePayload_internalPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.InternalPolicy)
	fc.Result = res
	return ec.marshalNInternalPolicy2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInternalPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InternalPolicyUpdatePayload_internalPolicy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InternalPolicyUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InternalPolicy_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InternalPolicy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InternalPolicy_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_InternalPolicy_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_InternalPolicy_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_InternalPolicy_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_InternalPolicy_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_InternalPolicy_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_InternalPolicy_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_InternalPolicy_name(ctx, field)
			case "description":
				return ec.fieldContext_InternalPolicy_description(ctx, field)
			case "status":
				return ec.fieldContext_InternalPolicy_status(ctx, field)
			case "policyType":
				return ec.fieldContext_InternalPolicy_policyType(ctx, field)
			case "version":
				return ec.fieldContext_InternalPolicy_version(ctx, field)
			case "purposeAndScope":
				return ec.fieldContext_InternalPolicy_purposeAndScope(ctx, field)
			case "background":
				return ec.fieldContext_InternalPolicy_background(ctx, field)
			case "details":
				return ec.fieldContext_InternalPolicy_details(ctx, field)
			case "owner":
				return ec.fieldContext_InternalPolicy_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_InternalPolicy_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_InternalPolicy_editors(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_InternalPolicy_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_InternalPolicy_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_InternalPolicy_procedures(ctx, field)
			case "narratives":
				return ec.fieldContext_InternalPolicy_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_InternalPolicy_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_InternalPolicy_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InternalPolicy", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var internalPolicyBulkCreatePayloadImplementors = []string{"InternalPolicyBulkCreatePayload"}

func (ec *executionContext) _InternalPolicyBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InternalPolicyBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalPolicyBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalPolicyBulkCreatePayload")
		case "internalPolicies":
			out.Values[i] = ec._InternalPolicyBulkCreatePayload_internalPolicies(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var internalPolicyCreatePayloadImplementors = []string{"InternalPolicyCreatePayload"}

func (ec *executionContext) _InternalPolicyCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InternalPolicyCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalPolicyCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalPolicyCreatePayload")
		case "internalPolicy":
			out.Values[i] = ec._InternalPolicyCreatePayload_internalPolicy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var internalPolicyDeletePayloadImplementors = []string{"InternalPolicyDeletePayload"}

func (ec *executionContext) _InternalPolicyDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InternalPolicyDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalPolicyDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalPolicyDeletePayload")
		case "deletedID":
			out.Values[i] = ec._InternalPolicyDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var internalPolicyUpdatePayloadImplementors = []string{"InternalPolicyUpdatePayload"}

func (ec *executionContext) _InternalPolicyUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.InternalPolicyUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalPolicyUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalPolicyUpdatePayload")
		case "internalPolicy":
			out.Values[i] = ec._InternalPolicyUpdatePayload_internalPolicy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNInternalPolicyBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.InternalPolicyBulkCreatePayload) graphql.Marshaler {
	return ec._InternalPolicyBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInternalPolicyBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.InternalPolicyBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InternalPolicyBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNInternalPolicyCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.InternalPolicyCreatePayload) graphql.Marshaler {
	return ec._InternalPolicyCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInternalPolicyCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.InternalPolicyCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InternalPolicyCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNInternalPolicyDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.InternalPolicyDeletePayload) graphql.Marshaler {
	return ec._InternalPolicyDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInternalPolicyDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.InternalPolicyDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InternalPolicyDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNInternalPolicyUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.InternalPolicyUpdatePayload) graphql.Marshaler {
	return ec._InternalPolicyUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNInternalPolicyUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicyUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.InternalPolicyUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InternalPolicyUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
