// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CustomTypeEnumBulkCreatePayload_customTypeEnums(ctx context.Context, field graphql.CollectedField, obj *model.CustomTypeEnumBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CustomTypeEnumBulkCreatePayload_customTypeEnums,
		func(ctx context.Context) (any, error) {
			return obj.CustomTypeEnums, nil
		},
		nil,
		ec.marshalOCustomTypeEnum2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCustomTypeEnumᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CustomTypeEnumBulkCreatePayload_customTypeEnums(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomTypeEnumBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomTypeEnum_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomTypeEnum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomTypeEnum_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_CustomTypeEnum_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_CustomTypeEnum_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_CustomTypeEnum_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_CustomTypeEnum_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_CustomTypeEnum_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_CustomTypeEnum_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_CustomTypeEnum_systemInternalID(ctx, field)
			case "objectType":
				return ec.fieldContext_CustomTypeEnum_objectType(ctx, field)
			case "field":
				return ec.fieldContext_CustomTypeEnum_field(ctx, field)
			case "name":
				return ec.fieldContext_CustomTypeEnum_name(ctx, field)
			case "description":
				return ec.fieldContext_CustomTypeEnum_description(ctx, field)
			case "systemGenerated":
				return ec.fieldContext_CustomTypeEnum_systemGenerated(ctx, field)
			case "owner":
				return ec.fieldContext_CustomTypeEnum_owner(ctx, field)
			case "tasks":
				return ec.fieldContext_CustomTypeEnum_tasks(ctx, field)
			case "controls":
				return ec.fieldContext_CustomTypeEnum_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_CustomTypeEnum_subcontrols(ctx, field)
			case "risks":
				return ec.fieldContext_CustomTypeEnum_risks(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_CustomTypeEnum_internalPolicies(ctx, field)
			case "procedures":
				return ec.fieldContext_CustomTypeEnum_procedures(ctx, field)
			case "actionPlans":
				return ec.fieldContext_CustomTypeEnum_actionPlans(ctx, field)
			case "programs":
				return ec.fieldContext_CustomTypeEnum_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomTypeEnum", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomTypeEnumCreatePayload_customTypeEnum(ctx context.Context, field graphql.CollectedField, obj *model.CustomTypeEnumCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CustomTypeEnumCreatePayload_customTypeEnum,
		func(ctx context.Context) (any, error) {
			return obj.CustomTypeEnum, nil
		},
		nil,
		ec.marshalNCustomTypeEnum2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCustomTypeEnum,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CustomTypeEnumCreatePayload_customTypeEnum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomTypeEnumCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomTypeEnum_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomTypeEnum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomTypeEnum_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_CustomTypeEnum_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_CustomTypeEnum_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_CustomTypeEnum_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_CustomTypeEnum_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_CustomTypeEnum_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_CustomTypeEnum_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_CustomTypeEnum_systemInternalID(ctx, field)
			case "objectType":
				return ec.fieldContext_CustomTypeEnum_objectType(ctx, field)
			case "field":
				return ec.fieldContext_CustomTypeEnum_field(ctx, field)
			case "name":
				return ec.fieldContext_CustomTypeEnum_name(ctx, field)
			case "description":
				return ec.fieldContext_CustomTypeEnum_description(ctx, field)
			case "systemGenerated":
				return ec.fieldContext_CustomTypeEnum_systemGenerated(ctx, field)
			case "owner":
				return ec.fieldContext_CustomTypeEnum_owner(ctx, field)
			case "tasks":
				return ec.fieldContext_CustomTypeEnum_tasks(ctx, field)
			case "controls":
				return ec.fieldContext_CustomTypeEnum_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_CustomTypeEnum_subcontrols(ctx, field)
			case "risks":
				return ec.fieldContext_CustomTypeEnum_risks(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_CustomTypeEnum_internalPolicies(ctx, field)
			case "procedures":
				return ec.fieldContext_CustomTypeEnum_procedures(ctx, field)
			case "actionPlans":
				return ec.fieldContext_CustomTypeEnum_actionPlans(ctx, field)
			case "programs":
				return ec.fieldContext_CustomTypeEnum_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomTypeEnum", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomTypeEnumDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.CustomTypeEnumDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CustomTypeEnumDeletePayload_deletedID,
		func(ctx context.Context) (any, error) {
			return obj.DeletedID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CustomTypeEnumDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomTypeEnumDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomTypeEnumUpdatePayload_customTypeEnum(ctx context.Context, field graphql.CollectedField, obj *model.CustomTypeEnumUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CustomTypeEnumUpdatePayload_customTypeEnum,
		func(ctx context.Context) (any, error) {
			return obj.CustomTypeEnum, nil
		},
		nil,
		ec.marshalNCustomTypeEnum2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCustomTypeEnum,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CustomTypeEnumUpdatePayload_customTypeEnum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomTypeEnumUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomTypeEnum_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomTypeEnum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomTypeEnum_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_CustomTypeEnum_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_CustomTypeEnum_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_CustomTypeEnum_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_CustomTypeEnum_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_CustomTypeEnum_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_CustomTypeEnum_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_CustomTypeEnum_systemInternalID(ctx, field)
			case "objectType":
				return ec.fieldContext_CustomTypeEnum_objectType(ctx, field)
			case "field":
				return ec.fieldContext_CustomTypeEnum_field(ctx, field)
			case "name":
				return ec.fieldContext_CustomTypeEnum_name(ctx, field)
			case "description":
				return ec.fieldContext_CustomTypeEnum_description(ctx, field)
			case "systemGenerated":
				return ec.fieldContext_CustomTypeEnum_systemGenerated(ctx, field)
			case "owner":
				return ec.fieldContext_CustomTypeEnum_owner(ctx, field)
			case "tasks":
				return ec.fieldContext_CustomTypeEnum_tasks(ctx, field)
			case "controls":
				return ec.fieldContext_CustomTypeEnum_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_CustomTypeEnum_subcontrols(ctx, field)
			case "risks":
				return ec.fieldContext_CustomTypeEnum_risks(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_CustomTypeEnum_internalPolicies(ctx, field)
			case "procedures":
				return ec.fieldContext_CustomTypeEnum_procedures(ctx, field)
			case "actionPlans":
				return ec.fieldContext_CustomTypeEnum_actionPlans(ctx, field)
			case "programs":
				return ec.fieldContext_CustomTypeEnum_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomTypeEnum", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var customTypeEnumBulkCreatePayloadImplementors = []string{"CustomTypeEnumBulkCreatePayload"}

func (ec *executionContext) _CustomTypeEnumBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomTypeEnumBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customTypeEnumBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomTypeEnumBulkCreatePayload")
		case "customTypeEnums":
			out.Values[i] = ec._CustomTypeEnumBulkCreatePayload_customTypeEnums(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customTypeEnumCreatePayloadImplementors = []string{"CustomTypeEnumCreatePayload"}

func (ec *executionContext) _CustomTypeEnumCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomTypeEnumCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customTypeEnumCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomTypeEnumCreatePayload")
		case "customTypeEnum":
			out.Values[i] = ec._CustomTypeEnumCreatePayload_customTypeEnum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customTypeEnumDeletePayloadImplementors = []string{"CustomTypeEnumDeletePayload"}

func (ec *executionContext) _CustomTypeEnumDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomTypeEnumDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customTypeEnumDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomTypeEnumDeletePayload")
		case "deletedID":
			out.Values[i] = ec._CustomTypeEnumDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customTypeEnumUpdatePayloadImplementors = []string{"CustomTypeEnumUpdatePayload"}

func (ec *executionContext) _CustomTypeEnumUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.CustomTypeEnumUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customTypeEnumUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomTypeEnumUpdatePayload")
		case "customTypeEnum":
			out.Values[i] = ec._CustomTypeEnumUpdatePayload_customTypeEnum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCustomTypeEnumBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.CustomTypeEnumBulkCreatePayload) graphql.Marshaler {
	return ec._CustomTypeEnumBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomTypeEnumBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomTypeEnumBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomTypeEnumBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomTypeEnumCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.CustomTypeEnumCreatePayload) graphql.Marshaler {
	return ec._CustomTypeEnumCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomTypeEnumCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomTypeEnumCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomTypeEnumCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomTypeEnumDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.CustomTypeEnumDeletePayload) graphql.Marshaler {
	return ec._CustomTypeEnumDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomTypeEnumDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomTypeEnumDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomTypeEnumDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomTypeEnumUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.CustomTypeEnumUpdatePayload) graphql.Marshaler {
	return ec._CustomTypeEnumUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomTypeEnumUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCustomTypeEnumUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.CustomTypeEnumUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomTypeEnumUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
