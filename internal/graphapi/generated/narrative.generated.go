// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _NarrativeBulkCreatePayload_narratives(ctx context.Context, field graphql.CollectedField, obj *model.NarrativeBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NarrativeBulkCreatePayload_narratives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Narratives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Narrative)
	fc.Result = res
	return ec.marshalONarrative2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐNarrativeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NarrativeBulkCreatePayload_narratives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NarrativeBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Narrative_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Narrative_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Narrative_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Narrative_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Narrative_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Narrative_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Narrative_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Narrative_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Narrative_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Narrative_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Narrative_name(ctx, field)
			case "description":
				return ec.fieldContext_Narrative_description(ctx, field)
			case "satisfies":
				return ec.fieldContext_Narrative_satisfies(ctx, field)
			case "details":
				return ec.fieldContext_Narrative_details(ctx, field)
			case "owner":
				return ec.fieldContext_Narrative_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Narrative_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Narrative_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Narrative_viewers(ctx, field)
			case "internalPolicy":
				return ec.fieldContext_Narrative_internalPolicy(ctx, field)
			case "control":
				return ec.fieldContext_Narrative_control(ctx, field)
			case "procedure":
				return ec.fieldContext_Narrative_procedure(ctx, field)
			case "controlObjective":
				return ec.fieldContext_Narrative_controlObjective(ctx, field)
			case "programs":
				return ec.fieldContext_Narrative_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Narrative", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NarrativeCreatePayload_narrative(ctx context.Context, field graphql.CollectedField, obj *model.NarrativeCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NarrativeCreatePayload_narrative(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Narrative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Narrative)
	fc.Result = res
	return ec.marshalNNarrative2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NarrativeCreatePayload_narrative(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NarrativeCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Narrative_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Narrative_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Narrative_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Narrative_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Narrative_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Narrative_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Narrative_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Narrative_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Narrative_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Narrative_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Narrative_name(ctx, field)
			case "description":
				return ec.fieldContext_Narrative_description(ctx, field)
			case "satisfies":
				return ec.fieldContext_Narrative_satisfies(ctx, field)
			case "details":
				return ec.fieldContext_Narrative_details(ctx, field)
			case "owner":
				return ec.fieldContext_Narrative_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Narrative_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Narrative_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Narrative_viewers(ctx, field)
			case "internalPolicy":
				return ec.fieldContext_Narrative_internalPolicy(ctx, field)
			case "control":
				return ec.fieldContext_Narrative_control(ctx, field)
			case "procedure":
				return ec.fieldContext_Narrative_procedure(ctx, field)
			case "controlObjective":
				return ec.fieldContext_Narrative_controlObjective(ctx, field)
			case "programs":
				return ec.fieldContext_Narrative_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Narrative", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NarrativeDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.NarrativeDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NarrativeDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NarrativeDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NarrativeDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NarrativeUpdatePayload_narrative(ctx context.Context, field graphql.CollectedField, obj *model.NarrativeUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NarrativeUpdatePayload_narrative(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Narrative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Narrative)
	fc.Result = res
	return ec.marshalNNarrative2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NarrativeUpdatePayload_narrative(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NarrativeUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Narrative_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Narrative_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Narrative_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Narrative_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Narrative_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Narrative_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Narrative_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Narrative_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Narrative_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Narrative_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Narrative_name(ctx, field)
			case "description":
				return ec.fieldContext_Narrative_description(ctx, field)
			case "satisfies":
				return ec.fieldContext_Narrative_satisfies(ctx, field)
			case "details":
				return ec.fieldContext_Narrative_details(ctx, field)
			case "owner":
				return ec.fieldContext_Narrative_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Narrative_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Narrative_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Narrative_viewers(ctx, field)
			case "internalPolicy":
				return ec.fieldContext_Narrative_internalPolicy(ctx, field)
			case "control":
				return ec.fieldContext_Narrative_control(ctx, field)
			case "procedure":
				return ec.fieldContext_Narrative_procedure(ctx, field)
			case "controlObjective":
				return ec.fieldContext_Narrative_controlObjective(ctx, field)
			case "programs":
				return ec.fieldContext_Narrative_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Narrative", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var narrativeBulkCreatePayloadImplementors = []string{"NarrativeBulkCreatePayload"}

func (ec *executionContext) _NarrativeBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.NarrativeBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, narrativeBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NarrativeBulkCreatePayload")
		case "narratives":
			out.Values[i] = ec._NarrativeBulkCreatePayload_narratives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var narrativeCreatePayloadImplementors = []string{"NarrativeCreatePayload"}

func (ec *executionContext) _NarrativeCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.NarrativeCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, narrativeCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NarrativeCreatePayload")
		case "narrative":
			out.Values[i] = ec._NarrativeCreatePayload_narrative(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var narrativeDeletePayloadImplementors = []string{"NarrativeDeletePayload"}

func (ec *executionContext) _NarrativeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.NarrativeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, narrativeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NarrativeDeletePayload")
		case "deletedID":
			out.Values[i] = ec._NarrativeDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var narrativeUpdatePayloadImplementors = []string{"NarrativeUpdatePayload"}

func (ec *executionContext) _NarrativeUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.NarrativeUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, narrativeUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NarrativeUpdatePayload")
		case "narrative":
			out.Values[i] = ec._NarrativeUpdatePayload_narrative(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNNarrativeBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.NarrativeBulkCreatePayload) graphql.Marshaler {
	return ec._NarrativeBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNNarrativeBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.NarrativeBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NarrativeBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNNarrativeCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.NarrativeCreatePayload) graphql.Marshaler {
	return ec._NarrativeCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNNarrativeCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.NarrativeCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NarrativeCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNNarrativeDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.NarrativeDeletePayload) graphql.Marshaler {
	return ec._NarrativeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNNarrativeDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.NarrativeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NarrativeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNNarrativeUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.NarrativeUpdatePayload) graphql.Marshaler {
	return ec._NarrativeUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNNarrativeUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.NarrativeUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NarrativeUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
