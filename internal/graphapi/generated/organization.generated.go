// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _OrganizationBulkCreatePayload_organizations(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationBulkCreatePayload_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organizations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationBulkCreatePayload_organizations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Organization_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Organization_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Organization_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Organization_deletedBy(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "personalOrg":
				return ec.fieldContext_Organization_personalOrg(ctx, field)
			case "avatarRemoteURL":
				return ec.fieldContext_Organization_avatarRemoteURL(ctx, field)
			case "avatarLocalFileID":
				return ec.fieldContext_Organization_avatarLocalFileID(ctx, field)
			case "avatarUpdatedAt":
				return ec.fieldContext_Organization_avatarUpdatedAt(ctx, field)
			case "dedicatedDb":
				return ec.fieldContext_Organization_dedicatedDb(ctx, field)
			case "controlCreators":
				return ec.fieldContext_Organization_controlCreators(ctx, field)
			case "controlObjectiveCreators":
				return ec.fieldContext_Organization_controlObjectiveCreators(ctx, field)
			case "groupCreators":
				return ec.fieldContext_Organization_groupCreators(ctx, field)
			case "internalPolicyCreators":
				return ec.fieldContext_Organization_internalPolicyCreators(ctx, field)
			case "narrativeCreators":
				return ec.fieldContext_Organization_narrativeCreators(ctx, field)
			case "procedureCreators":
				return ec.fieldContext_Organization_procedureCreators(ctx, field)
			case "programCreators":
				return ec.fieldContext_Organization_programCreators(ctx, field)
			case "riskCreators":
				return ec.fieldContext_Organization_riskCreators(ctx, field)
			case "templateCreators":
				return ec.fieldContext_Organization_templateCreators(ctx, field)
			case "parent":
				return ec.fieldContext_Organization_parent(ctx, field)
			case "children":
				return ec.fieldContext_Organization_children(ctx, field)
			case "setting":
				return ec.fieldContext_Organization_setting(ctx, field)
			case "personalAccessTokens":
				return ec.fieldContext_Organization_personalAccessTokens(ctx, field)
			case "apiTokens":
				return ec.fieldContext_Organization_apiTokens(ctx, field)
			case "users":
				return ec.fieldContext_Organization_users(ctx, field)
			case "files":
				return ec.fieldContext_Organization_files(ctx, field)
			case "events":
				return ec.fieldContext_Organization_events(ctx, field)
			case "secrets":
				return ec.fieldContext_Organization_secrets(ctx, field)
			case "avatarFile":
				return ec.fieldContext_Organization_avatarFile(ctx, field)
			case "groups":
				return ec.fieldContext_Organization_groups(ctx, field)
			case "templates":
				return ec.fieldContext_Organization_templates(ctx, field)
			case "integrations":
				return ec.fieldContext_Organization_integrations(ctx, field)
			case "documentData":
				return ec.fieldContext_Organization_documentData(ctx, field)
			case "orgSubscriptions":
				return ec.fieldContext_Organization_orgSubscriptions(ctx, field)
			case "invites":
				return ec.fieldContext_Organization_invites(ctx, field)
			case "subscribers":
				return ec.fieldContext_Organization_subscribers(ctx, field)
			case "entities":
				return ec.fieldContext_Organization_entities(ctx, field)
			case "entityTypes":
				return ec.fieldContext_Organization_entityTypes(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "tasks":
				return ec.fieldContext_Organization_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Organization_programs(ctx, field)
			case "procedures":
				return ec.fieldContext_Organization_procedures(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Organization_internalPolicies(ctx, field)
			case "risks":
				return ec.fieldContext_Organization_risks(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Organization_controlObjectives(ctx, field)
			case "narratives":
				return ec.fieldContext_Organization_narratives(ctx, field)
			case "controls":
				return ec.fieldContext_Organization_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Organization_subcontrols(ctx, field)
			case "evidence":
				return ec.fieldContext_Organization_evidence(ctx, field)
			case "standards":
				return ec.fieldContext_Organization_standards(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Organization_actionPlans(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationCreatePayload_organization(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationCreatePayload_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationCreatePayload_organization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Organization_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Organization_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Organization_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Organization_deletedBy(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "personalOrg":
				return ec.fieldContext_Organization_personalOrg(ctx, field)
			case "avatarRemoteURL":
				return ec.fieldContext_Organization_avatarRemoteURL(ctx, field)
			case "avatarLocalFileID":
				return ec.fieldContext_Organization_avatarLocalFileID(ctx, field)
			case "avatarUpdatedAt":
				return ec.fieldContext_Organization_avatarUpdatedAt(ctx, field)
			case "dedicatedDb":
				return ec.fieldContext_Organization_dedicatedDb(ctx, field)
			case "controlCreators":
				return ec.fieldContext_Organization_controlCreators(ctx, field)
			case "controlObjectiveCreators":
				return ec.fieldContext_Organization_controlObjectiveCreators(ctx, field)
			case "groupCreators":
				return ec.fieldContext_Organization_groupCreators(ctx, field)
			case "internalPolicyCreators":
				return ec.fieldContext_Organization_internalPolicyCreators(ctx, field)
			case "narrativeCreators":
				return ec.fieldContext_Organization_narrativeCreators(ctx, field)
			case "procedureCreators":
				return ec.fieldContext_Organization_procedureCreators(ctx, field)
			case "programCreators":
				return ec.fieldContext_Organization_programCreators(ctx, field)
			case "riskCreators":
				return ec.fieldContext_Organization_riskCreators(ctx, field)
			case "templateCreators":
				return ec.fieldContext_Organization_templateCreators(ctx, field)
			case "parent":
				return ec.fieldContext_Organization_parent(ctx, field)
			case "children":
				return ec.fieldContext_Organization_children(ctx, field)
			case "setting":
				return ec.fieldContext_Organization_setting(ctx, field)
			case "personalAccessTokens":
				return ec.fieldContext_Organization_personalAccessTokens(ctx, field)
			case "apiTokens":
				return ec.fieldContext_Organization_apiTokens(ctx, field)
			case "users":
				return ec.fieldContext_Organization_users(ctx, field)
			case "files":
				return ec.fieldContext_Organization_files(ctx, field)
			case "events":
				return ec.fieldContext_Organization_events(ctx, field)
			case "secrets":
				return ec.fieldContext_Organization_secrets(ctx, field)
			case "avatarFile":
				return ec.fieldContext_Organization_avatarFile(ctx, field)
			case "groups":
				return ec.fieldContext_Organization_groups(ctx, field)
			case "templates":
				return ec.fieldContext_Organization_templates(ctx, field)
			case "integrations":
				return ec.fieldContext_Organization_integrations(ctx, field)
			case "documentData":
				return ec.fieldContext_Organization_documentData(ctx, field)
			case "orgSubscriptions":
				return ec.fieldContext_Organization_orgSubscriptions(ctx, field)
			case "invites":
				return ec.fieldContext_Organization_invites(ctx, field)
			case "subscribers":
				return ec.fieldContext_Organization_subscribers(ctx, field)
			case "entities":
				return ec.fieldContext_Organization_entities(ctx, field)
			case "entityTypes":
				return ec.fieldContext_Organization_entityTypes(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "tasks":
				return ec.fieldContext_Organization_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Organization_programs(ctx, field)
			case "procedures":
				return ec.fieldContext_Organization_procedures(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Organization_internalPolicies(ctx, field)
			case "risks":
				return ec.fieldContext_Organization_risks(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Organization_controlObjectives(ctx, field)
			case "narratives":
				return ec.fieldContext_Organization_narratives(ctx, field)
			case "controls":
				return ec.fieldContext_Organization_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Organization_subcontrols(ctx, field)
			case "evidence":
				return ec.fieldContext_Organization_evidence(ctx, field)
			case "standards":
				return ec.fieldContext_Organization_standards(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Organization_actionPlans(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUpdatePayload_organization(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUpdatePayload_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUpdatePayload_organization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Organization_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Organization_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Organization_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Organization_deletedBy(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "personalOrg":
				return ec.fieldContext_Organization_personalOrg(ctx, field)
			case "avatarRemoteURL":
				return ec.fieldContext_Organization_avatarRemoteURL(ctx, field)
			case "avatarLocalFileID":
				return ec.fieldContext_Organization_avatarLocalFileID(ctx, field)
			case "avatarUpdatedAt":
				return ec.fieldContext_Organization_avatarUpdatedAt(ctx, field)
			case "dedicatedDb":
				return ec.fieldContext_Organization_dedicatedDb(ctx, field)
			case "controlCreators":
				return ec.fieldContext_Organization_controlCreators(ctx, field)
			case "controlObjectiveCreators":
				return ec.fieldContext_Organization_controlObjectiveCreators(ctx, field)
			case "groupCreators":
				return ec.fieldContext_Organization_groupCreators(ctx, field)
			case "internalPolicyCreators":
				return ec.fieldContext_Organization_internalPolicyCreators(ctx, field)
			case "narrativeCreators":
				return ec.fieldContext_Organization_narrativeCreators(ctx, field)
			case "procedureCreators":
				return ec.fieldContext_Organization_procedureCreators(ctx, field)
			case "programCreators":
				return ec.fieldContext_Organization_programCreators(ctx, field)
			case "riskCreators":
				return ec.fieldContext_Organization_riskCreators(ctx, field)
			case "templateCreators":
				return ec.fieldContext_Organization_templateCreators(ctx, field)
			case "parent":
				return ec.fieldContext_Organization_parent(ctx, field)
			case "children":
				return ec.fieldContext_Organization_children(ctx, field)
			case "setting":
				return ec.fieldContext_Organization_setting(ctx, field)
			case "personalAccessTokens":
				return ec.fieldContext_Organization_personalAccessTokens(ctx, field)
			case "apiTokens":
				return ec.fieldContext_Organization_apiTokens(ctx, field)
			case "users":
				return ec.fieldContext_Organization_users(ctx, field)
			case "files":
				return ec.fieldContext_Organization_files(ctx, field)
			case "events":
				return ec.fieldContext_Organization_events(ctx, field)
			case "secrets":
				return ec.fieldContext_Organization_secrets(ctx, field)
			case "avatarFile":
				return ec.fieldContext_Organization_avatarFile(ctx, field)
			case "groups":
				return ec.fieldContext_Organization_groups(ctx, field)
			case "templates":
				return ec.fieldContext_Organization_templates(ctx, field)
			case "integrations":
				return ec.fieldContext_Organization_integrations(ctx, field)
			case "documentData":
				return ec.fieldContext_Organization_documentData(ctx, field)
			case "orgSubscriptions":
				return ec.fieldContext_Organization_orgSubscriptions(ctx, field)
			case "invites":
				return ec.fieldContext_Organization_invites(ctx, field)
			case "subscribers":
				return ec.fieldContext_Organization_subscribers(ctx, field)
			case "entities":
				return ec.fieldContext_Organization_entities(ctx, field)
			case "entityTypes":
				return ec.fieldContext_Organization_entityTypes(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "tasks":
				return ec.fieldContext_Organization_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Organization_programs(ctx, field)
			case "procedures":
				return ec.fieldContext_Organization_procedures(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Organization_internalPolicies(ctx, field)
			case "risks":
				return ec.fieldContext_Organization_risks(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Organization_controlObjectives(ctx, field)
			case "narratives":
				return ec.fieldContext_Organization_narratives(ctx, field)
			case "controls":
				return ec.fieldContext_Organization_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Organization_subcontrols(ctx, field)
			case "evidence":
				return ec.fieldContext_Organization_evidence(ctx, field)
			case "standards":
				return ec.fieldContext_Organization_standards(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Organization_actionPlans(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var organizationBulkCreatePayloadImplementors = []string{"OrganizationBulkCreatePayload"}

func (ec *executionContext) _OrganizationBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationBulkCreatePayload")
		case "organizations":
			out.Values[i] = ec._OrganizationBulkCreatePayload_organizations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationCreatePayloadImplementors = []string{"OrganizationCreatePayload"}

func (ec *executionContext) _OrganizationCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationCreatePayload")
		case "organization":
			out.Values[i] = ec._OrganizationCreatePayload_organization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationDeletePayloadImplementors = []string{"OrganizationDeletePayload"}

func (ec *executionContext) _OrganizationDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationDeletePayload")
		case "deletedID":
			out.Values[i] = ec._OrganizationDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationUpdatePayloadImplementors = []string{"OrganizationUpdatePayload"}

func (ec *executionContext) _OrganizationUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationUpdatePayload")
		case "organization":
			out.Values[i] = ec._OrganizationUpdatePayload_organization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNOrganizationCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.OrganizationCreatePayload) graphql.Marshaler {
	return ec._OrganizationCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.OrganizationDeletePayload) graphql.Marshaler {
	return ec._OrganizationDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.OrganizationUpdatePayload) graphql.Marshaler {
	return ec._OrganizationUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
