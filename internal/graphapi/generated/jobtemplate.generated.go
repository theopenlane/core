// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _JobTemplateBulkCreatePayload_jobTemplates(ctx context.Context, field graphql.CollectedField, obj *model.JobTemplateBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_JobTemplateBulkCreatePayload_jobTemplates,
		func(ctx context.Context) (any, error) { return obj.JobTemplates, nil },
		nil,
		ec.marshalOJobTemplate2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐJobTemplateᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_JobTemplateBulkCreatePayload_jobTemplates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobTemplateBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobTemplate_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_JobTemplate_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_JobTemplate_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_JobTemplate_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_JobTemplate_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_JobTemplate_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_JobTemplate_systemOwned(ctx, field)
			case "title":
				return ec.fieldContext_JobTemplate_title(ctx, field)
			case "description":
				return ec.fieldContext_JobTemplate_description(ctx, field)
			case "platform":
				return ec.fieldContext_JobTemplate_platform(ctx, field)
			case "downloadURL":
				return ec.fieldContext_JobTemplate_downloadURL(ctx, field)
			case "configuration":
				return ec.fieldContext_JobTemplate_configuration(ctx, field)
			case "cron":
				return ec.fieldContext_JobTemplate_cron(ctx, field)
			case "owner":
				return ec.fieldContext_JobTemplate_owner(ctx, field)
			case "scheduledJobs":
				return ec.fieldContext_JobTemplate_scheduledJobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobTemplateCreatePayload_jobTemplate(ctx context.Context, field graphql.CollectedField, obj *model.JobTemplateCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_JobTemplateCreatePayload_jobTemplate,
		func(ctx context.Context) (any, error) { return obj.JobTemplate, nil },
		nil,
		ec.marshalNJobTemplate2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐJobTemplate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_JobTemplateCreatePayload_jobTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobTemplateCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobTemplate_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_JobTemplate_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_JobTemplate_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_JobTemplate_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_JobTemplate_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_JobTemplate_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_JobTemplate_systemOwned(ctx, field)
			case "title":
				return ec.fieldContext_JobTemplate_title(ctx, field)
			case "description":
				return ec.fieldContext_JobTemplate_description(ctx, field)
			case "platform":
				return ec.fieldContext_JobTemplate_platform(ctx, field)
			case "downloadURL":
				return ec.fieldContext_JobTemplate_downloadURL(ctx, field)
			case "configuration":
				return ec.fieldContext_JobTemplate_configuration(ctx, field)
			case "cron":
				return ec.fieldContext_JobTemplate_cron(ctx, field)
			case "owner":
				return ec.fieldContext_JobTemplate_owner(ctx, field)
			case "scheduledJobs":
				return ec.fieldContext_JobTemplate_scheduledJobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobTemplateDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.JobTemplateDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_JobTemplateDeletePayload_deletedID,
		func(ctx context.Context) (any, error) { return obj.DeletedID, nil },
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_JobTemplateDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobTemplateDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobTemplateUpdatePayload_jobTemplate(ctx context.Context, field graphql.CollectedField, obj *model.JobTemplateUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_JobTemplateUpdatePayload_jobTemplate,
		func(ctx context.Context) (any, error) { return obj.JobTemplate, nil },
		nil,
		ec.marshalNJobTemplate2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐJobTemplate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_JobTemplateUpdatePayload_jobTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobTemplateUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobTemplate_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_JobTemplate_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_JobTemplate_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_JobTemplate_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_JobTemplate_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_JobTemplate_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_JobTemplate_systemOwned(ctx, field)
			case "title":
				return ec.fieldContext_JobTemplate_title(ctx, field)
			case "description":
				return ec.fieldContext_JobTemplate_description(ctx, field)
			case "platform":
				return ec.fieldContext_JobTemplate_platform(ctx, field)
			case "downloadURL":
				return ec.fieldContext_JobTemplate_downloadURL(ctx, field)
			case "configuration":
				return ec.fieldContext_JobTemplate_configuration(ctx, field)
			case "cron":
				return ec.fieldContext_JobTemplate_cron(ctx, field)
			case "owner":
				return ec.fieldContext_JobTemplate_owner(ctx, field)
			case "scheduledJobs":
				return ec.fieldContext_JobTemplate_scheduledJobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobTemplate", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var jobTemplateBulkCreatePayloadImplementors = []string{"JobTemplateBulkCreatePayload"}

func (ec *executionContext) _JobTemplateBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.JobTemplateBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobTemplateBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobTemplateBulkCreatePayload")
		case "jobTemplates":
			out.Values[i] = ec._JobTemplateBulkCreatePayload_jobTemplates(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobTemplateCreatePayloadImplementors = []string{"JobTemplateCreatePayload"}

func (ec *executionContext) _JobTemplateCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.JobTemplateCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobTemplateCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobTemplateCreatePayload")
		case "jobTemplate":
			out.Values[i] = ec._JobTemplateCreatePayload_jobTemplate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobTemplateDeletePayloadImplementors = []string{"JobTemplateDeletePayload"}

func (ec *executionContext) _JobTemplateDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.JobTemplateDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobTemplateDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobTemplateDeletePayload")
		case "deletedID":
			out.Values[i] = ec._JobTemplateDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobTemplateUpdatePayloadImplementors = []string{"JobTemplateUpdatePayload"}

func (ec *executionContext) _JobTemplateUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.JobTemplateUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobTemplateUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobTemplateUpdatePayload")
		case "jobTemplate":
			out.Values[i] = ec._JobTemplateUpdatePayload_jobTemplate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNJobTemplateBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.JobTemplateBulkCreatePayload) graphql.Marshaler {
	return ec._JobTemplateBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobTemplateBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.JobTemplateBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JobTemplateBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNJobTemplateCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.JobTemplateCreatePayload) graphql.Marshaler {
	return ec._JobTemplateCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobTemplateCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.JobTemplateCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JobTemplateCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNJobTemplateDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.JobTemplateDeletePayload) graphql.Marshaler {
	return ec._JobTemplateDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobTemplateDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.JobTemplateDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JobTemplateDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNJobTemplateUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.JobTemplateUpdatePayload) graphql.Marshaler {
	return ec._JobTemplateUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobTemplateUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐJobTemplateUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.JobTemplateUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JobTemplateUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
