// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _DNSVerificationBulkCreatePayload_dnsVerifications(ctx context.Context, field graphql.CollectedField, obj *model.DNSVerificationBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DNSVerificationBulkCreatePayload_dnsVerifications,
		func(ctx context.Context) (any, error) { return obj.DNSVerifications, nil },
		nil,
		ec.marshalODNSVerification2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDNSVerificationᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_DNSVerificationBulkCreatePayload_dnsVerifications(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DNSVerificationBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DNSVerification_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_DNSVerification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DNSVerification_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DNSVerification_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DNSVerification_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_DNSVerification_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_DNSVerification_ownerID(ctx, field)
			case "cloudflareHostnameID":
				return ec.fieldContext_DNSVerification_cloudflareHostnameID(ctx, field)
			case "dnsTxtRecord":
				return ec.fieldContext_DNSVerification_dnsTxtRecord(ctx, field)
			case "dnsTxtValue":
				return ec.fieldContext_DNSVerification_dnsTxtValue(ctx, field)
			case "dnsVerificationStatus":
				return ec.fieldContext_DNSVerification_dnsVerificationStatus(ctx, field)
			case "dnsVerificationStatusReason":
				return ec.fieldContext_DNSVerification_dnsVerificationStatusReason(ctx, field)
			case "acmeChallengePath":
				return ec.fieldContext_DNSVerification_acmeChallengePath(ctx, field)
			case "expectedAcmeChallengeValue":
				return ec.fieldContext_DNSVerification_expectedAcmeChallengeValue(ctx, field)
			case "acmeChallengeStatus":
				return ec.fieldContext_DNSVerification_acmeChallengeStatus(ctx, field)
			case "acmeChallengeStatusReason":
				return ec.fieldContext_DNSVerification_acmeChallengeStatusReason(ctx, field)
			case "owner":
				return ec.fieldContext_DNSVerification_owner(ctx, field)
			case "customDomains":
				return ec.fieldContext_DNSVerification_customDomains(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DNSVerification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DNSVerificationCreatePayload_dnsVerification(ctx context.Context, field graphql.CollectedField, obj *model.DNSVerificationCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DNSVerificationCreatePayload_dnsVerification,
		func(ctx context.Context) (any, error) { return obj.DNSVerification, nil },
		nil,
		ec.marshalNDNSVerification2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDNSVerification,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DNSVerificationCreatePayload_dnsVerification(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DNSVerificationCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DNSVerification_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_DNSVerification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DNSVerification_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DNSVerification_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DNSVerification_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_DNSVerification_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_DNSVerification_ownerID(ctx, field)
			case "cloudflareHostnameID":
				return ec.fieldContext_DNSVerification_cloudflareHostnameID(ctx, field)
			case "dnsTxtRecord":
				return ec.fieldContext_DNSVerification_dnsTxtRecord(ctx, field)
			case "dnsTxtValue":
				return ec.fieldContext_DNSVerification_dnsTxtValue(ctx, field)
			case "dnsVerificationStatus":
				return ec.fieldContext_DNSVerification_dnsVerificationStatus(ctx, field)
			case "dnsVerificationStatusReason":
				return ec.fieldContext_DNSVerification_dnsVerificationStatusReason(ctx, field)
			case "acmeChallengePath":
				return ec.fieldContext_DNSVerification_acmeChallengePath(ctx, field)
			case "expectedAcmeChallengeValue":
				return ec.fieldContext_DNSVerification_expectedAcmeChallengeValue(ctx, field)
			case "acmeChallengeStatus":
				return ec.fieldContext_DNSVerification_acmeChallengeStatus(ctx, field)
			case "acmeChallengeStatusReason":
				return ec.fieldContext_DNSVerification_acmeChallengeStatusReason(ctx, field)
			case "owner":
				return ec.fieldContext_DNSVerification_owner(ctx, field)
			case "customDomains":
				return ec.fieldContext_DNSVerification_customDomains(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DNSVerification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DNSVerificationDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.DNSVerificationDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DNSVerificationDeletePayload_deletedID,
		func(ctx context.Context) (any, error) { return obj.DeletedID, nil },
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DNSVerificationDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DNSVerificationDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DNSVerificationUpdatePayload_dnsVerification(ctx context.Context, field graphql.CollectedField, obj *model.DNSVerificationUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DNSVerificationUpdatePayload_dnsVerification,
		func(ctx context.Context) (any, error) { return obj.DNSVerification, nil },
		nil,
		ec.marshalNDNSVerification2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDNSVerification,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DNSVerificationUpdatePayload_dnsVerification(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DNSVerificationUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DNSVerification_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_DNSVerification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DNSVerification_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DNSVerification_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DNSVerification_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_DNSVerification_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_DNSVerification_ownerID(ctx, field)
			case "cloudflareHostnameID":
				return ec.fieldContext_DNSVerification_cloudflareHostnameID(ctx, field)
			case "dnsTxtRecord":
				return ec.fieldContext_DNSVerification_dnsTxtRecord(ctx, field)
			case "dnsTxtValue":
				return ec.fieldContext_DNSVerification_dnsTxtValue(ctx, field)
			case "dnsVerificationStatus":
				return ec.fieldContext_DNSVerification_dnsVerificationStatus(ctx, field)
			case "dnsVerificationStatusReason":
				return ec.fieldContext_DNSVerification_dnsVerificationStatusReason(ctx, field)
			case "acmeChallengePath":
				return ec.fieldContext_DNSVerification_acmeChallengePath(ctx, field)
			case "expectedAcmeChallengeValue":
				return ec.fieldContext_DNSVerification_expectedAcmeChallengeValue(ctx, field)
			case "acmeChallengeStatus":
				return ec.fieldContext_DNSVerification_acmeChallengeStatus(ctx, field)
			case "acmeChallengeStatusReason":
				return ec.fieldContext_DNSVerification_acmeChallengeStatusReason(ctx, field)
			case "owner":
				return ec.fieldContext_DNSVerification_owner(ctx, field)
			case "customDomains":
				return ec.fieldContext_DNSVerification_customDomains(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DNSVerification", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var dNSVerificationBulkCreatePayloadImplementors = []string{"DNSVerificationBulkCreatePayload"}

func (ec *executionContext) _DNSVerificationBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DNSVerificationBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dNSVerificationBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DNSVerificationBulkCreatePayload")
		case "dnsVerifications":
			out.Values[i] = ec._DNSVerificationBulkCreatePayload_dnsVerifications(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dNSVerificationCreatePayloadImplementors = []string{"DNSVerificationCreatePayload"}

func (ec *executionContext) _DNSVerificationCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DNSVerificationCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dNSVerificationCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DNSVerificationCreatePayload")
		case "dnsVerification":
			out.Values[i] = ec._DNSVerificationCreatePayload_dnsVerification(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dNSVerificationDeletePayloadImplementors = []string{"DNSVerificationDeletePayload"}

func (ec *executionContext) _DNSVerificationDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DNSVerificationDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dNSVerificationDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DNSVerificationDeletePayload")
		case "deletedID":
			out.Values[i] = ec._DNSVerificationDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dNSVerificationUpdatePayloadImplementors = []string{"DNSVerificationUpdatePayload"}

func (ec *executionContext) _DNSVerificationUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DNSVerificationUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dNSVerificationUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DNSVerificationUpdatePayload")
		case "dnsVerification":
			out.Values[i] = ec._DNSVerificationUpdatePayload_dnsVerification(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNDNSVerificationBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.DNSVerificationBulkCreatePayload) graphql.Marshaler {
	return ec._DNSVerificationBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDNSVerificationBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.DNSVerificationBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DNSVerificationBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNDNSVerificationCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.DNSVerificationCreatePayload) graphql.Marshaler {
	return ec._DNSVerificationCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDNSVerificationCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.DNSVerificationCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DNSVerificationCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNDNSVerificationDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.DNSVerificationDeletePayload) graphql.Marshaler {
	return ec._DNSVerificationDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDNSVerificationDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.DNSVerificationDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DNSVerificationDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNDNSVerificationUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.DNSVerificationUpdatePayload) graphql.Marshaler {
	return ec._DNSVerificationUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDNSVerificationUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDNSVerificationUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.DNSVerificationUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DNSVerificationUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
