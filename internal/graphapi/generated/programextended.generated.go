// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateControlWithSubcontrolsInput(ctx context.Context, obj interface{}) (model.CreateControlWithSubcontrolsInput, error) {
	var it model.CreateControlWithSubcontrolsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"control", "subcontrols"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "control":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control"))
			data, err := ec.unmarshalOCreateControlInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateControlInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Control = data
		case "subcontrols":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subcontrols"))
			data, err := ec.unmarshalOCreateSubcontrolInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateSubcontrolInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subcontrols = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFullProgramInput(ctx context.Context, obj interface{}) (model.CreateFullProgramInput, error) {
	var it model.CreateFullProgramInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"program", "standard", "controls", "risks", "internalPolicies", "procedures", "members"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "program":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("program"))
			data, err := ec.unmarshalNCreateProgramInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateProgramInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Program = data
		case "standard":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard"))
			data, err := ec.unmarshalNCreateStandardInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateStandardInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Standard = data
		case "controls":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("controls"))
			data, err := ec.unmarshalOCreateControlWithSubcontrolsInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateControlWithSubcontrolsInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Controls = data
		case "risks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risks"))
			data, err := ec.unmarshalOCreateRiskInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateRiskInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Risks = data
		case "internalPolicies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalPolicies"))
			data, err := ec.unmarshalOCreateInternalPolicyInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateInternalPolicyInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InternalPolicies = data
		case "procedures":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("procedures"))
			data, err := ec.unmarshalOCreateProcedureInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateProcedureInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Procedures = data
		case "members":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("members"))
			data, err := ec.unmarshalOCreateMemberWithProgramInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateMemberWithProgramInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Members = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMemberWithProgramInput(ctx context.Context, obj interface{}) (model.CreateMemberWithProgramInput, error) {
	var it model.CreateMemberWithProgramInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOProgramMembershipRole2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋpkgᚋenumsᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProgramWithMembersInput(ctx context.Context, obj interface{}) (model.CreateProgramWithMembersInput, error) {
	var it model.CreateProgramWithMembersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"program", "members"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "program":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("program"))
			data, err := ec.unmarshalNCreateProgramInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCreateProgramInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Program = data
		case "members":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("members"))
			data, err := ec.unmarshalOCreateMemberWithProgramInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateMemberWithProgramInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Members = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateControlWithSubcontrolsInput2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateControlWithSubcontrolsInput(ctx context.Context, v interface{}) (model.CreateControlWithSubcontrolsInput, error) {
	res, err := ec.unmarshalInputCreateControlWithSubcontrolsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateControlWithSubcontrolsInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateControlWithSubcontrolsInput(ctx context.Context, v interface{}) (*model.CreateControlWithSubcontrolsInput, error) {
	res, err := ec.unmarshalInputCreateControlWithSubcontrolsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateFullProgramInput2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateFullProgramInput(ctx context.Context, v interface{}) (model.CreateFullProgramInput, error) {
	res, err := ec.unmarshalInputCreateFullProgramInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMemberWithProgramInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateMemberWithProgramInput(ctx context.Context, v interface{}) (*model.CreateMemberWithProgramInput, error) {
	res, err := ec.unmarshalInputCreateMemberWithProgramInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProgramWithMembersInput2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateProgramWithMembersInput(ctx context.Context, v interface{}) (model.CreateProgramWithMembersInput, error) {
	res, err := ec.unmarshalInputCreateProgramWithMembersInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateControlWithSubcontrolsInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateControlWithSubcontrolsInputᚄ(ctx context.Context, v interface{}) ([]*model.CreateControlWithSubcontrolsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CreateControlWithSubcontrolsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateControlWithSubcontrolsInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateControlWithSubcontrolsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCreateMemberWithProgramInput2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateMemberWithProgramInputᚄ(ctx context.Context, v interface{}) ([]*model.CreateMemberWithProgramInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CreateMemberWithProgramInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateMemberWithProgramInput2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateMemberWithProgramInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// endregion ***************************** type.gotpl *****************************
