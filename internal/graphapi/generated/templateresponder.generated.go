// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TemplateResponderBulkCreatePayload_templateResponders(ctx context.Context, field graphql.CollectedField, obj *model.TemplateResponderBulkCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TemplateResponderBulkCreatePayload_templateResponders,
		func(ctx context.Context) (any, error) {
			return obj.TemplateResponders, nil
		},
		nil,
		ec.marshalOTemplateResponder2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateResponderᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TemplateResponderBulkCreatePayload_templateResponders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateResponderBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TemplateResponder_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TemplateResponder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TemplateResponder_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TemplateResponder_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TemplateResponder_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TemplateResponder_ownerID(ctx, field)
			case "assessmentID":
				return ec.fieldContext_TemplateResponder_assessmentID(ctx, field)
			case "email":
				return ec.fieldContext_TemplateResponder_email(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_TemplateResponder_sendAttempts(ctx, field)
			case "status":
				return ec.fieldContext_TemplateResponder_status(ctx, field)
			case "owner":
				return ec.fieldContext_TemplateResponder_owner(ctx, field)
			case "assessment":
				return ec.fieldContext_TemplateResponder_assessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateResponder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateResponderCreatePayload_templateResponder(ctx context.Context, field graphql.CollectedField, obj *model.TemplateResponderCreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TemplateResponderCreatePayload_templateResponder,
		func(ctx context.Context) (any, error) {
			return obj.TemplateResponder, nil
		},
		nil,
		ec.marshalNTemplateResponder2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateResponder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TemplateResponderCreatePayload_templateResponder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateResponderCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TemplateResponder_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TemplateResponder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TemplateResponder_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TemplateResponder_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TemplateResponder_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TemplateResponder_ownerID(ctx, field)
			case "assessmentID":
				return ec.fieldContext_TemplateResponder_assessmentID(ctx, field)
			case "email":
				return ec.fieldContext_TemplateResponder_email(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_TemplateResponder_sendAttempts(ctx, field)
			case "status":
				return ec.fieldContext_TemplateResponder_status(ctx, field)
			case "owner":
				return ec.fieldContext_TemplateResponder_owner(ctx, field)
			case "assessment":
				return ec.fieldContext_TemplateResponder_assessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateResponder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateResponderDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TemplateResponderDeletePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TemplateResponderDeletePayload_deletedID,
		func(ctx context.Context) (any, error) {
			return obj.DeletedID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TemplateResponderDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateResponderDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateResponderUpdatePayload_templateResponder(ctx context.Context, field graphql.CollectedField, obj *model.TemplateResponderUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TemplateResponderUpdatePayload_templateResponder,
		func(ctx context.Context) (any, error) {
			return obj.TemplateResponder, nil
		},
		nil,
		ec.marshalNTemplateResponder2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateResponder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TemplateResponderUpdatePayload_templateResponder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateResponderUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TemplateResponder_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TemplateResponder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TemplateResponder_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TemplateResponder_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TemplateResponder_updatedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_TemplateResponder_ownerID(ctx, field)
			case "assessmentID":
				return ec.fieldContext_TemplateResponder_assessmentID(ctx, field)
			case "email":
				return ec.fieldContext_TemplateResponder_email(ctx, field)
			case "sendAttempts":
				return ec.fieldContext_TemplateResponder_sendAttempts(ctx, field)
			case "status":
				return ec.fieldContext_TemplateResponder_status(ctx, field)
			case "owner":
				return ec.fieldContext_TemplateResponder_owner(ctx, field)
			case "assessment":
				return ec.fieldContext_TemplateResponder_assessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateResponder", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var templateResponderBulkCreatePayloadImplementors = []string{"TemplateResponderBulkCreatePayload"}

func (ec *executionContext) _TemplateResponderBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateResponderBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateResponderBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateResponderBulkCreatePayload")
		case "templateResponders":
			out.Values[i] = ec._TemplateResponderBulkCreatePayload_templateResponders(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateResponderCreatePayloadImplementors = []string{"TemplateResponderCreatePayload"}

func (ec *executionContext) _TemplateResponderCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateResponderCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateResponderCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateResponderCreatePayload")
		case "templateResponder":
			out.Values[i] = ec._TemplateResponderCreatePayload_templateResponder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateResponderDeletePayloadImplementors = []string{"TemplateResponderDeletePayload"}

func (ec *executionContext) _TemplateResponderDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateResponderDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateResponderDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateResponderDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TemplateResponderDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateResponderUpdatePayloadImplementors = []string{"TemplateResponderUpdatePayload"}

func (ec *executionContext) _TemplateResponderUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateResponderUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateResponderUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateResponderUpdatePayload")
		case "templateResponder":
			out.Values[i] = ec._TemplateResponderUpdatePayload_templateResponder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTemplateResponderBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateResponderBulkCreatePayload) graphql.Marshaler {
	return ec._TemplateResponderBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateResponderBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateResponderBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateResponderBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateResponderCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateResponderCreatePayload) graphql.Marshaler {
	return ec._TemplateResponderCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateResponderCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateResponderCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateResponderCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateResponderDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateResponderDeletePayload) graphql.Marshaler {
	return ec._TemplateResponderDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateResponderDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateResponderDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateResponderDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateResponderUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TemplateResponderUpdatePayload) graphql.Marshaler {
	return ec._TemplateResponderUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateResponderUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateResponderUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TemplateResponderUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemplateResponderUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
