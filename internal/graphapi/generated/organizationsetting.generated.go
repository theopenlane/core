// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _OrganizationSettingBulkCreatePayload_organizationSettings(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationSettingBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSettingBulkCreatePayload_organizationSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.OrganizationSetting)
	fc.Result = res
	return ec.marshalOOrganizationSetting2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSettingBulkCreatePayload_organizationSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSettingBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_OrganizationSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_OrganizationSetting_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_OrganizationSetting_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OrganizationSetting_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_OrganizationSetting_deletedBy(ctx, field)
			case "domains":
				return ec.fieldContext_OrganizationSetting_domains(ctx, field)
			case "billingContact":
				return ec.fieldContext_OrganizationSetting_billingContact(ctx, field)
			case "billingEmail":
				return ec.fieldContext_OrganizationSetting_billingEmail(ctx, field)
			case "billingPhone":
				return ec.fieldContext_OrganizationSetting_billingPhone(ctx, field)
			case "billingAddress":
				return ec.fieldContext_OrganizationSetting_billingAddress(ctx, field)
			case "taxIdentifier":
				return ec.fieldContext_OrganizationSetting_taxIdentifier(ctx, field)
			case "geoLocation":
				return ec.fieldContext_OrganizationSetting_geoLocation(ctx, field)
			case "organizationID":
				return ec.fieldContext_OrganizationSetting_organizationID(ctx, field)
			case "stripeID":
				return ec.fieldContext_OrganizationSetting_stripeID(ctx, field)
			case "organization":
				return ec.fieldContext_OrganizationSetting_organization(ctx, field)
			case "files":
				return ec.fieldContext_OrganizationSetting_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSettingCreatePayload_organizationSetting(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationSettingCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSettingCreatePayload_organizationSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.OrganizationSetting)
	fc.Result = res
	return ec.marshalNOrganizationSetting2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSettingCreatePayload_organizationSetting(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSettingCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_OrganizationSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_OrganizationSetting_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_OrganizationSetting_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OrganizationSetting_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_OrganizationSetting_deletedBy(ctx, field)
			case "domains":
				return ec.fieldContext_OrganizationSetting_domains(ctx, field)
			case "billingContact":
				return ec.fieldContext_OrganizationSetting_billingContact(ctx, field)
			case "billingEmail":
				return ec.fieldContext_OrganizationSetting_billingEmail(ctx, field)
			case "billingPhone":
				return ec.fieldContext_OrganizationSetting_billingPhone(ctx, field)
			case "billingAddress":
				return ec.fieldContext_OrganizationSetting_billingAddress(ctx, field)
			case "taxIdentifier":
				return ec.fieldContext_OrganizationSetting_taxIdentifier(ctx, field)
			case "geoLocation":
				return ec.fieldContext_OrganizationSetting_geoLocation(ctx, field)
			case "organizationID":
				return ec.fieldContext_OrganizationSetting_organizationID(ctx, field)
			case "stripeID":
				return ec.fieldContext_OrganizationSetting_stripeID(ctx, field)
			case "organization":
				return ec.fieldContext_OrganizationSetting_organization(ctx, field)
			case "files":
				return ec.fieldContext_OrganizationSetting_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSettingDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationSettingDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSettingDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSettingDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSettingDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSettingUpdatePayload_organizationSetting(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationSettingUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSettingUpdatePayload_organizationSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.OrganizationSetting)
	fc.Result = res
	return ec.marshalNOrganizationSetting2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSettingUpdatePayload_organizationSetting(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSettingUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_OrganizationSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_OrganizationSetting_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_OrganizationSetting_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OrganizationSetting_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_OrganizationSetting_deletedBy(ctx, field)
			case "domains":
				return ec.fieldContext_OrganizationSetting_domains(ctx, field)
			case "billingContact":
				return ec.fieldContext_OrganizationSetting_billingContact(ctx, field)
			case "billingEmail":
				return ec.fieldContext_OrganizationSetting_billingEmail(ctx, field)
			case "billingPhone":
				return ec.fieldContext_OrganizationSetting_billingPhone(ctx, field)
			case "billingAddress":
				return ec.fieldContext_OrganizationSetting_billingAddress(ctx, field)
			case "taxIdentifier":
				return ec.fieldContext_OrganizationSetting_taxIdentifier(ctx, field)
			case "geoLocation":
				return ec.fieldContext_OrganizationSetting_geoLocation(ctx, field)
			case "organizationID":
				return ec.fieldContext_OrganizationSetting_organizationID(ctx, field)
			case "stripeID":
				return ec.fieldContext_OrganizationSetting_stripeID(ctx, field)
			case "organization":
				return ec.fieldContext_OrganizationSetting_organization(ctx, field)
			case "files":
				return ec.fieldContext_OrganizationSetting_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationSetting", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var organizationSettingBulkCreatePayloadImplementors = []string{"OrganizationSettingBulkCreatePayload"}

func (ec *executionContext) _OrganizationSettingBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationSettingBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationSettingBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationSettingBulkCreatePayload")
		case "organizationSettings":
			out.Values[i] = ec._OrganizationSettingBulkCreatePayload_organizationSettings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationSettingCreatePayloadImplementors = []string{"OrganizationSettingCreatePayload"}

func (ec *executionContext) _OrganizationSettingCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationSettingCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationSettingCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationSettingCreatePayload")
		case "organizationSetting":
			out.Values[i] = ec._OrganizationSettingCreatePayload_organizationSetting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationSettingDeletePayloadImplementors = []string{"OrganizationSettingDeletePayload"}

func (ec *executionContext) _OrganizationSettingDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationSettingDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationSettingDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationSettingDeletePayload")
		case "deletedID":
			out.Values[i] = ec._OrganizationSettingDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationSettingUpdatePayloadImplementors = []string{"OrganizationSettingUpdatePayload"}

func (ec *executionContext) _OrganizationSettingUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationSettingUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationSettingUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationSettingUpdatePayload")
		case "organizationSetting":
			out.Values[i] = ec._OrganizationSettingUpdatePayload_organizationSetting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNOrganizationSettingBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.OrganizationSettingBulkCreatePayload) graphql.Marshaler {
	return ec._OrganizationSettingBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationSettingBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationSettingBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationSettingBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationSettingCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.OrganizationSettingCreatePayload) graphql.Marshaler {
	return ec._OrganizationSettingCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationSettingCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationSettingCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationSettingCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationSettingDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.OrganizationSettingDeletePayload) graphql.Marshaler {
	return ec._OrganizationSettingDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationSettingDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationSettingDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationSettingDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationSettingUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.OrganizationSettingUpdatePayload) graphql.Marshaler {
	return ec._OrganizationSettingUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationSettingUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationSettingUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationSettingUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
