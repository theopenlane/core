// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TaskBulkCreatePayload_tasks(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskBulkCreatePayload_tasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Task)
	fc.Result = res
	return ec.marshalOTask2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskBulkCreatePayload_tasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Task_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Task_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Task_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Task_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Task_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Task_ownerID(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "details":
				return ec.fieldContext_Task_details(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "category":
				return ec.fieldContext_Task_category(ctx, field)
			case "due":
				return ec.fieldContext_Task_due(ctx, field)
			case "completed":
				return ec.fieldContext_Task_completed(ctx, field)
			case "assigneeID":
				return ec.fieldContext_Task_assigneeID(ctx, field)
			case "assignerID":
				return ec.fieldContext_Task_assignerID(ctx, field)
			case "owner":
				return ec.fieldContext_Task_owner(ctx, field)
			case "assigner":
				return ec.fieldContext_Task_assigner(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "groups":
				return ec.fieldContext_Task_groups(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Task_internalPolicies(ctx, field)
			case "procedures":
				return ec.fieldContext_Task_procedures(ctx, field)
			case "controls":
				return ec.fieldContext_Task_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Task_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Task_controlObjectives(ctx, field)
			case "programs":
				return ec.fieldContext_Task_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_Task_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskCreatePayload_task(ctx context.Context, field graphql.CollectedField, obj *model.TaskCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskCreatePayload_task(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Task, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Task)
	fc.Result = res
	return ec.marshalNTask2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskCreatePayload_task(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Task_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Task_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Task_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Task_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Task_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Task_ownerID(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "details":
				return ec.fieldContext_Task_details(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "category":
				return ec.fieldContext_Task_category(ctx, field)
			case "due":
				return ec.fieldContext_Task_due(ctx, field)
			case "completed":
				return ec.fieldContext_Task_completed(ctx, field)
			case "assigneeID":
				return ec.fieldContext_Task_assigneeID(ctx, field)
			case "assignerID":
				return ec.fieldContext_Task_assignerID(ctx, field)
			case "owner":
				return ec.fieldContext_Task_owner(ctx, field)
			case "assigner":
				return ec.fieldContext_Task_assigner(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "groups":
				return ec.fieldContext_Task_groups(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Task_internalPolicies(ctx, field)
			case "procedures":
				return ec.fieldContext_Task_procedures(ctx, field)
			case "controls":
				return ec.fieldContext_Task_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Task_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Task_controlObjectives(ctx, field)
			case "programs":
				return ec.fieldContext_Task_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_Task_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.TaskDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskUpdatePayload_task(ctx context.Context, field graphql.CollectedField, obj *model.TaskUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskUpdatePayload_task(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Task, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Task)
	fc.Result = res
	return ec.marshalNTask2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskUpdatePayload_task(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Task_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Task_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Task_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Task_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Task_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Task_ownerID(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "details":
				return ec.fieldContext_Task_details(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "category":
				return ec.fieldContext_Task_category(ctx, field)
			case "due":
				return ec.fieldContext_Task_due(ctx, field)
			case "completed":
				return ec.fieldContext_Task_completed(ctx, field)
			case "assigneeID":
				return ec.fieldContext_Task_assigneeID(ctx, field)
			case "assignerID":
				return ec.fieldContext_Task_assignerID(ctx, field)
			case "owner":
				return ec.fieldContext_Task_owner(ctx, field)
			case "assigner":
				return ec.fieldContext_Task_assigner(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "groups":
				return ec.fieldContext_Task_groups(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Task_internalPolicies(ctx, field)
			case "procedures":
				return ec.fieldContext_Task_procedures(ctx, field)
			case "controls":
				return ec.fieldContext_Task_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Task_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Task_controlObjectives(ctx, field)
			case "programs":
				return ec.fieldContext_Task_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_Task_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var taskBulkCreatePayloadImplementors = []string{"TaskBulkCreatePayload"}

func (ec *executionContext) _TaskBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TaskBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskBulkCreatePayload")
		case "tasks":
			out.Values[i] = ec._TaskBulkCreatePayload_tasks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskCreatePayloadImplementors = []string{"TaskCreatePayload"}

func (ec *executionContext) _TaskCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TaskCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskCreatePayload")
		case "task":
			out.Values[i] = ec._TaskCreatePayload_task(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskDeletePayloadImplementors = []string{"TaskDeletePayload"}

func (ec *executionContext) _TaskDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TaskDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskDeletePayload")
		case "deletedID":
			out.Values[i] = ec._TaskDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskUpdatePayloadImplementors = []string{"TaskUpdatePayload"}

func (ec *executionContext) _TaskUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TaskUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskUpdatePayload")
		case "task":
			out.Values[i] = ec._TaskUpdatePayload_task(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTaskBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TaskBulkCreatePayload) graphql.Marshaler {
	return ec._TaskBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TaskBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TaskCreatePayload) graphql.Marshaler {
	return ec._TaskCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TaskCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.TaskDeletePayload) graphql.Marshaler {
	return ec._TaskDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.TaskDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TaskUpdatePayload) graphql.Marshaler {
	return ec._TaskUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TaskUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
