// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ControlObjectiveBulkCreatePayload_controlObjectives(ctx context.Context, field graphql.CollectedField, obj *model.ControlObjectiveBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlObjectiveBulkCreatePayload_controlObjectives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlObjectives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ControlObjective)
	fc.Result = res
	return ec.marshalOControlObjective2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlObjectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlObjectiveBulkCreatePayload_controlObjectives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlObjectiveBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ControlObjective_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ControlObjective_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ControlObjective_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ControlObjective_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ControlObjective_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ControlObjective_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_ControlObjective_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_ControlObjective_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_ControlObjective_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_ControlObjective_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_ControlObjective_name(ctx, field)
			case "description":
				return ec.fieldContext_ControlObjective_description(ctx, field)
			case "status":
				return ec.fieldContext_ControlObjective_status(ctx, field)
			case "controlObjectiveType":
				return ec.fieldContext_ControlObjective_controlObjectiveType(ctx, field)
			case "version":
				return ec.fieldContext_ControlObjective_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_ControlObjective_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_ControlObjective_family(ctx, field)
			case "class":
				return ec.fieldContext_ControlObjective_class(ctx, field)
			case "source":
				return ec.fieldContext_ControlObjective_source(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_ControlObjective_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_ControlObjective_details(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_ControlObjective_exampleEvidence(ctx, field)
			case "owner":
				return ec.fieldContext_ControlObjective_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_ControlObjective_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_ControlObjective_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_ControlObjective_viewers(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_ControlObjective_internalPolicies(ctx, field)
			case "controls":
				return ec.fieldContext_ControlObjective_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_ControlObjective_procedures(ctx, field)
			case "risks":
				return ec.fieldContext_ControlObjective_risks(ctx, field)
			case "subcontrols":
				return ec.fieldContext_ControlObjective_subcontrols(ctx, field)
			case "standard":
				return ec.fieldContext_ControlObjective_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_ControlObjective_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_ControlObjective_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_ControlObjective_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_ControlObjective_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlObjective", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlObjectiveCreatePayload_controlObjective(ctx context.Context, field graphql.CollectedField, obj *model.ControlObjectiveCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlObjectiveCreatePayload_controlObjective(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlObjective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ControlObjective)
	fc.Result = res
	return ec.marshalNControlObjective2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlObjective(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlObjectiveCreatePayload_controlObjective(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlObjectiveCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ControlObjective_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ControlObjective_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ControlObjective_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ControlObjective_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ControlObjective_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ControlObjective_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_ControlObjective_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_ControlObjective_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_ControlObjective_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_ControlObjective_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_ControlObjective_name(ctx, field)
			case "description":
				return ec.fieldContext_ControlObjective_description(ctx, field)
			case "status":
				return ec.fieldContext_ControlObjective_status(ctx, field)
			case "controlObjectiveType":
				return ec.fieldContext_ControlObjective_controlObjectiveType(ctx, field)
			case "version":
				return ec.fieldContext_ControlObjective_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_ControlObjective_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_ControlObjective_family(ctx, field)
			case "class":
				return ec.fieldContext_ControlObjective_class(ctx, field)
			case "source":
				return ec.fieldContext_ControlObjective_source(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_ControlObjective_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_ControlObjective_details(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_ControlObjective_exampleEvidence(ctx, field)
			case "owner":
				return ec.fieldContext_ControlObjective_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_ControlObjective_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_ControlObjective_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_ControlObjective_viewers(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_ControlObjective_internalPolicies(ctx, field)
			case "controls":
				return ec.fieldContext_ControlObjective_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_ControlObjective_procedures(ctx, field)
			case "risks":
				return ec.fieldContext_ControlObjective_risks(ctx, field)
			case "subcontrols":
				return ec.fieldContext_ControlObjective_subcontrols(ctx, field)
			case "standard":
				return ec.fieldContext_ControlObjective_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_ControlObjective_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_ControlObjective_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_ControlObjective_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_ControlObjective_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlObjective", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlObjectiveDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.ControlObjectiveDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlObjectiveDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlObjectiveDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlObjectiveDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlObjectiveUpdatePayload_controlObjective(ctx context.Context, field graphql.CollectedField, obj *model.ControlObjectiveUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlObjectiveUpdatePayload_controlObjective(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlObjective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ControlObjective)
	fc.Result = res
	return ec.marshalNControlObjective2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlObjective(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlObjectiveUpdatePayload_controlObjective(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlObjectiveUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ControlObjective_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ControlObjective_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ControlObjective_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ControlObjective_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ControlObjective_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ControlObjective_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_ControlObjective_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_ControlObjective_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_ControlObjective_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_ControlObjective_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_ControlObjective_name(ctx, field)
			case "description":
				return ec.fieldContext_ControlObjective_description(ctx, field)
			case "status":
				return ec.fieldContext_ControlObjective_status(ctx, field)
			case "controlObjectiveType":
				return ec.fieldContext_ControlObjective_controlObjectiveType(ctx, field)
			case "version":
				return ec.fieldContext_ControlObjective_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_ControlObjective_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_ControlObjective_family(ctx, field)
			case "class":
				return ec.fieldContext_ControlObjective_class(ctx, field)
			case "source":
				return ec.fieldContext_ControlObjective_source(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_ControlObjective_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_ControlObjective_details(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_ControlObjective_exampleEvidence(ctx, field)
			case "owner":
				return ec.fieldContext_ControlObjective_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_ControlObjective_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_ControlObjective_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_ControlObjective_viewers(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_ControlObjective_internalPolicies(ctx, field)
			case "controls":
				return ec.fieldContext_ControlObjective_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_ControlObjective_procedures(ctx, field)
			case "risks":
				return ec.fieldContext_ControlObjective_risks(ctx, field)
			case "subcontrols":
				return ec.fieldContext_ControlObjective_subcontrols(ctx, field)
			case "standard":
				return ec.fieldContext_ControlObjective_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_ControlObjective_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_ControlObjective_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_ControlObjective_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_ControlObjective_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlObjective", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var controlObjectiveBulkCreatePayloadImplementors = []string{"ControlObjectiveBulkCreatePayload"}

func (ec *executionContext) _ControlObjectiveBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlObjectiveBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlObjectiveBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlObjectiveBulkCreatePayload")
		case "controlObjectives":
			out.Values[i] = ec._ControlObjectiveBulkCreatePayload_controlObjectives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlObjectiveCreatePayloadImplementors = []string{"ControlObjectiveCreatePayload"}

func (ec *executionContext) _ControlObjectiveCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlObjectiveCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlObjectiveCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlObjectiveCreatePayload")
		case "controlObjective":
			out.Values[i] = ec._ControlObjectiveCreatePayload_controlObjective(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlObjectiveDeletePayloadImplementors = []string{"ControlObjectiveDeletePayload"}

func (ec *executionContext) _ControlObjectiveDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlObjectiveDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlObjectiveDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlObjectiveDeletePayload")
		case "deletedID":
			out.Values[i] = ec._ControlObjectiveDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlObjectiveUpdatePayloadImplementors = []string{"ControlObjectiveUpdatePayload"}

func (ec *executionContext) _ControlObjectiveUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ControlObjectiveUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlObjectiveUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlObjectiveUpdatePayload")
		case "controlObjective":
			out.Values[i] = ec._ControlObjectiveUpdatePayload_controlObjective(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNControlObjectiveBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlObjectiveBulkCreatePayload) graphql.Marshaler {
	return ec._ControlObjectiveBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlObjectiveBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlObjectiveBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlObjectiveBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNControlObjectiveCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlObjectiveCreatePayload) graphql.Marshaler {
	return ec._ControlObjectiveCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlObjectiveCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlObjectiveCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlObjectiveCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNControlObjectiveDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlObjectiveDeletePayload) graphql.Marshaler {
	return ec._ControlObjectiveDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlObjectiveDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlObjectiveDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlObjectiveDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNControlObjectiveUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.ControlObjectiveUpdatePayload) graphql.Marshaler {
	return ec._ControlObjectiveUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlObjectiveUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ControlObjectiveUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlObjectiveUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
