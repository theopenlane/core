// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _SearchResults_page(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entgql.PageInfo[string])
	fc.Result = res
	return ec.marshalNPageInfo2ᚖentgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_apiTokens(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_apiTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APITokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.APITokenConnection)
	fc.Result = res
	return ec.marshalOAPITokenConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAPITokenConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_apiTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_APITokenConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_APITokenConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_APITokenConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type APITokenConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_actionPlans(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_actionPlans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionPlans, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ActionPlanConnection)
	fc.Result = res
	return ec.marshalOActionPlanConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐActionPlanConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_actionPlans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ActionPlanConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ActionPlanConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ActionPlanConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionPlanConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_contacts(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ContactConnection)
	fc.Result = res
	return ec.marshalOContactConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐContactConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_contacts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ContactConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ContactConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ContactConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContactConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_controls(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_controls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Controls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ControlConnection)
	fc.Result = res
	return ec.marshalOControlConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_controls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ControlConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ControlConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ControlConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_controlImplementations(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_controlImplementations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlImplementations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ControlImplementationConnection)
	fc.Result = res
	return ec.marshalOControlImplementationConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlImplementationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_controlImplementations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ControlImplementationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ControlImplementationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ControlImplementationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlImplementationConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_controlObjectives(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_controlObjectives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlObjectives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ControlObjectiveConnection)
	fc.Result = res
	return ec.marshalOControlObjectiveConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlObjectiveConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_controlObjectives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ControlObjectiveConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ControlObjectiveConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ControlObjectiveConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlObjectiveConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_documentData(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_documentData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.DocumentDataConnection)
	fc.Result = res
	return ec.marshalODocumentDataConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDocumentDataConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_documentData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DocumentDataConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DocumentDataConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_DocumentDataConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentDataConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_entities(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_entities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.EntityConnection)
	fc.Result = res
	return ec.marshalOEntityConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEntityConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_entities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EntityConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EntityConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EntityConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_entityTypes(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_entityTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntityTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.EntityTypeConnection)
	fc.Result = res
	return ec.marshalOEntityTypeConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEntityTypeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_entityTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EntityTypeConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EntityTypeConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EntityTypeConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityTypeConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_events(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.EventConnection)
	fc.Result = res
	return ec.marshalOEventConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EventConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EventConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EventConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_evidences(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_evidences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Evidences, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.EvidenceConnection)
	fc.Result = res
	return ec.marshalOEvidenceConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEvidenceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_evidences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EvidenceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EvidenceConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EvidenceConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvidenceConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_files(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.FileConnection)
	fc.Result = res
	return ec.marshalOFileConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐFileConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_FileConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_FileConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_FileConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_groups(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_groups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.GroupConnection)
	fc.Result = res
	return ec.marshalOGroupConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroupConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_groups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_GroupConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_GroupConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_GroupConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GroupConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_integrations(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_integrations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Integrations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.IntegrationConnection)
	fc.Result = res
	return ec.marshalOIntegrationConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐIntegrationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_integrations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_IntegrationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_IntegrationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_IntegrationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IntegrationConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_internalPolicies(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_internalPolicies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.InternalPolicyConnection)
	fc.Result = res
	return ec.marshalOInternalPolicyConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInternalPolicyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_internalPolicies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_InternalPolicyConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_InternalPolicyConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_InternalPolicyConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InternalPolicyConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_invites(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_invites(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invites, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.InviteConnection)
	fc.Result = res
	return ec.marshalOInviteConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInviteConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_invites(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_InviteConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_InviteConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_InviteConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InviteConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_mappedControls(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_mappedControls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MappedControls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.MappedControlConnection)
	fc.Result = res
	return ec.marshalOMappedControlConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappedControlConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_mappedControls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MappedControlConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MappedControlConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_MappedControlConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappedControlConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_narratives(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_narratives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Narratives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.NarrativeConnection)
	fc.Result = res
	return ec.marshalONarrativeConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐNarrativeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_narratives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_NarrativeConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_NarrativeConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_NarrativeConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NarrativeConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_orgSubscriptions(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_orgSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgSubscriptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.OrgSubscriptionConnection)
	fc.Result = res
	return ec.marshalOOrgSubscriptionConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrgSubscriptionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_orgSubscriptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrgSubscriptionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrgSubscriptionConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OrgSubscriptionConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgSubscriptionConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_organizations(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organizations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.OrganizationConnection)
	fc.Result = res
	return ec.marshalOOrganizationConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_organizations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrganizationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrganizationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OrganizationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_organizationSettings(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_organizationSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.OrganizationSettingConnection)
	fc.Result = res
	return ec.marshalOOrganizationSettingConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationSettingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_organizationSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrganizationSettingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrganizationSettingConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OrganizationSettingConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationSettingConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_personalAccessTokens(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_personalAccessTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalAccessTokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.PersonalAccessTokenConnection)
	fc.Result = res
	return ec.marshalOPersonalAccessTokenConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐPersonalAccessTokenConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_personalAccessTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PersonalAccessTokenConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PersonalAccessTokenConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_PersonalAccessTokenConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonalAccessTokenConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_procedures(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_procedures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Procedures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ProcedureConnection)
	fc.Result = res
	return ec.marshalOProcedureConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProcedureConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_procedures(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProcedureConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProcedureConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProcedureConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProcedureConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_programs(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_programs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Programs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.ProgramConnection)
	fc.Result = res
	return ec.marshalOProgramConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProgramConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_programs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProgramConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProgramConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProgramConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgramConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_risks(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_risks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Risks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.RiskConnection)
	fc.Result = res
	return ec.marshalORiskConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐRiskConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_risks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RiskConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RiskConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_RiskConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RiskConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_standards(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_standards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.StandardConnection)
	fc.Result = res
	return ec.marshalOStandardConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐStandardConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_standards(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StandardConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StandardConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_StandardConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StandardConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_subcontrols(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_subcontrols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcontrols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.SubcontrolConnection)
	fc.Result = res
	return ec.marshalOSubcontrolConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubcontrolConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_subcontrols(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SubcontrolConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SubcontrolConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_SubcontrolConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubcontrolConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_subscribers(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_subscribers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.SubscriberConnection)
	fc.Result = res
	return ec.marshalOSubscriberConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubscriberConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_subscribers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SubscriberConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SubscriberConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_SubscriberConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriberConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_tasks(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_tasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.TaskConnection)
	fc.Result = res
	return ec.marshalOTaskConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTaskConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_tasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TaskConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TaskConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TaskConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_templates(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.TemplateConnection)
	fc.Result = res
	return ec.marshalOTemplateConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TemplateConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TemplateConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TemplateConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_users(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.UserConnection)
	fc.Result = res
	return ec.marshalOUserConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_userSettings(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_userSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.UserSettingConnection)
	fc.Result = res
	return ec.marshalOUserSettingConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐUserSettingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_userSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserSettingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserSettingConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserSettingConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSettingConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_webauthns(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResults_webauthns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Webauthns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*generated.WebauthnConnection)
	fc.Result = res
	return ec.marshalOWebauthnConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐWebauthnConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResults_webauthns(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_WebauthnConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_WebauthnConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_WebauthnConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WebauthnConnection", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var searchResultsImplementors = []string{"SearchResults"}

func (ec *executionContext) _SearchResults(ctx context.Context, sel ast.SelectionSet, obj *model.SearchResults) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResults")
		case "page":
			out.Values[i] = ec._SearchResults_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._SearchResults_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "apiTokens":
			out.Values[i] = ec._SearchResults_apiTokens(ctx, field, obj)
		case "actionPlans":
			out.Values[i] = ec._SearchResults_actionPlans(ctx, field, obj)
		case "contacts":
			out.Values[i] = ec._SearchResults_contacts(ctx, field, obj)
		case "controls":
			out.Values[i] = ec._SearchResults_controls(ctx, field, obj)
		case "controlImplementations":
			out.Values[i] = ec._SearchResults_controlImplementations(ctx, field, obj)
		case "controlObjectives":
			out.Values[i] = ec._SearchResults_controlObjectives(ctx, field, obj)
		case "documentData":
			out.Values[i] = ec._SearchResults_documentData(ctx, field, obj)
		case "entities":
			out.Values[i] = ec._SearchResults_entities(ctx, field, obj)
		case "entityTypes":
			out.Values[i] = ec._SearchResults_entityTypes(ctx, field, obj)
		case "events":
			out.Values[i] = ec._SearchResults_events(ctx, field, obj)
		case "evidences":
			out.Values[i] = ec._SearchResults_evidences(ctx, field, obj)
		case "files":
			out.Values[i] = ec._SearchResults_files(ctx, field, obj)
		case "groups":
			out.Values[i] = ec._SearchResults_groups(ctx, field, obj)
		case "integrations":
			out.Values[i] = ec._SearchResults_integrations(ctx, field, obj)
		case "internalPolicies":
			out.Values[i] = ec._SearchResults_internalPolicies(ctx, field, obj)
		case "invites":
			out.Values[i] = ec._SearchResults_invites(ctx, field, obj)
		case "mappedControls":
			out.Values[i] = ec._SearchResults_mappedControls(ctx, field, obj)
		case "narratives":
			out.Values[i] = ec._SearchResults_narratives(ctx, field, obj)
		case "orgSubscriptions":
			out.Values[i] = ec._SearchResults_orgSubscriptions(ctx, field, obj)
		case "organizations":
			out.Values[i] = ec._SearchResults_organizations(ctx, field, obj)
		case "organizationSettings":
			out.Values[i] = ec._SearchResults_organizationSettings(ctx, field, obj)
		case "personalAccessTokens":
			out.Values[i] = ec._SearchResults_personalAccessTokens(ctx, field, obj)
		case "procedures":
			out.Values[i] = ec._SearchResults_procedures(ctx, field, obj)
		case "programs":
			out.Values[i] = ec._SearchResults_programs(ctx, field, obj)
		case "risks":
			out.Values[i] = ec._SearchResults_risks(ctx, field, obj)
		case "standards":
			out.Values[i] = ec._SearchResults_standards(ctx, field, obj)
		case "subcontrols":
			out.Values[i] = ec._SearchResults_subcontrols(ctx, field, obj)
		case "subscribers":
			out.Values[i] = ec._SearchResults_subscribers(ctx, field, obj)
		case "tasks":
			out.Values[i] = ec._SearchResults_tasks(ctx, field, obj)
		case "templates":
			out.Values[i] = ec._SearchResults_templates(ctx, field, obj)
		case "users":
			out.Values[i] = ec._SearchResults_users(ctx, field, obj)
		case "userSettings":
			out.Values[i] = ec._SearchResults_userSettings(ctx, field, obj)
		case "webauthns":
			out.Values[i] = ec._SearchResults_webauthns(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalOSearchResults2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSearchResults(ctx context.Context, sel ast.SelectionSet, v *model.SearchResults) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SearchResults(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
