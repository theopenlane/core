// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _SearchResults_page(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNPageInfo2ᚖentgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SearchResults_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SearchResults_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_apiTokens(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_apiTokens,
		func(ctx context.Context) (any, error) {
			return obj.APITokens, nil
		},
		nil,
		ec.marshalOAPITokenConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAPITokenConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_apiTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_APITokenConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_APITokenConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_APITokenConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type APITokenConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_actionPlans(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_actionPlans,
		func(ctx context.Context) (any, error) {
			return obj.ActionPlans, nil
		},
		nil,
		ec.marshalOActionPlanConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐActionPlanConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_actionPlans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ActionPlanConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ActionPlanConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ActionPlanConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionPlanConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_assets(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_assets,
		func(ctx context.Context) (any, error) {
			return obj.Assets, nil
		},
		nil,
		ec.marshalOAssetConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAssetConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_assets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AssetConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AssetConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AssetConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AssetConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_contacts(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_contacts,
		func(ctx context.Context) (any, error) {
			return obj.Contacts, nil
		},
		nil,
		ec.marshalOContactConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐContactConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_contacts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ContactConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ContactConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ContactConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContactConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_controls(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_controls,
		func(ctx context.Context) (any, error) {
			return obj.Controls, nil
		},
		nil,
		ec.marshalOControlConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_controls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ControlConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ControlConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ControlConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_controlImplementations(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_controlImplementations,
		func(ctx context.Context) (any, error) {
			return obj.ControlImplementations, nil
		},
		nil,
		ec.marshalOControlImplementationConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlImplementationConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_controlImplementations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ControlImplementationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ControlImplementationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ControlImplementationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlImplementationConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_controlObjectives(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_controlObjectives,
		func(ctx context.Context) (any, error) {
			return obj.ControlObjectives, nil
		},
		nil,
		ec.marshalOControlObjectiveConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlObjectiveConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_controlObjectives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ControlObjectiveConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ControlObjectiveConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ControlObjectiveConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlObjectiveConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_customDomains(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_customDomains,
		func(ctx context.Context) (any, error) {
			return obj.CustomDomains, nil
		},
		nil,
		ec.marshalOCustomDomainConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐCustomDomainConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_customDomains(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CustomDomainConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CustomDomainConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CustomDomainConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomDomainConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_dnsVerifications(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_dnsVerifications,
		func(ctx context.Context) (any, error) {
			return obj.DNSVerifications, nil
		},
		nil,
		ec.marshalODNSVerificationConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDNSVerificationConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_dnsVerifications(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DNSVerificationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DNSVerificationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_DNSVerificationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DNSVerificationConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_documentData(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_documentData,
		func(ctx context.Context) (any, error) {
			return obj.DocumentData, nil
		},
		nil,
		ec.marshalODocumentDataConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDocumentDataConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_documentData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DocumentDataConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DocumentDataConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_DocumentDataConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentDataConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_entities(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_entities,
		func(ctx context.Context) (any, error) {
			return obj.Entities, nil
		},
		nil,
		ec.marshalOEntityConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEntityConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_entities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EntityConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EntityConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EntityConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_entityTypes(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_entityTypes,
		func(ctx context.Context) (any, error) {
			return obj.EntityTypes, nil
		},
		nil,
		ec.marshalOEntityTypeConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEntityTypeConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_entityTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EntityTypeConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EntityTypeConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EntityTypeConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityTypeConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_events(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_events,
		func(ctx context.Context) (any, error) {
			return obj.Events, nil
		},
		nil,
		ec.marshalOEventConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEventConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EventConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EventConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EventConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_evidences(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_evidences,
		func(ctx context.Context) (any, error) {
			return obj.Evidences, nil
		},
		nil,
		ec.marshalOEvidenceConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEvidenceConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_evidences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_EvidenceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EvidenceConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_EvidenceConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvidenceConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_files(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_files,
		func(ctx context.Context) (any, error) {
			return obj.Files, nil
		},
		nil,
		ec.marshalOFileConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐFileConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_FileConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_FileConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_FileConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FileConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_groups(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_groups,
		func(ctx context.Context) (any, error) {
			return obj.Groups, nil
		},
		nil,
		ec.marshalOGroupConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroupConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_groups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_GroupConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_GroupConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_GroupConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GroupConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_integrations(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_integrations,
		func(ctx context.Context) (any, error) {
			return obj.Integrations, nil
		},
		nil,
		ec.marshalOIntegrationConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐIntegrationConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_integrations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_IntegrationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_IntegrationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_IntegrationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IntegrationConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_internalPolicies(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_internalPolicies,
		func(ctx context.Context) (any, error) {
			return obj.InternalPolicies, nil
		},
		nil,
		ec.marshalOInternalPolicyConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInternalPolicyConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_internalPolicies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_InternalPolicyConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_InternalPolicyConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_InternalPolicyConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InternalPolicyConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_invites(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_invites,
		func(ctx context.Context) (any, error) {
			return obj.Invites, nil
		},
		nil,
		ec.marshalOInviteConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInviteConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_invites(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_InviteConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_InviteConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_InviteConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InviteConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_jobRunners(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_jobRunners,
		func(ctx context.Context) (any, error) {
			return obj.JobRunners, nil
		},
		nil,
		ec.marshalOJobRunnerConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐJobRunnerConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_jobRunners(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_JobRunnerConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_JobRunnerConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_JobRunnerConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRunnerConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_jobRunnerRegistrationTokens(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_jobRunnerRegistrationTokens,
		func(ctx context.Context) (any, error) {
			return obj.JobRunnerRegistrationTokens, nil
		},
		nil,
		ec.marshalOJobRunnerRegistrationTokenConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐJobRunnerRegistrationTokenConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_jobRunnerRegistrationTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_JobRunnerRegistrationTokenConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_JobRunnerRegistrationTokenConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_JobRunnerRegistrationTokenConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRunnerRegistrationTokenConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_jobRunnerTokens(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_jobRunnerTokens,
		func(ctx context.Context) (any, error) {
			return obj.JobRunnerTokens, nil
		},
		nil,
		ec.marshalOJobRunnerTokenConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐJobRunnerTokenConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_jobRunnerTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_JobRunnerTokenConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_JobRunnerTokenConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_JobRunnerTokenConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRunnerTokenConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_jobTemplates(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_jobTemplates,
		func(ctx context.Context) (any, error) {
			return obj.JobTemplates, nil
		},
		nil,
		ec.marshalOJobTemplateConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐJobTemplateConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_jobTemplates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_JobTemplateConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_JobTemplateConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_JobTemplateConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobTemplateConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_mappableDomains(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_mappableDomains,
		func(ctx context.Context) (any, error) {
			return obj.MappableDomains, nil
		},
		nil,
		ec.marshalOMappableDomainConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappableDomainConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_mappableDomains(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MappableDomainConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MappableDomainConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_MappableDomainConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappableDomainConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_mappedControls(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_mappedControls,
		func(ctx context.Context) (any, error) {
			return obj.MappedControls, nil
		},
		nil,
		ec.marshalOMappedControlConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐMappedControlConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_mappedControls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MappedControlConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MappedControlConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_MappedControlConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MappedControlConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_narratives(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_narratives,
		func(ctx context.Context) (any, error) {
			return obj.Narratives, nil
		},
		nil,
		ec.marshalONarrativeConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐNarrativeConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_narratives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_NarrativeConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_NarrativeConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_NarrativeConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NarrativeConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_orgSubscriptions(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_orgSubscriptions,
		func(ctx context.Context) (any, error) {
			return obj.OrgSubscriptions, nil
		},
		nil,
		ec.marshalOOrgSubscriptionConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrgSubscriptionConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_orgSubscriptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrgSubscriptionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrgSubscriptionConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OrgSubscriptionConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgSubscriptionConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_organizations(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_organizations,
		func(ctx context.Context) (any, error) {
			return obj.Organizations, nil
		},
		nil,
		ec.marshalOOrganizationConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_organizations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrganizationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrganizationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OrganizationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_organizationSettings(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_organizationSettings,
		func(ctx context.Context) (any, error) {
			return obj.OrganizationSettings, nil
		},
		nil,
		ec.marshalOOrganizationSettingConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationSettingConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_organizationSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrganizationSettingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrganizationSettingConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OrganizationSettingConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationSettingConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_personalAccessTokens(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_personalAccessTokens,
		func(ctx context.Context) (any, error) {
			return obj.PersonalAccessTokens, nil
		},
		nil,
		ec.marshalOPersonalAccessTokenConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐPersonalAccessTokenConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_personalAccessTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PersonalAccessTokenConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PersonalAccessTokenConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_PersonalAccessTokenConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonalAccessTokenConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_procedures(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_procedures,
		func(ctx context.Context) (any, error) {
			return obj.Procedures, nil
		},
		nil,
		ec.marshalOProcedureConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProcedureConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_procedures(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProcedureConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProcedureConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProcedureConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProcedureConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_programs(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_programs,
		func(ctx context.Context) (any, error) {
			return obj.Programs, nil
		},
		nil,
		ec.marshalOProgramConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProgramConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_programs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProgramConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProgramConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProgramConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgramConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_risks(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_risks,
		func(ctx context.Context) (any, error) {
			return obj.Risks, nil
		},
		nil,
		ec.marshalORiskConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐRiskConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_risks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RiskConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RiskConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_RiskConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RiskConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_scans(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_scans,
		func(ctx context.Context) (any, error) {
			return obj.Scans, nil
		},
		nil,
		ec.marshalOScanConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScanConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_scans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ScanConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ScanConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ScanConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScanConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_standards(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_standards,
		func(ctx context.Context) (any, error) {
			return obj.Standards, nil
		},
		nil,
		ec.marshalOStandardConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐStandardConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_standards(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StandardConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StandardConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_StandardConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StandardConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_subcontrols(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_subcontrols,
		func(ctx context.Context) (any, error) {
			return obj.Subcontrols, nil
		},
		nil,
		ec.marshalOSubcontrolConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubcontrolConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_subcontrols(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SubcontrolConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SubcontrolConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_SubcontrolConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubcontrolConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_subprocessors(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_subprocessors,
		func(ctx context.Context) (any, error) {
			return obj.Subprocessors, nil
		},
		nil,
		ec.marshalOSubprocessorConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubprocessorConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_subprocessors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SubprocessorConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SubprocessorConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_SubprocessorConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubprocessorConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_subscribers(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_subscribers,
		func(ctx context.Context) (any, error) {
			return obj.Subscribers, nil
		},
		nil,
		ec.marshalOSubscriberConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubscriberConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_subscribers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SubscriberConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SubscriberConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_SubscriberConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriberConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_tasks(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_tasks,
		func(ctx context.Context) (any, error) {
			return obj.Tasks, nil
		},
		nil,
		ec.marshalOTaskConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTaskConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_tasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TaskConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TaskConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TaskConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_templates(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_templates,
		func(ctx context.Context) (any, error) {
			return obj.Templates, nil
		},
		nil,
		ec.marshalOTemplateConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TemplateConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TemplateConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TemplateConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemplateConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_trustCenters(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_trustCenters,
		func(ctx context.Context) (any, error) {
			return obj.TrustCenters, nil
		},
		nil,
		ec.marshalOTrustCenterConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_trustCenters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TrustCenterConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TrustCenterConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TrustCenterConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_trustCenterCompliances(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_trustCenterCompliances,
		func(ctx context.Context) (any, error) {
			return obj.TrustCenterCompliances, nil
		},
		nil,
		ec.marshalOTrustCenterComplianceConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterComplianceConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_trustCenterCompliances(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TrustCenterComplianceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TrustCenterComplianceConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TrustCenterComplianceConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterComplianceConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_trustCenterDocs(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_trustCenterDocs,
		func(ctx context.Context) (any, error) {
			return obj.TrustCenterDocs, nil
		},
		nil,
		ec.marshalOTrustCenterDocConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTrustCenterDocConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_trustCenterDocs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TrustCenterDocConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TrustCenterDocConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TrustCenterDocConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrustCenterDocConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_users(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_users,
		func(ctx context.Context) (any, error) {
			return obj.Users, nil
		},
		nil,
		ec.marshalOUserConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐUserConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_userSettings(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_userSettings,
		func(ctx context.Context) (any, error) {
			return obj.UserSettings, nil
		},
		nil,
		ec.marshalOUserSettingConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐUserSettingConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_userSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserSettingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserSettingConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserSettingConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSettingConnection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResults_webauthns(ctx context.Context, field graphql.CollectedField, obj *model.SearchResults) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResults_webauthns,
		func(ctx context.Context) (any, error) {
			return obj.Webauthns, nil
		},
		nil,
		ec.marshalOWebauthnConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐWebauthnConnection,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResults_webauthns(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_WebauthnConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_WebauthnConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_WebauthnConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WebauthnConnection", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var searchResultsImplementors = []string{"SearchResults"}

func (ec *executionContext) _SearchResults(ctx context.Context, sel ast.SelectionSet, obj *model.SearchResults) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResults")
		case "page":
			out.Values[i] = ec._SearchResults_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._SearchResults_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "apiTokens":
			out.Values[i] = ec._SearchResults_apiTokens(ctx, field, obj)
		case "actionPlans":
			out.Values[i] = ec._SearchResults_actionPlans(ctx, field, obj)
		case "assets":
			out.Values[i] = ec._SearchResults_assets(ctx, field, obj)
		case "contacts":
			out.Values[i] = ec._SearchResults_contacts(ctx, field, obj)
		case "controls":
			out.Values[i] = ec._SearchResults_controls(ctx, field, obj)
		case "controlImplementations":
			out.Values[i] = ec._SearchResults_controlImplementations(ctx, field, obj)
		case "controlObjectives":
			out.Values[i] = ec._SearchResults_controlObjectives(ctx, field, obj)
		case "customDomains":
			out.Values[i] = ec._SearchResults_customDomains(ctx, field, obj)
		case "dnsVerifications":
			out.Values[i] = ec._SearchResults_dnsVerifications(ctx, field, obj)
		case "documentData":
			out.Values[i] = ec._SearchResults_documentData(ctx, field, obj)
		case "entities":
			out.Values[i] = ec._SearchResults_entities(ctx, field, obj)
		case "entityTypes":
			out.Values[i] = ec._SearchResults_entityTypes(ctx, field, obj)
		case "events":
			out.Values[i] = ec._SearchResults_events(ctx, field, obj)
		case "evidences":
			out.Values[i] = ec._SearchResults_evidences(ctx, field, obj)
		case "files":
			out.Values[i] = ec._SearchResults_files(ctx, field, obj)
		case "groups":
			out.Values[i] = ec._SearchResults_groups(ctx, field, obj)
		case "integrations":
			out.Values[i] = ec._SearchResults_integrations(ctx, field, obj)
		case "internalPolicies":
			out.Values[i] = ec._SearchResults_internalPolicies(ctx, field, obj)
		case "invites":
			out.Values[i] = ec._SearchResults_invites(ctx, field, obj)
		case "jobRunners":
			out.Values[i] = ec._SearchResults_jobRunners(ctx, field, obj)
		case "jobRunnerRegistrationTokens":
			out.Values[i] = ec._SearchResults_jobRunnerRegistrationTokens(ctx, field, obj)
		case "jobRunnerTokens":
			out.Values[i] = ec._SearchResults_jobRunnerTokens(ctx, field, obj)
		case "jobTemplates":
			out.Values[i] = ec._SearchResults_jobTemplates(ctx, field, obj)
		case "mappableDomains":
			out.Values[i] = ec._SearchResults_mappableDomains(ctx, field, obj)
		case "mappedControls":
			out.Values[i] = ec._SearchResults_mappedControls(ctx, field, obj)
		case "narratives":
			out.Values[i] = ec._SearchResults_narratives(ctx, field, obj)
		case "orgSubscriptions":
			out.Values[i] = ec._SearchResults_orgSubscriptions(ctx, field, obj)
		case "organizations":
			out.Values[i] = ec._SearchResults_organizations(ctx, field, obj)
		case "organizationSettings":
			out.Values[i] = ec._SearchResults_organizationSettings(ctx, field, obj)
		case "personalAccessTokens":
			out.Values[i] = ec._SearchResults_personalAccessTokens(ctx, field, obj)
		case "procedures":
			out.Values[i] = ec._SearchResults_procedures(ctx, field, obj)
		case "programs":
			out.Values[i] = ec._SearchResults_programs(ctx, field, obj)
		case "risks":
			out.Values[i] = ec._SearchResults_risks(ctx, field, obj)
		case "scans":
			out.Values[i] = ec._SearchResults_scans(ctx, field, obj)
		case "standards":
			out.Values[i] = ec._SearchResults_standards(ctx, field, obj)
		case "subcontrols":
			out.Values[i] = ec._SearchResults_subcontrols(ctx, field, obj)
		case "subprocessors":
			out.Values[i] = ec._SearchResults_subprocessors(ctx, field, obj)
		case "subscribers":
			out.Values[i] = ec._SearchResults_subscribers(ctx, field, obj)
		case "tasks":
			out.Values[i] = ec._SearchResults_tasks(ctx, field, obj)
		case "templates":
			out.Values[i] = ec._SearchResults_templates(ctx, field, obj)
		case "trustCenters":
			out.Values[i] = ec._SearchResults_trustCenters(ctx, field, obj)
		case "trustCenterCompliances":
			out.Values[i] = ec._SearchResults_trustCenterCompliances(ctx, field, obj)
		case "trustCenterDocs":
			out.Values[i] = ec._SearchResults_trustCenterDocs(ctx, field, obj)
		case "users":
			out.Values[i] = ec._SearchResults_users(ctx, field, obj)
		case "userSettings":
			out.Values[i] = ec._SearchResults_userSettings(ctx, field, obj)
		case "webauthns":
			out.Values[i] = ec._SearchResults_webauthns(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalOSearchResults2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSearchResults(ctx context.Context, sel ast.SelectionSet, v *model.SearchResults) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SearchResults(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
