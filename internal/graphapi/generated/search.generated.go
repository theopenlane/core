// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _APITokenSearchResult_apiTokens(ctx context.Context, field graphql.CollectedField, obj *model.APITokenSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_APITokenSearchResult_apiTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APITokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.APIToken)
	fc.Result = res
	return ec.marshalOAPIToken2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐAPITokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_APITokenSearchResult_apiTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "APITokenSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_APIToken_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_APIToken_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_APIToken_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_APIToken_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_APIToken_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_APIToken_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_APIToken_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_APIToken_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_APIToken_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_APIToken_name(ctx, field)
			case "token":
				return ec.fieldContext_APIToken_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_APIToken_expiresAt(ctx, field)
			case "description":
				return ec.fieldContext_APIToken_description(ctx, field)
			case "scopes":
				return ec.fieldContext_APIToken_scopes(ctx, field)
			case "lastUsedAt":
				return ec.fieldContext_APIToken_lastUsedAt(ctx, field)
			case "isActive":
				return ec.fieldContext_APIToken_isActive(ctx, field)
			case "revokedReason":
				return ec.fieldContext_APIToken_revokedReason(ctx, field)
			case "revokedBy":
				return ec.fieldContext_APIToken_revokedBy(ctx, field)
			case "revokedAt":
				return ec.fieldContext_APIToken_revokedAt(ctx, field)
			case "owner":
				return ec.fieldContext_APIToken_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type APIToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionPlanSearchResult_actionPlans(ctx context.Context, field graphql.CollectedField, obj *model.ActionPlanSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionPlanSearchResult_actionPlans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionPlans, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ActionPlan)
	fc.Result = res
	return ec.marshalOActionPlan2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐActionPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionPlanSearchResult_actionPlans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionPlanSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActionPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ActionPlan_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ActionPlan_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ActionPlan_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ActionPlan_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_ActionPlan_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_ActionPlan_tags(ctx, field)
			case "name":
				return ec.fieldContext_ActionPlan_name(ctx, field)
			case "description":
				return ec.fieldContext_ActionPlan_description(ctx, field)
			case "status":
				return ec.fieldContext_ActionPlan_status(ctx, field)
			case "dueDate":
				return ec.fieldContext_ActionPlan_dueDate(ctx, field)
			case "priority":
				return ec.fieldContext_ActionPlan_priority(ctx, field)
			case "source":
				return ec.fieldContext_ActionPlan_source(ctx, field)
			case "details":
				return ec.fieldContext_ActionPlan_details(ctx, field)
			case "standard":
				return ec.fieldContext_ActionPlan_standard(ctx, field)
			case "risk":
				return ec.fieldContext_ActionPlan_risk(ctx, field)
			case "control":
				return ec.fieldContext_ActionPlan_control(ctx, field)
			case "user":
				return ec.fieldContext_ActionPlan_user(ctx, field)
			case "program":
				return ec.fieldContext_ActionPlan_program(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionPlan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactSearchResult_contacts(ctx context.Context, field graphql.CollectedField, obj *model.ContactSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactSearchResult_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactSearchResult_contacts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contact_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Contact_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Contact_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Contact_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Contact_ownerID(ctx, field)
			case "fullName":
				return ec.fieldContext_Contact_fullName(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Contact_phoneNumber(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "status":
				return ec.fieldContext_Contact_status(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "entities":
				return ec.fieldContext_Contact_entities(ctx, field)
			case "files":
				return ec.fieldContext_Contact_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlObjectiveSearchResult_controlObjectives(ctx context.Context, field graphql.CollectedField, obj *model.ControlObjectiveSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlObjectiveSearchResult_controlObjectives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlObjectives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ControlObjective)
	fc.Result = res
	return ec.marshalOControlObjective2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlObjectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlObjectiveSearchResult_controlObjectives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlObjectiveSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ControlObjective_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ControlObjective_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ControlObjective_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ControlObjective_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ControlObjective_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ControlObjective_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_ControlObjective_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_ControlObjective_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_ControlObjective_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_ControlObjective_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_ControlObjective_name(ctx, field)
			case "description":
				return ec.fieldContext_ControlObjective_description(ctx, field)
			case "status":
				return ec.fieldContext_ControlObjective_status(ctx, field)
			case "controlObjectiveType":
				return ec.fieldContext_ControlObjective_controlObjectiveType(ctx, field)
			case "version":
				return ec.fieldContext_ControlObjective_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_ControlObjective_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_ControlObjective_family(ctx, field)
			case "class":
				return ec.fieldContext_ControlObjective_class(ctx, field)
			case "source":
				return ec.fieldContext_ControlObjective_source(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_ControlObjective_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_ControlObjective_details(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_ControlObjective_exampleEvidence(ctx, field)
			case "owner":
				return ec.fieldContext_ControlObjective_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_ControlObjective_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_ControlObjective_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_ControlObjective_viewers(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_ControlObjective_internalPolicies(ctx, field)
			case "controls":
				return ec.fieldContext_ControlObjective_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_ControlObjective_procedures(ctx, field)
			case "risks":
				return ec.fieldContext_ControlObjective_risks(ctx, field)
			case "subcontrols":
				return ec.fieldContext_ControlObjective_subcontrols(ctx, field)
			case "standard":
				return ec.fieldContext_ControlObjective_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_ControlObjective_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_ControlObjective_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_ControlObjective_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_ControlObjective_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlObjective", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlSearchResult_controls(ctx context.Context, field graphql.CollectedField, obj *model.ControlSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlSearchResult_controls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Controls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Control)
	fc.Result = res
	return ec.marshalOControl2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐControlᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlSearchResult_controls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Control_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Control_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Control_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Control_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Control_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Control_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Control_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Control_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Control_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Control_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Control_name(ctx, field)
			case "description":
				return ec.fieldContext_Control_description(ctx, field)
			case "status":
				return ec.fieldContext_Control_status(ctx, field)
			case "controlType":
				return ec.fieldContext_Control_controlType(ctx, field)
			case "version":
				return ec.fieldContext_Control_version(ctx, field)
			case "controlNumber":
				return ec.fieldContext_Control_controlNumber(ctx, field)
			case "family":
				return ec.fieldContext_Control_family(ctx, field)
			case "class":
				return ec.fieldContext_Control_class(ctx, field)
			case "source":
				return ec.fieldContext_Control_source(ctx, field)
			case "satisfies":
				return ec.fieldContext_Control_satisfies(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_Control_mappedFrameworks(ctx, field)
			case "details":
				return ec.fieldContext_Control_details(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_Control_exampleEvidence(ctx, field)
			case "owner":
				return ec.fieldContext_Control_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Control_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Control_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Control_viewers(ctx, field)
			case "procedures":
				return ec.fieldContext_Control_procedures(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Control_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Control_controlObjectives(ctx, field)
			case "standard":
				return ec.fieldContext_Control_standard(ctx, field)
			case "narratives":
				return ec.fieldContext_Control_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Control_risks(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Control_actionPlans(ctx, field)
			case "tasks":
				return ec.fieldContext_Control_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Control_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_Control_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Control", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentDataSearchResult_documentData(ctx context.Context, field graphql.CollectedField, obj *model.DocumentDataSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentDataSearchResult_documentData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.DocumentData)
	fc.Result = res
	return ec.marshalODocumentData2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDocumentDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentDataSearchResult_documentData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentDataSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DocumentData_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_DocumentData_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DocumentData_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DocumentData_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DocumentData_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_DocumentData_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_DocumentData_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_DocumentData_deletedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_DocumentData_ownerID(ctx, field)
			case "templateID":
				return ec.fieldContext_DocumentData_templateID(ctx, field)
			case "data":
				return ec.fieldContext_DocumentData_data(ctx, field)
			case "owner":
				return ec.fieldContext_DocumentData_owner(ctx, field)
			case "template":
				return ec.fieldContext_DocumentData_template(ctx, field)
			case "entity":
				return ec.fieldContext_DocumentData_entity(ctx, field)
			case "files":
				return ec.fieldContext_DocumentData_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySearchResult_entities(ctx context.Context, field graphql.CollectedField, obj *model.EntitySearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySearchResult_entities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Entity)
	fc.Result = res
	return ec.marshalOEntity2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEntityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySearchResult_entities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Entity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Entity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Entity_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Entity_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Entity_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Entity_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Entity_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Entity_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Entity_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Entity_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Entity_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Entity_description(ctx, field)
			case "domains":
				return ec.fieldContext_Entity_domains(ctx, field)
			case "entityTypeID":
				return ec.fieldContext_Entity_entityTypeID(ctx, field)
			case "status":
				return ec.fieldContext_Entity_status(ctx, field)
			case "owner":
				return ec.fieldContext_Entity_owner(ctx, field)
			case "contacts":
				return ec.fieldContext_Entity_contacts(ctx, field)
			case "documents":
				return ec.fieldContext_Entity_documents(ctx, field)
			case "notes":
				return ec.fieldContext_Entity_notes(ctx, field)
			case "files":
				return ec.fieldContext_Entity_files(ctx, field)
			case "entityType":
				return ec.fieldContext_Entity_entityType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Entity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTypeSearchResult_entityTypes(ctx context.Context, field graphql.CollectedField, obj *model.EntityTypeSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTypeSearchResult_entityTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntityTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.EntityType)
	fc.Result = res
	return ec.marshalOEntityType2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEntityTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTypeSearchResult_entityTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTypeSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntityType_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_EntityType_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EntityType_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_EntityType_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_EntityType_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_EntityType_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_EntityType_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_EntityType_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_EntityType_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_EntityType_name(ctx, field)
			case "owner":
				return ec.fieldContext_EntityType_owner(ctx, field)
			case "entities":
				return ec.fieldContext_EntityType_entities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventSearchResult_events(ctx context.Context, field graphql.CollectedField, obj *model.EventSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventSearchResult_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventSearchResult_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Event_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Event_tags(ctx, field)
			case "eventID":
				return ec.fieldContext_Event_eventID(ctx, field)
			case "correlationID":
				return ec.fieldContext_Event_correlationID(ctx, field)
			case "eventType":
				return ec.fieldContext_Event_eventType(ctx, field)
			case "metadata":
				return ec.fieldContext_Event_metadata(ctx, field)
			case "user":
				return ec.fieldContext_Event_user(ctx, field)
			case "group":
				return ec.fieldContext_Event_group(ctx, field)
			case "integration":
				return ec.fieldContext_Event_integration(ctx, field)
			case "organization":
				return ec.fieldContext_Event_organization(ctx, field)
			case "invite":
				return ec.fieldContext_Event_invite(ctx, field)
			case "personalAccessToken":
				return ec.fieldContext_Event_personalAccessToken(ctx, field)
			case "hush":
				return ec.fieldContext_Event_hush(ctx, field)
			case "orgmembership":
				return ec.fieldContext_Event_orgmembership(ctx, field)
			case "groupmembership":
				return ec.fieldContext_Event_groupmembership(ctx, field)
			case "subscriber":
				return ec.fieldContext_Event_subscriber(ctx, field)
			case "file":
				return ec.fieldContext_Event_file(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceSearchResult_evidences(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceSearchResult_evidences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Evidences, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Evidence)
	fc.Result = res
	return ec.marshalOEvidence2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEvidenceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceSearchResult_evidences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Evidence_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Evidence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Evidence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Evidence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Evidence_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Evidence_displayID(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Evidence_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Evidence_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Evidence_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Evidence_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Evidence_name(ctx, field)
			case "description":
				return ec.fieldContext_Evidence_description(ctx, field)
			case "collectionProcedure":
				return ec.fieldContext_Evidence_collectionProcedure(ctx, field)
			case "creationDate":
				return ec.fieldContext_Evidence_creationDate(ctx, field)
			case "renewalDate":
				return ec.fieldContext_Evidence_renewalDate(ctx, field)
			case "source":
				return ec.fieldContext_Evidence_source(ctx, field)
			case "isAutomated":
				return ec.fieldContext_Evidence_isAutomated(ctx, field)
			case "url":
				return ec.fieldContext_Evidence_url(ctx, field)
			case "owner":
				return ec.fieldContext_Evidence_owner(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Evidence_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_Evidence_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Evidence_subcontrols(ctx, field)
			case "files":
				return ec.fieldContext_Evidence_files(ctx, field)
			case "programs":
				return ec.fieldContext_Evidence_programs(ctx, field)
			case "tasks":
				return ec.fieldContext_Evidence_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Evidence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FileSearchResult_files(ctx context.Context, field graphql.CollectedField, obj *model.FileSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FileSearchResult_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.File)
	fc.Result = res
	return ec.marshalOFile2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FileSearchResult_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FileSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_File_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_File_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_File_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_File_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_File_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_File_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_File_tags(ctx, field)
			case "providedFileName":
				return ec.fieldContext_File_providedFileName(ctx, field)
			case "providedFileExtension":
				return ec.fieldContext_File_providedFileExtension(ctx, field)
			case "providedFileSize":
				return ec.fieldContext_File_providedFileSize(ctx, field)
			case "persistedFileSize":
				return ec.fieldContext_File_persistedFileSize(ctx, field)
			case "detectedMimeType":
				return ec.fieldContext_File_detectedMimeType(ctx, field)
			case "md5Hash":
				return ec.fieldContext_File_md5Hash(ctx, field)
			case "detectedContentType":
				return ec.fieldContext_File_detectedContentType(ctx, field)
			case "storeKey":
				return ec.fieldContext_File_storeKey(ctx, field)
			case "categoryType":
				return ec.fieldContext_File_categoryType(ctx, field)
			case "uri":
				return ec.fieldContext_File_uri(ctx, field)
			case "storageScheme":
				return ec.fieldContext_File_storageScheme(ctx, field)
			case "storageVolume":
				return ec.fieldContext_File_storageVolume(ctx, field)
			case "storagePath":
				return ec.fieldContext_File_storagePath(ctx, field)
			case "user":
				return ec.fieldContext_File_user(ctx, field)
			case "organization":
				return ec.fieldContext_File_organization(ctx, field)
			case "group":
				return ec.fieldContext_File_group(ctx, field)
			case "contact":
				return ec.fieldContext_File_contact(ctx, field)
			case "entity":
				return ec.fieldContext_File_entity(ctx, field)
			case "userSetting":
				return ec.fieldContext_File_userSetting(ctx, field)
			case "organizationSetting":
				return ec.fieldContext_File_organizationSetting(ctx, field)
			case "template":
				return ec.fieldContext_File_template(ctx, field)
			case "documentData":
				return ec.fieldContext_File_documentData(ctx, field)
			case "events":
				return ec.fieldContext_File_events(ctx, field)
			case "program":
				return ec.fieldContext_File_program(ctx, field)
			case "evidence":
				return ec.fieldContext_File_evidence(ctx, field)
			case "presignedURL":
				return ec.fieldContext_File_presignedURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GroupSearchResult_groups(ctx context.Context, field graphql.CollectedField, obj *model.GroupSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GroupSearchResult_groups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Group)
	fc.Result = res
	return ec.marshalOGroup2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GroupSearchResult_groups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GroupSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Group_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Group_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Group_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Group_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Group_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Group_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Group_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Group_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Group_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Group_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Group_name(ctx, field)
			case "description":
				return ec.fieldContext_Group_description(ctx, field)
			case "isManaged":
				return ec.fieldContext_Group_isManaged(ctx, field)
			case "gravatarLogoURL":
				return ec.fieldContext_Group_gravatarLogoURL(ctx, field)
			case "logoURL":
				return ec.fieldContext_Group_logoURL(ctx, field)
			case "displayName":
				return ec.fieldContext_Group_displayName(ctx, field)
			case "owner":
				return ec.fieldContext_Group_owner(ctx, field)
			case "procedureEditors":
				return ec.fieldContext_Group_procedureEditors(ctx, field)
			case "procedureBlockedGroups":
				return ec.fieldContext_Group_procedureBlockedGroups(ctx, field)
			case "internalPolicyEditors":
				return ec.fieldContext_Group_internalPolicyEditors(ctx, field)
			case "internalPolicyBlockedGroups":
				return ec.fieldContext_Group_internalPolicyBlockedGroups(ctx, field)
			case "programEditors":
				return ec.fieldContext_Group_programEditors(ctx, field)
			case "programBlockedGroups":
				return ec.fieldContext_Group_programBlockedGroups(ctx, field)
			case "programViewers":
				return ec.fieldContext_Group_programViewers(ctx, field)
			case "riskEditors":
				return ec.fieldContext_Group_riskEditors(ctx, field)
			case "riskBlockedGroups":
				return ec.fieldContext_Group_riskBlockedGroups(ctx, field)
			case "riskViewers":
				return ec.fieldContext_Group_riskViewers(ctx, field)
			case "controlObjectiveEditors":
				return ec.fieldContext_Group_controlObjectiveEditors(ctx, field)
			case "controlObjectiveBlockedGroups":
				return ec.fieldContext_Group_controlObjectiveBlockedGroups(ctx, field)
			case "controlObjectiveViewers":
				return ec.fieldContext_Group_controlObjectiveViewers(ctx, field)
			case "controlEditors":
				return ec.fieldContext_Group_controlEditors(ctx, field)
			case "controlBlockedGroups":
				return ec.fieldContext_Group_controlBlockedGroups(ctx, field)
			case "controlViewers":
				return ec.fieldContext_Group_controlViewers(ctx, field)
			case "narrativeEditors":
				return ec.fieldContext_Group_narrativeEditors(ctx, field)
			case "narrativeBlockedGroups":
				return ec.fieldContext_Group_narrativeBlockedGroups(ctx, field)
			case "narrativeViewers":
				return ec.fieldContext_Group_narrativeViewers(ctx, field)
			case "setting":
				return ec.fieldContext_Group_setting(ctx, field)
			case "users":
				return ec.fieldContext_Group_users(ctx, field)
			case "events":
				return ec.fieldContext_Group_events(ctx, field)
			case "integrations":
				return ec.fieldContext_Group_integrations(ctx, field)
			case "files":
				return ec.fieldContext_Group_files(ctx, field)
			case "tasks":
				return ec.fieldContext_Group_tasks(ctx, field)
			case "members":
				return ec.fieldContext_Group_members(ctx, field)
			case "permissions":
				return ec.fieldContext_Group_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Group", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IntegrationSearchResult_integrations(ctx context.Context, field graphql.CollectedField, obj *model.IntegrationSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IntegrationSearchResult_integrations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Integrations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Integration)
	fc.Result = res
	return ec.marshalOIntegration2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐIntegrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IntegrationSearchResult_integrations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IntegrationSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Integration_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Integration_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Integration_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Integration_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Integration_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Integration_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Integration_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Integration_deletedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_Integration_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Integration_name(ctx, field)
			case "description":
				return ec.fieldContext_Integration_description(ctx, field)
			case "kind":
				return ec.fieldContext_Integration_kind(ctx, field)
			case "owner":
				return ec.fieldContext_Integration_owner(ctx, field)
			case "secrets":
				return ec.fieldContext_Integration_secrets(ctx, field)
			case "events":
				return ec.fieldContext_Integration_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Integration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InternalPolicySearchResult_internalPolicies(ctx context.Context, field graphql.CollectedField, obj *model.InternalPolicySearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InternalPolicySearchResult_internalPolicies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.InternalPolicy)
	fc.Result = res
	return ec.marshalOInternalPolicy2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐInternalPolicyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InternalPolicySearchResult_internalPolicies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InternalPolicySearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InternalPolicy_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InternalPolicy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InternalPolicy_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_InternalPolicy_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_InternalPolicy_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_InternalPolicy_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_InternalPolicy_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_InternalPolicy_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_InternalPolicy_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_InternalPolicy_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_InternalPolicy_name(ctx, field)
			case "description":
				return ec.fieldContext_InternalPolicy_description(ctx, field)
			case "status":
				return ec.fieldContext_InternalPolicy_status(ctx, field)
			case "reviewDue":
				return ec.fieldContext_InternalPolicy_reviewDue(ctx, field)
			case "policyType":
				return ec.fieldContext_InternalPolicy_policyType(ctx, field)
			case "version":
				return ec.fieldContext_InternalPolicy_version(ctx, field)
			case "purposeAndScope":
				return ec.fieldContext_InternalPolicy_purposeAndScope(ctx, field)
			case "background":
				return ec.fieldContext_InternalPolicy_background(ctx, field)
			case "details":
				return ec.fieldContext_InternalPolicy_details(ctx, field)
			case "owner":
				return ec.fieldContext_InternalPolicy_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_InternalPolicy_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_InternalPolicy_editors(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_InternalPolicy_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_InternalPolicy_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_InternalPolicy_procedures(ctx, field)
			case "narratives":
				return ec.fieldContext_InternalPolicy_narratives(ctx, field)
			case "tasks":
				return ec.fieldContext_InternalPolicy_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_InternalPolicy_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InternalPolicy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NarrativeSearchResult_narratives(ctx context.Context, field graphql.CollectedField, obj *model.NarrativeSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NarrativeSearchResult_narratives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Narratives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Narrative)
	fc.Result = res
	return ec.marshalONarrative2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐNarrativeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NarrativeSearchResult_narratives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NarrativeSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Narrative_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Narrative_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Narrative_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Narrative_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Narrative_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Narrative_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Narrative_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Narrative_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Narrative_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Narrative_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Narrative_name(ctx, field)
			case "description":
				return ec.fieldContext_Narrative_description(ctx, field)
			case "satisfies":
				return ec.fieldContext_Narrative_satisfies(ctx, field)
			case "details":
				return ec.fieldContext_Narrative_details(ctx, field)
			case "owner":
				return ec.fieldContext_Narrative_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Narrative_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Narrative_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Narrative_viewers(ctx, field)
			case "internalPolicy":
				return ec.fieldContext_Narrative_internalPolicy(ctx, field)
			case "control":
				return ec.fieldContext_Narrative_control(ctx, field)
			case "procedure":
				return ec.fieldContext_Narrative_procedure(ctx, field)
			case "controlObjective":
				return ec.fieldContext_Narrative_controlObjective(ctx, field)
			case "programs":
				return ec.fieldContext_Narrative_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Narrative", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgSubscriptionSearchResult_orgSubscriptions(ctx context.Context, field graphql.CollectedField, obj *model.OrgSubscriptionSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgSubscriptionSearchResult_orgSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgSubscriptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.OrgSubscription)
	fc.Result = res
	return ec.marshalOOrgSubscription2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrgSubscriptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgSubscriptionSearchResult_orgSubscriptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgSubscriptionSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgSubscription_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrgSubscription_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrgSubscription_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_OrgSubscription_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_OrgSubscription_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_OrgSubscription_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OrgSubscription_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_OrgSubscription_deletedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_OrgSubscription_ownerID(ctx, field)
			case "stripeSubscriptionID":
				return ec.fieldContext_OrgSubscription_stripeSubscriptionID(ctx, field)
			case "productTier":
				return ec.fieldContext_OrgSubscription_productTier(ctx, field)
			case "productPrice":
				return ec.fieldContext_OrgSubscription_productPrice(ctx, field)
			case "stripeProductTierID":
				return ec.fieldContext_OrgSubscription_stripeProductTierID(ctx, field)
			case "stripeSubscriptionStatus":
				return ec.fieldContext_OrgSubscription_stripeSubscriptionStatus(ctx, field)
			case "active":
				return ec.fieldContext_OrgSubscription_active(ctx, field)
			case "stripeCustomerID":
				return ec.fieldContext_OrgSubscription_stripeCustomerID(ctx, field)
			case "expiresAt":
				return ec.fieldContext_OrgSubscription_expiresAt(ctx, field)
			case "trialExpiresAt":
				return ec.fieldContext_OrgSubscription_trialExpiresAt(ctx, field)
			case "daysUntilDue":
				return ec.fieldContext_OrgSubscription_daysUntilDue(ctx, field)
			case "paymentMethodAdded":
				return ec.fieldContext_OrgSubscription_paymentMethodAdded(ctx, field)
			case "features":
				return ec.fieldContext_OrgSubscription_features(ctx, field)
			case "featureLookupKeys":
				return ec.fieldContext_OrgSubscription_featureLookupKeys(ctx, field)
			case "owner":
				return ec.fieldContext_OrgSubscription_owner(ctx, field)
			case "events":
				return ec.fieldContext_OrgSubscription_events(ctx, field)
			case "subscriptionURL":
				return ec.fieldContext_OrgSubscription_subscriptionURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgSubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSearchResult_organizations(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSearchResult_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organizations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSearchResult_organizations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Organization_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Organization_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Organization_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Organization_deletedBy(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "personalOrg":
				return ec.fieldContext_Organization_personalOrg(ctx, field)
			case "avatarRemoteURL":
				return ec.fieldContext_Organization_avatarRemoteURL(ctx, field)
			case "avatarLocalFileID":
				return ec.fieldContext_Organization_avatarLocalFileID(ctx, field)
			case "avatarUpdatedAt":
				return ec.fieldContext_Organization_avatarUpdatedAt(ctx, field)
			case "dedicatedDb":
				return ec.fieldContext_Organization_dedicatedDb(ctx, field)
			case "controlCreators":
				return ec.fieldContext_Organization_controlCreators(ctx, field)
			case "controlObjectiveCreators":
				return ec.fieldContext_Organization_controlObjectiveCreators(ctx, field)
			case "groupCreators":
				return ec.fieldContext_Organization_groupCreators(ctx, field)
			case "internalPolicyCreators":
				return ec.fieldContext_Organization_internalPolicyCreators(ctx, field)
			case "narrativeCreators":
				return ec.fieldContext_Organization_narrativeCreators(ctx, field)
			case "procedureCreators":
				return ec.fieldContext_Organization_procedureCreators(ctx, field)
			case "programCreators":
				return ec.fieldContext_Organization_programCreators(ctx, field)
			case "riskCreators":
				return ec.fieldContext_Organization_riskCreators(ctx, field)
			case "templateCreators":
				return ec.fieldContext_Organization_templateCreators(ctx, field)
			case "parent":
				return ec.fieldContext_Organization_parent(ctx, field)
			case "children":
				return ec.fieldContext_Organization_children(ctx, field)
			case "setting":
				return ec.fieldContext_Organization_setting(ctx, field)
			case "personalAccessTokens":
				return ec.fieldContext_Organization_personalAccessTokens(ctx, field)
			case "apiTokens":
				return ec.fieldContext_Organization_apiTokens(ctx, field)
			case "users":
				return ec.fieldContext_Organization_users(ctx, field)
			case "files":
				return ec.fieldContext_Organization_files(ctx, field)
			case "events":
				return ec.fieldContext_Organization_events(ctx, field)
			case "secrets":
				return ec.fieldContext_Organization_secrets(ctx, field)
			case "avatarFile":
				return ec.fieldContext_Organization_avatarFile(ctx, field)
			case "groups":
				return ec.fieldContext_Organization_groups(ctx, field)
			case "templates":
				return ec.fieldContext_Organization_templates(ctx, field)
			case "integrations":
				return ec.fieldContext_Organization_integrations(ctx, field)
			case "documentData":
				return ec.fieldContext_Organization_documentData(ctx, field)
			case "orgSubscriptions":
				return ec.fieldContext_Organization_orgSubscriptions(ctx, field)
			case "invites":
				return ec.fieldContext_Organization_invites(ctx, field)
			case "subscribers":
				return ec.fieldContext_Organization_subscribers(ctx, field)
			case "entities":
				return ec.fieldContext_Organization_entities(ctx, field)
			case "entityTypes":
				return ec.fieldContext_Organization_entityTypes(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "tasks":
				return ec.fieldContext_Organization_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Organization_programs(ctx, field)
			case "procedures":
				return ec.fieldContext_Organization_procedures(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Organization_internalPolicies(ctx, field)
			case "risks":
				return ec.fieldContext_Organization_risks(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Organization_controlObjectives(ctx, field)
			case "narratives":
				return ec.fieldContext_Organization_narratives(ctx, field)
			case "controls":
				return ec.fieldContext_Organization_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Organization_subcontrols(ctx, field)
			case "evidence":
				return ec.fieldContext_Organization_evidence(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSettingSearchResult_organizationSettings(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationSettingSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSettingSearchResult_organizationSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.OrganizationSetting)
	fc.Result = res
	return ec.marshalOOrganizationSetting2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐOrganizationSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSettingSearchResult_organizationSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSettingSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_OrganizationSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_OrganizationSetting_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_OrganizationSetting_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_OrganizationSetting_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_OrganizationSetting_deletedBy(ctx, field)
			case "domains":
				return ec.fieldContext_OrganizationSetting_domains(ctx, field)
			case "billingContact":
				return ec.fieldContext_OrganizationSetting_billingContact(ctx, field)
			case "billingEmail":
				return ec.fieldContext_OrganizationSetting_billingEmail(ctx, field)
			case "billingPhone":
				return ec.fieldContext_OrganizationSetting_billingPhone(ctx, field)
			case "billingAddress":
				return ec.fieldContext_OrganizationSetting_billingAddress(ctx, field)
			case "taxIdentifier":
				return ec.fieldContext_OrganizationSetting_taxIdentifier(ctx, field)
			case "geoLocation":
				return ec.fieldContext_OrganizationSetting_geoLocation(ctx, field)
			case "organizationID":
				return ec.fieldContext_OrganizationSetting_organizationID(ctx, field)
			case "billingNotificationsEnabled":
				return ec.fieldContext_OrganizationSetting_billingNotificationsEnabled(ctx, field)
			case "allowedEmailDomains":
				return ec.fieldContext_OrganizationSetting_allowedEmailDomains(ctx, field)
			case "organization":
				return ec.fieldContext_OrganizationSetting_organization(ctx, field)
			case "files":
				return ec.fieldContext_OrganizationSetting_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonalAccessTokenSearchResult_personalAccessTokens(ctx context.Context, field graphql.CollectedField, obj *model.PersonalAccessTokenSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonalAccessTokenSearchResult_personalAccessTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalAccessTokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.PersonalAccessToken)
	fc.Result = res
	return ec.marshalOPersonalAccessToken2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐPersonalAccessTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonalAccessTokenSearchResult_personalAccessTokens(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonalAccessTokenSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PersonalAccessToken_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_PersonalAccessToken_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PersonalAccessToken_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_PersonalAccessToken_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_PersonalAccessToken_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PersonalAccessToken_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_PersonalAccessToken_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_PersonalAccessToken_tags(ctx, field)
			case "name":
				return ec.fieldContext_PersonalAccessToken_name(ctx, field)
			case "token":
				return ec.fieldContext_PersonalAccessToken_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_PersonalAccessToken_expiresAt(ctx, field)
			case "description":
				return ec.fieldContext_PersonalAccessToken_description(ctx, field)
			case "scopes":
				return ec.fieldContext_PersonalAccessToken_scopes(ctx, field)
			case "lastUsedAt":
				return ec.fieldContext_PersonalAccessToken_lastUsedAt(ctx, field)
			case "isActive":
				return ec.fieldContext_PersonalAccessToken_isActive(ctx, field)
			case "revokedReason":
				return ec.fieldContext_PersonalAccessToken_revokedReason(ctx, field)
			case "revokedBy":
				return ec.fieldContext_PersonalAccessToken_revokedBy(ctx, field)
			case "revokedAt":
				return ec.fieldContext_PersonalAccessToken_revokedAt(ctx, field)
			case "owner":
				return ec.fieldContext_PersonalAccessToken_owner(ctx, field)
			case "organizations":
				return ec.fieldContext_PersonalAccessToken_organizations(ctx, field)
			case "events":
				return ec.fieldContext_PersonalAccessToken_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonalAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProcedureSearchResult_procedures(ctx context.Context, field graphql.CollectedField, obj *model.ProcedureSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProcedureSearchResult_procedures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Procedures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Procedure)
	fc.Result = res
	return ec.marshalOProcedure2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProcedureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProcedureSearchResult_procedures(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProcedureSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Procedure_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Procedure_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Procedure_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Procedure_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Procedure_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Procedure_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Procedure_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Procedure_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Procedure_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Procedure_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Procedure_name(ctx, field)
			case "description":
				return ec.fieldContext_Procedure_description(ctx, field)
			case "status":
				return ec.fieldContext_Procedure_status(ctx, field)
			case "procedureType":
				return ec.fieldContext_Procedure_procedureType(ctx, field)
			case "reviewDue":
				return ec.fieldContext_Procedure_reviewDue(ctx, field)
			case "version":
				return ec.fieldContext_Procedure_version(ctx, field)
			case "purposeAndScope":
				return ec.fieldContext_Procedure_purposeAndScope(ctx, field)
			case "background":
				return ec.fieldContext_Procedure_background(ctx, field)
			case "satisfies":
				return ec.fieldContext_Procedure_satisfies(ctx, field)
			case "details":
				return ec.fieldContext_Procedure_details(ctx, field)
			case "owner":
				return ec.fieldContext_Procedure_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Procedure_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Procedure_editors(ctx, field)
			case "controls":
				return ec.fieldContext_Procedure_controls(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Procedure_internalPolicies(ctx, field)
			case "narratives":
				return ec.fieldContext_Procedure_narratives(ctx, field)
			case "risks":
				return ec.fieldContext_Procedure_risks(ctx, field)
			case "tasks":
				return ec.fieldContext_Procedure_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Procedure_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Procedure", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgramSearchResult_programs(ctx context.Context, field graphql.CollectedField, obj *model.ProgramSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgramSearchResult_programs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Programs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Program)
	fc.Result = res
	return ec.marshalOProgram2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐProgramᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgramSearchResult_programs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgramSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Program_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Program_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Program_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Program_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Program_displayID(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Program_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Program_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Program_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Program_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "status":
				return ec.fieldContext_Program_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Program_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Program_endDate(ctx, field)
			case "auditorReady":
				return ec.fieldContext_Program_auditorReady(ctx, field)
			case "auditorWriteComments":
				return ec.fieldContext_Program_auditorWriteComments(ctx, field)
			case "auditorReadComments":
				return ec.fieldContext_Program_auditorReadComments(ctx, field)
			case "owner":
				return ec.fieldContext_Program_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Program_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Program_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Program_viewers(ctx, field)
			case "controls":
				return ec.fieldContext_Program_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Program_subcontrols(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Program_controlObjectives(ctx, field)
			case "internalPolicies":
				return ec.fieldContext_Program_internalPolicies(ctx, field)
			case "procedures":
				return ec.fieldContext_Program_procedures(ctx, field)
			case "risks":
				return ec.fieldContext_Program_risks(ctx, field)
			case "tasks":
				return ec.fieldContext_Program_tasks(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			case "files":
				return ec.fieldContext_Program_files(ctx, field)
			case "evidence":
				return ec.fieldContext_Program_evidence(ctx, field)
			case "narratives":
				return ec.fieldContext_Program_narratives(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Program_actionPlans(ctx, field)
			case "standards":
				return ec.fieldContext_Program_standards(ctx, field)
			case "users":
				return ec.fieldContext_Program_users(ctx, field)
			case "members":
				return ec.fieldContext_Program_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskSearchResult_risks(ctx context.Context, field graphql.CollectedField, obj *model.RiskSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskSearchResult_risks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Risks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Risk)
	fc.Result = res
	return ec.marshalORisk2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐRiskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskSearchResult_risks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Risk_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Risk_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Risk_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Risk_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Risk_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Risk_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Risk_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Risk_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Risk_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Risk_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Risk_name(ctx, field)
			case "description":
				return ec.fieldContext_Risk_description(ctx, field)
			case "status":
				return ec.fieldContext_Risk_status(ctx, field)
			case "riskType":
				return ec.fieldContext_Risk_riskType(ctx, field)
			case "businessCosts":
				return ec.fieldContext_Risk_businessCosts(ctx, field)
			case "impact":
				return ec.fieldContext_Risk_impact(ctx, field)
			case "likelihood":
				return ec.fieldContext_Risk_likelihood(ctx, field)
			case "mitigation":
				return ec.fieldContext_Risk_mitigation(ctx, field)
			case "satisfies":
				return ec.fieldContext_Risk_satisfies(ctx, field)
			case "details":
				return ec.fieldContext_Risk_details(ctx, field)
			case "owner":
				return ec.fieldContext_Risk_owner(ctx, field)
			case "blockedGroups":
				return ec.fieldContext_Risk_blockedGroups(ctx, field)
			case "editors":
				return ec.fieldContext_Risk_editors(ctx, field)
			case "viewers":
				return ec.fieldContext_Risk_viewers(ctx, field)
			case "control":
				return ec.fieldContext_Risk_control(ctx, field)
			case "procedure":
				return ec.fieldContext_Risk_procedure(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Risk_actionPlans(ctx, field)
			case "programs":
				return ec.fieldContext_Risk_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Risk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultConnection_page(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultConnection_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entgql.PageInfo[string])
	fc.Result = res
	return ec.marshalNPageInfo2ᚖentgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultConnection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResultConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SearchResultConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchResultConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.SearchResult)
	fc.Result = res
	return ec.marshalNSearchResult2ᚕgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSearchResultᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchResultConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResultConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SearchResult does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StandardSearchResult_standards(ctx context.Context, field graphql.CollectedField, obj *model.StandardSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StandardSearchResult_standards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Standard)
	fc.Result = res
	return ec.marshalOStandard2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐStandardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StandardSearchResult_standards(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StandardSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Standard_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Standard_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Standard_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Standard_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Standard_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Standard_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Standard_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Standard_tags(ctx, field)
			case "name":
				return ec.fieldContext_Standard_name(ctx, field)
			case "description":
				return ec.fieldContext_Standard_description(ctx, field)
			case "family":
				return ec.fieldContext_Standard_family(ctx, field)
			case "status":
				return ec.fieldContext_Standard_status(ctx, field)
			case "standardType":
				return ec.fieldContext_Standard_standardType(ctx, field)
			case "version":
				return ec.fieldContext_Standard_version(ctx, field)
			case "purposeAndScope":
				return ec.fieldContext_Standard_purposeAndScope(ctx, field)
			case "background":
				return ec.fieldContext_Standard_background(ctx, field)
			case "satisfies":
				return ec.fieldContext_Standard_satisfies(ctx, field)
			case "details":
				return ec.fieldContext_Standard_details(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Standard_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_Standard_controls(ctx, field)
			case "procedures":
				return ec.fieldContext_Standard_procedures(ctx, field)
			case "actionPlans":
				return ec.fieldContext_Standard_actionPlans(ctx, field)
			case "programs":
				return ec.fieldContext_Standard_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Standard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubcontrolSearchResult_subcontrols(ctx context.Context, field graphql.CollectedField, obj *model.SubcontrolSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubcontrolSearchResult_subcontrols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcontrols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Subcontrol)
	fc.Result = res
	return ec.marshalOSubcontrol2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubcontrolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubcontrolSearchResult_subcontrols(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubcontrolSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Subcontrol_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Subcontrol_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Subcontrol_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Subcontrol_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Subcontrol_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Subcontrol_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Subcontrol_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Subcontrol_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Subcontrol_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Subcontrol_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Subcontrol_name(ctx, field)
			case "description":
				return ec.fieldContext_Subcontrol_description(ctx, field)
			case "status":
				return ec.fieldContext_Subcontrol_status(ctx, field)
			case "subcontrolType":
				return ec.fieldContext_Subcontrol_subcontrolType(ctx, field)
			case "version":
				return ec.fieldContext_Subcontrol_version(ctx, field)
			case "subcontrolNumber":
				return ec.fieldContext_Subcontrol_subcontrolNumber(ctx, field)
			case "family":
				return ec.fieldContext_Subcontrol_family(ctx, field)
			case "class":
				return ec.fieldContext_Subcontrol_class(ctx, field)
			case "source":
				return ec.fieldContext_Subcontrol_source(ctx, field)
			case "mappedFrameworks":
				return ec.fieldContext_Subcontrol_mappedFrameworks(ctx, field)
			case "implementationEvidence":
				return ec.fieldContext_Subcontrol_implementationEvidence(ctx, field)
			case "implementationStatus":
				return ec.fieldContext_Subcontrol_implementationStatus(ctx, field)
			case "implementationDate":
				return ec.fieldContext_Subcontrol_implementationDate(ctx, field)
			case "implementationVerification":
				return ec.fieldContext_Subcontrol_implementationVerification(ctx, field)
			case "implementationVerificationDate":
				return ec.fieldContext_Subcontrol_implementationVerificationDate(ctx, field)
			case "details":
				return ec.fieldContext_Subcontrol_details(ctx, field)
			case "exampleEvidence":
				return ec.fieldContext_Subcontrol_exampleEvidence(ctx, field)
			case "owner":
				return ec.fieldContext_Subcontrol_owner(ctx, field)
			case "controls":
				return ec.fieldContext_Subcontrol_controls(ctx, field)
			case "tasks":
				return ec.fieldContext_Subcontrol_tasks(ctx, field)
			case "programs":
				return ec.fieldContext_Subcontrol_programs(ctx, field)
			case "evidence":
				return ec.fieldContext_Subcontrol_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Subcontrol", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriberSearchResult_subscribers(ctx context.Context, field graphql.CollectedField, obj *model.SubscriberSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriberSearchResult_subscribers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Subscriber)
	fc.Result = res
	return ec.marshalOSubscriber2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐSubscriberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriberSearchResult_subscribers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriberSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Subscriber_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Subscriber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Subscriber_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Subscriber_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Subscriber_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Subscriber_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Subscriber_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Subscriber_deletedBy(ctx, field)
			case "ownerID":
				return ec.fieldContext_Subscriber_ownerID(ctx, field)
			case "email":
				return ec.fieldContext_Subscriber_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Subscriber_phoneNumber(ctx, field)
			case "verifiedEmail":
				return ec.fieldContext_Subscriber_verifiedEmail(ctx, field)
			case "verifiedPhone":
				return ec.fieldContext_Subscriber_verifiedPhone(ctx, field)
			case "active":
				return ec.fieldContext_Subscriber_active(ctx, field)
			case "owner":
				return ec.fieldContext_Subscriber_owner(ctx, field)
			case "events":
				return ec.fieldContext_Subscriber_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Subscriber", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskSearchResult_tasks(ctx context.Context, field graphql.CollectedField, obj *model.TaskSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskSearchResult_tasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Task)
	fc.Result = res
	return ec.marshalOTask2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskSearchResult_tasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Task_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Task_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Task_displayID(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Task_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Task_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Task_ownerID(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "details":
				return ec.fieldContext_Task_details(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "category":
				return ec.fieldContext_Task_category(ctx, field)
			case "due":
				return ec.fieldContext_Task_due(ctx, field)
			case "completed":
				return ec.fieldContext_Task_completed(ctx, field)
			case "assigneeID":
				return ec.fieldContext_Task_assigneeID(ctx, field)
			case "assignerID":
				return ec.fieldContext_Task_assignerID(ctx, field)
			case "owner":
				return ec.fieldContext_Task_owner(ctx, field)
			case "assigner":
				return ec.fieldContext_Task_assigner(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "group":
				return ec.fieldContext_Task_group(ctx, field)
			case "internalPolicy":
				return ec.fieldContext_Task_internalPolicy(ctx, field)
			case "procedure":
				return ec.fieldContext_Task_procedure(ctx, field)
			case "control":
				return ec.fieldContext_Task_control(ctx, field)
			case "controlObjective":
				return ec.fieldContext_Task_controlObjective(ctx, field)
			case "subcontrol":
				return ec.fieldContext_Task_subcontrol(ctx, field)
			case "program":
				return ec.fieldContext_Task_program(ctx, field)
			case "evidence":
				return ec.fieldContext_Task_evidence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemplateSearchResult_templates(ctx context.Context, field graphql.CollectedField, obj *model.TemplateSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TemplateSearchResult_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Template)
	fc.Result = res
	return ec.marshalOTemplate2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TemplateSearchResult_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemplateSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Template_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Template_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Template_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Template_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Template_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Template_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Template_deletedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Template_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Template_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Template_name(ctx, field)
			case "templateType":
				return ec.fieldContext_Template_templateType(ctx, field)
			case "description":
				return ec.fieldContext_Template_description(ctx, field)
			case "jsonconfig":
				return ec.fieldContext_Template_jsonconfig(ctx, field)
			case "uischema":
				return ec.fieldContext_Template_uischema(ctx, field)
			case "owner":
				return ec.fieldContext_Template_owner(ctx, field)
			case "documents":
				return ec.fieldContext_Template_documents(ctx, field)
			case "files":
				return ec.fieldContext_Template_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Template", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSearchResult_users(ctx context.Context, field graphql.CollectedField, obj *model.UserSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSearchResult_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSearchResult_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_User_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_User_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_User_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_User_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_User_tags(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "displayName":
				return ec.fieldContext_User_displayName(ctx, field)
			case "avatarRemoteURL":
				return ec.fieldContext_User_avatarRemoteURL(ctx, field)
			case "avatarLocalFileID":
				return ec.fieldContext_User_avatarLocalFileID(ctx, field)
			case "avatarUpdatedAt":
				return ec.fieldContext_User_avatarUpdatedAt(ctx, field)
			case "lastSeen":
				return ec.fieldContext_User_lastSeen(ctx, field)
			case "sub":
				return ec.fieldContext_User_sub(ctx, field)
			case "authProvider":
				return ec.fieldContext_User_authProvider(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "personalAccessTokens":
				return ec.fieldContext_User_personalAccessTokens(ctx, field)
			case "tfaSettings":
				return ec.fieldContext_User_tfaSettings(ctx, field)
			case "setting":
				return ec.fieldContext_User_setting(ctx, field)
			case "groups":
				return ec.fieldContext_User_groups(ctx, field)
			case "organizations":
				return ec.fieldContext_User_organizations(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "avatarFile":
				return ec.fieldContext_User_avatarFile(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "actionPlans":
				return ec.fieldContext_User_actionPlans(ctx, field)
			case "subcontrols":
				return ec.fieldContext_User_subcontrols(ctx, field)
			case "assignerTasks":
				return ec.fieldContext_User_assignerTasks(ctx, field)
			case "assigneeTasks":
				return ec.fieldContext_User_assigneeTasks(ctx, field)
			case "programs":
				return ec.fieldContext_User_programs(ctx, field)
			case "groupMemberships":
				return ec.fieldContext_User_groupMemberships(ctx, field)
			case "orgMemberships":
				return ec.fieldContext_User_orgMemberships(ctx, field)
			case "programMemberships":
				return ec.fieldContext_User_programMemberships(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSettingSearchResult_userSettings(ctx context.Context, field graphql.CollectedField, obj *model.UserSettingSearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSettingSearchResult_userSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.UserSetting)
	fc.Result = res
	return ec.marshalOUserSetting2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐUserSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSettingSearchResult_userSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSettingSearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserSetting_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_UserSetting_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_UserSetting_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_UserSetting_tags(ctx, field)
			case "deletedAt":
				return ec.fieldContext_UserSetting_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_UserSetting_deletedBy(ctx, field)
			case "userID":
				return ec.fieldContext_UserSetting_userID(ctx, field)
			case "locked":
				return ec.fieldContext_UserSetting_locked(ctx, field)
			case "silencedAt":
				return ec.fieldContext_UserSetting_silencedAt(ctx, field)
			case "suspendedAt":
				return ec.fieldContext_UserSetting_suspendedAt(ctx, field)
			case "status":
				return ec.fieldContext_UserSetting_status(ctx, field)
			case "emailConfirmed":
				return ec.fieldContext_UserSetting_emailConfirmed(ctx, field)
			case "isWebauthnAllowed":
				return ec.fieldContext_UserSetting_isWebauthnAllowed(ctx, field)
			case "isTfaEnabled":
				return ec.fieldContext_UserSetting_isTfaEnabled(ctx, field)
			case "user":
				return ec.fieldContext_UserSetting_user(ctx, field)
			case "defaultOrg":
				return ec.fieldContext_UserSetting_defaultOrg(ctx, field)
			case "files":
				return ec.fieldContext_UserSetting_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSetting", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _SearchResult(ctx context.Context, sel ast.SelectionSet, obj model.SearchResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.APITokenSearchResult:
		return ec._APITokenSearchResult(ctx, sel, &obj)
	case *model.APITokenSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._APITokenSearchResult(ctx, sel, obj)
	case model.ActionPlanSearchResult:
		return ec._ActionPlanSearchResult(ctx, sel, &obj)
	case *model.ActionPlanSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionPlanSearchResult(ctx, sel, obj)
	case model.ContactSearchResult:
		return ec._ContactSearchResult(ctx, sel, &obj)
	case *model.ContactSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContactSearchResult(ctx, sel, obj)
	case model.ControlSearchResult:
		return ec._ControlSearchResult(ctx, sel, &obj)
	case *model.ControlSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._ControlSearchResult(ctx, sel, obj)
	case model.ControlObjectiveSearchResult:
		return ec._ControlObjectiveSearchResult(ctx, sel, &obj)
	case *model.ControlObjectiveSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._ControlObjectiveSearchResult(ctx, sel, obj)
	case model.DocumentDataSearchResult:
		return ec._DocumentDataSearchResult(ctx, sel, &obj)
	case *model.DocumentDataSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._DocumentDataSearchResult(ctx, sel, obj)
	case model.EntitySearchResult:
		return ec._EntitySearchResult(ctx, sel, &obj)
	case *model.EntitySearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._EntitySearchResult(ctx, sel, obj)
	case model.EntityTypeSearchResult:
		return ec._EntityTypeSearchResult(ctx, sel, &obj)
	case *model.EntityTypeSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._EntityTypeSearchResult(ctx, sel, obj)
	case model.EventSearchResult:
		return ec._EventSearchResult(ctx, sel, &obj)
	case *model.EventSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._EventSearchResult(ctx, sel, obj)
	case model.EvidenceSearchResult:
		return ec._EvidenceSearchResult(ctx, sel, &obj)
	case *model.EvidenceSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._EvidenceSearchResult(ctx, sel, obj)
	case model.FileSearchResult:
		return ec._FileSearchResult(ctx, sel, &obj)
	case *model.FileSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._FileSearchResult(ctx, sel, obj)
	case model.GroupSearchResult:
		return ec._GroupSearchResult(ctx, sel, &obj)
	case *model.GroupSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._GroupSearchResult(ctx, sel, obj)
	case model.IntegrationSearchResult:
		return ec._IntegrationSearchResult(ctx, sel, &obj)
	case *model.IntegrationSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._IntegrationSearchResult(ctx, sel, obj)
	case model.InternalPolicySearchResult:
		return ec._InternalPolicySearchResult(ctx, sel, &obj)
	case *model.InternalPolicySearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._InternalPolicySearchResult(ctx, sel, obj)
	case model.NarrativeSearchResult:
		return ec._NarrativeSearchResult(ctx, sel, &obj)
	case *model.NarrativeSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._NarrativeSearchResult(ctx, sel, obj)
	case model.OrgSubscriptionSearchResult:
		return ec._OrgSubscriptionSearchResult(ctx, sel, &obj)
	case *model.OrgSubscriptionSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrgSubscriptionSearchResult(ctx, sel, obj)
	case model.OrganizationSearchResult:
		return ec._OrganizationSearchResult(ctx, sel, &obj)
	case *model.OrganizationSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationSearchResult(ctx, sel, obj)
	case model.OrganizationSettingSearchResult:
		return ec._OrganizationSettingSearchResult(ctx, sel, &obj)
	case *model.OrganizationSettingSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationSettingSearchResult(ctx, sel, obj)
	case model.PersonalAccessTokenSearchResult:
		return ec._PersonalAccessTokenSearchResult(ctx, sel, &obj)
	case *model.PersonalAccessTokenSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._PersonalAccessTokenSearchResult(ctx, sel, obj)
	case model.ProcedureSearchResult:
		return ec._ProcedureSearchResult(ctx, sel, &obj)
	case *model.ProcedureSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProcedureSearchResult(ctx, sel, obj)
	case model.ProgramSearchResult:
		return ec._ProgramSearchResult(ctx, sel, &obj)
	case *model.ProgramSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProgramSearchResult(ctx, sel, obj)
	case model.RiskSearchResult:
		return ec._RiskSearchResult(ctx, sel, &obj)
	case *model.RiskSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._RiskSearchResult(ctx, sel, obj)
	case model.StandardSearchResult:
		return ec._StandardSearchResult(ctx, sel, &obj)
	case *model.StandardSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._StandardSearchResult(ctx, sel, obj)
	case model.SubcontrolSearchResult:
		return ec._SubcontrolSearchResult(ctx, sel, &obj)
	case *model.SubcontrolSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._SubcontrolSearchResult(ctx, sel, obj)
	case model.SubscriberSearchResult:
		return ec._SubscriberSearchResult(ctx, sel, &obj)
	case *model.SubscriberSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._SubscriberSearchResult(ctx, sel, obj)
	case model.TaskSearchResult:
		return ec._TaskSearchResult(ctx, sel, &obj)
	case *model.TaskSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._TaskSearchResult(ctx, sel, obj)
	case model.TemplateSearchResult:
		return ec._TemplateSearchResult(ctx, sel, &obj)
	case *model.TemplateSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._TemplateSearchResult(ctx, sel, obj)
	case model.UserSearchResult:
		return ec._UserSearchResult(ctx, sel, &obj)
	case *model.UserSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserSearchResult(ctx, sel, obj)
	case model.UserSettingSearchResult:
		return ec._UserSettingSearchResult(ctx, sel, &obj)
	case *model.UserSettingSearchResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserSettingSearchResult(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var aPITokenSearchResultImplementors = []string{"APITokenSearchResult", "SearchResult"}

func (ec *executionContext) _APITokenSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.APITokenSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aPITokenSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("APITokenSearchResult")
		case "apiTokens":
			out.Values[i] = ec._APITokenSearchResult_apiTokens(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionPlanSearchResultImplementors = []string{"ActionPlanSearchResult", "SearchResult"}

func (ec *executionContext) _ActionPlanSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.ActionPlanSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionPlanSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionPlanSearchResult")
		case "actionPlans":
			out.Values[i] = ec._ActionPlanSearchResult_actionPlans(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactSearchResultImplementors = []string{"ContactSearchResult", "SearchResult"}

func (ec *executionContext) _ContactSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.ContactSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactSearchResult")
		case "contacts":
			out.Values[i] = ec._ContactSearchResult_contacts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlObjectiveSearchResultImplementors = []string{"ControlObjectiveSearchResult", "SearchResult"}

func (ec *executionContext) _ControlObjectiveSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.ControlObjectiveSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlObjectiveSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlObjectiveSearchResult")
		case "controlObjectives":
			out.Values[i] = ec._ControlObjectiveSearchResult_controlObjectives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var controlSearchResultImplementors = []string{"ControlSearchResult", "SearchResult"}

func (ec *executionContext) _ControlSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.ControlSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlSearchResult")
		case "controls":
			out.Values[i] = ec._ControlSearchResult_controls(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var documentDataSearchResultImplementors = []string{"DocumentDataSearchResult", "SearchResult"}

func (ec *executionContext) _DocumentDataSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.DocumentDataSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, documentDataSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DocumentDataSearchResult")
		case "documentData":
			out.Values[i] = ec._DocumentDataSearchResult_documentData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var entitySearchResultImplementors = []string{"EntitySearchResult", "SearchResult"}

func (ec *executionContext) _EntitySearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.EntitySearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entitySearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EntitySearchResult")
		case "entities":
			out.Values[i] = ec._EntitySearchResult_entities(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var entityTypeSearchResultImplementors = []string{"EntityTypeSearchResult", "SearchResult"}

func (ec *executionContext) _EntityTypeSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.EntityTypeSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityTypeSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EntityTypeSearchResult")
		case "entityTypes":
			out.Values[i] = ec._EntityTypeSearchResult_entityTypes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventSearchResultImplementors = []string{"EventSearchResult", "SearchResult"}

func (ec *executionContext) _EventSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.EventSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventSearchResult")
		case "events":
			out.Values[i] = ec._EventSearchResult_events(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var evidenceSearchResultImplementors = []string{"EvidenceSearchResult", "SearchResult"}

func (ec *executionContext) _EvidenceSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.EvidenceSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evidenceSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvidenceSearchResult")
		case "evidences":
			out.Values[i] = ec._EvidenceSearchResult_evidences(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fileSearchResultImplementors = []string{"FileSearchResult", "SearchResult"}

func (ec *executionContext) _FileSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.FileSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileSearchResult")
		case "files":
			out.Values[i] = ec._FileSearchResult_files(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var groupSearchResultImplementors = []string{"GroupSearchResult", "SearchResult"}

func (ec *executionContext) _GroupSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.GroupSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, groupSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GroupSearchResult")
		case "groups":
			out.Values[i] = ec._GroupSearchResult_groups(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var integrationSearchResultImplementors = []string{"IntegrationSearchResult", "SearchResult"}

func (ec *executionContext) _IntegrationSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.IntegrationSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, integrationSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IntegrationSearchResult")
		case "integrations":
			out.Values[i] = ec._IntegrationSearchResult_integrations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var internalPolicySearchResultImplementors = []string{"InternalPolicySearchResult", "SearchResult"}

func (ec *executionContext) _InternalPolicySearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.InternalPolicySearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalPolicySearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalPolicySearchResult")
		case "internalPolicies":
			out.Values[i] = ec._InternalPolicySearchResult_internalPolicies(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var narrativeSearchResultImplementors = []string{"NarrativeSearchResult", "SearchResult"}

func (ec *executionContext) _NarrativeSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.NarrativeSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, narrativeSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NarrativeSearchResult")
		case "narratives":
			out.Values[i] = ec._NarrativeSearchResult_narratives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orgSubscriptionSearchResultImplementors = []string{"OrgSubscriptionSearchResult", "SearchResult"}

func (ec *executionContext) _OrgSubscriptionSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.OrgSubscriptionSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgSubscriptionSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgSubscriptionSearchResult")
		case "orgSubscriptions":
			out.Values[i] = ec._OrgSubscriptionSearchResult_orgSubscriptions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationSearchResultImplementors = []string{"OrganizationSearchResult", "SearchResult"}

func (ec *executionContext) _OrganizationSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationSearchResult")
		case "organizations":
			out.Values[i] = ec._OrganizationSearchResult_organizations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationSettingSearchResultImplementors = []string{"OrganizationSettingSearchResult", "SearchResult"}

func (ec *executionContext) _OrganizationSettingSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationSettingSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationSettingSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationSettingSearchResult")
		case "organizationSettings":
			out.Values[i] = ec._OrganizationSettingSearchResult_organizationSettings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var personalAccessTokenSearchResultImplementors = []string{"PersonalAccessTokenSearchResult", "SearchResult"}

func (ec *executionContext) _PersonalAccessTokenSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.PersonalAccessTokenSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personalAccessTokenSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonalAccessTokenSearchResult")
		case "personalAccessTokens":
			out.Values[i] = ec._PersonalAccessTokenSearchResult_personalAccessTokens(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var procedureSearchResultImplementors = []string{"ProcedureSearchResult", "SearchResult"}

func (ec *executionContext) _ProcedureSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.ProcedureSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcedureSearchResult")
		case "procedures":
			out.Values[i] = ec._ProcedureSearchResult_procedures(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var programSearchResultImplementors = []string{"ProgramSearchResult", "SearchResult"}

func (ec *executionContext) _ProgramSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.ProgramSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, programSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProgramSearchResult")
		case "programs":
			out.Values[i] = ec._ProgramSearchResult_programs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var riskSearchResultImplementors = []string{"RiskSearchResult", "SearchResult"}

func (ec *executionContext) _RiskSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.RiskSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, riskSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RiskSearchResult")
		case "risks":
			out.Values[i] = ec._RiskSearchResult_risks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var searchResultConnectionImplementors = []string{"SearchResultConnection"}

func (ec *executionContext) _SearchResultConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SearchResultConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResultConnection")
		case "page":
			out.Values[i] = ec._SearchResultConnection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._SearchResultConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._SearchResultConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var standardSearchResultImplementors = []string{"StandardSearchResult", "SearchResult"}

func (ec *executionContext) _StandardSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.StandardSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, standardSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StandardSearchResult")
		case "standards":
			out.Values[i] = ec._StandardSearchResult_standards(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subcontrolSearchResultImplementors = []string{"SubcontrolSearchResult", "SearchResult"}

func (ec *executionContext) _SubcontrolSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.SubcontrolSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subcontrolSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubcontrolSearchResult")
		case "subcontrols":
			out.Values[i] = ec._SubcontrolSearchResult_subcontrols(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriberSearchResultImplementors = []string{"SubscriberSearchResult", "SearchResult"}

func (ec *executionContext) _SubscriberSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriberSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriberSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubscriberSearchResult")
		case "subscribers":
			out.Values[i] = ec._SubscriberSearchResult_subscribers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskSearchResultImplementors = []string{"TaskSearchResult", "SearchResult"}

func (ec *executionContext) _TaskSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.TaskSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskSearchResult")
		case "tasks":
			out.Values[i] = ec._TaskSearchResult_tasks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var templateSearchResultImplementors = []string{"TemplateSearchResult", "SearchResult"}

func (ec *executionContext) _TemplateSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.TemplateSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateSearchResult")
		case "templates":
			out.Values[i] = ec._TemplateSearchResult_templates(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userSearchResultImplementors = []string{"UserSearchResult", "SearchResult"}

func (ec *executionContext) _UserSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.UserSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSearchResult")
		case "users":
			out.Values[i] = ec._UserSearchResult_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userSettingSearchResultImplementors = []string{"UserSettingSearchResult", "SearchResult"}

func (ec *executionContext) _UserSettingSearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.UserSettingSearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSettingSearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSettingSearchResult")
		case "userSettings":
			out.Values[i] = ec._UserSettingSearchResult_userSettings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNSearchResult2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSearchResult(ctx context.Context, sel ast.SelectionSet, v model.SearchResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchResult2ᚕgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSearchResultᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SearchResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSearchResult2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSearchResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAPITokenSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐAPITokenSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.APITokenSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._APITokenSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOActionPlanSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐActionPlanSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.ActionPlanSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionPlanSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOContactSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐContactSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.ContactSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContactSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOControlObjectiveSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlObjectiveSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.ControlObjectiveSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlObjectiveSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOControlSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐControlSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.ControlSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalODocumentDataSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐDocumentDataSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.DocumentDataSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DocumentDataSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOEntitySearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEntitySearchResult(ctx context.Context, sel ast.SelectionSet, v *model.EntitySearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EntitySearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOEntityTypeSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEntityTypeSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.EntityTypeSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EntityTypeSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOEventSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEventSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.EventSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOEvidenceSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEvidenceSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.EvidenceSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EvidenceSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOFileSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐFileSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.FileSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FileSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOGroupSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐGroupSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.GroupSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GroupSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOIntegrationSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐIntegrationSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.IntegrationSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IntegrationSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOInternalPolicySearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐInternalPolicySearchResult(ctx context.Context, sel ast.SelectionSet, v *model.InternalPolicySearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InternalPolicySearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalONarrativeSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐNarrativeSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.NarrativeSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NarrativeSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOOrgSubscriptionSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrgSubscriptionSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.OrgSubscriptionSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgSubscriptionSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationSettingSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐOrganizationSettingSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationSettingSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationSettingSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOPersonalAccessTokenSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐPersonalAccessTokenSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.PersonalAccessTokenSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonalAccessTokenSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOProcedureSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProcedureSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.ProcedureSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProcedureSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOProgramSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐProgramSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.ProgramSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProgramSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalORiskSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐRiskSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.RiskSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RiskSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOSearchResultConnection2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSearchResultConnection(ctx context.Context, sel ast.SelectionSet, v *model.SearchResultConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SearchResultConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOStandardSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐStandardSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.StandardSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StandardSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOSubcontrolSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubcontrolSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.SubcontrolSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubcontrolSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOSubscriberSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubscriberSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.SubscriberSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubscriberSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOTaskSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTaskSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.TaskSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TaskSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOTemplateSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTemplateSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.TemplateSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TemplateSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOUserSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐUserSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.UserSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserSearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOUserSettingSearchResult2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐUserSettingSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.UserSettingSearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserSettingSearchResult(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
