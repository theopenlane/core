// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _SendTrustCenterNDAEmailPayload_success(ctx context.Context, field graphql.CollectedField, obj *model.SendTrustCenterNDAEmailPayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SendTrustCenterNDAEmailPayload_success,
		func(ctx context.Context) (any, error) { return obj.Success, nil },
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SendTrustCenterNDAEmailPayload_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SendTrustCenterNDAEmailPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitTrustCenterNDAResponsePayload_documentData(ctx context.Context, field graphql.CollectedField, obj *model.SubmitTrustCenterNDAResponsePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SubmitTrustCenterNDAResponsePayload_documentData,
		func(ctx context.Context) (any, error) { return obj.DocumentData, nil },
		nil,
		ec.marshalNDocumentData2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐDocumentData,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SubmitTrustCenterNDAResponsePayload_documentData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitTrustCenterNDAResponsePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DocumentData_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_DocumentData_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DocumentData_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DocumentData_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DocumentData_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_DocumentData_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_DocumentData_ownerID(ctx, field)
			case "templateID":
				return ec.fieldContext_DocumentData_templateID(ctx, field)
			case "data":
				return ec.fieldContext_DocumentData_data(ctx, field)
			case "owner":
				return ec.fieldContext_DocumentData_owner(ctx, field)
			case "template":
				return ec.fieldContext_DocumentData_template(ctx, field)
			case "entities":
				return ec.fieldContext_DocumentData_entities(ctx, field)
			case "files":
				return ec.fieldContext_DocumentData_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterNDACreatePayload_template(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterNDACreatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterNDACreatePayload_template,
		func(ctx context.Context) (any, error) { return obj.Template, nil },
		nil,
		ec.marshalNTemplate2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterNDACreatePayload_template(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterNDACreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Template_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Template_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Template_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Template_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Template_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Template_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Template_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_Template_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_Template_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_Template_systemInternalID(ctx, field)
			case "name":
				return ec.fieldContext_Template_name(ctx, field)
			case "templateType":
				return ec.fieldContext_Template_templateType(ctx, field)
			case "description":
				return ec.fieldContext_Template_description(ctx, field)
			case "kind":
				return ec.fieldContext_Template_kind(ctx, field)
			case "jsonconfig":
				return ec.fieldContext_Template_jsonconfig(ctx, field)
			case "uischema":
				return ec.fieldContext_Template_uischema(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_Template_trustCenterID(ctx, field)
			case "owner":
				return ec.fieldContext_Template_owner(ctx, field)
			case "documents":
				return ec.fieldContext_Template_documents(ctx, field)
			case "files":
				return ec.fieldContext_Template_files(ctx, field)
			case "trustCenter":
				return ec.fieldContext_Template_trustCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Template", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrustCenterNDAUpdatePayload_template(ctx context.Context, field graphql.CollectedField, obj *model.TrustCenterNDAUpdatePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrustCenterNDAUpdatePayload_template,
		func(ctx context.Context) (any, error) { return obj.Template, nil },
		nil,
		ec.marshalNTemplate2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐTemplate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrustCenterNDAUpdatePayload_template(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrustCenterNDAUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Template_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Template_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Template_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Template_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Template_updatedBy(ctx, field)
			case "tags":
				return ec.fieldContext_Template_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Template_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_Template_systemOwned(ctx, field)
			case "internalNotes":
				return ec.fieldContext_Template_internalNotes(ctx, field)
			case "systemInternalID":
				return ec.fieldContext_Template_systemInternalID(ctx, field)
			case "name":
				return ec.fieldContext_Template_name(ctx, field)
			case "templateType":
				return ec.fieldContext_Template_templateType(ctx, field)
			case "description":
				return ec.fieldContext_Template_description(ctx, field)
			case "kind":
				return ec.fieldContext_Template_kind(ctx, field)
			case "jsonconfig":
				return ec.fieldContext_Template_jsonconfig(ctx, field)
			case "uischema":
				return ec.fieldContext_Template_uischema(ctx, field)
			case "trustCenterID":
				return ec.fieldContext_Template_trustCenterID(ctx, field)
			case "owner":
				return ec.fieldContext_Template_owner(ctx, field)
			case "documents":
				return ec.fieldContext_Template_documents(ctx, field)
			case "files":
				return ec.fieldContext_Template_files(ctx, field)
			case "trustCenter":
				return ec.fieldContext_Template_trustCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Template", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateTrustCenterNDAInput(ctx context.Context, obj any) (model.CreateTrustCenterNDAInput, error) {
	var it model.CreateTrustCenterNDAInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trustCenterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trustCenterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trustCenterID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrustCenterID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendTrustCenterNDAInput(ctx context.Context, obj any) (model.SendTrustCenterNDAInput, error) {
	var it model.SendTrustCenterNDAInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trustCenterID", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trustCenterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trustCenterID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrustCenterID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmitTrustCenterNDAResponseInput(ctx context.Context, obj any) (model.SubmitTrustCenterNDAResponseInput, error) {
	var it model.SubmitTrustCenterNDAResponseInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"templateID", "response"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "templateID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TemplateID = data
		case "response":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			data, err := ec.unmarshalNMap2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Response = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var sendTrustCenterNDAEmailPayloadImplementors = []string{"SendTrustCenterNDAEmailPayload"}

func (ec *executionContext) _SendTrustCenterNDAEmailPayload(ctx context.Context, sel ast.SelectionSet, obj *model.SendTrustCenterNDAEmailPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sendTrustCenterNDAEmailPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SendTrustCenterNDAEmailPayload")
		case "success":
			out.Values[i] = ec._SendTrustCenterNDAEmailPayload_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var submitTrustCenterNDAResponsePayloadImplementors = []string{"SubmitTrustCenterNDAResponsePayload"}

func (ec *executionContext) _SubmitTrustCenterNDAResponsePayload(ctx context.Context, sel ast.SelectionSet, obj *model.SubmitTrustCenterNDAResponsePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submitTrustCenterNDAResponsePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubmitTrustCenterNDAResponsePayload")
		case "documentData":
			out.Values[i] = ec._SubmitTrustCenterNDAResponsePayload_documentData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterNDACreatePayloadImplementors = []string{"TrustCenterNDACreatePayload"}

func (ec *executionContext) _TrustCenterNDACreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterNDACreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterNDACreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterNDACreatePayload")
		case "template":
			out.Values[i] = ec._TrustCenterNDACreatePayload_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trustCenterNDAUpdatePayloadImplementors = []string{"TrustCenterNDAUpdatePayload"}

func (ec *executionContext) _TrustCenterNDAUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.TrustCenterNDAUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trustCenterNDAUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrustCenterNDAUpdatePayload")
		case "template":
			out.Values[i] = ec._TrustCenterNDAUpdatePayload_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateTrustCenterNDAInput2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐCreateTrustCenterNDAInput(ctx context.Context, v any) (model.CreateTrustCenterNDAInput, error) {
	res, err := ec.unmarshalInputCreateTrustCenterNDAInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSendTrustCenterNDAEmailPayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSendTrustCenterNDAEmailPayload(ctx context.Context, sel ast.SelectionSet, v model.SendTrustCenterNDAEmailPayload) graphql.Marshaler {
	return ec._SendTrustCenterNDAEmailPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSendTrustCenterNDAEmailPayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSendTrustCenterNDAEmailPayload(ctx context.Context, sel ast.SelectionSet, v *model.SendTrustCenterNDAEmailPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SendTrustCenterNDAEmailPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSendTrustCenterNDAInput2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSendTrustCenterNDAInput(ctx context.Context, v any) (model.SendTrustCenterNDAInput, error) {
	res, err := ec.unmarshalInputSendTrustCenterNDAInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSubmitTrustCenterNDAResponseInput2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubmitTrustCenterNDAResponseInput(ctx context.Context, v any) (model.SubmitTrustCenterNDAResponseInput, error) {
	res, err := ec.unmarshalInputSubmitTrustCenterNDAResponseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSubmitTrustCenterNDAResponsePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubmitTrustCenterNDAResponsePayload(ctx context.Context, sel ast.SelectionSet, v model.SubmitTrustCenterNDAResponsePayload) graphql.Marshaler {
	return ec._SubmitTrustCenterNDAResponsePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubmitTrustCenterNDAResponsePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐSubmitTrustCenterNDAResponsePayload(ctx context.Context, sel ast.SelectionSet, v *model.SubmitTrustCenterNDAResponsePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubmitTrustCenterNDAResponsePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterNDACreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterNDACreatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterNDACreatePayload) graphql.Marshaler {
	return ec._TrustCenterNDACreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterNDACreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterNDACreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterNDACreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterNDACreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrustCenterNDAUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterNDAUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.TrustCenterNDAUpdatePayload) graphql.Marshaler {
	return ec._TrustCenterNDAUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrustCenterNDAUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐTrustCenterNDAUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.TrustCenterNDAUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrustCenterNDAUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
