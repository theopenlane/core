// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ScheduledJobBulkCreatePayload_scheduledJobs(ctx context.Context, field graphql.CollectedField, obj *model.ScheduledJobBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledJobBulkCreatePayload_scheduledJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScheduledJobs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.ScheduledJob)
	fc.Result = res
	return ec.marshalOScheduledJob2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScheduledJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledJobBulkCreatePayload_scheduledJobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledJobBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScheduledJob_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ScheduledJob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ScheduledJob_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ScheduledJob_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ScheduledJob_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_ScheduledJob_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_ScheduledJob_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_ScheduledJob_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_ScheduledJob_systemOwned(ctx, field)
			case "title":
				return ec.fieldContext_ScheduledJob_title(ctx, field)
			case "description":
				return ec.fieldContext_ScheduledJob_description(ctx, field)
			case "platform":
				return ec.fieldContext_ScheduledJob_platform(ctx, field)
			case "script":
				return ec.fieldContext_ScheduledJob_script(ctx, field)
			case "windmillPath":
				return ec.fieldContext_ScheduledJob_windmillPath(ctx, field)
			case "downloadURL":
				return ec.fieldContext_ScheduledJob_downloadURL(ctx, field)
			case "configuration":
				return ec.fieldContext_ScheduledJob_configuration(ctx, field)
			case "cadence":
				return ec.fieldContext_ScheduledJob_cadence(ctx, field)
			case "cron":
				return ec.fieldContext_ScheduledJob_cron(ctx, field)
			case "owner":
				return ec.fieldContext_ScheduledJob_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScheduledJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledJobCreatePayload_scheduledJob(ctx context.Context, field graphql.CollectedField, obj *model.ScheduledJobCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledJobCreatePayload_scheduledJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScheduledJob, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ScheduledJob)
	fc.Result = res
	return ec.marshalNScheduledJob2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScheduledJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledJobCreatePayload_scheduledJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledJobCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScheduledJob_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ScheduledJob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ScheduledJob_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ScheduledJob_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ScheduledJob_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_ScheduledJob_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_ScheduledJob_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_ScheduledJob_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_ScheduledJob_systemOwned(ctx, field)
			case "title":
				return ec.fieldContext_ScheduledJob_title(ctx, field)
			case "description":
				return ec.fieldContext_ScheduledJob_description(ctx, field)
			case "platform":
				return ec.fieldContext_ScheduledJob_platform(ctx, field)
			case "script":
				return ec.fieldContext_ScheduledJob_script(ctx, field)
			case "windmillPath":
				return ec.fieldContext_ScheduledJob_windmillPath(ctx, field)
			case "downloadURL":
				return ec.fieldContext_ScheduledJob_downloadURL(ctx, field)
			case "configuration":
				return ec.fieldContext_ScheduledJob_configuration(ctx, field)
			case "cadence":
				return ec.fieldContext_ScheduledJob_cadence(ctx, field)
			case "cron":
				return ec.fieldContext_ScheduledJob_cron(ctx, field)
			case "owner":
				return ec.fieldContext_ScheduledJob_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScheduledJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledJobDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.ScheduledJobDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledJobDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledJobDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledJobDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledJobUpdatePayload_scheduledJob(ctx context.Context, field graphql.CollectedField, obj *model.ScheduledJobUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledJobUpdatePayload_scheduledJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScheduledJob, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.ScheduledJob)
	fc.Result = res
	return ec.marshalNScheduledJob2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐScheduledJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledJobUpdatePayload_scheduledJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledJobUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScheduledJob_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ScheduledJob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ScheduledJob_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ScheduledJob_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_ScheduledJob_updatedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_ScheduledJob_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_ScheduledJob_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_ScheduledJob_ownerID(ctx, field)
			case "systemOwned":
				return ec.fieldContext_ScheduledJob_systemOwned(ctx, field)
			case "title":
				return ec.fieldContext_ScheduledJob_title(ctx, field)
			case "description":
				return ec.fieldContext_ScheduledJob_description(ctx, field)
			case "platform":
				return ec.fieldContext_ScheduledJob_platform(ctx, field)
			case "script":
				return ec.fieldContext_ScheduledJob_script(ctx, field)
			case "windmillPath":
				return ec.fieldContext_ScheduledJob_windmillPath(ctx, field)
			case "downloadURL":
				return ec.fieldContext_ScheduledJob_downloadURL(ctx, field)
			case "configuration":
				return ec.fieldContext_ScheduledJob_configuration(ctx, field)
			case "cadence":
				return ec.fieldContext_ScheduledJob_cadence(ctx, field)
			case "cron":
				return ec.fieldContext_ScheduledJob_cron(ctx, field)
			case "owner":
				return ec.fieldContext_ScheduledJob_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScheduledJob", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var scheduledJobBulkCreatePayloadImplementors = []string{"ScheduledJobBulkCreatePayload"}

func (ec *executionContext) _ScheduledJobBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScheduledJobBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scheduledJobBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScheduledJobBulkCreatePayload")
		case "scheduledJobs":
			out.Values[i] = ec._ScheduledJobBulkCreatePayload_scheduledJobs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scheduledJobCreatePayloadImplementors = []string{"ScheduledJobCreatePayload"}

func (ec *executionContext) _ScheduledJobCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScheduledJobCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scheduledJobCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScheduledJobCreatePayload")
		case "scheduledJob":
			out.Values[i] = ec._ScheduledJobCreatePayload_scheduledJob(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scheduledJobDeletePayloadImplementors = []string{"ScheduledJobDeletePayload"}

func (ec *executionContext) _ScheduledJobDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScheduledJobDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scheduledJobDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScheduledJobDeletePayload")
		case "deletedID":
			out.Values[i] = ec._ScheduledJobDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scheduledJobUpdatePayloadImplementors = []string{"ScheduledJobUpdatePayload"}

func (ec *executionContext) _ScheduledJobUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ScheduledJobUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scheduledJobUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScheduledJobUpdatePayload")
		case "scheduledJob":
			out.Values[i] = ec._ScheduledJobUpdatePayload_scheduledJob(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNScheduledJobBulkCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ScheduledJobBulkCreatePayload) graphql.Marshaler {
	return ec._ScheduledJobBulkCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScheduledJobBulkCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScheduledJobBulkCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScheduledJobBulkCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNScheduledJobCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.ScheduledJobCreatePayload) graphql.Marshaler {
	return ec._ScheduledJobCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScheduledJobCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScheduledJobCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScheduledJobCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNScheduledJobDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.ScheduledJobDeletePayload) graphql.Marshaler {
	return ec._ScheduledJobDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScheduledJobDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScheduledJobDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScheduledJobDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNScheduledJobUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.ScheduledJobUpdatePayload) graphql.Marshaler {
	return ec._ScheduledJobUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScheduledJobUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐScheduledJobUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.ScheduledJobUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScheduledJobUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
