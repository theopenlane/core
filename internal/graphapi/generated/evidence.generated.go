// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgenerated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _EvidenceBulkCreatePayload_evidences(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceBulkCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceBulkCreatePayload_evidences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Evidences, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*generated.Evidence)
	fc.Result = res
	return ec.marshalOEvidence2ᚕᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEvidenceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceBulkCreatePayload_evidences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceBulkCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Evidence_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Evidence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Evidence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Evidence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Evidence_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Evidence_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Evidence_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Evidence_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Evidence_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Evidence_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Evidence_name(ctx, field)
			case "description":
				return ec.fieldContext_Evidence_description(ctx, field)
			case "collectionProcedure":
				return ec.fieldContext_Evidence_collectionProcedure(ctx, field)
			case "creationDate":
				return ec.fieldContext_Evidence_creationDate(ctx, field)
			case "renewalDate":
				return ec.fieldContext_Evidence_renewalDate(ctx, field)
			case "source":
				return ec.fieldContext_Evidence_source(ctx, field)
			case "isAutomated":
				return ec.fieldContext_Evidence_isAutomated(ctx, field)
			case "url":
				return ec.fieldContext_Evidence_url(ctx, field)
			case "status":
				return ec.fieldContext_Evidence_status(ctx, field)
			case "owner":
				return ec.fieldContext_Evidence_owner(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Evidence_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_Evidence_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Evidence_subcontrols(ctx, field)
			case "files":
				return ec.fieldContext_Evidence_files(ctx, field)
			case "programs":
				return ec.fieldContext_Evidence_programs(ctx, field)
			case "tasks":
				return ec.fieldContext_Evidence_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Evidence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceCreatePayload_evidence(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceCreatePayload_evidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Evidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Evidence)
	fc.Result = res
	return ec.marshalNEvidence2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEvidence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceCreatePayload_evidence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Evidence_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Evidence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Evidence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Evidence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Evidence_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Evidence_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Evidence_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Evidence_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Evidence_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Evidence_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Evidence_name(ctx, field)
			case "description":
				return ec.fieldContext_Evidence_description(ctx, field)
			case "collectionProcedure":
				return ec.fieldContext_Evidence_collectionProcedure(ctx, field)
			case "creationDate":
				return ec.fieldContext_Evidence_creationDate(ctx, field)
			case "renewalDate":
				return ec.fieldContext_Evidence_renewalDate(ctx, field)
			case "source":
				return ec.fieldContext_Evidence_source(ctx, field)
			case "isAutomated":
				return ec.fieldContext_Evidence_isAutomated(ctx, field)
			case "url":
				return ec.fieldContext_Evidence_url(ctx, field)
			case "status":
				return ec.fieldContext_Evidence_status(ctx, field)
			case "owner":
				return ec.fieldContext_Evidence_owner(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Evidence_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_Evidence_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Evidence_subcontrols(ctx, field)
			case "files":
				return ec.fieldContext_Evidence_files(ctx, field)
			case "programs":
				return ec.fieldContext_Evidence_programs(ctx, field)
			case "tasks":
				return ec.fieldContext_Evidence_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Evidence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceDeletePayload_deletedID(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceDeletePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceDeletePayload_deletedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceDeletePayload_deletedID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceDeletePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceUpdatePayload_evidence(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceUpdatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceUpdatePayload_evidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Evidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*generated.Evidence)
	fc.Result = res
	return ec.marshalNEvidence2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋentᚋgeneratedᚐEvidence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceUpdatePayload_evidence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceUpdatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Evidence_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Evidence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Evidence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Evidence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Evidence_updatedBy(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Evidence_deletedAt(ctx, field)
			case "deletedBy":
				return ec.fieldContext_Evidence_deletedBy(ctx, field)
			case "displayID":
				return ec.fieldContext_Evidence_displayID(ctx, field)
			case "tags":
				return ec.fieldContext_Evidence_tags(ctx, field)
			case "ownerID":
				return ec.fieldContext_Evidence_ownerID(ctx, field)
			case "name":
				return ec.fieldContext_Evidence_name(ctx, field)
			case "description":
				return ec.fieldContext_Evidence_description(ctx, field)
			case "collectionProcedure":
				return ec.fieldContext_Evidence_collectionProcedure(ctx, field)
			case "creationDate":
				return ec.fieldContext_Evidence_creationDate(ctx, field)
			case "renewalDate":
				return ec.fieldContext_Evidence_renewalDate(ctx, field)
			case "source":
				return ec.fieldContext_Evidence_source(ctx, field)
			case "isAutomated":
				return ec.fieldContext_Evidence_isAutomated(ctx, field)
			case "url":
				return ec.fieldContext_Evidence_url(ctx, field)
			case "status":
				return ec.fieldContext_Evidence_status(ctx, field)
			case "owner":
				return ec.fieldContext_Evidence_owner(ctx, field)
			case "controlObjectives":
				return ec.fieldContext_Evidence_controlObjectives(ctx, field)
			case "controls":
				return ec.fieldContext_Evidence_controls(ctx, field)
			case "subcontrols":
				return ec.fieldContext_Evidence_subcontrols(ctx, field)
			case "files":
				return ec.fieldContext_Evidence_files(ctx, field)
			case "programs":
				return ec.fieldContext_Evidence_programs(ctx, field)
			case "tasks":
				return ec.fieldContext_Evidence_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Evidence", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var evidenceBulkCreatePayloadImplementors = []string{"EvidenceBulkCreatePayload"}

func (ec *executionContext) _EvidenceBulkCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.EvidenceBulkCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evidenceBulkCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvidenceBulkCreatePayload")
		case "evidences":
			out.Values[i] = ec._EvidenceBulkCreatePayload_evidences(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var evidenceCreatePayloadImplementors = []string{"EvidenceCreatePayload"}

func (ec *executionContext) _EvidenceCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.EvidenceCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evidenceCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvidenceCreatePayload")
		case "evidence":
			out.Values[i] = ec._EvidenceCreatePayload_evidence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var evidenceDeletePayloadImplementors = []string{"EvidenceDeletePayload"}

func (ec *executionContext) _EvidenceDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *model.EvidenceDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evidenceDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvidenceDeletePayload")
		case "deletedID":
			out.Values[i] = ec._EvidenceDeletePayload_deletedID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var evidenceUpdatePayloadImplementors = []string{"EvidenceUpdatePayload"}

func (ec *executionContext) _EvidenceUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.EvidenceUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evidenceUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvidenceUpdatePayload")
		case "evidence":
			out.Values[i] = ec._EvidenceUpdatePayload_evidence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNEvidenceCreatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEvidenceCreatePayload(ctx context.Context, sel ast.SelectionSet, v model.EvidenceCreatePayload) graphql.Marshaler {
	return ec._EvidenceCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNEvidenceCreatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEvidenceCreatePayload(ctx context.Context, sel ast.SelectionSet, v *model.EvidenceCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EvidenceCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNEvidenceDeletePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEvidenceDeletePayload(ctx context.Context, sel ast.SelectionSet, v model.EvidenceDeletePayload) graphql.Marshaler {
	return ec._EvidenceDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNEvidenceDeletePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEvidenceDeletePayload(ctx context.Context, sel ast.SelectionSet, v *model.EvidenceDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EvidenceDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNEvidenceUpdatePayload2githubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEvidenceUpdatePayload(ctx context.Context, sel ast.SelectionSet, v model.EvidenceUpdatePayload) graphql.Marshaler {
	return ec._EvidenceUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNEvidenceUpdatePayload2ᚖgithubᚗcomᚋtheopenlaneᚋcoreᚋinternalᚋgraphapiᚋmodelᚐEvidenceUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *model.EvidenceUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EvidenceUpdatePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
