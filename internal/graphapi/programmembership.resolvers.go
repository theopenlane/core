package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
)

// CreateProgramMembership is the resolver for the createProgramMembership field.
func (r *mutationResolver) CreateProgramMembership(ctx context.Context, input generated.CreateProgramMembershipInput) (*model.ProgramMembershipCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).ProgramMembership.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "programmembership"})
	}

	return &model.ProgramMembershipCreatePayload{
		ProgramMembership: res,
	}, nil
}

// CreateBulkProgramMembership is the resolver for the createBulkProgramMembership field.
func (r *mutationResolver) CreateBulkProgramMembership(ctx context.Context, input []*generated.CreateProgramMembershipInput) (*model.ProgramMembershipBulkCreatePayload, error) {
	return r.bulkCreateProgramMembership(ctx, input)
}

// CreateBulkCSVProgramMembership is the resolver for the createBulkCSVProgramMembership field.
func (r *mutationResolver) CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload) (*model.ProgramMembershipBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateProgramMembershipInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateProgramMembership(ctx, data)
}

// UpdateProgramMembership is the resolver for the updateProgramMembership field.
func (r *mutationResolver) UpdateProgramMembership(ctx context.Context, id string, input generated.UpdateProgramMembershipInput) (*model.ProgramMembershipUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).ProgramMembership.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "programmembership"})
	}

	// setup update request
	req := res.Update().SetInput(input)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "programmembership"})
	}

	return &model.ProgramMembershipUpdatePayload{
		ProgramMembership: res,
	}, nil
}

// DeleteProgramMembership is the resolver for the deleteProgramMembership field.
func (r *mutationResolver) DeleteProgramMembership(ctx context.Context, id string) (*model.ProgramMembershipDeletePayload, error) {
	if err := withTransactionalMutation(ctx).ProgramMembership.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "programmembership"})
	}

	if err := generated.ProgramMembershipEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.ProgramMembershipDeletePayload{
		DeletedID: id,
	}, nil
}

// ProgramMembership is the resolver for the programMembership field.
func (r *queryResolver) ProgramMembership(ctx context.Context, id string) (*generated.ProgramMembership, error) {
	res, err := withTransactionalMutation(ctx).ProgramMembership.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "programmembership"})
	}

	return res, nil
}
