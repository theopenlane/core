package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateSubprocessor is the resolver for the createSubprocessor field.
func (r *mutationResolver) CreateSubprocessor(ctx context.Context, input generated.CreateSubprocessorInput) (*model.SubprocessorCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).Subprocessor.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "subprocessor"})
	}

	return &model.SubprocessorCreatePayload{
		Subprocessor: res,
	}, nil
}

// CreateBulkSubprocessor is the resolver for the createBulkSubprocessor field.
func (r *mutationResolver) CreateBulkSubprocessor(ctx context.Context, input []*generated.CreateSubprocessorInput) (*model.SubprocessorBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateSubprocessor(ctx, input)
}

// CreateBulkCSVSubprocessor is the resolver for the createBulkCSVSubprocessor field.
func (r *mutationResolver) CreateBulkCSVSubprocessor(ctx context.Context, input graphql.Upload) (*model.SubprocessorBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateSubprocessorInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateSubprocessor(ctx, data)
}

// UpdateSubprocessor is the resolver for the updateSubprocessor field.
func (r *mutationResolver) UpdateSubprocessor(ctx context.Context, id string, input generated.UpdateSubprocessorInput) (*model.SubprocessorUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Subprocessor.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "subprocessor"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "subprocessor"})
	}

	return &model.SubprocessorUpdatePayload{
		Subprocessor: res,
	}, nil
}

// DeleteSubprocessor is the resolver for the deleteSubprocessor field.
func (r *mutationResolver) DeleteSubprocessor(ctx context.Context, id string) (*model.SubprocessorDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Subprocessor.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "subprocessor"})
	}

	if err := generated.SubprocessorEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.SubprocessorDeletePayload{
		DeletedID: id,
	}, nil
}

// Subprocessor is the resolver for the subprocessor field.
func (r *queryResolver) Subprocessor(ctx context.Context, id string) (*generated.Subprocessor, error) {
	query, err := withTransactionalMutation(ctx).Subprocessor.Query().Where(subprocessor.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subprocessor"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subprocessor"})
	}

	return res, nil
}
