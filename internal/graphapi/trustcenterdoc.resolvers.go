package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterdoc"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenterDoc is the resolver for the createTrustCenterDoc field.
func (r *mutationResolver) CreateTrustCenterDoc(ctx context.Context, input generated.CreateTrustCenterDocInput, trustCenterDocFile graphql.Upload) (*model.TrustCenterDocCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterDoc.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcenterdoc"})
	}

	return &model.TrustCenterDocCreatePayload{
		TrustCenterDoc: res,
	}, nil
}

// CreateBulkTrustCenterDoc is the resolver for the createBulkTrustCenterDoc field.
func (r *mutationResolver) CreateBulkTrustCenterDoc(ctx context.Context, input []*generated.CreateTrustCenterDocInput) (*model.TrustCenterDocBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterDoc(ctx, input)
}

// CreateBulkCSVTrustCenterDoc is the resolver for the createBulkCSVTrustCenterDoc field.
func (r *mutationResolver) CreateBulkCSVTrustCenterDoc(ctx context.Context, input graphql.Upload) (*model.TrustCenterDocBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateTrustCenterDocInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterDoc(ctx, data)
}

// UpdateTrustCenterDoc is the resolver for the updateTrustCenterDoc field.
func (r *mutationResolver) UpdateTrustCenterDoc(ctx context.Context, id string, input generated.UpdateTrustCenterDocInput, trustCenterDocFile *graphql.Upload, watermarkedTrustCenterDocFile *graphql.Upload) (*model.TrustCenterDocUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterDoc.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcenterdoc"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcenterdoc"})
	}

	return &model.TrustCenterDocUpdatePayload{
		TrustCenterDoc: res,
	}, nil
}

// DeleteTrustCenterDoc is the resolver for the deleteTrustCenterDoc field.
func (r *mutationResolver) DeleteTrustCenterDoc(ctx context.Context, id string) (*model.TrustCenterDocDeletePayload, error) {
	if err := withTransactionalMutation(ctx).TrustCenterDoc.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "trustcenterdoc"})
	}

	if err := generated.TrustCenterDocEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.TrustCenterDocDeletePayload{
		DeletedID: id,
	}, nil
}

// TrustCenterDoc is the resolver for the trustCenterDoc field.
func (r *queryResolver) TrustCenterDoc(ctx context.Context, id string) (*generated.TrustCenterDoc, error) {
	query, err := withTransactionalMutation(ctx).TrustCenterDoc.Query().Where(trustcenterdoc.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcenterdoc"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcenterdoc"})
	}

	return res, nil
}
