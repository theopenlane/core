package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenterSetting is the resolver for the createTrustCenterSetting field.
func (r *createTrustCenterInputResolver) CreateTrustCenterSetting(ctx context.Context, obj *generated.CreateTrustCenterInput, data *generated.CreateTrustCenterSettingInput) error {
	if err := setOrganizationInAuthContext(ctx, obj.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return rout.ErrPermissionDenied
	}

	groupSettings, err := withTransactionalMutation(ctx).TrustCenterSetting.Create().SetInput(*data).Save(ctx)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "trustcenter"})
	}

	obj.SettingID = &groupSettings.ID

	return nil
}

// UpdateTrustCenterSetting is the resolver for the updateTrustCenterSetting field.
func (r *updateTrustCenterInputResolver) UpdateTrustCenterSetting(ctx context.Context, obj *generated.UpdateTrustCenterInput, data *generated.UpdateTrustCenterSettingInput) error {
	trustCenterID := graphutils.GetStringInputVariableByName(ctx, "id")
	if trustCenterID == nil {
		log.Error().Msg("unable to get trust center from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	// get setting ID to update
	settingID := obj.SettingID
	if settingID == nil {
		trustCenter, err := c.TrustCenter.Get(ctx, *trustCenterID)
		if err != nil {
			return parseRequestError(err, action{action: ActionUpdate, object: "trustcenter"})
		}

		setting, err := trustCenter.Setting(ctx)
		if err != nil {
			return parseRequestError(err, action{action: ActionUpdate, object: "trustcenter"})
		}

		settingID = &setting.ID
	}

	return c.TrustCenterSetting.UpdateOneID(*settingID).SetInput(*data).Exec(ctx)
}
