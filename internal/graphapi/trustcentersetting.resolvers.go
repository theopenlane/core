package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/internal/graphapi/model"
)

// CreateTrustCenterSetting is the resolver for the createTrustCenterSetting field.
func (r *mutationResolver) CreateTrustCenterSetting(ctx context.Context, input generated.CreateTrustCenterSettingInput, logoFile *graphql.Upload) (*model.TrustCenterSettingCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterSetting.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcentersetting"})
	}

	return &model.TrustCenterSettingCreatePayload{
		TrustCenterSetting: res,
	}, nil
}

// UpdateTrustCenterSetting is the resolver for the updateTrustCenterSetting field.
func (r *mutationResolver) UpdateTrustCenterSetting(ctx context.Context, id string, input generated.UpdateTrustCenterSettingInput, logoFile *graphql.Upload) (*model.TrustCenterSettingUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterSetting.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcentersetting"})
	}

	// setup update request
	req := res.Update().SetInput(input)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcentersetting"})
	}

	return &model.TrustCenterSettingUpdatePayload{
		TrustCenterSetting: res,
	}, nil
}

// DeleteTrustCenterSetting is the resolver for the deleteTrustCenterSetting field.
func (r *mutationResolver) DeleteTrustCenterSetting(ctx context.Context, id string) (*model.TrustCenterSettingDeletePayload, error) {
	if err := withTransactionalMutation(ctx).TrustCenterSetting.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "trustcentersetting"})
	}

	if err := generated.TrustCenterSettingEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.TrustCenterSettingDeletePayload{
		DeletedID: id,
	}, nil
}

// TrustCenterSetting is the resolver for the trustCenterSetting field.
func (r *queryResolver) TrustCenterSetting(ctx context.Context, id string) (*generated.TrustCenterSetting, error) {
	query, err := withTransactionalMutation(ctx).TrustCenterSetting.Query().Where(trustcentersetting.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcentersetting"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcentersetting"})
	}

	return res, nil
}
