package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/documentrevision"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
	"github.com/theopenlane/utils/rout"
)

// CreateDocumentRevision is the resolver for the createDocumentRevision field.
func (r *mutationResolver) CreateDocumentRevision(ctx context.Context, input generated.CreateDocumentRevisionInput) (*model.DocumentRevisionCreatePayload, error) {
	// grab preloads to set max result limits
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	res, err := withTransactionalMutation(ctx).DocumentRevision.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "documentrevision"})
	}

	return &model.DocumentRevisionCreatePayload{
		DocumentRevision: res,
	}, nil
}

// CreateBulkDocumentRevision is the resolver for the createBulkDocumentRevision field.
func (r *mutationResolver) CreateBulkDocumentRevision(ctx context.Context, input []*generated.CreateDocumentRevisionInput) (*model.DocumentRevisionBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	// grab preloads to set max result limits
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	return r.bulkCreateDocumentRevision(ctx, input)
}

// CreateBulkCSVDocumentRevision is the resolver for the createBulkCSVDocumentRevision field.
func (r *mutationResolver) CreateBulkCSVDocumentRevision(ctx context.Context, input graphql.Upload) (*model.DocumentRevisionBulkCreatePayload, error) {
	// grab preloads to set max result limits
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	data, err := unmarshalBulkData[generated.CreateDocumentRevisionInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateDocumentRevision(ctx, data)
}

// UpdateDocumentRevision is the resolver for the updateDocumentRevision field.
func (r *mutationResolver) UpdateDocumentRevision(ctx context.Context, id string, input generated.UpdateDocumentRevisionInput) (*model.DocumentRevisionUpdatePayload, error) {
	// grab preloads to set max result limits
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	res, err := withTransactionalMutation(ctx).DocumentRevision.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "documentrevision"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "documentrevision"})
	}

	return &model.DocumentRevisionUpdatePayload{
		DocumentRevision: res,
	}, nil
}

// DeleteDocumentRevision is the resolver for the deleteDocumentRevision field.
func (r *mutationResolver) DeleteDocumentRevision(ctx context.Context, id string) (*model.DocumentRevisionDeletePayload, error) {
	if err := withTransactionalMutation(ctx).DocumentRevision.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "documentrevision"})
	}

	if err := generated.DocumentRevisionEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.DocumentRevisionDeletePayload{
		DeletedID: id,
	}, nil
}

// DocumentRevision is the resolver for the documentRevision field.
func (r *queryResolver) DocumentRevision(ctx context.Context, id string) (*generated.DocumentRevision, error) {
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).DocumentRevision.Query().Where(documentrevision.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "documentrevision"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "documentrevision"})
	}

	return res, nil
}
