package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenterDomain is the resolver for the createTrustCenterDomain field.
func (r *mutationResolver) CreateTrustCenterDomain(ctx context.Context, input model.CreateTrustCenterDomainInput) (*model.TrustCenterDomainCreatePayload, error) {
	cnameTarget := r.trustCenterCnameTarget
	if cnameTarget == "" {
		return nil, parseRequestError(ErrMissingTrustCenterCnameTarget, action{action: ActionCreate, object: "trustcenterdomain"})
	}
	transactionCtx := withTransactionalMutation(ctx)

	mappableDomainID, err := transactionCtx.MappableDomain.Query().Where(mappabledomain.Name(cnameTarget)).FirstID(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcenterdomain"})
	}

	trustCenter, err := transactionCtx.TrustCenter.Get(ctx, input.TrustCenterID)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcenterdomain"})
	}

	if trustCenter.CustomDomainID != "" {
		return nil, parseRequestError(ErrTrustCenterDomainAlreadyExists, action{action: ActionCreate, object: "trustcenterdomain"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &trustCenter.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	customDomain, err := transactionCtx.CustomDomain.Create().
		SetInput(generated.CreateCustomDomainInput{
			CnameRecord:      input.CnameRecord,
			OwnerID:          &trustCenter.OwnerID,
			MappableDomainID: mappableDomainID,
		}).
		Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "customdomain"})
	}

	updateReq := trustCenter.Update().SetInput(generated.UpdateTrustCenterInput{
		CustomDomainID: &customDomain.ID,
	})

	_, err = updateReq.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "customdomain"})
	}

	return &model.TrustCenterDomainCreatePayload{
		CustomDomain: customDomain,
	}, nil
}
