package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// CreateGroupMembership is the resolver for the createGroupMembership field.
func (r *mutationResolver) CreateGroupMembership(ctx context.Context, input generated.CreateGroupMembershipInput) (*GroupMembershipCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).GroupMembership.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "groupmembership"})
	}

	return &GroupMembershipCreatePayload{
		GroupMembership: res,
	}, nil
}

// CreateBulkGroupMembership is the resolver for the createBulkGroupMembership field.
func (r *mutationResolver) CreateBulkGroupMembership(ctx context.Context, input []*generated.CreateGroupMembershipInput) (*GroupMembershipBulkCreatePayload, error) {
	return r.bulkCreateGroupMembership(ctx, input)
}

// CreateBulkCSVGroupMembership is the resolver for the createBulkCSVGroupMembership field.
func (r *mutationResolver) CreateBulkCSVGroupMembership(ctx context.Context, input graphql.Upload) (*GroupMembershipBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateGroupMembershipInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateGroupMembership(ctx, data)
}

// UpdateGroupMembership is the resolver for the updateGroupMembership field.
func (r *mutationResolver) UpdateGroupMembership(ctx context.Context, id string, input generated.UpdateGroupMembershipInput) (*GroupMembershipUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).GroupMembership.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "groupmembership"})
	}

	// setup update request
	req := res.Update().SetInput(input)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "groupmembership"})
	}

	return &GroupMembershipUpdatePayload{
		GroupMembership: res,
	}, nil
}

// DeleteGroupMembership is the resolver for the deleteGroupMembership field.
func (r *mutationResolver) DeleteGroupMembership(ctx context.Context, id string) (*GroupMembershipDeletePayload, error) {
	if err := withTransactionalMutation(ctx).GroupMembership.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "groupmembership"})
	}

	if err := generated.GroupMembershipEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &GroupMembershipDeletePayload{
		DeletedID: id,
	}, nil
}

// GroupMembership is the resolver for the groupMembership field.
func (r *queryResolver) GroupMembership(ctx context.Context, id string) (*generated.GroupMembership, error) {
	res, err := withTransactionalMutation(ctx).GroupMembership.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupmembership"})
	}

	return res, nil
}
