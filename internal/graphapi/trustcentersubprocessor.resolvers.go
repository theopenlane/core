package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenterSubprocessor is the resolver for the createTrustCenterSubprocessor field.
func (r *mutationResolver) CreateTrustCenterSubprocessor(ctx context.Context, input generated.CreateTrustCenterSubprocessorInput) (*model.TrustCenterSubprocessorCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterSubprocessor.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcentersubprocessor"})
	}

	return &model.TrustCenterSubprocessorCreatePayload{
		TrustCenterSubprocessor: res,
	}, nil
}

// CreateBulkTrustCenterSubprocessor is the resolver for the createBulkTrustCenterSubprocessor field.
func (r *mutationResolver) CreateBulkTrustCenterSubprocessor(ctx context.Context, input []*generated.CreateTrustCenterSubprocessorInput) (*model.TrustCenterSubprocessorBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterSubprocessor(ctx, input)
}

// CreateBulkCSVTrustCenterSubprocessor is the resolver for the createBulkCSVTrustCenterSubprocessor field.
func (r *mutationResolver) CreateBulkCSVTrustCenterSubprocessor(ctx context.Context, input graphql.Upload) (*model.TrustCenterSubprocessorBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateTrustCenterSubprocessorInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterSubprocessor(ctx, data)
}

// UpdateTrustCenterSubprocessor is the resolver for the updateTrustCenterSubprocessor field.
func (r *mutationResolver) UpdateTrustCenterSubprocessor(ctx context.Context, id string, input generated.UpdateTrustCenterSubprocessorInput) (*model.TrustCenterSubprocessorUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterSubprocessor.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcentersubprocessor"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcentersubprocessor"})
	}

	return &model.TrustCenterSubprocessorUpdatePayload{
		TrustCenterSubprocessor: res,
	}, nil
}

// DeleteTrustCenterSubprocessor is the resolver for the deleteTrustCenterSubprocessor field.
func (r *mutationResolver) DeleteTrustCenterSubprocessor(ctx context.Context, id string) (*model.TrustCenterSubprocessorDeletePayload, error) {
	if err := withTransactionalMutation(ctx).TrustCenterSubprocessor.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "trustcentersubprocessor"})
	}

	if err := generated.TrustCenterSubprocessorEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.TrustCenterSubprocessorDeletePayload{
		DeletedID: id,
	}, nil
}

// TrustCenterSubprocessor is the resolver for the trustCenterSubprocessor field.
func (r *queryResolver) TrustCenterSubprocessor(ctx context.Context, id string) (*generated.TrustCenterSubprocessor, error) {
	query, err := withTransactionalMutation(ctx).TrustCenterSubprocessor.Query().Where(trustcentersubprocessor.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcentersubprocessor"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcentersubprocessor"})
	}

	return res, nil
}
