package graphapi

// THIS CODE IS REGENERATED BY github.com/theopenlane/gqlgen-plugins. DO NOT EDIT.

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, query string) (*SearchResultConnection, error) {
	if len(query) < 3 {
		return nil, ErrSearchQueryTooShort
	}

	var (
		errors                        []error
		apitokenResults               []*generated.APIToken
		actionplanResults             []*generated.ActionPlan
		contactResults                []*generated.Contact
		controlResults                []*generated.Control
		controlobjectiveResults       []*generated.ControlObjective
		documentdataResults           []*generated.DocumentData
		entitlementResults            []*generated.Entitlement
		entitlementplanResults        []*generated.EntitlementPlan
		entitlementplanfeatureResults []*generated.EntitlementPlanFeature
		entityResults                 []*generated.Entity
		entitytypeResults             []*generated.EntityType
		eventResults                  []*generated.Event
		featureResults                []*generated.Feature
		fileResults                   []*generated.File
		groupResults                  []*generated.Group
		groupsettingResults           []*generated.GroupSetting
		integrationResults            []*generated.Integration
		internalpolicyResults         []*generated.InternalPolicy
		narrativeResults              []*generated.Narrative
		oauthproviderResults          []*generated.OauthProvider
		ohauthtootokenResults         []*generated.OhAuthTooToken
		organizationResults           []*generated.Organization
		organizationsettingResults    []*generated.OrganizationSetting
		personalaccesstokenResults    []*generated.PersonalAccessToken
		procedureResults              []*generated.Procedure
		programResults                []*generated.Program
		riskResults                   []*generated.Risk
		standardResults               []*generated.Standard
		subcontrolResults             []*generated.Subcontrol
		subscriberResults             []*generated.Subscriber
		tfasettingResults             []*generated.TFASetting
		taskResults                   []*generated.Task
		templateResults               []*generated.Template
		userResults                   []*generated.User
		usersettingResults            []*generated.UserSetting
		webhookResults                []*generated.Webhook
	)

	r.withPool().SubmitMultipleAndWait([]func(){
		func() {
			var err error
			apitokenResults, err = searchAPITokens(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			actionplanResults, err = searchActionPlans(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			contactResults, err = searchContacts(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			controlResults, err = searchControls(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			controlobjectiveResults, err = searchControlObjectives(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			documentdataResults, err = searchDocumentData(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entitlementResults, err = searchEntitlements(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entitlementplanResults, err = searchEntitlementPlans(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entitlementplanfeatureResults, err = searchEntitlementPlanFeatures(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entityResults, err = searchEntities(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entitytypeResults, err = searchEntityTypes(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			eventResults, err = searchEvents(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			featureResults, err = searchFeatures(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			fileResults, err = searchFiles(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			groupResults, err = searchGroups(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			groupsettingResults, err = searchGroupSettings(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			integrationResults, err = searchIntegrations(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			internalpolicyResults, err = searchInternalPolicies(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			narrativeResults, err = searchNarratives(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			oauthproviderResults, err = searchOauthProviders(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			ohauthtootokenResults, err = searchOhAuthTooTokens(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			organizationResults, err = searchOrganizations(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			organizationsettingResults, err = searchOrganizationSettings(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			personalaccesstokenResults, err = searchPersonalAccessTokens(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			procedureResults, err = searchProcedures(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			programResults, err = searchPrograms(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			riskResults, err = searchRisks(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			standardResults, err = searchStandards(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			subcontrolResults, err = searchSubcontrols(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			subscriberResults, err = searchSubscribers(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			tfasettingResults, err = searchTFASettings(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			taskResults, err = searchTasks(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			templateResults, err = searchTemplates(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			userResults, err = searchUsers(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			usersettingResults, err = searchUserSettings(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			webhookResults, err = searchWebhooks(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
	})

	// Check all errors and return a single error if any of the searches failed
	if len(errors) > 0 {
		log.Error().Errs("errors", errors).Msg("search failed")

		return nil, ErrSearchFailed
	}

	// return the results
	return &SearchResultConnection{
		Nodes: []SearchResult{
			APITokenSearchResult{
				APITokens: apitokenResults,
			},
			ActionPlanSearchResult{
				ActionPlans: actionplanResults,
			},
			ContactSearchResult{
				Contacts: contactResults,
			},
			ControlSearchResult{
				Controls: controlResults,
			},
			ControlObjectiveSearchResult{
				ControlObjectives: controlobjectiveResults,
			},
			DocumentDataSearchResult{
				DocumentData: documentdataResults,
			},
			EntitlementSearchResult{
				Entitlements: entitlementResults,
			},
			EntitlementPlanSearchResult{
				EntitlementPlans: entitlementplanResults,
			},
			EntitlementPlanFeatureSearchResult{
				EntitlementPlanFeatures: entitlementplanfeatureResults,
			},
			EntitySearchResult{
				Entities: entityResults,
			},
			EntityTypeSearchResult{
				EntityTypes: entitytypeResults,
			},
			EventSearchResult{
				Events: eventResults,
			},
			FeatureSearchResult{
				Features: featureResults,
			},
			FileSearchResult{
				Files: fileResults,
			},
			GroupSearchResult{
				Groups: groupResults,
			},
			GroupSettingSearchResult{
				GroupSettings: groupsettingResults,
			},
			IntegrationSearchResult{
				Integrations: integrationResults,
			},
			InternalPolicySearchResult{
				InternalPolicies: internalpolicyResults,
			},
			NarrativeSearchResult{
				Narratives: narrativeResults,
			},
			OauthProviderSearchResult{
				OauthProviders: oauthproviderResults,
			},
			OhAuthTooTokenSearchResult{
				OhAuthTooTokens: ohauthtootokenResults,
			},
			OrganizationSearchResult{
				Organizations: organizationResults,
			},
			OrganizationSettingSearchResult{
				OrganizationSettings: organizationsettingResults,
			},
			PersonalAccessTokenSearchResult{
				PersonalAccessTokens: personalaccesstokenResults,
			},
			ProcedureSearchResult{
				Procedures: procedureResults,
			},
			ProgramSearchResult{
				Programs: programResults,
			},
			RiskSearchResult{
				Risks: riskResults,
			},
			StandardSearchResult{
				Standards: standardResults,
			},
			SubcontrolSearchResult{
				Subcontrols: subcontrolResults,
			},
			SubscriberSearchResult{
				Subscribers: subscriberResults,
			},
			TFASettingSearchResult{
				TFASettings: tfasettingResults,
			},
			TaskSearchResult{
				Tasks: taskResults,
			},
			TemplateSearchResult{
				Templates: templateResults,
			},
			UserSearchResult{
				Users: userResults,
			},
			UserSettingSearchResult{
				UserSettings: usersettingResults,
			},
			WebhookSearchResult{
				Webhooks: webhookResults,
			},
		},
	}, nil
}
func (r *queryResolver) APITokenSearch(ctx context.Context, query string) (*APITokenSearchResult, error) {
	apitokenResults, err := searchAPITokens(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &APITokenSearchResult{
		APITokens: apitokenResults,
	}, nil
}
func (r *queryResolver) ActionPlanSearch(ctx context.Context, query string) (*ActionPlanSearchResult, error) {
	actionplanResults, err := searchActionPlans(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &ActionPlanSearchResult{
		ActionPlans: actionplanResults,
	}, nil
}
func (r *queryResolver) ContactSearch(ctx context.Context, query string) (*ContactSearchResult, error) {
	contactResults, err := searchContacts(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &ContactSearchResult{
		Contacts: contactResults,
	}, nil
}
func (r *queryResolver) ControlSearch(ctx context.Context, query string) (*ControlSearchResult, error) {
	controlResults, err := searchControls(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &ControlSearchResult{
		Controls: controlResults,
	}, nil
}
func (r *queryResolver) ControlObjectiveSearch(ctx context.Context, query string) (*ControlObjectiveSearchResult, error) {
	controlobjectiveResults, err := searchControlObjectives(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &ControlObjectiveSearchResult{
		ControlObjectives: controlobjectiveResults,
	}, nil
}
func (r *queryResolver) DocumentDataSearch(ctx context.Context, query string) (*DocumentDataSearchResult, error) {
	documentdataResults, err := searchDocumentData(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &DocumentDataSearchResult{
		DocumentData: documentdataResults,
	}, nil
}
func (r *queryResolver) EntitlementSearch(ctx context.Context, query string) (*EntitlementSearchResult, error) {
	entitlementResults, err := searchEntitlements(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &EntitlementSearchResult{
		Entitlements: entitlementResults,
	}, nil
}
func (r *queryResolver) EntitlementPlanSearch(ctx context.Context, query string) (*EntitlementPlanSearchResult, error) {
	entitlementplanResults, err := searchEntitlementPlans(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &EntitlementPlanSearchResult{
		EntitlementPlans: entitlementplanResults,
	}, nil
}
func (r *queryResolver) EntitlementPlanFeatureSearch(ctx context.Context, query string) (*EntitlementPlanFeatureSearchResult, error) {
	entitlementplanfeatureResults, err := searchEntitlementPlanFeatures(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &EntitlementPlanFeatureSearchResult{
		EntitlementPlanFeatures: entitlementplanfeatureResults,
	}, nil
}
func (r *queryResolver) EntitySearch(ctx context.Context, query string) (*EntitySearchResult, error) {
	entityResults, err := searchEntities(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &EntitySearchResult{
		Entities: entityResults,
	}, nil
}
func (r *queryResolver) EntityTypeSearch(ctx context.Context, query string) (*EntityTypeSearchResult, error) {
	entitytypeResults, err := searchEntityTypes(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &EntityTypeSearchResult{
		EntityTypes: entitytypeResults,
	}, nil
}
func (r *queryResolver) EventSearch(ctx context.Context, query string) (*EventSearchResult, error) {
	eventResults, err := searchEvents(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &EventSearchResult{
		Events: eventResults,
	}, nil
}
func (r *queryResolver) FeatureSearch(ctx context.Context, query string) (*FeatureSearchResult, error) {
	featureResults, err := searchFeatures(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &FeatureSearchResult{
		Features: featureResults,
	}, nil
}
func (r *queryResolver) FileSearch(ctx context.Context, query string) (*FileSearchResult, error) {
	fileResults, err := searchFiles(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &FileSearchResult{
		Files: fileResults,
	}, nil
}
func (r *queryResolver) GroupSearch(ctx context.Context, query string) (*GroupSearchResult, error) {
	groupResults, err := searchGroups(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &GroupSearchResult{
		Groups: groupResults,
	}, nil
}
func (r *queryResolver) GroupSettingSearch(ctx context.Context, query string) (*GroupSettingSearchResult, error) {
	groupsettingResults, err := searchGroupSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &GroupSettingSearchResult{
		GroupSettings: groupsettingResults,
	}, nil
}
func (r *queryResolver) IntegrationSearch(ctx context.Context, query string) (*IntegrationSearchResult, error) {
	integrationResults, err := searchIntegrations(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &IntegrationSearchResult{
		Integrations: integrationResults,
	}, nil
}
func (r *queryResolver) InternalPolicySearch(ctx context.Context, query string) (*InternalPolicySearchResult, error) {
	internalpolicyResults, err := searchInternalPolicies(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &InternalPolicySearchResult{
		InternalPolicies: internalpolicyResults,
	}, nil
}
func (r *queryResolver) NarrativeSearch(ctx context.Context, query string) (*NarrativeSearchResult, error) {
	narrativeResults, err := searchNarratives(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &NarrativeSearchResult{
		Narratives: narrativeResults,
	}, nil
}
func (r *queryResolver) OauthProviderSearch(ctx context.Context, query string) (*OauthProviderSearchResult, error) {
	oauthproviderResults, err := searchOauthProviders(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &OauthProviderSearchResult{
		OauthProviders: oauthproviderResults,
	}, nil
}
func (r *queryResolver) OhAuthTooTokenSearch(ctx context.Context, query string) (*OhAuthTooTokenSearchResult, error) {
	ohauthtootokenResults, err := searchOhAuthTooTokens(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &OhAuthTooTokenSearchResult{
		OhAuthTooTokens: ohauthtootokenResults,
	}, nil
}
func (r *queryResolver) OrganizationSearch(ctx context.Context, query string) (*OrganizationSearchResult, error) {
	organizationResults, err := searchOrganizations(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &OrganizationSearchResult{
		Organizations: organizationResults,
	}, nil
}
func (r *queryResolver) OrganizationSettingSearch(ctx context.Context, query string) (*OrganizationSettingSearchResult, error) {
	organizationsettingResults, err := searchOrganizationSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &OrganizationSettingSearchResult{
		OrganizationSettings: organizationsettingResults,
	}, nil
}
func (r *queryResolver) PersonalAccessTokenSearch(ctx context.Context, query string) (*PersonalAccessTokenSearchResult, error) {
	personalaccesstokenResults, err := searchPersonalAccessTokens(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &PersonalAccessTokenSearchResult{
		PersonalAccessTokens: personalaccesstokenResults,
	}, nil
}
func (r *queryResolver) ProcedureSearch(ctx context.Context, query string) (*ProcedureSearchResult, error) {
	procedureResults, err := searchProcedures(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &ProcedureSearchResult{
		Procedures: procedureResults,
	}, nil
}
func (r *queryResolver) ProgramSearch(ctx context.Context, query string) (*ProgramSearchResult, error) {
	programResults, err := searchPrograms(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &ProgramSearchResult{
		Programs: programResults,
	}, nil
}
func (r *queryResolver) RiskSearch(ctx context.Context, query string) (*RiskSearchResult, error) {
	riskResults, err := searchRisks(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &RiskSearchResult{
		Risks: riskResults,
	}, nil
}
func (r *queryResolver) StandardSearch(ctx context.Context, query string) (*StandardSearchResult, error) {
	standardResults, err := searchStandards(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &StandardSearchResult{
		Standards: standardResults,
	}, nil
}
func (r *queryResolver) SubcontrolSearch(ctx context.Context, query string) (*SubcontrolSearchResult, error) {
	subcontrolResults, err := searchSubcontrols(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &SubcontrolSearchResult{
		Subcontrols: subcontrolResults,
	}, nil
}
func (r *queryResolver) SubscriberSearch(ctx context.Context, query string) (*SubscriberSearchResult, error) {
	subscriberResults, err := searchSubscribers(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &SubscriberSearchResult{
		Subscribers: subscriberResults,
	}, nil
}
func (r *queryResolver) TFASettingSearch(ctx context.Context, query string) (*TFASettingSearchResult, error) {
	tfasettingResults, err := searchTFASettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &TFASettingSearchResult{
		TFASettings: tfasettingResults,
	}, nil
}
func (r *queryResolver) TaskSearch(ctx context.Context, query string) (*TaskSearchResult, error) {
	taskResults, err := searchTasks(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &TaskSearchResult{
		Tasks: taskResults,
	}, nil
}
func (r *queryResolver) TemplateSearch(ctx context.Context, query string) (*TemplateSearchResult, error) {
	templateResults, err := searchTemplates(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &TemplateSearchResult{
		Templates: templateResults,
	}, nil
}
func (r *queryResolver) UserSearch(ctx context.Context, query string) (*UserSearchResult, error) {
	userResults, err := searchUsers(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &UserSearchResult{
		Users: userResults,
	}, nil
}
func (r *queryResolver) UserSettingSearch(ctx context.Context, query string) (*UserSettingSearchResult, error) {
	usersettingResults, err := searchUserSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &UserSettingSearchResult{
		UserSettings: usersettingResults,
	}, nil
}
func (r *queryResolver) WebhookSearch(ctx context.Context, query string) (*WebhookSearchResult, error) {
	webhookResults, err := searchWebhooks(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &WebhookSearchResult{
		Webhooks: webhookResults,
	}, nil
}
