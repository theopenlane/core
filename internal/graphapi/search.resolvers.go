package graphapi

// THIS CODE IS REGENERATED BY github.com/theopenlane/gqlgen-plugins. DO NOT EDIT.

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
)

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*model.SearchResults, error) {
	if len(query) < 3 {
		return nil, ErrSearchQueryTooShort
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	var (
		errors                       []error
		apitokenResults              *generated.APITokenConnection
		actionplanResults            *generated.ActionPlanConnection
		contactResults               *generated.ContactConnection
		controlResults               *generated.ControlConnection
		controlimplementationResults *generated.ControlImplementationConnection
		controlobjectiveResults      *generated.ControlObjectiveConnection
		documentdataResults          *generated.DocumentDataConnection
		entityResults                *generated.EntityConnection
		entitytypeResults            *generated.EntityTypeConnection
		eventResults                 *generated.EventConnection
		evidenceResults              *generated.EvidenceConnection
		fileResults                  *generated.FileConnection
		groupResults                 *generated.GroupConnection
		integrationResults           *generated.IntegrationConnection
		internalpolicyResults        *generated.InternalPolicyConnection
		inviteResults                *generated.InviteConnection
		mappedcontrolResults         *generated.MappedControlConnection
		narrativeResults             *generated.NarrativeConnection
		orgsubscriptionResults       *generated.OrgSubscriptionConnection
		organizationResults          *generated.OrganizationConnection
		organizationsettingResults   *generated.OrganizationSettingConnection
		personalaccesstokenResults   *generated.PersonalAccessTokenConnection
		procedureResults             *generated.ProcedureConnection
		programResults               *generated.ProgramConnection
		riskResults                  *generated.RiskConnection
		standardResults              *generated.StandardConnection
		subcontrolResults            *generated.SubcontrolConnection
		subscriberResults            *generated.SubscriberConnection
		taskResults                  *generated.TaskConnection
		templateResults              *generated.TemplateConnection
		userResults                  *generated.UserConnection
		usersettingResults           *generated.UserSettingConnection
	)

	r.withPool().SubmitMultipleAndWait([]func(){
		func() {
			var err error
			apitokenResults, err = searchAPITokens(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			actionplanResults, err = searchActionPlans(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			contactResults, err = searchContacts(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			controlResults, err = searchControls(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			controlimplementationResults, err = searchControlImplementations(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			controlobjectiveResults, err = searchControlObjectives(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			documentdataResults, err = searchDocumentData(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entityResults, err = searchEntities(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entitytypeResults, err = searchEntityTypes(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			eventResults, err = searchEvents(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			evidenceResults, err = searchEvidences(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			fileResults, err = searchFiles(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			groupResults, err = searchGroups(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			integrationResults, err = searchIntegrations(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			internalpolicyResults, err = searchInternalPolicies(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			inviteResults, err = searchInvites(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			mappedcontrolResults, err = searchMappedControls(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			narrativeResults, err = searchNarratives(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			orgsubscriptionResults, err = searchOrgSubscriptions(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			organizationResults, err = searchOrganizations(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			organizationsettingResults, err = searchOrganizationSettings(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			personalaccesstokenResults, err = searchPersonalAccessTokens(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			procedureResults, err = searchProcedures(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			programResults, err = searchPrograms(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			riskResults, err = searchRisks(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			standardResults, err = searchStandards(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			subcontrolResults, err = searchSubcontrols(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			subscriberResults, err = searchSubscribers(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			taskResults, err = searchTasks(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			templateResults, err = searchTemplates(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			userResults, err = searchUsers(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			usersettingResults, err = searchUserSettings(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
	})

	// log the errors for debugging
	if len(errors) > 0 {
		log.Error().Errs("errors", errors).Msg("search failed for one or more entities")
	}

	// return the results
	res := &model.SearchResults{
		TotalCount: 0,
	}
	if apitokenResults != nil && len(apitokenResults.Edges) > 0 {
		res.APITokens = apitokenResults

		res.TotalCount += apitokenResults.TotalCount
	}
	if actionplanResults != nil && len(actionplanResults.Edges) > 0 {
		res.ActionPlans = actionplanResults

		res.TotalCount += actionplanResults.TotalCount
	}
	if contactResults != nil && len(contactResults.Edges) > 0 {
		res.Contacts = contactResults

		res.TotalCount += contactResults.TotalCount
	}
	if controlResults != nil && len(controlResults.Edges) > 0 {
		res.Controls = controlResults

		res.TotalCount += controlResults.TotalCount
	}
	if controlimplementationResults != nil && len(controlimplementationResults.Edges) > 0 {
		res.ControlImplementations = controlimplementationResults

		res.TotalCount += controlimplementationResults.TotalCount
	}
	if controlobjectiveResults != nil && len(controlobjectiveResults.Edges) > 0 {
		res.ControlObjectives = controlobjectiveResults

		res.TotalCount += controlobjectiveResults.TotalCount
	}
	if documentdataResults != nil && len(documentdataResults.Edges) > 0 {
		res.DocumentData = documentdataResults

		res.TotalCount += documentdataResults.TotalCount
	}
	if entityResults != nil && len(entityResults.Edges) > 0 {
		res.Entities = entityResults

		res.TotalCount += entityResults.TotalCount
	}
	if entitytypeResults != nil && len(entitytypeResults.Edges) > 0 {
		res.EntityTypes = entitytypeResults

		res.TotalCount += entitytypeResults.TotalCount
	}
	if eventResults != nil && len(eventResults.Edges) > 0 {
		res.Events = eventResults

		res.TotalCount += eventResults.TotalCount
	}
	if evidenceResults != nil && len(evidenceResults.Edges) > 0 {
		res.Evidences = evidenceResults

		res.TotalCount += evidenceResults.TotalCount
	}
	if fileResults != nil && len(fileResults.Edges) > 0 {
		res.Files = fileResults

		res.TotalCount += fileResults.TotalCount
	}
	if groupResults != nil && len(groupResults.Edges) > 0 {
		res.Groups = groupResults

		res.TotalCount += groupResults.TotalCount
	}
	if integrationResults != nil && len(integrationResults.Edges) > 0 {
		res.Integrations = integrationResults

		res.TotalCount += integrationResults.TotalCount
	}
	if internalpolicyResults != nil && len(internalpolicyResults.Edges) > 0 {
		res.InternalPolicies = internalpolicyResults

		res.TotalCount += internalpolicyResults.TotalCount
	}
	if inviteResults != nil && len(inviteResults.Edges) > 0 {
		res.Invites = inviteResults

		res.TotalCount += inviteResults.TotalCount
	}
	if mappedcontrolResults != nil && len(mappedcontrolResults.Edges) > 0 {
		res.MappedControls = mappedcontrolResults

		res.TotalCount += mappedcontrolResults.TotalCount
	}
	if narrativeResults != nil && len(narrativeResults.Edges) > 0 {
		res.Narratives = narrativeResults

		res.TotalCount += narrativeResults.TotalCount
	}
	if orgsubscriptionResults != nil && len(orgsubscriptionResults.Edges) > 0 {
		res.OrgSubscriptions = orgsubscriptionResults

		res.TotalCount += orgsubscriptionResults.TotalCount
	}
	if organizationResults != nil && len(organizationResults.Edges) > 0 {
		res.Organizations = organizationResults

		res.TotalCount += organizationResults.TotalCount
	}
	if organizationsettingResults != nil && len(organizationsettingResults.Edges) > 0 {
		res.OrganizationSettings = organizationsettingResults

		res.TotalCount += organizationsettingResults.TotalCount
	}
	if personalaccesstokenResults != nil && len(personalaccesstokenResults.Edges) > 0 {
		res.PersonalAccessTokens = personalaccesstokenResults

		res.TotalCount += personalaccesstokenResults.TotalCount
	}
	if procedureResults != nil && len(procedureResults.Edges) > 0 {
		res.Procedures = procedureResults

		res.TotalCount += procedureResults.TotalCount
	}
	if programResults != nil && len(programResults.Edges) > 0 {
		res.Programs = programResults

		res.TotalCount += programResults.TotalCount
	}
	if riskResults != nil && len(riskResults.Edges) > 0 {
		res.Risks = riskResults

		res.TotalCount += riskResults.TotalCount
	}
	if standardResults != nil && len(standardResults.Edges) > 0 {
		res.Standards = standardResults

		res.TotalCount += standardResults.TotalCount
	}
	if subcontrolResults != nil && len(subcontrolResults.Edges) > 0 {
		res.Subcontrols = subcontrolResults

		res.TotalCount += subcontrolResults.TotalCount
	}
	if subscriberResults != nil && len(subscriberResults.Edges) > 0 {
		res.Subscribers = subscriberResults

		res.TotalCount += subscriberResults.TotalCount
	}
	if taskResults != nil && len(taskResults.Edges) > 0 {
		res.Tasks = taskResults

		res.TotalCount += taskResults.TotalCount
	}
	if templateResults != nil && len(templateResults.Edges) > 0 {
		res.Templates = templateResults

		res.TotalCount += templateResults.TotalCount
	}
	if userResults != nil && len(userResults.Edges) > 0 {
		res.Users = userResults

		res.TotalCount += userResults.TotalCount
	}
	if usersettingResults != nil && len(usersettingResults.Edges) > 0 {
		res.UserSettings = usersettingResults

		res.TotalCount += usersettingResults.TotalCount
	}

	return res, nil
}
func (r *queryResolver) APITokenSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.APITokenConnection, error) {
	apitokenResults, err := searchAPITokens(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return apitokenResults, nil
}
func (r *queryResolver) ActionPlanSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ActionPlanConnection, error) {
	actionplanResults, err := searchActionPlans(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return actionplanResults, nil
}
func (r *queryResolver) ContactSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ContactConnection, error) {
	contactResults, err := searchContacts(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return contactResults, nil
}
func (r *queryResolver) ControlSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ControlConnection, error) {
	controlResults, err := searchControls(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return controlResults, nil
}
func (r *queryResolver) ControlImplementationSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ControlImplementationConnection, error) {
	controlimplementationResults, err := searchControlImplementations(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return controlimplementationResults, nil
}
func (r *queryResolver) ControlObjectiveSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ControlObjectiveConnection, error) {
	controlobjectiveResults, err := searchControlObjectives(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return controlobjectiveResults, nil
}
func (r *queryResolver) DocumentDataSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.DocumentDataConnection, error) {
	documentdataResults, err := searchDocumentData(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return documentdataResults, nil
}
func (r *queryResolver) EntitySearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EntityConnection, error) {
	entityResults, err := searchEntities(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return entityResults, nil
}
func (r *queryResolver) EntityTypeSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EntityTypeConnection, error) {
	entitytypeResults, err := searchEntityTypes(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return entitytypeResults, nil
}
func (r *queryResolver) EventSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EventConnection, error) {
	eventResults, err := searchEvents(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return eventResults, nil
}
func (r *queryResolver) EvidenceSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EvidenceConnection, error) {
	evidenceResults, err := searchEvidences(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return evidenceResults, nil
}
func (r *queryResolver) FileSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.FileConnection, error) {
	fileResults, err := searchFiles(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return fileResults, nil
}
func (r *queryResolver) GroupSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.GroupConnection, error) {
	groupResults, err := searchGroups(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return groupResults, nil
}
func (r *queryResolver) IntegrationSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.IntegrationConnection, error) {
	integrationResults, err := searchIntegrations(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return integrationResults, nil
}
func (r *queryResolver) InternalPolicySearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.InternalPolicyConnection, error) {
	internalpolicyResults, err := searchInternalPolicies(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return internalpolicyResults, nil
}
func (r *queryResolver) InviteSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.InviteConnection, error) {
	inviteResults, err := searchInvites(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return inviteResults, nil
}
func (r *queryResolver) MappedControlSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.MappedControlConnection, error) {
	mappedcontrolResults, err := searchMappedControls(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return mappedcontrolResults, nil
}
func (r *queryResolver) NarrativeSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.NarrativeConnection, error) {
	narrativeResults, err := searchNarratives(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return narrativeResults, nil
}
func (r *queryResolver) OrgSubscriptionSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.OrgSubscriptionConnection, error) {
	orgsubscriptionResults, err := searchOrgSubscriptions(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return orgsubscriptionResults, nil
}
func (r *queryResolver) OrganizationSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.OrganizationConnection, error) {
	organizationResults, err := searchOrganizations(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return organizationResults, nil
}
func (r *queryResolver) OrganizationSettingSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.OrganizationSettingConnection, error) {
	organizationsettingResults, err := searchOrganizationSettings(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return organizationsettingResults, nil
}
func (r *queryResolver) PersonalAccessTokenSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.PersonalAccessTokenConnection, error) {
	personalaccesstokenResults, err := searchPersonalAccessTokens(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return personalaccesstokenResults, nil
}
func (r *queryResolver) ProcedureSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ProcedureConnection, error) {
	procedureResults, err := searchProcedures(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return procedureResults, nil
}
func (r *queryResolver) ProgramSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ProgramConnection, error) {
	programResults, err := searchPrograms(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return programResults, nil
}
func (r *queryResolver) RiskSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.RiskConnection, error) {
	riskResults, err := searchRisks(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return riskResults, nil
}
func (r *queryResolver) StandardSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.StandardConnection, error) {
	standardResults, err := searchStandards(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return standardResults, nil
}
func (r *queryResolver) SubcontrolSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.SubcontrolConnection, error) {
	subcontrolResults, err := searchSubcontrols(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return subcontrolResults, nil
}
func (r *queryResolver) SubscriberSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.SubscriberConnection, error) {
	subscriberResults, err := searchSubscribers(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return subscriberResults, nil
}
func (r *queryResolver) TaskSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.TaskConnection, error) {
	taskResults, err := searchTasks(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return taskResults, nil
}
func (r *queryResolver) TemplateSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.TemplateConnection, error) {
	templateResults, err := searchTemplates(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return templateResults, nil
}
func (r *queryResolver) UserSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.UserConnection, error) {
	userResults, err := searchUsers(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return userResults, nil
}
func (r *queryResolver) UserSettingSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.UserSettingConnection, error) {
	usersettingResults, err := searchUserSettings(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return usersettingResults, nil
}
