package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// CreateOhAuthTooToken is the resolver for the createOhAuthTooToken field.
func (r *mutationResolver) CreateOhAuthTooToken(ctx context.Context, input generated.CreateOhAuthTooTokenInput) (*OhAuthTooTokenCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).OhAuthTooToken.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "ohauthtootoken"})
	}

	return &OhAuthTooTokenCreatePayload{
		OhAuthTooToken: res,
	}, nil
}

// CreateBulkOhAuthTooToken is the resolver for the createBulkOhAuthTooToken field.
func (r *mutationResolver) CreateBulkOhAuthTooToken(ctx context.Context, input []*generated.CreateOhAuthTooTokenInput) (*OhAuthTooTokenBulkCreatePayload, error) {
	return r.bulkCreateOhAuthTooToken(ctx, input)
}

// CreateBulkCSVOhAuthTooToken is the resolver for the createBulkCSVOhAuthTooToken field.
func (r *mutationResolver) CreateBulkCSVOhAuthTooToken(ctx context.Context, input graphql.Upload) (*OhAuthTooTokenBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateOhAuthTooTokenInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateOhAuthTooToken(ctx, data)
}

// UpdateOhAuthTooToken is the resolver for the updateOhAuthTooToken field.
func (r *mutationResolver) UpdateOhAuthTooToken(ctx context.Context, id string, input generated.UpdateOhAuthTooTokenInput) (*OhAuthTooTokenUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).OhAuthTooToken.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "ohauthtootoken"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags).AppendScopes(input.AppendScopes).AppendClaimsGroups(input.AppendClaimsGroups).AppendConnectorData(input.AppendConnectorData)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "ohauthtootoken"})
	}

	return &OhAuthTooTokenUpdatePayload{
		OhAuthTooToken: res,
	}, nil
}

// DeleteOhAuthTooToken is the resolver for the deleteOhAuthTooToken field.
func (r *mutationResolver) DeleteOhAuthTooToken(ctx context.Context, id string) (*OhAuthTooTokenDeletePayload, error) {
	if err := withTransactionalMutation(ctx).OhAuthTooToken.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "ohauthtootoken"})
	}

	if err := generated.OhAuthTooTokenEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &OhAuthTooTokenDeletePayload{
		DeletedID: id,
	}, nil
}

// OhAuthTooToken is the resolver for the ohAuthTooToken field.
func (r *queryResolver) OhAuthTooToken(ctx context.Context, id string) (*generated.OhAuthTooToken, error) {
	res, err := withTransactionalMutation(ctx).OhAuthTooToken.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "ohauthtootoken"})
	}

	return res, nil
}
