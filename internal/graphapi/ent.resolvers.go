package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/theopenlane/core/internal/ent/generated"
	gqlgenerated "github.com/theopenlane/core/internal/graphapi/generated"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (generated.Noder, error) {
	res, err := withTransactionalMutation(ctx).Noder(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "node"})
	}

	return res, nil
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]generated.Noder, error) {
	res, err := withTransactionalMutation(ctx).Noders(ctx, ids)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "node"})
	}

	return res, nil
}

// APITokens is the resolver for the apiTokens field.
func (r *queryResolver) APITokens(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.APITokenOrder, where *generated.APITokenWhereInput) (*generated.APITokenConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).APIToken.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "apitoken"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithAPITokenOrder(orderBy),
		generated.WithAPITokenFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "apitoken"})
	}

	return res, err
}

// ActionPlans is the resolver for the actionPlans field.
func (r *queryResolver) ActionPlans(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ActionPlanOrder, where *generated.ActionPlanWhereInput) (*generated.ActionPlanConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ActionPlan.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "actionplan"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithActionPlanOrder(orderBy),
		generated.WithActionPlanFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "actionplan"})
	}

	return res, err
}

// ActionPlanHistories is the resolver for the actionPlanHistories field.
func (r *queryResolver) ActionPlanHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ActionPlanHistoryOrder, where *generated.ActionPlanHistoryWhereInput) (*generated.ActionPlanHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ActionPlanHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "actionplanhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithActionPlanHistoryOrder(orderBy),
		generated.WithActionPlanHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "actionplanhistory"})
	}

	return res, err
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ContactOrder, where *generated.ContactWhereInput) (*generated.ContactConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Contact.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "contact"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactOrder(orderBy),
		generated.WithContactFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "contact"})
	}

	return res, err
}

// ContactHistories is the resolver for the contactHistories field.
func (r *queryResolver) ContactHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ContactHistoryOrder, where *generated.ContactHistoryWhereInput) (*generated.ContactHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ContactHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "contacthistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactHistoryOrder(orderBy),
		generated.WithContactHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "contacthistory"})
	}

	return res, err
}

// Controls is the resolver for the controls field.
func (r *queryResolver) Controls(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlOrder, where *generated.ControlWhereInput) (*generated.ControlConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Control.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "control"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithControlOrder(orderBy),
		generated.WithControlFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "control"})
	}

	return res, err
}

// ControlHistories is the resolver for the controlHistories field.
func (r *queryResolver) ControlHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ControlHistoryOrder, where *generated.ControlHistoryWhereInput) (*generated.ControlHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ControlHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithControlHistoryOrder(orderBy),
		generated.WithControlHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlhistory"})
	}

	return res, err
}

// ControlImplementations is the resolver for the controlImplementations field.
func (r *queryResolver) ControlImplementations(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlImplementationOrder, where *generated.ControlImplementationWhereInput) (*generated.ControlImplementationConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ControlImplementation.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlimplementation"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithControlImplementationOrder(orderBy),
		generated.WithControlImplementationFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlimplementation"})
	}

	return res, err
}

// ControlImplementationHistories is the resolver for the controlImplementationHistories field.
func (r *queryResolver) ControlImplementationHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ControlImplementationHistoryOrder, where *generated.ControlImplementationHistoryWhereInput) (*generated.ControlImplementationHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ControlImplementationHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlimplementationhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithControlImplementationHistoryOrder(orderBy),
		generated.WithControlImplementationHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlimplementationhistory"})
	}

	return res, err
}

// ControlObjectives is the resolver for the controlObjectives field.
func (r *queryResolver) ControlObjectives(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ControlObjectiveOrder, where *generated.ControlObjectiveWhereInput) (*generated.ControlObjectiveConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ControlObjective.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlobjective"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithControlObjectiveOrder(orderBy),
		generated.WithControlObjectiveFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlobjective"})
	}

	return res, err
}

// ControlObjectiveHistories is the resolver for the controlObjectiveHistories field.
func (r *queryResolver) ControlObjectiveHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ControlObjectiveHistoryOrder, where *generated.ControlObjectiveHistoryWhereInput) (*generated.ControlObjectiveHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ControlObjectiveHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlobjectivehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithControlObjectiveHistoryOrder(orderBy),
		generated.WithControlObjectiveHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlobjectivehistory"})
	}

	return res, err
}

// DocumentDataSlice is the resolver for the documentDataSlice field.
func (r *queryResolver) DocumentDataSlice(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.DocumentDataOrder, where *generated.DocumentDataWhereInput) (*generated.DocumentDataConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).DocumentData.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "documentdata"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithDocumentDataOrder(orderBy),
		generated.WithDocumentDataFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "documentdata"})
	}

	return res, err
}

// DocumentDataHistories is the resolver for the documentDataHistories field.
func (r *queryResolver) DocumentDataHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.DocumentDataHistoryOrder, where *generated.DocumentDataHistoryWhereInput) (*generated.DocumentDataHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).DocumentDataHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "documentdatahistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithDocumentDataHistoryOrder(orderBy),
		generated.WithDocumentDataHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "documentdatahistory"})
	}

	return res, err
}

// Entities is the resolver for the entities field.
func (r *queryResolver) Entities(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityOrder, where *generated.EntityWhereInput) (*generated.EntityConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Entity.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entity"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityOrder(orderBy),
		generated.WithEntityFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entity"})
	}

	return res, err
}

// EntityHistories is the resolver for the entityHistories field.
func (r *queryResolver) EntityHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityHistoryOrder, where *generated.EntityHistoryWhereInput) (*generated.EntityHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).EntityHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entityhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityHistoryOrder(orderBy),
		generated.WithEntityHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entityhistory"})
	}

	return res, err
}

// EntityTypes is the resolver for the entityTypes field.
func (r *queryResolver) EntityTypes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EntityTypeOrder, where *generated.EntityTypeWhereInput) (*generated.EntityTypeConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).EntityType.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entitytype"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityTypeOrder(orderBy),
		generated.WithEntityTypeFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entitytype"})
	}

	return res, err
}

// EntityTypeHistories is the resolver for the entityTypeHistories field.
func (r *queryResolver) EntityTypeHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityTypeHistoryOrder, where *generated.EntityTypeHistoryWhereInput) (*generated.EntityTypeHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).EntityTypeHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entitytypehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityTypeHistoryOrder(orderBy),
		generated.WithEntityTypeHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entitytypehistory"})
	}

	return res, err
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EventOrder, where *generated.EventWhereInput) (*generated.EventConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Event.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "event"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEventOrder(orderBy),
		generated.WithEventFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "event"})
	}

	return res, err
}

// EventHistories is the resolver for the eventHistories field.
func (r *queryResolver) EventHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EventHistoryOrder, where *generated.EventHistoryWhereInput) (*generated.EventHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).EventHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "eventhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEventHistoryOrder(orderBy),
		generated.WithEventHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "eventhistory"})
	}

	return res, err
}

// Evidences is the resolver for the evidences field.
func (r *queryResolver) Evidences(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.EvidenceOrder, where *generated.EvidenceWhereInput) (*generated.EvidenceConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Evidence.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "evidence"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEvidenceOrder(orderBy),
		generated.WithEvidenceFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "evidence"})
	}

	return res, err
}

// EvidenceHistories is the resolver for the evidenceHistories field.
func (r *queryResolver) EvidenceHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EvidenceHistoryOrder, where *generated.EvidenceHistoryWhereInput) (*generated.EvidenceHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).EvidenceHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "evidencehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEvidenceHistoryOrder(orderBy),
		generated.WithEvidenceHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "evidencehistory"})
	}

	return res, err
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.FileOrder, where *generated.FileWhereInput) (*generated.FileConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).File.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "file"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithFileOrder(orderBy),
		generated.WithFileFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "file"})
	}

	return res, err
}

// FileHistories is the resolver for the fileHistories field.
func (r *queryResolver) FileHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.FileHistoryOrder, where *generated.FileHistoryWhereInput) (*generated.FileHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).FileHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "filehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithFileHistoryOrder(orderBy),
		generated.WithFileHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "filehistory"})
	}

	return res, err
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupOrder, where *generated.GroupWhereInput) (*generated.GroupConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Group.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "group"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithGroupOrder(orderBy),
		generated.WithGroupFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "group"})
	}

	return res, err
}

// GroupHistories is the resolver for the groupHistories field.
func (r *queryResolver) GroupHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupHistoryOrder, where *generated.GroupHistoryWhereInput) (*generated.GroupHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).GroupHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "grouphistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithGroupHistoryOrder(orderBy),
		generated.WithGroupHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "grouphistory"})
	}

	return res, err
}

// GroupMemberships is the resolver for the groupMemberships field.
func (r *queryResolver) GroupMemberships(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupMembershipOrder, where *generated.GroupMembershipWhereInput) (*generated.GroupMembershipConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).GroupMembership.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupmembership"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithGroupMembershipOrder(orderBy),
		generated.WithGroupMembershipFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupmembership"})
	}

	return res, err
}

// GroupMembershipHistories is the resolver for the groupMembershipHistories field.
func (r *queryResolver) GroupMembershipHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupMembershipHistoryOrder, where *generated.GroupMembershipHistoryWhereInput) (*generated.GroupMembershipHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).GroupMembershipHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupmembershiphistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithGroupMembershipHistoryOrder(orderBy),
		generated.WithGroupMembershipHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupmembershiphistory"})
	}

	return res, err
}

// GroupSettings is the resolver for the groupSettings field.
func (r *queryResolver) GroupSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.GroupSettingOrder, where *generated.GroupSettingWhereInput) (*generated.GroupSettingConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).GroupSetting.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupsetting"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithGroupSettingOrder(orderBy),
		generated.WithGroupSettingFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupsetting"})
	}

	return res, err
}

// GroupSettingHistories is the resolver for the groupSettingHistories field.
func (r *queryResolver) GroupSettingHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupSettingHistoryOrder, where *generated.GroupSettingHistoryWhereInput) (*generated.GroupSettingHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).GroupSettingHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupsettinghistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithGroupSettingHistoryOrder(orderBy),
		generated.WithGroupSettingHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupsettinghistory"})
	}

	return res, err
}

// Hushes is the resolver for the hushes field.
func (r *queryResolver) Hushes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.HushOrder, where *generated.HushWhereInput) (*generated.HushConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Hush.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "hush"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithHushOrder(orderBy),
		generated.WithHushFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "hush"})
	}

	return res, err
}

// HushHistories is the resolver for the hushHistories field.
func (r *queryResolver) HushHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.HushHistoryOrder, where *generated.HushHistoryWhereInput) (*generated.HushHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).HushHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "hushhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithHushHistoryOrder(orderBy),
		generated.WithHushHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "hushhistory"})
	}

	return res, err
}

// Integrations is the resolver for the integrations field.
func (r *queryResolver) Integrations(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.IntegrationOrder, where *generated.IntegrationWhereInput) (*generated.IntegrationConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Integration.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "integration"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithIntegrationOrder(orderBy),
		generated.WithIntegrationFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "integration"})
	}

	return res, err
}

// IntegrationHistories is the resolver for the integrationHistories field.
func (r *queryResolver) IntegrationHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.IntegrationHistoryOrder, where *generated.IntegrationHistoryWhereInput) (*generated.IntegrationHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).IntegrationHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "integrationhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithIntegrationHistoryOrder(orderBy),
		generated.WithIntegrationHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "integrationhistory"})
	}

	return res, err
}

// InternalPolicies is the resolver for the internalPolicies field.
func (r *queryResolver) InternalPolicies(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InternalPolicyOrder, where *generated.InternalPolicyWhereInput) (*generated.InternalPolicyConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).InternalPolicy.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "internalpolicy"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithInternalPolicyOrder(orderBy),
		generated.WithInternalPolicyFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "internalpolicy"})
	}

	return res, err
}

// InternalPolicyHistories is the resolver for the internalPolicyHistories field.
func (r *queryResolver) InternalPolicyHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.InternalPolicyHistoryOrder, where *generated.InternalPolicyHistoryWhereInput) (*generated.InternalPolicyHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).InternalPolicyHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "internalpolicyhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithInternalPolicyHistoryOrder(orderBy),
		generated.WithInternalPolicyHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "internalpolicyhistory"})
	}

	return res, err
}

// Invites is the resolver for the invites field.
func (r *queryResolver) Invites(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.InviteOrder, where *generated.InviteWhereInput) (*generated.InviteConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Invite.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "invite"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithInviteOrder(orderBy),
		generated.WithInviteFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "invite"})
	}

	return res, err
}

// MappedControls is the resolver for the mappedControls field.
func (r *queryResolver) MappedControls(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.MappedControlOrder, where *generated.MappedControlWhereInput) (*generated.MappedControlConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).MappedControl.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "mappedcontrol"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithMappedControlOrder(orderBy),
		generated.WithMappedControlFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "mappedcontrol"})
	}

	return res, err
}

// MappedControlHistories is the resolver for the mappedControlHistories field.
func (r *queryResolver) MappedControlHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.MappedControlHistoryOrder, where *generated.MappedControlHistoryWhereInput) (*generated.MappedControlHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).MappedControlHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "mappedcontrolhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithMappedControlHistoryOrder(orderBy),
		generated.WithMappedControlHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "mappedcontrolhistory"})
	}

	return res, err
}

// Narratives is the resolver for the narratives field.
func (r *queryResolver) Narratives(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NarrativeOrder, where *generated.NarrativeWhereInput) (*generated.NarrativeConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Narrative.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "narrative"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithNarrativeOrder(orderBy),
		generated.WithNarrativeFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "narrative"})
	}

	return res, err
}

// NarrativeHistories is the resolver for the narrativeHistories field.
func (r *queryResolver) NarrativeHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.NarrativeHistoryOrder, where *generated.NarrativeHistoryWhereInput) (*generated.NarrativeHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).NarrativeHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "narrativehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithNarrativeHistoryOrder(orderBy),
		generated.WithNarrativeHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "narrativehistory"})
	}

	return res, err
}

// Notes is the resolver for the notes field.
func (r *queryResolver) Notes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.NoteOrder, where *generated.NoteWhereInput) (*generated.NoteConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Note.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "note"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithNoteOrder(orderBy),
		generated.WithNoteFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "note"})
	}

	return res, err
}

// NoteHistories is the resolver for the noteHistories field.
func (r *queryResolver) NoteHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.NoteHistoryOrder, where *generated.NoteHistoryWhereInput) (*generated.NoteHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).NoteHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "notehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithNoteHistoryOrder(orderBy),
		generated.WithNoteHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "notehistory"})
	}

	return res, err
}

// OrgMemberships is the resolver for the orgMemberships field.
func (r *queryResolver) OrgMemberships(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrgMembershipOrder, where *generated.OrgMembershipWhereInput) (*generated.OrgMembershipConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).OrgMembership.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgmembership"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrgMembershipOrder(orderBy),
		generated.WithOrgMembershipFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgmembership"})
	}

	return res, err
}

// OrgMembershipHistories is the resolver for the orgMembershipHistories field.
func (r *queryResolver) OrgMembershipHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrgMembershipHistoryOrder, where *generated.OrgMembershipHistoryWhereInput) (*generated.OrgMembershipHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).OrgMembershipHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgmembershiphistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrgMembershipHistoryOrder(orderBy),
		generated.WithOrgMembershipHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgmembershiphistory"})
	}

	return res, err
}

// OrgSubscriptions is the resolver for the orgSubscriptions field.
func (r *queryResolver) OrgSubscriptions(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrgSubscriptionOrder, where *generated.OrgSubscriptionWhereInput) (*generated.OrgSubscriptionConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).OrgSubscription.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgsubscription"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrgSubscriptionOrder(orderBy),
		generated.WithOrgSubscriptionFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgsubscription"})
	}

	return res, err
}

// OrgSubscriptionHistories is the resolver for the orgSubscriptionHistories field.
func (r *queryResolver) OrgSubscriptionHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrgSubscriptionHistoryOrder, where *generated.OrgSubscriptionHistoryWhereInput) (*generated.OrgSubscriptionHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).OrgSubscriptionHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgsubscriptionhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrgSubscriptionHistoryOrder(orderBy),
		generated.WithOrgSubscriptionHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "orgsubscriptionhistory"})
	}

	return res, err
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationOrder, where *generated.OrganizationWhereInput) (*generated.OrganizationConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Organization.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organization"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrganizationOrder(orderBy),
		generated.WithOrganizationFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organization"})
	}

	return res, err
}

// OrganizationHistories is the resolver for the organizationHistories field.
func (r *queryResolver) OrganizationHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationHistoryOrder, where *generated.OrganizationHistoryWhereInput) (*generated.OrganizationHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).OrganizationHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organizationhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrganizationHistoryOrder(orderBy),
		generated.WithOrganizationHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organizationhistory"})
	}

	return res, err
}

// OrganizationSettings is the resolver for the organizationSettings field.
func (r *queryResolver) OrganizationSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.OrganizationSettingOrder, where *generated.OrganizationSettingWhereInput) (*generated.OrganizationSettingConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).OrganizationSetting.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organizationsetting"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrganizationSettingOrder(orderBy),
		generated.WithOrganizationSettingFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organizationsetting"})
	}

	return res, err
}

// OrganizationSettingHistories is the resolver for the organizationSettingHistories field.
func (r *queryResolver) OrganizationSettingHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationSettingHistoryOrder, where *generated.OrganizationSettingHistoryWhereInput) (*generated.OrganizationSettingHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).OrganizationSettingHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organizationsettinghistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOrganizationSettingHistoryOrder(orderBy),
		generated.WithOrganizationSettingHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organizationsettinghistory"})
	}

	return res, err
}

// PersonalAccessTokens is the resolver for the personalAccessTokens field.
func (r *queryResolver) PersonalAccessTokens(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.PersonalAccessTokenOrder, where *generated.PersonalAccessTokenWhereInput) (*generated.PersonalAccessTokenConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).PersonalAccessToken.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "personalaccesstoken"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithPersonalAccessTokenOrder(orderBy),
		generated.WithPersonalAccessTokenFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "personalaccesstoken"})
	}

	return res, err
}

// Procedures is the resolver for the procedures field.
func (r *queryResolver) Procedures(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProcedureOrder, where *generated.ProcedureWhereInput) (*generated.ProcedureConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Procedure.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "procedure"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithProcedureOrder(orderBy),
		generated.WithProcedureFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "procedure"})
	}

	return res, err
}

// ProcedureHistories is the resolver for the procedureHistories field.
func (r *queryResolver) ProcedureHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ProcedureHistoryOrder, where *generated.ProcedureHistoryWhereInput) (*generated.ProcedureHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ProcedureHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "procedurehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithProcedureHistoryOrder(orderBy),
		generated.WithProcedureHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "procedurehistory"})
	}

	return res, err
}

// Programs is the resolver for the programs field.
func (r *queryResolver) Programs(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramOrder, where *generated.ProgramWhereInput) (*generated.ProgramConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Program.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "program"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithProgramOrder(orderBy),
		generated.WithProgramFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "program"})
	}

	return res, err
}

// ProgramHistories is the resolver for the programHistories field.
func (r *queryResolver) ProgramHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ProgramHistoryOrder, where *generated.ProgramHistoryWhereInput) (*generated.ProgramHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ProgramHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "programhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithProgramHistoryOrder(orderBy),
		generated.WithProgramHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "programhistory"})
	}

	return res, err
}

// ProgramMemberships is the resolver for the programMemberships field.
func (r *queryResolver) ProgramMemberships(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.ProgramMembershipOrder, where *generated.ProgramMembershipWhereInput) (*generated.ProgramMembershipConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ProgramMembership.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "programmembership"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithProgramMembershipOrder(orderBy),
		generated.WithProgramMembershipFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "programmembership"})
	}

	return res, err
}

// ProgramMembershipHistories is the resolver for the programMembershipHistories field.
func (r *queryResolver) ProgramMembershipHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ProgramMembershipHistoryOrder, where *generated.ProgramMembershipHistoryWhereInput) (*generated.ProgramMembershipHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).ProgramMembershipHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "programmembershiphistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithProgramMembershipHistoryOrder(orderBy),
		generated.WithProgramMembershipHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "programmembershiphistory"})
	}

	return res, err
}

// Risks is the resolver for the risks field.
func (r *queryResolver) Risks(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.RiskOrder, where *generated.RiskWhereInput) (*generated.RiskConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Risk.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "risk"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithRiskOrder(orderBy),
		generated.WithRiskFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "risk"})
	}

	return res, err
}

// RiskHistories is the resolver for the riskHistories field.
func (r *queryResolver) RiskHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.RiskHistoryOrder, where *generated.RiskHistoryWhereInput) (*generated.RiskHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).RiskHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "riskhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithRiskHistoryOrder(orderBy),
		generated.WithRiskHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "riskhistory"})
	}

	return res, err
}

// Standards is the resolver for the standards field.
func (r *queryResolver) Standards(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.StandardOrder, where *generated.StandardWhereInput) (*generated.StandardConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Standard.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "standard"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithStandardOrder(orderBy),
		generated.WithStandardFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "standard"})
	}

	return res, err
}

// StandardHistories is the resolver for the standardHistories field.
func (r *queryResolver) StandardHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.StandardHistoryOrder, where *generated.StandardHistoryWhereInput) (*generated.StandardHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).StandardHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "standardhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithStandardHistoryOrder(orderBy),
		generated.WithStandardHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "standardhistory"})
	}

	return res, err
}

// Subcontrols is the resolver for the subcontrols field.
func (r *queryResolver) Subcontrols(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubcontrolOrder, where *generated.SubcontrolWhereInput) (*generated.SubcontrolConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Subcontrol.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcontrol"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithSubcontrolOrder(orderBy),
		generated.WithSubcontrolFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcontrol"})
	}

	return res, err
}

// SubcontrolHistories is the resolver for the subcontrolHistories field.
func (r *queryResolver) SubcontrolHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.SubcontrolHistoryOrder, where *generated.SubcontrolHistoryWhereInput) (*generated.SubcontrolHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).SubcontrolHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcontrolhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithSubcontrolHistoryOrder(orderBy),
		generated.WithSubcontrolHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcontrolhistory"})
	}

	return res, err
}

// Subscribers is the resolver for the subscribers field.
func (r *queryResolver) Subscribers(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.SubscriberOrder, where *generated.SubscriberWhereInput) (*generated.SubscriberConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Subscriber.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subscriber"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithSubscriberOrder(orderBy),
		generated.WithSubscriberFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subscriber"})
	}

	return res, err
}

// TfaSettings is the resolver for the tfaSettings field.
func (r *queryResolver) TfaSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TFASettingOrder, where *generated.TFASettingWhereInput) (*generated.TFASettingConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).TFASetting.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "tfasetting"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithTFASettingOrder(orderBy),
		generated.WithTFASettingFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "tfasetting"})
	}

	return res, err
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TaskOrder, where *generated.TaskWhereInput) (*generated.TaskConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Task.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "task"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithTaskOrder(orderBy),
		generated.WithTaskFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "task"})
	}

	return res, err
}

// TaskHistories is the resolver for the taskHistories field.
func (r *queryResolver) TaskHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TaskHistoryOrder, where *generated.TaskHistoryWhereInput) (*generated.TaskHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).TaskHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "taskhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithTaskHistoryOrder(orderBy),
		generated.WithTaskHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "taskhistory"})
	}

	return res, err
}

// Templates is the resolver for the templates field.
func (r *queryResolver) Templates(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.TemplateOrder, where *generated.TemplateWhereInput) (*generated.TemplateConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Template.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "template"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithTemplateOrder(orderBy),
		generated.WithTemplateFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "template"})
	}

	return res, err
}

// TemplateHistories is the resolver for the templateHistories field.
func (r *queryResolver) TemplateHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TemplateHistoryOrder, where *generated.TemplateHistoryWhereInput) (*generated.TemplateHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).TemplateHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "templatehistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithTemplateHistoryOrder(orderBy),
		generated.WithTemplateHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "templatehistory"})
	}

	return res, err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserOrder, where *generated.UserWhereInput) (*generated.UserConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).User.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "user"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithUserOrder(orderBy),
		generated.WithUserFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "user"})
	}

	return res, err
}

// UserHistories is the resolver for the userHistories field.
func (r *queryResolver) UserHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserHistoryOrder, where *generated.UserHistoryWhereInput) (*generated.UserHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).UserHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "userhistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithUserHistoryOrder(orderBy),
		generated.WithUserHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "userhistory"})
	}

	return res, err
}

// UserSettings is the resolver for the userSettings field.
func (r *queryResolver) UserSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*generated.UserSettingOrder, where *generated.UserSettingWhereInput) (*generated.UserSettingConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).UserSetting.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "usersetting"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithUserSettingOrder(orderBy),
		generated.WithUserSettingFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "usersetting"})
	}

	return res, err
}

// UserSettingHistories is the resolver for the userSettingHistories field.
func (r *queryResolver) UserSettingHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserSettingHistoryOrder, where *generated.UserSettingHistoryWhereInput) (*generated.UserSettingHistoryConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).UserSettingHistory.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "usersettinghistory"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithUserSettingHistoryOrder(orderBy),
		generated.WithUserSettingHistoryFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "usersettinghistory"})
	}

	return res, err
}

// Webauthns is the resolver for the webauthns field.
func (r *queryResolver) Webauthns(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.WebauthnOrder, where *generated.WebauthnWhereInput) (*generated.WebauthnConnection, error) {
	// set page limit if nothing was set
	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).Webauthn.Query().CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "webauthn"})
	}

	res, err := query.Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithWebauthnOrder(orderBy),
		generated.WithWebauthnFilter(where.Filter))
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "webauthn"})
	}

	return res, err
}

// Group returns gqlgenerated.GroupResolver implementation.
func (r *Resolver) Group() gqlgenerated.GroupResolver { return &groupResolver{r} }

// Query returns gqlgenerated.QueryResolver implementation.
func (r *Resolver) Query() gqlgenerated.QueryResolver { return &queryResolver{r} }

// CreateEntityInput returns gqlgenerated.CreateEntityInputResolver implementation.
func (r *Resolver) CreateEntityInput() gqlgenerated.CreateEntityInputResolver {
	return &createEntityInputResolver{r}
}

// CreateGroupInput returns gqlgenerated.CreateGroupInputResolver implementation.
func (r *Resolver) CreateGroupInput() gqlgenerated.CreateGroupInputResolver {
	return &createGroupInputResolver{r}
}

// CreateOrganizationInput returns gqlgenerated.CreateOrganizationInputResolver implementation.
func (r *Resolver) CreateOrganizationInput() gqlgenerated.CreateOrganizationInputResolver {
	return &createOrganizationInputResolver{r}
}

// UpdateActionPlanInput returns gqlgenerated.UpdateActionPlanInputResolver implementation.
func (r *Resolver) UpdateActionPlanInput() gqlgenerated.UpdateActionPlanInputResolver {
	return &updateActionPlanInputResolver{r}
}

// UpdateControlObjectiveInput returns gqlgenerated.UpdateControlObjectiveInputResolver implementation.
func (r *Resolver) UpdateControlObjectiveInput() gqlgenerated.UpdateControlObjectiveInputResolver {
	return &updateControlObjectiveInputResolver{r}
}

// UpdateEntityInput returns gqlgenerated.UpdateEntityInputResolver implementation.
func (r *Resolver) UpdateEntityInput() gqlgenerated.UpdateEntityInputResolver {
	return &updateEntityInputResolver{r}
}

// UpdateGroupInput returns gqlgenerated.UpdateGroupInputResolver implementation.
func (r *Resolver) UpdateGroupInput() gqlgenerated.UpdateGroupInputResolver {
	return &updateGroupInputResolver{r}
}

// UpdateInternalPolicyInput returns gqlgenerated.UpdateInternalPolicyInputResolver implementation.
func (r *Resolver) UpdateInternalPolicyInput() gqlgenerated.UpdateInternalPolicyInputResolver {
	return &updateInternalPolicyInputResolver{r}
}

// UpdateOrganizationInput returns gqlgenerated.UpdateOrganizationInputResolver implementation.
func (r *Resolver) UpdateOrganizationInput() gqlgenerated.UpdateOrganizationInputResolver {
	return &updateOrganizationInputResolver{r}
}

// UpdateProcedureInput returns gqlgenerated.UpdateProcedureInputResolver implementation.
func (r *Resolver) UpdateProcedureInput() gqlgenerated.UpdateProcedureInputResolver {
	return &updateProcedureInputResolver{r}
}

// UpdateProgramInput returns gqlgenerated.UpdateProgramInputResolver implementation.
func (r *Resolver) UpdateProgramInput() gqlgenerated.UpdateProgramInputResolver {
	return &updateProgramInputResolver{r}
}

// UpdateStandardInput returns gqlgenerated.UpdateStandardInputResolver implementation.
func (r *Resolver) UpdateStandardInput() gqlgenerated.UpdateStandardInputResolver {
	return &updateStandardInputResolver{r}
}

// UpdateTFASettingInput returns gqlgenerated.UpdateTFASettingInputResolver implementation.
func (r *Resolver) UpdateTFASettingInput() gqlgenerated.UpdateTFASettingInputResolver {
	return &updateTFASettingInputResolver{r}
}

// UpdateTaskInput returns gqlgenerated.UpdateTaskInputResolver implementation.
func (r *Resolver) UpdateTaskInput() gqlgenerated.UpdateTaskInputResolver {
	return &updateTaskInputResolver{r}
}

type groupResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type createEntityInputResolver struct{ *Resolver }
type createGroupInputResolver struct{ *Resolver }
type createOrganizationInputResolver struct{ *Resolver }
type updateActionPlanInputResolver struct{ *Resolver }
type updateControlObjectiveInputResolver struct{ *Resolver }
type updateEntityInputResolver struct{ *Resolver }
type updateGroupInputResolver struct{ *Resolver }
type updateInternalPolicyInputResolver struct{ *Resolver }
type updateOrganizationInputResolver struct{ *Resolver }
type updateProcedureInputResolver struct{ *Resolver }
type updateProgramInputResolver struct{ *Resolver }
type updateStandardInputResolver struct{ *Resolver }
type updateTFASettingInputResolver struct{ *Resolver }
type updateTaskInputResolver struct{ *Resolver }
