package graphapi

// THIS CODE IS REGENERATED BY github.com/theopenlane/gqlgen-plugins. DO NOT EDIT.

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
)

// Search is the resolver for the search field.
func (r *queryResolver) AdminSearch(ctx context.Context, query string) (*model.SearchResultConnection, error) {
	if len(query) < 3 {
		return nil, ErrSearchQueryTooShort
	}

	var (
		errors                     []error
		apitokenResults            []*generated.APIToken
		actionplanResults          []*generated.ActionPlan
		contactResults             []*generated.Contact
		controlResults             []*generated.Control
		controlobjectiveResults    []*generated.ControlObjective
		documentdataResults        []*generated.DocumentData
		entityResults              []*generated.Entity
		entitytypeResults          []*generated.EntityType
		eventResults               []*generated.Event
		evidenceResults            []*generated.Evidence
		fileResults                []*generated.File
		groupResults               []*generated.Group
		integrationResults         []*generated.Integration
		internalpolicyResults      []*generated.InternalPolicy
		narrativeResults           []*generated.Narrative
		orgsubscriptionResults     []*generated.OrgSubscription
		organizationResults        []*generated.Organization
		organizationsettingResults []*generated.OrganizationSetting
		personalaccesstokenResults []*generated.PersonalAccessToken
		procedureResults           []*generated.Procedure
		programResults             []*generated.Program
		riskResults                []*generated.Risk
		standardResults            []*generated.Standard
		subcontrolResults          []*generated.Subcontrol
		subscriberResults          []*generated.Subscriber
		taskResults                []*generated.Task
		templateResults            []*generated.Template
		userResults                []*generated.User
		usersettingResults         []*generated.UserSetting
	)

	r.withPool().SubmitMultipleAndWait([]func(){
		func() {
			var err error
			apitokenResults, err = searchAPITokens(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			actionplanResults, err = searchActionPlans(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			contactResults, err = searchContacts(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			controlResults, err = searchControls(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			controlobjectiveResults, err = searchControlObjectives(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			documentdataResults, err = searchDocumentData(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entityResults, err = searchEntities(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			entitytypeResults, err = searchEntityTypes(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			eventResults, err = searchEvents(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			evidenceResults, err = searchEvidences(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			fileResults, err = searchFiles(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			groupResults, err = searchGroups(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			integrationResults, err = searchIntegrations(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			internalpolicyResults, err = searchInternalPolicies(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			narrativeResults, err = searchNarratives(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			orgsubscriptionResults, err = searchOrgSubscriptions(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			organizationResults, err = searchOrganizations(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			organizationsettingResults, err = searchOrganizationSettings(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			personalaccesstokenResults, err = searchPersonalAccessTokens(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			procedureResults, err = searchProcedures(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			programResults, err = searchPrograms(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			riskResults, err = searchRisks(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			standardResults, err = searchStandards(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			subcontrolResults, err = searchSubcontrols(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			subscriberResults, err = searchSubscribers(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			taskResults, err = searchTasks(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			templateResults, err = searchTemplates(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			userResults, err = searchUsers(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
		func() {
			var err error
			usersettingResults, err = searchUserSettings(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
	})

	// Check all errors and return a single error if any of the searches failed
	if len(errors) > 0 {
		log.Error().Errs("errors", errors).Msg("search failed")

		return nil, ErrSearchFailed
	}

	// return the results
	var nodes []model.SearchResult
	resultCount := 0
	if len(apitokenResults) > 0 {
		nodes = append(nodes, model.APITokenSearchResult{
			APITokens: apitokenResults,
		})

		resultCount += len(apitokenResults)
	}
	if len(actionplanResults) > 0 {
		nodes = append(nodes, model.ActionPlanSearchResult{
			ActionPlans: actionplanResults,
		})

		resultCount += len(actionplanResults)
	}
	if len(contactResults) > 0 {
		nodes = append(nodes, model.ContactSearchResult{
			Contacts: contactResults,
		})

		resultCount += len(contactResults)
	}
	if len(controlResults) > 0 {
		nodes = append(nodes, model.ControlSearchResult{
			Controls: controlResults,
		})

		resultCount += len(controlResults)
	}
	if len(controlobjectiveResults) > 0 {
		nodes = append(nodes, model.ControlObjectiveSearchResult{
			ControlObjectives: controlobjectiveResults,
		})

		resultCount += len(controlobjectiveResults)
	}
	if len(documentdataResults) > 0 {
		nodes = append(nodes, model.DocumentDataSearchResult{
			DocumentData: documentdataResults,
		})

		resultCount += len(documentdataResults)
	}
	if len(entityResults) > 0 {
		nodes = append(nodes, model.EntitySearchResult{
			Entities: entityResults,
		})

		resultCount += len(entityResults)
	}
	if len(entitytypeResults) > 0 {
		nodes = append(nodes, model.EntityTypeSearchResult{
			EntityTypes: entitytypeResults,
		})

		resultCount += len(entitytypeResults)
	}
	if len(eventResults) > 0 {
		nodes = append(nodes, model.EventSearchResult{
			Events: eventResults,
		})

		resultCount += len(eventResults)
	}
	if len(evidenceResults) > 0 {
		nodes = append(nodes, model.EvidenceSearchResult{
			Evidences: evidenceResults,
		})

		resultCount += len(evidenceResults)
	}
	if len(fileResults) > 0 {
		nodes = append(nodes, model.FileSearchResult{
			Files: fileResults,
		})

		resultCount += len(fileResults)
	}
	if len(groupResults) > 0 {
		nodes = append(nodes, model.GroupSearchResult{
			Groups: groupResults,
		})

		resultCount += len(groupResults)
	}
	if len(integrationResults) > 0 {
		nodes = append(nodes, model.IntegrationSearchResult{
			Integrations: integrationResults,
		})

		resultCount += len(integrationResults)
	}
	if len(internalpolicyResults) > 0 {
		nodes = append(nodes, model.InternalPolicySearchResult{
			InternalPolicies: internalpolicyResults,
		})

		resultCount += len(internalpolicyResults)
	}
	if len(narrativeResults) > 0 {
		nodes = append(nodes, model.NarrativeSearchResult{
			Narratives: narrativeResults,
		})

		resultCount += len(narrativeResults)
	}
	if len(orgsubscriptionResults) > 0 {
		nodes = append(nodes, model.OrgSubscriptionSearchResult{
			OrgSubscriptions: orgsubscriptionResults,
		})

		resultCount += len(orgsubscriptionResults)
	}
	if len(organizationResults) > 0 {
		nodes = append(nodes, model.OrganizationSearchResult{
			Organizations: organizationResults,
		})

		resultCount += len(organizationResults)
	}
	if len(organizationsettingResults) > 0 {
		nodes = append(nodes, model.OrganizationSettingSearchResult{
			OrganizationSettings: organizationsettingResults,
		})

		resultCount += len(organizationsettingResults)
	}
	if len(personalaccesstokenResults) > 0 {
		nodes = append(nodes, model.PersonalAccessTokenSearchResult{
			PersonalAccessTokens: personalaccesstokenResults,
		})

		resultCount += len(personalaccesstokenResults)
	}
	if len(procedureResults) > 0 {
		nodes = append(nodes, model.ProcedureSearchResult{
			Procedures: procedureResults,
		})

		resultCount += len(procedureResults)
	}
	if len(programResults) > 0 {
		nodes = append(nodes, model.ProgramSearchResult{
			Programs: programResults,
		})

		resultCount += len(programResults)
	}
	if len(riskResults) > 0 {
		nodes = append(nodes, model.RiskSearchResult{
			Risks: riskResults,
		})

		resultCount += len(riskResults)
	}
	if len(standardResults) > 0 {
		nodes = append(nodes, model.StandardSearchResult{
			Standards: standardResults,
		})

		resultCount += len(standardResults)
	}
	if len(subcontrolResults) > 0 {
		nodes = append(nodes, model.SubcontrolSearchResult{
			Subcontrols: subcontrolResults,
		})

		resultCount += len(subcontrolResults)
	}
	if len(subscriberResults) > 0 {
		nodes = append(nodes, model.SubscriberSearchResult{
			Subscribers: subscriberResults,
		})

		resultCount += len(subscriberResults)
	}
	if len(taskResults) > 0 {
		nodes = append(nodes, model.TaskSearchResult{
			Tasks: taskResults,
		})

		resultCount += len(taskResults)
	}
	if len(templateResults) > 0 {
		nodes = append(nodes, model.TemplateSearchResult{
			Templates: templateResults,
		})

		resultCount += len(templateResults)
	}
	if len(userResults) > 0 {
		nodes = append(nodes, model.UserSearchResult{
			Users: userResults,
		})

		resultCount += len(userResults)
	}
	if len(usersettingResults) > 0 {
		nodes = append(nodes, model.UserSettingSearchResult{
			UserSettings: usersettingResults,
		})

		resultCount += len(usersettingResults)
	}

	return &model.SearchResultConnection{
		TotalCount: resultCount,
		Nodes:      nodes,
	}, nil
}
func (r *queryResolver) AdminAPITokenSearch(ctx context.Context, query string) (*model.APITokenSearchResult, error) {
	apitokenResults, err := adminSearchAPITokens(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.APITokenSearchResult{
		APITokens: apitokenResults,
	}, nil
}
func (r *queryResolver) AdminActionPlanSearch(ctx context.Context, query string) (*model.ActionPlanSearchResult, error) {
	actionplanResults, err := adminSearchActionPlans(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ActionPlanSearchResult{
		ActionPlans: actionplanResults,
	}, nil
}
func (r *queryResolver) AdminContactSearch(ctx context.Context, query string) (*model.ContactSearchResult, error) {
	contactResults, err := adminSearchContacts(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ContactSearchResult{
		Contacts: contactResults,
	}, nil
}
func (r *queryResolver) AdminControlSearch(ctx context.Context, query string) (*model.ControlSearchResult, error) {
	controlResults, err := adminSearchControls(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ControlSearchResult{
		Controls: controlResults,
	}, nil
}
func (r *queryResolver) AdminControlObjectiveSearch(ctx context.Context, query string) (*model.ControlObjectiveSearchResult, error) {
	controlobjectiveResults, err := adminSearchControlObjectives(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ControlObjectiveSearchResult{
		ControlObjectives: controlobjectiveResults,
	}, nil
}
func (r *queryResolver) AdminDocumentDataSearch(ctx context.Context, query string) (*model.DocumentDataSearchResult, error) {
	documentdataResults, err := adminSearchDocumentData(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.DocumentDataSearchResult{
		DocumentData: documentdataResults,
	}, nil
}
func (r *queryResolver) AdminEntitySearch(ctx context.Context, query string) (*model.EntitySearchResult, error) {
	entityResults, err := adminSearchEntities(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.EntitySearchResult{
		Entities: entityResults,
	}, nil
}
func (r *queryResolver) AdminEntityTypeSearch(ctx context.Context, query string) (*model.EntityTypeSearchResult, error) {
	entitytypeResults, err := adminSearchEntityTypes(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.EntityTypeSearchResult{
		EntityTypes: entitytypeResults,
	}, nil
}
func (r *queryResolver) AdminEventSearch(ctx context.Context, query string) (*model.EventSearchResult, error) {
	eventResults, err := adminSearchEvents(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.EventSearchResult{
		Events: eventResults,
	}, nil
}
func (r *queryResolver) AdminEvidenceSearch(ctx context.Context, query string) (*model.EvidenceSearchResult, error) {
	evidenceResults, err := adminSearchEvidences(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.EvidenceSearchResult{
		Evidences: evidenceResults,
	}, nil
}
func (r *queryResolver) AdminFileSearch(ctx context.Context, query string) (*model.FileSearchResult, error) {
	fileResults, err := adminSearchFiles(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.FileSearchResult{
		Files: fileResults,
	}, nil
}
func (r *queryResolver) AdminGroupSearch(ctx context.Context, query string) (*model.GroupSearchResult, error) {
	groupResults, err := adminSearchGroups(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.GroupSearchResult{
		Groups: groupResults,
	}, nil
}
func (r *queryResolver) AdminIntegrationSearch(ctx context.Context, query string) (*model.IntegrationSearchResult, error) {
	integrationResults, err := adminSearchIntegrations(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.IntegrationSearchResult{
		Integrations: integrationResults,
	}, nil
}
func (r *queryResolver) AdminInternalPolicySearch(ctx context.Context, query string) (*model.InternalPolicySearchResult, error) {
	internalpolicyResults, err := adminSearchInternalPolicies(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.InternalPolicySearchResult{
		InternalPolicies: internalpolicyResults,
	}, nil
}
func (r *queryResolver) AdminNarrativeSearch(ctx context.Context, query string) (*model.NarrativeSearchResult, error) {
	narrativeResults, err := adminSearchNarratives(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.NarrativeSearchResult{
		Narratives: narrativeResults,
	}, nil
}
func (r *queryResolver) AdminOrgSubscriptionSearch(ctx context.Context, query string) (*model.OrgSubscriptionSearchResult, error) {
	orgsubscriptionResults, err := adminSearchOrgSubscriptions(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.OrgSubscriptionSearchResult{
		OrgSubscriptions: orgsubscriptionResults,
	}, nil
}
func (r *queryResolver) AdminOrganizationSearch(ctx context.Context, query string) (*model.OrganizationSearchResult, error) {
	organizationResults, err := adminSearchOrganizations(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.OrganizationSearchResult{
		Organizations: organizationResults,
	}, nil
}
func (r *queryResolver) AdminOrganizationSettingSearch(ctx context.Context, query string) (*model.OrganizationSettingSearchResult, error) {
	organizationsettingResults, err := adminSearchOrganizationSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.OrganizationSettingSearchResult{
		OrganizationSettings: organizationsettingResults,
	}, nil
}
func (r *queryResolver) AdminPersonalAccessTokenSearch(ctx context.Context, query string) (*model.PersonalAccessTokenSearchResult, error) {
	personalaccesstokenResults, err := adminSearchPersonalAccessTokens(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.PersonalAccessTokenSearchResult{
		PersonalAccessTokens: personalaccesstokenResults,
	}, nil
}
func (r *queryResolver) AdminProcedureSearch(ctx context.Context, query string) (*model.ProcedureSearchResult, error) {
	procedureResults, err := adminSearchProcedures(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ProcedureSearchResult{
		Procedures: procedureResults,
	}, nil
}
func (r *queryResolver) AdminProgramSearch(ctx context.Context, query string) (*model.ProgramSearchResult, error) {
	programResults, err := adminSearchPrograms(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ProgramSearchResult{
		Programs: programResults,
	}, nil
}
func (r *queryResolver) AdminRiskSearch(ctx context.Context, query string) (*model.RiskSearchResult, error) {
	riskResults, err := adminSearchRisks(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.RiskSearchResult{
		Risks: riskResults,
	}, nil
}
func (r *queryResolver) AdminStandardSearch(ctx context.Context, query string) (*model.StandardSearchResult, error) {
	standardResults, err := adminSearchStandards(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.StandardSearchResult{
		Standards: standardResults,
	}, nil
}
func (r *queryResolver) AdminSubcontrolSearch(ctx context.Context, query string) (*model.SubcontrolSearchResult, error) {
	subcontrolResults, err := adminSearchSubcontrols(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.SubcontrolSearchResult{
		Subcontrols: subcontrolResults,
	}, nil
}
func (r *queryResolver) AdminSubscriberSearch(ctx context.Context, query string) (*model.SubscriberSearchResult, error) {
	subscriberResults, err := adminSearchSubscribers(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.SubscriberSearchResult{
		Subscribers: subscriberResults,
	}, nil
}
func (r *queryResolver) AdminTaskSearch(ctx context.Context, query string) (*model.TaskSearchResult, error) {
	taskResults, err := adminSearchTasks(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.TaskSearchResult{
		Tasks: taskResults,
	}, nil
}
func (r *queryResolver) AdminTemplateSearch(ctx context.Context, query string) (*model.TemplateSearchResult, error) {
	templateResults, err := adminSearchTemplates(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.TemplateSearchResult{
		Templates: templateResults,
	}, nil
}
func (r *queryResolver) AdminUserSearch(ctx context.Context, query string) (*model.UserSearchResult, error) {
	userResults, err := adminSearchUsers(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.UserSearchResult{
		Users: userResults,
	}, nil
}
func (r *queryResolver) AdminUserSettingSearch(ctx context.Context, query string) (*model.UserSettingSearchResult, error) {
	usersettingResults, err := adminSearchUserSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.UserSettingSearchResult{
		UserSettings: usersettingResults,
	}, nil
}
