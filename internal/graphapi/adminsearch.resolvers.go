package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/theopenlane/core/internal/graphapi/model"
)

// AdminAPITokenSearch is the resolver for the adminAPITokenSearch field.
func (r *queryResolver) AdminAPITokenSearch(ctx context.Context, query string) (*model.APITokenSearchResult, error) {
	apitokenResults, err := adminSearchAPITokens(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.APITokenSearchResult{
		APITokens: apitokenResults,
	}, nil
}

// AdminActionPlanSearch is the resolver for the adminActionPlanSearch field.
func (r *queryResolver) AdminActionPlanSearch(ctx context.Context, query string) (*model.ActionPlanSearchResult, error) {
	actionplanResults, err := adminSearchActionPlans(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ActionPlanSearchResult{
		ActionPlans: actionplanResults,
	}, nil
}

// AdminContactSearch is the resolver for the adminContactSearch field.
func (r *queryResolver) AdminContactSearch(ctx context.Context, query string) (*model.ContactSearchResult, error) {
	contactResults, err := adminSearchContacts(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ContactSearchResult{
		Contacts: contactResults,
	}, nil
}

// AdminControlSearch is the resolver for the adminControlSearch field.
func (r *queryResolver) AdminControlSearch(ctx context.Context, query string) (*model.ControlSearchResult, error) {
	controlResults, err := adminSearchControls(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ControlSearchResult{
		Controls: controlResults,
	}, nil
}

// AdminControlObjectiveSearch is the resolver for the adminControlObjectiveSearch field.
func (r *queryResolver) AdminControlObjectiveSearch(ctx context.Context, query string) (*model.ControlObjectiveSearchResult, error) {
	controlobjectiveResults, err := adminSearchControlObjectives(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ControlObjectiveSearchResult{
		ControlObjectives: controlobjectiveResults,
	}, nil
}

// AdminDocumentDataSearch is the resolver for the adminDocumentDataSearch field.
func (r *queryResolver) AdminDocumentDataSearch(ctx context.Context, query string) (*model.DocumentDataSearchResult, error) {
	documentdataResults, err := adminSearchDocumentData(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.DocumentDataSearchResult{
		DocumentData: documentdataResults,
	}, nil
}

// AdminEntitySearch is the resolver for the adminEntitySearch field.
func (r *queryResolver) AdminEntitySearch(ctx context.Context, query string) (*model.EntitySearchResult, error) {
	entityResults, err := adminSearchEntities(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.EntitySearchResult{
		Entities: entityResults,
	}, nil
}

// AdminEntityTypeSearch is the resolver for the adminEntityTypeSearch field.
func (r *queryResolver) AdminEntityTypeSearch(ctx context.Context, query string) (*model.EntityTypeSearchResult, error) {
	entitytypeResults, err := adminSearchEntityTypes(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.EntityTypeSearchResult{
		EntityTypes: entitytypeResults,
	}, nil
}

// AdminEventSearch is the resolver for the adminEventSearch field.
func (r *queryResolver) AdminEventSearch(ctx context.Context, query string) (*model.EventSearchResult, error) {
	eventResults, err := adminSearchEvents(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.EventSearchResult{
		Events: eventResults,
	}, nil
}

// AdminFileSearch is the resolver for the adminFileSearch field.
func (r *queryResolver) AdminFileSearch(ctx context.Context, query string) (*model.FileSearchResult, error) {
	fileResults, err := adminSearchFiles(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.FileSearchResult{
		Files: fileResults,
	}, nil
}

// AdminGroupSearch is the resolver for the adminGroupSearch field.
func (r *queryResolver) AdminGroupSearch(ctx context.Context, query string) (*model.GroupSearchResult, error) {
	groupResults, err := adminSearchGroups(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.GroupSearchResult{
		Groups: groupResults,
	}, nil
}

// AdminGroupSettingSearch is the resolver for the adminGroupSettingSearch field.
func (r *queryResolver) AdminGroupSettingSearch(ctx context.Context, query string) (*model.GroupSettingSearchResult, error) {
	groupsettingResults, err := adminSearchGroupSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.GroupSettingSearchResult{
		GroupSettings: groupsettingResults,
	}, nil
}

// AdminIntegrationSearch is the resolver for the adminIntegrationSearch field.
func (r *queryResolver) AdminIntegrationSearch(ctx context.Context, query string) (*model.IntegrationSearchResult, error) {
	integrationResults, err := adminSearchIntegrations(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.IntegrationSearchResult{
		Integrations: integrationResults,
	}, nil
}

// AdminInternalPolicySearch is the resolver for the adminInternalPolicySearch field.
func (r *queryResolver) AdminInternalPolicySearch(ctx context.Context, query string) (*model.InternalPolicySearchResult, error) {
	internalpolicyResults, err := adminSearchInternalPolicies(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.InternalPolicySearchResult{
		InternalPolicies: internalpolicyResults,
	}, nil
}

// AdminNarrativeSearch is the resolver for the adminNarrativeSearch field.
func (r *queryResolver) AdminNarrativeSearch(ctx context.Context, query string) (*model.NarrativeSearchResult, error) {
	narrativeResults, err := adminSearchNarratives(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.NarrativeSearchResult{
		Narratives: narrativeResults,
	}, nil
}

// AdminOrgSubscriptionSearch is the resolver for the adminOrgSubscriptionSearch field.
func (r *queryResolver) AdminOrgSubscriptionSearch(ctx context.Context, query string) (*model.OrgSubscriptionSearchResult, error) {
	orgsubscriptionResults, err := adminSearchOrgSubscriptions(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.OrgSubscriptionSearchResult{
		OrgSubscriptions: orgsubscriptionResults,
	}, nil
}

// AdminOrganizationSearch is the resolver for the adminOrganizationSearch field.
func (r *queryResolver) AdminOrganizationSearch(ctx context.Context, query string) (*model.OrganizationSearchResult, error) {
	organizationResults, err := adminSearchOrganizations(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.OrganizationSearchResult{
		Organizations: organizationResults,
	}, nil
}

// AdminOrganizationSettingSearch is the resolver for the adminOrganizationSettingSearch field.
func (r *queryResolver) AdminOrganizationSettingSearch(ctx context.Context, query string) (*model.OrganizationSettingSearchResult, error) {
	organizationsettingResults, err := adminSearchOrganizationSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.OrganizationSettingSearchResult{
		OrganizationSettings: organizationsettingResults,
	}, nil
}

// AdminPersonalAccessTokenSearch is the resolver for the adminPersonalAccessTokenSearch field.
func (r *queryResolver) AdminPersonalAccessTokenSearch(ctx context.Context, query string) (*model.PersonalAccessTokenSearchResult, error) {
	personalaccesstokenResults, err := adminSearchPersonalAccessTokens(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.PersonalAccessTokenSearchResult{
		PersonalAccessTokens: personalaccesstokenResults,
	}, nil
}

// AdminProcedureSearch is the resolver for the adminProcedureSearch field.
func (r *queryResolver) AdminProcedureSearch(ctx context.Context, query string) (*model.ProcedureSearchResult, error) {
	procedureResults, err := adminSearchProcedures(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ProcedureSearchResult{
		Procedures: procedureResults,
	}, nil
}

// AdminProgramSearch is the resolver for the adminProgramSearch field.
func (r *queryResolver) AdminProgramSearch(ctx context.Context, query string) (*model.ProgramSearchResult, error) {
	programResults, err := adminSearchPrograms(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.ProgramSearchResult{
		Programs: programResults,
	}, nil
}

// AdminRiskSearch is the resolver for the adminRiskSearch field.
func (r *queryResolver) AdminRiskSearch(ctx context.Context, query string) (*model.RiskSearchResult, error) {
	riskResults, err := adminSearchRisks(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.RiskSearchResult{
		Risks: riskResults,
	}, nil
}

// AdminStandardSearch is the resolver for the adminStandardSearch field.
func (r *queryResolver) AdminStandardSearch(ctx context.Context, query string) (*model.StandardSearchResult, error) {
	standardResults, err := adminSearchStandards(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.StandardSearchResult{
		Standards: standardResults,
	}, nil
}

// AdminSubcontrolSearch is the resolver for the adminSubcontrolSearch field.
func (r *queryResolver) AdminSubcontrolSearch(ctx context.Context, query string) (*model.SubcontrolSearchResult, error) {
	subcontrolResults, err := adminSearchSubcontrols(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.SubcontrolSearchResult{
		Subcontrols: subcontrolResults,
	}, nil
}

// AdminSubscriberSearch is the resolver for the adminSubscriberSearch field.
func (r *queryResolver) AdminSubscriberSearch(ctx context.Context, query string) (*model.SubscriberSearchResult, error) {
	subscriberResults, err := adminSearchSubscribers(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.SubscriberSearchResult{
		Subscribers: subscriberResults,
	}, nil
}

// AdminTFASettingSearch is the resolver for the adminTFASettingSearch field.
func (r *queryResolver) AdminTFASettingSearch(ctx context.Context, query string) (*model.TFASettingSearchResult, error) {
	tfasettingResults, err := adminSearchTFASettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.TFASettingSearchResult{
		TFASettings: tfasettingResults,
	}, nil
}

// AdminTaskSearch is the resolver for the adminTaskSearch field.
func (r *queryResolver) AdminTaskSearch(ctx context.Context, query string) (*model.TaskSearchResult, error) {
	taskResults, err := adminSearchTasks(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.TaskSearchResult{
		Tasks: taskResults,
	}, nil
}

// AdminTemplateSearch is the resolver for the adminTemplateSearch field.
func (r *queryResolver) AdminTemplateSearch(ctx context.Context, query string) (*model.TemplateSearchResult, error) {
	templateResults, err := adminSearchTemplates(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.TemplateSearchResult{
		Templates: templateResults,
	}, nil
}

// AdminUserSearch is the resolver for the adminUserSearch field.
func (r *queryResolver) AdminUserSearch(ctx context.Context, query string) (*model.UserSearchResult, error) {
	userResults, err := adminSearchUsers(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.UserSearchResult{
		Users: userResults,
	}, nil
}

// AdminUserSettingSearch is the resolver for the adminUserSettingSearch field.
func (r *queryResolver) AdminUserSettingSearch(ctx context.Context, query string) (*model.UserSettingSearchResult, error) {
	usersettingResults, err := adminSearchUserSettings(ctx, query)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &model.UserSettingSearchResult{
		UserSettings: usersettingResults,
	}, nil
}
