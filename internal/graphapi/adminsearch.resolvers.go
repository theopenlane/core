package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/privacy/rule"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
)

// AdminAPITokenSearch is the resolver for the adminAPITokenSearch field.
func (r *queryResolver) AdminAPITokenSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.APITokenConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	apitokenResults, err := adminSearchAPITokens(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return apitokenResults, nil
}

// AdminActionPlanSearch is the resolver for the adminActionPlanSearch field.
func (r *queryResolver) AdminActionPlanSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ActionPlanConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	actionplanResults, err := adminSearchActionPlans(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return actionplanResults, nil
}

// AdminContactSearch is the resolver for the adminContactSearch field.
func (r *queryResolver) AdminContactSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ContactConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	contactResults, err := adminSearchContacts(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return contactResults, nil
}

// AdminControlSearch is the resolver for the adminControlSearch field.
func (r *queryResolver) AdminControlSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ControlConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	controlResults, err := adminSearchControls(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return controlResults, nil
}

// AdminControlImplementationSearch is the resolver for the adminControlImplementationSearch field.
func (r *queryResolver) AdminControlImplementationSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ControlImplementationConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	controlimplementationResults, err := adminSearchControlImplementations(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return controlimplementationResults, nil
}

// AdminControlObjectiveSearch is the resolver for the adminControlObjectiveSearch field.
func (r *queryResolver) AdminControlObjectiveSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ControlObjectiveConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	controlobjectiveResults, err := adminSearchControlObjectives(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return controlobjectiveResults, nil
}

// AdminCustomDomainSearch is the resolver for the adminCustomDomainSearch field.
func (r *queryResolver) AdminCustomDomainSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.CustomDomainConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	customdomainResults, err := adminSearchCustomDomains(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return customdomainResults, nil
}

// AdminDNSVerificationSearch is the resolver for the adminDNSVerificationSearch field.
func (r *queryResolver) AdminDNSVerificationSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.DNSVerificationConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	dnsverificationResults, err := adminSearchDNSVerifications(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return dnsverificationResults, nil
}

// AdminDocumentDataSearch is the resolver for the adminDocumentDataSearch field.
func (r *queryResolver) AdminDocumentDataSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.DocumentDataConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	documentdataResults, err := adminSearchDocumentData(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return documentdataResults, nil
}

// AdminEntitySearch is the resolver for the adminEntitySearch field.
func (r *queryResolver) AdminEntitySearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EntityConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	entityResults, err := adminSearchEntities(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return entityResults, nil
}

// AdminEntityTypeSearch is the resolver for the adminEntityTypeSearch field.
func (r *queryResolver) AdminEntityTypeSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EntityTypeConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	entitytypeResults, err := adminSearchEntityTypes(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return entitytypeResults, nil
}

// AdminEventSearch is the resolver for the adminEventSearch field.
func (r *queryResolver) AdminEventSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EventConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	eventResults, err := adminSearchEvents(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return eventResults, nil
}

// AdminEvidenceSearch is the resolver for the adminEvidenceSearch field.
func (r *queryResolver) AdminEvidenceSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.EvidenceConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	evidenceResults, err := adminSearchEvidences(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return evidenceResults, nil
}

// AdminFileSearch is the resolver for the adminFileSearch field.
func (r *queryResolver) AdminFileSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.FileConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	fileResults, err := adminSearchFiles(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return fileResults, nil
}

// AdminGroupSearch is the resolver for the adminGroupSearch field.
func (r *queryResolver) AdminGroupSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.GroupConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	groupResults, err := adminSearchGroups(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return groupResults, nil
}

// AdminIntegrationSearch is the resolver for the adminIntegrationSearch field.
func (r *queryResolver) AdminIntegrationSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.IntegrationConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	integrationResults, err := adminSearchIntegrations(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return integrationResults, nil
}

// AdminInternalPolicySearch is the resolver for the adminInternalPolicySearch field.
func (r *queryResolver) AdminInternalPolicySearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.InternalPolicyConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	internalpolicyResults, err := adminSearchInternalPolicies(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return internalpolicyResults, nil
}

// AdminInviteSearch is the resolver for the adminInviteSearch field.
func (r *queryResolver) AdminInviteSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.InviteConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	inviteResults, err := adminSearchInvites(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return inviteResults, nil
}

// AdminJobRunnerSearch is the resolver for the adminJobRunnerSearch field.
func (r *queryResolver) AdminJobRunnerSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.JobRunnerConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	jobrunnerResults, err := adminSearchJobRunners(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return jobrunnerResults, nil
}

// AdminJobRunnerRegistrationTokenSearch is the resolver for the adminJobRunnerRegistrationTokenSearch field.
func (r *queryResolver) AdminJobRunnerRegistrationTokenSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.JobRunnerRegistrationTokenConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	jobrunnerregistrationtokenResults, err := adminSearchJobRunnerRegistrationTokens(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return jobrunnerregistrationtokenResults, nil
}

// AdminJobRunnerTokenSearch is the resolver for the adminJobRunnerTokenSearch field.
func (r *queryResolver) AdminJobRunnerTokenSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.JobRunnerTokenConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	jobrunnertokenResults, err := adminSearchJobRunnerTokens(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return jobrunnertokenResults, nil
}

// AdminMappableDomainSearch is the resolver for the adminMappableDomainSearch field.
func (r *queryResolver) AdminMappableDomainSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.MappableDomainConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	mappabledomainResults, err := adminSearchMappableDomains(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return mappabledomainResults, nil
}

// AdminMappedControlSearch is the resolver for the adminMappedControlSearch field.
func (r *queryResolver) AdminMappedControlSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.MappedControlConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	mappedcontrolResults, err := adminSearchMappedControls(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return mappedcontrolResults, nil
}

// AdminNarrativeSearch is the resolver for the adminNarrativeSearch field.
func (r *queryResolver) AdminNarrativeSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.NarrativeConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	narrativeResults, err := adminSearchNarratives(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return narrativeResults, nil
}

// AdminOrgSubscriptionSearch is the resolver for the adminOrgSubscriptionSearch field.
func (r *queryResolver) AdminOrgSubscriptionSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.OrgSubscriptionConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	orgsubscriptionResults, err := adminSearchOrgSubscriptions(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return orgsubscriptionResults, nil
}

// AdminOrganizationSearch is the resolver for the adminOrganizationSearch field.
func (r *queryResolver) AdminOrganizationSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.OrganizationConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	organizationResults, err := adminSearchOrganizations(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return organizationResults, nil
}

// AdminOrganizationSettingSearch is the resolver for the adminOrganizationSettingSearch field.
func (r *queryResolver) AdminOrganizationSettingSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.OrganizationSettingConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	organizationsettingResults, err := adminSearchOrganizationSettings(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return organizationsettingResults, nil
}

// AdminPersonalAccessTokenSearch is the resolver for the adminPersonalAccessTokenSearch field.
func (r *queryResolver) AdminPersonalAccessTokenSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.PersonalAccessTokenConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	personalaccesstokenResults, err := adminSearchPersonalAccessTokens(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return personalaccesstokenResults, nil
}

// AdminProcedureSearch is the resolver for the adminProcedureSearch field.
func (r *queryResolver) AdminProcedureSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ProcedureConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	procedureResults, err := adminSearchProcedures(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return procedureResults, nil
}

// AdminProgramSearch is the resolver for the adminProgramSearch field.
func (r *queryResolver) AdminProgramSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ProgramConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	programResults, err := adminSearchPrograms(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return programResults, nil
}

// AdminRiskSearch is the resolver for the adminRiskSearch field.
func (r *queryResolver) AdminRiskSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.RiskConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	riskResults, err := adminSearchRisks(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return riskResults, nil
}

// AdminScheduledJobSearch is the resolver for the adminScheduledJobSearch field.
func (r *queryResolver) AdminScheduledJobSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.ScheduledJobConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	scheduledjobResults, err := adminSearchScheduledJobs(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return scheduledjobResults, nil
}

// AdminStandardSearch is the resolver for the adminStandardSearch field.
func (r *queryResolver) AdminStandardSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.StandardConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	standardResults, err := adminSearchStandards(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return standardResults, nil
}

// AdminSubcontrolSearch is the resolver for the adminSubcontrolSearch field.
func (r *queryResolver) AdminSubcontrolSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.SubcontrolConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	subcontrolResults, err := adminSearchSubcontrols(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return subcontrolResults, nil
}

// AdminSubscriberSearch is the resolver for the adminSubscriberSearch field.
func (r *queryResolver) AdminSubscriberSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.SubscriberConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	subscriberResults, err := adminSearchSubscribers(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return subscriberResults, nil
}

// AdminTaskSearch is the resolver for the adminTaskSearch field.
func (r *queryResolver) AdminTaskSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.TaskConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	taskResults, err := adminSearchTasks(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return taskResults, nil
}

// AdminTemplateSearch is the resolver for the adminTemplateSearch field.
func (r *queryResolver) AdminTemplateSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.TemplateConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	templateResults, err := adminSearchTemplates(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return templateResults, nil
}

// AdminUserSearch is the resolver for the adminUserSearch field.
func (r *queryResolver) AdminUserSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.UserConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	userResults, err := adminSearchUsers(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return userResults, nil
}

// AdminUserSettingSearch is the resolver for the adminUserSettingSearch field.
func (r *queryResolver) AdminUserSettingSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.UserSettingConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	usersettingResults, err := adminSearchUserSettings(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return usersettingResults, nil
}

// AdminWebauthnSearch is the resolver for the adminWebauthnSearch field.
func (r *queryResolver) AdminWebauthnSearch(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.WebauthnConnection, error) {
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	webauthnResults, err := adminSearchWebauthns(ctx, query, after, first, before, last)

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return webauthnResults, nil
}
