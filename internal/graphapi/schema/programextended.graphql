extend input UpdateProgramInput {
  addProgramMembers: [AddProgramMembershipInput!]
  removeProgramMembers: [ID!]
}

"""
AddProgramMembershipInput is used for create ProgramMembership object under an existing program
"""
input AddProgramMembershipInput {
  role: ProgramMembershipRole
  userID: ID!
}

extend input ProgramMembershipWhereInput {
  programID: String
  userID: String
}

input CreateControlWithSubcontrolsInput{
  control: CreateControlInput
  subcontrols: [CreateSubcontrolInput!]
}

input CreateFullProgramInput{
  program: CreateProgramInput!
  controls: [CreateControlWithSubcontrolsInput!]
  risks: [CreateRiskInput!]
  internalPolicies: [CreateInternalPolicyInput!]
  procedures: [CreateProcedureInput!]
  members: [CreateMemberWithProgramInput!]
  standardID: ID
}

input CreateProgramWithMembersInput{
  """
  program input for the base program details
  """
  program: CreateProgramInput!
  """
  members to add to the program
  """
  members: [CreateMemberWithProgramInput!]
  """
  standardID to clone all controls from into the organization and associated with the program
  """
  standardID: ID
  """
  standardShortName to clone all controls from into the organization, if the standardID is provided that will take precedence
  """
  standardShortName: String
  """
  standardVersion is the version of the standard to use when filtering by short name, if not provided, the latest version will be used
  """
  standardVersion: String
  """
  categories to limit the controls that are cloned from a standard. If standardID is empty, this field is ignored
  """
  categories: [String!]
}

input CreateMemberWithProgramInput {
  role: ProgramMembershipRole
  userID: ID!
}

extend type Mutation{
    """
    Create a new program with members
    """
    createProgramWithMembers(
        """
        values of the program
        """
        input: CreateProgramWithMembersInput!
    ): ProgramCreatePayload!
    """
    Create a new program with options for edges (members, policies, procedures, risks, controls, standard)
    """
    createFullProgram(
        """
        values of the program
        """
        input: CreateFullProgramInput!
    ): ProgramCreatePayload!
    """
    Create a controls with subcontrols
    """
    createControlWithSubcontrols(
        """
        values of the program
        """
        input: CreateControlWithSubcontrolsInput!
    ): ControlCreatePayload!
}
