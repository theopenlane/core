package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// CreateActionPlan is the resolver for the createActionPlan field.
func (r *mutationResolver) CreateActionPlan(ctx context.Context, input generated.CreateActionPlanInput) (*ActionPlanCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).ActionPlan.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "actionplan"})
	}

	return &ActionPlanCreatePayload{
		ActionPlan: res,
	}, nil
}

// CreateBulkActionPlan is the resolver for the createBulkActionPlan field.
func (r *mutationResolver) CreateBulkActionPlan(ctx context.Context, input []*generated.CreateActionPlanInput) (*ActionPlanBulkCreatePayload, error) {
	return r.bulkCreateActionPlan(ctx, input)
}

// CreateBulkCSVActionPlan is the resolver for the createBulkCSVActionPlan field.
func (r *mutationResolver) CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload) (*ActionPlanBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateActionPlanInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateActionPlan(ctx, data)
}

// UpdateActionPlan is the resolver for the updateActionPlan field.
func (r *mutationResolver) UpdateActionPlan(ctx context.Context, id string, input generated.UpdateActionPlanInput) (*ActionPlanUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).ActionPlan.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "actionplan"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "actionplan"})
	}

	return &ActionPlanUpdatePayload{
		ActionPlan: res,
	}, nil
}

// DeleteActionPlan is the resolver for the deleteActionPlan field.
func (r *mutationResolver) DeleteActionPlan(ctx context.Context, id string) (*ActionPlanDeletePayload, error) {
	if err := withTransactionalMutation(ctx).ActionPlan.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "actionplan"})
	}

	if err := generated.ActionPlanEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &ActionPlanDeletePayload{
		DeletedID: id,
	}, nil
}

// ActionPlan is the resolver for the actionPlan field.
func (r *queryResolver) ActionPlan(ctx context.Context, id string) (*generated.ActionPlan, error) {
	res, err := withTransactionalMutation(ctx).ActionPlan.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "actionplan"})
	}

	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
