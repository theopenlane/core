package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// CreateRisk is the resolver for the createRisk field.
func (r *mutationResolver) CreateRisk(ctx context.Context, input generated.CreateRiskInput) (*RiskCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).Risk.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "risk"})
	}

	return &RiskCreatePayload{
		Risk: res,
	}, nil
}

// CreateBulkRisk is the resolver for the createBulkRisk field.
func (r *mutationResolver) CreateBulkRisk(ctx context.Context, input []*generated.CreateRiskInput) (*RiskBulkCreatePayload, error) {
	return r.bulkCreateRisk(ctx, input)
}

// CreateBulkCSVRisk is the resolver for the createBulkCSVRisk field.
func (r *mutationResolver) CreateBulkCSVRisk(ctx context.Context, input graphql.Upload) (*RiskBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateRiskInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateRisk(ctx, data)
}

// UpdateRisk is the resolver for the updateRisk field.
func (r *mutationResolver) UpdateRisk(ctx context.Context, id string, input generated.UpdateRiskInput) (*RiskUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Risk.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "risk"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "risk"})
	}

	return &RiskUpdatePayload{
		Risk: res,
	}, nil
}

// DeleteRisk is the resolver for the deleteRisk field.
func (r *mutationResolver) DeleteRisk(ctx context.Context, id string) (*RiskDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Risk.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "risk"})
	}

	if err := generated.RiskEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &RiskDeletePayload{
		DeletedID: id,
	}, nil
}

// Risk is the resolver for the risk field.
func (r *queryResolver) Risk(ctx context.Context, id string) (*generated.Risk, error) {
	res, err := withTransactionalMutation(ctx).Risk.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "risk"})
	}

	return res, nil
}
