package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/iam/auth"
)

// CreateTFASetting is the resolver for the createTFASetting field.
func (r *mutationResolver) CreateTFASetting(ctx context.Context, input generated.CreateTFASettingInput) (*model.TFASettingCreatePayload, error) {
	if err := checkAllowedAuthType(ctx); err != nil {
		return nil, err
	}

	// get the userID from the context
	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	settings, err := withTransactionalMutation(ctx).TFASetting.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "tfasetting"})
	}

	// get the new settings with the owner so we can get the email later
	settings, err = withTransactionalMutation(ctx).TFASetting.Query().
		Where(tfasetting.OwnerID(userID)).
		WithOwner(). // get the owner so we can get the email later
		Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "tfasetting"})
	}

	qrCode, err := r.generateTFAQRCode(ctx, settings, settings.Edges.Owner.Email, userID)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "tfasetting"})
	}

	return &model.TFASettingCreatePayload{TfaSetting: settings, QRCode: &qrCode}, nil
}

// UpdateTFASetting is the resolver for the updateTFASetting field.
func (r *mutationResolver) UpdateTFASetting(ctx context.Context, input generated.UpdateTFASettingInput) (*model.TFASettingUpdatePayload, error) {
	if err := checkAllowedAuthType(ctx); err != nil {
		return nil, err
	}

	// get the userID from the context
	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	settings, err := withTransactionalMutation(ctx).TFASetting.Query().
		Where(tfasetting.OwnerID(userID)).
		WithOwner(). // get the owner so we can get the email later
		Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "tfasetting"})
	}

	updatedSettings, err := settings.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "tfasetting"})
	}

	qrCode, err := r.generateTFAQRCode(ctx, updatedSettings, settings.Edges.Owner.Email, userID)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "tfasetting"})
	}

	out := &model.TFASettingUpdatePayload{
		TfaSetting: updatedSettings,
		QRCode:     &qrCode,
	}

	gtx := graphql.GetOperationContext(ctx)
	regenBackupCodes, _ := gtx.Variables["input"].(map[string]interface{})["regenBackupCodes"].(bool)

	// only return the recovery codes if the TFA device has been verified or if the user requested new codes
	if (input.Verified != nil && *input.Verified == true) || regenBackupCodes {
		out.RecoveryCodes = updatedSettings.RecoveryCodes
	}

	return out, nil
}

// TfaSetting is the resolver for the tfaSettings field.
func (r *queryResolver) TfaSetting(ctx context.Context, id *string) (*generated.TFASetting, error) {
	if err := checkAllowedAuthType(ctx); err != nil {
		return nil, err
	}

	// get the userID from the context
	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	if id != nil && *id != "" {
		settings, err := withTransactionalMutation(ctx).TFASetting.Get(ctx, *id)
		if err != nil {
			return nil, parseRequestError(err, action{action: ActionGet, object: "tfasetting"})
		}

		return settings, nil
	}

	settings, err := withTransactionalMutation(ctx).TFASetting.Query().Where(tfasetting.OwnerID(userID)).Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "tfasetting"})
	}

	return settings, nil
}

// RegenBackupCodes is the resolver for the regenBackupCodes field.
func (r *updateTFASettingInputResolver) RegenBackupCodes(ctx context.Context, obj *generated.UpdateTFASettingInput, data *bool) error {
	// this is handled by the tfa settings hook
	return nil
}
