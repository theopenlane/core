package graphapi

// THIS CODE IS REGENERATED BY github.com/theopenlane/gqlgen-plugins. DO NOT EDIT.

import (
	"context"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqljson"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
)

var (
	maxSearchTime = time.Duration(30 * time.Second)
)

// searchResult is a generic struct to hold the result of a search operation
type searchResult[T any] struct {
	result T
	err    error
}

// searchContact searches for Contact based on the query string looking for matches
func searchContacts(ctx context.Context, query string) ([]*generated.Contact, error) {
	return withTransactionalMutation(ctx).Contact.Query().Where(
		contact.Or(
			contact.FullNameContainsFold(query), // search by FullName for type string
			contact.IDContainsFold(query),       // search by ID for type string
		),
	).All(ctx)
}

// searchContact searches for Contact based on the query string looking for matches
func adminSearchContacts(ctx context.Context, query string) ([]*generated.Contact, error) {
	return withTransactionalMutation(ctx).Contact.Query().Where(
		contact.Or(
			contact.IDContainsFold(query),        // search by ID for type string
			contact.DeletedByContainsFold(query), // search by DeletedBy for type string
			func(s *sql.Selector) {
				s.Where(
					sqljson.ValueContains(contact.FieldTags, query), // search by Tags for type json.RawMessage
				)
			},
			contact.OwnerIDContainsFold(query),     // search by OwnerID for type string
			contact.FullNameContainsFold(query),    // search by FullName for type string
			contact.TitleContainsFold(query),       // search by Title for type string
			contact.CompanyContainsFold(query),     // search by Company for type string
			contact.EmailContainsFold(query),       // search by Email for type string
			contact.PhoneNumberContainsFold(query), // search by PhoneNumber for type string
			contact.AddressContainsFold(query),     // search by Address for type string
		),
	).All(ctx)
}

// searchEntity searches for Entity based on the query string looking for matches
func searchEntities(ctx context.Context, query string) ([]*generated.Entity, error) {
	return withTransactionalMutation(ctx).Entity.Query().Where(
		entity.Or(
			entity.DescriptionContainsFold(query), // search by Description for type string
			entity.DisplayNameContainsFold(query), // search by DisplayName for type string
			entity.IDContainsFold(query),          // search by ID for type string
			entity.NameContainsFold(query),        // search by Name for type string
		),
	).All(ctx)
}

// searchEntity searches for Entity based on the query string looking for matches
func adminSearchEntities(ctx context.Context, query string) ([]*generated.Entity, error) {
	return withTransactionalMutation(ctx).Entity.Query().Where(
		entity.Or(
			entity.IDContainsFold(query),        // search by ID for type string
			entity.DeletedByContainsFold(query), // search by DeletedBy for type string
			func(s *sql.Selector) {
				s.Where(
					sqljson.ValueContains(entity.FieldTags, query), // search by Tags for type json.RawMessage
				)
			},
			entity.OwnerIDContainsFold(query),     // search by OwnerID for type string
			entity.NameContainsFold(query),        // search by Name for type string
			entity.DisplayNameContainsFold(query), // search by DisplayName for type string
			entity.DescriptionContainsFold(query), // search by Description for type string
			func(s *sql.Selector) {
				s.Where(
					sqljson.ValueContains(entity.FieldDomains, query), // search by Domains for type json.RawMessage
				)
			},
			entity.EntityTypeIDContainsFold(query), // search by EntityTypeID for type string
			entity.StatusContainsFold(query),       // search by Status for type string
		),
	).All(ctx)
}

// searchGroup searches for Group based on the query string looking for matches
func searchGroups(ctx context.Context, query string) ([]*generated.Group, error) {
	return withTransactionalMutation(ctx).Group.Query().Where(
		group.Or(
			group.DisplayNameContainsFold(query), // search by DisplayName for type string
			group.IDContainsFold(query),          // search by ID for type string
			group.NameContainsFold(query),        // search by Name for type string
		),
	).All(ctx)
}

// searchGroup searches for Group based on the query string looking for matches
func adminSearchGroups(ctx context.Context, query string) ([]*generated.Group, error) {
	return withTransactionalMutation(ctx).Group.Query().Where(
		group.Or(
			group.DeletedByContainsFold(query), // search by DeletedBy for type string
			group.IDContainsFold(query),        // search by ID for type string
			func(s *sql.Selector) {
				s.Where(
					sqljson.ValueContains(group.FieldTags, query), // search by Tags for type json.RawMessage
				)
			},
			group.OwnerIDContainsFold(query),     // search by OwnerID for type string
			group.NameContainsFold(query),        // search by Name for type string
			group.DisplayNameContainsFold(query), // search by DisplayName for type string
		),
	).All(ctx)
}

// searchOrganization searches for Organization based on the query string looking for matches
func searchOrganizations(ctx context.Context, query string) ([]*generated.Organization, error) {
	return withTransactionalMutation(ctx).Organization.Query().Where(
		organization.Or(
			organization.DisplayNameContainsFold(query), // search by DisplayName for type string
			organization.IDContainsFold(query),          // search by ID for type string
			organization.NameContainsFold(query),        // search by Name for type string
		),
	).All(ctx)
}

// searchOrganization searches for Organization based on the query string looking for matches
func adminSearchOrganizations(ctx context.Context, query string) ([]*generated.Organization, error) {
	return withTransactionalMutation(ctx).Organization.Query().Where(
		organization.Or(
			organization.IDContainsFold(query), // search by ID for type string
			func(s *sql.Selector) {
				s.Where(
					sqljson.ValueContains(organization.FieldTags, query), // search by Tags for type json.RawMessage
				)
			},
			organization.DeletedByContainsFold(query),       // search by DeletedBy for type string
			organization.NameContainsFold(query),            // search by Name for type string
			organization.DisplayNameContainsFold(query),     // search by DisplayName for type string
			organization.AvatarRemoteURLContainsFold(query), // search by AvatarRemoteURL for type string
		),
	).All(ctx)
}

// searchSubscriber searches for Subscriber based on the query string looking for matches
func searchSubscribers(ctx context.Context, query string) ([]*generated.Subscriber, error) {
	return withTransactionalMutation(ctx).Subscriber.Query().Where(
		subscriber.Or(
			subscriber.EmailContainsFold(query), // search by Email for type string
			subscriber.IDContainsFold(query),    // search by ID for type string
		),
	).All(ctx)
}

// searchSubscriber searches for Subscriber based on the query string looking for matches
func adminSearchSubscribers(ctx context.Context, query string) ([]*generated.Subscriber, error) {
	return withTransactionalMutation(ctx).Subscriber.Query().Where(
		subscriber.Or(
			subscriber.IDContainsFold(query), // search by ID for type string
			func(s *sql.Selector) {
				s.Where(
					sqljson.ValueContains(subscriber.FieldTags, query), // search by Tags for type json.RawMessage
				)
			},
			subscriber.DeletedByContainsFold(query),   // search by DeletedBy for type string
			subscriber.OwnerIDContainsFold(query),     // search by OwnerID for type string
			subscriber.EmailContainsFold(query),       // search by Email for type string
			subscriber.PhoneNumberContainsFold(query), // search by PhoneNumber for type string
		),
	).All(ctx)
}
