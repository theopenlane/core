package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// CreateProgram is the resolver for the createProgram field.
func (r *mutationResolver) CreateProgram(ctx context.Context, input generated.CreateProgramInput) (*ProgramCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).Program.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "program"})
	}

	return &ProgramCreatePayload{
		Program: res,
	}, nil
}

// CreateBulkProgram is the resolver for the createBulkProgram field.
func (r *mutationResolver) CreateBulkProgram(ctx context.Context, input []*generated.CreateProgramInput) (*ProgramBulkCreatePayload, error) {
	return r.bulkCreateProgram(ctx, input)
}

// CreateBulkCSVProgram is the resolver for the createBulkCSVProgram field.
func (r *mutationResolver) CreateBulkCSVProgram(ctx context.Context, input graphql.Upload) (*ProgramBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateProgramInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateProgram(ctx, data)
}

// UpdateProgram is the resolver for the updateProgram field.
func (r *mutationResolver) UpdateProgram(ctx context.Context, id string, input generated.UpdateProgramInput) (*ProgramUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Program.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "program"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "program"})
	}

	return &ProgramUpdatePayload{
		Program: res,
	}, nil
}

// DeleteProgram is the resolver for the deleteProgram field.
func (r *mutationResolver) DeleteProgram(ctx context.Context, id string) (*ProgramDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Program.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "program"})
	}

	if err := generated.ProgramEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &ProgramDeletePayload{
		DeletedID: id,
	}, nil
}

// Program is the resolver for the program field.
func (r *queryResolver) Program(ctx context.Context, id string) (*generated.Program, error) {
	res, err := withTransactionalMutation(ctx).Program.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "program"})
	}

	return res, nil
}
