package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// FromControlRefCodes is the resolver for the fromControlRefCodes field.
func (r *createMappedControlInputResolver) FromControlRefCodes(ctx context.Context, obj *generated.CreateMappedControlInput, data []string) error {
	ids, err := getControlIDsFromRefCodes[predicate.Control](ctx, data)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "mappedcontrol"})
	}

	obj.FromControlIDs = ids

	return nil
}

// FromSubcontrolRefCodes is the resolver for the fromSubcontrolRefCodes field.
func (r *createMappedControlInputResolver) FromSubcontrolRefCodes(ctx context.Context, obj *generated.CreateMappedControlInput, data []string) error {
	ids, err := getControlIDsFromRefCodes[predicate.Subcontrol](ctx, data)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "mappedcontrol"})
	}

	obj.FromSubcontrolIDs = ids

	return nil
}

// ToControlRefCodes is the resolver for the toControlRefCodes field.
func (r *createMappedControlInputResolver) ToControlRefCodes(ctx context.Context, obj *generated.CreateMappedControlInput, data []string) error {
	ids, err := getControlIDsFromRefCodes[predicate.Control](ctx, data)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "mappedcontrol"})
	}

	obj.ToControlIDs = ids

	return nil
}

// ToSubcontrolRefCodes is the resolver for the toSubcontrolRefCodes field.
func (r *createMappedControlInputResolver) ToSubcontrolRefCodes(ctx context.Context, obj *generated.CreateMappedControlInput, data []string) error {
	ids, err := getControlIDsFromRefCodes[predicate.Subcontrol](ctx, data)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "mappedcontrol"})
	}

	obj.ToSubcontrolIDs = ids

	return nil
}
