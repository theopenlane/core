package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	entgroup "github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/graphapi/model"
)

// CreateGroupWithMembers is the resolver for the createGroupWithMembers field.
func (r *mutationResolver) CreateGroupWithMembers(ctx context.Context, group generated.CreateGroupInput, members []*model.GroupMembersInput) (*model.GroupCreatePayload, error) {
	res, err := r.CreateGroup(ctx, group)
	if err != nil {
		return nil, err
	}

	memberInput := make([]*generated.CreateGroupMembershipInput, len(members))

	for i, member := range members {
		memberInput[i] = &generated.CreateGroupMembershipInput{
			GroupID: res.Group.ID,
			UserID:  member.UserID,
			Role:    member.Role,
		}
	}

	if _, err := r.CreateBulkGroupMembership(ctx, memberInput); err != nil {
		return nil, err
	}

	finalResult, err := withTransactionalMutation(ctx).Group.
		Query().
		WithMembers().
		Where(entgroup.IDEQ(res.Group.ID)).Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	return &model.GroupCreatePayload{
		Group: finalResult,
	}, nil
}

// CreateGroupSettings is the resolver for the createGroupSettings field.
func (r *createGroupInputResolver) CreateGroupSettings(ctx context.Context, obj *generated.CreateGroupInput, data *generated.CreateGroupSettingInput) error {
	c := withTransactionalMutation(ctx)

	groupSettings, err := c.GroupSetting.Create().SetInput(*data).Save(ctx)
	if err != nil {
		return err
	}

	obj.SettingID = &groupSettings.ID

	return nil
}

// AddGroupMembers is the resolver for the addGroupMembers field.
func (r *updateGroupInputResolver) AddGroupMembers(ctx context.Context, obj *generated.UpdateGroupInput, data []*generated.CreateGroupMembershipInput) error {
	opCtx := graphql.GetOperationContext(ctx)
	groupID, ok := opCtx.Variables["updateGroupId"]
	if !ok {
		log.Error().Msg("unable to get group from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupMembershipCreate, len(data))
	for i := range data {
		input := *data[i]
		input.GroupID = groupID.(string)
		builders[i] = c.GroupMembership.Create().SetInput(input)
	}

	_, err := c.GroupMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return err
	}

	return nil
}

// RemoveGroupMembers is the resolver for the removeGroupMembers field.
func (r *updateGroupInputResolver) RemoveGroupMembers(ctx context.Context, obj *generated.UpdateGroupInput, data []string) error {
	opCtx := graphql.GetOperationContext(ctx)
	groupID, ok := opCtx.Variables["updateGroupId"]
	if !ok {
		log.Error().Msg("unable to get group from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	_, err := c.GroupMembership.Delete().
		Where(
			groupmembership.GroupID(groupID.(string)),
			groupmembership.IDIn(data...),
		).
		Exec(ctx)
	if err != nil {
		return err
	}

	return nil
}

// UpdateGroupSettings is the resolver for the updateGroupSettings field.
func (r *updateGroupInputResolver) UpdateGroupSettings(ctx context.Context, obj *generated.UpdateGroupInput, data *generated.UpdateGroupSettingInput) error {
	opCtx := graphql.GetOperationContext(ctx)
	groupID, ok := opCtx.Variables["updateGroupId"]
	if !ok {
		log.Error().Msg("unable to get group from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	// get setting ID to update
	settingID := obj.SettingID
	if settingID == nil {
		group, err := c.Group.Get(ctx, groupID.(string))
		if err != nil {
			return err
		}

		setting, err := group.Setting(ctx)
		if err != nil {
			return err
		}

		settingID = &setting.ID
	}

	_, err := c.GroupSetting.UpdateOneID(*settingID).SetInput(*data).Save(ctx)
	if err != nil {
		return err
	}

	return nil
}
