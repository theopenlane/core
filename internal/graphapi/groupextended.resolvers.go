package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/core/internal/graphutils"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/utils/rout"
)

// Permissions is the resolver for the permissions field.
func (r *groupResolver) Permissions(ctx context.Context, obj *generated.Group) ([]*model.GroupPermissions, error) {
	perms := make([]*model.GroupPermissions, 0)

	// TODO (sfunk): we should generate this code in the future
	// based off the group permissions mixin
	res, err := withTransactionalMutation(ctx).Group.Query().Where(group.ID(obj.ID)).
		// Control permissions
		WithControlEditors().
		WithControlViewers().
		WithControlBlockedGroups().

		// Control Objective permissions
		WithControlObjectiveEditors().
		WithControlObjectiveViewers().
		WithControlObjectiveBlockedGroups().

		// Program permissions
		WithProgramViewers().
		WithProgramEditors().
		WithProgramBlockedGroups().

		// Risk permissions
		WithRiskViewers().
		WithRiskEditors().
		WithRiskBlockedGroups().

		// Internal Policy permissions
		WithInternalPolicyEditors().
		WithInternalPolicyBlockedGroups().

		// Procedure permissions
		WithProcedureEditors().
		WithProcedureBlockedGroups().

		// Narrative permissions
		WithNarrativeViewers().
		WithNarrativeEditors().
		WithNarrativeBlockedGroups().
		Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "group"})
	}

	perms = append(perms, getGroupPermissions(res.Edges.ControlViewers, generated.TypeControl, enums.Viewer)...)
	perms = append(perms, getGroupPermissions(res.Edges.ControlEditors, generated.TypeControl, enums.Editor)...)
	perms = append(perms, getGroupPermissions(res.Edges.ControlBlockedGroups, generated.TypeControl, enums.Blocked)...)

	perms = append(perms, getGroupPermissions(res.Edges.ControlObjectiveViewers, generated.TypeControlObjective, enums.Viewer)...)
	perms = append(perms, getGroupPermissions(res.Edges.ControlObjectiveEditors, generated.TypeControlObjective, enums.Editor)...)
	perms = append(perms, getGroupPermissions(res.Edges.ControlObjectiveBlockedGroups, generated.TypeControlObjective, enums.Blocked)...)

	perms = append(perms, getGroupPermissions(res.Edges.ProgramViewers, generated.TypeProgram, enums.Viewer)...)
	perms = append(perms, getGroupPermissions(res.Edges.ProgramEditors, generated.TypeProgram, enums.Editor)...)
	perms = append(perms, getGroupPermissions(res.Edges.ProgramBlockedGroups, generated.TypeProgram, enums.Blocked)...)

	perms = append(perms, getGroupPermissions(res.Edges.RiskViewers, generated.TypeRisk, enums.Viewer)...)
	perms = append(perms, getGroupPermissions(res.Edges.RiskEditors, generated.TypeRisk, enums.Editor)...)
	perms = append(perms, getGroupPermissions(res.Edges.RiskBlockedGroups, generated.TypeRisk, enums.Blocked)...)

	perms = append(perms, getGroupPermissions(res.Edges.InternalPolicyEditors, generated.TypeInternalPolicy, enums.Editor)...)
	perms = append(perms, getGroupPermissions(res.Edges.InternalPolicyBlockedGroups, generated.TypeInternalPolicy, enums.Blocked)...)

	perms = append(perms, getGroupPermissions(res.Edges.ProcedureEditors, generated.TypeProcedure, enums.Editor)...)
	perms = append(perms, getGroupPermissions(res.Edges.ProcedureBlockedGroups, generated.TypeProcedure, enums.Blocked)...)

	perms = append(perms, getGroupPermissions(res.Edges.NarrativeViewers, generated.TypeNarrative, enums.Viewer)...)
	perms = append(perms, getGroupPermissions(res.Edges.NarrativeEditors, generated.TypeProcedure, enums.Editor)...)
	perms = append(perms, getGroupPermissions(res.Edges.NarrativeBlockedGroups, generated.TypeProcedure, enums.Blocked)...)

	return perms, nil
}

// CreateGroupWithMembers is the resolver for the createGroupWithMembers field.
func (r *mutationResolver) CreateGroupWithMembers(ctx context.Context, groupInput generated.CreateGroupInput, members []*model.GroupMembersInput) (*model.GroupCreatePayload, error) {
	res, err := r.CreateGroup(ctx, groupInput)
	if err != nil {
		return nil, err
	}

	memberInput := make([]*generated.CreateGroupMembershipInput, len(members))

	for i, member := range members {
		memberInput[i] = &generated.CreateGroupMembershipInput{
			GroupID: res.Group.ID,
			UserID:  member.UserID,
			Role:    member.Role,
		}
	}

	if _, err := r.CreateBulkGroupMembership(ctx, memberInput); err != nil {
		return nil, err
	}

	finalResult, err := withTransactionalMutation(ctx).Group.
		Query().
		WithMembers().
		Where(group.IDEQ(res.Group.ID)).Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	return &model.GroupCreatePayload{
		Group: finalResult,
	}, nil
}

// CreateGroupByClone is the resolver for the createGroupByClone field.
func (r *mutationResolver) CreateGroupByClone(ctx context.Context, groupInput generated.CreateGroupInput, members []*model.GroupMembersInput, inheritGroupPermissions *string, cloneGroupMembers *string) (*model.GroupCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, groupInput.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	if inheritGroupPermissions != nil {
		groupWithPermissions, err := getGroupByIDWithPermissionsEdges(ctx, inheritGroupPermissions)
		if err != nil {
			return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
		}

		for _, controlEditor := range groupWithPermissions.Edges.ControlEditors {
			groupInput.ControlEditorIDs = append(groupInput.ControlEditorIDs, controlEditor.ID)
		}

		for _, controlViewer := range groupWithPermissions.Edges.ControlViewers {
			groupInput.ControlViewerIDs = append(groupInput.ControlViewerIDs, controlViewer.ID)
		}

		for _, controlBlockedGroup := range groupWithPermissions.Edges.ControlBlockedGroups {
			groupInput.ControlBlockedGroupIDs = append(groupInput.ControlBlockedGroupIDs, controlBlockedGroup.ID)
		}

		for _, controlObjectiveEditor := range groupWithPermissions.Edges.ControlObjectiveEditors {
			groupInput.ControlObjectiveEditorIDs = append(groupInput.ControlObjectiveEditorIDs, controlObjectiveEditor.ID)
		}

		for _, controlObjectiveViewer := range groupWithPermissions.Edges.ControlObjectiveViewers {
			groupInput.ControlObjectiveViewerIDs = append(groupInput.ControlObjectiveViewerIDs, controlObjectiveViewer.ID)
		}

		for _, controlObjectiveBlockedGroup := range groupWithPermissions.Edges.ControlObjectiveBlockedGroups {
			groupInput.ControlObjectiveBlockedGroupIDs = append(groupInput.ControlObjectiveBlockedGroupIDs, controlObjectiveBlockedGroup.ID)
		}

		for _, programViewer := range groupWithPermissions.Edges.ProgramViewers {
			groupInput.ProgramViewerIDs = append(groupInput.ProgramViewerIDs, programViewer.ID)
		}

		for _, programEditor := range groupWithPermissions.Edges.ProgramEditors {
			groupInput.ProgramEditorIDs = append(groupInput.ProgramEditorIDs, programEditor.ID)
		}

		for _, programBlockedGroup := range groupWithPermissions.Edges.ProgramBlockedGroups {
			groupInput.ProgramBlockedGroupIDs = append(groupInput.ProgramBlockedGroupIDs, programBlockedGroup.ID)
		}

		for _, riskViewer := range groupWithPermissions.Edges.RiskViewers {
			groupInput.RiskViewerIDs = append(groupInput.RiskViewerIDs, riskViewer.ID)
		}

		for _, riskEditor := range groupWithPermissions.Edges.RiskEditors {
			groupInput.RiskEditorIDs = append(groupInput.RiskEditorIDs, riskEditor.ID)
		}

		for _, riskBlockedGroup := range groupWithPermissions.Edges.RiskBlockedGroups {
			groupInput.RiskBlockedGroupIDs = append(groupInput.RiskBlockedGroupIDs, riskBlockedGroup.ID)
		}

		for _, internalPolicyEditor := range groupWithPermissions.Edges.InternalPolicyEditors {
			groupInput.InternalPolicyEditorIDs = append(groupInput.InternalPolicyEditorIDs, internalPolicyEditor.ID)
		}

		for _, internalPolicyBlockedGroup := range groupWithPermissions.Edges.InternalPolicyBlockedGroups {
			groupInput.InternalPolicyBlockedGroupIDs = append(groupInput.InternalPolicyBlockedGroupIDs, internalPolicyBlockedGroup.ID)
		}

		for _, procedureEditor := range groupWithPermissions.Edges.ProcedureEditors {
			groupInput.ProcedureEditorIDs = append(groupInput.ProcedureEditorIDs, procedureEditor.ID)
		}

		for _, procedureBlockedGroup := range groupWithPermissions.Edges.ProcedureBlockedGroups {
			groupInput.ProcedureBlockedGroupIDs = append(groupInput.ProcedureBlockedGroupIDs, procedureBlockedGroup.ID)
		}

		for _, narrativeViewer := range groupWithPermissions.Edges.NarrativeViewers {
			groupInput.NarrativeViewerIDs = append(groupInput.NarrativeViewerIDs, narrativeViewer.ID)
		}

		for _, narrativeEditor := range groupWithPermissions.Edges.NarrativeEditors {
			groupInput.NarrativeEditorIDs = append(groupInput.NarrativeEditorIDs, narrativeEditor.ID)
		}

		for _, narrativeBlockedGroup := range groupWithPermissions.Edges.NarrativeBlockedGroups {
			groupInput.NarrativeBlockedGroupIDs = append(groupInput.NarrativeBlockedGroupIDs, narrativeBlockedGroup.ID)
		}
	}

	res, err := withTransactionalMutation(ctx).Group.Create().SetInput(groupInput).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	if cloneGroupMembers != nil {
		existingMembers, err := res.Members(ctx)
		if err != nil {
			return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
		}

		if err := r.createGroupMembersViaClone(ctx, cloneGroupMembers, res.ID, existingMembers); err != nil {
			return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
		}
	}

	finalResult, err := withTransactionalMutation(ctx).Group.
		Query().
		WithMembers().
		Where(group.IDEQ(res.ID)).Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	return &model.GroupCreatePayload{
		Group: finalResult,
	}, nil
}

// CreateGroupSettings is the resolver for the createGroupSettings field.
func (r *createGroupInputResolver) CreateGroupSettings(ctx context.Context, obj *generated.CreateGroupInput, data *generated.CreateGroupSettingInput) error {
	c := withTransactionalMutation(ctx)

	groupSettings, err := c.GroupSetting.Create().SetInput(*data).Save(ctx)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	obj.SettingID = &groupSettings.ID

	return nil
}

// AddGroupMembers is the resolver for the addGroupMembers field.
func (r *updateGroupInputResolver) AddGroupMembers(ctx context.Context, obj *generated.UpdateGroupInput, data []*generated.CreateGroupMembershipInput) error {
	groupID := graphutils.GetStringInputVariableByName(ctx, "id")
	if groupID == nil {
		log.Error().Msg("unable to get group from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupMembershipCreate, len(data))
	for i := range data {
		input := *data[i]
		input.GroupID = *groupID
		builders[i] = c.GroupMembership.Create().SetInput(input)
	}

	_, err := c.GroupMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return parseRequestError(err, action{action: ActionUpdate, object: "group"})
	}

	return nil
}

// RemoveGroupMembers is the resolver for the removeGroupMembers field.
func (r *updateGroupInputResolver) RemoveGroupMembers(ctx context.Context, obj *generated.UpdateGroupInput, data []string) error {
	if len(data) == 0 {
		return nil
	}

	groupID := graphutils.GetStringInputVariableByName(ctx, "id")
	if groupID == nil {
		log.Error().Msg("unable to get group from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	for _, id := range data {
		if err := c.GroupMembership.DeleteOneID(id).
			Where(groupmembership.GroupID(*groupID)).
			Exec(ctx); err != nil {

			return parseRequestError(err, action{action: ActionUpdate, object: "group"})
		}
	}

	return nil
}

// UpdateGroupSettings is the resolver for the updateGroupSettings field.
func (r *updateGroupInputResolver) UpdateGroupSettings(ctx context.Context, obj *generated.UpdateGroupInput, data *generated.UpdateGroupSettingInput) error {
	groupID := graphutils.GetStringInputVariableByName(ctx, "id")
	if groupID == nil {
		log.Error().Msg("unable to get group from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	// get setting ID to update
	settingID := obj.SettingID
	if settingID == nil {
		group, err := c.Group.Get(ctx, *groupID)
		if err != nil {
			return parseRequestError(err, action{action: ActionUpdate, object: "group"})
		}

		setting, err := group.Setting(ctx)
		if err != nil {
			return parseRequestError(err, action{action: ActionUpdate, object: "group"})
		}

		settingID = &setting.ID
	}

	_, err := c.GroupSetting.UpdateOneID(*settingID).SetInput(*data).Save(ctx)
	if err != nil {
		return parseRequestError(err, action{action: ActionUpdate, object: "group"})
	}

	return nil
}

// InheritGroupPermissions is the resolver for the inheritGroupPermissions field.
func (r *updateGroupInputResolver) InheritGroupPermissions(ctx context.Context, obj *generated.UpdateGroupInput, data *string) error {
	// if data is nil, we don't need to do anything
	if data == nil {
		return nil
	}

	groupWithPermissions, err := getGroupByIDWithPermissionsEdges(ctx, data)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	for _, controlEditor := range groupWithPermissions.Edges.ControlEditors {
		obj.AddControlEditorIDs = append(obj.AddControlEditorIDs, controlEditor.ID)
	}

	for _, controlViewer := range groupWithPermissions.Edges.ControlViewers {
		obj.AddControlViewerIDs = append(obj.AddControlViewerIDs, controlViewer.ID)
	}

	for _, controlBlockedGroup := range groupWithPermissions.Edges.ControlBlockedGroups {
		obj.AddControlBlockedGroupIDs = append(obj.AddControlBlockedGroupIDs, controlBlockedGroup.ID)
	}

	for _, controlObjectiveEditor := range groupWithPermissions.Edges.ControlObjectiveEditors {
		obj.AddControlObjectiveEditorIDs = append(obj.AddControlObjectiveEditorIDs, controlObjectiveEditor.ID)
	}

	for _, controlObjectiveViewer := range groupWithPermissions.Edges.ControlObjectiveViewers {
		obj.AddControlObjectiveViewerIDs = append(obj.AddControlObjectiveViewerIDs, controlObjectiveViewer.ID)
	}

	for _, controlObjectiveBlockedGroup := range groupWithPermissions.Edges.ControlObjectiveBlockedGroups {
		obj.AddControlObjectiveBlockedGroupIDs = append(obj.AddControlObjectiveBlockedGroupIDs, controlObjectiveBlockedGroup.ID)
	}

	for _, programViewer := range groupWithPermissions.Edges.ProgramViewers {
		obj.AddProgramViewerIDs = append(obj.AddProgramViewerIDs, programViewer.ID)
	}

	for _, programEditor := range groupWithPermissions.Edges.ProgramEditors {
		obj.AddProgramEditorIDs = append(obj.AddProgramEditorIDs, programEditor.ID)
	}

	for _, programBlockedGroup := range groupWithPermissions.Edges.ProgramBlockedGroups {
		obj.AddProgramBlockedGroupIDs = append(obj.AddProgramBlockedGroupIDs, programBlockedGroup.ID)
	}

	for _, riskViewer := range groupWithPermissions.Edges.RiskViewers {
		obj.AddRiskViewerIDs = append(obj.AddRiskViewerIDs, riskViewer.ID)
	}

	for _, riskEditor := range groupWithPermissions.Edges.RiskEditors {
		obj.AddRiskEditorIDs = append(obj.AddRiskEditorIDs, riskEditor.ID)
	}

	for _, riskBlockedGroup := range groupWithPermissions.Edges.RiskBlockedGroups {
		obj.AddRiskBlockedGroupIDs = append(obj.AddRiskBlockedGroupIDs, riskBlockedGroup.ID)
	}

	for _, internalPolicyEditor := range groupWithPermissions.Edges.InternalPolicyEditors {
		obj.AddInternalPolicyEditorIDs = append(obj.AddInternalPolicyEditorIDs, internalPolicyEditor.ID)
	}

	for _, internalPolicyBlockedGroup := range groupWithPermissions.Edges.InternalPolicyBlockedGroups {
		obj.AddInternalPolicyBlockedGroupIDs = append(obj.AddInternalPolicyBlockedGroupIDs, internalPolicyBlockedGroup.ID)
	}

	for _, procedureEditor := range groupWithPermissions.Edges.ProcedureEditors {
		obj.AddProcedureEditorIDs = append(obj.AddProcedureEditorIDs, procedureEditor.ID)
	}

	for _, procedureBlockedGroup := range groupWithPermissions.Edges.ProcedureBlockedGroups {
		obj.AddProcedureBlockedGroupIDs = append(obj.AddProcedureBlockedGroupIDs, procedureBlockedGroup.ID)
	}

	for _, narrativeViewer := range groupWithPermissions.Edges.NarrativeViewers {
		obj.AddNarrativeViewerIDs = append(obj.AddNarrativeViewerIDs, narrativeViewer.ID)
	}

	for _, narrativeEditor := range groupWithPermissions.Edges.NarrativeEditors {
		obj.AddNarrativeEditorIDs = append(obj.AddNarrativeEditorIDs, narrativeEditor.ID)
	}

	for _, narrativeBlockedGroup := range groupWithPermissions.Edges.NarrativeBlockedGroups {
		obj.AddNarrativeBlockedGroupIDs = append(obj.AddNarrativeBlockedGroupIDs, narrativeBlockedGroup.ID)
	}

	return nil
}
