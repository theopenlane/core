package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateScheduledJobRun is the resolver for the createScheduledJobRun field.
func (r *mutationResolver) CreateScheduledJobRun(ctx context.Context, input generated.CreateScheduledJobRunInput) (*model.ScheduledJobRunCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).ScheduledJobRun.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "scheduledjobrun"})
	}

	return &model.ScheduledJobRunCreatePayload{
		ScheduledJobRun: res,
	}, nil
}

// UpdateScheduledJobRun is the resolver for the updateScheduledJobRun field.
func (r *mutationResolver) UpdateScheduledJobRun(ctx context.Context, id string, input generated.UpdateScheduledJobRunInput) (*model.ScheduledJobRunUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).ScheduledJobRun.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "scheduledjobrun"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "scheduledjobrun"})
	}

	return &model.ScheduledJobRunUpdatePayload{
		ScheduledJobRun: res,
	}, nil
}

// DeleteScheduledJobRun is the resolver for the deleteScheduledJobRun field.
func (r *mutationResolver) DeleteScheduledJobRun(ctx context.Context, id string) (*model.ScheduledJobRunDeletePayload, error) {
	if err := withTransactionalMutation(ctx).ScheduledJobRun.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "scheduledjobrun"})
	}

	if err := generated.ScheduledJobRunEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.ScheduledJobRunDeletePayload{
		DeletedID: id,
	}, nil
}

// ScheduledJobRun is the resolver for the scheduledJobRun field.
func (r *queryResolver) ScheduledJobRun(ctx context.Context, id string) (*generated.ScheduledJobRun, error) {
	query, err := withTransactionalMutation(ctx).ScheduledJobRun.Query().Where(scheduledjobrun.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "scheduledjobrun"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "scheduledjobrun"})
	}

	return res, nil
}
