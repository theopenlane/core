package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"errors"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/privacy"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/core/internal/graphutils"
	"github.com/theopenlane/utils/rout"
)

// CreateStandard is the resolver for the createStandard field.
func (r *mutationResolver) CreateStandard(ctx context.Context, input generated.CreateStandardInput) (*model.StandardCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("organization_id")
	}

	res, err := withTransactionalMutation(ctx).Standard.Create().SetInput(input).Save(ctx)
	if err != nil {
		// special case for standards which are system owned
		if errors.Is(err, privacy.Deny) {
			return nil, rout.ErrPermissionDenied
		}

		return nil, parseRequestError(err, action{action: ActionCreate, object: "standard"})
	}

	return &model.StandardCreatePayload{
		Standard: res,
	}, nil
}

// UpdateStandard is the resolver for the updateStandard field.
func (r *mutationResolver) UpdateStandard(ctx context.Context, id string, input generated.UpdateStandardInput) (*model.StandardUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Standard.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "standard"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "standard"})
	}

	return &model.StandardUpdatePayload{
		Standard: res,
	}, nil
}

// DeleteStandard is the resolver for the deleteStandard field.
func (r *mutationResolver) DeleteStandard(ctx context.Context, id string) (*model.StandardDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Standard.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "standard"})
	}

	if err := generated.StandardEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.StandardDeletePayload{
		DeletedID: id,
	}, nil
}

// Standard is the resolver for the standard field.
func (r *queryResolver) Standard(ctx context.Context, id string) (*generated.Standard, error) {
	query := withTransactionalMutation(ctx).Standard.Query().Where(standard.ID(id))

	if graphutils.CheckForRequestedField(ctx, generated.TypeControl) {
		query.WithNamedControls("controls", func(q *generated.ControlQuery) {
			filter := q.Where(control.StandardID(id))

			if graphutils.CheckForRequestedField(ctx, generated.TypeControlObjective) {
				filter.WithNamedControlObjectives("controlObjectives", func(q *generated.ControlObjectiveQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeSubcontrol) {
				filter.WithNamedSubcontrols("subcontrols", func(q *generated.SubcontrolQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeControlObjective) {
				filter.WithNamedControlObjectives("controlObjectives", func(q *generated.ControlObjectiveQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeMappedControl) {
				filter.WithMappedControls(func(q *generated.MappedControlQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeTask) {
				filter.WithNamedTasks("tasks", func(q *generated.TaskQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeRisk) {
				filter.WithNamedRisks("risks", func(q *generated.RiskQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeEvidence) {
				filter.WithNamedEvidence("evidence", func(q *generated.EvidenceQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeNarrative) {
				filter.WithNamedNarratives("narratives", func(q *generated.NarrativeQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeProcedure) {
				filter.WithNamedProcedures("procedures", func(q *generated.ProcedureQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeInternalPolicy) {
				filter.WithNamedInternalPolicies("internalPolicies", func(q *generated.InternalPolicyQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, generated.TypeActionPlan) {
				filter.WithNamedActionPlans("actionPlans", func(q *generated.ActionPlanQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, "controlOwner") {
				filter.WithControlOwner(func(q *generated.GroupQuery) {
					q.Limit(edgesResultsLimit)
				})
			}

			if graphutils.CheckForRequestedField(ctx, "delegate") {
				filter.WithDelegate(func(q *generated.GroupQuery) {
					q.Limit(edgesResultsLimit)
				})
			}
		})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "standard"})
	}

	return res, nil
}
