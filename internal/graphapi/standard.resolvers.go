package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// CreateStandard is the resolver for the createStandard field.
func (r *mutationResolver) CreateStandard(ctx context.Context, input generated.CreateStandardInput) (*StandardCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).Standard.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "standard"})
	}

	return &StandardCreatePayload{
		Standard: res,
	}, nil
}

// CreateBulkStandard is the resolver for the createBulkStandard field.
func (r *mutationResolver) CreateBulkStandard(ctx context.Context, input []*generated.CreateStandardInput) (*StandardBulkCreatePayload, error) {
	return r.bulkCreateStandard(ctx, input)
}

// CreateBulkCSVStandard is the resolver for the createBulkCSVStandard field.
func (r *mutationResolver) CreateBulkCSVStandard(ctx context.Context, input graphql.Upload) (*StandardBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateStandardInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateStandard(ctx, data)
}

// UpdateStandard is the resolver for the updateStandard field.
func (r *mutationResolver) UpdateStandard(ctx context.Context, id string, input generated.UpdateStandardInput) (*StandardUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Standard.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "standard"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "standard"})
	}

	return &StandardUpdatePayload{
		Standard: res,
	}, nil
}

// DeleteStandard is the resolver for the deleteStandard field.
func (r *mutationResolver) DeleteStandard(ctx context.Context, id string) (*StandardDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Standard.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "standard"})
	}

	if err := generated.StandardEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &StandardDeletePayload{
		DeletedID: id,
	}, nil
}

// Standard is the resolver for the standard field.
func (r *queryResolver) Standard(ctx context.Context, id string) (*generated.Standard, error) {
	res, err := withTransactionalMutation(ctx).Standard.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "standard"})
	}

	return res, nil
}
