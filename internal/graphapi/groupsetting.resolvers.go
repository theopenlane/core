package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
)

// CreateGroupSetting is the resolver for the createGroupSetting field.
func (r *mutationResolver) CreateGroupSetting(ctx context.Context, input generated.CreateGroupSettingInput) (*GroupSettingCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).GroupSetting.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "groupsetting"})
	}

	return &GroupSettingCreatePayload{
		GroupSetting: res,
	}, nil
}

// CreateBulkGroupSetting is the resolver for the createBulkGroupSetting field.
func (r *mutationResolver) CreateBulkGroupSetting(ctx context.Context, input []*generated.CreateGroupSettingInput) (*GroupSettingBulkCreatePayload, error) {
	return r.bulkCreateGroupSetting(ctx, input)
}

// CreateBulkCSVGroupSetting is the resolver for the createBulkCSVGroupSetting field.
func (r *mutationResolver) CreateBulkCSVGroupSetting(ctx context.Context, input graphql.Upload) (*GroupSettingBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateGroupSettingInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateGroupSetting(ctx, data)
}

// UpdateGroupSetting is the resolver for the updateGroupSetting field.
func (r *mutationResolver) UpdateGroupSetting(ctx context.Context, id string, input generated.UpdateGroupSettingInput) (*GroupSettingUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).GroupSetting.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "groupsetting"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "groupsetting"})
	}

	return &GroupSettingUpdatePayload{
		GroupSetting: res,
	}, nil
}

// DeleteGroupSetting is the resolver for the deleteGroupSetting field.
func (r *mutationResolver) DeleteGroupSetting(ctx context.Context, id string) (*GroupSettingDeletePayload, error) {
	if err := withTransactionalMutation(ctx).GroupSetting.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "groupsetting"})
	}

	if err := generated.GroupSettingEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &GroupSettingDeletePayload{
		DeletedID: id,
	}, nil
}

// GroupSetting is the resolver for the groupSetting field.
func (r *queryResolver) GroupSetting(ctx context.Context, id string) (*generated.GroupSetting, error) {
	res, err := withTransactionalMutation(ctx).GroupSetting.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "groupsetting"})
	}

	return res, nil
}
