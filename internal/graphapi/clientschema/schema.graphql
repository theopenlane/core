directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @hidden(if: Boolean) on OBJECT | FIELD_DEFINITION
type APIToken implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name associated with the token
	"""
	name: String!
	token: String!
	"""
	when the token expires
	"""
	expiresAt: Time
	"""
	a description of the token's purpose
	"""
	description: String
	scopes: [String!]
	lastUsedAt: Time
	owner: Organization
}
"""
Return response for createBulkAPIToken mutation
"""
type APITokenBulkCreatePayload {
	"""
	Created apiTokens
	"""
	apiTokens: [APIToken!]
}
"""
A connection to a list of items.
"""
type APITokenConnection {
	"""
	A list of edges.
	"""
	edges: [APITokenEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createAPIToken mutation
"""
type APITokenCreatePayload {
	"""
	Created apiToken
	"""
	apiToken: APIToken!
}
"""
Return response for deleteAPIToken mutation
"""
type APITokenDeletePayload {
	"""
	Deleted apiToken ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type APITokenEdge {
	"""
	The item at the end of the edge.
	"""
	node: APIToken
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type APITokenSearchResult {
	apiTokens: [APIToken!]
}
"""
Return response for updateAPIToken mutation
"""
type APITokenUpdatePayload {
	"""
	Updated apiToken
	"""
	apiToken: APIToken!
}
"""
APITokenWhereInput is used for filtering APIToken objects.
Input was generated by ent.
"""
input APITokenWhereInput {
	not: APITokenWhereInput
	and: [APITokenWhereInput!]
	or: [APITokenWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	expires_at field predicates
	"""
	expiresAt: Time
	expiresAtNEQ: Time
	expiresAtIn: [Time!]
	expiresAtNotIn: [Time!]
	expiresAtGT: Time
	expiresAtGTE: Time
	expiresAtLT: Time
	expiresAtLTE: Time
	expiresAtIsNil: Boolean
	expiresAtNotNil: Boolean
	"""
	last_used_at field predicates
	"""
	lastUsedAt: Time
	lastUsedAtNEQ: Time
	lastUsedAtIn: [Time!]
	lastUsedAtNotIn: [Time!]
	lastUsedAtGT: Time
	lastUsedAtGTE: Time
	lastUsedAtLT: Time
	lastUsedAtLTE: Time
	lastUsedAtIsNil: Boolean
	lastUsedAtNotNil: Boolean
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
}
type ActionPlan implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the action plan
	"""
	name: String!
	"""
	description of the action plan
	"""
	description: String
	"""
	status of the action plan
	"""
	status: String
	"""
	due date of the action plan
	"""
	dueDate: Time
	"""
	priority of the action plan
	"""
	priority: String
	"""
	source of the action plan
	"""
	source: String
	"""
	json data including details of the action plan
	"""
	details: Map
	standard: [Standard!]
	risk: [Risk!]
	control: [Control!]
	user: [User!]
	program: [Program!]
}
"""
Return response for createBulkActionPlan mutation
"""
type ActionPlanBulkCreatePayload {
	"""
	Created actionPlans
	"""
	actionPlans: [ActionPlan!]
}
"""
A connection to a list of items.
"""
type ActionPlanConnection {
	"""
	A list of edges.
	"""
	edges: [ActionPlanEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createActionPlan mutation
"""
type ActionPlanCreatePayload {
	"""
	Created actionPlan
	"""
	actionPlan: ActionPlan!
}
"""
Return response for deleteActionPlan mutation
"""
type ActionPlanDeletePayload {
	"""
	Deleted actionPlan ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type ActionPlanEdge {
	"""
	The item at the end of the edge.
	"""
	node: ActionPlan
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type ActionPlanHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: ActionPlanHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the action plan
	"""
	name: String!
	"""
	description of the action plan
	"""
	description: String
	"""
	status of the action plan
	"""
	status: String
	"""
	due date of the action plan
	"""
	dueDate: Time
	"""
	priority of the action plan
	"""
	priority: String
	"""
	source of the action plan
	"""
	source: String
	"""
	json data including details of the action plan
	"""
	details: Map
}
"""
A connection to a list of items.
"""
type ActionPlanHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [ActionPlanHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type ActionPlanHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: ActionPlanHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
ActionPlanHistoryOpType is enum for the field operation
"""
enum ActionPlanHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
ActionPlanHistoryWhereInput is used for filtering ActionPlanHistory objects.
Input was generated by ent.
"""
input ActionPlanHistoryWhereInput {
	not: ActionPlanHistoryWhereInput
	and: [ActionPlanHistoryWhereInput!]
	or: [ActionPlanHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: ActionPlanHistoryOpType
	operationNEQ: ActionPlanHistoryOpType
	operationIn: [ActionPlanHistoryOpType!]
	operationNotIn: [ActionPlanHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	due_date field predicates
	"""
	dueDate: Time
	dueDateNEQ: Time
	dueDateIn: [Time!]
	dueDateNotIn: [Time!]
	dueDateGT: Time
	dueDateGTE: Time
	dueDateLT: Time
	dueDateLTE: Time
	dueDateIsNil: Boolean
	dueDateNotNil: Boolean
	"""
	priority field predicates
	"""
	priority: String
	priorityNEQ: String
	priorityIn: [String!]
	priorityNotIn: [String!]
	priorityGT: String
	priorityGTE: String
	priorityLT: String
	priorityLTE: String
	priorityContains: String
	priorityHasPrefix: String
	priorityHasSuffix: String
	priorityIsNil: Boolean
	priorityNotNil: Boolean
	priorityEqualFold: String
	priorityContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
}
type ActionPlanSearchResult {
	actionPlans: [ActionPlan!]
}
"""
Return response for updateActionPlan mutation
"""
type ActionPlanUpdatePayload {
	"""
	Updated actionPlan
	"""
	actionPlan: ActionPlan!
}
"""
ActionPlanWhereInput is used for filtering ActionPlan objects.
Input was generated by ent.
"""
input ActionPlanWhereInput {
	not: ActionPlanWhereInput
	and: [ActionPlanWhereInput!]
	or: [ActionPlanWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	due_date field predicates
	"""
	dueDate: Time
	dueDateNEQ: Time
	dueDateIn: [Time!]
	dueDateNotIn: [Time!]
	dueDateGT: Time
	dueDateGTE: Time
	dueDateLT: Time
	dueDateLTE: Time
	dueDateIsNil: Boolean
	dueDateNotNil: Boolean
	"""
	priority field predicates
	"""
	priority: String
	priorityNEQ: String
	priorityIn: [String!]
	priorityNotIn: [String!]
	priorityGT: String
	priorityGTE: String
	priorityLT: String
	priorityLTE: String
	priorityContains: String
	priorityHasPrefix: String
	priorityHasSuffix: String
	priorityIsNil: Boolean
	priorityNotNil: Boolean
	priorityEqualFold: String
	priorityContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	standard edge predicates
	"""
	hasStandard: Boolean
	hasStandardWith: [StandardWhereInput!]
	"""
	risk edge predicates
	"""
	hasRisk: Boolean
	hasRiskWith: [RiskWhereInput!]
	"""
	control edge predicates
	"""
	hasControl: Boolean
	hasControlWith: [ControlWhereInput!]
	"""
	user edge predicates
	"""
	hasUser: Boolean
	hasUserWith: [UserWhereInput!]
	"""
	program edge predicates
	"""
	hasProgram: Boolean
	hasProgramWith: [ProgramWhereInput!]
}
scalar Address
type AuditLog implements Node {
	table: String
	time: Time
	id: ID!
	operation: String
	changes: [String!]
	updatedBy: ID
}
"""
A connection to a list of items.
"""
type AuditLogConnection {
	"""
	A list of edges.
	"""
	edges: [AuditLogEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type AuditLogEdge {
	"""
	The item at the end of the edge.
	"""
	node: AuditLog
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
input AuditLogWhereInput {
	refID: ID
	updatedBy: ID
	operation: String
	table: ID
	before: Time
	after: Time
}
type Contact implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the full name of the contact
	"""
	fullName: String!
	"""
	the title of the contact
	"""
	title: String
	"""
	the company of the contact
	"""
	company: String
	"""
	the email of the contact
	"""
	email: String
	"""
	the phone number of the contact
	"""
	phoneNumber: String
	"""
	the address of the contact
	"""
	address: String
	"""
	status of the contact
	"""
	status: ContactUserStatus!
	owner: Organization
	entities: [Entity!]
	files: [File!]
}
"""
Return response for createBulkContact mutation
"""
type ContactBulkCreatePayload {
	"""
	Created contacts
	"""
	contacts: [Contact!]
}
"""
A connection to a list of items.
"""
type ContactConnection {
	"""
	A list of edges.
	"""
	edges: [ContactEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createContact mutation
"""
type ContactCreatePayload {
	"""
	Created contact
	"""
	contact: Contact!
}
"""
Return response for deleteContact mutation
"""
type ContactDeletePayload {
	"""
	Deleted contact ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type ContactEdge {
	"""
	The item at the end of the edge.
	"""
	node: Contact
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type ContactHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: ContactHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the full name of the contact
	"""
	fullName: String!
	"""
	the title of the contact
	"""
	title: String
	"""
	the company of the contact
	"""
	company: String
	"""
	the email of the contact
	"""
	email: String
	"""
	the phone number of the contact
	"""
	phoneNumber: String
	"""
	the address of the contact
	"""
	address: String
	"""
	status of the contact
	"""
	status: ContactHistoryUserStatus!
}
"""
A connection to a list of items.
"""
type ContactHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [ContactHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type ContactHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: ContactHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
ContactHistoryOpType is enum for the field operation
"""
enum ContactHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
ContactHistoryUserStatus is enum for the field status
"""
enum ContactHistoryUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
	ACTIVE
	INACTIVE
	DEACTIVATED
	SUSPENDED
	ONBOARDING
}
"""
ContactHistoryWhereInput is used for filtering ContactHistory objects.
Input was generated by ent.
"""
input ContactHistoryWhereInput {
	not: ContactHistoryWhereInput
	and: [ContactHistoryWhereInput!]
	or: [ContactHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: ContactHistoryOpType
	operationNEQ: ContactHistoryOpType
	operationIn: [ContactHistoryOpType!]
	operationNotIn: [ContactHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	full_name field predicates
	"""
	fullName: String
	fullNameNEQ: String
	fullNameIn: [String!]
	fullNameNotIn: [String!]
	fullNameGT: String
	fullNameGTE: String
	fullNameLT: String
	fullNameLTE: String
	fullNameContains: String
	fullNameHasPrefix: String
	fullNameHasSuffix: String
	fullNameEqualFold: String
	fullNameContainsFold: String
	"""
	title field predicates
	"""
	title: String
	titleNEQ: String
	titleIn: [String!]
	titleNotIn: [String!]
	titleGT: String
	titleGTE: String
	titleLT: String
	titleLTE: String
	titleContains: String
	titleHasPrefix: String
	titleHasSuffix: String
	titleIsNil: Boolean
	titleNotNil: Boolean
	titleEqualFold: String
	titleContainsFold: String
	"""
	company field predicates
	"""
	company: String
	companyNEQ: String
	companyIn: [String!]
	companyNotIn: [String!]
	companyGT: String
	companyGTE: String
	companyLT: String
	companyLTE: String
	companyContains: String
	companyHasPrefix: String
	companyHasSuffix: String
	companyIsNil: Boolean
	companyNotNil: Boolean
	companyEqualFold: String
	companyContainsFold: String
	"""
	email field predicates
	"""
	email: String
	emailNEQ: String
	emailIn: [String!]
	emailNotIn: [String!]
	emailGT: String
	emailGTE: String
	emailLT: String
	emailLTE: String
	emailContains: String
	emailHasPrefix: String
	emailHasSuffix: String
	emailIsNil: Boolean
	emailNotNil: Boolean
	emailEqualFold: String
	emailContainsFold: String
	"""
	phone_number field predicates
	"""
	phoneNumber: String
	phoneNumberNEQ: String
	phoneNumberIn: [String!]
	phoneNumberNotIn: [String!]
	phoneNumberGT: String
	phoneNumberGTE: String
	phoneNumberLT: String
	phoneNumberLTE: String
	phoneNumberContains: String
	phoneNumberHasPrefix: String
	phoneNumberHasSuffix: String
	phoneNumberIsNil: Boolean
	phoneNumberNotNil: Boolean
	phoneNumberEqualFold: String
	phoneNumberContainsFold: String
	"""
	address field predicates
	"""
	address: String
	addressNEQ: String
	addressIn: [String!]
	addressNotIn: [String!]
	addressGT: String
	addressGTE: String
	addressLT: String
	addressLTE: String
	addressContains: String
	addressHasPrefix: String
	addressHasSuffix: String
	addressIsNil: Boolean
	addressNotNil: Boolean
	addressEqualFold: String
	addressContainsFold: String
	"""
	status field predicates
	"""
	status: ContactHistoryUserStatus
	statusNEQ: ContactHistoryUserStatus
	statusIn: [ContactHistoryUserStatus!]
	statusNotIn: [ContactHistoryUserStatus!]
}
type ContactSearchResult {
	contacts: [Contact!]
}
"""
Return response for updateContact mutation
"""
type ContactUpdatePayload {
	"""
	Updated contact
	"""
	contact: Contact!
}
"""
ContactUserStatus is enum for the field status
"""
enum ContactUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
	ACTIVE
	INACTIVE
	DEACTIVATED
	SUSPENDED
	ONBOARDING
}
"""
ContactWhereInput is used for filtering Contact objects.
Input was generated by ent.
"""
input ContactWhereInput {
	not: ContactWhereInput
	and: [ContactWhereInput!]
	or: [ContactWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	full_name field predicates
	"""
	fullName: String
	fullNameNEQ: String
	fullNameIn: [String!]
	fullNameNotIn: [String!]
	fullNameGT: String
	fullNameGTE: String
	fullNameLT: String
	fullNameLTE: String
	fullNameContains: String
	fullNameHasPrefix: String
	fullNameHasSuffix: String
	fullNameEqualFold: String
	fullNameContainsFold: String
	"""
	title field predicates
	"""
	title: String
	titleNEQ: String
	titleIn: [String!]
	titleNotIn: [String!]
	titleGT: String
	titleGTE: String
	titleLT: String
	titleLTE: String
	titleContains: String
	titleHasPrefix: String
	titleHasSuffix: String
	titleIsNil: Boolean
	titleNotNil: Boolean
	titleEqualFold: String
	titleContainsFold: String
	"""
	company field predicates
	"""
	company: String
	companyNEQ: String
	companyIn: [String!]
	companyNotIn: [String!]
	companyGT: String
	companyGTE: String
	companyLT: String
	companyLTE: String
	companyContains: String
	companyHasPrefix: String
	companyHasSuffix: String
	companyIsNil: Boolean
	companyNotNil: Boolean
	companyEqualFold: String
	companyContainsFold: String
	"""
	email field predicates
	"""
	email: String
	emailNEQ: String
	emailIn: [String!]
	emailNotIn: [String!]
	emailGT: String
	emailGTE: String
	emailLT: String
	emailLTE: String
	emailContains: String
	emailHasPrefix: String
	emailHasSuffix: String
	emailIsNil: Boolean
	emailNotNil: Boolean
	emailEqualFold: String
	emailContainsFold: String
	"""
	phone_number field predicates
	"""
	phoneNumber: String
	phoneNumberNEQ: String
	phoneNumberIn: [String!]
	phoneNumberNotIn: [String!]
	phoneNumberGT: String
	phoneNumberGTE: String
	phoneNumberLT: String
	phoneNumberLTE: String
	phoneNumberContains: String
	phoneNumberHasPrefix: String
	phoneNumberHasSuffix: String
	phoneNumberIsNil: Boolean
	phoneNumberNotNil: Boolean
	phoneNumberEqualFold: String
	phoneNumberContainsFold: String
	"""
	address field predicates
	"""
	address: String
	addressNEQ: String
	addressIn: [String!]
	addressNotIn: [String!]
	addressGT: String
	addressGTE: String
	addressLT: String
	addressLTE: String
	addressContains: String
	addressHasPrefix: String
	addressHasSuffix: String
	addressIsNil: Boolean
	addressNotNil: Boolean
	addressEqualFold: String
	addressContainsFold: String
	"""
	status field predicates
	"""
	status: ContactUserStatus
	statusNEQ: ContactUserStatus
	statusIn: [ContactUserStatus!]
	statusNotIn: [ContactUserStatus!]
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	entities edge predicates
	"""
	hasEntities: Boolean
	hasEntitiesWith: [EntityWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
}
type Control implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the name of the control
	"""
	name: String!
	"""
	description of the control
	"""
	description: String
	"""
	status of the control
	"""
	status: String
	"""
	type of the control
	"""
	controlType: String
	"""
	version of the control
	"""
	version: String
	"""
	control number or identifier
	"""
	controlNumber: String
	"""
	family associated with the control
	"""
	family: String
	"""
	class associated with the control
	"""
	class: String
	"""
	source of the control, e.g. framework, template, custom, etc.
	"""
	source: String
	"""
	which control objectives are satisfied by the control
	"""
	satisfies: String
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	"""
	json data including details of the control
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	owner: Organization
	"""
	groups that are blocked from viewing or editing the risk
	"""
	blockedGroups: [Group!]
	"""
	provides edit access to the risk to members of the group
	"""
	editors: [Group!]
	"""
	provides view access to the risk to members of the group
	"""
	viewers: [Group!]
	procedures: [Procedure!]
	subcontrols: [Subcontrol!]
	controlObjectives: [ControlObjective!]
	standard: [Standard!]
	narratives: [Narrative!]
	risks: [Risk!]
	actionPlans: [ActionPlan!]
	tasks: [Task!]
	programs: [Program!]
	evidence: [Evidence!]
}
"""
Return response for createBulkControl mutation
"""
type ControlBulkCreatePayload {
	"""
	Created controls
	"""
	controls: [Control!]
}
"""
A connection to a list of items.
"""
type ControlConnection {
	"""
	A list of edges.
	"""
	edges: [ControlEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createControl mutation
"""
type ControlCreatePayload {
	"""
	Created control
	"""
	control: Control!
}
"""
Return response for deleteControl mutation
"""
type ControlDeletePayload {
	"""
	Deleted control ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type ControlEdge {
	"""
	The item at the end of the edge.
	"""
	node: Control
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type ControlHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: ControlHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the name of the control
	"""
	name: String!
	"""
	description of the control
	"""
	description: String
	"""
	status of the control
	"""
	status: String
	"""
	type of the control
	"""
	controlType: String
	"""
	version of the control
	"""
	version: String
	"""
	control number or identifier
	"""
	controlNumber: String
	"""
	family associated with the control
	"""
	family: String
	"""
	class associated with the control
	"""
	class: String
	"""
	source of the control, e.g. framework, template, custom, etc.
	"""
	source: String
	"""
	which control objectives are satisfied by the control
	"""
	satisfies: String
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	"""
	json data including details of the control
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
}
"""
A connection to a list of items.
"""
type ControlHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [ControlHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type ControlHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: ControlHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
ControlHistoryOpType is enum for the field operation
"""
enum ControlHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
ControlHistoryWhereInput is used for filtering ControlHistory objects.
Input was generated by ent.
"""
input ControlHistoryWhereInput {
	not: ControlHistoryWhereInput
	and: [ControlHistoryWhereInput!]
	or: [ControlHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: ControlHistoryOpType
	operationNEQ: ControlHistoryOpType
	operationIn: [ControlHistoryOpType!]
	operationNotIn: [ControlHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	control_type field predicates
	"""
	controlType: String
	controlTypeNEQ: String
	controlTypeIn: [String!]
	controlTypeNotIn: [String!]
	controlTypeGT: String
	controlTypeGTE: String
	controlTypeLT: String
	controlTypeLTE: String
	controlTypeContains: String
	controlTypeHasPrefix: String
	controlTypeHasSuffix: String
	controlTypeIsNil: Boolean
	controlTypeNotNil: Boolean
	controlTypeEqualFold: String
	controlTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	control_number field predicates
	"""
	controlNumber: String
	controlNumberNEQ: String
	controlNumberIn: [String!]
	controlNumberNotIn: [String!]
	controlNumberGT: String
	controlNumberGTE: String
	controlNumberLT: String
	controlNumberLTE: String
	controlNumberContains: String
	controlNumberHasPrefix: String
	controlNumberHasSuffix: String
	controlNumberIsNil: Boolean
	controlNumberNotNil: Boolean
	controlNumberEqualFold: String
	controlNumberContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	class field predicates
	"""
	class: String
	classNEQ: String
	classIn: [String!]
	classNotIn: [String!]
	classGT: String
	classGTE: String
	classLT: String
	classLTE: String
	classContains: String
	classHasPrefix: String
	classHasSuffix: String
	classIsNil: Boolean
	classNotNil: Boolean
	classEqualFold: String
	classContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
	"""
	mapped_frameworks field predicates
	"""
	mappedFrameworks: String
	mappedFrameworksNEQ: String
	mappedFrameworksIn: [String!]
	mappedFrameworksNotIn: [String!]
	mappedFrameworksGT: String
	mappedFrameworksGTE: String
	mappedFrameworksLT: String
	mappedFrameworksLTE: String
	mappedFrameworksContains: String
	mappedFrameworksHasPrefix: String
	mappedFrameworksHasSuffix: String
	mappedFrameworksIsNil: Boolean
	mappedFrameworksNotNil: Boolean
	mappedFrameworksEqualFold: String
	mappedFrameworksContainsFold: String
	"""
	example_evidence field predicates
	"""
	exampleEvidence: String
	exampleEvidenceNEQ: String
	exampleEvidenceIn: [String!]
	exampleEvidenceNotIn: [String!]
	exampleEvidenceGT: String
	exampleEvidenceGTE: String
	exampleEvidenceLT: String
	exampleEvidenceLTE: String
	exampleEvidenceContains: String
	exampleEvidenceHasPrefix: String
	exampleEvidenceHasSuffix: String
	exampleEvidenceIsNil: Boolean
	exampleEvidenceNotNil: Boolean
	exampleEvidenceEqualFold: String
	exampleEvidenceContainsFold: String
}
type ControlObjective implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the name of the control objective
	"""
	name: String!
	"""
	description of the control objective
	"""
	description: String
	"""
	status of the control objective
	"""
	status: String
	"""
	type of the control objective
	"""
	controlObjectiveType: String
	"""
	version of the control objective
	"""
	version: String
	"""
	number of the control objective
	"""
	controlNumber: String
	"""
	family of the control objective
	"""
	family: String
	"""
	class associated with the control objective
	"""
	class: String
	"""
	source of the control objective, e.g. framework, template, user-defined, etc.
	"""
	source: String
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	"""
	json data including details of the control objective
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	owner: Organization
	"""
	groups that are blocked from viewing or editing the risk
	"""
	blockedGroups: [Group!]
	"""
	provides edit access to the risk to members of the group
	"""
	editors: [Group!]
	"""
	provides view access to the risk to members of the group
	"""
	viewers: [Group!]
	internalPolicies: [InternalPolicy!]
	controls: [Control!]
	procedures: [Procedure!]
	risks: [Risk!]
	subcontrols: [Subcontrol!]
	standard: [Standard!]
	narratives: [Narrative!]
	tasks: [Task!]
	programs: [Program!]
	evidence: [Evidence!]
}
"""
Return response for createBulkControlObjective mutation
"""
type ControlObjectiveBulkCreatePayload {
	"""
	Created controlObjectives
	"""
	controlObjectives: [ControlObjective!]
}
"""
A connection to a list of items.
"""
type ControlObjectiveConnection {
	"""
	A list of edges.
	"""
	edges: [ControlObjectiveEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createControlObjective mutation
"""
type ControlObjectiveCreatePayload {
	"""
	Created controlObjective
	"""
	controlObjective: ControlObjective!
}
"""
Return response for deleteControlObjective mutation
"""
type ControlObjectiveDeletePayload {
	"""
	Deleted controlObjective ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type ControlObjectiveEdge {
	"""
	The item at the end of the edge.
	"""
	node: ControlObjective
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type ControlObjectiveHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: ControlObjectiveHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the name of the control objective
	"""
	name: String!
	"""
	description of the control objective
	"""
	description: String
	"""
	status of the control objective
	"""
	status: String
	"""
	type of the control objective
	"""
	controlObjectiveType: String
	"""
	version of the control objective
	"""
	version: String
	"""
	number of the control objective
	"""
	controlNumber: String
	"""
	family of the control objective
	"""
	family: String
	"""
	class associated with the control objective
	"""
	class: String
	"""
	source of the control objective, e.g. framework, template, user-defined, etc.
	"""
	source: String
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	"""
	json data including details of the control objective
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
}
"""
A connection to a list of items.
"""
type ControlObjectiveHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [ControlObjectiveHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type ControlObjectiveHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: ControlObjectiveHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
ControlObjectiveHistoryOpType is enum for the field operation
"""
enum ControlObjectiveHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
ControlObjectiveHistoryWhereInput is used for filtering ControlObjectiveHistory objects.
Input was generated by ent.
"""
input ControlObjectiveHistoryWhereInput {
	not: ControlObjectiveHistoryWhereInput
	and: [ControlObjectiveHistoryWhereInput!]
	or: [ControlObjectiveHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: ControlObjectiveHistoryOpType
	operationNEQ: ControlObjectiveHistoryOpType
	operationIn: [ControlObjectiveHistoryOpType!]
	operationNotIn: [ControlObjectiveHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	control_objective_type field predicates
	"""
	controlObjectiveType: String
	controlObjectiveTypeNEQ: String
	controlObjectiveTypeIn: [String!]
	controlObjectiveTypeNotIn: [String!]
	controlObjectiveTypeGT: String
	controlObjectiveTypeGTE: String
	controlObjectiveTypeLT: String
	controlObjectiveTypeLTE: String
	controlObjectiveTypeContains: String
	controlObjectiveTypeHasPrefix: String
	controlObjectiveTypeHasSuffix: String
	controlObjectiveTypeIsNil: Boolean
	controlObjectiveTypeNotNil: Boolean
	controlObjectiveTypeEqualFold: String
	controlObjectiveTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	control_number field predicates
	"""
	controlNumber: String
	controlNumberNEQ: String
	controlNumberIn: [String!]
	controlNumberNotIn: [String!]
	controlNumberGT: String
	controlNumberGTE: String
	controlNumberLT: String
	controlNumberLTE: String
	controlNumberContains: String
	controlNumberHasPrefix: String
	controlNumberHasSuffix: String
	controlNumberIsNil: Boolean
	controlNumberNotNil: Boolean
	controlNumberEqualFold: String
	controlNumberContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	class field predicates
	"""
	class: String
	classNEQ: String
	classIn: [String!]
	classNotIn: [String!]
	classGT: String
	classGTE: String
	classLT: String
	classLTE: String
	classContains: String
	classHasPrefix: String
	classHasSuffix: String
	classIsNil: Boolean
	classNotNil: Boolean
	classEqualFold: String
	classContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	mapped_frameworks field predicates
	"""
	mappedFrameworks: String
	mappedFrameworksNEQ: String
	mappedFrameworksIn: [String!]
	mappedFrameworksNotIn: [String!]
	mappedFrameworksGT: String
	mappedFrameworksGTE: String
	mappedFrameworksLT: String
	mappedFrameworksLTE: String
	mappedFrameworksContains: String
	mappedFrameworksHasPrefix: String
	mappedFrameworksHasSuffix: String
	mappedFrameworksIsNil: Boolean
	mappedFrameworksNotNil: Boolean
	mappedFrameworksEqualFold: String
	mappedFrameworksContainsFold: String
	"""
	example_evidence field predicates
	"""
	exampleEvidence: String
	exampleEvidenceNEQ: String
	exampleEvidenceIn: [String!]
	exampleEvidenceNotIn: [String!]
	exampleEvidenceGT: String
	exampleEvidenceGTE: String
	exampleEvidenceLT: String
	exampleEvidenceLTE: String
	exampleEvidenceContains: String
	exampleEvidenceHasPrefix: String
	exampleEvidenceHasSuffix: String
	exampleEvidenceIsNil: Boolean
	exampleEvidenceNotNil: Boolean
	exampleEvidenceEqualFold: String
	exampleEvidenceContainsFold: String
}
type ControlObjectiveSearchResult {
	controlObjectives: [ControlObjective!]
}
"""
Return response for updateControlObjective mutation
"""
type ControlObjectiveUpdatePayload {
	"""
	Updated controlObjective
	"""
	controlObjective: ControlObjective!
}
"""
ControlObjectiveWhereInput is used for filtering ControlObjective objects.
Input was generated by ent.
"""
input ControlObjectiveWhereInput {
	not: ControlObjectiveWhereInput
	and: [ControlObjectiveWhereInput!]
	or: [ControlObjectiveWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	control_objective_type field predicates
	"""
	controlObjectiveType: String
	controlObjectiveTypeNEQ: String
	controlObjectiveTypeIn: [String!]
	controlObjectiveTypeNotIn: [String!]
	controlObjectiveTypeGT: String
	controlObjectiveTypeGTE: String
	controlObjectiveTypeLT: String
	controlObjectiveTypeLTE: String
	controlObjectiveTypeContains: String
	controlObjectiveTypeHasPrefix: String
	controlObjectiveTypeHasSuffix: String
	controlObjectiveTypeIsNil: Boolean
	controlObjectiveTypeNotNil: Boolean
	controlObjectiveTypeEqualFold: String
	controlObjectiveTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	control_number field predicates
	"""
	controlNumber: String
	controlNumberNEQ: String
	controlNumberIn: [String!]
	controlNumberNotIn: [String!]
	controlNumberGT: String
	controlNumberGTE: String
	controlNumberLT: String
	controlNumberLTE: String
	controlNumberContains: String
	controlNumberHasPrefix: String
	controlNumberHasSuffix: String
	controlNumberIsNil: Boolean
	controlNumberNotNil: Boolean
	controlNumberEqualFold: String
	controlNumberContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	class field predicates
	"""
	class: String
	classNEQ: String
	classIn: [String!]
	classNotIn: [String!]
	classGT: String
	classGTE: String
	classLT: String
	classLTE: String
	classContains: String
	classHasPrefix: String
	classHasSuffix: String
	classIsNil: Boolean
	classNotNil: Boolean
	classEqualFold: String
	classContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	mapped_frameworks field predicates
	"""
	mappedFrameworks: String
	mappedFrameworksNEQ: String
	mappedFrameworksIn: [String!]
	mappedFrameworksNotIn: [String!]
	mappedFrameworksGT: String
	mappedFrameworksGTE: String
	mappedFrameworksLT: String
	mappedFrameworksLTE: String
	mappedFrameworksContains: String
	mappedFrameworksHasPrefix: String
	mappedFrameworksHasSuffix: String
	mappedFrameworksIsNil: Boolean
	mappedFrameworksNotNil: Boolean
	mappedFrameworksEqualFold: String
	mappedFrameworksContainsFold: String
	"""
	example_evidence field predicates
	"""
	exampleEvidence: String
	exampleEvidenceNEQ: String
	exampleEvidenceIn: [String!]
	exampleEvidenceNotIn: [String!]
	exampleEvidenceGT: String
	exampleEvidenceGTE: String
	exampleEvidenceLT: String
	exampleEvidenceLTE: String
	exampleEvidenceContains: String
	exampleEvidenceHasPrefix: String
	exampleEvidenceHasSuffix: String
	exampleEvidenceIsNil: Boolean
	exampleEvidenceNotNil: Boolean
	exampleEvidenceEqualFold: String
	exampleEvidenceContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	blocked_groups edge predicates
	"""
	hasBlockedGroups: Boolean
	hasBlockedGroupsWith: [GroupWhereInput!]
	"""
	editors edge predicates
	"""
	hasEditors: Boolean
	hasEditorsWith: [GroupWhereInput!]
	"""
	viewers edge predicates
	"""
	hasViewers: Boolean
	hasViewersWith: [GroupWhereInput!]
	"""
	internal_policies edge predicates
	"""
	hasInternalPolicies: Boolean
	hasInternalPoliciesWith: [InternalPolicyWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	procedures edge predicates
	"""
	hasProcedures: Boolean
	hasProceduresWith: [ProcedureWhereInput!]
	"""
	risks edge predicates
	"""
	hasRisks: Boolean
	hasRisksWith: [RiskWhereInput!]
	"""
	subcontrols edge predicates
	"""
	hasSubcontrols: Boolean
	hasSubcontrolsWith: [SubcontrolWhereInput!]
	"""
	standard edge predicates
	"""
	hasStandard: Boolean
	hasStandardWith: [StandardWhereInput!]
	"""
	narratives edge predicates
	"""
	hasNarratives: Boolean
	hasNarrativesWith: [NarrativeWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
	"""
	evidence edge predicates
	"""
	hasEvidence: Boolean
	hasEvidenceWith: [EvidenceWhereInput!]
}
type ControlSearchResult {
	controls: [Control!]
}
"""
Return response for updateControl mutation
"""
type ControlUpdatePayload {
	"""
	Updated control
	"""
	control: Control!
}
"""
ControlWhereInput is used for filtering Control objects.
Input was generated by ent.
"""
input ControlWhereInput {
	not: ControlWhereInput
	and: [ControlWhereInput!]
	or: [ControlWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	control_type field predicates
	"""
	controlType: String
	controlTypeNEQ: String
	controlTypeIn: [String!]
	controlTypeNotIn: [String!]
	controlTypeGT: String
	controlTypeGTE: String
	controlTypeLT: String
	controlTypeLTE: String
	controlTypeContains: String
	controlTypeHasPrefix: String
	controlTypeHasSuffix: String
	controlTypeIsNil: Boolean
	controlTypeNotNil: Boolean
	controlTypeEqualFold: String
	controlTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	control_number field predicates
	"""
	controlNumber: String
	controlNumberNEQ: String
	controlNumberIn: [String!]
	controlNumberNotIn: [String!]
	controlNumberGT: String
	controlNumberGTE: String
	controlNumberLT: String
	controlNumberLTE: String
	controlNumberContains: String
	controlNumberHasPrefix: String
	controlNumberHasSuffix: String
	controlNumberIsNil: Boolean
	controlNumberNotNil: Boolean
	controlNumberEqualFold: String
	controlNumberContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	class field predicates
	"""
	class: String
	classNEQ: String
	classIn: [String!]
	classNotIn: [String!]
	classGT: String
	classGTE: String
	classLT: String
	classLTE: String
	classContains: String
	classHasPrefix: String
	classHasSuffix: String
	classIsNil: Boolean
	classNotNil: Boolean
	classEqualFold: String
	classContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
	"""
	mapped_frameworks field predicates
	"""
	mappedFrameworks: String
	mappedFrameworksNEQ: String
	mappedFrameworksIn: [String!]
	mappedFrameworksNotIn: [String!]
	mappedFrameworksGT: String
	mappedFrameworksGTE: String
	mappedFrameworksLT: String
	mappedFrameworksLTE: String
	mappedFrameworksContains: String
	mappedFrameworksHasPrefix: String
	mappedFrameworksHasSuffix: String
	mappedFrameworksIsNil: Boolean
	mappedFrameworksNotNil: Boolean
	mappedFrameworksEqualFold: String
	mappedFrameworksContainsFold: String
	"""
	example_evidence field predicates
	"""
	exampleEvidence: String
	exampleEvidenceNEQ: String
	exampleEvidenceIn: [String!]
	exampleEvidenceNotIn: [String!]
	exampleEvidenceGT: String
	exampleEvidenceGTE: String
	exampleEvidenceLT: String
	exampleEvidenceLTE: String
	exampleEvidenceContains: String
	exampleEvidenceHasPrefix: String
	exampleEvidenceHasSuffix: String
	exampleEvidenceIsNil: Boolean
	exampleEvidenceNotNil: Boolean
	exampleEvidenceEqualFold: String
	exampleEvidenceContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	blocked_groups edge predicates
	"""
	hasBlockedGroups: Boolean
	hasBlockedGroupsWith: [GroupWhereInput!]
	"""
	editors edge predicates
	"""
	hasEditors: Boolean
	hasEditorsWith: [GroupWhereInput!]
	"""
	viewers edge predicates
	"""
	hasViewers: Boolean
	hasViewersWith: [GroupWhereInput!]
	"""
	procedures edge predicates
	"""
	hasProcedures: Boolean
	hasProceduresWith: [ProcedureWhereInput!]
	"""
	subcontrols edge predicates
	"""
	hasSubcontrols: Boolean
	hasSubcontrolsWith: [SubcontrolWhereInput!]
	"""
	control_objectives edge predicates
	"""
	hasControlObjectives: Boolean
	hasControlObjectivesWith: [ControlObjectiveWhereInput!]
	"""
	standard edge predicates
	"""
	hasStandard: Boolean
	hasStandardWith: [StandardWhereInput!]
	"""
	narratives edge predicates
	"""
	hasNarratives: Boolean
	hasNarrativesWith: [NarrativeWhereInput!]
	"""
	risks edge predicates
	"""
	hasRisks: Boolean
	hasRisksWith: [RiskWhereInput!]
	"""
	action_plans edge predicates
	"""
	hasActionPlans: Boolean
	hasActionPlansWith: [ActionPlanWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
	"""
	evidence edge predicates
	"""
	hasEvidence: Boolean
	hasEvidenceWith: [EvidenceWhereInput!]
}
"""
CreateAPITokenInput is used for create APIToken object.
Input was generated by ent.
"""
input CreateAPITokenInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name associated with the token
	"""
	name: String!
	"""
	when the token expires
	"""
	expiresAt: Time
	"""
	a description of the token's purpose
	"""
	description: String
	scopes: [String!]
	lastUsedAt: Time
	ownerID: ID
}
"""
CreateActionPlanInput is used for create ActionPlan object.
Input was generated by ent.
"""
input CreateActionPlanInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the action plan
	"""
	name: String!
	"""
	description of the action plan
	"""
	description: String
	"""
	status of the action plan
	"""
	status: String
	"""
	due date of the action plan
	"""
	dueDate: Time
	"""
	priority of the action plan
	"""
	priority: String
	"""
	source of the action plan
	"""
	source: String
	"""
	json data including details of the action plan
	"""
	details: Map
	standardIDs: [ID!]
	riskIDs: [ID!]
	controlIDs: [ID!]
	userIDs: [ID!]
	programIDs: [ID!]
}
"""
CreateContactInput is used for create Contact object.
Input was generated by ent.
"""
input CreateContactInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the full name of the contact
	"""
	fullName: String!
	"""
	the title of the contact
	"""
	title: String
	"""
	the company of the contact
	"""
	company: String
	"""
	the email of the contact
	"""
	email: String
	"""
	the phone number of the contact
	"""
	phoneNumber: String
	"""
	the address of the contact
	"""
	address: String
	"""
	status of the contact
	"""
	status: ContactUserStatus
	ownerID: ID
	entityIDs: [ID!]
	fileIDs: [ID!]
}
"""
CreateControlInput is used for create Control object.
Input was generated by ent.
"""
input CreateControlInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the control
	"""
	name: String!
	"""
	description of the control
	"""
	description: String
	"""
	status of the control
	"""
	status: String
	"""
	type of the control
	"""
	controlType: String
	"""
	version of the control
	"""
	version: String
	"""
	control number or identifier
	"""
	controlNumber: String
	"""
	family associated with the control
	"""
	family: String
	"""
	class associated with the control
	"""
	class: String
	"""
	source of the control, e.g. framework, template, custom, etc.
	"""
	source: String
	"""
	which control objectives are satisfied by the control
	"""
	satisfies: String
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	"""
	json data including details of the control
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	ownerID: ID
	blockedGroupIDs: [ID!]
	editorIDs: [ID!]
	viewerIDs: [ID!]
	procedureIDs: [ID!]
	subcontrolIDs: [ID!]
	controlObjectiveIDs: [ID!]
	standardIDs: [ID!]
	narrativeIDs: [ID!]
	riskIDs: [ID!]
	actionPlanIDs: [ID!]
	taskIDs: [ID!]
	programIDs: [ID!]
	evidenceIDs: [ID!]
}
"""
CreateControlObjectiveInput is used for create ControlObjective object.
Input was generated by ent.
"""
input CreateControlObjectiveInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the control objective
	"""
	name: String!
	"""
	description of the control objective
	"""
	description: String
	"""
	status of the control objective
	"""
	status: String
	"""
	type of the control objective
	"""
	controlObjectiveType: String
	"""
	version of the control objective
	"""
	version: String
	"""
	number of the control objective
	"""
	controlNumber: String
	"""
	family of the control objective
	"""
	family: String
	"""
	class associated with the control objective
	"""
	class: String
	"""
	source of the control objective, e.g. framework, template, user-defined, etc.
	"""
	source: String
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	"""
	json data including details of the control objective
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	ownerID: ID
	blockedGroupIDs: [ID!]
	editorIDs: [ID!]
	viewerIDs: [ID!]
	internalPolicyIDs: [ID!]
	controlIDs: [ID!]
	procedureIDs: [ID!]
	riskIDs: [ID!]
	subcontrolIDs: [ID!]
	standardIDs: [ID!]
	narrativeIDs: [ID!]
	taskIDs: [ID!]
	programIDs: [ID!]
	evidenceIDs: [ID!]
}
input CreateControlWithSubcontrolsInput {
	control: CreateControlInput
	subcontrols: [CreateSubcontrolInput!]
}
"""
CreateDocumentDataInput is used for create DocumentData object.
Input was generated by ent.
"""
input CreateDocumentDataInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the json data of the document
	"""
	data: JSON!
	ownerID: ID
	templateID: ID!
	entityIDs: [ID!]
	fileIDs: [ID!]
}
"""
CreateEntityInput is used for create Entity object.
Input was generated by ent.
"""
input CreateEntityInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the entity
	"""
	name: String
	"""
	The entity's displayed 'friendly' name
	"""
	displayName: String
	"""
	An optional description of the entity
	"""
	description: String
	"""
	domains associated with the entity
	"""
	domains: [String!]
	"""
	status of the entity
	"""
	status: String
	ownerID: ID
	contactIDs: [ID!]
	documentIDs: [ID!]
	noteIDs: [ID!]
	fileIDs: [ID!]
	entityTypeID: ID
	note: CreateNoteInput
}
"""
CreateEntityTypeInput is used for create EntityType object.
Input was generated by ent.
"""
input CreateEntityTypeInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the entity
	"""
	name: String!
	ownerID: ID
	entityIDs: [ID!]
}
"""
CreateEventInput is used for create Event object.
Input was generated by ent.
"""
input CreateEventInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	eventID: String
	correlationID: String
	eventType: String!
	metadata: Map
	userIDs: [ID!]
	groupIDs: [ID!]
	integrationIDs: [ID!]
	organizationIDs: [ID!]
	inviteIDs: [ID!]
	personalAccessTokenIDs: [ID!]
	hushIDs: [ID!]
	subscriberIDs: [ID!]
	fileIDs: [ID!]
}
"""
CreateEvidenceInput is used for create Evidence object.
Input was generated by ent.
"""
input CreateEvidenceInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the evidence
	"""
	name: String!
	"""
	the description of the evidence, what is contained in the uploaded file(s) or url(s)
	"""
	description: String
	"""
	description of how the evidence was collected
	"""
	collectionProcedure: String
	"""
	the date the evidence was retrieved
	"""
	creationDate: Time
	"""
	the date the evidence should be renewed, defaults to a year from entry date
	"""
	renewalDate: Time
	"""
	the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
	"""
	source: String
	"""
	whether the evidence was automatically generated
	"""
	isAutomated: Boolean
	"""
	the url of the evidence if not uploaded directly to the system
	"""
	url: String
	ownerID: ID
	controlObjectiveIDs: [ID!]
	controlIDs: [ID!]
	subcontrolIDs: [ID!]
	fileIDs: [ID!]
	programIDs: [ID!]
	taskIDs: [ID!]
}
"""
CreateFileInput is used for create File object.
Input was generated by ent.
"""
input CreateFileInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the file provided in the payload key without the extension
	"""
	providedFileName: String!
	"""
	the extension of the file provided
	"""
	providedFileExtension: String!
	"""
	the computed size of the file in the original http request
	"""
	providedFileSize: Int
	persistedFileSize: Int
	"""
	the mime type detected by the system
	"""
	detectedMimeType: String
	"""
	the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
	"""
	md5Hash: String
	"""
	the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
	"""
	detectedContentType: String!
	"""
	the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
	"""
	storeKey: String
	"""
	the category type of the file, if any (e.g. evidence, invoice, etc.)
	"""
	categoryType: String
	"""
	the full URI of the file
	"""
	uri: String
	"""
	the storage scheme of the file, e.g. file://, s3://, etc.
	"""
	storageScheme: String
	"""
	the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
	"""
	storageVolume: String
	"""
	the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
	"""
	storagePath: String
	userIDs: [ID!]
	organizationIDs: [ID!]
	groupIDs: [ID!]
	contactIDs: [ID!]
	entityIDs: [ID!]
	userSettingIDs: [ID!]
	organizationSettingIDs: [ID!]
	templateIDs: [ID!]
	documentDatumIDs: [ID!]
	eventIDs: [ID!]
	programIDs: [ID!]
	evidenceIDs: [ID!]
}
input CreateFullProgramInput {
	program: CreateProgramInput!
	standard: CreateStandardInput!
	controls: [CreateControlWithSubcontrolsInput!]
	risks: [CreateRiskInput!]
	internalPolicies: [CreateInternalPolicyInput!]
	procedures: [CreateProcedureInput!]
	members: [CreateMemberWithProgramInput!]
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the group - must be unique within the organization
	"""
	name: String!
	"""
	the groups description
	"""
	description: String
	"""
	the URL to an auto generated gravatar image for the group
	"""
	gravatarLogoURL: String
	"""
	the URL to an image uploaded by the customer for the groups avatar image
	"""
	logoURL: String
	"""
	The group's displayed 'friendly' name
	"""
	displayName: String
	ownerID: ID
	procedureEditorIDs: [ID!]
	procedureBlockedGroupIDs: [ID!]
	internalPolicyEditorIDs: [ID!]
	internalPolicyBlockedGroupIDs: [ID!]
	programEditorIDs: [ID!]
	programBlockedGroupIDs: [ID!]
	programViewerIDs: [ID!]
	riskEditorIDs: [ID!]
	riskBlockedGroupIDs: [ID!]
	riskViewerIDs: [ID!]
	controlObjectiveEditorIDs: [ID!]
	controlObjectiveBlockedGroupIDs: [ID!]
	controlObjectiveViewerIDs: [ID!]
	controlEditorIDs: [ID!]
	controlBlockedGroupIDs: [ID!]
	controlViewerIDs: [ID!]
	narrativeEditorIDs: [ID!]
	narrativeBlockedGroupIDs: [ID!]
	narrativeViewerIDs: [ID!]
	settingID: ID
	eventIDs: [ID!]
	integrationIDs: [ID!]
	fileIDs: [ID!]
	taskIDs: [ID!]
	createGroupSettings: CreateGroupSettingInput
}
"""
CreateGroupMembershipInput is used for create GroupMembership object.
Input was generated by ent.
"""
input CreateGroupMembershipInput {
	role: GroupMembershipRole
	groupID: ID!
	userID: ID!
	eventIDs: [ID!]
}
"""
CreateGroupSettingInput is used for create GroupSetting object.
Input was generated by ent.
"""
input CreateGroupSettingInput {
	"""
	whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
	"""
	visibility: GroupSettingVisibility
	"""
	the policy governing ability to freely join a group, whether it requires an invitation, application, or either
	"""
	joinPolicy: GroupSettingJoinPolicy
	"""
	whether to sync group members to slack groups
	"""
	syncToSlack: Boolean
	"""
	whether to sync group members to github groups
	"""
	syncToGithub: Boolean
	groupID: ID
}
"""
CreateHushInput is used for create Hush object.
Input was generated by ent.
"""
input CreateHushInput {
	"""
	the logical name of the corresponding hush secret or it's general grouping
	"""
	name: String!
	"""
	a description of the hush value or purpose, such as github PAT
	"""
	description: String
	"""
	the kind of secret, such as sshkey, certificate, api token, etc.
	"""
	kind: String
	"""
	the generic name of a secret associated with the organization
	"""
	secretName: String
	"""
	the secret value
	"""
	secretValue: String
	integrationIDs: [ID!]
	organizationIDs: [ID!]
	eventIDs: [ID!]
}
"""
CreateIntegrationInput is used for create Integration object.
Input was generated by ent.
"""
input CreateIntegrationInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the integration - must be unique within the organization
	"""
	name: String!
	"""
	a description of the integration
	"""
	description: String
	kind: String
	ownerID: ID
	secretIDs: [ID!]
	eventIDs: [ID!]
}
"""
CreateInternalPolicyInput is used for create InternalPolicy object.
Input was generated by ent.
"""
input CreateInternalPolicyInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the policy
	"""
	name: String!
	"""
	description of the policy
	"""
	description: String
	"""
	status of the policy
	"""
	status: String
	"""
	the date the policy should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	"""
	type of the policy
	"""
	policyType: String
	"""
	version of the policy
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the policy
	"""
	background: String
	"""
	json data for the policy document
	"""
	details: Map
	ownerID: ID
	blockedGroupIDs: [ID!]
	editorIDs: [ID!]
	controlObjectiveIDs: [ID!]
	controlIDs: [ID!]
	procedureIDs: [ID!]
	narrativeIDs: [ID!]
	taskIDs: [ID!]
	programIDs: [ID!]
}
"""
CreateInviteInput is used for create Invite object.
Input was generated by ent.
"""
input CreateInviteInput {
	"""
	the expiration date of the invitation token which defaults to 14 days in the future from creation
	"""
	expires: Time
	"""
	the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization
	"""
	recipient: String!
	"""
	the status of the invitation
	"""
	status: InviteInviteStatus
	role: InviteRole
	"""
	the number of attempts made to perform email send of the invitation, maximum of 5
	"""
	sendAttempts: Int
	"""
	the user who initiated the invitation
	"""
	requestorID: String
	ownerID: ID
	eventIDs: [ID!]
}
input CreateMemberWithProgramInput {
	role: ProgramMembershipRole
	userID: ID!
}
"""
CreateNarrativeInput is used for create Narrative object.
Input was generated by ent.
"""
input CreateNarrativeInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the narrative
	"""
	name: String!
	"""
	the description of the narrative
	"""
	description: String
	"""
	which controls are satisfied by the narrative
	"""
	satisfies: String
	"""
	json data for the narrative document
	"""
	details: Map
	ownerID: ID
	blockedGroupIDs: [ID!]
	editorIDs: [ID!]
	viewerIDs: [ID!]
	internalPolicyIDs: [ID!]
	controlIDs: [ID!]
	procedureIDs: [ID!]
	controlObjectiveIDs: [ID!]
	programIDs: [ID!]
}
"""
CreateNoteInput is used for create Note object.
Input was generated by ent.
"""
input CreateNoteInput {
	"""
	the text of the note
	"""
	text: String!
	ownerID: ID
	taskID: ID
}
"""
CreateOnboardingInput is used for create Onboarding object.
Input was generated by ent.
"""
input CreateOnboardingInput {
	"""
	name of the company
	"""
	companyName: String!
	"""
	domains associated with the company
	"""
	domains: [String!]
	"""
	details given about the company during the onboarding process, including things such as company size, sector, etc
	"""
	companyDetails: Map
	"""
	details given about the user during the onboarding process, including things such as name, job title, department, etc
	"""
	userDetails: Map
	"""
	details given about the compliance requirements during the onboarding process, such as coming with existing policies, controls, risk assessments, etc
	"""
	compliance: Map
	organizationID: ID
}
"""
CreateOrgMembershipInput is used for create OrgMembership object.
Input was generated by ent.
"""
input CreateOrgMembershipInput {
	role: OrgMembershipRole
	organizationID: ID!
	userID: ID!
	eventIDs: [ID!]
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the organization
	"""
	name: String!
	"""
	The organization's displayed 'friendly' name
	"""
	displayName: String
	"""
	An optional description of the organization
	"""
	description: String
	"""
	orgs directly associated with a user
	"""
	personalOrg: Boolean
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	"""
	Whether the organization has a dedicated database
	"""
	dedicatedDb: Boolean
	controlCreatorIDs: [ID!]
	controlObjectiveCreatorIDs: [ID!]
	groupCreatorIDs: [ID!]
	internalPolicyCreatorIDs: [ID!]
	narrativeCreatorIDs: [ID!]
	procedureCreatorIDs: [ID!]
	programCreatorIDs: [ID!]
	riskCreatorIDs: [ID!]
	templateCreatorIDs: [ID!]
	parentID: ID
	settingID: ID
	personalAccessTokenIDs: [ID!]
	apiTokenIDs: [ID!]
	fileIDs: [ID!]
	eventIDs: [ID!]
	secretIDs: [ID!]
	avatarFileID: ID
	groupIDs: [ID!]
	templateIDs: [ID!]
	integrationIDs: [ID!]
	documentDatumIDs: [ID!]
	orgSubscriptionIDs: [ID!]
	inviteIDs: [ID!]
	subscriberIDs: [ID!]
	entityIDs: [ID!]
	entityTypeIDs: [ID!]
	contactIDs: [ID!]
	noteIDs: [ID!]
	taskIDs: [ID!]
	programIDs: [ID!]
	procedureIDs: [ID!]
	internalPolicyIDs: [ID!]
	riskIDs: [ID!]
	controlObjectiveIDs: [ID!]
	narrativeIDs: [ID!]
	controlIDs: [ID!]
	subcontrolIDs: [ID!]
	evidenceIDs: [ID!]
	createOrgSettings: CreateOrganizationSettingInput
}
"""
CreateOrganizationSettingInput is used for create OrganizationSetting object.
Input was generated by ent.
"""
input CreateOrganizationSettingInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	domains associated with the organization
	"""
	domains: [String!]
	"""
	Name of the person to contact for billing
	"""
	billingContact: String
	"""
	Email address of the person to contact for billing
	"""
	billingEmail: String
	"""
	Phone number to contact for billing
	"""
	billingPhone: String
	"""
	the billing address to send billing information to
	"""
	billingAddress: Address
	"""
	Usually government-issued tax ID or business ID such as ABN in Australia
	"""
	taxIdentifier: String
	"""
	geographical location of the organization
	"""
	geoLocation: OrganizationSettingRegion
	"""
	should we send email notifications related to billing
	"""
	billingNotificationsEnabled: Boolean
	"""
	domains allowed to access the organization, if empty all domains are allowed
	"""
	allowedEmailDomains: [String!]
	organizationID: ID
	fileIDs: [ID!]
}
"""
CreatePersonalAccessTokenInput is used for create PersonalAccessToken object.
Input was generated by ent.
"""
input CreatePersonalAccessTokenInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name associated with the token
	"""
	name: String!
	"""
	when the token expires
	"""
	expiresAt: Time
	"""
	a description of the token's purpose
	"""
	description: String
	scopes: [String!]
	lastUsedAt: Time
	ownerID: ID!
	organizationIDs: [ID!]
	eventIDs: [ID!]
}
"""
CreateProcedureInput is used for create Procedure object.
Input was generated by ent.
"""
input CreateProcedureInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the procedure
	"""
	name: String!
	"""
	description of the procedure
	"""
	description: String
	"""
	status of the procedure
	"""
	status: String
	"""
	type of the procedure
	"""
	procedureType: String
	"""
	the date the procedure should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	"""
	version of the procedure
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the procedure
	"""
	background: String
	"""
	which controls are satisfied by the procedure
	"""
	satisfies: String
	"""
	json data for the procedure document
	"""
	details: Map
	ownerID: ID
	blockedGroupIDs: [ID!]
	editorIDs: [ID!]
	controlIDs: [ID!]
	internalPolicyIDs: [ID!]
	narrativeIDs: [ID!]
	riskIDs: [ID!]
	taskIDs: [ID!]
	programIDs: [ID!]
}
"""
CreateProgramInput is used for create Program object.
Input was generated by ent.
"""
input CreateProgramInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the program
	"""
	name: String!
	"""
	the description of the program
	"""
	description: String
	"""
	the status of the program
	"""
	status: ProgramProgramStatus
	"""
	the start date of the period
	"""
	startDate: Time
	"""
	the end date of the period
	"""
	endDate: Time
	"""
	is the program ready for the auditor
	"""
	auditorReady: Boolean
	"""
	can the auditor write comments
	"""
	auditorWriteComments: Boolean
	"""
	can the auditor read comments
	"""
	auditorReadComments: Boolean
	ownerID: ID
	blockedGroupIDs: [ID!]
	editorIDs: [ID!]
	viewerIDs: [ID!]
	controlIDs: [ID!]
	subcontrolIDs: [ID!]
	controlObjectiveIDs: [ID!]
	internalPolicyIDs: [ID!]
	procedureIDs: [ID!]
	riskIDs: [ID!]
	taskIDs: [ID!]
	noteIDs: [ID!]
	fileIDs: [ID!]
	evidenceIDs: [ID!]
	narrativeIDs: [ID!]
	actionPlanIDs: [ID!]
	standardIDs: [ID!]
}
"""
CreateProgramMembershipInput is used for create ProgramMembership object.
Input was generated by ent.
"""
input CreateProgramMembershipInput {
	role: ProgramMembershipRole
	programID: ID!
	userID: ID!
}
input CreateProgramWithMembersInput {
	program: CreateProgramInput!
	members: [CreateMemberWithProgramInput!]
}
"""
CreateRiskInput is used for create Risk object.
Input was generated by ent.
"""
input CreateRiskInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the risk
	"""
	name: String!
	"""
	description of the risk
	"""
	description: String
	"""
	status of the risk - mitigated or not, inflight, etc.
	"""
	status: String
	"""
	type of the risk, e.g. strategic, operational, financial, external, etc.
	"""
	riskType: String
	"""
	business costs associated with the risk
	"""
	businessCosts: String
	"""
	impact of the risk - high, medium, low
	"""
	impact: RiskRiskImpact
	"""
	likelihood of the risk occurring; unlikely, likely, highly likely
	"""
	likelihood: RiskRiskLikelihood
	"""
	mitigation for the risk
	"""
	mitigation: String
	"""
	which controls are satisfied by the risk
	"""
	satisfies: String
	"""
	json data for the risk document
	"""
	details: Map
	ownerID: ID
	blockedGroupIDs: [ID!]
	editorIDs: [ID!]
	viewerIDs: [ID!]
	controlIDs: [ID!]
	procedureIDs: [ID!]
	actionPlanIDs: [ID!]
	programIDs: [ID!]
}
"""
CreateStandardInput is used for create Standard object.
Input was generated by ent.
"""
input CreateStandardInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
	"""
	name: String!
	"""
	description of the standard
	"""
	description: String
	"""
	family of the standard, e.g. 800-53, 800-171, 27001, etc.
	"""
	family: String
	"""
	status of the standard - active, deprecated, etc.
	"""
	status: String
	"""
	type of the standard - security, privacy, etc.
	"""
	standardType: String
	"""
	version of the standard
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the standard
	"""
	background: String
	"""
	which controls are satisfied by the standard
	"""
	satisfies: String
	"""
	json data with details of the standard
	"""
	details: Map
	controlObjectiveIDs: [ID!]
	controlIDs: [ID!]
	procedureIDs: [ID!]
	actionPlanIDs: [ID!]
	programIDs: [ID!]
}
"""
CreateSubcontrolInput is used for create Subcontrol object.
Input was generated by ent.
"""
input CreateSubcontrolInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the subcontrol
	"""
	name: String!
	"""
	description of the subcontrol
	"""
	description: String
	"""
	status of the subcontrol
	"""
	status: String
	"""
	type of the subcontrol
	"""
	subcontrolType: String
	"""
	version of the control
	"""
	version: String
	"""
	number of the subcontrol
	"""
	subcontrolNumber: String
	"""
	subcontrol family
	"""
	family: String
	"""
	subcontrol class
	"""
	class: String
	"""
	source of the control, e.g. framework, template, user-defined, etc.
	"""
	source: String
	"""
	mapped frameworks that the subcontrol is part of
	"""
	mappedFrameworks: String
	"""
	implementation evidence of the subcontrol
	"""
	implementationEvidence: String
	"""
	implementation status
	"""
	implementationStatus: String
	"""
	date the subcontrol was implemented
	"""
	implementationDate: Time
	"""
	implementation verification
	"""
	implementationVerification: String
	"""
	date the subcontrol implementation was verified
	"""
	implementationVerificationDate: Time
	"""
	json data details of the subcontrol
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	ownerID: ID
	controlIDs: [ID!]!
	taskIDs: [ID!]
	programIDs: [ID!]
	evidenceIDs: [ID!]
}
"""
CreateSubscriberInput is used for create Subscriber object.
Input was generated by ent.
"""
input CreateSubscriberInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	email address of the subscriber
	"""
	email: String!
	"""
	phone number of the subscriber
	"""
	phoneNumber: String
	ownerID: ID
	eventIDs: [ID!]
}
"""
CreateTFASettingInput is used for create TFASetting object.
Input was generated by ent.
"""
input CreateTFASettingInput {
	"""
	specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
	"""
	totpAllowed: Boolean
	ownerID: ID
}
"""
CreateTaskInput is used for create Task object.
Input was generated by ent.
"""
input CreateTaskInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the title of the task
	"""
	title: String!
	"""
	the description of the task
	"""
	description: String
	"""
	the details of the task
	"""
	details: String
	"""
	the status of the task
	"""
	status: TaskTaskStatus
	"""
	the category of the task, e.g. evidence upload, risk review, policy review, etc.
	"""
	category: String
	"""
	the due date of the task
	"""
	due: Time
	"""
	the completion date of the task
	"""
	completed: Time
	ownerID: ID
	assignerID: ID
	assigneeID: ID
	commentIDs: [ID!]
	groupIDs: [ID!]
	internalPolicyIDs: [ID!]
	procedureIDs: [ID!]
	controlIDs: [ID!]
	controlObjectiveIDs: [ID!]
	subcontrolIDs: [ID!]
	programIDs: [ID!]
	evidenceIDs: [ID!]
}
"""
CreateTemplateInput is used for create Template object.
Input was generated by ent.
"""
input CreateTemplateInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the template
	"""
	name: String!
	"""
	the type of the template, either a provided template or an implementation (document)
	"""
	templateType: TemplateDocumentType
	"""
	the description of the template
	"""
	description: String
	"""
	the jsonschema object of the template
	"""
	jsonconfig: JSON!
	"""
	the uischema for the template to render in the UI
	"""
	uischema: JSON
	ownerID: ID
	documentIDs: [ID!]
	fileIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	email: String!
	firstName: String
	lastName: String
	"""
	The user's displayed 'friendly' name
	"""
	displayName: String!
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	"""
	the time the user was last seen
	"""
	lastSeen: Time
	"""
	user password hash
	"""
	password: String
	"""
	the Subject of the user JWT
	"""
	sub: String
	"""
	auth provider used to register the account
	"""
	authProvider: UserAuthProvider
	"""
	the user's role
	"""
	role: UserRole
	personalAccessTokenIDs: [ID!]
	tfaSettingIDs: [ID!]
	settingID: ID!
	emailVerificationTokenIDs: [ID!]
	passwordResetTokenIDs: [ID!]
	groupIDs: [ID!]
	organizationIDs: [ID!]
	webauthnIDs: [ID!]
	fileIDs: [ID!]
	avatarFileID: ID
	eventIDs: [ID!]
	actionPlanIDs: [ID!]
	subcontrolIDs: [ID!]
	assignerTaskIDs: [ID!]
	assigneeTaskIDs: [ID!]
	programIDs: [ID!]
}
"""
CreateUserSettingInput is used for create UserSetting object.
Input was generated by ent.
"""
input CreateUserSettingInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	user account is locked if unconfirmed or explicitly locked
	"""
	locked: Boolean
	"""
	The time notifications regarding the user were silenced
	"""
	silencedAt: Time
	"""
	The time the user was suspended
	"""
	suspendedAt: Time
	"""
	status of the user account
	"""
	status: UserSettingUserStatus
	"""
	whether the user has confirmed their email address
	"""
	emailConfirmed: Boolean
	"""
	specifies a user may complete authentication by verifying a WebAuthn capable device
	"""
	isWebauthnAllowed: Boolean
	"""
	whether the user has two factor authentication enabled
	"""
	isTfaEnabled: Boolean
	userID: ID
	defaultOrgID: ID
	fileIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DocumentData implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the template id of the document
	"""
	templateID: ID!
	"""
	the json data of the document
	"""
	data: JSON!
	owner: Organization
	template: Template!
	entity: [Entity!]
	files: [File!]
}
"""
Return response for createBulkDocumentData mutation
"""
type DocumentDataBulkCreatePayload {
	"""
	Created documentData
	"""
	documentData: [DocumentData!]
}
"""
A connection to a list of items.
"""
type DocumentDataConnection {
	"""
	A list of edges.
	"""
	edges: [DocumentDataEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createDocumentData mutation
"""
type DocumentDataCreatePayload {
	"""
	Created documentData
	"""
	documentData: DocumentData!
}
"""
Return response for deleteDocumentData mutation
"""
type DocumentDataDeletePayload {
	"""
	Deleted documentData ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type DocumentDataEdge {
	"""
	The item at the end of the edge.
	"""
	node: DocumentData
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type DocumentDataHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: DocumentDataHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the template id of the document
	"""
	templateID: String!
	"""
	the json data of the document
	"""
	data: JSON!
}
"""
A connection to a list of items.
"""
type DocumentDataHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [DocumentDataHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type DocumentDataHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: DocumentDataHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
DocumentDataHistoryOpType is enum for the field operation
"""
enum DocumentDataHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
DocumentDataHistoryWhereInput is used for filtering DocumentDataHistory objects.
Input was generated by ent.
"""
input DocumentDataHistoryWhereInput {
	not: DocumentDataHistoryWhereInput
	and: [DocumentDataHistoryWhereInput!]
	or: [DocumentDataHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: DocumentDataHistoryOpType
	operationNEQ: DocumentDataHistoryOpType
	operationIn: [DocumentDataHistoryOpType!]
	operationNotIn: [DocumentDataHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	template_id field predicates
	"""
	templateID: String
	templateIDNEQ: String
	templateIDIn: [String!]
	templateIDNotIn: [String!]
	templateIDGT: String
	templateIDGTE: String
	templateIDLT: String
	templateIDLTE: String
	templateIDContains: String
	templateIDHasPrefix: String
	templateIDHasSuffix: String
	templateIDEqualFold: String
	templateIDContainsFold: String
}
type DocumentDataSearchResult {
	documentData: [DocumentData!]
}
"""
Return response for updateDocumentData mutation
"""
type DocumentDataUpdatePayload {
	"""
	Updated documentData
	"""
	documentData: DocumentData!
}
"""
DocumentDataWhereInput is used for filtering DocumentData objects.
Input was generated by ent.
"""
input DocumentDataWhereInput {
	not: DocumentDataWhereInput
	and: [DocumentDataWhereInput!]
	or: [DocumentDataWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	template_id field predicates
	"""
	templateID: ID
	templateIDNEQ: ID
	templateIDIn: [ID!]
	templateIDNotIn: [ID!]
	templateIDGT: ID
	templateIDGTE: ID
	templateIDLT: ID
	templateIDLTE: ID
	templateIDContains: ID
	templateIDHasPrefix: ID
	templateIDHasSuffix: ID
	templateIDEqualFold: ID
	templateIDContainsFold: ID
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	template edge predicates
	"""
	hasTemplate: Boolean
	hasTemplateWith: [TemplateWhereInput!]
	"""
	entity edge predicates
	"""
	hasEntity: Boolean
	hasEntityWith: [EntityWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
}
type Entity implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the entity
	"""
	name: String
	"""
	The entity's displayed 'friendly' name
	"""
	displayName: String
	"""
	An optional description of the entity
	"""
	description: String
	"""
	domains associated with the entity
	"""
	domains: [String!]
	"""
	The type of the entity
	"""
	entityTypeID: ID
	"""
	status of the entity
	"""
	status: String
	owner: Organization
	contacts: [Contact!]
	documents: [DocumentData!]
	notes: [Note!]
	files: [File!]
	entityType: EntityType
}
"""
Return response for createBulkEntity mutation
"""
type EntityBulkCreatePayload {
	"""
	Created entities
	"""
	entities: [Entity!]
}
"""
A connection to a list of items.
"""
type EntityConnection {
	"""
	A list of edges.
	"""
	edges: [EntityEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createEntity mutation
"""
type EntityCreatePayload {
	"""
	Created entity
	"""
	entity: Entity!
}
"""
Return response for deleteEntity mutation
"""
type EntityDeletePayload {
	"""
	Deleted entity ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type EntityEdge {
	"""
	The item at the end of the edge.
	"""
	node: Entity
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type EntityHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: EntityHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the entity
	"""
	name: String
	"""
	The entity's displayed 'friendly' name
	"""
	displayName: String
	"""
	An optional description of the entity
	"""
	description: String
	"""
	domains associated with the entity
	"""
	domains: [String!]
	"""
	The type of the entity
	"""
	entityTypeID: String
	"""
	status of the entity
	"""
	status: String
}
"""
A connection to a list of items.
"""
type EntityHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [EntityHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: EntityHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
EntityHistoryOpType is enum for the field operation
"""
enum EntityHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for EntityHistory connections
"""
input EntityHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order EntityHistories.
	"""
	field: EntityHistoryOrderField!
}
"""
Properties by which EntityHistory connections can be ordered.
"""
enum EntityHistoryOrderField {
	name
	display_name
}
"""
EntityHistoryWhereInput is used for filtering EntityHistory objects.
Input was generated by ent.
"""
input EntityHistoryWhereInput {
	not: EntityHistoryWhereInput
	and: [EntityHistoryWhereInput!]
	or: [EntityHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: EntityHistoryOpType
	operationNEQ: EntityHistoryOpType
	operationIn: [EntityHistoryOpType!]
	operationNotIn: [EntityHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameIsNil: Boolean
	nameNotNil: Boolean
	nameEqualFold: String
	nameContainsFold: String
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameIsNil: Boolean
	displayNameNotNil: Boolean
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""
	entity_type_id field predicates
	"""
	entityTypeID: String
	entityTypeIDNEQ: String
	entityTypeIDIn: [String!]
	entityTypeIDNotIn: [String!]
	entityTypeIDGT: String
	entityTypeIDGTE: String
	entityTypeIDLT: String
	entityTypeIDLTE: String
	entityTypeIDContains: String
	entityTypeIDHasPrefix: String
	entityTypeIDHasSuffix: String
	entityTypeIDIsNil: Boolean
	entityTypeIDNotNil: Boolean
	entityTypeIDEqualFold: String
	entityTypeIDContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
}
"""
Ordering options for Entity connections
"""
input EntityOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Entities.
	"""
	field: EntityOrderField!
}
"""
Properties by which Entity connections can be ordered.
"""
enum EntityOrderField {
	name
	display_name
}
type EntitySearchResult {
	entities: [Entity!]
}
type EntityType implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the entity
	"""
	name: String!
	owner: Organization
	entities: [Entity!]
}
"""
Return response for createBulkEntityType mutation
"""
type EntityTypeBulkCreatePayload {
	"""
	Created entityTypes
	"""
	entityTypes: [EntityType!]
}
"""
A connection to a list of items.
"""
type EntityTypeConnection {
	"""
	A list of edges.
	"""
	edges: [EntityTypeEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createEntityType mutation
"""
type EntityTypeCreatePayload {
	"""
	Created entityType
	"""
	entityType: EntityType!
}
"""
Return response for deleteEntityType mutation
"""
type EntityTypeDeletePayload {
	"""
	Deleted entityType ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type EntityTypeEdge {
	"""
	The item at the end of the edge.
	"""
	node: EntityType
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type EntityTypeHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: EntityTypeHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the entity
	"""
	name: String!
}
"""
A connection to a list of items.
"""
type EntityTypeHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [EntityTypeHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type EntityTypeHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: EntityTypeHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
EntityTypeHistoryOpType is enum for the field operation
"""
enum EntityTypeHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for EntityTypeHistory connections
"""
input EntityTypeHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order EntityTypeHistories.
	"""
	field: EntityTypeHistoryOrderField!
}
"""
Properties by which EntityTypeHistory connections can be ordered.
"""
enum EntityTypeHistoryOrderField {
	name
}
"""
EntityTypeHistoryWhereInput is used for filtering EntityTypeHistory objects.
Input was generated by ent.
"""
input EntityTypeHistoryWhereInput {
	not: EntityTypeHistoryWhereInput
	and: [EntityTypeHistoryWhereInput!]
	or: [EntityTypeHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: EntityTypeHistoryOpType
	operationNEQ: EntityTypeHistoryOpType
	operationIn: [EntityTypeHistoryOpType!]
	operationNotIn: [EntityTypeHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
}
"""
Ordering options for EntityType connections
"""
input EntityTypeOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order EntityTypes.
	"""
	field: EntityTypeOrderField!
}
"""
Properties by which EntityType connections can be ordered.
"""
enum EntityTypeOrderField {
	name
}
type EntityTypeSearchResult {
	entityTypes: [EntityType!]
}
"""
Return response for updateEntityType mutation
"""
type EntityTypeUpdatePayload {
	"""
	Updated entityType
	"""
	entityType: EntityType!
}
"""
EntityTypeWhereInput is used for filtering EntityType objects.
Input was generated by ent.
"""
input EntityTypeWhereInput {
	not: EntityTypeWhereInput
	and: [EntityTypeWhereInput!]
	or: [EntityTypeWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	entities edge predicates
	"""
	hasEntities: Boolean
	hasEntitiesWith: [EntityWhereInput!]
}
"""
Return response for updateEntity mutation
"""
type EntityUpdatePayload {
	"""
	Updated entity
	"""
	entity: Entity!
}
"""
EntityWhereInput is used for filtering Entity objects.
Input was generated by ent.
"""
input EntityWhereInput {
	not: EntityWhereInput
	and: [EntityWhereInput!]
	or: [EntityWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameIsNil: Boolean
	nameNotNil: Boolean
	nameEqualFold: String
	nameContainsFold: String
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameIsNil: Boolean
	displayNameNotNil: Boolean
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""
	entity_type_id field predicates
	"""
	entityTypeID: ID
	entityTypeIDNEQ: ID
	entityTypeIDIn: [ID!]
	entityTypeIDNotIn: [ID!]
	entityTypeIDGT: ID
	entityTypeIDGTE: ID
	entityTypeIDLT: ID
	entityTypeIDLTE: ID
	entityTypeIDContains: ID
	entityTypeIDHasPrefix: ID
	entityTypeIDHasSuffix: ID
	entityTypeIDIsNil: Boolean
	entityTypeIDNotNil: Boolean
	entityTypeIDEqualFold: ID
	entityTypeIDContainsFold: ID
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	contacts edge predicates
	"""
	hasContacts: Boolean
	hasContactsWith: [ContactWhereInput!]
	"""
	documents edge predicates
	"""
	hasDocuments: Boolean
	hasDocumentsWith: [DocumentDataWhereInput!]
	"""
	notes edge predicates
	"""
	hasNotes: Boolean
	hasNotesWith: [NoteWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
	"""
	entity_type edge predicates
	"""
	hasEntityType: Boolean
	hasEntityTypeWith: [EntityTypeWhereInput!]
}
type Event implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	eventID: String
	correlationID: String
	eventType: String!
	metadata: Map
	user: [User!]
	group: [Group!]
	integration: [Integration!]
	organization: [Organization!]
	invite: [Invite!]
	personalAccessToken: [PersonalAccessToken!]
	hush: [Hush!]
	orgmembership: [OrgMembership!]
	groupmembership: [GroupMembership!]
	subscriber: [Subscriber!]
	file: [File!]
}
"""
Return response for createBulkEvent mutation
"""
type EventBulkCreatePayload {
	"""
	Created events
	"""
	events: [Event!]
}
"""
A connection to a list of items.
"""
type EventConnection {
	"""
	A list of edges.
	"""
	edges: [EventEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createEvent mutation
"""
type EventCreatePayload {
	"""
	Created event
	"""
	event: Event!
}
"""
Return response for deleteEvent mutation
"""
type EventDeletePayload {
	"""
	Deleted event ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type EventEdge {
	"""
	The item at the end of the edge.
	"""
	node: Event
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type EventHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: EventHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	eventID: String
	correlationID: String
	eventType: String!
	metadata: Map
}
"""
A connection to a list of items.
"""
type EventHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [EventHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type EventHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: EventHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
EventHistoryOpType is enum for the field operation
"""
enum EventHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
EventHistoryWhereInput is used for filtering EventHistory objects.
Input was generated by ent.
"""
input EventHistoryWhereInput {
	not: EventHistoryWhereInput
	and: [EventHistoryWhereInput!]
	or: [EventHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: EventHistoryOpType
	operationNEQ: EventHistoryOpType
	operationIn: [EventHistoryOpType!]
	operationNotIn: [EventHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	event_id field predicates
	"""
	eventID: String
	eventIDNEQ: String
	eventIDIn: [String!]
	eventIDNotIn: [String!]
	eventIDGT: String
	eventIDGTE: String
	eventIDLT: String
	eventIDLTE: String
	eventIDContains: String
	eventIDHasPrefix: String
	eventIDHasSuffix: String
	eventIDIsNil: Boolean
	eventIDNotNil: Boolean
	eventIDEqualFold: String
	eventIDContainsFold: String
	"""
	correlation_id field predicates
	"""
	correlationID: String
	correlationIDNEQ: String
	correlationIDIn: [String!]
	correlationIDNotIn: [String!]
	correlationIDGT: String
	correlationIDGTE: String
	correlationIDLT: String
	correlationIDLTE: String
	correlationIDContains: String
	correlationIDHasPrefix: String
	correlationIDHasSuffix: String
	correlationIDIsNil: Boolean
	correlationIDNotNil: Boolean
	correlationIDEqualFold: String
	correlationIDContainsFold: String
	"""
	event_type field predicates
	"""
	eventType: String
	eventTypeNEQ: String
	eventTypeIn: [String!]
	eventTypeNotIn: [String!]
	eventTypeGT: String
	eventTypeGTE: String
	eventTypeLT: String
	eventTypeLTE: String
	eventTypeContains: String
	eventTypeHasPrefix: String
	eventTypeHasSuffix: String
	eventTypeEqualFold: String
	eventTypeContainsFold: String
}
type EventSearchResult {
	events: [Event!]
}
"""
Return response for updateEvent mutation
"""
type EventUpdatePayload {
	"""
	Updated event
	"""
	event: Event!
}
"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
	not: EventWhereInput
	and: [EventWhereInput!]
	or: [EventWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	event_id field predicates
	"""
	eventID: String
	eventIDNEQ: String
	eventIDIn: [String!]
	eventIDNotIn: [String!]
	eventIDGT: String
	eventIDGTE: String
	eventIDLT: String
	eventIDLTE: String
	eventIDContains: String
	eventIDHasPrefix: String
	eventIDHasSuffix: String
	eventIDIsNil: Boolean
	eventIDNotNil: Boolean
	eventIDEqualFold: String
	eventIDContainsFold: String
	"""
	correlation_id field predicates
	"""
	correlationID: String
	correlationIDNEQ: String
	correlationIDIn: [String!]
	correlationIDNotIn: [String!]
	correlationIDGT: String
	correlationIDGTE: String
	correlationIDLT: String
	correlationIDLTE: String
	correlationIDContains: String
	correlationIDHasPrefix: String
	correlationIDHasSuffix: String
	correlationIDIsNil: Boolean
	correlationIDNotNil: Boolean
	correlationIDEqualFold: String
	correlationIDContainsFold: String
	"""
	event_type field predicates
	"""
	eventType: String
	eventTypeNEQ: String
	eventTypeIn: [String!]
	eventTypeNotIn: [String!]
	eventTypeGT: String
	eventTypeGTE: String
	eventTypeLT: String
	eventTypeLTE: String
	eventTypeContains: String
	eventTypeHasPrefix: String
	eventTypeHasSuffix: String
	eventTypeEqualFold: String
	eventTypeContainsFold: String
	"""
	user edge predicates
	"""
	hasUser: Boolean
	hasUserWith: [UserWhereInput!]
	"""
	group edge predicates
	"""
	hasGroup: Boolean
	hasGroupWith: [GroupWhereInput!]
	"""
	integration edge predicates
	"""
	hasIntegration: Boolean
	hasIntegrationWith: [IntegrationWhereInput!]
	"""
	organization edge predicates
	"""
	hasOrganization: Boolean
	hasOrganizationWith: [OrganizationWhereInput!]
	"""
	invite edge predicates
	"""
	hasInvite: Boolean
	hasInviteWith: [InviteWhereInput!]
	"""
	personal_access_token edge predicates
	"""
	hasPersonalAccessToken: Boolean
	hasPersonalAccessTokenWith: [PersonalAccessTokenWhereInput!]
	"""
	hush edge predicates
	"""
	hasHush: Boolean
	hasHushWith: [HushWhereInput!]
	"""
	orgmembership edge predicates
	"""
	hasOrgmembership: Boolean
	hasOrgmembershipWith: [OrgMembershipWhereInput!]
	"""
	groupmembership edge predicates
	"""
	hasGroupmembership: Boolean
	hasGroupmembershipWith: [GroupMembershipWhereInput!]
	"""
	subscriber edge predicates
	"""
	hasSubscriber: Boolean
	hasSubscriberWith: [SubscriberWhereInput!]
	"""
	file edge predicates
	"""
	hasFile: Boolean
	hasFileWith: [FileWhereInput!]
}
type Evidence implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the name of the evidence
	"""
	name: String!
	"""
	the description of the evidence, what is contained in the uploaded file(s) or url(s)
	"""
	description: String
	"""
	description of how the evidence was collected
	"""
	collectionProcedure: String
	"""
	the date the evidence was retrieved
	"""
	creationDate: Time!
	"""
	the date the evidence should be renewed, defaults to a year from entry date
	"""
	renewalDate: Time
	"""
	the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
	"""
	source: String
	"""
	whether the evidence was automatically generated
	"""
	isAutomated: Boolean
	"""
	the url of the evidence if not uploaded directly to the system
	"""
	url: String
	owner: Organization
	controlObjectives: [ControlObjective!]
	controls: [Control!]
	subcontrols: [Subcontrol!]
	files: [File!]
	programs: [Program!]
	tasks: [Task!]
}
"""
Return response for createBulkEvidence mutation
"""
type EvidenceBulkCreatePayload {
	"""
	Created evidences
	"""
	evidences: [Evidence!]
}
"""
A connection to a list of items.
"""
type EvidenceConnection {
	"""
	A list of edges.
	"""
	edges: [EvidenceEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createEvidence mutation
"""
type EvidenceCreatePayload {
	"""
	Created evidence
	"""
	evidence: Evidence!
}
"""
Return response for deleteEvidence mutation
"""
type EvidenceDeletePayload {
	"""
	Deleted evidence ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type EvidenceEdge {
	"""
	The item at the end of the edge.
	"""
	node: Evidence
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type EvidenceHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: EvidenceHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the name of the evidence
	"""
	name: String!
	"""
	the description of the evidence, what is contained in the uploaded file(s) or url(s)
	"""
	description: String
	"""
	description of how the evidence was collected
	"""
	collectionProcedure: String
	"""
	the date the evidence was retrieved
	"""
	creationDate: Time!
	"""
	the date the evidence should be renewed, defaults to a year from entry date
	"""
	renewalDate: Time
	"""
	the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
	"""
	source: String
	"""
	whether the evidence was automatically generated
	"""
	isAutomated: Boolean
	"""
	the url of the evidence if not uploaded directly to the system
	"""
	url: String
}
"""
A connection to a list of items.
"""
type EvidenceHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [EvidenceHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type EvidenceHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: EvidenceHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
EvidenceHistoryOpType is enum for the field operation
"""
enum EvidenceHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
EvidenceHistoryWhereInput is used for filtering EvidenceHistory objects.
Input was generated by ent.
"""
input EvidenceHistoryWhereInput {
	not: EvidenceHistoryWhereInput
	and: [EvidenceHistoryWhereInput!]
	or: [EvidenceHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: EvidenceHistoryOpType
	operationNEQ: EvidenceHistoryOpType
	operationIn: [EvidenceHistoryOpType!]
	operationNotIn: [EvidenceHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	collection_procedure field predicates
	"""
	collectionProcedure: String
	collectionProcedureNEQ: String
	collectionProcedureIn: [String!]
	collectionProcedureNotIn: [String!]
	collectionProcedureGT: String
	collectionProcedureGTE: String
	collectionProcedureLT: String
	collectionProcedureLTE: String
	collectionProcedureContains: String
	collectionProcedureHasPrefix: String
	collectionProcedureHasSuffix: String
	collectionProcedureIsNil: Boolean
	collectionProcedureNotNil: Boolean
	collectionProcedureEqualFold: String
	collectionProcedureContainsFold: String
	"""
	creation_date field predicates
	"""
	creationDate: Time
	creationDateNEQ: Time
	creationDateIn: [Time!]
	creationDateNotIn: [Time!]
	creationDateGT: Time
	creationDateGTE: Time
	creationDateLT: Time
	creationDateLTE: Time
	"""
	renewal_date field predicates
	"""
	renewalDate: Time
	renewalDateNEQ: Time
	renewalDateIn: [Time!]
	renewalDateNotIn: [Time!]
	renewalDateGT: Time
	renewalDateGTE: Time
	renewalDateLT: Time
	renewalDateLTE: Time
	renewalDateIsNil: Boolean
	renewalDateNotNil: Boolean
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	is_automated field predicates
	"""
	isAutomated: Boolean
	isAutomatedNEQ: Boolean
	isAutomatedIsNil: Boolean
	isAutomatedNotNil: Boolean
	"""
	url field predicates
	"""
	url: String
	urlNEQ: String
	urlIn: [String!]
	urlNotIn: [String!]
	urlGT: String
	urlGTE: String
	urlLT: String
	urlLTE: String
	urlContains: String
	urlHasPrefix: String
	urlHasSuffix: String
	urlIsNil: Boolean
	urlNotNil: Boolean
	urlEqualFold: String
	urlContainsFold: String
}
type EvidenceSearchResult {
	evidences: [Evidence!]
}
"""
Return response for updateEvidence mutation
"""
type EvidenceUpdatePayload {
	"""
	Updated evidence
	"""
	evidence: Evidence!
}
"""
EvidenceWhereInput is used for filtering Evidence objects.
Input was generated by ent.
"""
input EvidenceWhereInput {
	not: EvidenceWhereInput
	and: [EvidenceWhereInput!]
	or: [EvidenceWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	collection_procedure field predicates
	"""
	collectionProcedure: String
	collectionProcedureNEQ: String
	collectionProcedureIn: [String!]
	collectionProcedureNotIn: [String!]
	collectionProcedureGT: String
	collectionProcedureGTE: String
	collectionProcedureLT: String
	collectionProcedureLTE: String
	collectionProcedureContains: String
	collectionProcedureHasPrefix: String
	collectionProcedureHasSuffix: String
	collectionProcedureIsNil: Boolean
	collectionProcedureNotNil: Boolean
	collectionProcedureEqualFold: String
	collectionProcedureContainsFold: String
	"""
	creation_date field predicates
	"""
	creationDate: Time
	creationDateNEQ: Time
	creationDateIn: [Time!]
	creationDateNotIn: [Time!]
	creationDateGT: Time
	creationDateGTE: Time
	creationDateLT: Time
	creationDateLTE: Time
	"""
	renewal_date field predicates
	"""
	renewalDate: Time
	renewalDateNEQ: Time
	renewalDateIn: [Time!]
	renewalDateNotIn: [Time!]
	renewalDateGT: Time
	renewalDateGTE: Time
	renewalDateLT: Time
	renewalDateLTE: Time
	renewalDateIsNil: Boolean
	renewalDateNotNil: Boolean
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	is_automated field predicates
	"""
	isAutomated: Boolean
	isAutomatedNEQ: Boolean
	isAutomatedIsNil: Boolean
	isAutomatedNotNil: Boolean
	"""
	url field predicates
	"""
	url: String
	urlNEQ: String
	urlIn: [String!]
	urlNotIn: [String!]
	urlGT: String
	urlGTE: String
	urlLT: String
	urlLTE: String
	urlContains: String
	urlHasPrefix: String
	urlHasSuffix: String
	urlIsNil: Boolean
	urlNotNil: Boolean
	urlEqualFold: String
	urlContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	control_objectives edge predicates
	"""
	hasControlObjectives: Boolean
	hasControlObjectivesWith: [ControlObjectiveWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	subcontrols edge predicates
	"""
	hasSubcontrols: Boolean
	hasSubcontrolsWith: [SubcontrolWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
}
type File implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the file provided in the payload key without the extension
	"""
	providedFileName: String!
	"""
	the extension of the file provided
	"""
	providedFileExtension: String!
	"""
	the computed size of the file in the original http request
	"""
	providedFileSize: Int
	persistedFileSize: Int
	"""
	the mime type detected by the system
	"""
	detectedMimeType: String
	"""
	the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
	"""
	md5Hash: String
	"""
	the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
	"""
	detectedContentType: String!
	"""
	the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
	"""
	storeKey: String
	"""
	the category type of the file, if any (e.g. evidence, invoice, etc.)
	"""
	categoryType: String
	"""
	the full URI of the file
	"""
	uri: String
	"""
	the storage scheme of the file, e.g. file://, s3://, etc.
	"""
	storageScheme: String
	"""
	the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
	"""
	storageVolume: String
	"""
	the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
	"""
	storagePath: String
	user: [User!]
	organization: [Organization!]
	group: [Group!]
	contact: [Contact!]
	entity: [Entity!]
	userSetting: [UserSetting!]
	organizationSetting: [OrganizationSetting!]
	template: [Template!]
	documentData: [DocumentData!]
	events: [Event!]
	program: [Program!]
	evidence: [Evidence!]
	presignedURL: String
}
"""
A connection to a list of items.
"""
type FileConnection {
	"""
	A list of edges.
	"""
	edges: [FileEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for deleteFile mutation
"""
type FileDeletePayload {
	"""
	Deleted file ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type FileEdge {
	"""
	The item at the end of the edge.
	"""
	node: File
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type FileHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: FileHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the file provided in the payload key without the extension
	"""
	providedFileName: String!
	"""
	the extension of the file provided
	"""
	providedFileExtension: String!
	"""
	the computed size of the file in the original http request
	"""
	providedFileSize: Int
	persistedFileSize: Int
	"""
	the mime type detected by the system
	"""
	detectedMimeType: String
	"""
	the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
	"""
	md5Hash: String
	"""
	the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
	"""
	detectedContentType: String!
	"""
	the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
	"""
	storeKey: String
	"""
	the category type of the file, if any (e.g. evidence, invoice, etc.)
	"""
	categoryType: String
	"""
	the full URI of the file
	"""
	uri: String
	"""
	the storage scheme of the file, e.g. file://, s3://, etc.
	"""
	storageScheme: String
	"""
	the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
	"""
	storageVolume: String
	"""
	the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
	"""
	storagePath: String
}
"""
A connection to a list of items.
"""
type FileHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [FileHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type FileHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: FileHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
FileHistoryOpType is enum for the field operation
"""
enum FileHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
FileHistoryWhereInput is used for filtering FileHistory objects.
Input was generated by ent.
"""
input FileHistoryWhereInput {
	not: FileHistoryWhereInput
	and: [FileHistoryWhereInput!]
	or: [FileHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: FileHistoryOpType
	operationNEQ: FileHistoryOpType
	operationIn: [FileHistoryOpType!]
	operationNotIn: [FileHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	provided_file_name field predicates
	"""
	providedFileName: String
	providedFileNameNEQ: String
	providedFileNameIn: [String!]
	providedFileNameNotIn: [String!]
	providedFileNameGT: String
	providedFileNameGTE: String
	providedFileNameLT: String
	providedFileNameLTE: String
	providedFileNameContains: String
	providedFileNameHasPrefix: String
	providedFileNameHasSuffix: String
	providedFileNameEqualFold: String
	providedFileNameContainsFold: String
	"""
	provided_file_extension field predicates
	"""
	providedFileExtension: String
	providedFileExtensionNEQ: String
	providedFileExtensionIn: [String!]
	providedFileExtensionNotIn: [String!]
	providedFileExtensionGT: String
	providedFileExtensionGTE: String
	providedFileExtensionLT: String
	providedFileExtensionLTE: String
	providedFileExtensionContains: String
	providedFileExtensionHasPrefix: String
	providedFileExtensionHasSuffix: String
	providedFileExtensionEqualFold: String
	providedFileExtensionContainsFold: String
	"""
	provided_file_size field predicates
	"""
	providedFileSize: Int
	providedFileSizeNEQ: Int
	providedFileSizeIn: [Int!]
	providedFileSizeNotIn: [Int!]
	providedFileSizeGT: Int
	providedFileSizeGTE: Int
	providedFileSizeLT: Int
	providedFileSizeLTE: Int
	providedFileSizeIsNil: Boolean
	providedFileSizeNotNil: Boolean
	"""
	persisted_file_size field predicates
	"""
	persistedFileSize: Int
	persistedFileSizeNEQ: Int
	persistedFileSizeIn: [Int!]
	persistedFileSizeNotIn: [Int!]
	persistedFileSizeGT: Int
	persistedFileSizeGTE: Int
	persistedFileSizeLT: Int
	persistedFileSizeLTE: Int
	persistedFileSizeIsNil: Boolean
	persistedFileSizeNotNil: Boolean
	"""
	detected_mime_type field predicates
	"""
	detectedMimeType: String
	detectedMimeTypeNEQ: String
	detectedMimeTypeIn: [String!]
	detectedMimeTypeNotIn: [String!]
	detectedMimeTypeGT: String
	detectedMimeTypeGTE: String
	detectedMimeTypeLT: String
	detectedMimeTypeLTE: String
	detectedMimeTypeContains: String
	detectedMimeTypeHasPrefix: String
	detectedMimeTypeHasSuffix: String
	detectedMimeTypeIsNil: Boolean
	detectedMimeTypeNotNil: Boolean
	detectedMimeTypeEqualFold: String
	detectedMimeTypeContainsFold: String
	"""
	md5_hash field predicates
	"""
	md5Hash: String
	md5HashNEQ: String
	md5HashIn: [String!]
	md5HashNotIn: [String!]
	md5HashGT: String
	md5HashGTE: String
	md5HashLT: String
	md5HashLTE: String
	md5HashContains: String
	md5HashHasPrefix: String
	md5HashHasSuffix: String
	md5HashIsNil: Boolean
	md5HashNotNil: Boolean
	md5HashEqualFold: String
	md5HashContainsFold: String
	"""
	detected_content_type field predicates
	"""
	detectedContentType: String
	detectedContentTypeNEQ: String
	detectedContentTypeIn: [String!]
	detectedContentTypeNotIn: [String!]
	detectedContentTypeGT: String
	detectedContentTypeGTE: String
	detectedContentTypeLT: String
	detectedContentTypeLTE: String
	detectedContentTypeContains: String
	detectedContentTypeHasPrefix: String
	detectedContentTypeHasSuffix: String
	detectedContentTypeEqualFold: String
	detectedContentTypeContainsFold: String
	"""
	store_key field predicates
	"""
	storeKey: String
	storeKeyNEQ: String
	storeKeyIn: [String!]
	storeKeyNotIn: [String!]
	storeKeyGT: String
	storeKeyGTE: String
	storeKeyLT: String
	storeKeyLTE: String
	storeKeyContains: String
	storeKeyHasPrefix: String
	storeKeyHasSuffix: String
	storeKeyIsNil: Boolean
	storeKeyNotNil: Boolean
	storeKeyEqualFold: String
	storeKeyContainsFold: String
	"""
	category_type field predicates
	"""
	categoryType: String
	categoryTypeNEQ: String
	categoryTypeIn: [String!]
	categoryTypeNotIn: [String!]
	categoryTypeGT: String
	categoryTypeGTE: String
	categoryTypeLT: String
	categoryTypeLTE: String
	categoryTypeContains: String
	categoryTypeHasPrefix: String
	categoryTypeHasSuffix: String
	categoryTypeIsNil: Boolean
	categoryTypeNotNil: Boolean
	categoryTypeEqualFold: String
	categoryTypeContainsFold: String
	"""
	uri field predicates
	"""
	uri: String
	uriNEQ: String
	uriIn: [String!]
	uriNotIn: [String!]
	uriGT: String
	uriGTE: String
	uriLT: String
	uriLTE: String
	uriContains: String
	uriHasPrefix: String
	uriHasSuffix: String
	uriIsNil: Boolean
	uriNotNil: Boolean
	uriEqualFold: String
	uriContainsFold: String
	"""
	storage_scheme field predicates
	"""
	storageScheme: String
	storageSchemeNEQ: String
	storageSchemeIn: [String!]
	storageSchemeNotIn: [String!]
	storageSchemeGT: String
	storageSchemeGTE: String
	storageSchemeLT: String
	storageSchemeLTE: String
	storageSchemeContains: String
	storageSchemeHasPrefix: String
	storageSchemeHasSuffix: String
	storageSchemeIsNil: Boolean
	storageSchemeNotNil: Boolean
	storageSchemeEqualFold: String
	storageSchemeContainsFold: String
	"""
	storage_volume field predicates
	"""
	storageVolume: String
	storageVolumeNEQ: String
	storageVolumeIn: [String!]
	storageVolumeNotIn: [String!]
	storageVolumeGT: String
	storageVolumeGTE: String
	storageVolumeLT: String
	storageVolumeLTE: String
	storageVolumeContains: String
	storageVolumeHasPrefix: String
	storageVolumeHasSuffix: String
	storageVolumeIsNil: Boolean
	storageVolumeNotNil: Boolean
	storageVolumeEqualFold: String
	storageVolumeContainsFold: String
	"""
	storage_path field predicates
	"""
	storagePath: String
	storagePathNEQ: String
	storagePathIn: [String!]
	storagePathNotIn: [String!]
	storagePathGT: String
	storagePathGTE: String
	storagePathLT: String
	storagePathLTE: String
	storagePathContains: String
	storagePathHasPrefix: String
	storagePathHasSuffix: String
	storagePathIsNil: Boolean
	storagePathNotNil: Boolean
	storagePathEqualFold: String
	storagePathContainsFold: String
}
type FileSearchResult {
	files: [File!]
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
	not: FileWhereInput
	and: [FileWhereInput!]
	or: [FileWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	provided_file_name field predicates
	"""
	providedFileName: String
	providedFileNameNEQ: String
	providedFileNameIn: [String!]
	providedFileNameNotIn: [String!]
	providedFileNameGT: String
	providedFileNameGTE: String
	providedFileNameLT: String
	providedFileNameLTE: String
	providedFileNameContains: String
	providedFileNameHasPrefix: String
	providedFileNameHasSuffix: String
	providedFileNameEqualFold: String
	providedFileNameContainsFold: String
	"""
	provided_file_extension field predicates
	"""
	providedFileExtension: String
	providedFileExtensionNEQ: String
	providedFileExtensionIn: [String!]
	providedFileExtensionNotIn: [String!]
	providedFileExtensionGT: String
	providedFileExtensionGTE: String
	providedFileExtensionLT: String
	providedFileExtensionLTE: String
	providedFileExtensionContains: String
	providedFileExtensionHasPrefix: String
	providedFileExtensionHasSuffix: String
	providedFileExtensionEqualFold: String
	providedFileExtensionContainsFold: String
	"""
	provided_file_size field predicates
	"""
	providedFileSize: Int
	providedFileSizeNEQ: Int
	providedFileSizeIn: [Int!]
	providedFileSizeNotIn: [Int!]
	providedFileSizeGT: Int
	providedFileSizeGTE: Int
	providedFileSizeLT: Int
	providedFileSizeLTE: Int
	providedFileSizeIsNil: Boolean
	providedFileSizeNotNil: Boolean
	"""
	persisted_file_size field predicates
	"""
	persistedFileSize: Int
	persistedFileSizeNEQ: Int
	persistedFileSizeIn: [Int!]
	persistedFileSizeNotIn: [Int!]
	persistedFileSizeGT: Int
	persistedFileSizeGTE: Int
	persistedFileSizeLT: Int
	persistedFileSizeLTE: Int
	persistedFileSizeIsNil: Boolean
	persistedFileSizeNotNil: Boolean
	"""
	detected_mime_type field predicates
	"""
	detectedMimeType: String
	detectedMimeTypeNEQ: String
	detectedMimeTypeIn: [String!]
	detectedMimeTypeNotIn: [String!]
	detectedMimeTypeGT: String
	detectedMimeTypeGTE: String
	detectedMimeTypeLT: String
	detectedMimeTypeLTE: String
	detectedMimeTypeContains: String
	detectedMimeTypeHasPrefix: String
	detectedMimeTypeHasSuffix: String
	detectedMimeTypeIsNil: Boolean
	detectedMimeTypeNotNil: Boolean
	detectedMimeTypeEqualFold: String
	detectedMimeTypeContainsFold: String
	"""
	md5_hash field predicates
	"""
	md5Hash: String
	md5HashNEQ: String
	md5HashIn: [String!]
	md5HashNotIn: [String!]
	md5HashGT: String
	md5HashGTE: String
	md5HashLT: String
	md5HashLTE: String
	md5HashContains: String
	md5HashHasPrefix: String
	md5HashHasSuffix: String
	md5HashIsNil: Boolean
	md5HashNotNil: Boolean
	md5HashEqualFold: String
	md5HashContainsFold: String
	"""
	detected_content_type field predicates
	"""
	detectedContentType: String
	detectedContentTypeNEQ: String
	detectedContentTypeIn: [String!]
	detectedContentTypeNotIn: [String!]
	detectedContentTypeGT: String
	detectedContentTypeGTE: String
	detectedContentTypeLT: String
	detectedContentTypeLTE: String
	detectedContentTypeContains: String
	detectedContentTypeHasPrefix: String
	detectedContentTypeHasSuffix: String
	detectedContentTypeEqualFold: String
	detectedContentTypeContainsFold: String
	"""
	store_key field predicates
	"""
	storeKey: String
	storeKeyNEQ: String
	storeKeyIn: [String!]
	storeKeyNotIn: [String!]
	storeKeyGT: String
	storeKeyGTE: String
	storeKeyLT: String
	storeKeyLTE: String
	storeKeyContains: String
	storeKeyHasPrefix: String
	storeKeyHasSuffix: String
	storeKeyIsNil: Boolean
	storeKeyNotNil: Boolean
	storeKeyEqualFold: String
	storeKeyContainsFold: String
	"""
	category_type field predicates
	"""
	categoryType: String
	categoryTypeNEQ: String
	categoryTypeIn: [String!]
	categoryTypeNotIn: [String!]
	categoryTypeGT: String
	categoryTypeGTE: String
	categoryTypeLT: String
	categoryTypeLTE: String
	categoryTypeContains: String
	categoryTypeHasPrefix: String
	categoryTypeHasSuffix: String
	categoryTypeIsNil: Boolean
	categoryTypeNotNil: Boolean
	categoryTypeEqualFold: String
	categoryTypeContainsFold: String
	"""
	uri field predicates
	"""
	uri: String
	uriNEQ: String
	uriIn: [String!]
	uriNotIn: [String!]
	uriGT: String
	uriGTE: String
	uriLT: String
	uriLTE: String
	uriContains: String
	uriHasPrefix: String
	uriHasSuffix: String
	uriIsNil: Boolean
	uriNotNil: Boolean
	uriEqualFold: String
	uriContainsFold: String
	"""
	storage_scheme field predicates
	"""
	storageScheme: String
	storageSchemeNEQ: String
	storageSchemeIn: [String!]
	storageSchemeNotIn: [String!]
	storageSchemeGT: String
	storageSchemeGTE: String
	storageSchemeLT: String
	storageSchemeLTE: String
	storageSchemeContains: String
	storageSchemeHasPrefix: String
	storageSchemeHasSuffix: String
	storageSchemeIsNil: Boolean
	storageSchemeNotNil: Boolean
	storageSchemeEqualFold: String
	storageSchemeContainsFold: String
	"""
	storage_volume field predicates
	"""
	storageVolume: String
	storageVolumeNEQ: String
	storageVolumeIn: [String!]
	storageVolumeNotIn: [String!]
	storageVolumeGT: String
	storageVolumeGTE: String
	storageVolumeLT: String
	storageVolumeLTE: String
	storageVolumeContains: String
	storageVolumeHasPrefix: String
	storageVolumeHasSuffix: String
	storageVolumeIsNil: Boolean
	storageVolumeNotNil: Boolean
	storageVolumeEqualFold: String
	storageVolumeContainsFold: String
	"""
	storage_path field predicates
	"""
	storagePath: String
	storagePathNEQ: String
	storagePathIn: [String!]
	storagePathNotIn: [String!]
	storagePathGT: String
	storagePathGTE: String
	storagePathLT: String
	storagePathLTE: String
	storagePathContains: String
	storagePathHasPrefix: String
	storagePathHasSuffix: String
	storagePathIsNil: Boolean
	storagePathNotNil: Boolean
	storagePathEqualFold: String
	storagePathContainsFold: String
	"""
	user edge predicates
	"""
	hasUser: Boolean
	hasUserWith: [UserWhereInput!]
	"""
	organization edge predicates
	"""
	hasOrganization: Boolean
	hasOrganizationWith: [OrganizationWhereInput!]
	"""
	group edge predicates
	"""
	hasGroup: Boolean
	hasGroupWith: [GroupWhereInput!]
	"""
	contact edge predicates
	"""
	hasContact: Boolean
	hasContactWith: [ContactWhereInput!]
	"""
	entity edge predicates
	"""
	hasEntity: Boolean
	hasEntityWith: [EntityWhereInput!]
	"""
	user_setting edge predicates
	"""
	hasUserSetting: Boolean
	hasUserSettingWith: [UserSettingWhereInput!]
	"""
	organization_setting edge predicates
	"""
	hasOrganizationSetting: Boolean
	hasOrganizationSettingWith: [OrganizationSettingWhereInput!]
	"""
	template edge predicates
	"""
	hasTemplate: Boolean
	hasTemplateWith: [TemplateWhereInput!]
	"""
	document_data edge predicates
	"""
	hasDocumentData: Boolean
	hasDocumentDataWith: [DocumentDataWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
	"""
	program edge predicates
	"""
	hasProgram: Boolean
	hasProgramWith: [ProgramWhereInput!]
	"""
	evidence edge predicates
	"""
	hasEvidence: Boolean
	hasEvidenceWith: [EvidenceWhereInput!]
}
type Group implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the group - must be unique within the organization
	"""
	name: String!
	"""
	the groups description
	"""
	description: String
	"""
	whether the group is managed by the system
	"""
	isManaged: Boolean
	"""
	the URL to an auto generated gravatar image for the group
	"""
	gravatarLogoURL: String
	"""
	the URL to an image uploaded by the customer for the groups avatar image
	"""
	logoURL: String
	"""
	The group's displayed 'friendly' name
	"""
	displayName: String!
	owner: Organization
	procedureEditors: [Procedure!]
	procedureBlockedGroups: [Procedure!]
	internalPolicyEditors: [InternalPolicy!]
	internalPolicyBlockedGroups: [InternalPolicy!]
	programEditors: [Program!]
	programBlockedGroups: [Program!]
	programViewers: [Program!]
	riskEditors: [Risk!]
	riskBlockedGroups: [Risk!]
	riskViewers: [Risk!]
	controlObjectiveEditors: [ControlObjective!]
	controlObjectiveBlockedGroups: [ControlObjective!]
	controlObjectiveViewers: [ControlObjective!]
	controlEditors: [Control!]
	controlBlockedGroups: [Control!]
	controlViewers: [Control!]
	narrativeEditors: [Narrative!]
	narrativeBlockedGroups: [Narrative!]
	narrativeViewers: [Narrative!]
	setting: GroupSetting
	users: [User!]
	events: [Event!]
	integrations: [Integration!]
	files: [File!]
	tasks: [Task!]
	members: [GroupMembership!]
	"""
	permissions the group provides
	"""
	permissions: [GroupPermissions!]
}
"""
Return response for createBulkGroup mutation
"""
type GroupBulkCreatePayload {
	"""
	Created groups
	"""
	groups: [Group!]
}
"""
A connection to a list of items.
"""
type GroupConnection {
	"""
	A list of edges.
	"""
	edges: [GroupEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createGroup mutation
"""
type GroupCreatePayload {
	"""
	Created group
	"""
	group: Group!
}
"""
Return response for deleteGroup mutation
"""
type GroupDeletePayload {
	"""
	Deleted group ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type GroupEdge {
	"""
	The item at the end of the edge.
	"""
	node: Group
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type GroupHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: GroupHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the group - must be unique within the organization
	"""
	name: String!
	"""
	the groups description
	"""
	description: String
	"""
	whether the group is managed by the system
	"""
	isManaged: Boolean
	"""
	the URL to an auto generated gravatar image for the group
	"""
	gravatarLogoURL: String
	"""
	the URL to an image uploaded by the customer for the groups avatar image
	"""
	logoURL: String
	"""
	The group's displayed 'friendly' name
	"""
	displayName: String!
}
"""
A connection to a list of items.
"""
type GroupHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [GroupHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: GroupHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
GroupHistoryOpType is enum for the field operation
"""
enum GroupHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for GroupHistory connections
"""
input GroupHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order GroupHistories.
	"""
	field: GroupHistoryOrderField!
}
"""
Properties by which GroupHistory connections can be ordered.
"""
enum GroupHistoryOrderField {
	name
	display_name
}
"""
GroupHistoryWhereInput is used for filtering GroupHistory objects.
Input was generated by ent.
"""
input GroupHistoryWhereInput {
	not: GroupHistoryWhereInput
	and: [GroupHistoryWhereInput!]
	or: [GroupHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: GroupHistoryOpType
	operationNEQ: GroupHistoryOpType
	operationIn: [GroupHistoryOpType!]
	operationNotIn: [GroupHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	is_managed field predicates
	"""
	isManaged: Boolean
	isManagedNEQ: Boolean
	isManagedIsNil: Boolean
	isManagedNotNil: Boolean
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameEqualFold: String
	displayNameContainsFold: String
}
"""
GroupMembersInput is used to create members for a group
along with the group creation
"""
input GroupMembersInput {
	role: GroupMembershipRole
	userID: ID!
}
type GroupMembership implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	role: GroupMembershipRole!
	groupID: ID!
	userID: ID!
	group: Group!
	user: User!
	events: [Event!]
}
"""
Return response for createBulkGroupMembership mutation
"""
type GroupMembershipBulkCreatePayload {
	"""
	Created groupMemberships
	"""
	groupMemberships: [GroupMembership!]
}
"""
A connection to a list of items.
"""
type GroupMembershipConnection {
	"""
	A list of edges.
	"""
	edges: [GroupMembershipEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createGroupMembership mutation
"""
type GroupMembershipCreatePayload {
	"""
	Created groupMembership
	"""
	groupMembership: GroupMembership!
}
"""
Return response for deleteGroupMembership mutation
"""
type GroupMembershipDeletePayload {
	"""
	Deleted groupMembership ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type GroupMembershipEdge {
	"""
	The item at the end of the edge.
	"""
	node: GroupMembership
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type GroupMembershipHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: GroupMembershipHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	role: GroupMembershipHistoryRole!
	groupID: String!
	userID: String!
}
"""
A connection to a list of items.
"""
type GroupMembershipHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [GroupMembershipHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupMembershipHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: GroupMembershipHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
GroupMembershipHistoryOpType is enum for the field operation
"""
enum GroupMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
GroupMembershipHistoryRole is enum for the field role
"""
enum GroupMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
}
"""
GroupMembershipHistoryWhereInput is used for filtering GroupMembershipHistory objects.
Input was generated by ent.
"""
input GroupMembershipHistoryWhereInput {
	not: GroupMembershipHistoryWhereInput
	and: [GroupMembershipHistoryWhereInput!]
	or: [GroupMembershipHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: GroupMembershipHistoryOpType
	operationNEQ: GroupMembershipHistoryOpType
	operationIn: [GroupMembershipHistoryOpType!]
	operationNotIn: [GroupMembershipHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	role field predicates
	"""
	role: GroupMembershipHistoryRole
	roleNEQ: GroupMembershipHistoryRole
	roleIn: [GroupMembershipHistoryRole!]
	roleNotIn: [GroupMembershipHistoryRole!]
	"""
	group_id field predicates
	"""
	groupID: String
	groupIDNEQ: String
	groupIDIn: [String!]
	groupIDNotIn: [String!]
	groupIDGT: String
	groupIDGTE: String
	groupIDLT: String
	groupIDLTE: String
	groupIDContains: String
	groupIDHasPrefix: String
	groupIDHasSuffix: String
	groupIDEqualFold: String
	groupIDContainsFold: String
	"""
	user_id field predicates
	"""
	userID: String
	userIDNEQ: String
	userIDIn: [String!]
	userIDNotIn: [String!]
	userIDGT: String
	userIDGTE: String
	userIDLT: String
	userIDLTE: String
	userIDContains: String
	userIDHasPrefix: String
	userIDHasSuffix: String
	userIDEqualFold: String
	userIDContainsFold: String
}
"""
GroupMembershipRole is enum for the field role
"""
enum GroupMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
}
"""
Return response for updateGroupMembership mutation
"""
type GroupMembershipUpdatePayload {
	"""
	Updated groupMembership
	"""
	groupMembership: GroupMembership!
}
"""
GroupMembershipWhereInput is used for filtering GroupMembership objects.
Input was generated by ent.
"""
input GroupMembershipWhereInput {
	not: GroupMembershipWhereInput
	and: [GroupMembershipWhereInput!]
	or: [GroupMembershipWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	role field predicates
	"""
	role: GroupMembershipRole
	roleNEQ: GroupMembershipRole
	roleIn: [GroupMembershipRole!]
	roleNotIn: [GroupMembershipRole!]
	groupID: String
	userID: String
}
"""
Ordering options for Group connections
"""
input GroupOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Groups.
	"""
	field: GroupOrderField!
}
"""
Properties by which Group connections can be ordered.
"""
enum GroupOrderField {
	name
	display_name
}
"""
GroupPermissions contains details for the related object and the permissions
the group provides (or removes in the case of blocked) to the object within the
organization
"""
type GroupPermissions {
	objectType: String!
	permissions: Permission!
	id: ID
	displayID: String
	name: String
}
type GroupSearchResult {
	groups: [Group!]
}
type GroupSetting implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
	"""
	visibility: GroupSettingVisibility!
	"""
	the policy governing ability to freely join a group, whether it requires an invitation, application, or either
	"""
	joinPolicy: GroupSettingJoinPolicy!
	"""
	whether to sync group members to slack groups
	"""
	syncToSlack: Boolean
	"""
	whether to sync group members to github groups
	"""
	syncToGithub: Boolean
	"""
	the group id associated with the settings
	"""
	groupID: ID
	group: Group
}
"""
Return response for createBulkGroupSetting mutation
"""
type GroupSettingBulkCreatePayload {
	"""
	Created groupSettings
	"""
	groupSettings: [GroupSetting!]
}
"""
A connection to a list of items.
"""
type GroupSettingConnection {
	"""
	A list of edges.
	"""
	edges: [GroupSettingEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createGroupSetting mutation
"""
type GroupSettingCreatePayload {
	"""
	Created groupSetting
	"""
	groupSetting: GroupSetting!
}
"""
Return response for deleteGroupSetting mutation
"""
type GroupSettingDeletePayload {
	"""
	Deleted groupSetting ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type GroupSettingEdge {
	"""
	The item at the end of the edge.
	"""
	node: GroupSetting
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type GroupSettingHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: GroupSettingHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
	"""
	visibility: GroupSettingHistoryVisibility!
	"""
	the policy governing ability to freely join a group, whether it requires an invitation, application, or either
	"""
	joinPolicy: GroupSettingHistoryJoinPolicy!
	"""
	whether to sync group members to slack groups
	"""
	syncToSlack: Boolean
	"""
	whether to sync group members to github groups
	"""
	syncToGithub: Boolean
	"""
	the group id associated with the settings
	"""
	groupID: String
}
"""
A connection to a list of items.
"""
type GroupSettingHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [GroupSettingHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type GroupSettingHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: GroupSettingHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
GroupSettingHistoryJoinPolicy is enum for the field join_policy
"""
enum GroupSettingHistoryJoinPolicy @goModel(model: "github.com/theopenlane/core/pkg/enums.JoinPolicy") {
	OPEN
	INVITE_ONLY
	APPLICATION_ONLY
	INVITE_OR_APPLICATION
}
"""
GroupSettingHistoryOpType is enum for the field operation
"""
enum GroupSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
GroupSettingHistoryVisibility is enum for the field visibility
"""
enum GroupSettingHistoryVisibility @goModel(model: "github.com/theopenlane/core/pkg/enums.Visibility") {
	PUBLIC
	PRIVATE
}
"""
GroupSettingHistoryWhereInput is used for filtering GroupSettingHistory objects.
Input was generated by ent.
"""
input GroupSettingHistoryWhereInput {
	not: GroupSettingHistoryWhereInput
	and: [GroupSettingHistoryWhereInput!]
	or: [GroupSettingHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: GroupSettingHistoryOpType
	operationNEQ: GroupSettingHistoryOpType
	operationIn: [GroupSettingHistoryOpType!]
	operationNotIn: [GroupSettingHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	visibility field predicates
	"""
	visibility: GroupSettingHistoryVisibility
	visibilityNEQ: GroupSettingHistoryVisibility
	visibilityIn: [GroupSettingHistoryVisibility!]
	visibilityNotIn: [GroupSettingHistoryVisibility!]
	"""
	join_policy field predicates
	"""
	joinPolicy: GroupSettingHistoryJoinPolicy
	joinPolicyNEQ: GroupSettingHistoryJoinPolicy
	joinPolicyIn: [GroupSettingHistoryJoinPolicy!]
	joinPolicyNotIn: [GroupSettingHistoryJoinPolicy!]
	"""
	sync_to_slack field predicates
	"""
	syncToSlack: Boolean
	syncToSlackNEQ: Boolean
	syncToSlackIsNil: Boolean
	syncToSlackNotNil: Boolean
	"""
	sync_to_github field predicates
	"""
	syncToGithub: Boolean
	syncToGithubNEQ: Boolean
	syncToGithubIsNil: Boolean
	syncToGithubNotNil: Boolean
	"""
	group_id field predicates
	"""
	groupID: String
	groupIDNEQ: String
	groupIDIn: [String!]
	groupIDNotIn: [String!]
	groupIDGT: String
	groupIDGTE: String
	groupIDLT: String
	groupIDLTE: String
	groupIDContains: String
	groupIDHasPrefix: String
	groupIDHasSuffix: String
	groupIDIsNil: Boolean
	groupIDNotNil: Boolean
	groupIDEqualFold: String
	groupIDContainsFold: String
}
"""
GroupSettingJoinPolicy is enum for the field join_policy
"""
enum GroupSettingJoinPolicy @goModel(model: "github.com/theopenlane/core/pkg/enums.JoinPolicy") {
	OPEN
	INVITE_ONLY
	APPLICATION_ONLY
	INVITE_OR_APPLICATION
}
"""
Return response for updateGroupSetting mutation
"""
type GroupSettingUpdatePayload {
	"""
	Updated groupSetting
	"""
	groupSetting: GroupSetting!
}
"""
GroupSettingVisibility is enum for the field visibility
"""
enum GroupSettingVisibility @goModel(model: "github.com/theopenlane/core/pkg/enums.Visibility") {
	PUBLIC
	PRIVATE
}
"""
GroupSettingWhereInput is used for filtering GroupSetting objects.
Input was generated by ent.
"""
input GroupSettingWhereInput {
	not: GroupSettingWhereInput
	and: [GroupSettingWhereInput!]
	or: [GroupSettingWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	visibility field predicates
	"""
	visibility: GroupSettingVisibility
	visibilityNEQ: GroupSettingVisibility
	visibilityIn: [GroupSettingVisibility!]
	visibilityNotIn: [GroupSettingVisibility!]
	"""
	join_policy field predicates
	"""
	joinPolicy: GroupSettingJoinPolicy
	joinPolicyNEQ: GroupSettingJoinPolicy
	joinPolicyIn: [GroupSettingJoinPolicy!]
	joinPolicyNotIn: [GroupSettingJoinPolicy!]
	"""
	sync_to_slack field predicates
	"""
	syncToSlack: Boolean
	syncToSlackNEQ: Boolean
	syncToSlackIsNil: Boolean
	syncToSlackNotNil: Boolean
	"""
	sync_to_github field predicates
	"""
	syncToGithub: Boolean
	syncToGithubNEQ: Boolean
	syncToGithubIsNil: Boolean
	syncToGithubNotNil: Boolean
	"""
	group_id field predicates
	"""
	groupID: ID
	groupIDNEQ: ID
	groupIDIn: [ID!]
	groupIDNotIn: [ID!]
	groupIDGT: ID
	groupIDGTE: ID
	groupIDLT: ID
	groupIDLTE: ID
	groupIDContains: ID
	groupIDHasPrefix: ID
	groupIDHasSuffix: ID
	groupIDIsNil: Boolean
	groupIDNotNil: Boolean
	groupIDEqualFold: ID
	groupIDContainsFold: ID
	"""
	group edge predicates
	"""
	hasGroup: Boolean
	hasGroupWith: [GroupWhereInput!]
}
"""
Return response for updateGroup mutation
"""
type GroupUpdatePayload {
	"""
	Updated group
	"""
	group: Group!
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
	not: GroupWhereInput
	and: [GroupWhereInput!]
	or: [GroupWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	is_managed field predicates
	"""
	isManaged: Boolean
	isManagedNEQ: Boolean
	isManagedIsNil: Boolean
	isManagedNotNil: Boolean
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	procedure_editors edge predicates
	"""
	hasProcedureEditors: Boolean
	hasProcedureEditorsWith: [ProcedureWhereInput!]
	"""
	procedure_blocked_groups edge predicates
	"""
	hasProcedureBlockedGroups: Boolean
	hasProcedureBlockedGroupsWith: [ProcedureWhereInput!]
	"""
	internal_policy_editors edge predicates
	"""
	hasInternalPolicyEditors: Boolean
	hasInternalPolicyEditorsWith: [InternalPolicyWhereInput!]
	"""
	internal_policy_blocked_groups edge predicates
	"""
	hasInternalPolicyBlockedGroups: Boolean
	hasInternalPolicyBlockedGroupsWith: [InternalPolicyWhereInput!]
	"""
	program_editors edge predicates
	"""
	hasProgramEditors: Boolean
	hasProgramEditorsWith: [ProgramWhereInput!]
	"""
	program_blocked_groups edge predicates
	"""
	hasProgramBlockedGroups: Boolean
	hasProgramBlockedGroupsWith: [ProgramWhereInput!]
	"""
	program_viewers edge predicates
	"""
	hasProgramViewers: Boolean
	hasProgramViewersWith: [ProgramWhereInput!]
	"""
	risk_editors edge predicates
	"""
	hasRiskEditors: Boolean
	hasRiskEditorsWith: [RiskWhereInput!]
	"""
	risk_blocked_groups edge predicates
	"""
	hasRiskBlockedGroups: Boolean
	hasRiskBlockedGroupsWith: [RiskWhereInput!]
	"""
	risk_viewers edge predicates
	"""
	hasRiskViewers: Boolean
	hasRiskViewersWith: [RiskWhereInput!]
	"""
	control_objective_editors edge predicates
	"""
	hasControlObjectiveEditors: Boolean
	hasControlObjectiveEditorsWith: [ControlObjectiveWhereInput!]
	"""
	control_objective_blocked_groups edge predicates
	"""
	hasControlObjectiveBlockedGroups: Boolean
	hasControlObjectiveBlockedGroupsWith: [ControlObjectiveWhereInput!]
	"""
	control_objective_viewers edge predicates
	"""
	hasControlObjectiveViewers: Boolean
	hasControlObjectiveViewersWith: [ControlObjectiveWhereInput!]
	"""
	control_editors edge predicates
	"""
	hasControlEditors: Boolean
	hasControlEditorsWith: [ControlWhereInput!]
	"""
	control_blocked_groups edge predicates
	"""
	hasControlBlockedGroups: Boolean
	hasControlBlockedGroupsWith: [ControlWhereInput!]
	"""
	control_viewers edge predicates
	"""
	hasControlViewers: Boolean
	hasControlViewersWith: [ControlWhereInput!]
	"""
	narrative_editors edge predicates
	"""
	hasNarrativeEditors: Boolean
	hasNarrativeEditorsWith: [NarrativeWhereInput!]
	"""
	narrative_blocked_groups edge predicates
	"""
	hasNarrativeBlockedGroups: Boolean
	hasNarrativeBlockedGroupsWith: [NarrativeWhereInput!]
	"""
	narrative_viewers edge predicates
	"""
	hasNarrativeViewers: Boolean
	hasNarrativeViewersWith: [NarrativeWhereInput!]
	"""
	setting edge predicates
	"""
	hasSetting: Boolean
	hasSettingWith: [GroupSettingWhereInput!]
	"""
	users edge predicates
	"""
	hasUsers: Boolean
	hasUsersWith: [UserWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
	"""
	integrations edge predicates
	"""
	hasIntegrations: Boolean
	hasIntegrationsWith: [IntegrationWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	members edge predicates
	"""
	hasMembers: Boolean
	hasMembersWith: [GroupMembershipWhereInput!]
}
type Hush implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	the logical name of the corresponding hush secret or it's general grouping
	"""
	name: String!
	"""
	a description of the hush value or purpose, such as github PAT
	"""
	description: String
	"""
	the kind of secret, such as sshkey, certificate, api token, etc.
	"""
	kind: String
	"""
	the generic name of a secret associated with the organization
	"""
	secretName: String
	"""
	the integration associated with the secret
	"""
	integrations: [Integration!]
	organization: [Organization!]
	events: [Event!]
}
"""
Return response for createBulkHush mutation
"""
type HushBulkCreatePayload {
	"""
	Created hushs
	"""
	hushes: [Hush!]
}
"""
A connection to a list of items.
"""
type HushConnection {
	"""
	A list of edges.
	"""
	edges: [HushEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createHush mutation
"""
type HushCreatePayload {
	"""
	Created hush
	"""
	hush: Hush!
}
"""
Return response for deleteHush mutation
"""
type HushDeletePayload {
	"""
	Deleted hush ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type HushEdge {
	"""
	The item at the end of the edge.
	"""
	node: Hush
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type HushHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: HushHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	the logical name of the corresponding hush secret or it's general grouping
	"""
	name: String!
	"""
	a description of the hush value or purpose, such as github PAT
	"""
	description: String
	"""
	the kind of secret, such as sshkey, certificate, api token, etc.
	"""
	kind: String
	"""
	the generic name of a secret associated with the organization
	"""
	secretName: String
}
"""
A connection to a list of items.
"""
type HushHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [HushHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type HushHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: HushHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
HushHistoryOpType is enum for the field operation
"""
enum HushHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for HushHistory connections
"""
input HushHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order HushHistories.
	"""
	field: HushHistoryOrderField!
}
"""
Properties by which HushHistory connections can be ordered.
"""
enum HushHistoryOrderField {
	name
	kind
}
"""
HushHistoryWhereInput is used for filtering HushHistory objects.
Input was generated by ent.
"""
input HushHistoryWhereInput {
	not: HushHistoryWhereInput
	and: [HushHistoryWhereInput!]
	or: [HushHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: HushHistoryOpType
	operationNEQ: HushHistoryOpType
	operationIn: [HushHistoryOpType!]
	operationNotIn: [HushHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	kind field predicates
	"""
	kind: String
	kindNEQ: String
	kindIn: [String!]
	kindNotIn: [String!]
	kindGT: String
	kindGTE: String
	kindLT: String
	kindLTE: String
	kindContains: String
	kindHasPrefix: String
	kindHasSuffix: String
	kindIsNil: Boolean
	kindNotNil: Boolean
	kindEqualFold: String
	kindContainsFold: String
	"""
	secret_name field predicates
	"""
	secretName: String
	secretNameNEQ: String
	secretNameIn: [String!]
	secretNameNotIn: [String!]
	secretNameGT: String
	secretNameGTE: String
	secretNameLT: String
	secretNameLTE: String
	secretNameContains: String
	secretNameHasPrefix: String
	secretNameHasSuffix: String
	secretNameIsNil: Boolean
	secretNameNotNil: Boolean
	secretNameEqualFold: String
	secretNameContainsFold: String
}
"""
Ordering options for Hush connections
"""
input HushOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Hushes.
	"""
	field: HushOrderField!
}
"""
Properties by which Hush connections can be ordered.
"""
enum HushOrderField {
	name
	kind
}
"""
Return response for updateHush mutation
"""
type HushUpdatePayload {
	"""
	Updated hush
	"""
	hush: Hush!
}
"""
HushWhereInput is used for filtering Hush objects.
Input was generated by ent.
"""
input HushWhereInput {
	not: HushWhereInput
	and: [HushWhereInput!]
	or: [HushWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	kind field predicates
	"""
	kind: String
	kindNEQ: String
	kindIn: [String!]
	kindNotIn: [String!]
	kindGT: String
	kindGTE: String
	kindLT: String
	kindLTE: String
	kindContains: String
	kindHasPrefix: String
	kindHasSuffix: String
	kindIsNil: Boolean
	kindNotNil: Boolean
	kindEqualFold: String
	kindContainsFold: String
	"""
	secret_name field predicates
	"""
	secretName: String
	secretNameNEQ: String
	secretNameIn: [String!]
	secretNameNotIn: [String!]
	secretNameGT: String
	secretNameGTE: String
	secretNameLT: String
	secretNameLTE: String
	secretNameContains: String
	secretNameHasPrefix: String
	secretNameHasSuffix: String
	secretNameIsNil: Boolean
	secretNameNotNil: Boolean
	secretNameEqualFold: String
	secretNameContainsFold: String
	"""
	integrations edge predicates
	"""
	hasIntegrations: Boolean
	hasIntegrationsWith: [IntegrationWhereInput!]
	"""
	organization edge predicates
	"""
	hasOrganization: Boolean
	hasOrganizationWith: [OrganizationWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
}
type Integration implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the integration - must be unique within the organization
	"""
	name: String!
	"""
	a description of the integration
	"""
	description: String
	kind: String
	owner: Organization
	"""
	the secrets associated with the integration
	"""
	secrets: [Hush!]
	events: [Event!]
}
"""
Return response for createBulkIntegration mutation
"""
type IntegrationBulkCreatePayload {
	"""
	Created integrations
	"""
	integrations: [Integration!]
}
"""
A connection to a list of items.
"""
type IntegrationConnection {
	"""
	A list of edges.
	"""
	edges: [IntegrationEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createIntegration mutation
"""
type IntegrationCreatePayload {
	"""
	Created integration
	"""
	integration: Integration!
}
"""
Return response for deleteIntegration mutation
"""
type IntegrationDeletePayload {
	"""
	Deleted integration ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type IntegrationEdge {
	"""
	The item at the end of the edge.
	"""
	node: Integration
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type IntegrationHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: IntegrationHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the integration - must be unique within the organization
	"""
	name: String!
	"""
	a description of the integration
	"""
	description: String
	kind: String
}
"""
A connection to a list of items.
"""
type IntegrationHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [IntegrationHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type IntegrationHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: IntegrationHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
IntegrationHistoryOpType is enum for the field operation
"""
enum IntegrationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for IntegrationHistory connections
"""
input IntegrationHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order IntegrationHistories.
	"""
	field: IntegrationHistoryOrderField!
}
"""
Properties by which IntegrationHistory connections can be ordered.
"""
enum IntegrationHistoryOrderField {
	name
	kind
}
"""
IntegrationHistoryWhereInput is used for filtering IntegrationHistory objects.
Input was generated by ent.
"""
input IntegrationHistoryWhereInput {
	not: IntegrationHistoryWhereInput
	and: [IntegrationHistoryWhereInput!]
	or: [IntegrationHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: IntegrationHistoryOpType
	operationNEQ: IntegrationHistoryOpType
	operationIn: [IntegrationHistoryOpType!]
	operationNotIn: [IntegrationHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	kind field predicates
	"""
	kind: String
	kindNEQ: String
	kindIn: [String!]
	kindNotIn: [String!]
	kindGT: String
	kindGTE: String
	kindLT: String
	kindLTE: String
	kindContains: String
	kindHasPrefix: String
	kindHasSuffix: String
	kindIsNil: Boolean
	kindNotNil: Boolean
	kindEqualFold: String
	kindContainsFold: String
}
"""
Ordering options for Integration connections
"""
input IntegrationOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Integrations.
	"""
	field: IntegrationOrderField!
}
"""
Properties by which Integration connections can be ordered.
"""
enum IntegrationOrderField {
	name
	kind
}
type IntegrationSearchResult {
	integrations: [Integration!]
}
"""
Return response for updateIntegration mutation
"""
type IntegrationUpdatePayload {
	"""
	Updated integration
	"""
	integration: Integration!
}
"""
IntegrationWhereInput is used for filtering Integration objects.
Input was generated by ent.
"""
input IntegrationWhereInput {
	not: IntegrationWhereInput
	and: [IntegrationWhereInput!]
	or: [IntegrationWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	kind field predicates
	"""
	kind: String
	kindNEQ: String
	kindIn: [String!]
	kindNotIn: [String!]
	kindGT: String
	kindGTE: String
	kindLT: String
	kindLTE: String
	kindContains: String
	kindHasPrefix: String
	kindHasSuffix: String
	kindIsNil: Boolean
	kindNotNil: Boolean
	kindEqualFold: String
	kindContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	secrets edge predicates
	"""
	hasSecrets: Boolean
	hasSecretsWith: [HushWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
}
type InternalPolicy implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the policy
	"""
	name: String!
	"""
	description of the policy
	"""
	description: String
	"""
	status of the policy
	"""
	status: String
	"""
	the date the policy should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	"""
	type of the policy
	"""
	policyType: String
	"""
	version of the policy
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the policy
	"""
	background: String
	"""
	json data for the policy document
	"""
	details: Map
	owner: Organization
	"""
	groups that are blocked from viewing or editing the risk
	"""
	blockedGroups: [Group!]
	"""
	provides edit access to the risk to members of the group
	"""
	editors: [Group!]
	controlObjectives: [ControlObjective!]
	controls: [Control!]
	procedures: [Procedure!]
	narratives: [Narrative!]
	tasks: [Task!]
	programs: [Program!]
}
"""
Return response for createBulkInternalPolicy mutation
"""
type InternalPolicyBulkCreatePayload {
	"""
	Created internalPolicys
	"""
	internalPolicies: [InternalPolicy!]
}
"""
A connection to a list of items.
"""
type InternalPolicyConnection {
	"""
	A list of edges.
	"""
	edges: [InternalPolicyEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createInternalPolicy mutation
"""
type InternalPolicyCreatePayload {
	"""
	Created internalPolicy
	"""
	internalPolicy: InternalPolicy!
}
"""
Return response for deleteInternalPolicy mutation
"""
type InternalPolicyDeletePayload {
	"""
	Deleted internalPolicy ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type InternalPolicyEdge {
	"""
	The item at the end of the edge.
	"""
	node: InternalPolicy
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type InternalPolicyHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: InternalPolicyHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the policy
	"""
	name: String!
	"""
	description of the policy
	"""
	description: String
	"""
	status of the policy
	"""
	status: String
	"""
	the date the policy should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	"""
	type of the policy
	"""
	policyType: String
	"""
	version of the policy
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the policy
	"""
	background: String
	"""
	json data for the policy document
	"""
	details: Map
}
"""
A connection to a list of items.
"""
type InternalPolicyHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [InternalPolicyHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type InternalPolicyHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: InternalPolicyHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
InternalPolicyHistoryOpType is enum for the field operation
"""
enum InternalPolicyHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
InternalPolicyHistoryWhereInput is used for filtering InternalPolicyHistory objects.
Input was generated by ent.
"""
input InternalPolicyHistoryWhereInput {
	not: InternalPolicyHistoryWhereInput
	and: [InternalPolicyHistoryWhereInput!]
	or: [InternalPolicyHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: InternalPolicyHistoryOpType
	operationNEQ: InternalPolicyHistoryOpType
	operationIn: [InternalPolicyHistoryOpType!]
	operationNotIn: [InternalPolicyHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	review_due field predicates
	"""
	reviewDue: Time
	reviewDueNEQ: Time
	reviewDueIn: [Time!]
	reviewDueNotIn: [Time!]
	reviewDueGT: Time
	reviewDueGTE: Time
	reviewDueLT: Time
	reviewDueLTE: Time
	reviewDueIsNil: Boolean
	reviewDueNotNil: Boolean
	"""
	policy_type field predicates
	"""
	policyType: String
	policyTypeNEQ: String
	policyTypeIn: [String!]
	policyTypeNotIn: [String!]
	policyTypeGT: String
	policyTypeGTE: String
	policyTypeLT: String
	policyTypeLTE: String
	policyTypeContains: String
	policyTypeHasPrefix: String
	policyTypeHasSuffix: String
	policyTypeIsNil: Boolean
	policyTypeNotNil: Boolean
	policyTypeEqualFold: String
	policyTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	purpose_and_scope field predicates
	"""
	purposeAndScope: String
	purposeAndScopeNEQ: String
	purposeAndScopeIn: [String!]
	purposeAndScopeNotIn: [String!]
	purposeAndScopeGT: String
	purposeAndScopeGTE: String
	purposeAndScopeLT: String
	purposeAndScopeLTE: String
	purposeAndScopeContains: String
	purposeAndScopeHasPrefix: String
	purposeAndScopeHasSuffix: String
	purposeAndScopeIsNil: Boolean
	purposeAndScopeNotNil: Boolean
	purposeAndScopeEqualFold: String
	purposeAndScopeContainsFold: String
	"""
	background field predicates
	"""
	background: String
	backgroundNEQ: String
	backgroundIn: [String!]
	backgroundNotIn: [String!]
	backgroundGT: String
	backgroundGTE: String
	backgroundLT: String
	backgroundLTE: String
	backgroundContains: String
	backgroundHasPrefix: String
	backgroundHasSuffix: String
	backgroundIsNil: Boolean
	backgroundNotNil: Boolean
	backgroundEqualFold: String
	backgroundContainsFold: String
}
type InternalPolicySearchResult {
	internalPolicies: [InternalPolicy!]
}
"""
Return response for updateInternalPolicy mutation
"""
type InternalPolicyUpdatePayload {
	"""
	Updated internalPolicy
	"""
	internalPolicy: InternalPolicy!
}
"""
InternalPolicyWhereInput is used for filtering InternalPolicy objects.
Input was generated by ent.
"""
input InternalPolicyWhereInput {
	not: InternalPolicyWhereInput
	and: [InternalPolicyWhereInput!]
	or: [InternalPolicyWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	review_due field predicates
	"""
	reviewDue: Time
	reviewDueNEQ: Time
	reviewDueIn: [Time!]
	reviewDueNotIn: [Time!]
	reviewDueGT: Time
	reviewDueGTE: Time
	reviewDueLT: Time
	reviewDueLTE: Time
	reviewDueIsNil: Boolean
	reviewDueNotNil: Boolean
	"""
	policy_type field predicates
	"""
	policyType: String
	policyTypeNEQ: String
	policyTypeIn: [String!]
	policyTypeNotIn: [String!]
	policyTypeGT: String
	policyTypeGTE: String
	policyTypeLT: String
	policyTypeLTE: String
	policyTypeContains: String
	policyTypeHasPrefix: String
	policyTypeHasSuffix: String
	policyTypeIsNil: Boolean
	policyTypeNotNil: Boolean
	policyTypeEqualFold: String
	policyTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	purpose_and_scope field predicates
	"""
	purposeAndScope: String
	purposeAndScopeNEQ: String
	purposeAndScopeIn: [String!]
	purposeAndScopeNotIn: [String!]
	purposeAndScopeGT: String
	purposeAndScopeGTE: String
	purposeAndScopeLT: String
	purposeAndScopeLTE: String
	purposeAndScopeContains: String
	purposeAndScopeHasPrefix: String
	purposeAndScopeHasSuffix: String
	purposeAndScopeIsNil: Boolean
	purposeAndScopeNotNil: Boolean
	purposeAndScopeEqualFold: String
	purposeAndScopeContainsFold: String
	"""
	background field predicates
	"""
	background: String
	backgroundNEQ: String
	backgroundIn: [String!]
	backgroundNotIn: [String!]
	backgroundGT: String
	backgroundGTE: String
	backgroundLT: String
	backgroundLTE: String
	backgroundContains: String
	backgroundHasPrefix: String
	backgroundHasSuffix: String
	backgroundIsNil: Boolean
	backgroundNotNil: Boolean
	backgroundEqualFold: String
	backgroundContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	blocked_groups edge predicates
	"""
	hasBlockedGroups: Boolean
	hasBlockedGroupsWith: [GroupWhereInput!]
	"""
	editors edge predicates
	"""
	hasEditors: Boolean
	hasEditorsWith: [GroupWhereInput!]
	"""
	control_objectives edge predicates
	"""
	hasControlObjectives: Boolean
	hasControlObjectivesWith: [ControlObjectiveWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	procedures edge predicates
	"""
	hasProcedures: Boolean
	hasProceduresWith: [ProcedureWhereInput!]
	"""
	narratives edge predicates
	"""
	hasNarratives: Boolean
	hasNarrativesWith: [NarrativeWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
}
type Invite implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the expiration date of the invitation token which defaults to 14 days in the future from creation
	"""
	expires: Time
	"""
	the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization
	"""
	recipient: String!
	"""
	the status of the invitation
	"""
	status: InviteInviteStatus!
	role: InviteRole!
	"""
	the number of attempts made to perform email send of the invitation, maximum of 5
	"""
	sendAttempts: Int!
	"""
	the user who initiated the invitation
	"""
	requestorID: String
	owner: Organization
	events: [Event!]
}
"""
Return response for createBulkInvite mutation
"""
type InviteBulkCreatePayload {
	"""
	Created invites
	"""
	invites: [Invite!]
}
"""
A connection to a list of items.
"""
type InviteConnection {
	"""
	A list of edges.
	"""
	edges: [InviteEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createInvite mutation
"""
type InviteCreatePayload {
	"""
	Created invite
	"""
	invite: Invite!
}
"""
Return response for deleteInvite mutation
"""
type InviteDeletePayload {
	"""
	Deleted invite ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type InviteEdge {
	"""
	The item at the end of the edge.
	"""
	node: Invite
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
InviteInviteStatus is enum for the field status
"""
enum InviteInviteStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.InviteStatus") {
	INVITATION_SENT
	APPROVAL_REQUIRED
	INVITATION_ACCEPTED
	INVITATION_EXPIRED
}
"""
InviteRole is enum for the field role
"""
enum InviteRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
}
"""
Return response for updateInvite mutation
"""
type InviteUpdatePayload {
	"""
	Updated invite
	"""
	invite: Invite!
}
"""
InviteWhereInput is used for filtering Invite objects.
Input was generated by ent.
"""
input InviteWhereInput {
	not: InviteWhereInput
	and: [InviteWhereInput!]
	or: [InviteWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	expires field predicates
	"""
	expires: Time
	expiresNEQ: Time
	expiresIn: [Time!]
	expiresNotIn: [Time!]
	expiresGT: Time
	expiresGTE: Time
	expiresLT: Time
	expiresLTE: Time
	expiresIsNil: Boolean
	expiresNotNil: Boolean
	"""
	recipient field predicates
	"""
	recipient: String
	recipientNEQ: String
	recipientIn: [String!]
	recipientNotIn: [String!]
	recipientGT: String
	recipientGTE: String
	recipientLT: String
	recipientLTE: String
	recipientContains: String
	recipientHasPrefix: String
	recipientHasSuffix: String
	recipientEqualFold: String
	recipientContainsFold: String
	"""
	status field predicates
	"""
	status: InviteInviteStatus
	statusNEQ: InviteInviteStatus
	statusIn: [InviteInviteStatus!]
	statusNotIn: [InviteInviteStatus!]
	"""
	role field predicates
	"""
	role: InviteRole
	roleNEQ: InviteRole
	roleIn: [InviteRole!]
	roleNotIn: [InviteRole!]
	"""
	send_attempts field predicates
	"""
	sendAttempts: Int
	sendAttemptsNEQ: Int
	sendAttemptsIn: [Int!]
	sendAttemptsNotIn: [Int!]
	sendAttemptsGT: Int
	sendAttemptsGTE: Int
	sendAttemptsLT: Int
	sendAttemptsLTE: Int
	"""
	requestor_id field predicates
	"""
	requestorID: String
	requestorIDNEQ: String
	requestorIDIn: [String!]
	requestorIDNotIn: [String!]
	requestorIDGT: String
	requestorIDGTE: String
	requestorIDLT: String
	requestorIDLTE: String
	requestorIDContains: String
	requestorIDHasPrefix: String
	requestorIDHasSuffix: String
	requestorIDIsNil: Boolean
	requestorIDNotNil: Boolean
	requestorIDEqualFold: String
	requestorIDContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
}
"""
A valid JSON string.
"""
scalar JSON
"""
The builtin Map type
"""
scalar Map
type Mutation {
	"""
	Create a new actionPlan
	"""
	createActionPlan(
		"""
		values of the actionPlan
		"""
		input: CreateActionPlanInput!
	): ActionPlanCreatePayload!
	"""
	Create multiple new actionPlans
	"""
	createBulkActionPlan(
		"""
		values of the actionPlan
		"""
		input: [CreateActionPlanInput!]
	): ActionPlanBulkCreatePayload!
	"""
	Create multiple new actionPlans via file upload
	"""
	createBulkCSVActionPlan(
		"""
		csv file containing values of the actionPlan
		"""
		input: Upload!
	): ActionPlanBulkCreatePayload!
	"""
	Update an existing actionPlan
	"""
	updateActionPlan(
		"""
		ID of the actionPlan
		"""
		id: ID!

		"""
		New values for the actionPlan
		"""
		input: UpdateActionPlanInput!
	): ActionPlanUpdatePayload!
	"""
	Delete an existing actionPlan
	"""
	deleteActionPlan(
		"""
		ID of the actionPlan
		"""
		id: ID!
	): ActionPlanDeletePayload!
	"""
	Create a new apiToken
	"""
	createAPIToken(
		"""
		values of the apiToken
		"""
		input: CreateAPITokenInput!
	): APITokenCreatePayload!
	"""
	Create multiple new apiTokens
	"""
	createBulkAPIToken(
		"""
		values of the apiToken
		"""
		input: [CreateAPITokenInput!]
	): APITokenBulkCreatePayload!
	"""
	Create multiple new apiTokens via file upload
	"""
	createBulkCSVAPIToken(
		"""
		csv file containing values of the apiToken
		"""
		input: Upload!
	): APITokenBulkCreatePayload!
	"""
	Update an existing apiToken
	"""
	updateAPIToken(
		"""
		ID of the apiToken
		"""
		id: ID!

		"""
		New values for the apiToken
		"""
		input: UpdateAPITokenInput!
	): APITokenUpdatePayload!
	"""
	Delete an existing apiToken
	"""
	deleteAPIToken(
		"""
		ID of the apiToken
		"""
		id: ID!
	): APITokenDeletePayload!
	"""
	Create a new contact
	"""
	createContact(
		"""
		values of the contact
		"""
		input: CreateContactInput!
	): ContactCreatePayload!
	"""
	Create multiple new contacts
	"""
	createBulkContact(
		"""
		values of the contact
		"""
		input: [CreateContactInput!]
	): ContactBulkCreatePayload!
	"""
	Create multiple new contacts via file upload
	"""
	createBulkCSVContact(
		"""
		csv file containing values of the contact
		"""
		input: Upload!
	): ContactBulkCreatePayload!
	"""
	Update an existing contact
	"""
	updateContact(
		"""
		ID of the contact
		"""
		id: ID!

		"""
		New values for the contact
		"""
		input: UpdateContactInput!
	): ContactUpdatePayload!
	"""
	Delete an existing contact
	"""
	deleteContact(
		"""
		ID of the contact
		"""
		id: ID!
	): ContactDeletePayload!
	"""
	Create a new control
	"""
	createControl(
		"""
		values of the control
		"""
		input: CreateControlInput!
	): ControlCreatePayload!
	"""
	Create multiple new controls
	"""
	createBulkControl(
		"""
		values of the control
		"""
		input: [CreateControlInput!]
	): ControlBulkCreatePayload!
	"""
	Create multiple new controls via file upload
	"""
	createBulkCSVControl(
		"""
		csv file containing values of the control
		"""
		input: Upload!
	): ControlBulkCreatePayload!
	"""
	Update an existing control
	"""
	updateControl(
		"""
		ID of the control
		"""
		id: ID!

		"""
		New values for the control
		"""
		input: UpdateControlInput!
	): ControlUpdatePayload!
	"""
	Delete an existing control
	"""
	deleteControl(
		"""
		ID of the control
		"""
		id: ID!
	): ControlDeletePayload!
	"""
	Create a new controlObjective
	"""
	createControlObjective(
		"""
		values of the controlObjective
		"""
		input: CreateControlObjectiveInput!
	): ControlObjectiveCreatePayload!
	"""
	Create multiple new controlObjectives
	"""
	createBulkControlObjective(
		"""
		values of the controlObjective
		"""
		input: [CreateControlObjectiveInput!]
	): ControlObjectiveBulkCreatePayload!
	"""
	Create multiple new controlObjectives via file upload
	"""
	createBulkCSVControlObjective(
		"""
		csv file containing values of the controlObjective
		"""
		input: Upload!
	): ControlObjectiveBulkCreatePayload!
	"""
	Update an existing controlObjective
	"""
	updateControlObjective(
		"""
		ID of the controlObjective
		"""
		id: ID!

		"""
		New values for the controlObjective
		"""
		input: UpdateControlObjectiveInput!
	): ControlObjectiveUpdatePayload!
	"""
	Delete an existing controlObjective
	"""
	deleteControlObjective(
		"""
		ID of the controlObjective
		"""
		id: ID!
	): ControlObjectiveDeletePayload!
	"""
	Create a new documentData
	"""
	createDocumentData(
		"""
		values of the documentData
		"""
		input: CreateDocumentDataInput!
	): DocumentDataCreatePayload!
	"""
	Create multiple new documentData
	"""
	createBulkDocumentData(
		"""
		values of the documentData
		"""
		input: [CreateDocumentDataInput!]
	): DocumentDataBulkCreatePayload!
	"""
	Create multiple new documentData via file upload
	"""
	createBulkCSVDocumentData(
		"""
		csv file containing values of the documentData
		"""
		input: Upload!
	): DocumentDataBulkCreatePayload!
	"""
	Update an existing documentData
	"""
	updateDocumentData(
		"""
		ID of the documentData
		"""
		id: ID!

		"""
		New values for the documentData
		"""
		input: UpdateDocumentDataInput!
	): DocumentDataUpdatePayload!
	"""
	Delete an existing documentData
	"""
	deleteDocumentData(
		"""
		ID of the documentData
		"""
		id: ID!
	): DocumentDataDeletePayload!
	"""
	Create a new entity
	"""
	createEntity(
		"""
		values of the entity
		"""
		input: CreateEntityInput!
	): EntityCreatePayload!
	"""
	Create multiple new entities
	"""
	createBulkEntity(
		"""
		values of the entity
		"""
		input: [CreateEntityInput!]
	): EntityBulkCreatePayload!
	"""
	Create multiple new entities via file upload
	"""
	createBulkCSVEntity(
		"""
		csv file containing values of the entity
		"""
		input: Upload!
	): EntityBulkCreatePayload!
	"""
	Update an existing entity
	"""
	updateEntity(
		"""
		ID of the entity
		"""
		id: ID!

		"""
		New values for the entity
		"""
		input: UpdateEntityInput!
	): EntityUpdatePayload!
	"""
	Delete an existing entity
	"""
	deleteEntity(
		"""
		ID of the entity
		"""
		id: ID!
	): EntityDeletePayload!
	"""
	Create a new entityType
	"""
	createEntityType(
		"""
		values of the entityType
		"""
		input: CreateEntityTypeInput!
	): EntityTypeCreatePayload!
	"""
	Create multiple new entityTypes
	"""
	createBulkEntityType(
		"""
		values of the entityType
		"""
		input: [CreateEntityTypeInput!]
	): EntityTypeBulkCreatePayload!
	"""
	Create multiple new entityTypes via file upload
	"""
	createBulkCSVEntityType(
		"""
		csv file containing values of the entityType
		"""
		input: Upload!
	): EntityTypeBulkCreatePayload!
	"""
	Update an existing entityType
	"""
	updateEntityType(
		"""
		ID of the entityType
		"""
		id: ID!

		"""
		New values for the entityType
		"""
		input: UpdateEntityTypeInput!
	): EntityTypeUpdatePayload!
	"""
	Delete an existing entityType
	"""
	deleteEntityType(
		"""
		ID of the entityType
		"""
		id: ID!
	): EntityTypeDeletePayload!
	"""
	Create a new event
	"""
	createEvent(
		"""
		values of the event
		"""
		input: CreateEventInput!
	): EventCreatePayload!
	"""
	Create multiple new events
	"""
	createBulkEvent(
		"""
		values of the event
		"""
		input: [CreateEventInput!]
	): EventBulkCreatePayload!
	"""
	Create multiple new events via file upload
	"""
	createBulkCSVEvent(
		"""
		csv file containing values of the event
		"""
		input: Upload!
	): EventBulkCreatePayload!
	"""
	Update an existing event
	"""
	updateEvent(
		"""
		ID of the event
		"""
		id: ID!

		"""
		New values for the event
		"""
		input: UpdateEventInput!
	): EventUpdatePayload!
	"""
	Delete an existing event
	"""
	deleteEvent(
		"""
		ID of the event
		"""
		id: ID!
	): EventDeletePayload!
	"""
	Create a new evidence
	"""
	createEvidence(
		"""
		values of the evidence
		"""
		input: CreateEvidenceInput!
	evidenceFiles: [Upload!]): EvidenceCreatePayload!
	"""
	Update an existing evidence
	"""
	updateEvidence(
		"""
		ID of the evidence
		"""
		id: ID!

		"""
		New values for the evidence
		"""
		input: UpdateEvidenceInput!
	evidenceFiles: [Upload!]): EvidenceUpdatePayload!
	"""
	Delete an existing evidence
	"""
	deleteEvidence(
		"""
		ID of the evidence
		"""
		id: ID!
	): EvidenceDeletePayload!
	"""
	Delete an existing file
	"""
	deleteFile(
		"""
		ID of the file
		"""
		id: ID!
	): FileDeletePayload!
	"""
	Create a new group
	"""
	createGroup(
		"""
		values of the group
		"""
		input: CreateGroupInput!
	): GroupCreatePayload!
	"""
	Create multiple new groups
	"""
	createBulkGroup(
		"""
		values of the group
		"""
		input: [CreateGroupInput!]
	): GroupBulkCreatePayload!
	"""
	Create multiple new groups via file upload
	"""
	createBulkCSVGroup(
		"""
		csv file containing values of the group
		"""
		input: Upload!
	): GroupBulkCreatePayload!
	"""
	Update an existing group
	"""
	updateGroup(
		"""
		ID of the group
		"""
		id: ID!

		"""
		New values for the group
		"""
		input: UpdateGroupInput!
	): GroupUpdatePayload!
	"""
	Delete an existing group
	"""
	deleteGroup(
		"""
		ID of the group
		"""
		id: ID!
	): GroupDeletePayload!
	"""
	Create a new group with members
	"""
	createGroupWithMembers(
		"""
		values of the group to be created
		"""
		groupInput: CreateGroupInput!

		"""
		group members to be added to the group
		"""
		members: [GroupMembersInput!]
	): GroupCreatePayload!
	"""
	Create a new group with members
	"""
	createGroupByClone(
		"""
		values of the group
		"""
		groupInput: CreateGroupInput!

		"""
		group members to be added to the group
		"""
		members: [GroupMembersInput!]

		"""
		inheritGroupPermissions allows a group to be created with the same permissions
		as the specified group ID
		"""
		inheritGroupPermissions: ID

		"""
		cloneGroupMembers allows a group to be created with the same group members
		as the specified group ID
		"""
		cloneGroupMembers: ID
	): GroupCreatePayload!
	"""
	Create a new groupMembership
	"""
	createGroupMembership(
		"""
		values of the groupMembership
		"""
		input: CreateGroupMembershipInput!
	): GroupMembershipCreatePayload!
	"""
	Create multiple new groupMemberships
	"""
	createBulkGroupMembership(
		"""
		values of the groupMembership
		"""
		input: [CreateGroupMembershipInput!]
	): GroupMembershipBulkCreatePayload!
	"""
	Create multiple new groupMemberships via file upload
	"""
	createBulkCSVGroupMembership(
		"""
		csv file containing values of the groupMembership
		"""
		input: Upload!
	): GroupMembershipBulkCreatePayload!
	"""
	Update an existing groupMembership
	"""
	updateGroupMembership(
		"""
		ID of the groupMembership
		"""
		id: ID!

		"""
		New values for the groupMembership
		"""
		input: UpdateGroupMembershipInput!
	): GroupMembershipUpdatePayload!
	"""
	Delete an existing groupMembership
	"""
	deleteGroupMembership(
		"""
		ID of the groupMembership
		"""
		id: ID!
	): GroupMembershipDeletePayload!
	"""
	Create a new groupSetting
	"""
	createGroupSetting(
		"""
		values of the groupSetting
		"""
		input: CreateGroupSettingInput!
	): GroupSettingCreatePayload!
	"""
	Create multiple new groupSettings
	"""
	createBulkGroupSetting(
		"""
		values of the groupSetting
		"""
		input: [CreateGroupSettingInput!]
	): GroupSettingBulkCreatePayload!
	"""
	Create multiple new groupSettings via file upload
	"""
	createBulkCSVGroupSetting(
		"""
		csv file containing values of the groupSetting
		"""
		input: Upload!
	): GroupSettingBulkCreatePayload!
	"""
	Update an existing groupSetting
	"""
	updateGroupSetting(
		"""
		ID of the groupSetting
		"""
		id: ID!

		"""
		New values for the groupSetting
		"""
		input: UpdateGroupSettingInput!
	): GroupSettingUpdatePayload!
	"""
	Delete an existing groupSetting
	"""
	deleteGroupSetting(
		"""
		ID of the groupSetting
		"""
		id: ID!
	): GroupSettingDeletePayload!
	"""
	Create a new hush
	"""
	createHush(
		"""
		values of the hush
		"""
		input: CreateHushInput!
	): HushCreatePayload!
	"""
	Create multiple new hushs
	"""
	createBulkHush(
		"""
		values of the hush
		"""
		input: [CreateHushInput!]
	): HushBulkCreatePayload!
	"""
	Create multiple new hushs via file upload
	"""
	createBulkCSVHush(
		"""
		csv file containing values of the hush
		"""
		input: Upload!
	): HushBulkCreatePayload!
	"""
	Update an existing hush
	"""
	updateHush(
		"""
		ID of the hush
		"""
		id: ID!

		"""
		New values for the hush
		"""
		input: UpdateHushInput!
	): HushUpdatePayload!
	"""
	Delete an existing hush
	"""
	deleteHush(
		"""
		ID of the hush
		"""
		id: ID!
	): HushDeletePayload!
	"""
	Create a new integration
	"""
	createIntegration(
		"""
		values of the integration
		"""
		input: CreateIntegrationInput!
	): IntegrationCreatePayload!
	"""
	Create multiple new integrations
	"""
	createBulkIntegration(
		"""
		values of the integration
		"""
		input: [CreateIntegrationInput!]
	): IntegrationBulkCreatePayload!
	"""
	Create multiple new integrations via file upload
	"""
	createBulkCSVIntegration(
		"""
		csv file containing values of the integration
		"""
		input: Upload!
	): IntegrationBulkCreatePayload!
	"""
	Update an existing integration
	"""
	updateIntegration(
		"""
		ID of the integration
		"""
		id: ID!

		"""
		New values for the integration
		"""
		input: UpdateIntegrationInput!
	): IntegrationUpdatePayload!
	"""
	Delete an existing integration
	"""
	deleteIntegration(
		"""
		ID of the integration
		"""
		id: ID!
	): IntegrationDeletePayload!
	"""
	Create a new internalPolicy
	"""
	createInternalPolicy(
		"""
		values of the internalPolicy
		"""
		input: CreateInternalPolicyInput!
	): InternalPolicyCreatePayload!
	"""
	Create multiple new internalPolicys
	"""
	createBulkInternalPolicy(
		"""
		values of the internalPolicy
		"""
		input: [CreateInternalPolicyInput!]
	): InternalPolicyBulkCreatePayload!
	"""
	Create multiple new internalPolicys via file upload
	"""
	createBulkCSVInternalPolicy(
		"""
		csv file containing values of the internalPolicy
		"""
		input: Upload!
	): InternalPolicyBulkCreatePayload!
	"""
	Update an existing internalPolicy
	"""
	updateInternalPolicy(
		"""
		ID of the internalPolicy
		"""
		id: ID!

		"""
		New values for the internalPolicy
		"""
		input: UpdateInternalPolicyInput!
	): InternalPolicyUpdatePayload!
	"""
	Delete an existing internalPolicy
	"""
	deleteInternalPolicy(
		"""
		ID of the internalPolicy
		"""
		id: ID!
	): InternalPolicyDeletePayload!
	"""
	Create a new invite
	"""
	createInvite(
		"""
		values of the invite
		"""
		input: CreateInviteInput!
	): InviteCreatePayload!
	"""
	Create multiple new invites
	"""
	createBulkInvite(
		"""
		values of the invite
		"""
		input: [CreateInviteInput!]
	): InviteBulkCreatePayload!
	"""
	Create multiple new invites via file upload
	"""
	createBulkCSVInvite(
		"""
		csv file containing values of the invite
		"""
		input: Upload!
	): InviteBulkCreatePayload!
	"""
	Update an existing invite
	"""
	updateInvite(
		"""
		ID of the invite
		"""
		id: ID!

		"""
		New values for the invite
		"""
		input: UpdateInviteInput!
	): InviteUpdatePayload!
	"""
	Delete an existing invite
	"""
	deleteInvite(
		"""
		ID of the invite
		"""
		id: ID!
	): InviteDeletePayload!
	"""
	Create a new narrative
	"""
	createNarrative(
		"""
		values of the narrative
		"""
		input: CreateNarrativeInput!
	): NarrativeCreatePayload!
	"""
	Create multiple new narratives
	"""
	createBulkNarrative(
		"""
		values of the narrative
		"""
		input: [CreateNarrativeInput!]
	): NarrativeBulkCreatePayload!
	"""
	Create multiple new narratives via file upload
	"""
	createBulkCSVNarrative(
		"""
		csv file containing values of the narrative
		"""
		input: Upload!
	): NarrativeBulkCreatePayload!
	"""
	Update an existing narrative
	"""
	updateNarrative(
		"""
		ID of the narrative
		"""
		id: ID!

		"""
		New values for the narrative
		"""
		input: UpdateNarrativeInput!
	): NarrativeUpdatePayload!
	"""
	Delete an existing narrative
	"""
	deleteNarrative(
		"""
		ID of the narrative
		"""
		id: ID!
	): NarrativeDeletePayload!
	"""
	Update an existing task comment
	"""
	updateTaskComment(
		"""
		ID of the comment
		"""
		id: ID!

		"""
		New values for the comment
		"""
		input: UpdateNoteInput!
	): TaskUpdatePayload!
	"""
	Create a new onboarding
	"""
	createOnboarding(
		"""
		values of the onboarding
		"""
		input: CreateOnboardingInput!
	): OnboardingCreatePayload!
	"""
	Create a new organization
	"""
	createOrganization(
		"""
		values of the organization
		"""
		input: CreateOrganizationInput!
	avatarFile: Upload): OrganizationCreatePayload!
	"""
	Update an existing organization
	"""
	updateOrganization(
		"""
		ID of the organization
		"""
		id: ID!

		"""
		New values for the organization
		"""
		input: UpdateOrganizationInput!
	avatarFile: Upload): OrganizationUpdatePayload!
	"""
	Delete an existing organization
	"""
	deleteOrganization(
		"""
		ID of the organization
		"""
		id: ID!
	): OrganizationDeletePayload!
	"""
	Create a new organizationSetting
	"""
	createOrganizationSetting(
		"""
		values of the organizationSetting
		"""
		input: CreateOrganizationSettingInput!
	): OrganizationSettingCreatePayload!
	"""
	Create multiple new organizationSettings
	"""
	createBulkOrganizationSetting(
		"""
		values of the organizationSetting
		"""
		input: [CreateOrganizationSettingInput!]
	): OrganizationSettingBulkCreatePayload!
	"""
	Create multiple new organizationSettings via file upload
	"""
	createBulkCSVOrganizationSetting(
		"""
		csv file containing values of the organizationSetting
		"""
		input: Upload!
	): OrganizationSettingBulkCreatePayload!
	"""
	Update an existing organizationSetting
	"""
	updateOrganizationSetting(
		"""
		ID of the organizationSetting
		"""
		id: ID!

		"""
		New values for the organizationSetting
		"""
		input: UpdateOrganizationSettingInput!
	): OrganizationSettingUpdatePayload!
	"""
	Delete an existing organizationSetting
	"""
	deleteOrganizationSetting(
		"""
		ID of the organizationSetting
		"""
		id: ID!
	): OrganizationSettingDeletePayload!
	"""
	Create a new organization with members
	"""
	createOrganizationWithMembers(
		"""
		values of the new organization to be created
		"""
		organizationInput: CreateOrganizationInput!

		"""
		avatar file to Upload
		"""
		avatarFile: Upload

		"""
		organization members to be added to the new org
		"""
		members: [OrgMembersInput!]
	): OrganizationCreatePayload!
	"""
	Create a new orgMembership
	"""
	createOrgMembership(
		"""
		values of the orgMembership
		"""
		input: CreateOrgMembershipInput!
	): OrgMembershipCreatePayload!
	"""
	Create multiple new orgMemberships
	"""
	createBulkOrgMembership(
		"""
		values of the orgMembership
		"""
		input: [CreateOrgMembershipInput!]
	): OrgMembershipBulkCreatePayload!
	"""
	Create multiple new orgMemberships via file upload
	"""
	createBulkCSVOrgMembership(
		"""
		csv file containing values of the orgMembership
		"""
		input: Upload!
	): OrgMembershipBulkCreatePayload!
	"""
	Update an existing orgMembership
	"""
	updateOrgMembership(
		"""
		ID of the orgMembership
		"""
		id: ID!

		"""
		New values for the orgMembership
		"""
		input: UpdateOrgMembershipInput!
	): OrgMembershipUpdatePayload!
	"""
	Delete an existing orgMembership
	"""
	deleteOrgMembership(
		"""
		ID of the orgMembership
		"""
		id: ID!
	): OrgMembershipDeletePayload!
	"""
	Create a new personalAccessToken
	"""
	createPersonalAccessToken(
		"""
		values of the personalAccessToken
		"""
		input: CreatePersonalAccessTokenInput!
	): PersonalAccessTokenCreatePayload!
	"""
	Create multiple new personalAccessTokens
	"""
	createBulkPersonalAccessToken(
		"""
		values of the personalAccessToken
		"""
		input: [CreatePersonalAccessTokenInput!]
	): PersonalAccessTokenBulkCreatePayload!
	"""
	Create multiple new personalAccessTokens via file upload
	"""
	createBulkCSVPersonalAccessToken(
		"""
		csv file containing values of the personalAccessToken
		"""
		input: Upload!
	): PersonalAccessTokenBulkCreatePayload!
	"""
	Update an existing personalAccessToken
	"""
	updatePersonalAccessToken(
		"""
		ID of the personalAccessToken
		"""
		id: ID!

		"""
		New values for the personalAccessToken
		"""
		input: UpdatePersonalAccessTokenInput!
	): PersonalAccessTokenUpdatePayload!
	"""
	Delete an existing personalAccessToken
	"""
	deletePersonalAccessToken(
		"""
		ID of the personalAccessToken
		"""
		id: ID!
	): PersonalAccessTokenDeletePayload!
	"""
	Create a new procedure
	"""
	createProcedure(
		"""
		values of the procedure
		"""
		input: CreateProcedureInput!
	): ProcedureCreatePayload!
	"""
	Create multiple new procedures
	"""
	createBulkProcedure(
		"""
		values of the procedure
		"""
		input: [CreateProcedureInput!]
	): ProcedureBulkCreatePayload!
	"""
	Create multiple new procedures via file upload
	"""
	createBulkCSVProcedure(
		"""
		csv file containing values of the procedure
		"""
		input: Upload!
	): ProcedureBulkCreatePayload!
	"""
	Update an existing procedure
	"""
	updateProcedure(
		"""
		ID of the procedure
		"""
		id: ID!

		"""
		New values for the procedure
		"""
		input: UpdateProcedureInput!
	): ProcedureUpdatePayload!
	"""
	Delete an existing procedure
	"""
	deleteProcedure(
		"""
		ID of the procedure
		"""
		id: ID!
	): ProcedureDeletePayload!
	"""
	Create a new program
	"""
	createProgram(
		"""
		values of the program
		"""
		input: CreateProgramInput!
	): ProgramCreatePayload!
	"""
	Create multiple new programs
	"""
	createBulkProgram(
		"""
		values of the program
		"""
		input: [CreateProgramInput!]
	): ProgramBulkCreatePayload!
	"""
	Create multiple new programs via file upload
	"""
	createBulkCSVProgram(
		"""
		csv file containing values of the program
		"""
		input: Upload!
	): ProgramBulkCreatePayload!
	"""
	Update an existing program
	"""
	updateProgram(
		"""
		ID of the program
		"""
		id: ID!

		"""
		New values for the program
		"""
		input: UpdateProgramInput!
	): ProgramUpdatePayload!
	"""
	Delete an existing program
	"""
	deleteProgram(
		"""
		ID of the program
		"""
		id: ID!
	): ProgramDeletePayload!
	"""
	Create a new program with members
	"""
	createProgramWithMembers(
		"""
		values of the program
		"""
		input: CreateProgramWithMembersInput!
	): ProgramCreatePayload!
	"""
	Create a new program with options for edges (members, policies, procedures, risks, controls, standard)
	"""
	createFullProgram(
		"""
		values of the program
		"""
		input: CreateFullProgramInput!
	): ProgramCreatePayload!
	"""
	Create a controls with subcontrols
	"""
	createControlWithSubcontrols(
		"""
		values of the program
		"""
		input: CreateControlWithSubcontrolsInput!
	): ControlCreatePayload!
	"""
	Create a new programMembership
	"""
	createProgramMembership(
		"""
		values of the programMembership
		"""
		input: CreateProgramMembershipInput!
	): ProgramMembershipCreatePayload!
	"""
	Create multiple new programMemberships
	"""
	createBulkProgramMembership(
		"""
		values of the programMembership
		"""
		input: [CreateProgramMembershipInput!]
	): ProgramMembershipBulkCreatePayload!
	"""
	Create multiple new programMemberships via file upload
	"""
	createBulkCSVProgramMembership(
		"""
		csv file containing values of the programMembership
		"""
		input: Upload!
	): ProgramMembershipBulkCreatePayload!
	"""
	Update an existing programMembership
	"""
	updateProgramMembership(
		"""
		ID of the programMembership
		"""
		id: ID!

		"""
		New values for the programMembership
		"""
		input: UpdateProgramMembershipInput!
	): ProgramMembershipUpdatePayload!
	"""
	Delete an existing programMembership
	"""
	deleteProgramMembership(
		"""
		ID of the programMembership
		"""
		id: ID!
	): ProgramMembershipDeletePayload!
	"""
	Create a new risk
	"""
	createRisk(
		"""
		values of the risk
		"""
		input: CreateRiskInput!
	): RiskCreatePayload!
	"""
	Create multiple new risks
	"""
	createBulkRisk(
		"""
		values of the risk
		"""
		input: [CreateRiskInput!]
	): RiskBulkCreatePayload!
	"""
	Create multiple new risks via file upload
	"""
	createBulkCSVRisk(
		"""
		csv file containing values of the risk
		"""
		input: Upload!
	): RiskBulkCreatePayload!
	"""
	Update an existing risk
	"""
	updateRisk(
		"""
		ID of the risk
		"""
		id: ID!

		"""
		New values for the risk
		"""
		input: UpdateRiskInput!
	): RiskUpdatePayload!
	"""
	Delete an existing risk
	"""
	deleteRisk(
		"""
		ID of the risk
		"""
		id: ID!
	): RiskDeletePayload!
	"""
	Create a new standard
	"""
	createStandard(
		"""
		values of the standard
		"""
		input: CreateStandardInput!
	): StandardCreatePayload!
	"""
	Create multiple new standards
	"""
	createBulkStandard(
		"""
		values of the standard
		"""
		input: [CreateStandardInput!]
	): StandardBulkCreatePayload!
	"""
	Create multiple new standards via file upload
	"""
	createBulkCSVStandard(
		"""
		csv file containing values of the standard
		"""
		input: Upload!
	): StandardBulkCreatePayload!
	"""
	Update an existing standard
	"""
	updateStandard(
		"""
		ID of the standard
		"""
		id: ID!

		"""
		New values for the standard
		"""
		input: UpdateStandardInput!
	): StandardUpdatePayload!
	"""
	Delete an existing standard
	"""
	deleteStandard(
		"""
		ID of the standard
		"""
		id: ID!
	): StandardDeletePayload!
	"""
	Create a new subcontrol
	"""
	createSubcontrol(
		"""
		values of the subcontrol
		"""
		input: CreateSubcontrolInput!
	): SubcontrolCreatePayload!
	"""
	Create multiple new subcontrols
	"""
	createBulkSubcontrol(
		"""
		values of the subcontrol
		"""
		input: [CreateSubcontrolInput!]
	): SubcontrolBulkCreatePayload!
	"""
	Create multiple new subcontrols via file upload
	"""
	createBulkCSVSubcontrol(
		"""
		csv file containing values of the subcontrol
		"""
		input: Upload!
	): SubcontrolBulkCreatePayload!
	"""
	Update an existing subcontrol
	"""
	updateSubcontrol(
		"""
		ID of the subcontrol
		"""
		id: ID!

		"""
		New values for the subcontrol
		"""
		input: UpdateSubcontrolInput!
	): SubcontrolUpdatePayload!
	"""
	Delete an existing subcontrol
	"""
	deleteSubcontrol(
		"""
		ID of the subcontrol
		"""
		id: ID!
	): SubcontrolDeletePayload!
	"""
	Create a new subscriber
	"""
	createSubscriber(
		"""
		values of the subscriber
		"""
		input: CreateSubscriberInput!
	): SubscriberCreatePayload!
	"""
	Create new subscribers
	"""
	createBulkSubscriber(
		"""
		values of the subscriber
		"""
		input: [CreateSubscriberInput!]
	): SubscriberBulkCreatePayload!
	"""
	Create new subscribers via CSV file
	"""
	createBulkCSVSubscriber(
		"""
		values of the subscriber
		"""
		input: Upload!
	): SubscriberBulkCreatePayload!
	"""
	Update an existing subscriber
	"""
	updateSubscriber(
		"""
		Email of the subscriber
		"""
		email: String!

		"""
		New values for the subscriber
		"""
		input: UpdateSubscriberInput!
	): SubscriberUpdatePayload!
	"""
	Delete an existing subscriber by Email
	"""
	deleteSubscriber(
		"""
		Email of the subscriber
		"""
		email: String!

		"""
		OwnerID of the subscriber
		"""
		ownerID: ID
	): SubscriberDeletePayload!
	"""
	Create a new task
	"""
	createTask(
		"""
		values of the task
		"""
		input: CreateTaskInput!
	): TaskCreatePayload!
	"""
	Create multiple new tasks
	"""
	createBulkTask(
		"""
		values of the task
		"""
		input: [CreateTaskInput!]
	): TaskBulkCreatePayload!
	"""
	Create multiple new tasks via file upload
	"""
	createBulkCSVTask(
		"""
		csv file containing values of the task
		"""
		input: Upload!
	): TaskBulkCreatePayload!
	"""
	Update an existing task
	"""
	updateTask(
		"""
		ID of the task
		"""
		id: ID!

		"""
		New values for the task
		"""
		input: UpdateTaskInput!
	): TaskUpdatePayload!
	"""
	Delete an existing task
	"""
	deleteTask(
		"""
		ID of the task
		"""
		id: ID!
	): TaskDeletePayload!
	"""
	Create a new template
	"""
	createTemplate(
		"""
		values of the template
		"""
		input: CreateTemplateInput!
	): TemplateCreatePayload!
	"""
	Create multiple new templates
	"""
	createBulkTemplate(
		"""
		values of the template
		"""
		input: [CreateTemplateInput!]
	): TemplateBulkCreatePayload!
	"""
	Create multiple new templates via file upload
	"""
	createBulkCSVTemplate(
		"""
		csv file containing values of the template
		"""
		input: Upload!
	): TemplateBulkCreatePayload!
	"""
	Update an existing template
	"""
	updateTemplate(
		"""
		ID of the template
		"""
		id: ID!

		"""
		New values for the template
		"""
		input: UpdateTemplateInput!
	): TemplateUpdatePayload!
	"""
	Delete an existing template
	"""
	deleteTemplate(
		"""
		ID of the template
		"""
		id: ID!
	): TemplateDeletePayload!
	"""
	Create a new tfaSetting
	"""
	createTFASetting(
		"""
		values of the tfaSetting
		"""
		input: CreateTFASettingInput!
	): TFASettingCreatePayload!
	"""
	Update an existing tfaSetting
	"""
	updateTFASetting(
		"""
		New values for the tfaSetting
		"""
		input: UpdateTFASettingInput!
	): TFASettingUpdatePayload!
	"""
	Create a new user
	"""
	createUser(
		"""
		values of the user
		"""
		input: CreateUserInput!
	avatarFile: Upload): UserCreatePayload!
	"""
	Update an existing user
	"""
	updateUser(
		"""
		ID of the user
		"""
		id: ID!

		"""
		New values for the user
		"""
		input: UpdateUserInput!
	avatarFile: Upload): UserUpdatePayload!
	"""
	Delete an existing user
	"""
	deleteUser(
		"""
		ID of the user
		"""
		id: ID!
	): UserDeletePayload!
	"""
	Create a new userSetting
	"""
	createUserSetting(
		"""
		values of the userSetting
		"""
		input: CreateUserSettingInput!
	): UserSettingCreatePayload!
	"""
	Create multiple new userSettings
	"""
	createBulkUserSetting(
		"""
		values of the userSetting
		"""
		input: [CreateUserSettingInput!]
	): UserSettingBulkCreatePayload!
	"""
	Create multiple new userSettings via file upload
	"""
	createBulkCSVUserSetting(
		"""
		csv file containing values of the userSetting
		"""
		input: Upload!
	): UserSettingBulkCreatePayload!
	"""
	Update an existing userSetting
	"""
	updateUserSetting(
		"""
		ID of the userSetting
		"""
		id: ID!

		"""
		New values for the userSetting
		"""
		input: UpdateUserSettingInput!
	): UserSettingUpdatePayload!
}
type Narrative implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the name of the narrative
	"""
	name: String!
	"""
	the description of the narrative
	"""
	description: String
	"""
	which controls are satisfied by the narrative
	"""
	satisfies: String
	"""
	json data for the narrative document
	"""
	details: Map
	owner: Organization
	"""
	groups that are blocked from viewing or editing the risk
	"""
	blockedGroups: [Group!]
	"""
	provides edit access to the risk to members of the group
	"""
	editors: [Group!]
	"""
	provides view access to the risk to members of the group
	"""
	viewers: [Group!]
	internalPolicy: [InternalPolicy!]
	control: [Control!]
	procedure: [Procedure!]
	controlObjective: [ControlObjective!]
	programs: [Program!]
}
"""
Return response for createBulkNarrative mutation
"""
type NarrativeBulkCreatePayload {
	"""
	Created narratives
	"""
	narratives: [Narrative!]
}
"""
A connection to a list of items.
"""
type NarrativeConnection {
	"""
	A list of edges.
	"""
	edges: [NarrativeEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createNarrative mutation
"""
type NarrativeCreatePayload {
	"""
	Created narrative
	"""
	narrative: Narrative!
}
"""
Return response for deleteNarrative mutation
"""
type NarrativeDeletePayload {
	"""
	Deleted narrative ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type NarrativeEdge {
	"""
	The item at the end of the edge.
	"""
	node: Narrative
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type NarrativeHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: NarrativeHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the name of the narrative
	"""
	name: String!
	"""
	the description of the narrative
	"""
	description: String
	"""
	which controls are satisfied by the narrative
	"""
	satisfies: String
	"""
	json data for the narrative document
	"""
	details: Map
}
"""
A connection to a list of items.
"""
type NarrativeHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [NarrativeHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type NarrativeHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: NarrativeHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
NarrativeHistoryOpType is enum for the field operation
"""
enum NarrativeHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
NarrativeHistoryWhereInput is used for filtering NarrativeHistory objects.
Input was generated by ent.
"""
input NarrativeHistoryWhereInput {
	not: NarrativeHistoryWhereInput
	and: [NarrativeHistoryWhereInput!]
	or: [NarrativeHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: NarrativeHistoryOpType
	operationNEQ: NarrativeHistoryOpType
	operationIn: [NarrativeHistoryOpType!]
	operationNotIn: [NarrativeHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
}
type NarrativeSearchResult {
	narratives: [Narrative!]
}
"""
Return response for updateNarrative mutation
"""
type NarrativeUpdatePayload {
	"""
	Updated narrative
	"""
	narrative: Narrative!
}
"""
NarrativeWhereInput is used for filtering Narrative objects.
Input was generated by ent.
"""
input NarrativeWhereInput {
	not: NarrativeWhereInput
	and: [NarrativeWhereInput!]
	or: [NarrativeWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	blocked_groups edge predicates
	"""
	hasBlockedGroups: Boolean
	hasBlockedGroupsWith: [GroupWhereInput!]
	"""
	editors edge predicates
	"""
	hasEditors: Boolean
	hasEditorsWith: [GroupWhereInput!]
	"""
	viewers edge predicates
	"""
	hasViewers: Boolean
	hasViewersWith: [GroupWhereInput!]
	"""
	internal_policy edge predicates
	"""
	hasInternalPolicy: Boolean
	hasInternalPolicyWith: [InternalPolicyWhereInput!]
	"""
	control edge predicates
	"""
	hasControl: Boolean
	hasControlWith: [ControlWhereInput!]
	"""
	procedure edge predicates
	"""
	hasProcedure: Boolean
	hasProcedureWith: [ProcedureWhereInput!]
	"""
	control_objective edge predicates
	"""
	hasControlObjective: Boolean
	hasControlObjectiveWith: [ControlObjectiveWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/theopenlane/core/internal/ent/generated.Noder") {
	"""
	The id of the object.
	"""
	id: ID!
}
type Note implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the text of the note
	"""
	text: String!
	owner: Organization
	task: Task
}
"""
A connection to a list of items.
"""
type NoteConnection {
	"""
	A list of edges.
	"""
	edges: [NoteEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type NoteEdge {
	"""
	The item at the end of the edge.
	"""
	node: Note
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type NoteHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: NoteHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the text of the note
	"""
	text: String!
}
"""
A connection to a list of items.
"""
type NoteHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [NoteHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type NoteHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: NoteHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
NoteHistoryOpType is enum for the field operation
"""
enum NoteHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
NoteHistoryWhereInput is used for filtering NoteHistory objects.
Input was generated by ent.
"""
input NoteHistoryWhereInput {
	not: NoteHistoryWhereInput
	and: [NoteHistoryWhereInput!]
	or: [NoteHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: NoteHistoryOpType
	operationNEQ: NoteHistoryOpType
	operationIn: [NoteHistoryOpType!]
	operationNotIn: [NoteHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	text field predicates
	"""
	text: String
	textNEQ: String
	textIn: [String!]
	textNotIn: [String!]
	textGT: String
	textGTE: String
	textLT: String
	textLTE: String
	textContains: String
	textHasPrefix: String
	textHasSuffix: String
	textEqualFold: String
	textContainsFold: String
}
"""
NoteWhereInput is used for filtering Note objects.
Input was generated by ent.
"""
input NoteWhereInput {
	not: NoteWhereInput
	and: [NoteWhereInput!]
	or: [NoteWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	text field predicates
	"""
	text: String
	textNEQ: String
	textIn: [String!]
	textNotIn: [String!]
	textGT: String
	textGTE: String
	textLT: String
	textLTE: String
	textContains: String
	textHasPrefix: String
	textHasSuffix: String
	textEqualFold: String
	textContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	task edge predicates
	"""
	hasTask: Boolean
	hasTaskWith: [TaskWhereInput!]
}
type Onboarding implements Node {
	id: ID!
	deletedAt: Time
	deletedBy: String
	organizationID: ID
	"""
	name of the company
	"""
	companyName: String!
	"""
	domains associated with the company
	"""
	domains: [String!]
	"""
	details given about the company during the onboarding process, including things such as company size, sector, etc
	"""
	companyDetails: Map
	"""
	details given about the user during the onboarding process, including things such as name, job title, department, etc
	"""
	userDetails: Map
	"""
	details given about the compliance requirements during the onboarding process, such as coming with existing policies, controls, risk assessments, etc
	"""
	compliance: Map
	organization: Organization
}
"""
Return response for createOnboarding mutation
"""
type OnboardingCreatePayload {
	"""
	Created onboarding
	"""
	onboarding: Onboarding!
}
"""
OnboardingWhereInput is used for filtering Onboarding objects.
Input was generated by ent.
"""
input OnboardingWhereInput {
	not: OnboardingWhereInput
	and: [OnboardingWhereInput!]
	or: [OnboardingWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	organization_id field predicates
	"""
	organizationID: ID
	organizationIDNEQ: ID
	organizationIDIn: [ID!]
	organizationIDNotIn: [ID!]
	organizationIDGT: ID
	organizationIDGTE: ID
	organizationIDLT: ID
	organizationIDLTE: ID
	organizationIDContains: ID
	organizationIDHasPrefix: ID
	organizationIDHasSuffix: ID
	organizationIDIsNil: Boolean
	organizationIDNotNil: Boolean
	organizationIDEqualFold: ID
	organizationIDContainsFold: ID
	"""
	company_name field predicates
	"""
	companyName: String
	companyNameNEQ: String
	companyNameIn: [String!]
	companyNameNotIn: [String!]
	companyNameGT: String
	companyNameGTE: String
	companyNameLT: String
	companyNameLTE: String
	companyNameContains: String
	companyNameHasPrefix: String
	companyNameHasSuffix: String
	companyNameEqualFold: String
	companyNameContainsFold: String
	"""
	organization edge predicates
	"""
	hasOrganization: Boolean
	hasOrganizationWith: [OrganizationWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
	"""
	Specifies an ascending order for a given `orderBy` argument.
	"""
	ASC
	"""
	Specifies a descending order for a given `orderBy` argument.
	"""
	DESC
}
"""
OrgMembersInput is used to create members for a organization
along with the org creation
"""
input OrgMembersInput {
	role: OrgMembershipRole
	userID: ID!
}
type OrgMembership implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	role: OrgMembershipRole!
	organizationID: ID!
	userID: ID!
	organization: Organization!
	user: User!
	events: [Event!]
}
"""
Return response for createBulkOrgMembership mutation
"""
type OrgMembershipBulkCreatePayload {
	"""
	Created orgMemberships
	"""
	orgMemberships: [OrgMembership!]
}
"""
A connection to a list of items.
"""
type OrgMembershipConnection {
	"""
	A list of edges.
	"""
	edges: [OrgMembershipEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createOrgMembership mutation
"""
type OrgMembershipCreatePayload {
	"""
	Created orgMembership
	"""
	orgMembership: OrgMembership!
}
"""
Return response for deleteOrgMembership mutation
"""
type OrgMembershipDeletePayload {
	"""
	Deleted orgMembership ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type OrgMembershipEdge {
	"""
	The item at the end of the edge.
	"""
	node: OrgMembership
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type OrgMembershipHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: OrgMembershipHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	role: OrgMembershipHistoryRole!
	organizationID: String!
	userID: String!
}
"""
A connection to a list of items.
"""
type OrgMembershipHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [OrgMembershipHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgMembershipHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: OrgMembershipHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
OrgMembershipHistoryOpType is enum for the field operation
"""
enum OrgMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
OrgMembershipHistoryRole is enum for the field role
"""
enum OrgMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
	OWNER
}
"""
OrgMembershipHistoryWhereInput is used for filtering OrgMembershipHistory objects.
Input was generated by ent.
"""
input OrgMembershipHistoryWhereInput {
	not: OrgMembershipHistoryWhereInput
	and: [OrgMembershipHistoryWhereInput!]
	or: [OrgMembershipHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: OrgMembershipHistoryOpType
	operationNEQ: OrgMembershipHistoryOpType
	operationIn: [OrgMembershipHistoryOpType!]
	operationNotIn: [OrgMembershipHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	role field predicates
	"""
	role: OrgMembershipHistoryRole
	roleNEQ: OrgMembershipHistoryRole
	roleIn: [OrgMembershipHistoryRole!]
	roleNotIn: [OrgMembershipHistoryRole!]
	"""
	organization_id field predicates
	"""
	organizationID: String
	organizationIDNEQ: String
	organizationIDIn: [String!]
	organizationIDNotIn: [String!]
	organizationIDGT: String
	organizationIDGTE: String
	organizationIDLT: String
	organizationIDLTE: String
	organizationIDContains: String
	organizationIDHasPrefix: String
	organizationIDHasSuffix: String
	organizationIDEqualFold: String
	organizationIDContainsFold: String
	"""
	user_id field predicates
	"""
	userID: String
	userIDNEQ: String
	userIDIn: [String!]
	userIDNotIn: [String!]
	userIDGT: String
	userIDGTE: String
	userIDLT: String
	userIDLTE: String
	userIDContains: String
	userIDHasPrefix: String
	userIDHasSuffix: String
	userIDEqualFold: String
	userIDContainsFold: String
}
"""
OrgMembershipRole is enum for the field role
"""
enum OrgMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
	OWNER
}
"""
Return response for updateOrgMembership mutation
"""
type OrgMembershipUpdatePayload {
	"""
	Updated orgMembership
	"""
	orgMembership: OrgMembership!
}
"""
OrgMembershipWhereInput is used for filtering OrgMembership objects.
Input was generated by ent.
"""
input OrgMembershipWhereInput {
	not: OrgMembershipWhereInput
	and: [OrgMembershipWhereInput!]
	or: [OrgMembershipWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	role field predicates
	"""
	role: OrgMembershipRole
	roleNEQ: OrgMembershipRole
	roleIn: [OrgMembershipRole!]
	roleNotIn: [OrgMembershipRole!]
	organizationID: String
	userID: String
}
type OrgSubscription implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the stripe subscription id
	"""
	stripeSubscriptionID: String
	"""
	the common name of the product tier the subscription is associated with, e.g. starter tier
	"""
	productTier: String
	"""
	the price of the product tier
	"""
	productPrice: Price
	"""
	the product id that represents the tier in stripe
	"""
	stripeProductTierID: String
	"""
	the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
	"""
	stripeSubscriptionStatus: String
	"""
	indicates if the subscription is active
	"""
	active: Boolean!
	"""
	the customer ID the subscription is associated to
	"""
	stripeCustomerID: String
	"""
	the time the subscription is set to expire; only populated if subscription is cancelled
	"""
	expiresAt: Time
	"""
	the features associated with the subscription
	"""
	features: [String!]
	"""
	the feature lookup keys associated with the subscription
	"""
	featureLookupKeys: [String!]
	owner: Organization
	subscriptionURL: String
}
"""
A connection to a list of items.
"""
type OrgSubscriptionConnection {
	"""
	A list of edges.
	"""
	edges: [OrgSubscriptionEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgSubscriptionEdge {
	"""
	The item at the end of the edge.
	"""
	node: OrgSubscription
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type OrgSubscriptionHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: OrgSubscriptionHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the stripe subscription id
	"""
	stripeSubscriptionID: String
	"""
	the common name of the product tier the subscription is associated with, e.g. starter tier
	"""
	productTier: String
	"""
	the price of the product tier
	"""
	productPrice: Price
	"""
	the product id that represents the tier in stripe
	"""
	stripeProductTierID: String
	"""
	the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
	"""
	stripeSubscriptionStatus: String
	"""
	indicates if the subscription is active
	"""
	active: Boolean!
	"""
	the customer ID the subscription is associated to
	"""
	stripeCustomerID: String
	"""
	the time the subscription is set to expire; only populated if subscription is cancelled
	"""
	expiresAt: Time
	"""
	the features associated with the subscription
	"""
	features: [String!]
	"""
	the feature lookup keys associated with the subscription
	"""
	featureLookupKeys: [String!]
}
"""
A connection to a list of items.
"""
type OrgSubscriptionHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [OrgSubscriptionHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgSubscriptionHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: OrgSubscriptionHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
OrgSubscriptionHistoryOpType is enum for the field operation
"""
enum OrgSubscriptionHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
OrgSubscriptionHistoryWhereInput is used for filtering OrgSubscriptionHistory objects.
Input was generated by ent.
"""
input OrgSubscriptionHistoryWhereInput {
	not: OrgSubscriptionHistoryWhereInput
	and: [OrgSubscriptionHistoryWhereInput!]
	or: [OrgSubscriptionHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: OrgSubscriptionHistoryOpType
	operationNEQ: OrgSubscriptionHistoryOpType
	operationIn: [OrgSubscriptionHistoryOpType!]
	operationNotIn: [OrgSubscriptionHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	stripe_subscription_id field predicates
	"""
	stripeSubscriptionID: String
	stripeSubscriptionIDNEQ: String
	stripeSubscriptionIDIn: [String!]
	stripeSubscriptionIDNotIn: [String!]
	stripeSubscriptionIDGT: String
	stripeSubscriptionIDGTE: String
	stripeSubscriptionIDLT: String
	stripeSubscriptionIDLTE: String
	stripeSubscriptionIDContains: String
	stripeSubscriptionIDHasPrefix: String
	stripeSubscriptionIDHasSuffix: String
	stripeSubscriptionIDIsNil: Boolean
	stripeSubscriptionIDNotNil: Boolean
	stripeSubscriptionIDEqualFold: String
	stripeSubscriptionIDContainsFold: String
	"""
	product_tier field predicates
	"""
	productTier: String
	productTierNEQ: String
	productTierIn: [String!]
	productTierNotIn: [String!]
	productTierGT: String
	productTierGTE: String
	productTierLT: String
	productTierLTE: String
	productTierContains: String
	productTierHasPrefix: String
	productTierHasSuffix: String
	productTierIsNil: Boolean
	productTierNotNil: Boolean
	productTierEqualFold: String
	productTierContainsFold: String
	"""
	stripe_product_tier_id field predicates
	"""
	stripeProductTierID: String
	stripeProductTierIDNEQ: String
	stripeProductTierIDIn: [String!]
	stripeProductTierIDNotIn: [String!]
	stripeProductTierIDGT: String
	stripeProductTierIDGTE: String
	stripeProductTierIDLT: String
	stripeProductTierIDLTE: String
	stripeProductTierIDContains: String
	stripeProductTierIDHasPrefix: String
	stripeProductTierIDHasSuffix: String
	stripeProductTierIDIsNil: Boolean
	stripeProductTierIDNotNil: Boolean
	stripeProductTierIDEqualFold: String
	stripeProductTierIDContainsFold: String
	"""
	stripe_subscription_status field predicates
	"""
	stripeSubscriptionStatus: String
	stripeSubscriptionStatusNEQ: String
	stripeSubscriptionStatusIn: [String!]
	stripeSubscriptionStatusNotIn: [String!]
	stripeSubscriptionStatusGT: String
	stripeSubscriptionStatusGTE: String
	stripeSubscriptionStatusLT: String
	stripeSubscriptionStatusLTE: String
	stripeSubscriptionStatusContains: String
	stripeSubscriptionStatusHasPrefix: String
	stripeSubscriptionStatusHasSuffix: String
	stripeSubscriptionStatusIsNil: Boolean
	stripeSubscriptionStatusNotNil: Boolean
	stripeSubscriptionStatusEqualFold: String
	stripeSubscriptionStatusContainsFold: String
	"""
	active field predicates
	"""
	active: Boolean
	activeNEQ: Boolean
	"""
	stripe_customer_id field predicates
	"""
	stripeCustomerID: String
	stripeCustomerIDNEQ: String
	stripeCustomerIDIn: [String!]
	stripeCustomerIDNotIn: [String!]
	stripeCustomerIDGT: String
	stripeCustomerIDGTE: String
	stripeCustomerIDLT: String
	stripeCustomerIDLTE: String
	stripeCustomerIDContains: String
	stripeCustomerIDHasPrefix: String
	stripeCustomerIDHasSuffix: String
	stripeCustomerIDIsNil: Boolean
	stripeCustomerIDNotNil: Boolean
	stripeCustomerIDEqualFold: String
	stripeCustomerIDContainsFold: String
	"""
	expires_at field predicates
	"""
	expiresAt: Time
	expiresAtNEQ: Time
	expiresAtIn: [Time!]
	expiresAtNotIn: [Time!]
	expiresAtGT: Time
	expiresAtGTE: Time
	expiresAtLT: Time
	expiresAtLTE: Time
	expiresAtIsNil: Boolean
	expiresAtNotNil: Boolean
}
type OrgSubscriptionSearchResult {
	orgSubscriptions: [OrgSubscription!]
}
"""
OrgSubscriptionWhereInput is used for filtering OrgSubscription objects.
Input was generated by ent.
"""
input OrgSubscriptionWhereInput {
	not: OrgSubscriptionWhereInput
	and: [OrgSubscriptionWhereInput!]
	or: [OrgSubscriptionWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	stripe_subscription_id field predicates
	"""
	stripeSubscriptionID: String
	stripeSubscriptionIDNEQ: String
	stripeSubscriptionIDIn: [String!]
	stripeSubscriptionIDNotIn: [String!]
	stripeSubscriptionIDGT: String
	stripeSubscriptionIDGTE: String
	stripeSubscriptionIDLT: String
	stripeSubscriptionIDLTE: String
	stripeSubscriptionIDContains: String
	stripeSubscriptionIDHasPrefix: String
	stripeSubscriptionIDHasSuffix: String
	stripeSubscriptionIDIsNil: Boolean
	stripeSubscriptionIDNotNil: Boolean
	stripeSubscriptionIDEqualFold: String
	stripeSubscriptionIDContainsFold: String
	"""
	product_tier field predicates
	"""
	productTier: String
	productTierNEQ: String
	productTierIn: [String!]
	productTierNotIn: [String!]
	productTierGT: String
	productTierGTE: String
	productTierLT: String
	productTierLTE: String
	productTierContains: String
	productTierHasPrefix: String
	productTierHasSuffix: String
	productTierIsNil: Boolean
	productTierNotNil: Boolean
	productTierEqualFold: String
	productTierContainsFold: String
	"""
	stripe_product_tier_id field predicates
	"""
	stripeProductTierID: String
	stripeProductTierIDNEQ: String
	stripeProductTierIDIn: [String!]
	stripeProductTierIDNotIn: [String!]
	stripeProductTierIDGT: String
	stripeProductTierIDGTE: String
	stripeProductTierIDLT: String
	stripeProductTierIDLTE: String
	stripeProductTierIDContains: String
	stripeProductTierIDHasPrefix: String
	stripeProductTierIDHasSuffix: String
	stripeProductTierIDIsNil: Boolean
	stripeProductTierIDNotNil: Boolean
	stripeProductTierIDEqualFold: String
	stripeProductTierIDContainsFold: String
	"""
	stripe_subscription_status field predicates
	"""
	stripeSubscriptionStatus: String
	stripeSubscriptionStatusNEQ: String
	stripeSubscriptionStatusIn: [String!]
	stripeSubscriptionStatusNotIn: [String!]
	stripeSubscriptionStatusGT: String
	stripeSubscriptionStatusGTE: String
	stripeSubscriptionStatusLT: String
	stripeSubscriptionStatusLTE: String
	stripeSubscriptionStatusContains: String
	stripeSubscriptionStatusHasPrefix: String
	stripeSubscriptionStatusHasSuffix: String
	stripeSubscriptionStatusIsNil: Boolean
	stripeSubscriptionStatusNotNil: Boolean
	stripeSubscriptionStatusEqualFold: String
	stripeSubscriptionStatusContainsFold: String
	"""
	active field predicates
	"""
	active: Boolean
	activeNEQ: Boolean
	"""
	stripe_customer_id field predicates
	"""
	stripeCustomerID: String
	stripeCustomerIDNEQ: String
	stripeCustomerIDIn: [String!]
	stripeCustomerIDNotIn: [String!]
	stripeCustomerIDGT: String
	stripeCustomerIDGTE: String
	stripeCustomerIDLT: String
	stripeCustomerIDLTE: String
	stripeCustomerIDContains: String
	stripeCustomerIDHasPrefix: String
	stripeCustomerIDHasSuffix: String
	stripeCustomerIDIsNil: Boolean
	stripeCustomerIDNotNil: Boolean
	stripeCustomerIDEqualFold: String
	stripeCustomerIDContainsFold: String
	"""
	expires_at field predicates
	"""
	expiresAt: Time
	expiresAtNEQ: Time
	expiresAtIn: [Time!]
	expiresAtNotIn: [Time!]
	expiresAtGT: Time
	expiresAtGTE: Time
	expiresAtLT: Time
	expiresAtLTE: Time
	expiresAtIsNil: Boolean
	expiresAtNotNil: Boolean
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
}
type Organization implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the name of the organization
	"""
	name: String!
	"""
	The organization's displayed 'friendly' name
	"""
	displayName: String!
	"""
	An optional description of the organization
	"""
	description: String
	"""
	orgs directly associated with a user
	"""
	personalOrg: Boolean
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	"""
	The organizations's local avatar file id, takes precedence over the avatar remote URL
	"""
	avatarLocalFileID: ID
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	"""
	Whether the organization has a dedicated database
	"""
	dedicatedDb: Boolean!
	"""
	groups that are allowed to create controls
	"""
	controlCreators: [Group!]
	"""
	groups that are allowed to create control_objectives
	"""
	controlObjectiveCreators: [Group!]
	"""
	groups that are allowed to create groups
	"""
	groupCreators: [Group!]
	"""
	groups that are allowed to create internal_policys
	"""
	internalPolicyCreators: [Group!]
	"""
	groups that are allowed to create narratives
	"""
	narrativeCreators: [Group!]
	"""
	groups that are allowed to create procedures
	"""
	procedureCreators: [Group!]
	"""
	groups that are allowed to create programs
	"""
	programCreators: [Group!]
	"""
	groups that are allowed to create risks
	"""
	riskCreators: [Group!]
	"""
	groups that are allowed to create templates
	"""
	templateCreators: [Group!]
	parent: Organization
	children(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Organizations returned from the connection.
		"""
		orderBy: OrganizationOrder

		"""
		Filtering options for Organizations returned from the connection.
		"""
		where: OrganizationWhereInput
	): OrganizationConnection!
	setting: OrganizationSetting
	personalAccessTokens: [PersonalAccessToken!]
	apiTokens: [APIToken!]
	users: [User!]
	files: [File!]
	events: [Event!]
	secrets: [Hush!]
	avatarFile: File
	groups: [Group!]
	templates: [Template!]
	integrations: [Integration!]
	documentData: [DocumentData!]
	orgSubscriptions: [OrgSubscription!]
	invites: [Invite!]
	subscribers: [Subscriber!]
	entities: [Entity!]
	entityTypes: [EntityType!]
	contacts: [Contact!]
	notes: [Note!]
	tasks: [Task!]
	programs: [Program!]
	procedures: [Procedure!]
	internalPolicies: [InternalPolicy!]
	risks: [Risk!]
	controlObjectives: [ControlObjective!]
	narratives: [Narrative!]
	controls: [Control!]
	subcontrols: [Subcontrol!]
	evidence: [Evidence!]
	members: [OrgMembership!]
}
"""
Return response for createBulkOrganization mutation
"""
type OrganizationBulkCreatePayload {
	"""
	Created organizations
	"""
	organizations: [Organization!]
}
"""
A connection to a list of items.
"""
type OrganizationConnection {
	"""
	A list of edges.
	"""
	edges: [OrganizationEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createOrganization mutation
"""
type OrganizationCreatePayload {
	"""
	Created organization
	"""
	organization: Organization!
}
"""
Return response for deleteOrganization mutation
"""
type OrganizationDeletePayload {
	"""
	Deleted organization ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type OrganizationEdge {
	"""
	The item at the end of the edge.
	"""
	node: Organization
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type OrganizationHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: OrganizationHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the name of the organization
	"""
	name: String!
	"""
	The organization's displayed 'friendly' name
	"""
	displayName: String!
	"""
	An optional description of the organization
	"""
	description: String
	"""
	orgs directly associated with a user
	"""
	personalOrg: Boolean
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	"""
	The organizations's local avatar file id, takes precedence over the avatar remote URL
	"""
	avatarLocalFileID: String
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	"""
	Whether the organization has a dedicated database
	"""
	dedicatedDb: Boolean!
}
"""
A connection to a list of items.
"""
type OrganizationHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [OrganizationHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: OrganizationHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
OrganizationHistoryOpType is enum for the field operation
"""
enum OrganizationHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for OrganizationHistory connections
"""
input OrganizationHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order OrganizationHistories.
	"""
	field: OrganizationHistoryOrderField!
}
"""
Properties by which OrganizationHistory connections can be ordered.
"""
enum OrganizationHistoryOrderField {
	name
	display_name
}
"""
OrganizationHistoryWhereInput is used for filtering OrganizationHistory objects.
Input was generated by ent.
"""
input OrganizationHistoryWhereInput {
	not: OrganizationHistoryWhereInput
	and: [OrganizationHistoryWhereInput!]
	or: [OrganizationHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: OrganizationHistoryOpType
	operationNEQ: OrganizationHistoryOpType
	operationIn: [OrganizationHistoryOpType!]
	operationNotIn: [OrganizationHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""
	parent_organization_id field predicates
	"""
	parentOrganizationID: ID
	parentOrganizationIDNEQ: ID
	parentOrganizationIDIn: [ID!]
	parentOrganizationIDNotIn: [ID!]
	parentOrganizationIDGT: ID
	parentOrganizationIDGTE: ID
	parentOrganizationIDLT: ID
	parentOrganizationIDLTE: ID
	parentOrganizationIDContains: ID
	parentOrganizationIDHasPrefix: ID
	parentOrganizationIDHasSuffix: ID
	parentOrganizationIDIsNil: Boolean
	parentOrganizationIDNotNil: Boolean
	parentOrganizationIDEqualFold: ID
	parentOrganizationIDContainsFold: ID
	"""
	personal_org field predicates
	"""
	personalOrg: Boolean
	personalOrgNEQ: Boolean
	personalOrgIsNil: Boolean
	personalOrgNotNil: Boolean
	"""
	avatar_remote_url field predicates
	"""
	avatarRemoteURL: String
	avatarRemoteURLNEQ: String
	avatarRemoteURLIn: [String!]
	avatarRemoteURLNotIn: [String!]
	avatarRemoteURLGT: String
	avatarRemoteURLGTE: String
	avatarRemoteURLLT: String
	avatarRemoteURLLTE: String
	avatarRemoteURLContains: String
	avatarRemoteURLHasPrefix: String
	avatarRemoteURLHasSuffix: String
	avatarRemoteURLIsNil: Boolean
	avatarRemoteURLNotNil: Boolean
	avatarRemoteURLEqualFold: String
	avatarRemoteURLContainsFold: String
	"""
	avatar_local_file_id field predicates
	"""
	avatarLocalFileID: String
	avatarLocalFileIDNEQ: String
	avatarLocalFileIDIn: [String!]
	avatarLocalFileIDNotIn: [String!]
	avatarLocalFileIDGT: String
	avatarLocalFileIDGTE: String
	avatarLocalFileIDLT: String
	avatarLocalFileIDLTE: String
	avatarLocalFileIDContains: String
	avatarLocalFileIDHasPrefix: String
	avatarLocalFileIDHasSuffix: String
	avatarLocalFileIDIsNil: Boolean
	avatarLocalFileIDNotNil: Boolean
	avatarLocalFileIDEqualFold: String
	avatarLocalFileIDContainsFold: String
	"""
	avatar_updated_at field predicates
	"""
	avatarUpdatedAt: Time
	avatarUpdatedAtNEQ: Time
	avatarUpdatedAtIn: [Time!]
	avatarUpdatedAtNotIn: [Time!]
	avatarUpdatedAtGT: Time
	avatarUpdatedAtGTE: Time
	avatarUpdatedAtLT: Time
	avatarUpdatedAtLTE: Time
	avatarUpdatedAtIsNil: Boolean
	avatarUpdatedAtNotNil: Boolean
}
"""
Ordering options for Organization connections
"""
input OrganizationOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Organizations.
	"""
	field: OrganizationOrderField!
}
"""
Properties by which Organization connections can be ordered.
"""
enum OrganizationOrderField {
	name
	display_name
}
type OrganizationSearchResult {
	organizations: [Organization!]
}
type OrganizationSetting implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	domains associated with the organization
	"""
	domains: [String!]
	"""
	Name of the person to contact for billing
	"""
	billingContact: String
	"""
	Email address of the person to contact for billing
	"""
	billingEmail: String
	"""
	Phone number to contact for billing
	"""
	billingPhone: String
	"""
	the billing address to send billing information to
	"""
	billingAddress: Address
	"""
	Usually government-issued tax ID or business ID such as ABN in Australia
	"""
	taxIdentifier: String
	"""
	geographical location of the organization
	"""
	geoLocation: OrganizationSettingRegion
	"""
	the ID of the organization the settings belong to
	"""
	organizationID: ID
	"""
	should we send email notifications related to billing
	"""
	billingNotificationsEnabled: Boolean!
	"""
	domains allowed to access the organization, if empty all domains are allowed
	"""
	allowedEmailDomains: [String!]
	organization: Organization
	files: [File!]
}
"""
Return response for createBulkOrganizationSetting mutation
"""
type OrganizationSettingBulkCreatePayload {
	"""
	Created organizationSettings
	"""
	organizationSettings: [OrganizationSetting!]
}
"""
A connection to a list of items.
"""
type OrganizationSettingConnection {
	"""
	A list of edges.
	"""
	edges: [OrganizationSettingEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createOrganizationSetting mutation
"""
type OrganizationSettingCreatePayload {
	"""
	Created organizationSetting
	"""
	organizationSetting: OrganizationSetting!
}
"""
Return response for deleteOrganizationSetting mutation
"""
type OrganizationSettingDeletePayload {
	"""
	Deleted organizationSetting ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type OrganizationSettingEdge {
	"""
	The item at the end of the edge.
	"""
	node: OrganizationSetting
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type OrganizationSettingHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: OrganizationSettingHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	domains associated with the organization
	"""
	domains: [String!]
	"""
	Name of the person to contact for billing
	"""
	billingContact: String
	"""
	Email address of the person to contact for billing
	"""
	billingEmail: String
	"""
	Phone number to contact for billing
	"""
	billingPhone: String
	"""
	the billing address to send billing information to
	"""
	billingAddress: Address
	"""
	Usually government-issued tax ID or business ID such as ABN in Australia
	"""
	taxIdentifier: String
	"""
	geographical location of the organization
	"""
	geoLocation: OrganizationSettingHistoryRegion
	"""
	the ID of the organization the settings belong to
	"""
	organizationID: String
	"""
	should we send email notifications related to billing
	"""
	billingNotificationsEnabled: Boolean!
	"""
	domains allowed to access the organization, if empty all domains are allowed
	"""
	allowedEmailDomains: [String!]
}
"""
A connection to a list of items.
"""
type OrganizationSettingHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [OrganizationSettingHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type OrganizationSettingHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: OrganizationSettingHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
OrganizationSettingHistoryOpType is enum for the field operation
"""
enum OrganizationSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
OrganizationSettingHistoryRegion is enum for the field geo_location
"""
enum OrganizationSettingHistoryRegion @goModel(model: "github.com/theopenlane/core/pkg/enums.Region") {
	AMER
	EMEA
	APAC
}
"""
OrganizationSettingHistoryWhereInput is used for filtering OrganizationSettingHistory objects.
Input was generated by ent.
"""
input OrganizationSettingHistoryWhereInput {
	not: OrganizationSettingHistoryWhereInput
	and: [OrganizationSettingHistoryWhereInput!]
	or: [OrganizationSettingHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: OrganizationSettingHistoryOpType
	operationNEQ: OrganizationSettingHistoryOpType
	operationIn: [OrganizationSettingHistoryOpType!]
	operationNotIn: [OrganizationSettingHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	billing_contact field predicates
	"""
	billingContact: String
	billingContactNEQ: String
	billingContactIn: [String!]
	billingContactNotIn: [String!]
	billingContactGT: String
	billingContactGTE: String
	billingContactLT: String
	billingContactLTE: String
	billingContactContains: String
	billingContactHasPrefix: String
	billingContactHasSuffix: String
	billingContactIsNil: Boolean
	billingContactNotNil: Boolean
	billingContactEqualFold: String
	billingContactContainsFold: String
	"""
	billing_email field predicates
	"""
	billingEmail: String
	billingEmailNEQ: String
	billingEmailIn: [String!]
	billingEmailNotIn: [String!]
	billingEmailGT: String
	billingEmailGTE: String
	billingEmailLT: String
	billingEmailLTE: String
	billingEmailContains: String
	billingEmailHasPrefix: String
	billingEmailHasSuffix: String
	billingEmailIsNil: Boolean
	billingEmailNotNil: Boolean
	billingEmailEqualFold: String
	billingEmailContainsFold: String
	"""
	billing_phone field predicates
	"""
	billingPhone: String
	billingPhoneNEQ: String
	billingPhoneIn: [String!]
	billingPhoneNotIn: [String!]
	billingPhoneGT: String
	billingPhoneGTE: String
	billingPhoneLT: String
	billingPhoneLTE: String
	billingPhoneContains: String
	billingPhoneHasPrefix: String
	billingPhoneHasSuffix: String
	billingPhoneIsNil: Boolean
	billingPhoneNotNil: Boolean
	billingPhoneEqualFold: String
	billingPhoneContainsFold: String
	"""
	tax_identifier field predicates
	"""
	taxIdentifier: String
	taxIdentifierNEQ: String
	taxIdentifierIn: [String!]
	taxIdentifierNotIn: [String!]
	taxIdentifierGT: String
	taxIdentifierGTE: String
	taxIdentifierLT: String
	taxIdentifierLTE: String
	taxIdentifierContains: String
	taxIdentifierHasPrefix: String
	taxIdentifierHasSuffix: String
	taxIdentifierIsNil: Boolean
	taxIdentifierNotNil: Boolean
	taxIdentifierEqualFold: String
	taxIdentifierContainsFold: String
	"""
	geo_location field predicates
	"""
	geoLocation: OrganizationSettingHistoryRegion
	geoLocationNEQ: OrganizationSettingHistoryRegion
	geoLocationIn: [OrganizationSettingHistoryRegion!]
	geoLocationNotIn: [OrganizationSettingHistoryRegion!]
	geoLocationIsNil: Boolean
	geoLocationNotNil: Boolean
	"""
	organization_id field predicates
	"""
	organizationID: String
	organizationIDNEQ: String
	organizationIDIn: [String!]
	organizationIDNotIn: [String!]
	organizationIDGT: String
	organizationIDGTE: String
	organizationIDLT: String
	organizationIDLTE: String
	organizationIDContains: String
	organizationIDHasPrefix: String
	organizationIDHasSuffix: String
	organizationIDIsNil: Boolean
	organizationIDNotNil: Boolean
	organizationIDEqualFold: String
	organizationIDContainsFold: String
	"""
	billing_notifications_enabled field predicates
	"""
	billingNotificationsEnabled: Boolean
	billingNotificationsEnabledNEQ: Boolean
}
"""
OrganizationSettingRegion is enum for the field geo_location
"""
enum OrganizationSettingRegion @goModel(model: "github.com/theopenlane/core/pkg/enums.Region") {
	AMER
	EMEA
	APAC
}
type OrganizationSettingSearchResult {
	organizationSettings: [OrganizationSetting!]
}
"""
Return response for updateOrganizationSetting mutation
"""
type OrganizationSettingUpdatePayload {
	"""
	Updated organizationSetting
	"""
	organizationSetting: OrganizationSetting!
}
"""
OrganizationSettingWhereInput is used for filtering OrganizationSetting objects.
Input was generated by ent.
"""
input OrganizationSettingWhereInput {
	not: OrganizationSettingWhereInput
	and: [OrganizationSettingWhereInput!]
	or: [OrganizationSettingWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	billing_contact field predicates
	"""
	billingContact: String
	billingContactNEQ: String
	billingContactIn: [String!]
	billingContactNotIn: [String!]
	billingContactGT: String
	billingContactGTE: String
	billingContactLT: String
	billingContactLTE: String
	billingContactContains: String
	billingContactHasPrefix: String
	billingContactHasSuffix: String
	billingContactIsNil: Boolean
	billingContactNotNil: Boolean
	billingContactEqualFold: String
	billingContactContainsFold: String
	"""
	billing_email field predicates
	"""
	billingEmail: String
	billingEmailNEQ: String
	billingEmailIn: [String!]
	billingEmailNotIn: [String!]
	billingEmailGT: String
	billingEmailGTE: String
	billingEmailLT: String
	billingEmailLTE: String
	billingEmailContains: String
	billingEmailHasPrefix: String
	billingEmailHasSuffix: String
	billingEmailIsNil: Boolean
	billingEmailNotNil: Boolean
	billingEmailEqualFold: String
	billingEmailContainsFold: String
	"""
	billing_phone field predicates
	"""
	billingPhone: String
	billingPhoneNEQ: String
	billingPhoneIn: [String!]
	billingPhoneNotIn: [String!]
	billingPhoneGT: String
	billingPhoneGTE: String
	billingPhoneLT: String
	billingPhoneLTE: String
	billingPhoneContains: String
	billingPhoneHasPrefix: String
	billingPhoneHasSuffix: String
	billingPhoneIsNil: Boolean
	billingPhoneNotNil: Boolean
	billingPhoneEqualFold: String
	billingPhoneContainsFold: String
	"""
	tax_identifier field predicates
	"""
	taxIdentifier: String
	taxIdentifierNEQ: String
	taxIdentifierIn: [String!]
	taxIdentifierNotIn: [String!]
	taxIdentifierGT: String
	taxIdentifierGTE: String
	taxIdentifierLT: String
	taxIdentifierLTE: String
	taxIdentifierContains: String
	taxIdentifierHasPrefix: String
	taxIdentifierHasSuffix: String
	taxIdentifierIsNil: Boolean
	taxIdentifierNotNil: Boolean
	taxIdentifierEqualFold: String
	taxIdentifierContainsFold: String
	"""
	geo_location field predicates
	"""
	geoLocation: OrganizationSettingRegion
	geoLocationNEQ: OrganizationSettingRegion
	geoLocationIn: [OrganizationSettingRegion!]
	geoLocationNotIn: [OrganizationSettingRegion!]
	geoLocationIsNil: Boolean
	geoLocationNotNil: Boolean
	"""
	organization_id field predicates
	"""
	organizationID: ID
	organizationIDNEQ: ID
	organizationIDIn: [ID!]
	organizationIDNotIn: [ID!]
	organizationIDGT: ID
	organizationIDGTE: ID
	organizationIDLT: ID
	organizationIDLTE: ID
	organizationIDContains: ID
	organizationIDHasPrefix: ID
	organizationIDHasSuffix: ID
	organizationIDIsNil: Boolean
	organizationIDNotNil: Boolean
	organizationIDEqualFold: ID
	organizationIDContainsFold: ID
	"""
	billing_notifications_enabled field predicates
	"""
	billingNotificationsEnabled: Boolean
	billingNotificationsEnabledNEQ: Boolean
	"""
	organization edge predicates
	"""
	hasOrganization: Boolean
	hasOrganizationWith: [OrganizationWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
}
"""
Return response for updateOrganization mutation
"""
type OrganizationUpdatePayload {
	"""
	Updated organization
	"""
	organization: Organization!
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
	not: OrganizationWhereInput
	and: [OrganizationWhereInput!]
	or: [OrganizationWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""
	parent_organization_id field predicates
	"""
	parentOrganizationID: ID
	parentOrganizationIDNEQ: ID
	parentOrganizationIDIn: [ID!]
	parentOrganizationIDNotIn: [ID!]
	parentOrganizationIDGT: ID
	parentOrganizationIDGTE: ID
	parentOrganizationIDLT: ID
	parentOrganizationIDLTE: ID
	parentOrganizationIDContains: ID
	parentOrganizationIDHasPrefix: ID
	parentOrganizationIDHasSuffix: ID
	parentOrganizationIDIsNil: Boolean
	parentOrganizationIDNotNil: Boolean
	parentOrganizationIDEqualFold: ID
	parentOrganizationIDContainsFold: ID
	"""
	personal_org field predicates
	"""
	personalOrg: Boolean
	personalOrgNEQ: Boolean
	personalOrgIsNil: Boolean
	personalOrgNotNil: Boolean
	"""
	avatar_remote_url field predicates
	"""
	avatarRemoteURL: String
	avatarRemoteURLNEQ: String
	avatarRemoteURLIn: [String!]
	avatarRemoteURLNotIn: [String!]
	avatarRemoteURLGT: String
	avatarRemoteURLGTE: String
	avatarRemoteURLLT: String
	avatarRemoteURLLTE: String
	avatarRemoteURLContains: String
	avatarRemoteURLHasPrefix: String
	avatarRemoteURLHasSuffix: String
	avatarRemoteURLIsNil: Boolean
	avatarRemoteURLNotNil: Boolean
	avatarRemoteURLEqualFold: String
	avatarRemoteURLContainsFold: String
	"""
	avatar_local_file_id field predicates
	"""
	avatarLocalFileID: ID
	avatarLocalFileIDNEQ: ID
	avatarLocalFileIDIn: [ID!]
	avatarLocalFileIDNotIn: [ID!]
	avatarLocalFileIDGT: ID
	avatarLocalFileIDGTE: ID
	avatarLocalFileIDLT: ID
	avatarLocalFileIDLTE: ID
	avatarLocalFileIDContains: ID
	avatarLocalFileIDHasPrefix: ID
	avatarLocalFileIDHasSuffix: ID
	avatarLocalFileIDIsNil: Boolean
	avatarLocalFileIDNotNil: Boolean
	avatarLocalFileIDEqualFold: ID
	avatarLocalFileIDContainsFold: ID
	"""
	avatar_updated_at field predicates
	"""
	avatarUpdatedAt: Time
	avatarUpdatedAtNEQ: Time
	avatarUpdatedAtIn: [Time!]
	avatarUpdatedAtNotIn: [Time!]
	avatarUpdatedAtGT: Time
	avatarUpdatedAtGTE: Time
	avatarUpdatedAtLT: Time
	avatarUpdatedAtLTE: Time
	avatarUpdatedAtIsNil: Boolean
	avatarUpdatedAtNotNil: Boolean
	"""
	control_creators edge predicates
	"""
	hasControlCreators: Boolean
	hasControlCreatorsWith: [GroupWhereInput!]
	"""
	control_objective_creators edge predicates
	"""
	hasControlObjectiveCreators: Boolean
	hasControlObjectiveCreatorsWith: [GroupWhereInput!]
	"""
	group_creators edge predicates
	"""
	hasGroupCreators: Boolean
	hasGroupCreatorsWith: [GroupWhereInput!]
	"""
	internal_policy_creators edge predicates
	"""
	hasInternalPolicyCreators: Boolean
	hasInternalPolicyCreatorsWith: [GroupWhereInput!]
	"""
	narrative_creators edge predicates
	"""
	hasNarrativeCreators: Boolean
	hasNarrativeCreatorsWith: [GroupWhereInput!]
	"""
	procedure_creators edge predicates
	"""
	hasProcedureCreators: Boolean
	hasProcedureCreatorsWith: [GroupWhereInput!]
	"""
	program_creators edge predicates
	"""
	hasProgramCreators: Boolean
	hasProgramCreatorsWith: [GroupWhereInput!]
	"""
	risk_creators edge predicates
	"""
	hasRiskCreators: Boolean
	hasRiskCreatorsWith: [GroupWhereInput!]
	"""
	template_creators edge predicates
	"""
	hasTemplateCreators: Boolean
	hasTemplateCreatorsWith: [GroupWhereInput!]
	"""
	parent edge predicates
	"""
	hasParent: Boolean
	hasParentWith: [OrganizationWhereInput!]
	"""
	children edge predicates
	"""
	hasChildren: Boolean
	hasChildrenWith: [OrganizationWhereInput!]
	"""
	setting edge predicates
	"""
	hasSetting: Boolean
	hasSettingWith: [OrganizationSettingWhereInput!]
	"""
	personal_access_tokens edge predicates
	"""
	hasPersonalAccessTokens: Boolean
	hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
	"""
	api_tokens edge predicates
	"""
	hasAPITokens: Boolean
	hasAPITokensWith: [APITokenWhereInput!]
	"""
	users edge predicates
	"""
	hasUsers: Boolean
	hasUsersWith: [UserWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
	"""
	secrets edge predicates
	"""
	hasSecrets: Boolean
	hasSecretsWith: [HushWhereInput!]
	"""
	avatar_file edge predicates
	"""
	hasAvatarFile: Boolean
	hasAvatarFileWith: [FileWhereInput!]
	"""
	groups edge predicates
	"""
	hasGroups: Boolean
	hasGroupsWith: [GroupWhereInput!]
	"""
	templates edge predicates
	"""
	hasTemplates: Boolean
	hasTemplatesWith: [TemplateWhereInput!]
	"""
	integrations edge predicates
	"""
	hasIntegrations: Boolean
	hasIntegrationsWith: [IntegrationWhereInput!]
	"""
	document_data edge predicates
	"""
	hasDocumentData: Boolean
	hasDocumentDataWith: [DocumentDataWhereInput!]
	"""
	org_subscriptions edge predicates
	"""
	hasOrgSubscriptions: Boolean
	hasOrgSubscriptionsWith: [OrgSubscriptionWhereInput!]
	"""
	invites edge predicates
	"""
	hasInvites: Boolean
	hasInvitesWith: [InviteWhereInput!]
	"""
	subscribers edge predicates
	"""
	hasSubscribers: Boolean
	hasSubscribersWith: [SubscriberWhereInput!]
	"""
	entities edge predicates
	"""
	hasEntities: Boolean
	hasEntitiesWith: [EntityWhereInput!]
	"""
	entity_types edge predicates
	"""
	hasEntityTypes: Boolean
	hasEntityTypesWith: [EntityTypeWhereInput!]
	"""
	contacts edge predicates
	"""
	hasContacts: Boolean
	hasContactsWith: [ContactWhereInput!]
	"""
	notes edge predicates
	"""
	hasNotes: Boolean
	hasNotesWith: [NoteWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
	"""
	procedures edge predicates
	"""
	hasProcedures: Boolean
	hasProceduresWith: [ProcedureWhereInput!]
	"""
	internal_policies edge predicates
	"""
	hasInternalPolicies: Boolean
	hasInternalPoliciesWith: [InternalPolicyWhereInput!]
	"""
	risks edge predicates
	"""
	hasRisks: Boolean
	hasRisksWith: [RiskWhereInput!]
	"""
	control_objectives edge predicates
	"""
	hasControlObjectives: Boolean
	hasControlObjectivesWith: [ControlObjectiveWhereInput!]
	"""
	narratives edge predicates
	"""
	hasNarratives: Boolean
	hasNarrativesWith: [NarrativeWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	subcontrols edge predicates
	"""
	hasSubcontrols: Boolean
	hasSubcontrolsWith: [SubcontrolWhereInput!]
	"""
	evidence edge predicates
	"""
	hasEvidence: Boolean
	hasEvidenceWith: [EvidenceWhereInput!]
	"""
	members edge predicates
	"""
	hasMembers: Boolean
	hasMembersWith: [OrgMembershipWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: Cursor
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: Cursor
}
"""
Permission is enum for the permissions types
"""
enum Permission @goModel(model: "github.com/theopenlane/core/pkg/enums.Permission") {
	EDITOR
	VIEWER
	CREATOR
	BLOCKED
}
type PersonalAccessToken implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name associated with the token
	"""
	name: String!
	token: String!
	"""
	when the token expires
	"""
	expiresAt: Time
	"""
	a description of the token's purpose
	"""
	description: String
	scopes: [String!]
	lastUsedAt: Time
	owner: User!
	"""
	the organization(s) the token is associated with
	"""
	organizations: [Organization!]
	events: [Event!]
}
"""
Return response for createBulkPersonalAccessToken mutation
"""
type PersonalAccessTokenBulkCreatePayload {
	"""
	Created personalAccessTokens
	"""
	personalAccessTokens: [PersonalAccessToken!]
}
"""
A connection to a list of items.
"""
type PersonalAccessTokenConnection {
	"""
	A list of edges.
	"""
	edges: [PersonalAccessTokenEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createPersonalAccessToken mutation
"""
type PersonalAccessTokenCreatePayload {
	"""
	Created personalAccessToken
	"""
	personalAccessToken: PersonalAccessToken!
}
"""
Return response for deletePersonalAccessToken mutation
"""
type PersonalAccessTokenDeletePayload {
	"""
	Deleted personalAccessToken ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type PersonalAccessTokenEdge {
	"""
	The item at the end of the edge.
	"""
	node: PersonalAccessToken
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type PersonalAccessTokenSearchResult {
	personalAccessTokens: [PersonalAccessToken!]
}
"""
Return response for updatePersonalAccessToken mutation
"""
type PersonalAccessTokenUpdatePayload {
	"""
	Updated personalAccessToken
	"""
	personalAccessToken: PersonalAccessToken!
}
"""
PersonalAccessTokenWhereInput is used for filtering PersonalAccessToken objects.
Input was generated by ent.
"""
input PersonalAccessTokenWhereInput {
	not: PersonalAccessTokenWhereInput
	and: [PersonalAccessTokenWhereInput!]
	or: [PersonalAccessTokenWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	expires_at field predicates
	"""
	expiresAt: Time
	expiresAtNEQ: Time
	expiresAtIn: [Time!]
	expiresAtNotIn: [Time!]
	expiresAtGT: Time
	expiresAtGTE: Time
	expiresAtLT: Time
	expiresAtLTE: Time
	expiresAtIsNil: Boolean
	expiresAtNotNil: Boolean
	"""
	last_used_at field predicates
	"""
	lastUsedAt: Time
	lastUsedAtNEQ: Time
	lastUsedAtIn: [Time!]
	lastUsedAtNotIn: [Time!]
	lastUsedAtGT: Time
	lastUsedAtGTE: Time
	lastUsedAtLT: Time
	lastUsedAtLTE: Time
	lastUsedAtIsNil: Boolean
	lastUsedAtNotNil: Boolean
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [UserWhereInput!]
	"""
	organizations edge predicates
	"""
	hasOrganizations: Boolean
	hasOrganizationsWith: [OrganizationWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
}
scalar Price
type Procedure implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the procedure
	"""
	name: String!
	"""
	description of the procedure
	"""
	description: String
	"""
	status of the procedure
	"""
	status: String
	"""
	type of the procedure
	"""
	procedureType: String
	"""
	the date the procedure should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	"""
	version of the procedure
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the procedure
	"""
	background: String
	"""
	which controls are satisfied by the procedure
	"""
	satisfies: String
	"""
	json data for the procedure document
	"""
	details: Map
	owner: Organization
	"""
	groups that are blocked from viewing or editing the risk
	"""
	blockedGroups: [Group!]
	"""
	provides edit access to the risk to members of the group
	"""
	editors: [Group!]
	controls: [Control!]
	internalPolicies: [InternalPolicy!]
	narratives: [Narrative!]
	risks: [Risk!]
	tasks: [Task!]
	programs: [Program!]
}
"""
Return response for createBulkProcedure mutation
"""
type ProcedureBulkCreatePayload {
	"""
	Created procedures
	"""
	procedures: [Procedure!]
}
"""
A connection to a list of items.
"""
type ProcedureConnection {
	"""
	A list of edges.
	"""
	edges: [ProcedureEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createProcedure mutation
"""
type ProcedureCreatePayload {
	"""
	Created procedure
	"""
	procedure: Procedure!
}
"""
Return response for deleteProcedure mutation
"""
type ProcedureDeletePayload {
	"""
	Deleted procedure ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type ProcedureEdge {
	"""
	The item at the end of the edge.
	"""
	node: Procedure
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type ProcedureHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: ProcedureHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the procedure
	"""
	name: String!
	"""
	description of the procedure
	"""
	description: String
	"""
	status of the procedure
	"""
	status: String
	"""
	type of the procedure
	"""
	procedureType: String
	"""
	the date the procedure should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	"""
	version of the procedure
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the procedure
	"""
	background: String
	"""
	which controls are satisfied by the procedure
	"""
	satisfies: String
	"""
	json data for the procedure document
	"""
	details: Map
}
"""
A connection to a list of items.
"""
type ProcedureHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [ProcedureHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type ProcedureHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: ProcedureHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
ProcedureHistoryOpType is enum for the field operation
"""
enum ProcedureHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
ProcedureHistoryWhereInput is used for filtering ProcedureHistory objects.
Input was generated by ent.
"""
input ProcedureHistoryWhereInput {
	not: ProcedureHistoryWhereInput
	and: [ProcedureHistoryWhereInput!]
	or: [ProcedureHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: ProcedureHistoryOpType
	operationNEQ: ProcedureHistoryOpType
	operationIn: [ProcedureHistoryOpType!]
	operationNotIn: [ProcedureHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	procedure_type field predicates
	"""
	procedureType: String
	procedureTypeNEQ: String
	procedureTypeIn: [String!]
	procedureTypeNotIn: [String!]
	procedureTypeGT: String
	procedureTypeGTE: String
	procedureTypeLT: String
	procedureTypeLTE: String
	procedureTypeContains: String
	procedureTypeHasPrefix: String
	procedureTypeHasSuffix: String
	procedureTypeIsNil: Boolean
	procedureTypeNotNil: Boolean
	procedureTypeEqualFold: String
	procedureTypeContainsFold: String
	"""
	review_due field predicates
	"""
	reviewDue: Time
	reviewDueNEQ: Time
	reviewDueIn: [Time!]
	reviewDueNotIn: [Time!]
	reviewDueGT: Time
	reviewDueGTE: Time
	reviewDueLT: Time
	reviewDueLTE: Time
	reviewDueIsNil: Boolean
	reviewDueNotNil: Boolean
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	purpose_and_scope field predicates
	"""
	purposeAndScope: String
	purposeAndScopeNEQ: String
	purposeAndScopeIn: [String!]
	purposeAndScopeNotIn: [String!]
	purposeAndScopeGT: String
	purposeAndScopeGTE: String
	purposeAndScopeLT: String
	purposeAndScopeLTE: String
	purposeAndScopeContains: String
	purposeAndScopeHasPrefix: String
	purposeAndScopeHasSuffix: String
	purposeAndScopeIsNil: Boolean
	purposeAndScopeNotNil: Boolean
	purposeAndScopeEqualFold: String
	purposeAndScopeContainsFold: String
	"""
	background field predicates
	"""
	background: String
	backgroundNEQ: String
	backgroundIn: [String!]
	backgroundNotIn: [String!]
	backgroundGT: String
	backgroundGTE: String
	backgroundLT: String
	backgroundLTE: String
	backgroundContains: String
	backgroundHasPrefix: String
	backgroundHasSuffix: String
	backgroundIsNil: Boolean
	backgroundNotNil: Boolean
	backgroundEqualFold: String
	backgroundContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
}
type ProcedureSearchResult {
	procedures: [Procedure!]
}
"""
Return response for updateProcedure mutation
"""
type ProcedureUpdatePayload {
	"""
	Updated procedure
	"""
	procedure: Procedure!
}
"""
ProcedureWhereInput is used for filtering Procedure objects.
Input was generated by ent.
"""
input ProcedureWhereInput {
	not: ProcedureWhereInput
	and: [ProcedureWhereInput!]
	or: [ProcedureWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	procedure_type field predicates
	"""
	procedureType: String
	procedureTypeNEQ: String
	procedureTypeIn: [String!]
	procedureTypeNotIn: [String!]
	procedureTypeGT: String
	procedureTypeGTE: String
	procedureTypeLT: String
	procedureTypeLTE: String
	procedureTypeContains: String
	procedureTypeHasPrefix: String
	procedureTypeHasSuffix: String
	procedureTypeIsNil: Boolean
	procedureTypeNotNil: Boolean
	procedureTypeEqualFold: String
	procedureTypeContainsFold: String
	"""
	review_due field predicates
	"""
	reviewDue: Time
	reviewDueNEQ: Time
	reviewDueIn: [Time!]
	reviewDueNotIn: [Time!]
	reviewDueGT: Time
	reviewDueGTE: Time
	reviewDueLT: Time
	reviewDueLTE: Time
	reviewDueIsNil: Boolean
	reviewDueNotNil: Boolean
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	purpose_and_scope field predicates
	"""
	purposeAndScope: String
	purposeAndScopeNEQ: String
	purposeAndScopeIn: [String!]
	purposeAndScopeNotIn: [String!]
	purposeAndScopeGT: String
	purposeAndScopeGTE: String
	purposeAndScopeLT: String
	purposeAndScopeLTE: String
	purposeAndScopeContains: String
	purposeAndScopeHasPrefix: String
	purposeAndScopeHasSuffix: String
	purposeAndScopeIsNil: Boolean
	purposeAndScopeNotNil: Boolean
	purposeAndScopeEqualFold: String
	purposeAndScopeContainsFold: String
	"""
	background field predicates
	"""
	background: String
	backgroundNEQ: String
	backgroundIn: [String!]
	backgroundNotIn: [String!]
	backgroundGT: String
	backgroundGTE: String
	backgroundLT: String
	backgroundLTE: String
	backgroundContains: String
	backgroundHasPrefix: String
	backgroundHasSuffix: String
	backgroundIsNil: Boolean
	backgroundNotNil: Boolean
	backgroundEqualFold: String
	backgroundContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	blocked_groups edge predicates
	"""
	hasBlockedGroups: Boolean
	hasBlockedGroupsWith: [GroupWhereInput!]
	"""
	editors edge predicates
	"""
	hasEditors: Boolean
	hasEditorsWith: [GroupWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	internal_policies edge predicates
	"""
	hasInternalPolicies: Boolean
	hasInternalPoliciesWith: [InternalPolicyWhereInput!]
	"""
	narratives edge predicates
	"""
	hasNarratives: Boolean
	hasNarrativesWith: [NarrativeWhereInput!]
	"""
	risks edge predicates
	"""
	hasRisks: Boolean
	hasRisksWith: [RiskWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
}
type Program implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the program
	"""
	name: String!
	"""
	the description of the program
	"""
	description: String
	"""
	the status of the program
	"""
	status: ProgramProgramStatus!
	"""
	the start date of the period
	"""
	startDate: Time
	"""
	the end date of the period
	"""
	endDate: Time
	"""
	is the program ready for the auditor
	"""
	auditorReady: Boolean!
	"""
	can the auditor write comments
	"""
	auditorWriteComments: Boolean!
	"""
	can the auditor read comments
	"""
	auditorReadComments: Boolean!
	owner: Organization
	"""
	groups that are blocked from viewing or editing the risk
	"""
	blockedGroups: [Group!]
	"""
	provides edit access to the risk to members of the group
	"""
	editors: [Group!]
	"""
	provides view access to the risk to members of the group
	"""
	viewers: [Group!]
	controls: [Control!]
	subcontrols: [Subcontrol!]
	controlObjectives: [ControlObjective!]
	internalPolicies: [InternalPolicy!]
	procedures: [Procedure!]
	risks: [Risk!]
	tasks: [Task!]
	notes: [Note!]
	files: [File!]
	evidence: [Evidence!]
	narratives: [Narrative!]
	actionPlans: [ActionPlan!]
	"""
	the framework(s) that the program is based on
	"""
	standards: [Standard!]
	users: [User!]
	members: [ProgramMembership!]
}
"""
Return response for createBulkProgram mutation
"""
type ProgramBulkCreatePayload {
	"""
	Created programs
	"""
	programs: [Program!]
}
"""
A connection to a list of items.
"""
type ProgramConnection {
	"""
	A list of edges.
	"""
	edges: [ProgramEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createProgram mutation
"""
type ProgramCreatePayload {
	"""
	Created program
	"""
	program: Program!
}
"""
Return response for deleteProgram mutation
"""
type ProgramDeletePayload {
	"""
	Deleted program ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type ProgramEdge {
	"""
	The item at the end of the edge.
	"""
	node: Program
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type ProgramHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: ProgramHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the program
	"""
	name: String!
	"""
	the description of the program
	"""
	description: String
	"""
	the status of the program
	"""
	status: ProgramHistoryProgramStatus!
	"""
	the start date of the period
	"""
	startDate: Time
	"""
	the end date of the period
	"""
	endDate: Time
	"""
	is the program ready for the auditor
	"""
	auditorReady: Boolean!
	"""
	can the auditor write comments
	"""
	auditorWriteComments: Boolean!
	"""
	can the auditor read comments
	"""
	auditorReadComments: Boolean!
}
"""
A connection to a list of items.
"""
type ProgramHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [ProgramHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: ProgramHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
ProgramHistoryOpType is enum for the field operation
"""
enum ProgramHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
ProgramHistoryProgramStatus is enum for the field status
"""
enum ProgramHistoryProgramStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramStatus") {
	NOT_STARTED
	IN_PROGRESS
	READY_FOR_AUDITOR
	COMPLETED
	ACTION_REQUIRED
}
"""
ProgramHistoryWhereInput is used for filtering ProgramHistory objects.
Input was generated by ent.
"""
input ProgramHistoryWhereInput {
	not: ProgramHistoryWhereInput
	and: [ProgramHistoryWhereInput!]
	or: [ProgramHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: ProgramHistoryOpType
	operationNEQ: ProgramHistoryOpType
	operationIn: [ProgramHistoryOpType!]
	operationNotIn: [ProgramHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: ProgramHistoryProgramStatus
	statusNEQ: ProgramHistoryProgramStatus
	statusIn: [ProgramHistoryProgramStatus!]
	statusNotIn: [ProgramHistoryProgramStatus!]
	"""
	start_date field predicates
	"""
	startDate: Time
	startDateNEQ: Time
	startDateIn: [Time!]
	startDateNotIn: [Time!]
	startDateGT: Time
	startDateGTE: Time
	startDateLT: Time
	startDateLTE: Time
	startDateIsNil: Boolean
	startDateNotNil: Boolean
	"""
	end_date field predicates
	"""
	endDate: Time
	endDateNEQ: Time
	endDateIn: [Time!]
	endDateNotIn: [Time!]
	endDateGT: Time
	endDateGTE: Time
	endDateLT: Time
	endDateLTE: Time
	endDateIsNil: Boolean
	endDateNotNil: Boolean
	"""
	auditor_ready field predicates
	"""
	auditorReady: Boolean
	auditorReadyNEQ: Boolean
	"""
	auditor_write_comments field predicates
	"""
	auditorWriteComments: Boolean
	auditorWriteCommentsNEQ: Boolean
	"""
	auditor_read_comments field predicates
	"""
	auditorReadComments: Boolean
	auditorReadCommentsNEQ: Boolean
}
type ProgramMembership implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	role: ProgramMembershipRole!
	programID: ID!
	userID: ID!
	program: Program!
	user: User!
}
"""
Return response for createBulkProgramMembership mutation
"""
type ProgramMembershipBulkCreatePayload {
	"""
	Created programMemberships
	"""
	programMemberships: [ProgramMembership!]
}
"""
A connection to a list of items.
"""
type ProgramMembershipConnection {
	"""
	A list of edges.
	"""
	edges: [ProgramMembershipEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createProgramMembership mutation
"""
type ProgramMembershipCreatePayload {
	"""
	Created programMembership
	"""
	programMembership: ProgramMembership!
}
"""
Return response for deleteProgramMembership mutation
"""
type ProgramMembershipDeletePayload {
	"""
	Deleted programMembership ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type ProgramMembershipEdge {
	"""
	The item at the end of the edge.
	"""
	node: ProgramMembership
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type ProgramMembershipHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: ProgramMembershipHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	role: ProgramMembershipHistoryRole!
	programID: String!
	userID: String!
}
"""
A connection to a list of items.
"""
type ProgramMembershipHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [ProgramMembershipHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type ProgramMembershipHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: ProgramMembershipHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
ProgramMembershipHistoryOpType is enum for the field operation
"""
enum ProgramMembershipHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
ProgramMembershipHistoryRole is enum for the field role
"""
enum ProgramMembershipHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
}
"""
ProgramMembershipHistoryWhereInput is used for filtering ProgramMembershipHistory objects.
Input was generated by ent.
"""
input ProgramMembershipHistoryWhereInput {
	not: ProgramMembershipHistoryWhereInput
	and: [ProgramMembershipHistoryWhereInput!]
	or: [ProgramMembershipHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: ProgramMembershipHistoryOpType
	operationNEQ: ProgramMembershipHistoryOpType
	operationIn: [ProgramMembershipHistoryOpType!]
	operationNotIn: [ProgramMembershipHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	role field predicates
	"""
	role: ProgramMembershipHistoryRole
	roleNEQ: ProgramMembershipHistoryRole
	roleIn: [ProgramMembershipHistoryRole!]
	roleNotIn: [ProgramMembershipHistoryRole!]
	"""
	program_id field predicates
	"""
	programID: String
	programIDNEQ: String
	programIDIn: [String!]
	programIDNotIn: [String!]
	programIDGT: String
	programIDGTE: String
	programIDLT: String
	programIDLTE: String
	programIDContains: String
	programIDHasPrefix: String
	programIDHasSuffix: String
	programIDEqualFold: String
	programIDContainsFold: String
	"""
	user_id field predicates
	"""
	userID: String
	userIDNEQ: String
	userIDIn: [String!]
	userIDNotIn: [String!]
	userIDGT: String
	userIDGTE: String
	userIDLT: String
	userIDLTE: String
	userIDContains: String
	userIDHasPrefix: String
	userIDHasSuffix: String
	userIDEqualFold: String
	userIDContainsFold: String
}
"""
ProgramMembershipRole is enum for the field role
"""
enum ProgramMembershipRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
}
"""
Return response for updateProgramMembership mutation
"""
type ProgramMembershipUpdatePayload {
	"""
	Updated programMembership
	"""
	programMembership: ProgramMembership!
}
"""
ProgramMembershipWhereInput is used for filtering ProgramMembership objects.
Input was generated by ent.
"""
input ProgramMembershipWhereInput {
	not: ProgramMembershipWhereInput
	and: [ProgramMembershipWhereInput!]
	or: [ProgramMembershipWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	role field predicates
	"""
	role: ProgramMembershipRole
	roleNEQ: ProgramMembershipRole
	roleIn: [ProgramMembershipRole!]
	roleNotIn: [ProgramMembershipRole!]
	programID: String
	userID: String
}
"""
ProgramProgramStatus is enum for the field status
"""
enum ProgramProgramStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.ProgramStatus") {
	NOT_STARTED
	IN_PROGRESS
	READY_FOR_AUDITOR
	COMPLETED
	ACTION_REQUIRED
}
type ProgramSearchResult {
	programs: [Program!]
}
"""
Return response for updateProgram mutation
"""
type ProgramUpdatePayload {
	"""
	Updated program
	"""
	program: Program!
}
"""
ProgramWhereInput is used for filtering Program objects.
Input was generated by ent.
"""
input ProgramWhereInput {
	not: ProgramWhereInput
	and: [ProgramWhereInput!]
	or: [ProgramWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: ProgramProgramStatus
	statusNEQ: ProgramProgramStatus
	statusIn: [ProgramProgramStatus!]
	statusNotIn: [ProgramProgramStatus!]
	"""
	start_date field predicates
	"""
	startDate: Time
	startDateNEQ: Time
	startDateIn: [Time!]
	startDateNotIn: [Time!]
	startDateGT: Time
	startDateGTE: Time
	startDateLT: Time
	startDateLTE: Time
	startDateIsNil: Boolean
	startDateNotNil: Boolean
	"""
	end_date field predicates
	"""
	endDate: Time
	endDateNEQ: Time
	endDateIn: [Time!]
	endDateNotIn: [Time!]
	endDateGT: Time
	endDateGTE: Time
	endDateLT: Time
	endDateLTE: Time
	endDateIsNil: Boolean
	endDateNotNil: Boolean
	"""
	auditor_ready field predicates
	"""
	auditorReady: Boolean
	auditorReadyNEQ: Boolean
	"""
	auditor_write_comments field predicates
	"""
	auditorWriteComments: Boolean
	auditorWriteCommentsNEQ: Boolean
	"""
	auditor_read_comments field predicates
	"""
	auditorReadComments: Boolean
	auditorReadCommentsNEQ: Boolean
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	blocked_groups edge predicates
	"""
	hasBlockedGroups: Boolean
	hasBlockedGroupsWith: [GroupWhereInput!]
	"""
	editors edge predicates
	"""
	hasEditors: Boolean
	hasEditorsWith: [GroupWhereInput!]
	"""
	viewers edge predicates
	"""
	hasViewers: Boolean
	hasViewersWith: [GroupWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	subcontrols edge predicates
	"""
	hasSubcontrols: Boolean
	hasSubcontrolsWith: [SubcontrolWhereInput!]
	"""
	control_objectives edge predicates
	"""
	hasControlObjectives: Boolean
	hasControlObjectivesWith: [ControlObjectiveWhereInput!]
	"""
	internal_policies edge predicates
	"""
	hasInternalPolicies: Boolean
	hasInternalPoliciesWith: [InternalPolicyWhereInput!]
	"""
	procedures edge predicates
	"""
	hasProcedures: Boolean
	hasProceduresWith: [ProcedureWhereInput!]
	"""
	risks edge predicates
	"""
	hasRisks: Boolean
	hasRisksWith: [RiskWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	notes edge predicates
	"""
	hasNotes: Boolean
	hasNotesWith: [NoteWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
	"""
	evidence edge predicates
	"""
	hasEvidence: Boolean
	hasEvidenceWith: [EvidenceWhereInput!]
	"""
	narratives edge predicates
	"""
	hasNarratives: Boolean
	hasNarrativesWith: [NarrativeWhereInput!]
	"""
	action_plans edge predicates
	"""
	hasActionPlans: Boolean
	hasActionPlansWith: [ActionPlanWhereInput!]
	"""
	standards edge predicates
	"""
	hasStandards: Boolean
	hasStandardsWith: [StandardWhereInput!]
	"""
	users edge predicates
	"""
	hasUsers: Boolean
	hasUsersWith: [UserWhereInput!]
	"""
	members edge predicates
	"""
	hasMembers: Boolean
	hasMembersWith: [ProgramMembershipWhereInput!]
}
type Query {
	"""
	Fetches an object given its ID.
	"""
	node(
		"""
		ID of the object.
		"""
		id: ID!
	): Node
	"""
	Lookup nodes by a list of IDs.
	"""
	nodes(
		"""
		The list of node IDs.
		"""
		ids: [ID!]!
	): [Node]!
	apiTokens(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for APITokens returned from the connection.
		"""
		where: APITokenWhereInput
	): APITokenConnection!
	actionPlans(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ActionPlans returned from the connection.
		"""
		where: ActionPlanWhereInput
	): ActionPlanConnection!
	actionPlanHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ActionPlanHistories returned from the connection.
		"""
		where: ActionPlanHistoryWhereInput
	): ActionPlanHistoryConnection!
	contacts(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Contacts returned from the connection.
		"""
		where: ContactWhereInput
	): ContactConnection!
	contactHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ContactHistories returned from the connection.
		"""
		where: ContactHistoryWhereInput
	): ContactHistoryConnection!
	controls(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Controls returned from the connection.
		"""
		where: ControlWhereInput
	): ControlConnection!
	controlHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ControlHistories returned from the connection.
		"""
		where: ControlHistoryWhereInput
	): ControlHistoryConnection!
	controlObjectives(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ControlObjectives returned from the connection.
		"""
		where: ControlObjectiveWhereInput
	): ControlObjectiveConnection!
	controlObjectiveHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ControlObjectiveHistories returned from the connection.
		"""
		where: ControlObjectiveHistoryWhereInput
	): ControlObjectiveHistoryConnection!
	documentDataSlice(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for DocumentDataSlice returned from the connection.
		"""
		where: DocumentDataWhereInput
	): DocumentDataConnection!
	documentDataHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for DocumentDataHistories returned from the connection.
		"""
		where: DocumentDataHistoryWhereInput
	): DocumentDataHistoryConnection!
	entities(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Entities returned from the connection.
		"""
		orderBy: EntityOrder

		"""
		Filtering options for Entities returned from the connection.
		"""
		where: EntityWhereInput
	): EntityConnection!
	entityHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for EntityHistories returned from the connection.
		"""
		orderBy: EntityHistoryOrder

		"""
		Filtering options for EntityHistories returned from the connection.
		"""
		where: EntityHistoryWhereInput
	): EntityHistoryConnection!
	entityTypes(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for EntityTypes returned from the connection.
		"""
		orderBy: EntityTypeOrder

		"""
		Filtering options for EntityTypes returned from the connection.
		"""
		where: EntityTypeWhereInput
	): EntityTypeConnection!
	entityTypeHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for EntityTypeHistories returned from the connection.
		"""
		orderBy: EntityTypeHistoryOrder

		"""
		Filtering options for EntityTypeHistories returned from the connection.
		"""
		where: EntityTypeHistoryWhereInput
	): EntityTypeHistoryConnection!
	events(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Events returned from the connection.
		"""
		where: EventWhereInput
	): EventConnection!
	eventHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for EventHistories returned from the connection.
		"""
		where: EventHistoryWhereInput
	): EventHistoryConnection!
	evidences(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Evidences returned from the connection.
		"""
		where: EvidenceWhereInput
	): EvidenceConnection!
	evidenceHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for EvidenceHistories returned from the connection.
		"""
		where: EvidenceHistoryWhereInput
	): EvidenceHistoryConnection!
	files(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Files returned from the connection.
		"""
		where: FileWhereInput
	): FileConnection!
	fileHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for FileHistories returned from the connection.
		"""
		where: FileHistoryWhereInput
	): FileHistoryConnection!
	groups(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Groups returned from the connection.
		"""
		orderBy: GroupOrder

		"""
		Filtering options for Groups returned from the connection.
		"""
		where: GroupWhereInput
	): GroupConnection!
	groupHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for GroupHistories returned from the connection.
		"""
		orderBy: GroupHistoryOrder

		"""
		Filtering options for GroupHistories returned from the connection.
		"""
		where: GroupHistoryWhereInput
	): GroupHistoryConnection!
	groupMemberships(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for GroupMemberships returned from the connection.
		"""
		where: GroupMembershipWhereInput
	): GroupMembershipConnection!
	groupMembershipHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for GroupMembershipHistories returned from the connection.
		"""
		where: GroupMembershipHistoryWhereInput
	): GroupMembershipHistoryConnection!
	groupSettings(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for GroupSettings returned from the connection.
		"""
		where: GroupSettingWhereInput
	): GroupSettingConnection!
	groupSettingHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for GroupSettingHistories returned from the connection.
		"""
		where: GroupSettingHistoryWhereInput
	): GroupSettingHistoryConnection!
	hushes(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Hushes returned from the connection.
		"""
		orderBy: HushOrder

		"""
		Filtering options for Hushes returned from the connection.
		"""
		where: HushWhereInput
	): HushConnection!
	hushHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for HushHistories returned from the connection.
		"""
		orderBy: HushHistoryOrder

		"""
		Filtering options for HushHistories returned from the connection.
		"""
		where: HushHistoryWhereInput
	): HushHistoryConnection!
	integrations(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Integrations returned from the connection.
		"""
		orderBy: IntegrationOrder

		"""
		Filtering options for Integrations returned from the connection.
		"""
		where: IntegrationWhereInput
	): IntegrationConnection!
	integrationHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for IntegrationHistories returned from the connection.
		"""
		orderBy: IntegrationHistoryOrder

		"""
		Filtering options for IntegrationHistories returned from the connection.
		"""
		where: IntegrationHistoryWhereInput
	): IntegrationHistoryConnection!
	internalPolicies(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for InternalPolicies returned from the connection.
		"""
		where: InternalPolicyWhereInput
	): InternalPolicyConnection!
	internalPolicyHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for InternalPolicyHistories returned from the connection.
		"""
		where: InternalPolicyHistoryWhereInput
	): InternalPolicyHistoryConnection!
	invites(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Invites returned from the connection.
		"""
		where: InviteWhereInput
	): InviteConnection!
	narratives(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Narratives returned from the connection.
		"""
		where: NarrativeWhereInput
	): NarrativeConnection!
	narrativeHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for NarrativeHistories returned from the connection.
		"""
		where: NarrativeHistoryWhereInput
	): NarrativeHistoryConnection!
	notes(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Notes returned from the connection.
		"""
		where: NoteWhereInput
	): NoteConnection!
	noteHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for NoteHistories returned from the connection.
		"""
		where: NoteHistoryWhereInput
	): NoteHistoryConnection!
	orgMemberships(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for OrgMemberships returned from the connection.
		"""
		where: OrgMembershipWhereInput
	): OrgMembershipConnection!
	orgMembershipHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for OrgMembershipHistories returned from the connection.
		"""
		where: OrgMembershipHistoryWhereInput
	): OrgMembershipHistoryConnection!
	orgSubscriptions(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for OrgSubscriptions returned from the connection.
		"""
		where: OrgSubscriptionWhereInput
	): OrgSubscriptionConnection!
	orgSubscriptionHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for OrgSubscriptionHistories returned from the connection.
		"""
		where: OrgSubscriptionHistoryWhereInput
	): OrgSubscriptionHistoryConnection!
	organizations(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Organizations returned from the connection.
		"""
		orderBy: OrganizationOrder

		"""
		Filtering options for Organizations returned from the connection.
		"""
		where: OrganizationWhereInput
	): OrganizationConnection!
	organizationHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for OrganizationHistories returned from the connection.
		"""
		orderBy: OrganizationHistoryOrder

		"""
		Filtering options for OrganizationHistories returned from the connection.
		"""
		where: OrganizationHistoryWhereInput
	): OrganizationHistoryConnection!
	organizationSettings(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for OrganizationSettings returned from the connection.
		"""
		where: OrganizationSettingWhereInput
	): OrganizationSettingConnection!
	organizationSettingHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for OrganizationSettingHistories returned from the connection.
		"""
		where: OrganizationSettingHistoryWhereInput
	): OrganizationSettingHistoryConnection!
	personalAccessTokens(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for PersonalAccessTokens returned from the connection.
		"""
		where: PersonalAccessTokenWhereInput
	): PersonalAccessTokenConnection!
	procedures(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Procedures returned from the connection.
		"""
		where: ProcedureWhereInput
	): ProcedureConnection!
	procedureHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ProcedureHistories returned from the connection.
		"""
		where: ProcedureHistoryWhereInput
	): ProcedureHistoryConnection!
	programs(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Programs returned from the connection.
		"""
		where: ProgramWhereInput
	): ProgramConnection!
	programHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ProgramHistories returned from the connection.
		"""
		where: ProgramHistoryWhereInput
	): ProgramHistoryConnection!
	programMemberships(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ProgramMemberships returned from the connection.
		"""
		where: ProgramMembershipWhereInput
	): ProgramMembershipConnection!
	programMembershipHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for ProgramMembershipHistories returned from the connection.
		"""
		where: ProgramMembershipHistoryWhereInput
	): ProgramMembershipHistoryConnection!
	risks(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Risks returned from the connection.
		"""
		where: RiskWhereInput
	): RiskConnection!
	riskHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for RiskHistories returned from the connection.
		"""
		where: RiskHistoryWhereInput
	): RiskHistoryConnection!
	standards(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Standards returned from the connection.
		"""
		where: StandardWhereInput
	): StandardConnection!
	standardHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for StandardHistories returned from the connection.
		"""
		where: StandardHistoryWhereInput
	): StandardHistoryConnection!
	subcontrols(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Subcontrols returned from the connection.
		"""
		where: SubcontrolWhereInput
	): SubcontrolConnection!
	subcontrolHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for SubcontrolHistories returned from the connection.
		"""
		where: SubcontrolHistoryWhereInput
	): SubcontrolHistoryConnection!
	subscribers(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Subscribers returned from the connection.
		"""
		where: SubscriberWhereInput
	): SubscriberConnection!
	tfaSettings(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for TFASettings returned from the connection.
		"""
		where: TFASettingWhereInput
	): TFASettingConnection!
	tasks(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Tasks returned from the connection.
		"""
		where: TaskWhereInput
	): TaskConnection!
	taskHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for TaskHistories returned from the connection.
		"""
		where: TaskHistoryWhereInput
	): TaskHistoryConnection!
	templates(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Templates returned from the connection.
		"""
		orderBy: TemplateOrder

		"""
		Filtering options for Templates returned from the connection.
		"""
		where: TemplateWhereInput
	): TemplateConnection!
	templateHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for TemplateHistories returned from the connection.
		"""
		orderBy: TemplateHistoryOrder

		"""
		Filtering options for TemplateHistories returned from the connection.
		"""
		where: TemplateHistoryWhereInput
	): TemplateHistoryConnection!
	users(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Users returned from the connection.
		"""
		orderBy: UserOrder

		"""
		Filtering options for Users returned from the connection.
		"""
		where: UserWhereInput
	): UserConnection!
	userHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for UserHistories returned from the connection.
		"""
		orderBy: UserHistoryOrder

		"""
		Filtering options for UserHistories returned from the connection.
		"""
		where: UserHistoryWhereInput
	): UserHistoryConnection!
	userSettings(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for UserSettings returned from the connection.
		"""
		where: UserSettingWhereInput
	): UserSettingConnection!
	userSettingHistories(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for UserSettingHistories returned from the connection.
		"""
		where: UserSettingHistoryWhereInput
	): UserSettingHistoryConnection!
	"""
	Look up actionPlan by ID
	"""
	actionPlan(
		"""
		ID of the actionPlan
		"""
		id: ID!
	): ActionPlan!
	"""
	Search across APIToken objects
	"""
	adminAPITokenSearch(
		"""
		Search query
		"""
		query: String!
	): APITokenSearchResult
	"""
	Search across ActionPlan objects
	"""
	adminActionPlanSearch(
		"""
		Search query
		"""
		query: String!
	): ActionPlanSearchResult
	"""
	Search across Contact objects
	"""
	adminContactSearch(
		"""
		Search query
		"""
		query: String!
	): ContactSearchResult
	"""
	Search across Control objects
	"""
	adminControlSearch(
		"""
		Search query
		"""
		query: String!
	): ControlSearchResult
	"""
	Search across ControlObjective objects
	"""
	adminControlObjectiveSearch(
		"""
		Search query
		"""
		query: String!
	): ControlObjectiveSearchResult
	"""
	Search across DocumentData objects
	"""
	adminDocumentDataSearch(
		"""
		Search query
		"""
		query: String!
	): DocumentDataSearchResult
	"""
	Search across Entity objects
	"""
	adminEntitySearch(
		"""
		Search query
		"""
		query: String!
	): EntitySearchResult
	"""
	Search across EntityType objects
	"""
	adminEntityTypeSearch(
		"""
		Search query
		"""
		query: String!
	): EntityTypeSearchResult
	"""
	Search across Event objects
	"""
	adminEventSearch(
		"""
		Search query
		"""
		query: String!
	): EventSearchResult
	"""
	Search across Evidence objects
	"""
	adminEvidenceSearch(
		"""
		Search query
		"""
		query: String!
	): EvidenceSearchResult
	"""
	Search across File objects
	"""
	adminFileSearch(
		"""
		Search query
		"""
		query: String!
	): FileSearchResult
	"""
	Search across Group objects
	"""
	adminGroupSearch(
		"""
		Search query
		"""
		query: String!
	): GroupSearchResult
	"""
	Search across Integration objects
	"""
	adminIntegrationSearch(
		"""
		Search query
		"""
		query: String!
	): IntegrationSearchResult
	"""
	Search across InternalPolicy objects
	"""
	adminInternalPolicySearch(
		"""
		Search query
		"""
		query: String!
	): InternalPolicySearchResult
	"""
	Search across Narrative objects
	"""
	adminNarrativeSearch(
		"""
		Search query
		"""
		query: String!
	): NarrativeSearchResult
	"""
	Search across OrgSubscription objects
	"""
	adminOrgSubscriptionSearch(
		"""
		Search query
		"""
		query: String!
	): OrgSubscriptionSearchResult
	"""
	Search across Organization objects
	"""
	adminOrganizationSearch(
		"""
		Search query
		"""
		query: String!
	): OrganizationSearchResult
	"""
	Search across OrganizationSetting objects
	"""
	adminOrganizationSettingSearch(
		"""
		Search query
		"""
		query: String!
	): OrganizationSettingSearchResult
	"""
	Search across PersonalAccessToken objects
	"""
	adminPersonalAccessTokenSearch(
		"""
		Search query
		"""
		query: String!
	): PersonalAccessTokenSearchResult
	"""
	Search across Procedure objects
	"""
	adminProcedureSearch(
		"""
		Search query
		"""
		query: String!
	): ProcedureSearchResult
	"""
	Search across Program objects
	"""
	adminProgramSearch(
		"""
		Search query
		"""
		query: String!
	): ProgramSearchResult
	"""
	Search across Risk objects
	"""
	adminRiskSearch(
		"""
		Search query
		"""
		query: String!
	): RiskSearchResult
	"""
	Search across Standard objects
	"""
	adminStandardSearch(
		"""
		Search query
		"""
		query: String!
	): StandardSearchResult
	"""
	Search across Subcontrol objects
	"""
	adminSubcontrolSearch(
		"""
		Search query
		"""
		query: String!
	): SubcontrolSearchResult
	"""
	Search across Subscriber objects
	"""
	adminSubscriberSearch(
		"""
		Search query
		"""
		query: String!
	): SubscriberSearchResult
	"""
	Search across Task objects
	"""
	adminTaskSearch(
		"""
		Search query
		"""
		query: String!
	): TaskSearchResult
	"""
	Search across Template objects
	"""
	adminTemplateSearch(
		"""
		Search query
		"""
		query: String!
	): TemplateSearchResult
	"""
	Search across User objects
	"""
	adminUserSearch(
		"""
		Search query
		"""
		query: String!
	): UserSearchResult
	"""
	Search across UserSetting objects
	"""
	adminUserSettingSearch(
		"""
		Search query
		"""
		query: String!
	): UserSettingSearchResult
	"""
	Look up apiToken by ID
	"""
	apiToken(
		"""
		ID of the apiToken
		"""
		id: ID!
	): APIToken!
	auditLogs(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for AuditLogs returned from the connection.
		"""
		where: AuditLogWhereInput
	): AuditLogConnection!
	"""
	Look up contact by ID
	"""
	contact(
		"""
		ID of the contact
		"""
		id: ID!
	): Contact!
	"""
	Look up control by ID
	"""
	control(
		"""
		ID of the control
		"""
		id: ID!
	): Control!
	"""
	Look up controlObjective by ID
	"""
	controlObjective(
		"""
		ID of the controlObjective
		"""
		id: ID!
	): ControlObjective!
	"""
	Look up documentData by ID
	"""
	documentData(
		"""
		ID of the documentData
		"""
		id: ID!
	): DocumentData!
	"""
	Look up entity by ID
	"""
	entity(
		"""
		ID of the entity
		"""
		id: ID!
	): Entity!
	"""
	Look up entityType by ID
	"""
	entityType(
		"""
		ID of the entityType
		"""
		id: ID!
	): EntityType!
	"""
	Look up event by ID
	"""
	event(
		"""
		ID of the event
		"""
		id: ID!
	): Event!
	"""
	Look up evidence by ID
	"""
	evidence(
		"""
		ID of the evidence
		"""
		id: ID!
	): Evidence!
	"""
	Look up file by ID
	"""
	file(
		"""
		ID of the file
		"""
		id: ID!
	): File!
	"""
	Look up group by ID
	"""
	group(
		"""
		ID of the group
		"""
		id: ID!
	): Group!
	"""
	Look up groupMembership by ID
	"""
	groupMembership(
		"""
		ID of the groupMembership
		"""
		id: ID!
	): GroupMembership!
	"""
	Look up groupSetting by ID
	"""
	groupSetting(
		"""
		ID of the groupSetting
		"""
		id: ID!
	): GroupSetting!
	"""
	Look up hush by ID
	"""
	hush(
		"""
		ID of the hush
		"""
		id: ID!
	): Hush!
	"""
	Look up integration by ID
	"""
	integration(
		"""
		ID of the integration
		"""
		id: ID!
	): Integration!
	"""
	Look up internalPolicy by ID
	"""
	internalPolicy(
		"""
		ID of the internalPolicy
		"""
		id: ID!
	): InternalPolicy!
	"""
	Look up invite by ID
	"""
	invite(
		"""
		ID of the invite
		"""
		id: ID!
	): Invite!
	"""
	Look up narrative by ID
	"""
	narrative(
		"""
		ID of the narrative
		"""
		id: ID!
	): Narrative!
	"""
	Look up note by ID
	"""
	note(
		"""
		ID of the note
		"""
		id: ID!
	): Note!
	"""
	Look up organization by ID
	"""
	organization(
		"""
		ID of the organization
		"""
		id: ID!
	): Organization!
	"""
	Look up organizationSetting by ID
	"""
	organizationSetting(
		"""
		ID of the organizationSetting
		"""
		id: ID!
	): OrganizationSetting!
	"""
	Look up orgMembership by ID
	"""
	orgMembership(
		"""
		ID of the orgMembership
		"""
		id: ID!
	): OrgMembership!
	"""
	Look up orgSubscription by ID
	"""
	orgSubscription(
		"""
		ID of the orgSubscription
		"""
		id: ID!
	): OrgSubscription!
	"""
	Look up personalAccessToken by ID
	"""
	personalAccessToken(
		"""
		ID of the personalAccessToken
		"""
		id: ID!
	): PersonalAccessToken!
	"""
	Look up procedure by ID
	"""
	procedure(
		"""
		ID of the procedure
		"""
		id: ID!
	): Procedure!
	"""
	Look up program by ID
	"""
	program(
		"""
		ID of the program
		"""
		id: ID!
	): Program!
	"""
	Look up programMembership by ID
	"""
	programMembership(
		"""
		ID of the programMembership
		"""
		id: ID!
	): ProgramMembership!
	"""
	Look up risk by ID
	"""
	risk(
		"""
		ID of the risk
		"""
		id: ID!
	): Risk!
	"""
	Search across APIToken objects
	"""
	apiTokenSearch(
		"""
		Search query
		"""
		query: String!
	): APITokenSearchResult
	"""
	Search across ActionPlan objects
	"""
	actionPlanSearch(
		"""
		Search query
		"""
		query: String!
	): ActionPlanSearchResult
	"""
	Search across Contact objects
	"""
	contactSearch(
		"""
		Search query
		"""
		query: String!
	): ContactSearchResult
	"""
	Search across Control objects
	"""
	controlSearch(
		"""
		Search query
		"""
		query: String!
	): ControlSearchResult
	"""
	Search across ControlObjective objects
	"""
	controlObjectiveSearch(
		"""
		Search query
		"""
		query: String!
	): ControlObjectiveSearchResult
	"""
	Search across DocumentData objects
	"""
	documentDataSearch(
		"""
		Search query
		"""
		query: String!
	): DocumentDataSearchResult
	"""
	Search across Entity objects
	"""
	entitySearch(
		"""
		Search query
		"""
		query: String!
	): EntitySearchResult
	"""
	Search across EntityType objects
	"""
	entityTypeSearch(
		"""
		Search query
		"""
		query: String!
	): EntityTypeSearchResult
	"""
	Search across Event objects
	"""
	eventSearch(
		"""
		Search query
		"""
		query: String!
	): EventSearchResult
	"""
	Search across Evidence objects
	"""
	evidenceSearch(
		"""
		Search query
		"""
		query: String!
	): EvidenceSearchResult
	"""
	Search across File objects
	"""
	fileSearch(
		"""
		Search query
		"""
		query: String!
	): FileSearchResult
	"""
	Search across Group objects
	"""
	groupSearch(
		"""
		Search query
		"""
		query: String!
	): GroupSearchResult
	"""
	Search across Integration objects
	"""
	integrationSearch(
		"""
		Search query
		"""
		query: String!
	): IntegrationSearchResult
	"""
	Search across InternalPolicy objects
	"""
	internalPolicySearch(
		"""
		Search query
		"""
		query: String!
	): InternalPolicySearchResult
	"""
	Search across Narrative objects
	"""
	narrativeSearch(
		"""
		Search query
		"""
		query: String!
	): NarrativeSearchResult
	"""
	Search across OrgSubscription objects
	"""
	orgSubscriptionSearch(
		"""
		Search query
		"""
		query: String!
	): OrgSubscriptionSearchResult
	"""
	Search across Organization objects
	"""
	organizationSearch(
		"""
		Search query
		"""
		query: String!
	): OrganizationSearchResult
	"""
	Search across OrganizationSetting objects
	"""
	organizationSettingSearch(
		"""
		Search query
		"""
		query: String!
	): OrganizationSettingSearchResult
	"""
	Search across PersonalAccessToken objects
	"""
	personalAccessTokenSearch(
		"""
		Search query
		"""
		query: String!
	): PersonalAccessTokenSearchResult
	"""
	Search across Procedure objects
	"""
	procedureSearch(
		"""
		Search query
		"""
		query: String!
	): ProcedureSearchResult
	"""
	Search across Program objects
	"""
	programSearch(
		"""
		Search query
		"""
		query: String!
	): ProgramSearchResult
	"""
	Search across Risk objects
	"""
	riskSearch(
		"""
		Search query
		"""
		query: String!
	): RiskSearchResult
	"""
	Search across Standard objects
	"""
	standardSearch(
		"""
		Search query
		"""
		query: String!
	): StandardSearchResult
	"""
	Search across Subcontrol objects
	"""
	subcontrolSearch(
		"""
		Search query
		"""
		query: String!
	): SubcontrolSearchResult
	"""
	Search across Subscriber objects
	"""
	subscriberSearch(
		"""
		Search query
		"""
		query: String!
	): SubscriberSearchResult
	"""
	Search across Task objects
	"""
	taskSearch(
		"""
		Search query
		"""
		query: String!
	): TaskSearchResult
	"""
	Search across Template objects
	"""
	templateSearch(
		"""
		Search query
		"""
		query: String!
	): TemplateSearchResult
	"""
	Search across User objects
	"""
	userSearch(
		"""
		Search query
		"""
		query: String!
	): UserSearchResult
	"""
	Search across UserSetting objects
	"""
	userSettingSearch(
		"""
		Search query
		"""
		query: String!
	): UserSettingSearchResult
	"""
	Search across all objects
	"""
	search(
		"""
		Search query
		"""
		query: String!
	): SearchResultConnection
	"""
	Admin search across all objects
	"""
	adminSearch(
		"""
		Search query
		"""
		query: String!
	): SearchResultConnection
	"""
	Look up standard by ID
	"""
	standard(
		"""
		ID of the standard
		"""
		id: ID!
	): Standard!
	"""
	Look up subcontrol by ID
	"""
	subcontrol(
		"""
		ID of the subcontrol
		"""
		id: ID!
	): Subcontrol!
	"""
	Look up subscriber by Email
	"""
	subscriber(
		"""
		Email of the subscriber
		"""
		email: String!
	): Subscriber!
	"""
	Look up task by ID
	"""
	task(
		"""
		ID of the task
		"""
		id: ID!
	): Task!
	"""
	Look up template by ID
	"""
	template(
		"""
		ID of the template
		"""
		id: ID!
	): Template!
	"""
	Look up tfaSetting for the current user
	"""
	tfaSetting(
		"""
		ID of the tfaSetting
		"""
		id: ID
	): TFASetting!
	"""
	Look up user by ID
	"""
	user(
		"""
		ID of the user
		"""
		id: ID!
	): User!
	"""
	Look up user authorized user
	"""
	self: User!
	"""
	Look up userSetting by ID
	"""
	userSetting(
		"""
		ID of the userSetting
		"""
		id: ID!
	): UserSetting!
}
type Risk implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the name of the risk
	"""
	name: String!
	"""
	description of the risk
	"""
	description: String
	"""
	status of the risk - mitigated or not, inflight, etc.
	"""
	status: String
	"""
	type of the risk, e.g. strategic, operational, financial, external, etc.
	"""
	riskType: String
	"""
	business costs associated with the risk
	"""
	businessCosts: String
	"""
	impact of the risk - high, medium, low
	"""
	impact: RiskRiskImpact
	"""
	likelihood of the risk occurring; unlikely, likely, highly likely
	"""
	likelihood: RiskRiskLikelihood
	"""
	mitigation for the risk
	"""
	mitigation: String
	"""
	which controls are satisfied by the risk
	"""
	satisfies: String
	"""
	json data for the risk document
	"""
	details: Map
	owner: Organization
	"""
	groups that are blocked from viewing or editing the risk
	"""
	blockedGroups: [Group!]
	"""
	provides edit access to the risk to members of the group
	"""
	editors: [Group!]
	"""
	provides view access to the risk to members of the group
	"""
	viewers: [Group!]
	control: [Control!]
	procedure: [Procedure!]
	actionPlans: [ActionPlan!]
	programs: [Program!]
}
"""
Return response for createBulkRisk mutation
"""
type RiskBulkCreatePayload {
	"""
	Created risks
	"""
	risks: [Risk!]
}
"""
A connection to a list of items.
"""
type RiskConnection {
	"""
	A list of edges.
	"""
	edges: [RiskEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createRisk mutation
"""
type RiskCreatePayload {
	"""
	Created risk
	"""
	risk: Risk!
}
"""
Return response for deleteRisk mutation
"""
type RiskDeletePayload {
	"""
	Deleted risk ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type RiskEdge {
	"""
	The item at the end of the edge.
	"""
	node: Risk
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type RiskHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: RiskHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the name of the risk
	"""
	name: String!
	"""
	description of the risk
	"""
	description: String
	"""
	status of the risk - mitigated or not, inflight, etc.
	"""
	status: String
	"""
	type of the risk, e.g. strategic, operational, financial, external, etc.
	"""
	riskType: String
	"""
	business costs associated with the risk
	"""
	businessCosts: String
	"""
	impact of the risk - high, medium, low
	"""
	impact: RiskHistoryRiskImpact
	"""
	likelihood of the risk occurring; unlikely, likely, highly likely
	"""
	likelihood: RiskHistoryRiskLikelihood
	"""
	mitigation for the risk
	"""
	mitigation: String
	"""
	which controls are satisfied by the risk
	"""
	satisfies: String
	"""
	json data for the risk document
	"""
	details: Map
}
"""
A connection to a list of items.
"""
type RiskHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [RiskHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type RiskHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: RiskHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
RiskHistoryOpType is enum for the field operation
"""
enum RiskHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
RiskHistoryRiskImpact is enum for the field impact
"""
enum RiskHistoryRiskImpact @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskImpact") {
	LOW
	MODERATE
	HIGH
}
"""
RiskHistoryRiskLikelihood is enum for the field likelihood
"""
enum RiskHistoryRiskLikelihood @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskLikelihood") {
	UNLIKELY
	LIKELY
	HIGHLY_LIKELY
}
"""
RiskHistoryWhereInput is used for filtering RiskHistory objects.
Input was generated by ent.
"""
input RiskHistoryWhereInput {
	not: RiskHistoryWhereInput
	and: [RiskHistoryWhereInput!]
	or: [RiskHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: RiskHistoryOpType
	operationNEQ: RiskHistoryOpType
	operationIn: [RiskHistoryOpType!]
	operationNotIn: [RiskHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	risk_type field predicates
	"""
	riskType: String
	riskTypeNEQ: String
	riskTypeIn: [String!]
	riskTypeNotIn: [String!]
	riskTypeGT: String
	riskTypeGTE: String
	riskTypeLT: String
	riskTypeLTE: String
	riskTypeContains: String
	riskTypeHasPrefix: String
	riskTypeHasSuffix: String
	riskTypeIsNil: Boolean
	riskTypeNotNil: Boolean
	riskTypeEqualFold: String
	riskTypeContainsFold: String
	"""
	business_costs field predicates
	"""
	businessCosts: String
	businessCostsNEQ: String
	businessCostsIn: [String!]
	businessCostsNotIn: [String!]
	businessCostsGT: String
	businessCostsGTE: String
	businessCostsLT: String
	businessCostsLTE: String
	businessCostsContains: String
	businessCostsHasPrefix: String
	businessCostsHasSuffix: String
	businessCostsIsNil: Boolean
	businessCostsNotNil: Boolean
	businessCostsEqualFold: String
	businessCostsContainsFold: String
	"""
	impact field predicates
	"""
	impact: RiskHistoryRiskImpact
	impactNEQ: RiskHistoryRiskImpact
	impactIn: [RiskHistoryRiskImpact!]
	impactNotIn: [RiskHistoryRiskImpact!]
	impactIsNil: Boolean
	impactNotNil: Boolean
	"""
	likelihood field predicates
	"""
	likelihood: RiskHistoryRiskLikelihood
	likelihoodNEQ: RiskHistoryRiskLikelihood
	likelihoodIn: [RiskHistoryRiskLikelihood!]
	likelihoodNotIn: [RiskHistoryRiskLikelihood!]
	likelihoodIsNil: Boolean
	likelihoodNotNil: Boolean
	"""
	mitigation field predicates
	"""
	mitigation: String
	mitigationNEQ: String
	mitigationIn: [String!]
	mitigationNotIn: [String!]
	mitigationGT: String
	mitigationGTE: String
	mitigationLT: String
	mitigationLTE: String
	mitigationContains: String
	mitigationHasPrefix: String
	mitigationHasSuffix: String
	mitigationIsNil: Boolean
	mitigationNotNil: Boolean
	mitigationEqualFold: String
	mitigationContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
}
"""
RiskRiskImpact is enum for the field impact
"""
enum RiskRiskImpact @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskImpact") {
	LOW
	MODERATE
	HIGH
}
"""
RiskRiskLikelihood is enum for the field likelihood
"""
enum RiskRiskLikelihood @goModel(model: "github.com/theopenlane/core/pkg/enums.RiskLikelihood") {
	UNLIKELY
	LIKELY
	HIGHLY_LIKELY
}
type RiskSearchResult {
	risks: [Risk!]
}
"""
Return response for updateRisk mutation
"""
type RiskUpdatePayload {
	"""
	Updated risk
	"""
	risk: Risk!
}
"""
RiskWhereInput is used for filtering Risk objects.
Input was generated by ent.
"""
input RiskWhereInput {
	not: RiskWhereInput
	and: [RiskWhereInput!]
	or: [RiskWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	risk_type field predicates
	"""
	riskType: String
	riskTypeNEQ: String
	riskTypeIn: [String!]
	riskTypeNotIn: [String!]
	riskTypeGT: String
	riskTypeGTE: String
	riskTypeLT: String
	riskTypeLTE: String
	riskTypeContains: String
	riskTypeHasPrefix: String
	riskTypeHasSuffix: String
	riskTypeIsNil: Boolean
	riskTypeNotNil: Boolean
	riskTypeEqualFold: String
	riskTypeContainsFold: String
	"""
	business_costs field predicates
	"""
	businessCosts: String
	businessCostsNEQ: String
	businessCostsIn: [String!]
	businessCostsNotIn: [String!]
	businessCostsGT: String
	businessCostsGTE: String
	businessCostsLT: String
	businessCostsLTE: String
	businessCostsContains: String
	businessCostsHasPrefix: String
	businessCostsHasSuffix: String
	businessCostsIsNil: Boolean
	businessCostsNotNil: Boolean
	businessCostsEqualFold: String
	businessCostsContainsFold: String
	"""
	impact field predicates
	"""
	impact: RiskRiskImpact
	impactNEQ: RiskRiskImpact
	impactIn: [RiskRiskImpact!]
	impactNotIn: [RiskRiskImpact!]
	impactIsNil: Boolean
	impactNotNil: Boolean
	"""
	likelihood field predicates
	"""
	likelihood: RiskRiskLikelihood
	likelihoodNEQ: RiskRiskLikelihood
	likelihoodIn: [RiskRiskLikelihood!]
	likelihoodNotIn: [RiskRiskLikelihood!]
	likelihoodIsNil: Boolean
	likelihoodNotNil: Boolean
	"""
	mitigation field predicates
	"""
	mitigation: String
	mitigationNEQ: String
	mitigationIn: [String!]
	mitigationNotIn: [String!]
	mitigationGT: String
	mitigationGTE: String
	mitigationLT: String
	mitigationLTE: String
	mitigationContains: String
	mitigationHasPrefix: String
	mitigationHasSuffix: String
	mitigationIsNil: Boolean
	mitigationNotNil: Boolean
	mitigationEqualFold: String
	mitigationContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	blocked_groups edge predicates
	"""
	hasBlockedGroups: Boolean
	hasBlockedGroupsWith: [GroupWhereInput!]
	"""
	editors edge predicates
	"""
	hasEditors: Boolean
	hasEditorsWith: [GroupWhereInput!]
	"""
	viewers edge predicates
	"""
	hasViewers: Boolean
	hasViewersWith: [GroupWhereInput!]
	"""
	control edge predicates
	"""
	hasControl: Boolean
	hasControlWith: [ControlWhereInput!]
	"""
	procedure edge predicates
	"""
	hasProcedure: Boolean
	hasProcedureWith: [ProcedureWhereInput!]
	"""
	action_plans edge predicates
	"""
	hasActionPlans: Boolean
	hasActionPlansWith: [ActionPlanWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
}
union SearchResult = APITokenSearchResult | ActionPlanSearchResult | ContactSearchResult | ControlSearchResult | ControlObjectiveSearchResult | DocumentDataSearchResult | EntitySearchResult | EntityTypeSearchResult | EventSearchResult | EvidenceSearchResult | FileSearchResult | GroupSearchResult | IntegrationSearchResult | InternalPolicySearchResult | NarrativeSearchResult | OrgSubscriptionSearchResult | OrganizationSearchResult | OrganizationSettingSearchResult | PersonalAccessTokenSearchResult | ProcedureSearchResult | ProgramSearchResult | RiskSearchResult | StandardSearchResult | SubcontrolSearchResult | SubscriberSearchResult | TaskSearchResult | TemplateSearchResult | UserSearchResult | UserSettingSearchResult
type SearchResultConnection {
	"""
	Information to aid in pagination.
	"""
	page: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
	"""
	A list of nodes with results.
	"""
	nodes: [SearchResult!]!
}
type Standard implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
	"""
	name: String!
	"""
	description of the standard
	"""
	description: String
	"""
	family of the standard, e.g. 800-53, 800-171, 27001, etc.
	"""
	family: String
	"""
	status of the standard - active, deprecated, etc.
	"""
	status: String
	"""
	type of the standard - security, privacy, etc.
	"""
	standardType: String
	"""
	version of the standard
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the standard
	"""
	background: String
	"""
	which controls are satisfied by the standard
	"""
	satisfies: String
	"""
	json data with details of the standard
	"""
	details: Map
	controlObjectives: [ControlObjective!]
	controls: [Control!]
	procedures: [Procedure!]
	actionPlans: [ActionPlan!]
	programs: [Program!]
}
"""
Return response for createBulkStandard mutation
"""
type StandardBulkCreatePayload {
	"""
	Created standards
	"""
	standards: [Standard!]
}
"""
A connection to a list of items.
"""
type StandardConnection {
	"""
	A list of edges.
	"""
	edges: [StandardEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createStandard mutation
"""
type StandardCreatePayload {
	"""
	Created standard
	"""
	standard: Standard!
}
"""
Return response for deleteStandard mutation
"""
type StandardDeletePayload {
	"""
	Deleted standard ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type StandardEdge {
	"""
	The item at the end of the edge.
	"""
	node: Standard
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type StandardHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: StandardHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
	"""
	name: String!
	"""
	description of the standard
	"""
	description: String
	"""
	family of the standard, e.g. 800-53, 800-171, 27001, etc.
	"""
	family: String
	"""
	status of the standard - active, deprecated, etc.
	"""
	status: String
	"""
	type of the standard - security, privacy, etc.
	"""
	standardType: String
	"""
	version of the standard
	"""
	version: String
	"""
	purpose and scope
	"""
	purposeAndScope: String
	"""
	background of the standard
	"""
	background: String
	"""
	which controls are satisfied by the standard
	"""
	satisfies: String
	"""
	json data with details of the standard
	"""
	details: Map
}
"""
A connection to a list of items.
"""
type StandardHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [StandardHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type StandardHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: StandardHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
StandardHistoryOpType is enum for the field operation
"""
enum StandardHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
StandardHistoryWhereInput is used for filtering StandardHistory objects.
Input was generated by ent.
"""
input StandardHistoryWhereInput {
	not: StandardHistoryWhereInput
	and: [StandardHistoryWhereInput!]
	or: [StandardHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: StandardHistoryOpType
	operationNEQ: StandardHistoryOpType
	operationIn: [StandardHistoryOpType!]
	operationNotIn: [StandardHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	standard_type field predicates
	"""
	standardType: String
	standardTypeNEQ: String
	standardTypeIn: [String!]
	standardTypeNotIn: [String!]
	standardTypeGT: String
	standardTypeGTE: String
	standardTypeLT: String
	standardTypeLTE: String
	standardTypeContains: String
	standardTypeHasPrefix: String
	standardTypeHasSuffix: String
	standardTypeIsNil: Boolean
	standardTypeNotNil: Boolean
	standardTypeEqualFold: String
	standardTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	purpose_and_scope field predicates
	"""
	purposeAndScope: String
	purposeAndScopeNEQ: String
	purposeAndScopeIn: [String!]
	purposeAndScopeNotIn: [String!]
	purposeAndScopeGT: String
	purposeAndScopeGTE: String
	purposeAndScopeLT: String
	purposeAndScopeLTE: String
	purposeAndScopeContains: String
	purposeAndScopeHasPrefix: String
	purposeAndScopeHasSuffix: String
	purposeAndScopeIsNil: Boolean
	purposeAndScopeNotNil: Boolean
	purposeAndScopeEqualFold: String
	purposeAndScopeContainsFold: String
	"""
	background field predicates
	"""
	background: String
	backgroundNEQ: String
	backgroundIn: [String!]
	backgroundNotIn: [String!]
	backgroundGT: String
	backgroundGTE: String
	backgroundLT: String
	backgroundLTE: String
	backgroundContains: String
	backgroundHasPrefix: String
	backgroundHasSuffix: String
	backgroundIsNil: Boolean
	backgroundNotNil: Boolean
	backgroundEqualFold: String
	backgroundContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
}
type StandardSearchResult {
	standards: [Standard!]
}
"""
Return response for updateStandard mutation
"""
type StandardUpdatePayload {
	"""
	Updated standard
	"""
	standard: Standard!
}
"""
StandardWhereInput is used for filtering Standard objects.
Input was generated by ent.
"""
input StandardWhereInput {
	not: StandardWhereInput
	and: [StandardWhereInput!]
	or: [StandardWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	standard_type field predicates
	"""
	standardType: String
	standardTypeNEQ: String
	standardTypeIn: [String!]
	standardTypeNotIn: [String!]
	standardTypeGT: String
	standardTypeGTE: String
	standardTypeLT: String
	standardTypeLTE: String
	standardTypeContains: String
	standardTypeHasPrefix: String
	standardTypeHasSuffix: String
	standardTypeIsNil: Boolean
	standardTypeNotNil: Boolean
	standardTypeEqualFold: String
	standardTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	purpose_and_scope field predicates
	"""
	purposeAndScope: String
	purposeAndScopeNEQ: String
	purposeAndScopeIn: [String!]
	purposeAndScopeNotIn: [String!]
	purposeAndScopeGT: String
	purposeAndScopeGTE: String
	purposeAndScopeLT: String
	purposeAndScopeLTE: String
	purposeAndScopeContains: String
	purposeAndScopeHasPrefix: String
	purposeAndScopeHasSuffix: String
	purposeAndScopeIsNil: Boolean
	purposeAndScopeNotNil: Boolean
	purposeAndScopeEqualFold: String
	purposeAndScopeContainsFold: String
	"""
	background field predicates
	"""
	background: String
	backgroundNEQ: String
	backgroundIn: [String!]
	backgroundNotIn: [String!]
	backgroundGT: String
	backgroundGTE: String
	backgroundLT: String
	backgroundLTE: String
	backgroundContains: String
	backgroundHasPrefix: String
	backgroundHasSuffix: String
	backgroundIsNil: Boolean
	backgroundNotNil: Boolean
	backgroundEqualFold: String
	backgroundContainsFold: String
	"""
	satisfies field predicates
	"""
	satisfies: String
	satisfiesNEQ: String
	satisfiesIn: [String!]
	satisfiesNotIn: [String!]
	satisfiesGT: String
	satisfiesGTE: String
	satisfiesLT: String
	satisfiesLTE: String
	satisfiesContains: String
	satisfiesHasPrefix: String
	satisfiesHasSuffix: String
	satisfiesIsNil: Boolean
	satisfiesNotNil: Boolean
	satisfiesEqualFold: String
	satisfiesContainsFold: String
	"""
	control_objectives edge predicates
	"""
	hasControlObjectives: Boolean
	hasControlObjectivesWith: [ControlObjectiveWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	procedures edge predicates
	"""
	hasProcedures: Boolean
	hasProceduresWith: [ProcedureWhereInput!]
	"""
	action_plans edge predicates
	"""
	hasActionPlans: Boolean
	hasActionPlansWith: [ActionPlanWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
}
type Subcontrol implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the name of the subcontrol
	"""
	name: String!
	"""
	description of the subcontrol
	"""
	description: String
	"""
	status of the subcontrol
	"""
	status: String
	"""
	type of the subcontrol
	"""
	subcontrolType: String
	"""
	version of the control
	"""
	version: String
	"""
	number of the subcontrol
	"""
	subcontrolNumber: String
	"""
	subcontrol family
	"""
	family: String
	"""
	subcontrol class
	"""
	class: String
	"""
	source of the control, e.g. framework, template, user-defined, etc.
	"""
	source: String
	"""
	mapped frameworks that the subcontrol is part of
	"""
	mappedFrameworks: String
	"""
	implementation evidence of the subcontrol
	"""
	implementationEvidence: String
	"""
	implementation status
	"""
	implementationStatus: String
	"""
	date the subcontrol was implemented
	"""
	implementationDate: Time
	"""
	implementation verification
	"""
	implementationVerification: String
	"""
	date the subcontrol implementation was verified
	"""
	implementationVerificationDate: Time
	"""
	json data details of the subcontrol
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	owner: Organization
	controls: [Control!]!
	tasks: [Task!]
	programs: [Program!]
	evidence: [Evidence!]
}
"""
Return response for createBulkSubcontrol mutation
"""
type SubcontrolBulkCreatePayload {
	"""
	Created subcontrols
	"""
	subcontrols: [Subcontrol!]
}
"""
A connection to a list of items.
"""
type SubcontrolConnection {
	"""
	A list of edges.
	"""
	edges: [SubcontrolEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createSubcontrol mutation
"""
type SubcontrolCreatePayload {
	"""
	Created subcontrol
	"""
	subcontrol: Subcontrol!
}
"""
Return response for deleteSubcontrol mutation
"""
type SubcontrolDeletePayload {
	"""
	Deleted subcontrol ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type SubcontrolEdge {
	"""
	The item at the end of the edge.
	"""
	node: Subcontrol
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type SubcontrolHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: SubcontrolHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the name of the subcontrol
	"""
	name: String!
	"""
	description of the subcontrol
	"""
	description: String
	"""
	status of the subcontrol
	"""
	status: String
	"""
	type of the subcontrol
	"""
	subcontrolType: String
	"""
	version of the control
	"""
	version: String
	"""
	number of the subcontrol
	"""
	subcontrolNumber: String
	"""
	subcontrol family
	"""
	family: String
	"""
	subcontrol class
	"""
	class: String
	"""
	source of the control, e.g. framework, template, user-defined, etc.
	"""
	source: String
	"""
	mapped frameworks that the subcontrol is part of
	"""
	mappedFrameworks: String
	"""
	implementation evidence of the subcontrol
	"""
	implementationEvidence: String
	"""
	implementation status
	"""
	implementationStatus: String
	"""
	date the subcontrol was implemented
	"""
	implementationDate: Time
	"""
	implementation verification
	"""
	implementationVerification: String
	"""
	date the subcontrol implementation was verified
	"""
	implementationVerificationDate: Time
	"""
	json data details of the subcontrol
	"""
	details: Map
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
}
"""
A connection to a list of items.
"""
type SubcontrolHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [SubcontrolHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type SubcontrolHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: SubcontrolHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
SubcontrolHistoryOpType is enum for the field operation
"""
enum SubcontrolHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
SubcontrolHistoryWhereInput is used for filtering SubcontrolHistory objects.
Input was generated by ent.
"""
input SubcontrolHistoryWhereInput {
	not: SubcontrolHistoryWhereInput
	and: [SubcontrolHistoryWhereInput!]
	or: [SubcontrolHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: SubcontrolHistoryOpType
	operationNEQ: SubcontrolHistoryOpType
	operationIn: [SubcontrolHistoryOpType!]
	operationNotIn: [SubcontrolHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	subcontrol_type field predicates
	"""
	subcontrolType: String
	subcontrolTypeNEQ: String
	subcontrolTypeIn: [String!]
	subcontrolTypeNotIn: [String!]
	subcontrolTypeGT: String
	subcontrolTypeGTE: String
	subcontrolTypeLT: String
	subcontrolTypeLTE: String
	subcontrolTypeContains: String
	subcontrolTypeHasPrefix: String
	subcontrolTypeHasSuffix: String
	subcontrolTypeIsNil: Boolean
	subcontrolTypeNotNil: Boolean
	subcontrolTypeEqualFold: String
	subcontrolTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	subcontrol_number field predicates
	"""
	subcontrolNumber: String
	subcontrolNumberNEQ: String
	subcontrolNumberIn: [String!]
	subcontrolNumberNotIn: [String!]
	subcontrolNumberGT: String
	subcontrolNumberGTE: String
	subcontrolNumberLT: String
	subcontrolNumberLTE: String
	subcontrolNumberContains: String
	subcontrolNumberHasPrefix: String
	subcontrolNumberHasSuffix: String
	subcontrolNumberIsNil: Boolean
	subcontrolNumberNotNil: Boolean
	subcontrolNumberEqualFold: String
	subcontrolNumberContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	class field predicates
	"""
	class: String
	classNEQ: String
	classIn: [String!]
	classNotIn: [String!]
	classGT: String
	classGTE: String
	classLT: String
	classLTE: String
	classContains: String
	classHasPrefix: String
	classHasSuffix: String
	classIsNil: Boolean
	classNotNil: Boolean
	classEqualFold: String
	classContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	mapped_frameworks field predicates
	"""
	mappedFrameworks: String
	mappedFrameworksNEQ: String
	mappedFrameworksIn: [String!]
	mappedFrameworksNotIn: [String!]
	mappedFrameworksGT: String
	mappedFrameworksGTE: String
	mappedFrameworksLT: String
	mappedFrameworksLTE: String
	mappedFrameworksContains: String
	mappedFrameworksHasPrefix: String
	mappedFrameworksHasSuffix: String
	mappedFrameworksIsNil: Boolean
	mappedFrameworksNotNil: Boolean
	mappedFrameworksEqualFold: String
	mappedFrameworksContainsFold: String
	"""
	implementation_evidence field predicates
	"""
	implementationEvidence: String
	implementationEvidenceNEQ: String
	implementationEvidenceIn: [String!]
	implementationEvidenceNotIn: [String!]
	implementationEvidenceGT: String
	implementationEvidenceGTE: String
	implementationEvidenceLT: String
	implementationEvidenceLTE: String
	implementationEvidenceContains: String
	implementationEvidenceHasPrefix: String
	implementationEvidenceHasSuffix: String
	implementationEvidenceIsNil: Boolean
	implementationEvidenceNotNil: Boolean
	implementationEvidenceEqualFold: String
	implementationEvidenceContainsFold: String
	"""
	implementation_status field predicates
	"""
	implementationStatus: String
	implementationStatusNEQ: String
	implementationStatusIn: [String!]
	implementationStatusNotIn: [String!]
	implementationStatusGT: String
	implementationStatusGTE: String
	implementationStatusLT: String
	implementationStatusLTE: String
	implementationStatusContains: String
	implementationStatusHasPrefix: String
	implementationStatusHasSuffix: String
	implementationStatusIsNil: Boolean
	implementationStatusNotNil: Boolean
	implementationStatusEqualFold: String
	implementationStatusContainsFold: String
	"""
	implementation_date field predicates
	"""
	implementationDate: Time
	implementationDateNEQ: Time
	implementationDateIn: [Time!]
	implementationDateNotIn: [Time!]
	implementationDateGT: Time
	implementationDateGTE: Time
	implementationDateLT: Time
	implementationDateLTE: Time
	implementationDateIsNil: Boolean
	implementationDateNotNil: Boolean
	"""
	implementation_verification field predicates
	"""
	implementationVerification: String
	implementationVerificationNEQ: String
	implementationVerificationIn: [String!]
	implementationVerificationNotIn: [String!]
	implementationVerificationGT: String
	implementationVerificationGTE: String
	implementationVerificationLT: String
	implementationVerificationLTE: String
	implementationVerificationContains: String
	implementationVerificationHasPrefix: String
	implementationVerificationHasSuffix: String
	implementationVerificationIsNil: Boolean
	implementationVerificationNotNil: Boolean
	implementationVerificationEqualFold: String
	implementationVerificationContainsFold: String
	"""
	implementation_verification_date field predicates
	"""
	implementationVerificationDate: Time
	implementationVerificationDateNEQ: Time
	implementationVerificationDateIn: [Time!]
	implementationVerificationDateNotIn: [Time!]
	implementationVerificationDateGT: Time
	implementationVerificationDateGTE: Time
	implementationVerificationDateLT: Time
	implementationVerificationDateLTE: Time
	implementationVerificationDateIsNil: Boolean
	implementationVerificationDateNotNil: Boolean
	"""
	example_evidence field predicates
	"""
	exampleEvidence: String
	exampleEvidenceNEQ: String
	exampleEvidenceIn: [String!]
	exampleEvidenceNotIn: [String!]
	exampleEvidenceGT: String
	exampleEvidenceGTE: String
	exampleEvidenceLT: String
	exampleEvidenceLTE: String
	exampleEvidenceContains: String
	exampleEvidenceHasPrefix: String
	exampleEvidenceHasSuffix: String
	exampleEvidenceIsNil: Boolean
	exampleEvidenceNotNil: Boolean
	exampleEvidenceEqualFold: String
	exampleEvidenceContainsFold: String
}
type SubcontrolSearchResult {
	subcontrols: [Subcontrol!]
}
"""
Return response for updateSubcontrol mutation
"""
type SubcontrolUpdatePayload {
	"""
	Updated subcontrol
	"""
	subcontrol: Subcontrol!
}
"""
SubcontrolWhereInput is used for filtering Subcontrol objects.
Input was generated by ent.
"""
input SubcontrolWhereInput {
	not: SubcontrolWhereInput
	and: [SubcontrolWhereInput!]
	or: [SubcontrolWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	status field predicates
	"""
	status: String
	statusNEQ: String
	statusIn: [String!]
	statusNotIn: [String!]
	statusGT: String
	statusGTE: String
	statusLT: String
	statusLTE: String
	statusContains: String
	statusHasPrefix: String
	statusHasSuffix: String
	statusIsNil: Boolean
	statusNotNil: Boolean
	statusEqualFold: String
	statusContainsFold: String
	"""
	subcontrol_type field predicates
	"""
	subcontrolType: String
	subcontrolTypeNEQ: String
	subcontrolTypeIn: [String!]
	subcontrolTypeNotIn: [String!]
	subcontrolTypeGT: String
	subcontrolTypeGTE: String
	subcontrolTypeLT: String
	subcontrolTypeLTE: String
	subcontrolTypeContains: String
	subcontrolTypeHasPrefix: String
	subcontrolTypeHasSuffix: String
	subcontrolTypeIsNil: Boolean
	subcontrolTypeNotNil: Boolean
	subcontrolTypeEqualFold: String
	subcontrolTypeContainsFold: String
	"""
	version field predicates
	"""
	version: String
	versionNEQ: String
	versionIn: [String!]
	versionNotIn: [String!]
	versionGT: String
	versionGTE: String
	versionLT: String
	versionLTE: String
	versionContains: String
	versionHasPrefix: String
	versionHasSuffix: String
	versionIsNil: Boolean
	versionNotNil: Boolean
	versionEqualFold: String
	versionContainsFold: String
	"""
	subcontrol_number field predicates
	"""
	subcontrolNumber: String
	subcontrolNumberNEQ: String
	subcontrolNumberIn: [String!]
	subcontrolNumberNotIn: [String!]
	subcontrolNumberGT: String
	subcontrolNumberGTE: String
	subcontrolNumberLT: String
	subcontrolNumberLTE: String
	subcontrolNumberContains: String
	subcontrolNumberHasPrefix: String
	subcontrolNumberHasSuffix: String
	subcontrolNumberIsNil: Boolean
	subcontrolNumberNotNil: Boolean
	subcontrolNumberEqualFold: String
	subcontrolNumberContainsFold: String
	"""
	family field predicates
	"""
	family: String
	familyNEQ: String
	familyIn: [String!]
	familyNotIn: [String!]
	familyGT: String
	familyGTE: String
	familyLT: String
	familyLTE: String
	familyContains: String
	familyHasPrefix: String
	familyHasSuffix: String
	familyIsNil: Boolean
	familyNotNil: Boolean
	familyEqualFold: String
	familyContainsFold: String
	"""
	class field predicates
	"""
	class: String
	classNEQ: String
	classIn: [String!]
	classNotIn: [String!]
	classGT: String
	classGTE: String
	classLT: String
	classLTE: String
	classContains: String
	classHasPrefix: String
	classHasSuffix: String
	classIsNil: Boolean
	classNotNil: Boolean
	classEqualFold: String
	classContainsFold: String
	"""
	source field predicates
	"""
	source: String
	sourceNEQ: String
	sourceIn: [String!]
	sourceNotIn: [String!]
	sourceGT: String
	sourceGTE: String
	sourceLT: String
	sourceLTE: String
	sourceContains: String
	sourceHasPrefix: String
	sourceHasSuffix: String
	sourceIsNil: Boolean
	sourceNotNil: Boolean
	sourceEqualFold: String
	sourceContainsFold: String
	"""
	mapped_frameworks field predicates
	"""
	mappedFrameworks: String
	mappedFrameworksNEQ: String
	mappedFrameworksIn: [String!]
	mappedFrameworksNotIn: [String!]
	mappedFrameworksGT: String
	mappedFrameworksGTE: String
	mappedFrameworksLT: String
	mappedFrameworksLTE: String
	mappedFrameworksContains: String
	mappedFrameworksHasPrefix: String
	mappedFrameworksHasSuffix: String
	mappedFrameworksIsNil: Boolean
	mappedFrameworksNotNil: Boolean
	mappedFrameworksEqualFold: String
	mappedFrameworksContainsFold: String
	"""
	implementation_evidence field predicates
	"""
	implementationEvidence: String
	implementationEvidenceNEQ: String
	implementationEvidenceIn: [String!]
	implementationEvidenceNotIn: [String!]
	implementationEvidenceGT: String
	implementationEvidenceGTE: String
	implementationEvidenceLT: String
	implementationEvidenceLTE: String
	implementationEvidenceContains: String
	implementationEvidenceHasPrefix: String
	implementationEvidenceHasSuffix: String
	implementationEvidenceIsNil: Boolean
	implementationEvidenceNotNil: Boolean
	implementationEvidenceEqualFold: String
	implementationEvidenceContainsFold: String
	"""
	implementation_status field predicates
	"""
	implementationStatus: String
	implementationStatusNEQ: String
	implementationStatusIn: [String!]
	implementationStatusNotIn: [String!]
	implementationStatusGT: String
	implementationStatusGTE: String
	implementationStatusLT: String
	implementationStatusLTE: String
	implementationStatusContains: String
	implementationStatusHasPrefix: String
	implementationStatusHasSuffix: String
	implementationStatusIsNil: Boolean
	implementationStatusNotNil: Boolean
	implementationStatusEqualFold: String
	implementationStatusContainsFold: String
	"""
	implementation_date field predicates
	"""
	implementationDate: Time
	implementationDateNEQ: Time
	implementationDateIn: [Time!]
	implementationDateNotIn: [Time!]
	implementationDateGT: Time
	implementationDateGTE: Time
	implementationDateLT: Time
	implementationDateLTE: Time
	implementationDateIsNil: Boolean
	implementationDateNotNil: Boolean
	"""
	implementation_verification field predicates
	"""
	implementationVerification: String
	implementationVerificationNEQ: String
	implementationVerificationIn: [String!]
	implementationVerificationNotIn: [String!]
	implementationVerificationGT: String
	implementationVerificationGTE: String
	implementationVerificationLT: String
	implementationVerificationLTE: String
	implementationVerificationContains: String
	implementationVerificationHasPrefix: String
	implementationVerificationHasSuffix: String
	implementationVerificationIsNil: Boolean
	implementationVerificationNotNil: Boolean
	implementationVerificationEqualFold: String
	implementationVerificationContainsFold: String
	"""
	implementation_verification_date field predicates
	"""
	implementationVerificationDate: Time
	implementationVerificationDateNEQ: Time
	implementationVerificationDateIn: [Time!]
	implementationVerificationDateNotIn: [Time!]
	implementationVerificationDateGT: Time
	implementationVerificationDateGTE: Time
	implementationVerificationDateLT: Time
	implementationVerificationDateLTE: Time
	implementationVerificationDateIsNil: Boolean
	implementationVerificationDateNotNil: Boolean
	"""
	example_evidence field predicates
	"""
	exampleEvidence: String
	exampleEvidenceNEQ: String
	exampleEvidenceIn: [String!]
	exampleEvidenceNotIn: [String!]
	exampleEvidenceGT: String
	exampleEvidenceGTE: String
	exampleEvidenceLT: String
	exampleEvidenceLTE: String
	exampleEvidenceContains: String
	exampleEvidenceHasPrefix: String
	exampleEvidenceHasSuffix: String
	exampleEvidenceIsNil: Boolean
	exampleEvidenceNotNil: Boolean
	exampleEvidenceEqualFold: String
	exampleEvidenceContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	controls edge predicates
	"""
	hasControls: Boolean
	hasControlsWith: [ControlWhereInput!]
	"""
	tasks edge predicates
	"""
	hasTasks: Boolean
	hasTasksWith: [TaskWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
	"""
	evidence edge predicates
	"""
	hasEvidence: Boolean
	hasEvidenceWith: [EvidenceWhereInput!]
}
type Subscriber implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	email address of the subscriber
	"""
	email: String!
	"""
	phone number of the subscriber
	"""
	phoneNumber: String
	"""
	indicates if the email address has been verified
	"""
	verifiedEmail: Boolean!
	"""
	indicates if the phone number has been verified
	"""
	verifiedPhone: Boolean!
	"""
	indicates if the subscriber is active or not, active users will have at least one verified contact method
	"""
	active: Boolean!
	owner: Organization
	events: [Event!]
}
"""
Return response for createBulkSubscriber mutation
"""
type SubscriberBulkCreatePayload {
	"""
	Created subscribers
	"""
	subscribers: [Subscriber!]
}
"""
A connection to a list of items.
"""
type SubscriberConnection {
	"""
	A list of edges.
	"""
	edges: [SubscriberEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createSubscriber mutation
"""
type SubscriberCreatePayload {
	"""
	Created subscriber
	"""
	subscriber: Subscriber!
}
"""
Return response for deleteSubscriber mutation
"""
type SubscriberDeletePayload {
	"""
	Deleted subscriber email
	"""
	email: String!
}
"""
An edge in a connection.
"""
type SubscriberEdge {
	"""
	The item at the end of the edge.
	"""
	node: Subscriber
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type SubscriberSearchResult {
	subscribers: [Subscriber!]
}
"""
Return response for updateSubscriber mutation
"""
type SubscriberUpdatePayload {
	"""
	Updated subscriber
	"""
	subscriber: Subscriber!
}
"""
SubscriberWhereInput is used for filtering Subscriber objects.
Input was generated by ent.
"""
input SubscriberWhereInput {
	not: SubscriberWhereInput
	and: [SubscriberWhereInput!]
	or: [SubscriberWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	email field predicates
	"""
	email: String
	emailNEQ: String
	emailIn: [String!]
	emailNotIn: [String!]
	emailGT: String
	emailGTE: String
	emailLT: String
	emailLTE: String
	emailContains: String
	emailHasPrefix: String
	emailHasSuffix: String
	emailEqualFold: String
	emailContainsFold: String
	"""
	phone_number field predicates
	"""
	phoneNumber: String
	phoneNumberNEQ: String
	phoneNumberIn: [String!]
	phoneNumberNotIn: [String!]
	phoneNumberGT: String
	phoneNumberGTE: String
	phoneNumberLT: String
	phoneNumberLTE: String
	phoneNumberContains: String
	phoneNumberHasPrefix: String
	phoneNumberHasSuffix: String
	phoneNumberIsNil: Boolean
	phoneNumberNotNil: Boolean
	phoneNumberEqualFold: String
	phoneNumberContainsFold: String
	"""
	verified_email field predicates
	"""
	verifiedEmail: Boolean
	verifiedEmailNEQ: Boolean
	"""
	verified_phone field predicates
	"""
	verifiedPhone: Boolean
	verifiedPhoneNEQ: Boolean
	"""
	active field predicates
	"""
	active: Boolean
	activeNEQ: Boolean
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
}
type TFASetting implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	specifies if the TFA device has been verified
	"""
	verified: Boolean!
	"""
	specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
	"""
	totpAllowed: Boolean
	owner: User
}
"""
A connection to a list of items.
"""
type TFASettingConnection {
	"""
	A list of edges.
	"""
	edges: [TFASettingEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createTFASetting mutation
"""
type TFASettingCreatePayload {
	"""
	Created tfaSetting
	"""
	tfaSetting: TFASetting!
	tfaSecret: String
	qrCode: String
}
"""
An edge in a connection.
"""
type TFASettingEdge {
	"""
	The item at the end of the edge.
	"""
	node: TFASetting
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
Return response for updateTFASetting mutation
"""
type TFASettingUpdatePayload {
	"""
	Updated tfaSetting
	"""
	tfaSetting: TFASetting!
	tfaSecret: String
	qrCode: String
	recoveryCodes: [String!]
}
"""
TFASettingWhereInput is used for filtering TFASetting objects.
Input was generated by ent.
"""
input TFASettingWhereInput {
	not: TFASettingWhereInput
	and: [TFASettingWhereInput!]
	or: [TFASettingWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	verified field predicates
	"""
	verified: Boolean
	verifiedNEQ: Boolean
	"""
	totp_allowed field predicates
	"""
	totpAllowed: Boolean
	totpAllowedNEQ: Boolean
	totpAllowedIsNil: Boolean
	totpAllowedNotNil: Boolean
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [UserWhereInput!]
}
type Task implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: ID
	"""
	the title of the task
	"""
	title: String!
	"""
	the description of the task
	"""
	description: String
	"""
	the details of the task
	"""
	details: String
	"""
	the status of the task
	"""
	status: TaskTaskStatus!
	"""
	the category of the task, e.g. evidence upload, risk review, policy review, etc.
	"""
	category: String
	"""
	the due date of the task
	"""
	due: Time
	"""
	the completion date of the task
	"""
	completed: Time
	"""
	the id of the user who was assigned the task
	"""
	assigneeID: ID
	"""
	the id of the user who assigned the task, can be left empty if created by the system or a service token
	"""
	assignerID: ID
	owner: Organization
	assigner: User
	assignee: User
	"""
	conversations related to the task
	"""
	comments: [Note!]
	group: [Group!]
	internalPolicy: [InternalPolicy!]
	procedure: [Procedure!]
	control: [Control!]
	controlObjective: [ControlObjective!]
	subcontrol: [Subcontrol!]
	program: [Program!]
	evidence: [Evidence!]
}
"""
Return response for createBulkTask mutation
"""
type TaskBulkCreatePayload {
	"""
	Created tasks
	"""
	tasks: [Task!]
}
"""
A connection to a list of items.
"""
type TaskConnection {
	"""
	A list of edges.
	"""
	edges: [TaskEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createTask mutation
"""
type TaskCreatePayload {
	"""
	Created task
	"""
	task: Task!
}
"""
Return response for deleteTask mutation
"""
type TaskDeletePayload {
	"""
	Deleted task ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type TaskEdge {
	"""
	The item at the end of the edge.
	"""
	node: Task
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type TaskHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: TaskHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the ID of the organization owner of the object
	"""
	ownerID: String
	"""
	the title of the task
	"""
	title: String!
	"""
	the description of the task
	"""
	description: String
	"""
	the details of the task
	"""
	details: String
	"""
	the status of the task
	"""
	status: TaskHistoryTaskStatus!
	"""
	the category of the task, e.g. evidence upload, risk review, policy review, etc.
	"""
	category: String
	"""
	the due date of the task
	"""
	due: Time
	"""
	the completion date of the task
	"""
	completed: Time
	"""
	the id of the user who was assigned the task
	"""
	assigneeID: String
	"""
	the id of the user who assigned the task, can be left empty if created by the system or a service token
	"""
	assignerID: String
}
"""
A connection to a list of items.
"""
type TaskHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [TaskHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type TaskHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: TaskHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
TaskHistoryOpType is enum for the field operation
"""
enum TaskHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
TaskHistoryTaskStatus is enum for the field status
"""
enum TaskHistoryTaskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.TaskStatus") {
	OPEN
	IN_PROGRESS
	IN_REVIEW
	COMPLETED
	WONT_DO
}
"""
TaskHistoryWhereInput is used for filtering TaskHistory objects.
Input was generated by ent.
"""
input TaskHistoryWhereInput {
	not: TaskHistoryWhereInput
	and: [TaskHistoryWhereInput!]
	or: [TaskHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: TaskHistoryOpType
	operationNEQ: TaskHistoryOpType
	operationIn: [TaskHistoryOpType!]
	operationNotIn: [TaskHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	title field predicates
	"""
	title: String
	titleNEQ: String
	titleIn: [String!]
	titleNotIn: [String!]
	titleGT: String
	titleGTE: String
	titleLT: String
	titleLTE: String
	titleContains: String
	titleHasPrefix: String
	titleHasSuffix: String
	titleEqualFold: String
	titleContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	details field predicates
	"""
	details: String
	detailsNEQ: String
	detailsIn: [String!]
	detailsNotIn: [String!]
	detailsGT: String
	detailsGTE: String
	detailsLT: String
	detailsLTE: String
	detailsContains: String
	detailsHasPrefix: String
	detailsHasSuffix: String
	detailsIsNil: Boolean
	detailsNotNil: Boolean
	detailsEqualFold: String
	detailsContainsFold: String
	"""
	status field predicates
	"""
	status: TaskHistoryTaskStatus
	statusNEQ: TaskHistoryTaskStatus
	statusIn: [TaskHistoryTaskStatus!]
	statusNotIn: [TaskHistoryTaskStatus!]
	"""
	category field predicates
	"""
	category: String
	categoryNEQ: String
	categoryIn: [String!]
	categoryNotIn: [String!]
	categoryGT: String
	categoryGTE: String
	categoryLT: String
	categoryLTE: String
	categoryContains: String
	categoryHasPrefix: String
	categoryHasSuffix: String
	categoryIsNil: Boolean
	categoryNotNil: Boolean
	categoryEqualFold: String
	categoryContainsFold: String
	"""
	due field predicates
	"""
	due: Time
	dueNEQ: Time
	dueIn: [Time!]
	dueNotIn: [Time!]
	dueGT: Time
	dueGTE: Time
	dueLT: Time
	dueLTE: Time
	dueIsNil: Boolean
	dueNotNil: Boolean
	"""
	completed field predicates
	"""
	completed: Time
	completedNEQ: Time
	completedIn: [Time!]
	completedNotIn: [Time!]
	completedGT: Time
	completedGTE: Time
	completedLT: Time
	completedLTE: Time
	completedIsNil: Boolean
	completedNotNil: Boolean
	"""
	assignee_id field predicates
	"""
	assigneeID: String
	assigneeIDNEQ: String
	assigneeIDIn: [String!]
	assigneeIDNotIn: [String!]
	assigneeIDGT: String
	assigneeIDGTE: String
	assigneeIDLT: String
	assigneeIDLTE: String
	assigneeIDContains: String
	assigneeIDHasPrefix: String
	assigneeIDHasSuffix: String
	assigneeIDIsNil: Boolean
	assigneeIDNotNil: Boolean
	assigneeIDEqualFold: String
	assigneeIDContainsFold: String
	"""
	assigner_id field predicates
	"""
	assignerID: String
	assignerIDNEQ: String
	assignerIDIn: [String!]
	assignerIDNotIn: [String!]
	assignerIDGT: String
	assignerIDGTE: String
	assignerIDLT: String
	assignerIDLTE: String
	assignerIDContains: String
	assignerIDHasPrefix: String
	assignerIDHasSuffix: String
	assignerIDIsNil: Boolean
	assignerIDNotNil: Boolean
	assignerIDEqualFold: String
	assignerIDContainsFold: String
}
type TaskSearchResult {
	tasks: [Task!]
}
"""
TaskTaskStatus is enum for the field status
"""
enum TaskTaskStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.TaskStatus") {
	OPEN
	IN_PROGRESS
	IN_REVIEW
	COMPLETED
	WONT_DO
}
"""
Return response for updateTask mutation
"""
type TaskUpdatePayload {
	"""
	Updated task
	"""
	task: Task!
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
	not: TaskWhereInput
	and: [TaskWhereInput!]
	or: [TaskWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	title field predicates
	"""
	title: String
	titleNEQ: String
	titleIn: [String!]
	titleNotIn: [String!]
	titleGT: String
	titleGTE: String
	titleLT: String
	titleLTE: String
	titleContains: String
	titleHasPrefix: String
	titleHasSuffix: String
	titleEqualFold: String
	titleContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	details field predicates
	"""
	details: String
	detailsNEQ: String
	detailsIn: [String!]
	detailsNotIn: [String!]
	detailsGT: String
	detailsGTE: String
	detailsLT: String
	detailsLTE: String
	detailsContains: String
	detailsHasPrefix: String
	detailsHasSuffix: String
	detailsIsNil: Boolean
	detailsNotNil: Boolean
	detailsEqualFold: String
	detailsContainsFold: String
	"""
	status field predicates
	"""
	status: TaskTaskStatus
	statusNEQ: TaskTaskStatus
	statusIn: [TaskTaskStatus!]
	statusNotIn: [TaskTaskStatus!]
	"""
	category field predicates
	"""
	category: String
	categoryNEQ: String
	categoryIn: [String!]
	categoryNotIn: [String!]
	categoryGT: String
	categoryGTE: String
	categoryLT: String
	categoryLTE: String
	categoryContains: String
	categoryHasPrefix: String
	categoryHasSuffix: String
	categoryIsNil: Boolean
	categoryNotNil: Boolean
	categoryEqualFold: String
	categoryContainsFold: String
	"""
	due field predicates
	"""
	due: Time
	dueNEQ: Time
	dueIn: [Time!]
	dueNotIn: [Time!]
	dueGT: Time
	dueGTE: Time
	dueLT: Time
	dueLTE: Time
	dueIsNil: Boolean
	dueNotNil: Boolean
	"""
	completed field predicates
	"""
	completed: Time
	completedNEQ: Time
	completedIn: [Time!]
	completedNotIn: [Time!]
	completedGT: Time
	completedGTE: Time
	completedLT: Time
	completedLTE: Time
	completedIsNil: Boolean
	completedNotNil: Boolean
	"""
	assignee_id field predicates
	"""
	assigneeID: ID
	assigneeIDNEQ: ID
	assigneeIDIn: [ID!]
	assigneeIDNotIn: [ID!]
	assigneeIDGT: ID
	assigneeIDGTE: ID
	assigneeIDLT: ID
	assigneeIDLTE: ID
	assigneeIDContains: ID
	assigneeIDHasPrefix: ID
	assigneeIDHasSuffix: ID
	assigneeIDIsNil: Boolean
	assigneeIDNotNil: Boolean
	assigneeIDEqualFold: ID
	assigneeIDContainsFold: ID
	"""
	assigner_id field predicates
	"""
	assignerID: ID
	assignerIDNEQ: ID
	assignerIDIn: [ID!]
	assignerIDNotIn: [ID!]
	assignerIDGT: ID
	assignerIDGTE: ID
	assignerIDLT: ID
	assignerIDLTE: ID
	assignerIDContains: ID
	assignerIDHasPrefix: ID
	assignerIDHasSuffix: ID
	assignerIDIsNil: Boolean
	assignerIDNotNil: Boolean
	assignerIDEqualFold: ID
	assignerIDContainsFold: ID
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	assigner edge predicates
	"""
	hasAssigner: Boolean
	hasAssignerWith: [UserWhereInput!]
	"""
	assignee edge predicates
	"""
	hasAssignee: Boolean
	hasAssigneeWith: [UserWhereInput!]
	"""
	comments edge predicates
	"""
	hasComments: Boolean
	hasCommentsWith: [NoteWhereInput!]
	"""
	group edge predicates
	"""
	hasGroup: Boolean
	hasGroupWith: [GroupWhereInput!]
	"""
	internal_policy edge predicates
	"""
	hasInternalPolicy: Boolean
	hasInternalPolicyWith: [InternalPolicyWhereInput!]
	"""
	procedure edge predicates
	"""
	hasProcedure: Boolean
	hasProcedureWith: [ProcedureWhereInput!]
	"""
	control edge predicates
	"""
	hasControl: Boolean
	hasControlWith: [ControlWhereInput!]
	"""
	control_objective edge predicates
	"""
	hasControlObjective: Boolean
	hasControlObjectiveWith: [ControlObjectiveWhereInput!]
	"""
	subcontrol edge predicates
	"""
	hasSubcontrol: Boolean
	hasSubcontrolWith: [SubcontrolWhereInput!]
	"""
	program edge predicates
	"""
	hasProgram: Boolean
	hasProgramWith: [ProgramWhereInput!]
	"""
	evidence edge predicates
	"""
	hasEvidence: Boolean
	hasEvidenceWith: [EvidenceWhereInput!]
}
type Template implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: ID
	"""
	the name of the template
	"""
	name: String!
	"""
	the type of the template, either a provided template or an implementation (document)
	"""
	templateType: TemplateDocumentType!
	"""
	the description of the template
	"""
	description: String
	"""
	the jsonschema object of the template
	"""
	jsonconfig: JSON!
	"""
	the uischema for the template to render in the UI
	"""
	uischema: JSON
	owner: Organization
	documents: [DocumentData!]
	files: [File!]
}
"""
Return response for createBulkTemplate mutation
"""
type TemplateBulkCreatePayload {
	"""
	Created templates
	"""
	templates: [Template!]
}
"""
A connection to a list of items.
"""
type TemplateConnection {
	"""
	A list of edges.
	"""
	edges: [TemplateEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createTemplate mutation
"""
type TemplateCreatePayload {
	"""
	Created template
	"""
	template: Template!
}
"""
Return response for deleteTemplate mutation
"""
type TemplateDeletePayload {
	"""
	Deleted template ID
	"""
	deletedID: ID!
}
"""
TemplateDocumentType is enum for the field template_type
"""
enum TemplateDocumentType @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentType") {
	ROOTTEMPLATE
	DOCUMENT
}
"""
An edge in a connection.
"""
type TemplateEdge {
	"""
	The item at the end of the edge.
	"""
	node: Template
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type TemplateHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: TemplateHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	"""
	the organization id that owns the object
	"""
	ownerID: String
	"""
	the name of the template
	"""
	name: String!
	"""
	the type of the template, either a provided template or an implementation (document)
	"""
	templateType: TemplateHistoryDocumentType!
	"""
	the description of the template
	"""
	description: String
	"""
	the jsonschema object of the template
	"""
	jsonconfig: JSON!
	"""
	the uischema for the template to render in the UI
	"""
	uischema: JSON
}
"""
A connection to a list of items.
"""
type TemplateHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [TemplateHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
TemplateHistoryDocumentType is enum for the field template_type
"""
enum TemplateHistoryDocumentType @goModel(model: "github.com/theopenlane/core/pkg/enums.DocumentType") {
	ROOTTEMPLATE
	DOCUMENT
}
"""
An edge in a connection.
"""
type TemplateHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: TemplateHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
TemplateHistoryOpType is enum for the field operation
"""
enum TemplateHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for TemplateHistory connections
"""
input TemplateHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order TemplateHistories.
	"""
	field: TemplateHistoryOrderField!
}
"""
Properties by which TemplateHistory connections can be ordered.
"""
enum TemplateHistoryOrderField {
	name
}
"""
TemplateHistoryWhereInput is used for filtering TemplateHistory objects.
Input was generated by ent.
"""
input TemplateHistoryWhereInput {
	not: TemplateHistoryWhereInput
	and: [TemplateHistoryWhereInput!]
	or: [TemplateHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: TemplateHistoryOpType
	operationNEQ: TemplateHistoryOpType
	operationIn: [TemplateHistoryOpType!]
	operationNotIn: [TemplateHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: String
	ownerIDNEQ: String
	ownerIDIn: [String!]
	ownerIDNotIn: [String!]
	ownerIDGT: String
	ownerIDGTE: String
	ownerIDLT: String
	ownerIDLTE: String
	ownerIDContains: String
	ownerIDHasPrefix: String
	ownerIDHasSuffix: String
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: String
	ownerIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	template_type field predicates
	"""
	templateType: TemplateHistoryDocumentType
	templateTypeNEQ: TemplateHistoryDocumentType
	templateTypeIn: [TemplateHistoryDocumentType!]
	templateTypeNotIn: [TemplateHistoryDocumentType!]
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
}
"""
Ordering options for Template connections
"""
input TemplateOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Templates.
	"""
	field: TemplateOrderField!
}
"""
Properties by which Template connections can be ordered.
"""
enum TemplateOrderField {
	name
}
type TemplateSearchResult {
	templates: [Template!]
}
"""
Return response for updateTemplate mutation
"""
type TemplateUpdatePayload {
	"""
	Updated template
	"""
	template: Template!
}
"""
TemplateWhereInput is used for filtering Template objects.
Input was generated by ent.
"""
input TemplateWhereInput {
	not: TemplateWhereInput
	and: [TemplateWhereInput!]
	or: [TemplateWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	owner_id field predicates
	"""
	ownerID: ID
	ownerIDNEQ: ID
	ownerIDIn: [ID!]
	ownerIDNotIn: [ID!]
	ownerIDGT: ID
	ownerIDGTE: ID
	ownerIDLT: ID
	ownerIDLTE: ID
	ownerIDContains: ID
	ownerIDHasPrefix: ID
	ownerIDHasSuffix: ID
	ownerIDIsNil: Boolean
	ownerIDNotNil: Boolean
	ownerIDEqualFold: ID
	ownerIDContainsFold: ID
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	template_type field predicates
	"""
	templateType: TemplateDocumentType
	templateTypeNEQ: TemplateDocumentType
	templateTypeIn: [TemplateDocumentType!]
	templateTypeNotIn: [TemplateDocumentType!]
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	owner edge predicates
	"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
	"""
	documents edge predicates
	"""
	hasDocuments: Boolean
	hasDocumentsWith: [DocumentDataWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateAPITokenInput is used for update APIToken object.
Input was generated by ent.
"""
input UpdateAPITokenInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name associated with the token
	"""
	name: String
	"""
	a description of the token's purpose
	"""
	description: String
	clearDescription: Boolean
	scopes: [String!]
	appendScopes: [String!]
	clearScopes: Boolean
	lastUsedAt: Time
	clearLastUsedAt: Boolean
	ownerID: ID
	clearOwner: Boolean
}
"""
UpdateActionPlanInput is used for update ActionPlan object.
Input was generated by ent.
"""
input UpdateActionPlanInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the action plan
	"""
	name: String
	"""
	description of the action plan
	"""
	description: String
	clearDescription: Boolean
	"""
	status of the action plan
	"""
	status: String
	clearStatus: Boolean
	"""
	due date of the action plan
	"""
	dueDate: Time
	clearDueDate: Boolean
	"""
	priority of the action plan
	"""
	priority: String
	clearPriority: Boolean
	"""
	source of the action plan
	"""
	source: String
	clearSource: Boolean
	"""
	json data including details of the action plan
	"""
	details: Map
	clearDetails: Boolean
	addStandardIDs: [ID!]
	removeStandardIDs: [ID!]
	clearStandard: Boolean
	addRiskIDs: [ID!]
	removeRiskIDs: [ID!]
	clearRisk: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControl: Boolean
	addUserIDs: [ID!]
	removeUserIDs: [ID!]
	clearUser: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearProgram: Boolean
}
"""
UpdateContactInput is used for update Contact object.
Input was generated by ent.
"""
input UpdateContactInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the full name of the contact
	"""
	fullName: String
	"""
	the title of the contact
	"""
	title: String
	clearTitle: Boolean
	"""
	the company of the contact
	"""
	company: String
	clearCompany: Boolean
	"""
	the email of the contact
	"""
	email: String
	clearEmail: Boolean
	"""
	the phone number of the contact
	"""
	phoneNumber: String
	clearPhoneNumber: Boolean
	"""
	the address of the contact
	"""
	address: String
	clearAddress: Boolean
	"""
	status of the contact
	"""
	status: ContactUserStatus
	ownerID: ID
	clearOwner: Boolean
	addEntityIDs: [ID!]
	removeEntityIDs: [ID!]
	clearEntities: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
}
"""
UpdateControlInput is used for update Control object.
Input was generated by ent.
"""
input UpdateControlInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the control
	"""
	name: String
	"""
	description of the control
	"""
	description: String
	clearDescription: Boolean
	"""
	status of the control
	"""
	status: String
	clearStatus: Boolean
	"""
	type of the control
	"""
	controlType: String
	clearControlType: Boolean
	"""
	version of the control
	"""
	version: String
	clearVersion: Boolean
	"""
	control number or identifier
	"""
	controlNumber: String
	clearControlNumber: Boolean
	"""
	family associated with the control
	"""
	family: String
	clearFamily: Boolean
	"""
	class associated with the control
	"""
	class: String
	clearClass: Boolean
	"""
	source of the control, e.g. framework, template, custom, etc.
	"""
	source: String
	clearSource: Boolean
	"""
	which control objectives are satisfied by the control
	"""
	satisfies: String
	clearSatisfies: Boolean
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	clearMappedFrameworks: Boolean
	"""
	json data including details of the control
	"""
	details: Map
	clearDetails: Boolean
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	clearExampleEvidence: Boolean
	addBlockedGroupIDs: [ID!]
	removeBlockedGroupIDs: [ID!]
	clearBlockedGroups: Boolean
	addEditorIDs: [ID!]
	removeEditorIDs: [ID!]
	clearEditors: Boolean
	addViewerIDs: [ID!]
	removeViewerIDs: [ID!]
	clearViewers: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedures: Boolean
	addSubcontrolIDs: [ID!]
	removeSubcontrolIDs: [ID!]
	clearSubcontrols: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjectives: Boolean
	addStandardIDs: [ID!]
	removeStandardIDs: [ID!]
	clearStandard: Boolean
	addNarrativeIDs: [ID!]
	removeNarrativeIDs: [ID!]
	clearNarratives: Boolean
	addRiskIDs: [ID!]
	removeRiskIDs: [ID!]
	clearRisks: Boolean
	addActionPlanIDs: [ID!]
	removeActionPlanIDs: [ID!]
	clearActionPlans: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
	addEvidenceIDs: [ID!]
	removeEvidenceIDs: [ID!]
	clearEvidence: Boolean
}
"""
UpdateControlObjectiveInput is used for update ControlObjective object.
Input was generated by ent.
"""
input UpdateControlObjectiveInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the control objective
	"""
	name: String
	"""
	description of the control objective
	"""
	description: String
	clearDescription: Boolean
	"""
	status of the control objective
	"""
	status: String
	clearStatus: Boolean
	"""
	type of the control objective
	"""
	controlObjectiveType: String
	clearControlObjectiveType: Boolean
	"""
	version of the control objective
	"""
	version: String
	clearVersion: Boolean
	"""
	number of the control objective
	"""
	controlNumber: String
	clearControlNumber: Boolean
	"""
	family of the control objective
	"""
	family: String
	clearFamily: Boolean
	"""
	class associated with the control objective
	"""
	class: String
	clearClass: Boolean
	"""
	source of the control objective, e.g. framework, template, user-defined, etc.
	"""
	source: String
	clearSource: Boolean
	"""
	mapped frameworks
	"""
	mappedFrameworks: String
	clearMappedFrameworks: Boolean
	"""
	json data including details of the control objective
	"""
	details: Map
	clearDetails: Boolean
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	clearExampleEvidence: Boolean
	addBlockedGroupIDs: [ID!]
	removeBlockedGroupIDs: [ID!]
	clearBlockedGroups: Boolean
	addEditorIDs: [ID!]
	removeEditorIDs: [ID!]
	clearEditors: Boolean
	addViewerIDs: [ID!]
	removeViewerIDs: [ID!]
	clearViewers: Boolean
	addInternalPolicyIDs: [ID!]
	removeInternalPolicyIDs: [ID!]
	clearInternalPolicies: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControls: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedures: Boolean
	addRiskIDs: [ID!]
	removeRiskIDs: [ID!]
	clearRisks: Boolean
	addSubcontrolIDs: [ID!]
	removeSubcontrolIDs: [ID!]
	clearSubcontrols: Boolean
	addStandardIDs: [ID!]
	removeStandardIDs: [ID!]
	clearStandard: Boolean
	addNarrativeIDs: [ID!]
	removeNarrativeIDs: [ID!]
	clearNarratives: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
	addEvidenceIDs: [ID!]
	removeEvidenceIDs: [ID!]
	clearEvidence: Boolean
}
"""
UpdateDocumentDataInput is used for update DocumentData object.
Input was generated by ent.
"""
input UpdateDocumentDataInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the json data of the document
	"""
	data: JSON
	templateID: ID
	addEntityIDs: [ID!]
	removeEntityIDs: [ID!]
	clearEntity: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
}
"""
UpdateEntityInput is used for update Entity object.
Input was generated by ent.
"""
input UpdateEntityInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the entity
	"""
	name: String
	clearName: Boolean
	"""
	The entity's displayed 'friendly' name
	"""
	displayName: String
	clearDisplayName: Boolean
	"""
	An optional description of the entity
	"""
	description: String
	clearDescription: Boolean
	"""
	domains associated with the entity
	"""
	domains: [String!]
	appendDomains: [String!]
	clearDomains: Boolean
	"""
	status of the entity
	"""
	status: String
	clearStatus: Boolean
	ownerID: ID
	clearOwner: Boolean
	addContactIDs: [ID!]
	removeContactIDs: [ID!]
	clearContacts: Boolean
	addDocumentIDs: [ID!]
	removeDocumentIDs: [ID!]
	clearDocuments: Boolean
	addNoteIDs: [ID!]
	removeNoteIDs: [ID!]
	clearNotes: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
	entityTypeID: ID
	clearEntityType: Boolean
	note: CreateNoteInput
}
"""
UpdateEntityTypeInput is used for update EntityType object.
Input was generated by ent.
"""
input UpdateEntityTypeInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the entity
	"""
	name: String
	ownerID: ID
	clearOwner: Boolean
	addEntityIDs: [ID!]
	removeEntityIDs: [ID!]
	clearEntities: Boolean
}
"""
UpdateEventInput is used for update Event object.
Input was generated by ent.
"""
input UpdateEventInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	eventID: String
	clearEventID: Boolean
	correlationID: String
	clearCorrelationID: Boolean
	eventType: String
	metadata: Map
	clearMetadata: Boolean
	addUserIDs: [ID!]
	removeUserIDs: [ID!]
	clearUser: Boolean
	addGroupIDs: [ID!]
	removeGroupIDs: [ID!]
	clearGroup: Boolean
	addIntegrationIDs: [ID!]
	removeIntegrationIDs: [ID!]
	clearIntegration: Boolean
	addOrganizationIDs: [ID!]
	removeOrganizationIDs: [ID!]
	clearOrganization: Boolean
	addInviteIDs: [ID!]
	removeInviteIDs: [ID!]
	clearInvite: Boolean
	addPersonalAccessTokenIDs: [ID!]
	removePersonalAccessTokenIDs: [ID!]
	clearPersonalAccessToken: Boolean
	addHushIDs: [ID!]
	removeHushIDs: [ID!]
	clearHush: Boolean
	addSubscriberIDs: [ID!]
	removeSubscriberIDs: [ID!]
	clearSubscriber: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFile: Boolean
}
"""
UpdateEvidenceInput is used for update Evidence object.
Input was generated by ent.
"""
input UpdateEvidenceInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the evidence
	"""
	name: String
	"""
	the description of the evidence, what is contained in the uploaded file(s) or url(s)
	"""
	description: String
	clearDescription: Boolean
	"""
	description of how the evidence was collected
	"""
	collectionProcedure: String
	clearCollectionProcedure: Boolean
	"""
	the date the evidence was retrieved
	"""
	creationDate: Time
	"""
	the date the evidence should be renewed, defaults to a year from entry date
	"""
	renewalDate: Time
	clearRenewalDate: Boolean
	"""
	the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
	"""
	source: String
	clearSource: Boolean
	"""
	whether the evidence was automatically generated
	"""
	isAutomated: Boolean
	clearIsAutomated: Boolean
	"""
	the url of the evidence if not uploaded directly to the system
	"""
	url: String
	clearURL: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjectives: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControls: Boolean
	addSubcontrolIDs: [ID!]
	removeSubcontrolIDs: [ID!]
	clearSubcontrols: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
}
"""
UpdateFileInput is used for update File object.
Input was generated by ent.
"""
input UpdateFileInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the file provided in the payload key without the extension
	"""
	providedFileName: String
	"""
	the extension of the file provided
	"""
	providedFileExtension: String
	"""
	the computed size of the file in the original http request
	"""
	providedFileSize: Int
	clearProvidedFileSize: Boolean
	persistedFileSize: Int
	clearPersistedFileSize: Boolean
	"""
	the mime type detected by the system
	"""
	detectedMimeType: String
	clearDetectedMimeType: Boolean
	"""
	the computed md5 hash of the file calculated after we received the contents of the file, but before the file was written to permanent storage
	"""
	md5Hash: String
	clearMd5Hash: Boolean
	"""
	the content type of the HTTP request - may be different than MIME type as multipart-form can transmit multiple files and different types
	"""
	detectedContentType: String
	"""
	the key parsed out of a multipart-form request; if we allow multiple files to be uploaded we may want our API specifications to require the use of different keys allowing us to perform easier conditional evaluation on the key and what to do with the file based on key
	"""
	storeKey: String
	clearStoreKey: Boolean
	"""
	the category type of the file, if any (e.g. evidence, invoice, etc.)
	"""
	categoryType: String
	clearCategoryType: Boolean
	"""
	the full URI of the file
	"""
	uri: String
	clearURI: Boolean
	"""
	the storage scheme of the file, e.g. file://, s3://, etc.
	"""
	storageScheme: String
	clearStorageScheme: Boolean
	"""
	the storage volume of the file which typically will be the organization ID the file belongs to - this is not a literal volume but the overlay file system mapping
	"""
	storageVolume: String
	clearStorageVolume: Boolean
	"""
	the storage path is the second-level directory of the file path, typically the correlating logical object ID the file is associated with; files can be stand alone objects and not always correlated to a logical one, so this path of the tree may be empty
	"""
	storagePath: String
	clearStoragePath: Boolean
	addUserIDs: [ID!]
	removeUserIDs: [ID!]
	clearUser: Boolean
	addOrganizationIDs: [ID!]
	removeOrganizationIDs: [ID!]
	clearOrganization: Boolean
	addGroupIDs: [ID!]
	removeGroupIDs: [ID!]
	clearGroup: Boolean
	addContactIDs: [ID!]
	removeContactIDs: [ID!]
	clearContact: Boolean
	addEntityIDs: [ID!]
	removeEntityIDs: [ID!]
	clearEntity: Boolean
	addUserSettingIDs: [ID!]
	removeUserSettingIDs: [ID!]
	clearUserSetting: Boolean
	addOrganizationSettingIDs: [ID!]
	removeOrganizationSettingIDs: [ID!]
	clearOrganizationSetting: Boolean
	addTemplateIDs: [ID!]
	removeTemplateIDs: [ID!]
	clearTemplate: Boolean
	addDocumentDatumIDs: [ID!]
	removeDocumentDatumIDs: [ID!]
	clearDocumentData: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearProgram: Boolean
	addEvidenceIDs: [ID!]
	removeEvidenceIDs: [ID!]
	clearEvidence: Boolean
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the group - must be unique within the organization
	"""
	name: String
	"""
	the groups description
	"""
	description: String
	clearDescription: Boolean
	"""
	the URL to an auto generated gravatar image for the group
	"""
	gravatarLogoURL: String
	clearGravatarLogoURL: Boolean
	"""
	the URL to an image uploaded by the customer for the groups avatar image
	"""
	logoURL: String
	clearLogoURL: Boolean
	"""
	The group's displayed 'friendly' name
	"""
	displayName: String
	ownerID: ID
	clearOwner: Boolean
	addProcedureEditorIDs: [ID!]
	removeProcedureEditorIDs: [ID!]
	clearProcedureEditors: Boolean
	addProcedureBlockedGroupIDs: [ID!]
	removeProcedureBlockedGroupIDs: [ID!]
	clearProcedureBlockedGroups: Boolean
	addInternalPolicyEditorIDs: [ID!]
	removeInternalPolicyEditorIDs: [ID!]
	clearInternalPolicyEditors: Boolean
	addInternalPolicyBlockedGroupIDs: [ID!]
	removeInternalPolicyBlockedGroupIDs: [ID!]
	clearInternalPolicyBlockedGroups: Boolean
	addProgramEditorIDs: [ID!]
	removeProgramEditorIDs: [ID!]
	clearProgramEditors: Boolean
	addProgramBlockedGroupIDs: [ID!]
	removeProgramBlockedGroupIDs: [ID!]
	clearProgramBlockedGroups: Boolean
	addProgramViewerIDs: [ID!]
	removeProgramViewerIDs: [ID!]
	clearProgramViewers: Boolean
	addRiskEditorIDs: [ID!]
	removeRiskEditorIDs: [ID!]
	clearRiskEditors: Boolean
	addRiskBlockedGroupIDs: [ID!]
	removeRiskBlockedGroupIDs: [ID!]
	clearRiskBlockedGroups: Boolean
	addRiskViewerIDs: [ID!]
	removeRiskViewerIDs: [ID!]
	clearRiskViewers: Boolean
	addControlObjectiveEditorIDs: [ID!]
	removeControlObjectiveEditorIDs: [ID!]
	clearControlObjectiveEditors: Boolean
	addControlObjectiveBlockedGroupIDs: [ID!]
	removeControlObjectiveBlockedGroupIDs: [ID!]
	clearControlObjectiveBlockedGroups: Boolean
	addControlObjectiveViewerIDs: [ID!]
	removeControlObjectiveViewerIDs: [ID!]
	clearControlObjectiveViewers: Boolean
	addControlEditorIDs: [ID!]
	removeControlEditorIDs: [ID!]
	clearControlEditors: Boolean
	addControlBlockedGroupIDs: [ID!]
	removeControlBlockedGroupIDs: [ID!]
	clearControlBlockedGroups: Boolean
	addControlViewerIDs: [ID!]
	removeControlViewerIDs: [ID!]
	clearControlViewers: Boolean
	addNarrativeEditorIDs: [ID!]
	removeNarrativeEditorIDs: [ID!]
	clearNarrativeEditors: Boolean
	addNarrativeBlockedGroupIDs: [ID!]
	removeNarrativeBlockedGroupIDs: [ID!]
	clearNarrativeBlockedGroups: Boolean
	addNarrativeViewerIDs: [ID!]
	removeNarrativeViewerIDs: [ID!]
	clearNarrativeViewers: Boolean
	settingID: ID
	clearSetting: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
	addIntegrationIDs: [ID!]
	removeIntegrationIDs: [ID!]
	clearIntegrations: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addGroupMembers: [CreateGroupMembershipInput!]
	removeGroupMembers: [ID!]
	updateGroupSettings: UpdateGroupSettingInput
	"""
	inheritGroupPermissions allows a group to be updated with the same permissions
	as the specified group ID, existing permissions will be removed
	"""
	inheritGroupPermissions: ID
}
"""
UpdateGroupMembershipInput is used for update GroupMembership object.
Input was generated by ent.
"""
input UpdateGroupMembershipInput {
	role: GroupMembershipRole
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
}
"""
UpdateGroupSettingInput is used for update GroupSetting object.
Input was generated by ent.
"""
input UpdateGroupSettingInput {
	"""
	whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization
	"""
	visibility: GroupSettingVisibility
	"""
	the policy governing ability to freely join a group, whether it requires an invitation, application, or either
	"""
	joinPolicy: GroupSettingJoinPolicy
	"""
	whether to sync group members to slack groups
	"""
	syncToSlack: Boolean
	clearSyncToSlack: Boolean
	"""
	whether to sync group members to github groups
	"""
	syncToGithub: Boolean
	clearSyncToGithub: Boolean
	groupID: ID
	clearGroup: Boolean
}
"""
UpdateHushInput is used for update Hush object.
Input was generated by ent.
"""
input UpdateHushInput {
	"""
	the logical name of the corresponding hush secret or it's general grouping
	"""
	name: String
	"""
	a description of the hush value or purpose, such as github PAT
	"""
	description: String
	clearDescription: Boolean
	"""
	the kind of secret, such as sshkey, certificate, api token, etc.
	"""
	kind: String
	clearKind: Boolean
	addIntegrationIDs: [ID!]
	removeIntegrationIDs: [ID!]
	clearIntegrations: Boolean
	addOrganizationIDs: [ID!]
	removeOrganizationIDs: [ID!]
	clearOrganization: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
}
"""
UpdateIntegrationInput is used for update Integration object.
Input was generated by ent.
"""
input UpdateIntegrationInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the integration - must be unique within the organization
	"""
	name: String
	"""
	a description of the integration
	"""
	description: String
	clearDescription: Boolean
	kind: String
	clearKind: Boolean
	ownerID: ID
	clearOwner: Boolean
	addSecretIDs: [ID!]
	removeSecretIDs: [ID!]
	clearSecrets: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
}
"""
UpdateInternalPolicyInput is used for update InternalPolicy object.
Input was generated by ent.
"""
input UpdateInternalPolicyInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the policy
	"""
	name: String
	"""
	description of the policy
	"""
	description: String
	clearDescription: Boolean
	"""
	status of the policy
	"""
	status: String
	clearStatus: Boolean
	"""
	the date the policy should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	clearReviewDue: Boolean
	"""
	type of the policy
	"""
	policyType: String
	clearPolicyType: Boolean
	"""
	version of the policy
	"""
	version: String
	clearVersion: Boolean
	"""
	purpose and scope
	"""
	purposeAndScope: String
	clearPurposeAndScope: Boolean
	"""
	background of the policy
	"""
	background: String
	clearBackground: Boolean
	"""
	json data for the policy document
	"""
	details: Map
	clearDetails: Boolean
	ownerID: ID
	clearOwner: Boolean
	addBlockedGroupIDs: [ID!]
	removeBlockedGroupIDs: [ID!]
	clearBlockedGroups: Boolean
	addEditorIDs: [ID!]
	removeEditorIDs: [ID!]
	clearEditors: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjectives: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControls: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedures: Boolean
	addNarrativeIDs: [ID!]
	removeNarrativeIDs: [ID!]
	clearNarratives: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
}
"""
UpdateInviteInput is used for update Invite object.
Input was generated by ent.
"""
input UpdateInviteInput {
	"""
	the expiration date of the invitation token which defaults to 14 days in the future from creation
	"""
	expires: Time
	clearExpires: Boolean
	"""
	the status of the invitation
	"""
	status: InviteInviteStatus
	role: InviteRole
	"""
	the number of attempts made to perform email send of the invitation, maximum of 5
	"""
	sendAttempts: Int
	ownerID: ID
	clearOwner: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
}
"""
UpdateNarrativeInput is used for update Narrative object.
Input was generated by ent.
"""
input UpdateNarrativeInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the narrative
	"""
	name: String
	"""
	the description of the narrative
	"""
	description: String
	clearDescription: Boolean
	"""
	which controls are satisfied by the narrative
	"""
	satisfies: String
	clearSatisfies: Boolean
	"""
	json data for the narrative document
	"""
	details: Map
	clearDetails: Boolean
	addBlockedGroupIDs: [ID!]
	removeBlockedGroupIDs: [ID!]
	clearBlockedGroups: Boolean
	addEditorIDs: [ID!]
	removeEditorIDs: [ID!]
	clearEditors: Boolean
	addViewerIDs: [ID!]
	removeViewerIDs: [ID!]
	clearViewers: Boolean
	addInternalPolicyIDs: [ID!]
	removeInternalPolicyIDs: [ID!]
	clearInternalPolicy: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControl: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedure: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjective: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
}
"""
UpdateNoteInput is used for update Note object.
Input was generated by ent.
"""
input UpdateNoteInput {
	"""
	the text of the note
	"""
	text: String
	taskID: ID
	clearTask: Boolean
}
"""
UpdateOrgMembershipInput is used for update OrgMembership object.
Input was generated by ent.
"""
input UpdateOrgMembershipInput {
	role: OrgMembershipRole
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the organization
	"""
	name: String
	"""
	The organization's displayed 'friendly' name
	"""
	displayName: String
	"""
	An optional description of the organization
	"""
	description: String
	clearDescription: Boolean
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	clearAvatarRemoteURL: Boolean
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	clearAvatarUpdatedAt: Boolean
	addControlCreatorIDs: [ID!]
	removeControlCreatorIDs: [ID!]
	clearControlCreators: Boolean
	addControlObjectiveCreatorIDs: [ID!]
	removeControlObjectiveCreatorIDs: [ID!]
	clearControlObjectiveCreators: Boolean
	addGroupCreatorIDs: [ID!]
	removeGroupCreatorIDs: [ID!]
	clearGroupCreators: Boolean
	addInternalPolicyCreatorIDs: [ID!]
	removeInternalPolicyCreatorIDs: [ID!]
	clearInternalPolicyCreators: Boolean
	addNarrativeCreatorIDs: [ID!]
	removeNarrativeCreatorIDs: [ID!]
	clearNarrativeCreators: Boolean
	addProcedureCreatorIDs: [ID!]
	removeProcedureCreatorIDs: [ID!]
	clearProcedureCreators: Boolean
	addProgramCreatorIDs: [ID!]
	removeProgramCreatorIDs: [ID!]
	clearProgramCreators: Boolean
	addRiskCreatorIDs: [ID!]
	removeRiskCreatorIDs: [ID!]
	clearRiskCreators: Boolean
	addTemplateCreatorIDs: [ID!]
	removeTemplateCreatorIDs: [ID!]
	clearTemplateCreators: Boolean
	settingID: ID
	clearSetting: Boolean
	addPersonalAccessTokenIDs: [ID!]
	removePersonalAccessTokenIDs: [ID!]
	clearPersonalAccessTokens: Boolean
	addAPITokenIDs: [ID!]
	removeAPITokenIDs: [ID!]
	clearAPITokens: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
	addSecretIDs: [ID!]
	removeSecretIDs: [ID!]
	clearSecrets: Boolean
	avatarFileID: ID
	clearAvatarFile: Boolean
	addGroupIDs: [ID!]
	removeGroupIDs: [ID!]
	clearGroups: Boolean
	addTemplateIDs: [ID!]
	removeTemplateIDs: [ID!]
	clearTemplates: Boolean
	addIntegrationIDs: [ID!]
	removeIntegrationIDs: [ID!]
	clearIntegrations: Boolean
	addDocumentDatumIDs: [ID!]
	removeDocumentDatumIDs: [ID!]
	clearDocumentData: Boolean
	addOrgSubscriptionIDs: [ID!]
	removeOrgSubscriptionIDs: [ID!]
	clearOrgSubscriptions: Boolean
	addInviteIDs: [ID!]
	removeInviteIDs: [ID!]
	clearInvites: Boolean
	addSubscriberIDs: [ID!]
	removeSubscriberIDs: [ID!]
	clearSubscribers: Boolean
	addEntityIDs: [ID!]
	removeEntityIDs: [ID!]
	clearEntities: Boolean
	addEntityTypeIDs: [ID!]
	removeEntityTypeIDs: [ID!]
	clearEntityTypes: Boolean
	addContactIDs: [ID!]
	removeContactIDs: [ID!]
	clearContacts: Boolean
	addNoteIDs: [ID!]
	removeNoteIDs: [ID!]
	clearNotes: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedures: Boolean
	addInternalPolicyIDs: [ID!]
	removeInternalPolicyIDs: [ID!]
	clearInternalPolicies: Boolean
	addRiskIDs: [ID!]
	removeRiskIDs: [ID!]
	clearRisks: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjectives: Boolean
	addNarrativeIDs: [ID!]
	removeNarrativeIDs: [ID!]
	clearNarratives: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControls: Boolean
	addSubcontrolIDs: [ID!]
	removeSubcontrolIDs: [ID!]
	clearSubcontrols: Boolean
	addEvidenceIDs: [ID!]
	removeEvidenceIDs: [ID!]
	clearEvidence: Boolean
	addOrgMembers: [CreateOrgMembershipInput!]
	removeOrgMembers: [ID!]
	updateOrgSettings: UpdateOrganizationSettingInput
}
"""
UpdateOrganizationSettingInput is used for update OrganizationSetting object.
Input was generated by ent.
"""
input UpdateOrganizationSettingInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	domains associated with the organization
	"""
	domains: [String!]
	appendDomains: [String!]
	clearDomains: Boolean
	"""
	Name of the person to contact for billing
	"""
	billingContact: String
	clearBillingContact: Boolean
	"""
	Email address of the person to contact for billing
	"""
	billingEmail: String
	clearBillingEmail: Boolean
	"""
	Phone number to contact for billing
	"""
	billingPhone: String
	clearBillingPhone: Boolean
	"""
	the billing address to send billing information to
	"""
	billingAddress: Address
	clearBillingAddress: Boolean
	"""
	Usually government-issued tax ID or business ID such as ABN in Australia
	"""
	taxIdentifier: String
	clearTaxIdentifier: Boolean
	"""
	geographical location of the organization
	"""
	geoLocation: OrganizationSettingRegion
	clearGeoLocation: Boolean
	"""
	should we send email notifications related to billing
	"""
	billingNotificationsEnabled: Boolean
	"""
	domains allowed to access the organization, if empty all domains are allowed
	"""
	allowedEmailDomains: [String!]
	appendAllowedEmailDomains: [String!]
	clearAllowedEmailDomains: Boolean
	organizationID: ID
	clearOrganization: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
}
"""
UpdatePersonalAccessTokenInput is used for update PersonalAccessToken object.
Input was generated by ent.
"""
input UpdatePersonalAccessTokenInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name associated with the token
	"""
	name: String
	"""
	a description of the token's purpose
	"""
	description: String
	clearDescription: Boolean
	scopes: [String!]
	appendScopes: [String!]
	clearScopes: Boolean
	lastUsedAt: Time
	clearLastUsedAt: Boolean
	addOrganizationIDs: [ID!]
	removeOrganizationIDs: [ID!]
	clearOrganizations: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
}
"""
UpdateProcedureInput is used for update Procedure object.
Input was generated by ent.
"""
input UpdateProcedureInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the procedure
	"""
	name: String
	"""
	description of the procedure
	"""
	description: String
	clearDescription: Boolean
	"""
	status of the procedure
	"""
	status: String
	clearStatus: Boolean
	"""
	type of the procedure
	"""
	procedureType: String
	clearProcedureType: Boolean
	"""
	the date the procedure should be reviewed, defaults to a year from creation date
	"""
	reviewDue: Time
	clearReviewDue: Boolean
	"""
	version of the procedure
	"""
	version: String
	clearVersion: Boolean
	"""
	purpose and scope
	"""
	purposeAndScope: String
	clearPurposeAndScope: Boolean
	"""
	background of the procedure
	"""
	background: String
	clearBackground: Boolean
	"""
	which controls are satisfied by the procedure
	"""
	satisfies: String
	clearSatisfies: Boolean
	"""
	json data for the procedure document
	"""
	details: Map
	clearDetails: Boolean
	ownerID: ID
	clearOwner: Boolean
	addBlockedGroupIDs: [ID!]
	removeBlockedGroupIDs: [ID!]
	clearBlockedGroups: Boolean
	addEditorIDs: [ID!]
	removeEditorIDs: [ID!]
	clearEditors: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControls: Boolean
	addInternalPolicyIDs: [ID!]
	removeInternalPolicyIDs: [ID!]
	clearInternalPolicies: Boolean
	addNarrativeIDs: [ID!]
	removeNarrativeIDs: [ID!]
	clearNarratives: Boolean
	addRiskIDs: [ID!]
	removeRiskIDs: [ID!]
	clearRisks: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
}
"""
UpdateProgramInput is used for update Program object.
Input was generated by ent.
"""
input UpdateProgramInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the program
	"""
	name: String
	"""
	the description of the program
	"""
	description: String
	clearDescription: Boolean
	"""
	the status of the program
	"""
	status: ProgramProgramStatus
	"""
	the start date of the period
	"""
	startDate: Time
	clearStartDate: Boolean
	"""
	the end date of the period
	"""
	endDate: Time
	clearEndDate: Boolean
	"""
	is the program ready for the auditor
	"""
	auditorReady: Boolean
	"""
	can the auditor write comments
	"""
	auditorWriteComments: Boolean
	"""
	can the auditor read comments
	"""
	auditorReadComments: Boolean
	ownerID: ID
	clearOwner: Boolean
	addBlockedGroupIDs: [ID!]
	removeBlockedGroupIDs: [ID!]
	clearBlockedGroups: Boolean
	addEditorIDs: [ID!]
	removeEditorIDs: [ID!]
	clearEditors: Boolean
	addViewerIDs: [ID!]
	removeViewerIDs: [ID!]
	clearViewers: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControls: Boolean
	addSubcontrolIDs: [ID!]
	removeSubcontrolIDs: [ID!]
	clearSubcontrols: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjectives: Boolean
	addInternalPolicyIDs: [ID!]
	removeInternalPolicyIDs: [ID!]
	clearInternalPolicies: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedures: Boolean
	addRiskIDs: [ID!]
	removeRiskIDs: [ID!]
	clearRisks: Boolean
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addNoteIDs: [ID!]
	removeNoteIDs: [ID!]
	clearNotes: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
	addEvidenceIDs: [ID!]
	removeEvidenceIDs: [ID!]
	clearEvidence: Boolean
	addNarrativeIDs: [ID!]
	removeNarrativeIDs: [ID!]
	clearNarratives: Boolean
	addActionPlanIDs: [ID!]
	removeActionPlanIDs: [ID!]
	clearActionPlans: Boolean
	addStandardIDs: [ID!]
	removeStandardIDs: [ID!]
	clearStandards: Boolean
	addProgramMembers: [CreateProgramMembershipInput!]
	removeProgramMembers: [ID!]
}
"""
UpdateProgramMembershipInput is used for update ProgramMembership object.
Input was generated by ent.
"""
input UpdateProgramMembershipInput {
	role: ProgramMembershipRole
}
"""
UpdateRiskInput is used for update Risk object.
Input was generated by ent.
"""
input UpdateRiskInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the risk
	"""
	name: String
	"""
	description of the risk
	"""
	description: String
	clearDescription: Boolean
	"""
	status of the risk - mitigated or not, inflight, etc.
	"""
	status: String
	clearStatus: Boolean
	"""
	type of the risk, e.g. strategic, operational, financial, external, etc.
	"""
	riskType: String
	clearRiskType: Boolean
	"""
	business costs associated with the risk
	"""
	businessCosts: String
	clearBusinessCosts: Boolean
	"""
	impact of the risk - high, medium, low
	"""
	impact: RiskRiskImpact
	clearImpact: Boolean
	"""
	likelihood of the risk occurring; unlikely, likely, highly likely
	"""
	likelihood: RiskRiskLikelihood
	clearLikelihood: Boolean
	"""
	mitigation for the risk
	"""
	mitigation: String
	clearMitigation: Boolean
	"""
	which controls are satisfied by the risk
	"""
	satisfies: String
	clearSatisfies: Boolean
	"""
	json data for the risk document
	"""
	details: Map
	clearDetails: Boolean
	addBlockedGroupIDs: [ID!]
	removeBlockedGroupIDs: [ID!]
	clearBlockedGroups: Boolean
	addEditorIDs: [ID!]
	removeEditorIDs: [ID!]
	clearEditors: Boolean
	addViewerIDs: [ID!]
	removeViewerIDs: [ID!]
	clearViewers: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControl: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedure: Boolean
	addActionPlanIDs: [ID!]
	removeActionPlanIDs: [ID!]
	clearActionPlans: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
}
"""
UpdateStandardInput is used for update Standard object.
Input was generated by ent.
"""
input UpdateStandardInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
	"""
	name: String
	"""
	description of the standard
	"""
	description: String
	clearDescription: Boolean
	"""
	family of the standard, e.g. 800-53, 800-171, 27001, etc.
	"""
	family: String
	clearFamily: Boolean
	"""
	status of the standard - active, deprecated, etc.
	"""
	status: String
	clearStatus: Boolean
	"""
	type of the standard - security, privacy, etc.
	"""
	standardType: String
	clearStandardType: Boolean
	"""
	version of the standard
	"""
	version: String
	clearVersion: Boolean
	"""
	purpose and scope
	"""
	purposeAndScope: String
	clearPurposeAndScope: Boolean
	"""
	background of the standard
	"""
	background: String
	clearBackground: Boolean
	"""
	which controls are satisfied by the standard
	"""
	satisfies: String
	clearSatisfies: Boolean
	"""
	json data with details of the standard
	"""
	details: Map
	clearDetails: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjectives: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControls: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedures: Boolean
	addActionPlanIDs: [ID!]
	removeActionPlanIDs: [ID!]
	clearActionPlans: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
}
"""
UpdateSubcontrolInput is used for update Subcontrol object.
Input was generated by ent.
"""
input UpdateSubcontrolInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the subcontrol
	"""
	name: String
	"""
	description of the subcontrol
	"""
	description: String
	clearDescription: Boolean
	"""
	status of the subcontrol
	"""
	status: String
	clearStatus: Boolean
	"""
	type of the subcontrol
	"""
	subcontrolType: String
	clearSubcontrolType: Boolean
	"""
	version of the control
	"""
	version: String
	clearVersion: Boolean
	"""
	number of the subcontrol
	"""
	subcontrolNumber: String
	clearSubcontrolNumber: Boolean
	"""
	subcontrol family
	"""
	family: String
	clearFamily: Boolean
	"""
	subcontrol class
	"""
	class: String
	clearClass: Boolean
	"""
	source of the control, e.g. framework, template, user-defined, etc.
	"""
	source: String
	clearSource: Boolean
	"""
	mapped frameworks that the subcontrol is part of
	"""
	mappedFrameworks: String
	clearMappedFrameworks: Boolean
	"""
	implementation evidence of the subcontrol
	"""
	implementationEvidence: String
	clearImplementationEvidence: Boolean
	"""
	implementation status
	"""
	implementationStatus: String
	clearImplementationStatus: Boolean
	"""
	date the subcontrol was implemented
	"""
	implementationDate: Time
	clearImplementationDate: Boolean
	"""
	implementation verification
	"""
	implementationVerification: String
	clearImplementationVerification: Boolean
	"""
	date the subcontrol implementation was verified
	"""
	implementationVerificationDate: Time
	clearImplementationVerificationDate: Boolean
	"""
	json data details of the subcontrol
	"""
	details: Map
	clearDetails: Boolean
	"""
	example evidence to provide for the control
	"""
	exampleEvidence: String
	clearExampleEvidence: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	addTaskIDs: [ID!]
	removeTaskIDs: [ID!]
	clearTasks: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
	addEvidenceIDs: [ID!]
	removeEvidenceIDs: [ID!]
	clearEvidence: Boolean
}
"""
UpdateSubscriberInput is used for update Subscriber object.
Input was generated by ent.
"""
input UpdateSubscriberInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	email address of the subscriber
	"""
	email: String
	"""
	phone number of the subscriber
	"""
	phoneNumber: String
	clearPhoneNumber: Boolean
	ownerID: ID
	clearOwner: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
}
"""
UpdateTFASettingInput is used for update TFASetting object.
Input was generated by ent.
"""
input UpdateTFASettingInput {
	"""
	specifies if the TFA device has been verified
	"""
	verified: Boolean
	"""
	specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app
	"""
	totpAllowed: Boolean
	clearTotpAllowed: Boolean
	"""
	Whether to regenerate backup codes
	"""
	regenBackupCodes: Boolean
}
"""
UpdateTaskInput is used for update Task object.
Input was generated by ent.
"""
input UpdateTaskInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the title of the task
	"""
	title: String
	"""
	the description of the task
	"""
	description: String
	clearDescription: Boolean
	"""
	the details of the task
	"""
	details: String
	clearDetails: Boolean
	"""
	the status of the task
	"""
	status: TaskTaskStatus
	"""
	the category of the task, e.g. evidence upload, risk review, policy review, etc.
	"""
	category: String
	clearCategory: Boolean
	"""
	the due date of the task
	"""
	due: Time
	clearDue: Boolean
	"""
	the completion date of the task
	"""
	completed: Time
	clearCompleted: Boolean
	assignerID: ID
	clearAssigner: Boolean
	assigneeID: ID
	clearAssignee: Boolean
	addCommentIDs: [ID!]
	removeCommentIDs: [ID!]
	clearComments: Boolean
	addGroupIDs: [ID!]
	removeGroupIDs: [ID!]
	clearGroup: Boolean
	addInternalPolicyIDs: [ID!]
	removeInternalPolicyIDs: [ID!]
	clearInternalPolicy: Boolean
	addProcedureIDs: [ID!]
	removeProcedureIDs: [ID!]
	clearProcedure: Boolean
	addControlIDs: [ID!]
	removeControlIDs: [ID!]
	clearControl: Boolean
	addControlObjectiveIDs: [ID!]
	removeControlObjectiveIDs: [ID!]
	clearControlObjective: Boolean
	addSubcontrolIDs: [ID!]
	removeSubcontrolIDs: [ID!]
	clearSubcontrol: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearProgram: Boolean
	addEvidenceIDs: [ID!]
	removeEvidenceIDs: [ID!]
	clearEvidence: Boolean
	addComment: CreateNoteInput
	deleteComment: ID
}
"""
UpdateTemplateInput is used for update Template object.
Input was generated by ent.
"""
input UpdateTemplateInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	the name of the template
	"""
	name: String
	"""
	the type of the template, either a provided template or an implementation (document)
	"""
	templateType: TemplateDocumentType
	"""
	the description of the template
	"""
	description: String
	clearDescription: Boolean
	"""
	the jsonschema object of the template
	"""
	jsonconfig: JSON
	"""
	the uischema for the template to render in the UI
	"""
	uischema: JSON
	clearUischema: Boolean
	ownerID: ID
	clearOwner: Boolean
	addDocumentIDs: [ID!]
	removeDocumentIDs: [ID!]
	clearDocuments: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	email: String
	firstName: String
	clearFirstName: Boolean
	lastName: String
	clearLastName: Boolean
	"""
	The user's displayed 'friendly' name
	"""
	displayName: String
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	clearAvatarRemoteURL: Boolean
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	clearAvatarUpdatedAt: Boolean
	"""
	the time the user was last seen
	"""
	lastSeen: Time
	clearLastSeen: Boolean
	"""
	user password hash
	"""
	password: String
	clearPassword: Boolean
	"""
	the Subject of the user JWT
	"""
	sub: String
	clearSub: Boolean
	"""
	auth provider used to register the account
	"""
	authProvider: UserAuthProvider
	"""
	the user's role
	"""
	role: UserRole
	clearRole: Boolean
	addPersonalAccessTokenIDs: [ID!]
	removePersonalAccessTokenIDs: [ID!]
	clearPersonalAccessTokens: Boolean
	addTfaSettingIDs: [ID!]
	removeTfaSettingIDs: [ID!]
	clearTfaSettings: Boolean
	settingID: ID
	addEmailVerificationTokenIDs: [ID!]
	removeEmailVerificationTokenIDs: [ID!]
	clearEmailVerificationTokens: Boolean
	addPasswordResetTokenIDs: [ID!]
	removePasswordResetTokenIDs: [ID!]
	clearPasswordResetTokens: Boolean
	addGroupIDs: [ID!]
	removeGroupIDs: [ID!]
	clearGroups: Boolean
	addOrganizationIDs: [ID!]
	removeOrganizationIDs: [ID!]
	clearOrganizations: Boolean
	addWebauthnIDs: [ID!]
	removeWebauthnIDs: [ID!]
	clearWebauthn: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
	avatarFileID: ID
	clearAvatarFile: Boolean
	addEventIDs: [ID!]
	removeEventIDs: [ID!]
	clearEvents: Boolean
	addActionPlanIDs: [ID!]
	removeActionPlanIDs: [ID!]
	clearActionPlans: Boolean
	addSubcontrolIDs: [ID!]
	removeSubcontrolIDs: [ID!]
	clearSubcontrols: Boolean
	addAssignerTaskIDs: [ID!]
	removeAssignerTaskIDs: [ID!]
	clearAssignerTasks: Boolean
	addAssigneeTaskIDs: [ID!]
	removeAssigneeTaskIDs: [ID!]
	clearAssigneeTasks: Boolean
	addProgramIDs: [ID!]
	removeProgramIDs: [ID!]
	clearPrograms: Boolean
}
"""
UpdateUserSettingInput is used for update UserSetting object.
Input was generated by ent.
"""
input UpdateUserSettingInput {
	"""
	tags associated with the object
	"""
	tags: [String!]
	appendTags: [String!]
	clearTags: Boolean
	"""
	user account is locked if unconfirmed or explicitly locked
	"""
	locked: Boolean
	"""
	The time notifications regarding the user were silenced
	"""
	silencedAt: Time
	clearSilencedAt: Boolean
	"""
	The time the user was suspended
	"""
	suspendedAt: Time
	clearSuspendedAt: Boolean
	"""
	status of the user account
	"""
	status: UserSettingUserStatus
	"""
	whether the user has confirmed their email address
	"""
	emailConfirmed: Boolean
	"""
	specifies a user may complete authentication by verifying a WebAuthn capable device
	"""
	isWebauthnAllowed: Boolean
	clearIsWebauthnAllowed: Boolean
	"""
	whether the user has two factor authentication enabled
	"""
	isTfaEnabled: Boolean
	clearIsTfaEnabled: Boolean
	userID: ID
	clearUser: Boolean
	defaultOrgID: ID
	clearDefaultOrg: Boolean
	addFileIDs: [ID!]
	removeFileIDs: [ID!]
	clearFiles: Boolean
}
scalar Upload
type User implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	email: String!
	firstName: String
	lastName: String
	"""
	The user's displayed 'friendly' name
	"""
	displayName: String!
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	"""
	The user's local avatar file id, takes precedence over the avatar remote URL
	"""
	avatarLocalFileID: ID
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	"""
	the time the user was last seen
	"""
	lastSeen: Time
	"""
	the Subject of the user JWT
	"""
	sub: String
	"""
	auth provider used to register the account
	"""
	authProvider: UserAuthProvider!
	"""
	the user's role
	"""
	role: UserRole
	personalAccessTokens: [PersonalAccessToken!]
	tfaSettings: [TFASetting!]
	setting: UserSetting!
	groups: [Group!]
	organizations: [Organization!]
	files: [File!]
	avatarFile: File
	events: [Event!]
	actionPlans: [ActionPlan!]
	subcontrols: [Subcontrol!]
	assignerTasks: [Task!]
	assigneeTasks: [Task!]
	programs: [Program!]
	groupMemberships: [GroupMembership!]
	orgMemberships: [OrgMembership!]
	programMemberships: [ProgramMembership!]
}
"""
UserAuthProvider is enum for the field auth_provider
"""
enum UserAuthProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.AuthProvider") {
	CREDENTIALS
	GOOGLE
	GITHUB
	WEBAUTHN
}
"""
Return response for createBulkUser mutation
"""
type UserBulkCreatePayload {
	"""
	Created users
	"""
	users: [User!]
}
"""
A connection to a list of items.
"""
type UserConnection {
	"""
	A list of edges.
	"""
	edges: [UserEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createUser mutation
"""
type UserCreatePayload {
	"""
	Created user
	"""
	user: User!
}
"""
Return response for deleteUser mutation
"""
type UserDeletePayload {
	"""
	Deleted user ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type UserEdge {
	"""
	The item at the end of the edge.
	"""
	node: User
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type UserHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: UserHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	a shortened prefixed id field to use as a human readable identifier
	"""
	displayID: String!
	"""
	tags associated with the object
	"""
	tags: [String!]
	email: String!
	firstName: String
	lastName: String
	"""
	The user's displayed 'friendly' name
	"""
	displayName: String!
	"""
	URL of the user's remote avatar
	"""
	avatarRemoteURL: String
	"""
	The user's local avatar file id, takes precedence over the avatar remote URL
	"""
	avatarLocalFileID: String
	"""
	The time the user's (local) avatar was last updated
	"""
	avatarUpdatedAt: Time
	"""
	the time the user was last seen
	"""
	lastSeen: Time
	"""
	the Subject of the user JWT
	"""
	sub: String
	"""
	auth provider used to register the account
	"""
	authProvider: UserHistoryAuthProvider!
	"""
	the user's role
	"""
	role: UserHistoryRole
}
"""
UserHistoryAuthProvider is enum for the field auth_provider
"""
enum UserHistoryAuthProvider @goModel(model: "github.com/theopenlane/core/pkg/enums.AuthProvider") {
	CREDENTIALS
	GOOGLE
	GITHUB
	WEBAUTHN
}
"""
A connection to a list of items.
"""
type UserHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [UserHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type UserHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: UserHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
UserHistoryOpType is enum for the field operation
"""
enum UserHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
Ordering options for UserHistory connections
"""
input UserHistoryOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order UserHistories.
	"""
	field: UserHistoryOrderField!
}
"""
Properties by which UserHistory connections can be ordered.
"""
enum UserHistoryOrderField {
	first_name
	last_name
	display_name
}
"""
UserHistoryRole is enum for the field role
"""
enum UserHistoryRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
	USER
}
"""
UserHistoryWhereInput is used for filtering UserHistory objects.
Input was generated by ent.
"""
input UserHistoryWhereInput {
	not: UserHistoryWhereInput
	and: [UserHistoryWhereInput!]
	or: [UserHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: UserHistoryOpType
	operationNEQ: UserHistoryOpType
	operationIn: [UserHistoryOpType!]
	operationNotIn: [UserHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	email field predicates
	"""
	email: String
	emailNEQ: String
	emailIn: [String!]
	emailNotIn: [String!]
	emailGT: String
	emailGTE: String
	emailLT: String
	emailLTE: String
	emailContains: String
	emailHasPrefix: String
	emailHasSuffix: String
	emailEqualFold: String
	emailContainsFold: String
	"""
	first_name field predicates
	"""
	firstName: String
	firstNameNEQ: String
	firstNameIn: [String!]
	firstNameNotIn: [String!]
	firstNameGT: String
	firstNameGTE: String
	firstNameLT: String
	firstNameLTE: String
	firstNameContains: String
	firstNameHasPrefix: String
	firstNameHasSuffix: String
	firstNameIsNil: Boolean
	firstNameNotNil: Boolean
	firstNameEqualFold: String
	firstNameContainsFold: String
	"""
	last_name field predicates
	"""
	lastName: String
	lastNameNEQ: String
	lastNameIn: [String!]
	lastNameNotIn: [String!]
	lastNameGT: String
	lastNameGTE: String
	lastNameLT: String
	lastNameLTE: String
	lastNameContains: String
	lastNameHasPrefix: String
	lastNameHasSuffix: String
	lastNameIsNil: Boolean
	lastNameNotNil: Boolean
	lastNameEqualFold: String
	lastNameContainsFold: String
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""
	avatar_remote_url field predicates
	"""
	avatarRemoteURL: String
	avatarRemoteURLNEQ: String
	avatarRemoteURLIn: [String!]
	avatarRemoteURLNotIn: [String!]
	avatarRemoteURLGT: String
	avatarRemoteURLGTE: String
	avatarRemoteURLLT: String
	avatarRemoteURLLTE: String
	avatarRemoteURLContains: String
	avatarRemoteURLHasPrefix: String
	avatarRemoteURLHasSuffix: String
	avatarRemoteURLIsNil: Boolean
	avatarRemoteURLNotNil: Boolean
	avatarRemoteURLEqualFold: String
	avatarRemoteURLContainsFold: String
	"""
	avatar_local_file_id field predicates
	"""
	avatarLocalFileID: String
	avatarLocalFileIDNEQ: String
	avatarLocalFileIDIn: [String!]
	avatarLocalFileIDNotIn: [String!]
	avatarLocalFileIDGT: String
	avatarLocalFileIDGTE: String
	avatarLocalFileIDLT: String
	avatarLocalFileIDLTE: String
	avatarLocalFileIDContains: String
	avatarLocalFileIDHasPrefix: String
	avatarLocalFileIDHasSuffix: String
	avatarLocalFileIDIsNil: Boolean
	avatarLocalFileIDNotNil: Boolean
	avatarLocalFileIDEqualFold: String
	avatarLocalFileIDContainsFold: String
	"""
	avatar_updated_at field predicates
	"""
	avatarUpdatedAt: Time
	avatarUpdatedAtNEQ: Time
	avatarUpdatedAtIn: [Time!]
	avatarUpdatedAtNotIn: [Time!]
	avatarUpdatedAtGT: Time
	avatarUpdatedAtGTE: Time
	avatarUpdatedAtLT: Time
	avatarUpdatedAtLTE: Time
	avatarUpdatedAtIsNil: Boolean
	avatarUpdatedAtNotNil: Boolean
	"""
	last_seen field predicates
	"""
	lastSeen: Time
	lastSeenNEQ: Time
	lastSeenIn: [Time!]
	lastSeenNotIn: [Time!]
	lastSeenGT: Time
	lastSeenGTE: Time
	lastSeenLT: Time
	lastSeenLTE: Time
	lastSeenIsNil: Boolean
	lastSeenNotNil: Boolean
	"""
	sub field predicates
	"""
	sub: String
	subNEQ: String
	subIn: [String!]
	subNotIn: [String!]
	subGT: String
	subGTE: String
	subLT: String
	subLTE: String
	subContains: String
	subHasPrefix: String
	subHasSuffix: String
	subIsNil: Boolean
	subNotNil: Boolean
	subEqualFold: String
	subContainsFold: String
	"""
	auth_provider field predicates
	"""
	authProvider: UserHistoryAuthProvider
	authProviderNEQ: UserHistoryAuthProvider
	authProviderIn: [UserHistoryAuthProvider!]
	authProviderNotIn: [UserHistoryAuthProvider!]
	"""
	role field predicates
	"""
	role: UserHistoryRole
	roleNEQ: UserHistoryRole
	roleIn: [UserHistoryRole!]
	roleNotIn: [UserHistoryRole!]
	roleIsNil: Boolean
	roleNotNil: Boolean
}
"""
Ordering options for User connections
"""
input UserOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Users.
	"""
	field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
	first_name
	last_name
	display_name
}
"""
UserRole is enum for the field role
"""
enum UserRole @goModel(model: "github.com/theopenlane/core/pkg/enums.Role") {
	ADMIN
	MEMBER
	USER
}
type UserSearchResult {
	users: [User!]
}
type UserSetting implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	userID: ID
	"""
	user account is locked if unconfirmed or explicitly locked
	"""
	locked: Boolean!
	"""
	The time notifications regarding the user were silenced
	"""
	silencedAt: Time
	"""
	The time the user was suspended
	"""
	suspendedAt: Time
	"""
	status of the user account
	"""
	status: UserSettingUserStatus!
	"""
	whether the user has confirmed their email address
	"""
	emailConfirmed: Boolean!
	"""
	specifies a user may complete authentication by verifying a WebAuthn capable device
	"""
	isWebauthnAllowed: Boolean
	"""
	whether the user has two factor authentication enabled
	"""
	isTfaEnabled: Boolean
	user: User
	"""
	organization to load on user login
	"""
	defaultOrg: Organization
	files: [File!]
}
"""
Return response for createBulkUserSetting mutation
"""
type UserSettingBulkCreatePayload {
	"""
	Created userSettings
	"""
	userSettings: [UserSetting!]
}
"""
A connection to a list of items.
"""
type UserSettingConnection {
	"""
	A list of edges.
	"""
	edges: [UserSettingEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createUserSetting mutation
"""
type UserSettingCreatePayload {
	"""
	Created userSetting
	"""
	userSetting: UserSetting!
}
"""
An edge in a connection.
"""
type UserSettingEdge {
	"""
	The item at the end of the edge.
	"""
	node: UserSetting
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
type UserSettingHistory implements Node {
	id: ID!
	historyTime: Time!
	ref: String
	operation: UserSettingHistoryOpType!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""
	tags associated with the object
	"""
	tags: [String!]
	deletedAt: Time
	deletedBy: String
	userID: String
	"""
	user account is locked if unconfirmed or explicitly locked
	"""
	locked: Boolean!
	"""
	The time notifications regarding the user were silenced
	"""
	silencedAt: Time
	"""
	The time the user was suspended
	"""
	suspendedAt: Time
	"""
	status of the user account
	"""
	status: UserSettingHistoryUserStatus!
	"""
	whether the user has confirmed their email address
	"""
	emailConfirmed: Boolean!
	"""
	specifies a user may complete authentication by verifying a WebAuthn capable device
	"""
	isWebauthnAllowed: Boolean
	"""
	whether the user has two factor authentication enabled
	"""
	isTfaEnabled: Boolean
}
"""
A connection to a list of items.
"""
type UserSettingHistoryConnection {
	"""
	A list of edges.
	"""
	edges: [UserSettingHistoryEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type UserSettingHistoryEdge {
	"""
	The item at the end of the edge.
	"""
	node: UserSettingHistory
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
UserSettingHistoryOpType is enum for the field operation
"""
enum UserSettingHistoryOpType @goModel(model: "github.com/theopenlane/entx/history.OpType") {
	INSERT
	UPDATE
	DELETE
}
"""
UserSettingHistoryUserStatus is enum for the field status
"""
enum UserSettingHistoryUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
	ACTIVE
	INACTIVE
	DEACTIVATED
	SUSPENDED
	ONBOARDING
}
"""
UserSettingHistoryWhereInput is used for filtering UserSettingHistory objects.
Input was generated by ent.
"""
input UserSettingHistoryWhereInput {
	not: UserSettingHistoryWhereInput
	and: [UserSettingHistoryWhereInput!]
	or: [UserSettingHistoryWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	history_time field predicates
	"""
	historyTime: Time
	historyTimeNEQ: Time
	historyTimeIn: [Time!]
	historyTimeNotIn: [Time!]
	historyTimeGT: Time
	historyTimeGTE: Time
	historyTimeLT: Time
	historyTimeLTE: Time
	"""
	ref field predicates
	"""
	ref: String
	refNEQ: String
	refIn: [String!]
	refNotIn: [String!]
	refGT: String
	refGTE: String
	refLT: String
	refLTE: String
	refContains: String
	refHasPrefix: String
	refHasSuffix: String
	refIsNil: Boolean
	refNotNil: Boolean
	refEqualFold: String
	refContainsFold: String
	"""
	operation field predicates
	"""
	operation: UserSettingHistoryOpType
	operationNEQ: UserSettingHistoryOpType
	operationIn: [UserSettingHistoryOpType!]
	operationNotIn: [UserSettingHistoryOpType!]
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	user_id field predicates
	"""
	userID: String
	userIDNEQ: String
	userIDIn: [String!]
	userIDNotIn: [String!]
	userIDGT: String
	userIDGTE: String
	userIDLT: String
	userIDLTE: String
	userIDContains: String
	userIDHasPrefix: String
	userIDHasSuffix: String
	userIDIsNil: Boolean
	userIDNotNil: Boolean
	userIDEqualFold: String
	userIDContainsFold: String
	"""
	locked field predicates
	"""
	locked: Boolean
	lockedNEQ: Boolean
	"""
	silenced_at field predicates
	"""
	silencedAt: Time
	silencedAtNEQ: Time
	silencedAtIn: [Time!]
	silencedAtNotIn: [Time!]
	silencedAtGT: Time
	silencedAtGTE: Time
	silencedAtLT: Time
	silencedAtLTE: Time
	silencedAtIsNil: Boolean
	silencedAtNotNil: Boolean
	"""
	suspended_at field predicates
	"""
	suspendedAt: Time
	suspendedAtNEQ: Time
	suspendedAtIn: [Time!]
	suspendedAtNotIn: [Time!]
	suspendedAtGT: Time
	suspendedAtGTE: Time
	suspendedAtLT: Time
	suspendedAtLTE: Time
	suspendedAtIsNil: Boolean
	suspendedAtNotNil: Boolean
	"""
	status field predicates
	"""
	status: UserSettingHistoryUserStatus
	statusNEQ: UserSettingHistoryUserStatus
	statusIn: [UserSettingHistoryUserStatus!]
	statusNotIn: [UserSettingHistoryUserStatus!]
	"""
	email_confirmed field predicates
	"""
	emailConfirmed: Boolean
	emailConfirmedNEQ: Boolean
	"""
	is_webauthn_allowed field predicates
	"""
	isWebauthnAllowed: Boolean
	isWebauthnAllowedNEQ: Boolean
	isWebauthnAllowedIsNil: Boolean
	isWebauthnAllowedNotNil: Boolean
	"""
	is_tfa_enabled field predicates
	"""
	isTfaEnabled: Boolean
	isTfaEnabledNEQ: Boolean
	isTfaEnabledIsNil: Boolean
	isTfaEnabledNotNil: Boolean
}
type UserSettingSearchResult {
	userSettings: [UserSetting!]
}
"""
Return response for updateUserSetting mutation
"""
type UserSettingUpdatePayload {
	"""
	Updated userSetting
	"""
	userSetting: UserSetting!
}
"""
UserSettingUserStatus is enum for the field status
"""
enum UserSettingUserStatus @goModel(model: "github.com/theopenlane/core/pkg/enums.UserStatus") {
	ACTIVE
	INACTIVE
	DEACTIVATED
	SUSPENDED
	ONBOARDING
}
"""
UserSettingWhereInput is used for filtering UserSetting objects.
Input was generated by ent.
"""
input UserSettingWhereInput {
	not: UserSettingWhereInput
	and: [UserSettingWhereInput!]
	or: [UserSettingWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	user_id field predicates
	"""
	userID: ID
	userIDNEQ: ID
	userIDIn: [ID!]
	userIDNotIn: [ID!]
	userIDGT: ID
	userIDGTE: ID
	userIDLT: ID
	userIDLTE: ID
	userIDContains: ID
	userIDHasPrefix: ID
	userIDHasSuffix: ID
	userIDIsNil: Boolean
	userIDNotNil: Boolean
	userIDEqualFold: ID
	userIDContainsFold: ID
	"""
	locked field predicates
	"""
	locked: Boolean
	lockedNEQ: Boolean
	"""
	silenced_at field predicates
	"""
	silencedAt: Time
	silencedAtNEQ: Time
	silencedAtIn: [Time!]
	silencedAtNotIn: [Time!]
	silencedAtGT: Time
	silencedAtGTE: Time
	silencedAtLT: Time
	silencedAtLTE: Time
	silencedAtIsNil: Boolean
	silencedAtNotNil: Boolean
	"""
	suspended_at field predicates
	"""
	suspendedAt: Time
	suspendedAtNEQ: Time
	suspendedAtIn: [Time!]
	suspendedAtNotIn: [Time!]
	suspendedAtGT: Time
	suspendedAtGTE: Time
	suspendedAtLT: Time
	suspendedAtLTE: Time
	suspendedAtIsNil: Boolean
	suspendedAtNotNil: Boolean
	"""
	status field predicates
	"""
	status: UserSettingUserStatus
	statusNEQ: UserSettingUserStatus
	statusIn: [UserSettingUserStatus!]
	statusNotIn: [UserSettingUserStatus!]
	"""
	email_confirmed field predicates
	"""
	emailConfirmed: Boolean
	emailConfirmedNEQ: Boolean
	"""
	is_webauthn_allowed field predicates
	"""
	isWebauthnAllowed: Boolean
	isWebauthnAllowedNEQ: Boolean
	isWebauthnAllowedIsNil: Boolean
	isWebauthnAllowedNotNil: Boolean
	"""
	is_tfa_enabled field predicates
	"""
	isTfaEnabled: Boolean
	isTfaEnabledNEQ: Boolean
	isTfaEnabledIsNil: Boolean
	isTfaEnabledNotNil: Boolean
	"""
	user edge predicates
	"""
	hasUser: Boolean
	hasUserWith: [UserWhereInput!]
	"""
	default_org edge predicates
	"""
	hasDefaultOrg: Boolean
	hasDefaultOrgWith: [OrganizationWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
}
"""
Return response for updateUser mutation
"""
type UserUpdatePayload {
	"""
	Updated user
	"""
	user: User!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
	not: UserWhereInput
	and: [UserWhereInput!]
	or: [UserWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	display_id field predicates
	"""
	displayID: String
	displayIDNEQ: String
	displayIDIn: [String!]
	displayIDNotIn: [String!]
	displayIDGT: String
	displayIDGTE: String
	displayIDLT: String
	displayIDLTE: String
	displayIDContains: String
	displayIDHasPrefix: String
	displayIDHasSuffix: String
	displayIDEqualFold: String
	displayIDContainsFold: String
	"""
	email field predicates
	"""
	email: String
	emailNEQ: String
	emailIn: [String!]
	emailNotIn: [String!]
	emailGT: String
	emailGTE: String
	emailLT: String
	emailLTE: String
	emailContains: String
	emailHasPrefix: String
	emailHasSuffix: String
	emailEqualFold: String
	emailContainsFold: String
	"""
	first_name field predicates
	"""
	firstName: String
	firstNameNEQ: String
	firstNameIn: [String!]
	firstNameNotIn: [String!]
	firstNameGT: String
	firstNameGTE: String
	firstNameLT: String
	firstNameLTE: String
	firstNameContains: String
	firstNameHasPrefix: String
	firstNameHasSuffix: String
	firstNameIsNil: Boolean
	firstNameNotNil: Boolean
	firstNameEqualFold: String
	firstNameContainsFold: String
	"""
	last_name field predicates
	"""
	lastName: String
	lastNameNEQ: String
	lastNameIn: [String!]
	lastNameNotIn: [String!]
	lastNameGT: String
	lastNameGTE: String
	lastNameLT: String
	lastNameLTE: String
	lastNameContains: String
	lastNameHasPrefix: String
	lastNameHasSuffix: String
	lastNameIsNil: Boolean
	lastNameNotNil: Boolean
	lastNameEqualFold: String
	lastNameContainsFold: String
	"""
	display_name field predicates
	"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""
	avatar_remote_url field predicates
	"""
	avatarRemoteURL: String
	avatarRemoteURLNEQ: String
	avatarRemoteURLIn: [String!]
	avatarRemoteURLNotIn: [String!]
	avatarRemoteURLGT: String
	avatarRemoteURLGTE: String
	avatarRemoteURLLT: String
	avatarRemoteURLLTE: String
	avatarRemoteURLContains: String
	avatarRemoteURLHasPrefix: String
	avatarRemoteURLHasSuffix: String
	avatarRemoteURLIsNil: Boolean
	avatarRemoteURLNotNil: Boolean
	avatarRemoteURLEqualFold: String
	avatarRemoteURLContainsFold: String
	"""
	avatar_local_file_id field predicates
	"""
	avatarLocalFileID: ID
	avatarLocalFileIDNEQ: ID
	avatarLocalFileIDIn: [ID!]
	avatarLocalFileIDNotIn: [ID!]
	avatarLocalFileIDGT: ID
	avatarLocalFileIDGTE: ID
	avatarLocalFileIDLT: ID
	avatarLocalFileIDLTE: ID
	avatarLocalFileIDContains: ID
	avatarLocalFileIDHasPrefix: ID
	avatarLocalFileIDHasSuffix: ID
	avatarLocalFileIDIsNil: Boolean
	avatarLocalFileIDNotNil: Boolean
	avatarLocalFileIDEqualFold: ID
	avatarLocalFileIDContainsFold: ID
	"""
	avatar_updated_at field predicates
	"""
	avatarUpdatedAt: Time
	avatarUpdatedAtNEQ: Time
	avatarUpdatedAtIn: [Time!]
	avatarUpdatedAtNotIn: [Time!]
	avatarUpdatedAtGT: Time
	avatarUpdatedAtGTE: Time
	avatarUpdatedAtLT: Time
	avatarUpdatedAtLTE: Time
	avatarUpdatedAtIsNil: Boolean
	avatarUpdatedAtNotNil: Boolean
	"""
	last_seen field predicates
	"""
	lastSeen: Time
	lastSeenNEQ: Time
	lastSeenIn: [Time!]
	lastSeenNotIn: [Time!]
	lastSeenGT: Time
	lastSeenGTE: Time
	lastSeenLT: Time
	lastSeenLTE: Time
	lastSeenIsNil: Boolean
	lastSeenNotNil: Boolean
	"""
	sub field predicates
	"""
	sub: String
	subNEQ: String
	subIn: [String!]
	subNotIn: [String!]
	subGT: String
	subGTE: String
	subLT: String
	subLTE: String
	subContains: String
	subHasPrefix: String
	subHasSuffix: String
	subIsNil: Boolean
	subNotNil: Boolean
	subEqualFold: String
	subContainsFold: String
	"""
	auth_provider field predicates
	"""
	authProvider: UserAuthProvider
	authProviderNEQ: UserAuthProvider
	authProviderIn: [UserAuthProvider!]
	authProviderNotIn: [UserAuthProvider!]
	"""
	role field predicates
	"""
	role: UserRole
	roleNEQ: UserRole
	roleIn: [UserRole!]
	roleNotIn: [UserRole!]
	roleIsNil: Boolean
	roleNotNil: Boolean
	"""
	personal_access_tokens edge predicates
	"""
	hasPersonalAccessTokens: Boolean
	hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
	"""
	tfa_settings edge predicates
	"""
	hasTfaSettings: Boolean
	hasTfaSettingsWith: [TFASettingWhereInput!]
	"""
	setting edge predicates
	"""
	hasSetting: Boolean
	hasSettingWith: [UserSettingWhereInput!]
	"""
	groups edge predicates
	"""
	hasGroups: Boolean
	hasGroupsWith: [GroupWhereInput!]
	"""
	organizations edge predicates
	"""
	hasOrganizations: Boolean
	hasOrganizationsWith: [OrganizationWhereInput!]
	"""
	files edge predicates
	"""
	hasFiles: Boolean
	hasFilesWith: [FileWhereInput!]
	"""
	avatar_file edge predicates
	"""
	hasAvatarFile: Boolean
	hasAvatarFileWith: [FileWhereInput!]
	"""
	events edge predicates
	"""
	hasEvents: Boolean
	hasEventsWith: [EventWhereInput!]
	"""
	action_plans edge predicates
	"""
	hasActionPlans: Boolean
	hasActionPlansWith: [ActionPlanWhereInput!]
	"""
	subcontrols edge predicates
	"""
	hasSubcontrols: Boolean
	hasSubcontrolsWith: [SubcontrolWhereInput!]
	"""
	assigner_tasks edge predicates
	"""
	hasAssignerTasks: Boolean
	hasAssignerTasksWith: [TaskWhereInput!]
	"""
	assignee_tasks edge predicates
	"""
	hasAssigneeTasks: Boolean
	hasAssigneeTasksWith: [TaskWhereInput!]
	"""
	programs edge predicates
	"""
	hasPrograms: Boolean
	hasProgramsWith: [ProgramWhereInput!]
	"""
	group_memberships edge predicates
	"""
	hasGroupMemberships: Boolean
	hasGroupMembershipsWith: [GroupMembershipWhereInput!]
	"""
	org_memberships edge predicates
	"""
	hasOrgMemberships: Boolean
	hasOrgMembershipsWith: [OrgMembershipWhereInput!]
	"""
	program_memberships edge predicates
	"""
	hasProgramMemberships: Boolean
	hasProgramMembershipsWith: [ProgramMembershipWhereInput!]
}
