package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
	"github.com/theopenlane/iam/auth"
	"github.com/theopenlane/utils/rout"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input generated.CreateUserInput, avatarFile *graphql.Upload) (*model.UserCreatePayload, error) {
	// TODO: look at allowing this resolver to invite the user instead of creating them directly
	// for now, return permission denied
	return nil, rout.ErrPermissionDenied
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input generated.UpdateUserInput, avatarFile *graphql.Upload) (*model.UserUpdatePayload, error) {
	// grab preloads and set max result limits
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	res, err := withTransactionalMutation(ctx).User.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "user"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "user"})
	}

	return &model.UserUpdatePayload{
		User: res,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.UserDeletePayload, error) {
	if err := withTransactionalMutation(ctx).User.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "user"})
	}

	if err := generated.UserEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.UserDeletePayload{
		DeletedID: id,
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*generated.User, error) {
	// determine all fields that were requested
	preloads := graphutils.GetPreloads(ctx, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).User.Query().Where(user.ID(id)).CollectFields(ctx, preloads...)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "user"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "user"})
	}

	return res, nil
}

// Self is the resolver for the self field.
func (r *queryResolver) Self(ctx context.Context) (*generated.User, error) {
	userID, err := auth.GetSubjectIDFromContext(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "user"})
	}

	// determine all fields that were requested
	preloads := graphutils.GetPreloads(ctx, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).User.Query().Where(user.ID(userID)).CollectFields(ctx, preloads...)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "user"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "user"})
	}

	return res, nil
}
