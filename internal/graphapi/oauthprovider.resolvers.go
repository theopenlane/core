package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/utils/rout"
)

// CreateOauthProvider is the resolver for the createOauthProvider field.
func (r *mutationResolver) CreateOauthProvider(ctx context.Context, input generated.CreateOauthProviderInput) (*OauthProviderCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")
		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).OauthProvider.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "oauthprovider"})
	}

	return &OauthProviderCreatePayload{
		OauthProvider: res,
	}, nil
}

// CreateBulkOauthProvider is the resolver for the createBulkOauthProvider field.
func (r *mutationResolver) CreateBulkOauthProvider(ctx context.Context, input []*generated.CreateOauthProviderInput) (*OauthProviderBulkCreatePayload, error) {
	return r.bulkCreateOauthProvider(ctx, input)
}

// CreateBulkCSVOauthProvider is the resolver for the createBulkCSVOauthProvider field.
func (r *mutationResolver) CreateBulkCSVOauthProvider(ctx context.Context, input graphql.Upload) (*OauthProviderBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateOauthProviderInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateOauthProvider(ctx, data)
}

// UpdateOauthProvider is the resolver for the updateOauthProvider field.
func (r *mutationResolver) UpdateOauthProvider(ctx context.Context, id string, input generated.UpdateOauthProviderInput) (*OauthProviderUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).OauthProvider.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "oauthprovider"})
	}
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")
		return nil, ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "oauthprovider"})
	}

	return &OauthProviderUpdatePayload{
		OauthProvider: res,
	}, nil
}

// DeleteOauthProvider is the resolver for the deleteOauthProvider field.
func (r *mutationResolver) DeleteOauthProvider(ctx context.Context, id string) (*OauthProviderDeletePayload, error) {
	if err := withTransactionalMutation(ctx).OauthProvider.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "oauthprovider"})
	}

	if err := generated.OauthProviderEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &OauthProviderDeletePayload{
		DeletedID: id,
	}, nil
}

// OauthProvider is the resolver for the oauthProvider field.
func (r *queryResolver) OauthProvider(ctx context.Context, id string) (*generated.OauthProvider, error) {
	res, err := withTransactionalMutation(ctx).OauthProvider.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "oauthprovider"})
	}

	return res, nil
}
