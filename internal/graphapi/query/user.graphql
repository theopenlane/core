mutation CreateUser($input: CreateUserInput!, $avatarFile: Upload) {
  createUser(input: $input, avatarFile: $avatarFile) {
    user {
      authProvider
      avatarRemoteURL
      avatarLocalFileID
      avatarFile {
        presignedURL
      }
      displayID
      displayName
      email
      firstName
      id
      lastName
      sub
      tags
      orgMemberships {
        edges {
          node {
            id
            organizationID
          }
        }
      }
      groupMemberships {
        edges {
          node {
            id
            groupID
          }
        }
      }
      setting {
        defaultOrg {
          id
          name
          personalOrg
        }
        createdAt
        createdBy
        emailConfirmed
        locked
        silencedAt
        status
        suspendedAt
        tags
        updatedAt
        updatedBy
      }
    }
  }
}

mutation DeleteUser($deleteUserId: ID!) {
  deleteUser(id: $deleteUserId) {
    deletedID
  }
}

query GetAllUsers {
  users {
    edges {
      node {
        authProvider
        avatarRemoteURL
        avatarLocalFileID
        avatarFile {
          presignedURL
        }
        displayID
        displayName
        email
        firstName
        id
        lastName
        lastSeen
        sub
        tags
        createdAt
        createdBy
        updatedAt
        updatedBy
      }
    }
  }
}

query GetSelf {
  self {
    authProvider
    avatarRemoteURL
    avatarLocalFileID
    avatarFile {
      presignedURL
    }
    displayID
    displayName
    email
    firstName
    id
    lastName
    lastSeen
    sub
    tags
    setting {
      defaultOrg {
        id
        name
        personalOrg
      }
      createdAt
      createdBy
      emailConfirmed
      locked
      silencedAt
      status
      suspendedAt
      tags
      updatedAt
      updatedBy
    }
    tfaSettings {
      edges {
        node {
          totpAllowed
          verified
        }
      }
    }
    createdAt
    createdBy
    updatedAt
    updatedBy
  }
}

query GetUserByID($userId: ID!) {
  user(id: $userId) {
    authProvider
    avatarRemoteURL
    avatarLocalFileID
    avatarFile {
      presignedURL
    }
    displayID
    displayName
    email
    firstName
    id
    lastName
    lastSeen
    sub
    tags
    setting {
      defaultOrg {
        id
        name
        personalOrg
      }
      createdAt
      createdBy
      emailConfirmed
      locked
      silencedAt
      status
      suspendedAt
      tags
      updatedAt
      updatedBy
    }
    organizations {
      edges {
        node {
          id
          name
          personalOrg
          members {
            id
            role
          }
        }
      }
    }
    updatedAt
    updatedBy
    createdAt
    createdBy
  }
}

query GetUserByIDWithOrgs($userId: ID!) {
  user(id: $userId) {
    authProvider
    avatarRemoteURL
    avatarLocalFileID
    avatarFile {
      presignedURL
    }
    displayID
    displayName
    email
    firstName
    id
    lastName
    lastSeen
    sub
    tags
    setting {
      defaultOrg {
        id
        name
        personalOrg
      }
      createdAt
      createdBy
      emailConfirmed
      locked
      silencedAt
      status
      suspendedAt
      tags
      updatedAt
      updatedBy
    }
    orgMemberships {
      edges {
        node {
          id
          role
          id
          role
          user {
            firstName
            lastName
          }
        }
      }
    }
    createdAt
    createdBy
    updatedAt
    updatedBy
  }
}

mutation UpdateUser($updateUserId: ID!, $input: UpdateUserInput!, $avatarFile: Upload) {
  updateUser(id: $updateUserId, input: $input, avatarFile: $avatarFile) {
    user {
      authProvider
      avatarRemoteURL
      avatarLocalFileID
      avatarFile {
        presignedURL
      }
      displayID
      displayName
      email
      firstName
      id
      lastName
      sub
      tags
      groupMemberships {
        edges {
          node {
            id
            groupID
          }
        }
      }
      orgMemberships {
        edges {
          node {
            id
            organizationID
          }
        }
      }
      setting {
        defaultOrg {
          id
          name
          personalOrg
        }
        createdAt
        createdBy
        emailConfirmed
        locked
        silencedAt
        status
        suspendedAt
        tags
        updatedAt
        updatedBy
      }
    }
  }
}
