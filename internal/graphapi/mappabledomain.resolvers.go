package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateMappableDomain is the resolver for the createMappableDomain field.
func (r *mutationResolver) CreateMappableDomain(ctx context.Context, input generated.CreateMappableDomainInput) (*model.MappableDomainCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).MappableDomain.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "mappabledomain"})
	}

	return &model.MappableDomainCreatePayload{
		MappableDomain: res,
	}, nil
}

// CreateBulkMappableDomain is the resolver for the createBulkMappableDomain field.
func (r *mutationResolver) CreateBulkMappableDomain(ctx context.Context, input []*generated.CreateMappableDomainInput) (*model.MappableDomainBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateMappableDomain(ctx, input)
}

// CreateBulkCSVMappableDomain is the resolver for the createBulkCSVMappableDomain field.
func (r *mutationResolver) CreateBulkCSVMappableDomain(ctx context.Context, input graphql.Upload) (*model.MappableDomainBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateMappableDomainInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateMappableDomain(ctx, data)
}

// UpdateMappableDomain is the resolver for the updateMappableDomain field.
func (r *mutationResolver) UpdateMappableDomain(ctx context.Context, id string, input generated.UpdateMappableDomainInput) (*model.MappableDomainUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).MappableDomain.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "mappabledomain"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "mappabledomain"})
	}

	return &model.MappableDomainUpdatePayload{
		MappableDomain: res,
	}, nil
}

// DeleteMappableDomain is the resolver for the deleteMappableDomain field.
func (r *mutationResolver) DeleteMappableDomain(ctx context.Context, id string) (*model.MappableDomainDeletePayload, error) {
	if err := withTransactionalMutation(ctx).MappableDomain.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "mappabledomain"})
	}

	if err := generated.MappableDomainEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.MappableDomainDeletePayload{
		DeletedID: id,
	}, nil
}

// MappableDomain is the resolver for the mappableDomain field.
func (r *queryResolver) MappableDomain(ctx context.Context, id string) (*generated.MappableDomain, error) {
	query, err := withTransactionalMutation(ctx).MappableDomain.Query().Where(mappabledomain.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "mappabledomain"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "mappabledomain"})
	}

	return res, nil
}
