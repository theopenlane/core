package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"slices"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateControlsByClone is the resolver for the createControlsByClone field.
func (r *mutationResolver) CreateControlsByClone(ctx context.Context, input *model.CloneControlInput) (*model.ControlBulkCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	// if a standard is provided, clone those controls
	if input.StandardID != nil {
		res, err := r.cloneControlsFromStandard(ctx, *input.StandardID, input.ProgramID)
		if err != nil {
			return nil, parseRequestError(generated.ErrPermissionDenied, action{action: ActionCreate, object: "control"})
		}

		return &model.ControlBulkCreatePayload{
			Controls: res,
		}, nil
	}

	// otherwise get existing controls and clone
	// TODO(sfunk): this is an expensive operation, we should limit the number of controls that can be cloned at once
	// or check the permissions and then bypass the permission checks when querying for subcontrols
	existingControls, err := withTransactionalMutation(ctx).Control.Query().
		Where(control.IDIn(input.ControlIDs...)).
		WithSubcontrols().
		WithStandard().
		All(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "control"})
	}

	if len(existingControls) == 0 {
		return nil, parseRequestError(generated.ErrPermissionDenied, action{action: ActionCreate, object: "control"})
	}

	createdControls, err := r.cloneControls(ctx, existingControls, input.ProgramID)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "control"})
	}

	return &model.ControlBulkCreatePayload{
		Controls: createdControls,
	}, nil
}

// ControlCategories is the resolver for the controlCategories field.
func (r *queryResolver) ControlCategories(ctx context.Context) ([]string, error) {
	categories, err := withTransactionalMutation(ctx).Control.Query().Select(control.FieldCategory).
		Where(control.CategoryNEQ("")).
		Unique(true).
		GroupBy(control.FieldCategory).
		Strings(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "categories"})
	}

	subcontrolCategories, err := withTransactionalMutation(ctx).Subcontrol.Query().Select(control.FieldCategory).
		Where(subcontrol.CategoryNEQ("")).
		Unique(true).
		GroupBy(control.FieldCategory).
		Strings(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "categories"})
	}

	for _, subcontrolCategory := range subcontrolCategories {
		// check if the subcontrol category already exists in the main categories
		if !slices.Contains(categories, subcontrolCategory) {
			// if not, append it to the main categories
			categories = append(categories, subcontrolCategory)
		}
	}

	// sort the categories to ensure consistent order
	slices.Sort(categories)

	if categories == nil {
		// if no subcategories are found, return an empty slice
		categories = []string{}
	}

	return categories, nil
}

// ControlSubcategories is the resolver for the controlSubcategories field.
func (r *queryResolver) ControlSubcategories(ctx context.Context) ([]string, error) {
	subcategories, err := withTransactionalMutation(ctx).Control.Query().Select(control.FieldSubcategory).
		Where(control.SubcategoryNEQ("")).
		Unique(true).
		GroupBy(control.FieldSubcategory).
		Strings(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcategories"})
	}

	subcontrolCategories, err := withTransactionalMutation(ctx).Subcontrol.Query().Select(control.FieldSubcategory).
		Where(subcontrol.SubcategoryNEQ("")).
		Unique(true).
		GroupBy(control.FieldSubcategory).
		Strings(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcategories"})
	}

	// append the subcontrol categories to the main categories
	for _, subcontrolCategory := range subcontrolCategories {
		// check if the subcontrol category already exists in the main subcategories
		if !slices.Contains(subcategories, subcontrolCategory) {
			// if not, append it to the main subcategories
			subcategories = append(subcategories, subcontrolCategory)
		}
	}

	// sort the subcategories to ensure consistent order
	slices.Sort(subcategories)

	if subcategories == nil {
		// if no subcategories are found, return an empty slice
		subcategories = []string{}
	}

	return subcategories, nil
}
