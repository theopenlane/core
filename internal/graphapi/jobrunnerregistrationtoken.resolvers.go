package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateJobRunnerRegistrationToken is the resolver for the createJobRunnerRegistrationToken field.
func (r *mutationResolver) CreateJobRunnerRegistrationToken(ctx context.Context, input generated.CreateJobRunnerRegistrationTokenInput) (*model.JobRunnerRegistrationTokenCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).JobRunnerRegistrationToken.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "jobrunnerregistrationtoken"})
	}

	return &model.JobRunnerRegistrationTokenCreatePayload{
		JobRunnerRegistrationToken: res,
	}, nil
}

// DeleteJobRunnerRegistrationToken is the resolver for the deleteJobRunnerRegistrationToken field.
func (r *mutationResolver) DeleteJobRunnerRegistrationToken(ctx context.Context, id string) (*model.JobRunnerRegistrationTokenDeletePayload, error) {
	if err := withTransactionalMutation(ctx).JobRunnerRegistrationToken.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "jobrunnerregistrationtoken"})
	}

	if err := generated.JobRunnerRegistrationTokenEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.JobRunnerRegistrationTokenDeletePayload{
		DeletedID: id,
	}, nil
}

// JobRunnerRegistrationToken is the resolver for the jobRunnerRegistrationToken field.
func (r *queryResolver) JobRunnerRegistrationToken(ctx context.Context, id string) (*generated.JobRunnerRegistrationToken, error) {
	query, err := withTransactionalMutation(ctx).JobRunnerRegistrationToken.Query().Where(jobrunnerregistrationtoken.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "jobrunnerregistrationtoken"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "jobrunnerregistrationtoken"})
	}

	return res, nil
}
