package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/utils/rout"
)

// CreateNarrative is the resolver for the createNarrative field.
func (r *mutationResolver) CreateNarrative(ctx context.Context, input generated.CreateNarrativeInput) (*NarrativeCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("organization_id")
	}

	res, err := withTransactionalMutation(ctx).Narrative.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "narrative"})
	}

	return &NarrativeCreatePayload{
		Narrative: res,
	}, nil
}

// CreateBulkNarrative is the resolver for the createBulkNarrative field.
func (r *mutationResolver) CreateBulkNarrative(ctx context.Context, input []*generated.CreateNarrativeInput) (*NarrativeBulkCreatePayload, error) {
	return r.bulkCreateNarrative(ctx, input)
}

// CreateBulkCSVNarrative is the resolver for the createBulkCSVNarrative field.
func (r *mutationResolver) CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload) (*NarrativeBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateNarrativeInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateNarrative(ctx, data)
}

// UpdateNarrative is the resolver for the updateNarrative field.
func (r *mutationResolver) UpdateNarrative(ctx context.Context, id string, input generated.UpdateNarrativeInput) (*NarrativeUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Narrative.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "narrative"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "narrative"})
	}

	return &NarrativeUpdatePayload{
		Narrative: res,
	}, nil
}

// DeleteNarrative is the resolver for the deleteNarrative field.
func (r *mutationResolver) DeleteNarrative(ctx context.Context, id string) (*NarrativeDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Narrative.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "narrative"})
	}

	if err := generated.NarrativeEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &NarrativeDeletePayload{
		DeletedID: id,
	}, nil
}

// Narrative is the resolver for the narrative field.
func (r *queryResolver) Narrative(ctx context.Context, id string) (*generated.Narrative, error) {
	res, err := withTransactionalMutation(ctx).Narrative.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "narrative"})
	}

	return res, nil
}
