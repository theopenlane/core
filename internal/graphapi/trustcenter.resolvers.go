package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenter is the resolver for the createTrustCenter field.
func (r *mutationResolver) CreateTrustCenter(ctx context.Context, input generated.CreateTrustCenterInput) (*model.TrustCenterCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).TrustCenter.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcenter"})
	}

	return &model.TrustCenterCreatePayload{
		TrustCenter: res,
	}, nil
}

// UpdateTrustCenter is the resolver for the updateTrustCenter field.
func (r *mutationResolver) UpdateTrustCenter(ctx context.Context, id string, input generated.UpdateTrustCenterInput) (*model.TrustCenterUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenter.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcenter"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcenter"})
	}

	return &model.TrustCenterUpdatePayload{
		TrustCenter: res,
	}, nil
}

// DeleteTrustCenter is the resolver for the deleteTrustCenter field.
func (r *mutationResolver) DeleteTrustCenter(ctx context.Context, id string) (*model.TrustCenterDeletePayload, error) {
	if err := withTransactionalMutation(ctx).TrustCenter.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "trustcenter"})
	}

	if err := generated.TrustCenterEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.TrustCenterDeletePayload{
		DeletedID: id,
	}, nil
}

// TrustCenter is the resolver for the trustCenter field.
func (r *queryResolver) TrustCenter(ctx context.Context, id string) (*generated.TrustCenter, error) {
	query, err := withTransactionalMutation(ctx).TrustCenter.Query().Where(trustcenter.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcenter"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcenter"})
	}

	return res, nil
}
