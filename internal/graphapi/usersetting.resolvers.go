package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateUserSetting is the resolver for the createUserSetting field.
func (r *mutationResolver) CreateUserSetting(ctx context.Context, input generated.CreateUserSettingInput) (*model.UserSettingCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).UserSetting.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "usersetting"})
	}

	return &model.UserSettingCreatePayload{
		UserSetting: res,
	}, nil
}

// CreateBulkUserSetting is the resolver for the createBulkUserSetting field.
func (r *mutationResolver) CreateBulkUserSetting(ctx context.Context, input []*generated.CreateUserSettingInput) (*model.UserSettingBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateUserSetting(ctx, input)
}

// CreateBulkCSVUserSetting is the resolver for the createBulkCSVUserSetting field.
func (r *mutationResolver) CreateBulkCSVUserSetting(ctx context.Context, input graphql.Upload) (*model.UserSettingBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateUserSettingInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateUserSetting(ctx, data)
}

// UpdateUserSetting is the resolver for the updateUserSetting field.
func (r *mutationResolver) UpdateUserSetting(ctx context.Context, id string, input generated.UpdateUserSettingInput) (*model.UserSettingUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).UserSetting.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "usersetting"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "usersetting"})
	}

	return &model.UserSettingUpdatePayload{
		UserSetting: res,
	}, nil
}

// UserSetting is the resolver for the userSetting field.
func (r *queryResolver) UserSetting(ctx context.Context, id string) (*generated.UserSetting, error) {
	query, err := withTransactionalMutation(ctx).UserSetting.Query().Where(usersetting.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "usersetting"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "usersetting"})
	}

	return res, nil
}
