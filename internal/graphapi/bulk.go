package graphapi

// THIS CODE IS REGENERATED BY github.com/theopenlane/core/pkg/gqlplugin. DO NOT EDIT.

import (
	"context"

	"github.com/theopenlane/core/internal/ent/generated"
)

// bulkCreateActionPlan uses the CreateBulk function to create multiple ActionPlan entities
func (r *mutationResolver) bulkCreateActionPlan(ctx context.Context, input []*generated.CreateActionPlanInput) (*ActionPlanBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ActionPlanCreate, len(input))
	for i, data := range input {
		builders[i] = c.ActionPlan.Create().SetInput(*data)
	}

	res, err := c.ActionPlan.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "actionplan"})
	}

	// return response
	return &ActionPlanBulkCreatePayload{
		ActionPlans: res,
	}, nil
}

// bulkCreateAPIToken uses the CreateBulk function to create multiple APIToken entities
func (r *mutationResolver) bulkCreateAPIToken(ctx context.Context, input []*generated.CreateAPITokenInput) (*APITokenBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.APITokenCreate, len(input))
	for i, data := range input {
		builders[i] = c.APIToken.Create().SetInput(*data)
	}

	res, err := c.APIToken.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "apitoken"})
	}

	// return response
	return &APITokenBulkCreatePayload{
		APITokens: res,
	}, nil
}

// bulkCreateContact uses the CreateBulk function to create multiple Contact entities
func (r *mutationResolver) bulkCreateContact(ctx context.Context, input []*generated.CreateContactInput) (*ContactBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ContactCreate, len(input))
	for i, data := range input {
		builders[i] = c.Contact.Create().SetInput(*data)
	}

	res, err := c.Contact.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "contact"})
	}

	// return response
	return &ContactBulkCreatePayload{
		Contacts: res,
	}, nil
}

// bulkCreateControl uses the CreateBulk function to create multiple Control entities
func (r *mutationResolver) bulkCreateControl(ctx context.Context, input []*generated.CreateControlInput) (*ControlBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ControlCreate, len(input))
	for i, data := range input {
		builders[i] = c.Control.Create().SetInput(*data)
	}

	res, err := c.Control.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "control"})
	}

	// return response
	return &ControlBulkCreatePayload{
		Controls: res,
	}, nil
}

// bulkCreateControlObjective uses the CreateBulk function to create multiple ControlObjective entities
func (r *mutationResolver) bulkCreateControlObjective(ctx context.Context, input []*generated.CreateControlObjectiveInput) (*ControlObjectiveBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ControlObjectiveCreate, len(input))
	for i, data := range input {
		builders[i] = c.ControlObjective.Create().SetInput(*data)
	}

	res, err := c.ControlObjective.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "controlobjective"})
	}

	// return response
	return &ControlObjectiveBulkCreatePayload{
		ControlObjectives: res,
	}, nil
}

// bulkCreateDocumentData uses the CreateBulk function to create multiple DocumentData entities
func (r *mutationResolver) bulkCreateDocumentData(ctx context.Context, input []*generated.CreateDocumentDataInput) (*DocumentDataBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.DocumentDataCreate, len(input))
	for i, data := range input {
		builders[i] = c.DocumentData.Create().SetInput(*data)
	}

	res, err := c.DocumentData.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "documentdata"})
	}

	// return response
	return &DocumentDataBulkCreatePayload{
		DocumentData: res,
	}, nil
}

// bulkCreateEntitlement uses the CreateBulk function to create multiple Entitlement entities
func (r *mutationResolver) bulkCreateEntitlement(ctx context.Context, input []*generated.CreateEntitlementInput) (*EntitlementBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EntitlementCreate, len(input))
	for i, data := range input {
		builders[i] = c.Entitlement.Create().SetInput(*data)
	}

	res, err := c.Entitlement.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entitlement"})
	}

	// return response
	return &EntitlementBulkCreatePayload{
		Entitlements: res,
	}, nil
}

// bulkCreateEntitlementPlan uses the CreateBulk function to create multiple EntitlementPlan entities
func (r *mutationResolver) bulkCreateEntitlementPlan(ctx context.Context, input []*generated.CreateEntitlementPlanInput) (*EntitlementPlanBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EntitlementPlanCreate, len(input))
	for i, data := range input {
		builders[i] = c.EntitlementPlan.Create().SetInput(*data)
	}

	res, err := c.EntitlementPlan.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entitlementplan"})
	}

	// return response
	return &EntitlementPlanBulkCreatePayload{
		EntitlementPlans: res,
	}, nil
}

// bulkCreateEntitlementPlanFeature uses the CreateBulk function to create multiple EntitlementPlanFeature entities
func (r *mutationResolver) bulkCreateEntitlementPlanFeature(ctx context.Context, input []*generated.CreateEntitlementPlanFeatureInput) (*EntitlementPlanFeatureBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EntitlementPlanFeatureCreate, len(input))
	for i, data := range input {
		builders[i] = c.EntitlementPlanFeature.Create().SetInput(*data)
	}

	res, err := c.EntitlementPlanFeature.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entitlementplanfeature"})
	}

	// return response
	return &EntitlementPlanFeatureBulkCreatePayload{
		EntitlementPlanFeatures: res,
	}, nil
}

// bulkCreateEntity uses the CreateBulk function to create multiple Entity entities
func (r *mutationResolver) bulkCreateEntity(ctx context.Context, input []*generated.CreateEntityInput) (*EntityBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EntityCreate, len(input))
	for i, data := range input {
		builders[i] = c.Entity.Create().SetInput(*data)
	}

	res, err := c.Entity.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entity"})
	}

	// return response
	return &EntityBulkCreatePayload{
		Entities: res,
	}, nil
}

// bulkCreateEntityType uses the CreateBulk function to create multiple EntityType entities
func (r *mutationResolver) bulkCreateEntityType(ctx context.Context, input []*generated.CreateEntityTypeInput) (*EntityTypeBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EntityTypeCreate, len(input))
	for i, data := range input {
		builders[i] = c.EntityType.Create().SetInput(*data)
	}

	res, err := c.EntityType.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entitytype"})
	}

	// return response
	return &EntityTypeBulkCreatePayload{
		EntityTypes: res,
	}, nil
}

// bulkCreateEvent uses the CreateBulk function to create multiple Event entities
func (r *mutationResolver) bulkCreateEvent(ctx context.Context, input []*generated.CreateEventInput) (*EventBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EventCreate, len(input))
	for i, data := range input {
		builders[i] = c.Event.Create().SetInput(*data)
	}

	res, err := c.Event.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "event"})
	}

	// return response
	return &EventBulkCreatePayload{
		Events: res,
	}, nil
}

// bulkCreateFeature uses the CreateBulk function to create multiple Feature entities
func (r *mutationResolver) bulkCreateFeature(ctx context.Context, input []*generated.CreateFeatureInput) (*FeatureBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.FeatureCreate, len(input))
	for i, data := range input {
		builders[i] = c.Feature.Create().SetInput(*data)
	}

	res, err := c.Feature.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "feature"})
	}

	// return response
	return &FeatureBulkCreatePayload{
		Features: res,
	}, nil
}

// bulkCreateGroup uses the CreateBulk function to create multiple Group entities
func (r *mutationResolver) bulkCreateGroup(ctx context.Context, input []*generated.CreateGroupInput) (*GroupBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupCreate, len(input))
	for i, data := range input {
		builders[i] = c.Group.Create().SetInput(*data)
	}

	res, err := c.Group.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	// return response
	return &GroupBulkCreatePayload{
		Groups: res,
	}, nil
}

// bulkCreateGroupMembership uses the CreateBulk function to create multiple GroupMembership entities
func (r *mutationResolver) bulkCreateGroupMembership(ctx context.Context, input []*generated.CreateGroupMembershipInput) (*GroupMembershipBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupMembershipCreate, len(input))
	for i, data := range input {
		builders[i] = c.GroupMembership.Create().SetInput(*data)
	}

	res, err := c.GroupMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "groupmembership"})
	}

	// return response
	return &GroupMembershipBulkCreatePayload{
		GroupMemberships: res,
	}, nil
}

// bulkCreateGroupSetting uses the CreateBulk function to create multiple GroupSetting entities
func (r *mutationResolver) bulkCreateGroupSetting(ctx context.Context, input []*generated.CreateGroupSettingInput) (*GroupSettingBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupSettingCreate, len(input))
	for i, data := range input {
		builders[i] = c.GroupSetting.Create().SetInput(*data)
	}

	res, err := c.GroupSetting.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "groupsetting"})
	}

	// return response
	return &GroupSettingBulkCreatePayload{
		GroupSettings: res,
	}, nil
}

// bulkCreateHush uses the CreateBulk function to create multiple Hush entities
func (r *mutationResolver) bulkCreateHush(ctx context.Context, input []*generated.CreateHushInput) (*HushBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.HushCreate, len(input))
	for i, data := range input {
		builders[i] = c.Hush.Create().SetInput(*data)
	}

	res, err := c.Hush.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "hush"})
	}

	// return response
	return &HushBulkCreatePayload{
		Hushes: res,
	}, nil
}

// bulkCreateIntegration uses the CreateBulk function to create multiple Integration entities
func (r *mutationResolver) bulkCreateIntegration(ctx context.Context, input []*generated.CreateIntegrationInput) (*IntegrationBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.IntegrationCreate, len(input))
	for i, data := range input {
		builders[i] = c.Integration.Create().SetInput(*data)
	}

	res, err := c.Integration.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "integration"})
	}

	// return response
	return &IntegrationBulkCreatePayload{
		Integrations: res,
	}, nil
}

// bulkCreateInternalPolicy uses the CreateBulk function to create multiple InternalPolicy entities
func (r *mutationResolver) bulkCreateInternalPolicy(ctx context.Context, input []*generated.CreateInternalPolicyInput) (*InternalPolicyBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.InternalPolicyCreate, len(input))
	for i, data := range input {
		builders[i] = c.InternalPolicy.Create().SetInput(*data)
	}

	res, err := c.InternalPolicy.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "internalpolicy"})
	}

	// return response
	return &InternalPolicyBulkCreatePayload{
		InternalPolicies: res,
	}, nil
}

// bulkCreateInvite uses the CreateBulk function to create multiple Invite entities
func (r *mutationResolver) bulkCreateInvite(ctx context.Context, input []*generated.CreateInviteInput) (*InviteBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.InviteCreate, len(input))
	for i, data := range input {
		builders[i] = c.Invite.Create().SetInput(*data)
	}

	res, err := c.Invite.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "invite"})
	}

	// return response
	return &InviteBulkCreatePayload{
		Invites: res,
	}, nil
}

// bulkCreateNarrative uses the CreateBulk function to create multiple Narrative entities
func (r *mutationResolver) bulkCreateNarrative(ctx context.Context, input []*generated.CreateNarrativeInput) (*NarrativeBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.NarrativeCreate, len(input))
	for i, data := range input {
		builders[i] = c.Narrative.Create().SetInput(*data)
	}

	res, err := c.Narrative.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "narrative"})
	}

	// return response
	return &NarrativeBulkCreatePayload{
		Narratives: res,
	}, nil
}

// bulkCreateOauthProvider uses the CreateBulk function to create multiple OauthProvider entities
func (r *mutationResolver) bulkCreateOauthProvider(ctx context.Context, input []*generated.CreateOauthProviderInput) (*OauthProviderBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OauthProviderCreate, len(input))
	for i, data := range input {
		builders[i] = c.OauthProvider.Create().SetInput(*data)
	}

	res, err := c.OauthProvider.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "oauthprovider"})
	}

	// return response
	return &OauthProviderBulkCreatePayload{
		OauthProviders: res,
	}, nil
}

// bulkCreateOhAuthTooToken uses the CreateBulk function to create multiple OhAuthTooToken entities
func (r *mutationResolver) bulkCreateOhAuthTooToken(ctx context.Context, input []*generated.CreateOhAuthTooTokenInput) (*OhAuthTooTokenBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OhAuthTooTokenCreate, len(input))
	for i, data := range input {
		builders[i] = c.OhAuthTooToken.Create().SetInput(*data)
	}

	res, err := c.OhAuthTooToken.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "ohauthtootoken"})
	}

	// return response
	return &OhAuthTooTokenBulkCreatePayload{
		OhAuthTooTokens: res,
	}, nil
}

// bulkCreateOrganization uses the CreateBulk function to create multiple Organization entities
func (r *mutationResolver) bulkCreateOrganization(ctx context.Context, input []*generated.CreateOrganizationInput) (*OrganizationBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OrganizationCreate, len(input))
	for i, data := range input {
		builders[i] = c.Organization.Create().SetInput(*data)
	}

	res, err := c.Organization.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "organization"})
	}

	// return response
	return &OrganizationBulkCreatePayload{
		Organizations: res,
	}, nil
}

// bulkCreateOrganizationSetting uses the CreateBulk function to create multiple OrganizationSetting entities
func (r *mutationResolver) bulkCreateOrganizationSetting(ctx context.Context, input []*generated.CreateOrganizationSettingInput) (*OrganizationSettingBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OrganizationSettingCreate, len(input))
	for i, data := range input {
		builders[i] = c.OrganizationSetting.Create().SetInput(*data)
	}

	res, err := c.OrganizationSetting.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "organizationsetting"})
	}

	// return response
	return &OrganizationSettingBulkCreatePayload{
		OrganizationSettings: res,
	}, nil
}

// bulkCreateOrgMembership uses the CreateBulk function to create multiple OrgMembership entities
func (r *mutationResolver) bulkCreateOrgMembership(ctx context.Context, input []*generated.CreateOrgMembershipInput) (*OrgMembershipBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OrgMembershipCreate, len(input))
	for i, data := range input {
		builders[i] = c.OrgMembership.Create().SetInput(*data)
	}

	res, err := c.OrgMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "orgmembership"})
	}

	// return response
	return &OrgMembershipBulkCreatePayload{
		OrgMemberships: res,
	}, nil
}

// bulkCreatePersonalAccessToken uses the CreateBulk function to create multiple PersonalAccessToken entities
func (r *mutationResolver) bulkCreatePersonalAccessToken(ctx context.Context, input []*generated.CreatePersonalAccessTokenInput) (*PersonalAccessTokenBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.PersonalAccessTokenCreate, len(input))
	for i, data := range input {
		builders[i] = c.PersonalAccessToken.Create().SetInput(*data)
	}

	res, err := c.PersonalAccessToken.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "personalaccesstoken"})
	}

	// return response
	return &PersonalAccessTokenBulkCreatePayload{
		PersonalAccessTokens: res,
	}, nil
}

// bulkCreateProcedure uses the CreateBulk function to create multiple Procedure entities
func (r *mutationResolver) bulkCreateProcedure(ctx context.Context, input []*generated.CreateProcedureInput) (*ProcedureBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ProcedureCreate, len(input))
	for i, data := range input {
		builders[i] = c.Procedure.Create().SetInput(*data)
	}

	res, err := c.Procedure.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "procedure"})
	}

	// return response
	return &ProcedureBulkCreatePayload{
		Procedures: res,
	}, nil
}

// bulkCreateProgram uses the CreateBulk function to create multiple Program entities
func (r *mutationResolver) bulkCreateProgram(ctx context.Context, input []*generated.CreateProgramInput) (*ProgramBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ProgramCreate, len(input))
	for i, data := range input {
		builders[i] = c.Program.Create().SetInput(*data)
	}

	res, err := c.Program.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "program"})
	}

	// return response
	return &ProgramBulkCreatePayload{
		Programs: res,
	}, nil
}

// bulkCreateProgramMembership uses the CreateBulk function to create multiple ProgramMembership entities
func (r *mutationResolver) bulkCreateProgramMembership(ctx context.Context, input []*generated.CreateProgramMembershipInput) (*ProgramMembershipBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ProgramMembershipCreate, len(input))
	for i, data := range input {
		builders[i] = c.ProgramMembership.Create().SetInput(*data)
	}

	res, err := c.ProgramMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "programmembership"})
	}

	// return response
	return &ProgramMembershipBulkCreatePayload{
		ProgramMemberships: res,
	}, nil
}

// bulkCreateRisk uses the CreateBulk function to create multiple Risk entities
func (r *mutationResolver) bulkCreateRisk(ctx context.Context, input []*generated.CreateRiskInput) (*RiskBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.RiskCreate, len(input))
	for i, data := range input {
		builders[i] = c.Risk.Create().SetInput(*data)
	}

	res, err := c.Risk.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "risk"})
	}

	// return response
	return &RiskBulkCreatePayload{
		Risks: res,
	}, nil
}

// bulkCreateStandard uses the CreateBulk function to create multiple Standard entities
func (r *mutationResolver) bulkCreateStandard(ctx context.Context, input []*generated.CreateStandardInput) (*StandardBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.StandardCreate, len(input))
	for i, data := range input {
		builders[i] = c.Standard.Create().SetInput(*data)
	}

	res, err := c.Standard.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "standard"})
	}

	// return response
	return &StandardBulkCreatePayload{
		Standards: res,
	}, nil
}

// bulkCreateSubcontrol uses the CreateBulk function to create multiple Subcontrol entities
func (r *mutationResolver) bulkCreateSubcontrol(ctx context.Context, input []*generated.CreateSubcontrolInput) (*SubcontrolBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.SubcontrolCreate, len(input))
	for i, data := range input {
		builders[i] = c.Subcontrol.Create().SetInput(*data)
	}

	res, err := c.Subcontrol.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "subcontrol"})
	}

	// return response
	return &SubcontrolBulkCreatePayload{
		Subcontrols: res,
	}, nil
}

// bulkCreateSubscriber uses the CreateBulk function to create multiple Subscriber entities
func (r *mutationResolver) bulkCreateSubscriber(ctx context.Context, input []*generated.CreateSubscriberInput) (*SubscriberBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.SubscriberCreate, len(input))
	for i, data := range input {
		builders[i] = c.Subscriber.Create().SetInput(*data)
	}

	res, err := c.Subscriber.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "subscriber"})
	}

	// return response
	return &SubscriberBulkCreatePayload{
		Subscribers: res,
	}, nil
}

// bulkCreateTask uses the CreateBulk function to create multiple Task entities
func (r *mutationResolver) bulkCreateTask(ctx context.Context, input []*generated.CreateTaskInput) (*TaskBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.TaskCreate, len(input))
	for i, data := range input {
		builders[i] = c.Task.Create().SetInput(*data)
	}

	res, err := c.Task.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "task"})
	}

	// return response
	return &TaskBulkCreatePayload{
		Tasks: res,
	}, nil
}

// bulkCreateTemplate uses the CreateBulk function to create multiple Template entities
func (r *mutationResolver) bulkCreateTemplate(ctx context.Context, input []*generated.CreateTemplateInput) (*TemplateBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.TemplateCreate, len(input))
	for i, data := range input {
		builders[i] = c.Template.Create().SetInput(*data)
	}

	res, err := c.Template.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "template"})
	}

	// return response
	return &TemplateBulkCreatePayload{
		Templates: res,
	}, nil
}

// bulkCreateUserSetting uses the CreateBulk function to create multiple UserSetting entities
func (r *mutationResolver) bulkCreateUserSetting(ctx context.Context, input []*generated.CreateUserSettingInput) (*UserSettingBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.UserSettingCreate, len(input))
	for i, data := range input {
		builders[i] = c.UserSetting.Create().SetInput(*data)
	}

	res, err := c.UserSetting.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "usersetting"})
	}

	// return response
	return &UserSettingBulkCreatePayload{
		UserSettings: res,
	}, nil
}

// bulkCreateWebhook uses the CreateBulk function to create multiple Webhook entities
func (r *mutationResolver) bulkCreateWebhook(ctx context.Context, input []*generated.CreateWebhookInput) (*WebhookBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.WebhookCreate, len(input))
	for i, data := range input {
		builders[i] = c.Webhook.Create().SetInput(*data)
	}

	res, err := c.Webhook.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "webhook"})
	}

	// return response
	return &WebhookBulkCreatePayload{
		Webhooks: res,
	}, nil
}
