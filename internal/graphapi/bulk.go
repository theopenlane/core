package graphapi

// THIS CODE IS REGENERATED BY github.com/theopenlane/core/pkg/gqlplugin. DO NOT EDIT.

import (
	"context"
	"encoding/csv"
	"fmt"
	"os"

	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
)

// bulkCreateActionPlan uses the CreateBulk function to create multiple ActionPlan entities
func (r *mutationResolver) bulkCreateActionPlan(ctx context.Context, input []*generated.CreateActionPlanInput) (*model.ActionPlanBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ActionPlanCreate, len(input))
	for i, data := range input {
		builders[i] = c.ActionPlan.Create().SetInput(*data)
	}

	res, err := c.ActionPlan.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "actionplan"})
	}

	// return response
	return &model.ActionPlanBulkCreatePayload{
		ActionPlans: res,
	}, nil
}

// generateSampleCSVActionPlan generates a sample CSV file for ActionPlan based on the CreateActionPlanInput fields
func generateSampleCSVActionPlan() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"Status",
		"DueDate",
		"Priority",
		"Source",
		"Details",
		"RiskIDs",
		"ControlIDs",
		"UserIDs",
		"ProgramIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_actionplan.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_status",
		"example_duedate",
		"example_priority",
		"example_source",
		"example_details",
		"example_riskids",
		"example_controlids",
		"example_userids",
		"example_programids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for ActionPlan created: sample_actionplan.csv\n")
	return nil
}

// bulkCreateAPIToken uses the CreateBulk function to create multiple APIToken entities
func (r *mutationResolver) bulkCreateAPIToken(ctx context.Context, input []*generated.CreateAPITokenInput) (*model.APITokenBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.APITokenCreate, len(input))
	for i, data := range input {
		builders[i] = c.APIToken.Create().SetInput(*data)
	}

	res, err := c.APIToken.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "apitoken"})
	}

	// return response
	return &model.APITokenBulkCreatePayload{
		APITokens: res,
	}, nil
}

// generateSampleCSVAPIToken generates a sample CSV file for APIToken based on the CreateAPITokenInput fields
func generateSampleCSVAPIToken() error {
	headers := []string{
		"Tags",
		"Name",
		"ExpiresAt",
		"Description",
		"Scopes",
		"LastUsedAt",
		"IsActive",
		"RevokedReason",
		"RevokedBy",
		"RevokedAt",
		"OwnerId",
	}

	file, err := os.Create(fmt.Sprintf("sample_apitoken.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_expiresat",
		"example_description",
		"example_scopes",
		"example_lastusedat",
		"example_isactive",
		"example_revokedreason",
		"example_revokedby",
		"example_revokedat",
		"example_ownerid",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for APIToken created: sample_apitoken.csv\n")
	return nil
}

// bulkCreateContact uses the CreateBulk function to create multiple Contact entities
func (r *mutationResolver) bulkCreateContact(ctx context.Context, input []*generated.CreateContactInput) (*model.ContactBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ContactCreate, len(input))
	for i, data := range input {
		builders[i] = c.Contact.Create().SetInput(*data)
	}

	res, err := c.Contact.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "contact"})
	}

	// return response
	return &model.ContactBulkCreatePayload{
		Contacts: res,
	}, nil
}

// generateSampleCSVContact generates a sample CSV file for Contact based on the CreateContactInput fields
func generateSampleCSVContact() error {
	headers := []string{
		"Tags",
		"FullName",
		"Title",
		"Company",
		"Email",
		"PhoneNumber",
		"Address",
		"Status",
		"OwnerId",
		"EntityIDs",
		"FileIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_contact.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_fullname",
		"example_title",
		"example_company",
		"example_email",
		"example_phonenumber",
		"example_address",
		"example_status",
		"example_ownerid",
		"example_entityids",
		"example_fileids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Contact created: sample_contact.csv\n")
	return nil
}

// bulkCreateControl uses the CreateBulk function to create multiple Control entities
func (r *mutationResolver) bulkCreateControl(ctx context.Context, input []*generated.CreateControlInput) (*model.ControlBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ControlCreate, len(input))
	for i, data := range input {
		builders[i] = c.Control.Create().SetInput(*data)
	}

	res, err := c.Control.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "control"})
	}

	// return response
	return &model.ControlBulkCreatePayload{
		Controls: res,
	}, nil
}

// generateSampleCSVControl generates a sample CSV file for Control based on the CreateControlInput fields
func generateSampleCSVControl() error {
	headers := []string{
		"Tags",
		"Description",
		"Status",
		"Source",
		"ControlType",
		"Category",
		"CategoryId",
		"Subcategory",
		"MappedCategories",
		"AssessmentObjectives",
		"AssessmentMethods",
		"ControlQuestions",
		"ImplementationGuidance",
		"ExampleEvidence",
		"References",
		"RefCode",
		"OwnerId",
		"BlockedGroupIDs",
		"EditorIDs",
		"ViewerIDs",
		"StandardId",
		"ProgramIDs",
		"EvidenceIDs",
		"ControlImplementationIDs",
		"MappedControlIDs",
		"ControlObjectiveIDs",
		"SubcontrolIDs",
		"TaskIDs",
		"NarrativeIDs",
		"RiskIDs",
		"ActionPlanIDs",
		"ProcedureIDs",
		"InternalPolicyIDs",
		"ControlOwnerId",
		"DelegateId",
	}

	file, err := os.Create(fmt.Sprintf("sample_control.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_description",
		"example_status",
		"example_source",
		"example_controltype",
		"example_category",
		"example_categoryid",
		"example_subcategory",
		"example_mappedcategories",
		"example_assessmentobjectives",
		"example_assessmentmethods",
		"example_controlquestions",
		"example_implementationguidance",
		"example_exampleevidence",
		"example_references",
		"example_refcode",
		"example_ownerid",
		"example_blockedgroupids",
		"example_editorids",
		"example_viewerids",
		"example_standardid",
		"example_programids",
		"example_evidenceids",
		"example_controlimplementationids",
		"example_mappedcontrolids",
		"example_controlobjectiveids",
		"example_subcontrolids",
		"example_taskids",
		"example_narrativeids",
		"example_riskids",
		"example_actionplanids",
		"example_procedureids",
		"example_internalpolicyids",
		"example_controlownerid",
		"example_delegateid",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Control created: sample_control.csv\n")
	return nil
}

// bulkCreateControlImplementation uses the CreateBulk function to create multiple ControlImplementation entities
func (r *mutationResolver) bulkCreateControlImplementation(ctx context.Context, input []*generated.CreateControlImplementationInput) (*model.ControlImplementationBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ControlImplementationCreate, len(input))
	for i, data := range input {
		builders[i] = c.ControlImplementation.Create().SetInput(*data)
	}

	res, err := c.ControlImplementation.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "controlimplementation"})
	}

	// return response
	return &model.ControlImplementationBulkCreatePayload{
		ControlImplementations: res,
	}, nil
}

// generateSampleCSVControlImplementation generates a sample CSV file for ControlImplementation based on the CreateControlImplementationInput fields
func generateSampleCSVControlImplementation() error {
	headers := []string{
		"Tags",
		"Status",
		"ImplementationDate",
		"Verified",
		"VerificationDate",
		"Details",
		"ControlIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_controlimplementation.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_status",
		"example_implementationdate",
		"example_verified",
		"example_verificationdate",
		"example_details",
		"example_controlids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for ControlImplementation created: sample_controlimplementation.csv\n")
	return nil
}

// bulkCreateControlObjective uses the CreateBulk function to create multiple ControlObjective entities
func (r *mutationResolver) bulkCreateControlObjective(ctx context.Context, input []*generated.CreateControlObjectiveInput) (*model.ControlObjectiveBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ControlObjectiveCreate, len(input))
	for i, data := range input {
		builders[i] = c.ControlObjective.Create().SetInput(*data)
	}

	res, err := c.ControlObjective.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "controlobjective"})
	}

	// return response
	return &model.ControlObjectiveBulkCreatePayload{
		ControlObjectives: res,
	}, nil
}

// generateSampleCSVControlObjective generates a sample CSV file for ControlObjective based on the CreateControlObjectiveInput fields
func generateSampleCSVControlObjective() error {
	headers := []string{
		"Tags",
		"Name",
		"DesiredOutcome",
		"Status",
		"Source",
		"ControlObjectiveType",
		"Version",
		"Category",
		"Subcategory",
		"OwnerId",
		"BlockedGroupIDs",
		"EditorIDs",
		"ViewerIDs",
		"ProgramIDs",
		"EvidenceIDs",
		"ControlIDs",
		"SubcontrolIDs",
		"InternalPolicyIDs",
		"ProcedureIDs",
		"RiskIDs",
		"NarrativeIDs",
		"TaskIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_controlobjective.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_desiredoutcome",
		"example_status",
		"example_source",
		"example_controlobjectivetype",
		"example_version",
		"example_category",
		"example_subcategory",
		"example_ownerid",
		"example_blockedgroupids",
		"example_editorids",
		"example_viewerids",
		"example_programids",
		"example_evidenceids",
		"example_controlids",
		"example_subcontrolids",
		"example_internalpolicyids",
		"example_procedureids",
		"example_riskids",
		"example_narrativeids",
		"example_taskids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for ControlObjective created: sample_controlobjective.csv\n")
	return nil
}

// bulkCreateDocumentData uses the CreateBulk function to create multiple DocumentData entities
func (r *mutationResolver) bulkCreateDocumentData(ctx context.Context, input []*generated.CreateDocumentDataInput) (*model.DocumentDataBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.DocumentDataCreate, len(input))
	for i, data := range input {
		builders[i] = c.DocumentData.Create().SetInput(*data)
	}

	res, err := c.DocumentData.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "documentdata"})
	}

	// return response
	return &model.DocumentDataBulkCreatePayload{
		DocumentData: res,
	}, nil
}

// generateSampleCSVDocumentData generates a sample CSV file for DocumentData based on the CreateDocumentDataInput fields
func generateSampleCSVDocumentData() error {
	headers := []string{
		"Tags",
		"Data",
		"OwnerId",
		"TemplateId",
		"EntityIDs",
		"FileIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_documentdata.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_data",
		"example_ownerid",
		"example_templateid",
		"example_entityids",
		"example_fileids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for DocumentData created: sample_documentdata.csv\n")
	return nil
}

// bulkCreateEntity uses the CreateBulk function to create multiple Entity entities
func (r *mutationResolver) bulkCreateEntity(ctx context.Context, input []*generated.CreateEntityInput) (*model.EntityBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EntityCreate, len(input))
	for i, data := range input {
		builders[i] = c.Entity.Create().SetInput(*data)
	}

	res, err := c.Entity.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entity"})
	}

	// return response
	return &model.EntityBulkCreatePayload{
		Entities: res,
	}, nil
}

// generateSampleCSVEntity generates a sample CSV file for Entity based on the CreateEntityInput fields
func generateSampleCSVEntity() error {
	headers := []string{
		"Tags",
		"Name",
		"DisplayName",
		"Description",
		"Domains",
		"Status",
		"OwnerId",
		"ContactIDs",
		"DocumentIDs",
		"NoteIDs",
		"FileIDs",
		"EntityTypeId",
		"Note",
	}

	file, err := os.Create(fmt.Sprintf("sample_entity.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_displayname",
		"example_description",
		"example_domains",
		"example_status",
		"example_ownerid",
		"example_contactids",
		"example_documentids",
		"example_noteids",
		"example_fileids",
		"example_entitytypeid",
		"example_note",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Entity created: sample_entity.csv\n")
	return nil
}

// bulkCreateEntityType uses the CreateBulk function to create multiple EntityType entities
func (r *mutationResolver) bulkCreateEntityType(ctx context.Context, input []*generated.CreateEntityTypeInput) (*model.EntityTypeBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EntityTypeCreate, len(input))
	for i, data := range input {
		builders[i] = c.EntityType.Create().SetInput(*data)
	}

	res, err := c.EntityType.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entitytype"})
	}

	// return response
	return &model.EntityTypeBulkCreatePayload{
		EntityTypes: res,
	}, nil
}

// generateSampleCSVEntityType generates a sample CSV file for EntityType based on the CreateEntityTypeInput fields
func generateSampleCSVEntityType() error {
	headers := []string{
		"Tags",
		"Name",
		"OwnerId",
		"EntityIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_entitytype.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_ownerid",
		"example_entityids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for EntityType created: sample_entitytype.csv\n")
	return nil
}

// bulkCreateEvent uses the CreateBulk function to create multiple Event entities
func (r *mutationResolver) bulkCreateEvent(ctx context.Context, input []*generated.CreateEventInput) (*model.EventBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.EventCreate, len(input))
	for i, data := range input {
		builders[i] = c.Event.Create().SetInput(*data)
	}

	res, err := c.Event.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "event"})
	}

	// return response
	return &model.EventBulkCreatePayload{
		Events: res,
	}, nil
}

// generateSampleCSVEvent generates a sample CSV file for Event based on the CreateEventInput fields
func generateSampleCSVEvent() error {
	headers := []string{
		"Tags",
		"EventId",
		"CorrelationId",
		"EventType",
		"Metadata",
		"UserIDs",
		"GroupIDs",
		"IntegrationIDs",
		"OrganizationIDs",
		"InviteIDs",
		"PersonalAccessTokenIDs",
		"HushIDs",
		"SubscriberIDs",
		"FileIDs",
		"OrgsubscriptionIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_event.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_eventid",
		"example_correlationid",
		"example_eventtype",
		"example_metadata",
		"example_userids",
		"example_groupids",
		"example_integrationids",
		"example_organizationids",
		"example_inviteids",
		"example_personalaccesstokenids",
		"example_hushids",
		"example_subscriberids",
		"example_fileids",
		"example_orgsubscriptionids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Event created: sample_event.csv\n")
	return nil
}

// bulkCreateGroup uses the CreateBulk function to create multiple Group entities
func (r *mutationResolver) bulkCreateGroup(ctx context.Context, input []*generated.CreateGroupInput) (*model.GroupBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupCreate, len(input))
	for i, data := range input {
		builders[i] = c.Group.Create().SetInput(*data)
	}

	res, err := c.Group.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	// return response
	return &model.GroupBulkCreatePayload{
		Groups: res,
	}, nil
}

// generateSampleCSVGroup generates a sample CSV file for Group based on the CreateGroupInput fields
func generateSampleCSVGroup() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"GravatarLogoUrl",
		"LogoUrl",
		"DisplayName",
		"OwnerId",
		"ProcedureEditorIDs",
		"ProcedureBlockedGroupIDs",
		"InternalPolicyEditorIDs",
		"InternalPolicyBlockedGroupIDs",
		"ProgramEditorIDs",
		"ProgramBlockedGroupIDs",
		"ProgramViewerIDs",
		"RiskEditorIDs",
		"RiskBlockedGroupIDs",
		"RiskViewerIDs",
		"ControlObjectiveEditorIDs",
		"ControlObjectiveBlockedGroupIDs",
		"ControlObjectiveViewerIDs",
		"ControlEditorIDs",
		"ControlBlockedGroupIDs",
		"ControlViewerIDs",
		"NarrativeEditorIDs",
		"NarrativeBlockedGroupIDs",
		"NarrativeViewerIDs",
		"SettingId",
		"EventIDs",
		"IntegrationIDs",
		"FileIDs",
		"TaskIDs",
		"CreateGroupSettings",
	}

	file, err := os.Create(fmt.Sprintf("sample_group.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_gravatarlogourl",
		"example_logourl",
		"example_displayname",
		"example_ownerid",
		"example_procedureeditorids",
		"example_procedureblockedgroupids",
		"example_internalpolicyeditorids",
		"example_internalpolicyblockedgroupids",
		"example_programeditorids",
		"example_programblockedgroupids",
		"example_programviewerids",
		"example_riskeditorids",
		"example_riskblockedgroupids",
		"example_riskviewerids",
		"example_controlobjectiveeditorids",
		"example_controlobjectiveblockedgroupids",
		"example_controlobjectiveviewerids",
		"example_controleditorids",
		"example_controlblockedgroupids",
		"example_controlviewerids",
		"example_narrativeeditorids",
		"example_narrativeblockedgroupids",
		"example_narrativeviewerids",
		"example_settingid",
		"example_eventids",
		"example_integrationids",
		"example_fileids",
		"example_taskids",
		"example_creategroupsettings",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Group created: sample_group.csv\n")
	return nil
}

// bulkCreateGroupMembership uses the CreateBulk function to create multiple GroupMembership entities
func (r *mutationResolver) bulkCreateGroupMembership(ctx context.Context, input []*generated.CreateGroupMembershipInput) (*model.GroupMembershipBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupMembershipCreate, len(input))
	for i, data := range input {
		builders[i] = c.GroupMembership.Create().SetInput(*data)
	}

	res, err := c.GroupMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "groupmembership"})
	}

	// return response
	return &model.GroupMembershipBulkCreatePayload{
		GroupMemberships: res,
	}, nil
}

// generateSampleCSVGroupMembership generates a sample CSV file for GroupMembership based on the CreateGroupMembershipInput fields
func generateSampleCSVGroupMembership() error {
	headers := []string{
		"Role",
		"GroupId",
		"UserId",
		"EventIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_groupmembership.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_role",
		"example_groupid",
		"example_userid",
		"example_eventids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for GroupMembership created: sample_groupmembership.csv\n")
	return nil
}

// bulkCreateGroupSetting uses the CreateBulk function to create multiple GroupSetting entities
func (r *mutationResolver) bulkCreateGroupSetting(ctx context.Context, input []*generated.CreateGroupSettingInput) (*model.GroupSettingBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.GroupSettingCreate, len(input))
	for i, data := range input {
		builders[i] = c.GroupSetting.Create().SetInput(*data)
	}

	res, err := c.GroupSetting.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "groupsetting"})
	}

	// return response
	return &model.GroupSettingBulkCreatePayload{
		GroupSettings: res,
	}, nil
}

// generateSampleCSVGroupSetting generates a sample CSV file for GroupSetting based on the CreateGroupSettingInput fields
func generateSampleCSVGroupSetting() error {
	headers := []string{
		"Visibility",
		"JoinPolicy",
		"SyncToSlack",
		"SyncToGithub",
		"GroupId",
	}

	file, err := os.Create(fmt.Sprintf("sample_groupsetting.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_visibility",
		"example_joinpolicy",
		"example_synctoslack",
		"example_synctogithub",
		"example_groupid",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for GroupSetting created: sample_groupsetting.csv\n")
	return nil
}

// bulkCreateHush uses the CreateBulk function to create multiple Hush entities
func (r *mutationResolver) bulkCreateHush(ctx context.Context, input []*generated.CreateHushInput) (*model.HushBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.HushCreate, len(input))
	for i, data := range input {
		builders[i] = c.Hush.Create().SetInput(*data)
	}

	res, err := c.Hush.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "hush"})
	}

	// return response
	return &model.HushBulkCreatePayload{
		Hushes: res,
	}, nil
}

// generateSampleCSVHush generates a sample CSV file for Hush based on the CreateHushInput fields
func generateSampleCSVHush() error {
	headers := []string{
		"Name",
		"Description",
		"Kind",
		"SecretName",
		"SecretValue",
		"IntegrationIDs",
		"OrganizationIDs",
		"EventIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_hush.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_name",
		"example_description",
		"example_kind",
		"example_secretname",
		"example_secretvalue",
		"example_integrationids",
		"example_organizationids",
		"example_eventids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Hush created: sample_hush.csv\n")
	return nil
}

// bulkCreateIntegration uses the CreateBulk function to create multiple Integration entities
func (r *mutationResolver) bulkCreateIntegration(ctx context.Context, input []*generated.CreateIntegrationInput) (*model.IntegrationBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.IntegrationCreate, len(input))
	for i, data := range input {
		builders[i] = c.Integration.Create().SetInput(*data)
	}

	res, err := c.Integration.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "integration"})
	}

	// return response
	return &model.IntegrationBulkCreatePayload{
		Integrations: res,
	}, nil
}

// generateSampleCSVIntegration generates a sample CSV file for Integration based on the CreateIntegrationInput fields
func generateSampleCSVIntegration() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"Kind",
		"OwnerId",
		"SecretIDs",
		"EventIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_integration.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_kind",
		"example_ownerid",
		"example_secretids",
		"example_eventids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Integration created: sample_integration.csv\n")
	return nil
}

// bulkCreateInternalPolicy uses the CreateBulk function to create multiple InternalPolicy entities
func (r *mutationResolver) bulkCreateInternalPolicy(ctx context.Context, input []*generated.CreateInternalPolicyInput) (*model.InternalPolicyBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.InternalPolicyCreate, len(input))
	for i, data := range input {
		builders[i] = c.InternalPolicy.Create().SetInput(*data)
	}

	res, err := c.InternalPolicy.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "internalpolicy"})
	}

	// return response
	return &model.InternalPolicyBulkCreatePayload{
		InternalPolicies: res,
	}, nil
}

// generateSampleCSVInternalPolicy generates a sample CSV file for InternalPolicy based on the CreateInternalPolicyInput fields
func generateSampleCSVInternalPolicy() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"Status",
		"ReviewDue",
		"PolicyType",
		"Version",
		"PurposeAndScope",
		"Background",
		"Details",
		"OwnerId",
		"BlockedGroupIDs",
		"EditorIDs",
		"ControlObjectiveIDs",
		"ControlIDs",
		"ProcedureIDs",
		"NarrativeIDs",
		"TaskIDs",
		"ProgramIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_internalpolicy.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_status",
		"example_reviewdue",
		"example_policytype",
		"example_version",
		"example_purposeandscope",
		"example_background",
		"example_details",
		"example_ownerid",
		"example_blockedgroupids",
		"example_editorids",
		"example_controlobjectiveids",
		"example_controlids",
		"example_procedureids",
		"example_narrativeids",
		"example_taskids",
		"example_programids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for InternalPolicy created: sample_internalpolicy.csv\n")
	return nil
}

// bulkCreateInvite uses the CreateBulk function to create multiple Invite entities
func (r *mutationResolver) bulkCreateInvite(ctx context.Context, input []*generated.CreateInviteInput) (*model.InviteBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.InviteCreate, len(input))
	for i, data := range input {
		builders[i] = c.Invite.Create().SetInput(*data)
	}

	res, err := c.Invite.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "invite"})
	}

	// return response
	return &model.InviteBulkCreatePayload{
		Invites: res,
	}, nil
}

// generateSampleCSVInvite generates a sample CSV file for Invite based on the CreateInviteInput fields
func generateSampleCSVInvite() error {
	headers := []string{
		"Expires",
		"Recipient",
		"Status",
		"Role",
		"SendAttempts",
		"RequestorId",
		"OwnerId",
		"EventIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_invite.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_expires",
		"example_recipient",
		"example_status",
		"example_role",
		"example_sendattempts",
		"example_requestorid",
		"example_ownerid",
		"example_eventids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Invite created: sample_invite.csv\n")
	return nil
}

// bulkCreateMappedControl uses the CreateBulk function to create multiple MappedControl entities
func (r *mutationResolver) bulkCreateMappedControl(ctx context.Context, input []*generated.CreateMappedControlInput) (*model.MappedControlBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.MappedControlCreate, len(input))
	for i, data := range input {
		builders[i] = c.MappedControl.Create().SetInput(*data)
	}

	res, err := c.MappedControl.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "mappedcontrol"})
	}

	// return response
	return &model.MappedControlBulkCreatePayload{
		MappedControls: res,
	}, nil
}

// generateSampleCSVMappedControl generates a sample CSV file for MappedControl based on the CreateMappedControlInput fields
func generateSampleCSVMappedControl() error {
	headers := []string{
		"Tags",
		"MappingType",
		"Relation",
		"ControlIDs",
		"SubcontrolIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_mappedcontrol.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_mappingtype",
		"example_relation",
		"example_controlids",
		"example_subcontrolids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for MappedControl created: sample_mappedcontrol.csv\n")
	return nil
}

// bulkCreateNarrative uses the CreateBulk function to create multiple Narrative entities
func (r *mutationResolver) bulkCreateNarrative(ctx context.Context, input []*generated.CreateNarrativeInput) (*model.NarrativeBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.NarrativeCreate, len(input))
	for i, data := range input {
		builders[i] = c.Narrative.Create().SetInput(*data)
	}

	res, err := c.Narrative.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "narrative"})
	}

	// return response
	return &model.NarrativeBulkCreatePayload{
		Narratives: res,
	}, nil
}

// generateSampleCSVNarrative generates a sample CSV file for Narrative based on the CreateNarrativeInput fields
func generateSampleCSVNarrative() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"Details",
		"OwnerId",
		"BlockedGroupIDs",
		"EditorIDs",
		"ViewerIDs",
		"SatisfyIDs",
		"ProgramIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_narrative.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_details",
		"example_ownerid",
		"example_blockedgroupids",
		"example_editorids",
		"example_viewerids",
		"example_satisfyids",
		"example_programids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Narrative created: sample_narrative.csv\n")
	return nil
}

// bulkCreateOrganizationSetting uses the CreateBulk function to create multiple OrganizationSetting entities
func (r *mutationResolver) bulkCreateOrganizationSetting(ctx context.Context, input []*generated.CreateOrganizationSettingInput) (*model.OrganizationSettingBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OrganizationSettingCreate, len(input))
	for i, data := range input {
		builders[i] = c.OrganizationSetting.Create().SetInput(*data)
	}

	res, err := c.OrganizationSetting.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "organizationsetting"})
	}

	// return response
	return &model.OrganizationSettingBulkCreatePayload{
		OrganizationSettings: res,
	}, nil
}

// generateSampleCSVOrganizationSetting generates a sample CSV file for OrganizationSetting based on the CreateOrganizationSettingInput fields
func generateSampleCSVOrganizationSetting() error {
	headers := []string{
		"Tags",
		"Domains",
		"BillingContact",
		"BillingEmail",
		"BillingPhone",
		"BillingAddress",
		"TaxIdentifier",
		"GeoLocation",
		"BillingNotificationsEnabled",
		"AllowedEmailDomains",
		"OrganizationId",
		"FileIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_organizationsetting.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_domains",
		"example_billingcontact",
		"example_billingemail",
		"example_billingphone",
		"example_billingaddress",
		"example_taxidentifier",
		"example_geolocation",
		"example_billingnotificationsenabled",
		"example_allowedemaildomains",
		"example_organizationid",
		"example_fileids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for OrganizationSetting created: sample_organizationsetting.csv\n")
	return nil
}

// bulkCreateOrgMembership uses the CreateBulk function to create multiple OrgMembership entities
func (r *mutationResolver) bulkCreateOrgMembership(ctx context.Context, input []*generated.CreateOrgMembershipInput) (*model.OrgMembershipBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OrgMembershipCreate, len(input))
	for i, data := range input {
		builders[i] = c.OrgMembership.Create().SetInput(*data)
	}

	res, err := c.OrgMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "orgmembership"})
	}

	// return response
	return &model.OrgMembershipBulkCreatePayload{
		OrgMemberships: res,
	}, nil
}

// generateSampleCSVOrgMembership generates a sample CSV file for OrgMembership based on the CreateOrgMembershipInput fields
func generateSampleCSVOrgMembership() error {
	headers := []string{
		"Role",
		"OrganizationId",
		"UserId",
		"EventIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_orgmembership.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_role",
		"example_organizationid",
		"example_userid",
		"example_eventids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for OrgMembership created: sample_orgmembership.csv\n")
	return nil
}

// bulkCreateProcedure uses the CreateBulk function to create multiple Procedure entities
func (r *mutationResolver) bulkCreateProcedure(ctx context.Context, input []*generated.CreateProcedureInput) (*model.ProcedureBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ProcedureCreate, len(input))
	for i, data := range input {
		builders[i] = c.Procedure.Create().SetInput(*data)
	}

	res, err := c.Procedure.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "procedure"})
	}

	// return response
	return &model.ProcedureBulkCreatePayload{
		Procedures: res,
	}, nil
}

// generateSampleCSVProcedure generates a sample CSV file for Procedure based on the CreateProcedureInput fields
func generateSampleCSVProcedure() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"Status",
		"ProcedureType",
		"ReviewDue",
		"Version",
		"PurposeAndScope",
		"Background",
		"Satisfies",
		"Details",
		"OwnerId",
		"BlockedGroupIDs",
		"EditorIDs",
		"ControlIDs",
		"InternalPolicyIDs",
		"NarrativeIDs",
		"RiskIDs",
		"TaskIDs",
		"ProgramIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_procedure.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_status",
		"example_proceduretype",
		"example_reviewdue",
		"example_version",
		"example_purposeandscope",
		"example_background",
		"example_satisfies",
		"example_details",
		"example_ownerid",
		"example_blockedgroupids",
		"example_editorids",
		"example_controlids",
		"example_internalpolicyids",
		"example_narrativeids",
		"example_riskids",
		"example_taskids",
		"example_programids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Procedure created: sample_procedure.csv\n")
	return nil
}

// bulkCreateProgram uses the CreateBulk function to create multiple Program entities
func (r *mutationResolver) bulkCreateProgram(ctx context.Context, input []*generated.CreateProgramInput) (*model.ProgramBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ProgramCreate, len(input))
	for i, data := range input {
		builders[i] = c.Program.Create().SetInput(*data)
	}

	res, err := c.Program.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "program"})
	}

	// return response
	return &model.ProgramBulkCreatePayload{
		Programs: res,
	}, nil
}

// generateSampleCSVProgram generates a sample CSV file for Program based on the CreateProgramInput fields
func generateSampleCSVProgram() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"Status",
		"StartDate",
		"EndDate",
		"AuditorReady",
		"AuditorWriteComments",
		"AuditorReadComments",
		"OwnerId",
		"BlockedGroupIDs",
		"EditorIDs",
		"ViewerIDs",
		"ControlIDs",
		"SubcontrolIDs",
		"ControlObjectiveIDs",
		"InternalPolicyIDs",
		"ProcedureIDs",
		"RiskIDs",
		"TaskIDs",
		"NoteIDs",
		"FileIDs",
		"EvidenceIDs",
		"NarrativeIDs",
		"ActionPlanIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_program.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_status",
		"example_startdate",
		"example_enddate",
		"example_auditorready",
		"example_auditorwritecomments",
		"example_auditorreadcomments",
		"example_ownerid",
		"example_blockedgroupids",
		"example_editorids",
		"example_viewerids",
		"example_controlids",
		"example_subcontrolids",
		"example_controlobjectiveids",
		"example_internalpolicyids",
		"example_procedureids",
		"example_riskids",
		"example_taskids",
		"example_noteids",
		"example_fileids",
		"example_evidenceids",
		"example_narrativeids",
		"example_actionplanids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Program created: sample_program.csv\n")
	return nil
}

// bulkCreateProgramMembership uses the CreateBulk function to create multiple ProgramMembership entities
func (r *mutationResolver) bulkCreateProgramMembership(ctx context.Context, input []*generated.CreateProgramMembershipInput) (*model.ProgramMembershipBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.ProgramMembershipCreate, len(input))
	for i, data := range input {
		builders[i] = c.ProgramMembership.Create().SetInput(*data)
	}

	res, err := c.ProgramMembership.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "programmembership"})
	}

	// return response
	return &model.ProgramMembershipBulkCreatePayload{
		ProgramMemberships: res,
	}, nil
}

// generateSampleCSVProgramMembership generates a sample CSV file for ProgramMembership based on the CreateProgramMembershipInput fields
func generateSampleCSVProgramMembership() error {
	headers := []string{
		"Role",
		"ProgramId",
		"UserId",
	}

	file, err := os.Create(fmt.Sprintf("sample_programmembership.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_role",
		"example_programid",
		"example_userid",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for ProgramMembership created: sample_programmembership.csv\n")
	return nil
}

// bulkCreateRisk uses the CreateBulk function to create multiple Risk entities
func (r *mutationResolver) bulkCreateRisk(ctx context.Context, input []*generated.CreateRiskInput) (*model.RiskBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.RiskCreate, len(input))
	for i, data := range input {
		builders[i] = c.Risk.Create().SetInput(*data)
	}

	res, err := c.Risk.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "risk"})
	}

	// return response
	return &model.RiskBulkCreatePayload{
		Risks: res,
	}, nil
}

// generateSampleCSVRisk generates a sample CSV file for Risk based on the CreateRiskInput fields
func generateSampleCSVRisk() error {
	headers := []string{
		"Tags",
		"Name",
		"Description",
		"Status",
		"RiskType",
		"BusinessCosts",
		"Impact",
		"Likelihood",
		"Mitigation",
		"Satisfies",
		"Details",
		"OwnerId",
		"BlockedGroupIDs",
		"EditorIDs",
		"ViewerIDs",
		"ControlIDs",
		"ProcedureIDs",
		"ActionPlanIDs",
		"ProgramIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_risk.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_description",
		"example_status",
		"example_risktype",
		"example_businesscosts",
		"example_impact",
		"example_likelihood",
		"example_mitigation",
		"example_satisfies",
		"example_details",
		"example_ownerid",
		"example_blockedgroupids",
		"example_editorids",
		"example_viewerids",
		"example_controlids",
		"example_procedureids",
		"example_actionplanids",
		"example_programids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Risk created: sample_risk.csv\n")
	return nil
}

// bulkCreateSubcontrol uses the CreateBulk function to create multiple Subcontrol entities
func (r *mutationResolver) bulkCreateSubcontrol(ctx context.Context, input []*generated.CreateSubcontrolInput) (*model.SubcontrolBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.SubcontrolCreate, len(input))
	for i, data := range input {
		builders[i] = c.Subcontrol.Create().SetInput(*data)
	}

	res, err := c.Subcontrol.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "subcontrol"})
	}

	// return response
	return &model.SubcontrolBulkCreatePayload{
		Subcontrols: res,
	}, nil
}

// generateSampleCSVSubcontrol generates a sample CSV file for Subcontrol based on the CreateSubcontrolInput fields
func generateSampleCSVSubcontrol() error {
	headers := []string{
		"Tags",
		"Description",
		"Status",
		"Source",
		"ControlType",
		"Category",
		"CategoryId",
		"Subcategory",
		"MappedCategories",
		"AssessmentObjectives",
		"AssessmentMethods",
		"ControlQuestions",
		"ImplementationGuidance",
		"ExampleEvidence",
		"References",
		"RefCode",
		"OwnerId",
		"ControlId",
		"MappedControlIDs",
		"EvidenceIDs",
		"ControlObjectiveIDs",
		"TaskIDs",
		"NarrativeIDs",
		"RiskIDs",
		"ActionPlanIDs",
		"ProcedureIDs",
		"InternalPolicyIDs",
		"ControlOwnerId",
		"DelegateId",
	}

	file, err := os.Create(fmt.Sprintf("sample_subcontrol.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_description",
		"example_status",
		"example_source",
		"example_controltype",
		"example_category",
		"example_categoryid",
		"example_subcategory",
		"example_mappedcategories",
		"example_assessmentobjectives",
		"example_assessmentmethods",
		"example_controlquestions",
		"example_implementationguidance",
		"example_exampleevidence",
		"example_references",
		"example_refcode",
		"example_ownerid",
		"example_controlid",
		"example_mappedcontrolids",
		"example_evidenceids",
		"example_controlobjectiveids",
		"example_taskids",
		"example_narrativeids",
		"example_riskids",
		"example_actionplanids",
		"example_procedureids",
		"example_internalpolicyids",
		"example_controlownerid",
		"example_delegateid",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Subcontrol created: sample_subcontrol.csv\n")
	return nil
}

// bulkCreateSubscriber uses the CreateBulk function to create multiple Subscriber entities
func (r *mutationResolver) bulkCreateSubscriber(ctx context.Context, input []*generated.CreateSubscriberInput) (*model.SubscriberBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.SubscriberCreate, len(input))
	for i, data := range input {
		builders[i] = c.Subscriber.Create().SetInput(*data)
	}

	res, err := c.Subscriber.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "subscriber"})
	}

	// return response
	return &model.SubscriberBulkCreatePayload{
		Subscribers: res,
	}, nil
}

// generateSampleCSVSubscriber generates a sample CSV file for Subscriber based on the CreateSubscriberInput fields
func generateSampleCSVSubscriber() error {
	headers := []string{
		"Tags",
		"Email",
		"PhoneNumber",
		"OwnerId",
		"EventIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_subscriber.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_email",
		"example_phonenumber",
		"example_ownerid",
		"example_eventids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Subscriber created: sample_subscriber.csv\n")
	return nil
}

// bulkCreateTask uses the CreateBulk function to create multiple Task entities
func (r *mutationResolver) bulkCreateTask(ctx context.Context, input []*generated.CreateTaskInput) (*model.TaskBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.TaskCreate, len(input))
	for i, data := range input {
		builders[i] = c.Task.Create().SetInput(*data)
	}

	res, err := c.Task.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "task"})
	}

	// return response
	return &model.TaskBulkCreatePayload{
		Tasks: res,
	}, nil
}

// generateSampleCSVTask generates a sample CSV file for Task based on the CreateTaskInput fields
func generateSampleCSVTask() error {
	headers := []string{
		"Tags",
		"Title",
		"Description",
		"Details",
		"Status",
		"Category",
		"Due",
		"Completed",
		"OwnerId",
		"AssignerId",
		"AssigneeId",
		"CommentIDs",
		"GroupIDs",
		"InternalPolicyIDs",
		"ProcedureIDs",
		"ControlIDs",
		"ControlObjectiveIDs",
		"SubcontrolIDs",
		"ProgramIDs",
		"EvidenceIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_task.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_title",
		"example_description",
		"example_details",
		"example_status",
		"example_category",
		"example_due",
		"example_completed",
		"example_ownerid",
		"example_assignerid",
		"example_assigneeid",
		"example_commentids",
		"example_groupids",
		"example_internalpolicyids",
		"example_procedureids",
		"example_controlids",
		"example_controlobjectiveids",
		"example_subcontrolids",
		"example_programids",
		"example_evidenceids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Task created: sample_task.csv\n")
	return nil
}

// bulkCreateTemplate uses the CreateBulk function to create multiple Template entities
func (r *mutationResolver) bulkCreateTemplate(ctx context.Context, input []*generated.CreateTemplateInput) (*model.TemplateBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.TemplateCreate, len(input))
	for i, data := range input {
		builders[i] = c.Template.Create().SetInput(*data)
	}

	res, err := c.Template.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "template"})
	}

	// return response
	return &model.TemplateBulkCreatePayload{
		Templates: res,
	}, nil
}

// generateSampleCSVTemplate generates a sample CSV file for Template based on the CreateTemplateInput fields
func generateSampleCSVTemplate() error {
	headers := []string{
		"Tags",
		"Name",
		"TemplateType",
		"Description",
		"Jsonconfig",
		"Uischema",
		"OwnerId",
		"DocumentIDs",
		"FileIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_template.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_name",
		"example_templatetype",
		"example_description",
		"example_jsonconfig",
		"example_uischema",
		"example_ownerid",
		"example_documentids",
		"example_fileids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for Template created: sample_template.csv\n")
	return nil
}

// bulkCreateUserSetting uses the CreateBulk function to create multiple UserSetting entities
func (r *mutationResolver) bulkCreateUserSetting(ctx context.Context, input []*generated.CreateUserSettingInput) (*model.UserSettingBulkCreatePayload, error) {
	c := withTransactionalMutation(ctx)
	builders := make([]*generated.UserSettingCreate, len(input))
	for i, data := range input {
		builders[i] = c.UserSetting.Create().SetInput(*data)
	}

	res, err := c.UserSetting.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "usersetting"})
	}

	// return response
	return &model.UserSettingBulkCreatePayload{
		UserSettings: res,
	}, nil
}

// generateSampleCSVUserSetting generates a sample CSV file for UserSetting based on the CreateUserSettingInput fields
func generateSampleCSVUserSetting() error {
	headers := []string{
		"Tags",
		"Locked",
		"SilencedAt",
		"SuspendedAt",
		"Status",
		"EmailConfirmed",
		"IsWebauthnAllowed",
		"IsTfaEnabled",
		"UserId",
		"DefaultOrgId",
		"FileIDs",
	}

	file, err := os.Create(fmt.Sprintf("sample_usersetting.csv"))
	if err != nil {
		return err
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	if err := writer.Write(headers); err != nil {
		return err
	}

	// Add example row
	exampleRow := []string{
		"example_tags",
		"example_locked",
		"example_silencedat",
		"example_suspendedat",
		"example_status",
		"example_emailconfirmed",
		"example_iswebauthnallowed",
		"example_istfaenabled",
		"example_userid",
		"example_defaultorgid",
		"example_fileids",
	}
	if err := writer.Write(exampleRow); err != nil {
		return err
	}

	fmt.Printf("Sample CSV for UserSetting created: sample_usersetting.csv\n")
	return nil
}
