package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
	"github.com/theopenlane/utils/rout"
)

// UpdateTaskComment is the resolver for the updateTaskComment field.
func (r *mutationResolver) UpdateTaskComment(ctx context.Context, id string, input generated.UpdateNoteInput, noteFiles []*graphql.Upload) (*model.TaskUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Note.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "taskcomment"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input)

	if err = req.Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "taskcomment"})
	}

	// Get the task that owns this comment
	taskRes, err := withTransactionalMutation(ctx).Task.Query().Where(task.HasCommentsWith(note.ID(id))).Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "task"})
	}

	return &model.TaskUpdatePayload{
		Task: taskRes,
	}, nil
}

// UpdateControlComment is the resolver for the updateControlComment field.
func (r *mutationResolver) UpdateControlComment(ctx context.Context, id string, input generated.UpdateNoteInput, noteFiles []*graphql.Upload) (*model.ControlUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Note.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "control"})
	}

	// setup update request
	req := res.Update().SetInput(input)

	if err = req.Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "control"})
	}

	objectRes, err := withTransactionalMutation(ctx).Control.Query().Where(control.HasCommentsWith(note.ID(id))).Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "control"})
	}

	return &model.ControlUpdatePayload{
		Control: objectRes,
	}, nil
}

// UpdateSubcontrolComment is the resolver for the updateSubcontrolComment field.
func (r *mutationResolver) UpdateSubcontrolComment(ctx context.Context, id string, input generated.UpdateNoteInput, noteFiles []*graphql.Upload) (*model.SubcontrolUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Note.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "subcontrol"})
	}

	// setup update request
	req := res.Update().SetInput(input)

	if err = req.Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "subcontrol"})
	}

	objectRes, err := withTransactionalMutation(ctx).Subcontrol.Query().Where(subcontrol.HasCommentsWith(note.ID(id))).Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "subcontrol"})
	}

	return &model.SubcontrolUpdatePayload{
		Subcontrol: objectRes,
	}, nil
}

// Note is the resolver for the note field.
func (r *queryResolver) Note(ctx context.Context, id string) (*generated.Note, error) {
	query, err := withTransactionalMutation(ctx).Note.Query().Where(note.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "note"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "note"})
	}

	return res, nil
}

// AddComment is the resolver for the addComment field.
func (r *updateControlInputResolver) AddComment(ctx context.Context, obj *generated.UpdateControlInput, data *generated.CreateNoteInput) error {
	if data == nil {
		return nil
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, data.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return rout.NewMissingRequiredFieldError("owner_id")
	}

	data.ControlID = graphutils.GetStringInputVariableByName(ctx, "id")
	if data.ControlID == nil {
		return newNotFoundError("control")
	}

	if err := withTransactionalMutation(ctx).Note.Create().SetInput(*data).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "comment"})
	}

	return nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *updateControlInputResolver) DeleteComment(ctx context.Context, obj *generated.UpdateControlInput, data *string) error {
	if data == nil {
		return nil
	}

	if err := withTransactionalMutation(ctx).Note.DeleteOneID(*data).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionDelete, object: "comment"})
	}

	return nil
}

// AddComment is the resolver for the addComment field.
func (r *updateSubcontrolInputResolver) AddComment(ctx context.Context, obj *generated.UpdateSubcontrolInput, data *generated.CreateNoteInput) error {
	if data == nil {
		return nil
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, data.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return rout.NewMissingRequiredFieldError("owner_id")
	}

	data.SubcontrolID = graphutils.GetStringInputVariableByName(ctx, "id")
	if data.SubcontrolID == nil {
		return newNotFoundError("subcontrol")
	}

	if err := withTransactionalMutation(ctx).Note.Create().SetInput(*data).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "comment"})
	}

	return nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *updateSubcontrolInputResolver) DeleteComment(ctx context.Context, obj *generated.UpdateSubcontrolInput, data *string) error {
	if data == nil {
		return nil
	}

	if err := withTransactionalMutation(ctx).Note.DeleteOneID(*data).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionDelete, object: "comment"})
	}

	return nil
}

// AddComment is the resolver for the addComment field.
func (r *updateTaskInputResolver) AddComment(ctx context.Context, obj *generated.UpdateTaskInput, data *generated.CreateNoteInput) error {
	if data == nil {
		return nil
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, data.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return rout.NewMissingRequiredFieldError("owner_id")
	}

	data.TaskID = graphutils.GetStringInputVariableByName(ctx, "id")
	if data.TaskID == nil {
		return newNotFoundError("task")
	}

	if err := withTransactionalMutation(ctx).Note.Create().SetInput(*data).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "comment"})
	}

	return nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *updateTaskInputResolver) DeleteComment(ctx context.Context, obj *generated.UpdateTaskInput, data *string) error {
	if data == nil {
		return nil
	}

	if err := withTransactionalMutation(ctx).Note.DeleteOneID(*data).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionDelete, object: "comment"})
	}

	return nil
}
