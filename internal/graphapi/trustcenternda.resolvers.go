package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenterNda is the resolver for the createTrustCenterNDA field.
func (r *mutationResolver) CreateTrustCenterNda(ctx context.Context, input model.CreateTrustCenterNDAInput) (*model.TrustCenterNDACreatePayload, error) {
	transactionCtx := withTransactionalMutation(ctx)

	trustCenter, err := transactionCtx.TrustCenter.Get(ctx, input.TrustCenterID)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcenter"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &trustCenter.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}
	// res, err := withTransactionalMutation(ctx).TrustCenterNDA.Create().SetInput(input).Save(ctx)
	// if err != nil {
	// 	return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcenternda"})
	// }

	return &model.TrustCenterNDACreatePayload{}, nil
}
