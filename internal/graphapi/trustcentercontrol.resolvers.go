package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercontrol"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenterControl is the resolver for the createTrustCenterControl field.
func (r *mutationResolver) CreateTrustCenterControl(ctx context.Context, input generated.CreateTrustCenterControlInput) (*model.TrustCenterControlCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterControl.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcentercontrol"})
	}

	return &model.TrustCenterControlCreatePayload{
		TrustCenterControl: res,
	}, nil
}

// CreateBulkTrustCenterControl is the resolver for the createBulkTrustCenterControl field.
func (r *mutationResolver) CreateBulkTrustCenterControl(ctx context.Context, input []*generated.CreateTrustCenterControlInput) (*model.TrustCenterControlBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterControl(ctx, input)
}

// CreateBulkCSVTrustCenterControl is the resolver for the createBulkCSVTrustCenterControl field.
func (r *mutationResolver) CreateBulkCSVTrustCenterControl(ctx context.Context, input graphql.Upload) (*model.TrustCenterControlBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateTrustCenterControlInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterControl(ctx, data)
}

// UpdateTrustCenterControl is the resolver for the updateTrustCenterControl field.
func (r *mutationResolver) UpdateTrustCenterControl(ctx context.Context, id string, input generated.UpdateTrustCenterControlInput) (*model.TrustCenterControlUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterControl.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcentercontrol"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcentercontrol"})
	}

	return &model.TrustCenterControlUpdatePayload{
		TrustCenterControl: res,
	}, nil
}

// DeleteTrustCenterControl is the resolver for the deleteTrustCenterControl field.
func (r *mutationResolver) DeleteTrustCenterControl(ctx context.Context, id string) (*model.TrustCenterControlDeletePayload, error) {
	if err := withTransactionalMutation(ctx).TrustCenterControl.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "trustcentercontrol"})
	}

	if err := generated.TrustCenterControlEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.TrustCenterControlDeletePayload{
		DeletedID: id,
	}, nil
}

// TrustCenterControl is the resolver for the trustCenterControl field.
func (r *queryResolver) TrustCenterControl(ctx context.Context, id string) (*generated.TrustCenterControl, error) {
	query, err := withTransactionalMutation(ctx).TrustCenterControl.Query().Where(trustcentercontrol.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcentercontrol"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcentercontrol"})
	}

	return res, nil
}
