package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterwatermarkconfig"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateTrustCenterWatermarkConfig is the resolver for the createTrustCenterWatermarkConfig field.
func (r *mutationResolver) CreateTrustCenterWatermarkConfig(ctx context.Context, input generated.CreateTrustCenterWatermarkConfigInput) (*model.TrustCenterWatermarkConfigCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterWatermarkConfig.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "trustcenterwatermarkconfig"})
	}

	return &model.TrustCenterWatermarkConfigCreatePayload{
		TrustCenterWatermarkConfig: res,
	}, nil
}

// CreateBulkTrustCenterWatermarkConfig is the resolver for the createBulkTrustCenterWatermarkConfig field.
func (r *mutationResolver) CreateBulkTrustCenterWatermarkConfig(ctx context.Context, input []*generated.CreateTrustCenterWatermarkConfigInput) (*model.TrustCenterWatermarkConfigBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterWatermarkConfig(ctx, input)
}

// CreateBulkCSVTrustCenterWatermarkConfig is the resolver for the createBulkCSVTrustCenterWatermarkConfig field.
func (r *mutationResolver) CreateBulkCSVTrustCenterWatermarkConfig(ctx context.Context, input graphql.Upload) (*model.TrustCenterWatermarkConfigBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateTrustCenterWatermarkConfigInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateTrustCenterWatermarkConfig(ctx, data)
}

// UpdateTrustCenterWatermarkConfig is the resolver for the updateTrustCenterWatermarkConfig field.
func (r *mutationResolver) UpdateTrustCenterWatermarkConfig(ctx context.Context, id string, input generated.UpdateTrustCenterWatermarkConfigInput) (*model.TrustCenterWatermarkConfigUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).TrustCenterWatermarkConfig.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcenterwatermarkconfig"})
	}

	// setup update request
	req := res.Update().SetInput(input)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "trustcenterwatermarkconfig"})
	}

	return &model.TrustCenterWatermarkConfigUpdatePayload{
		TrustCenterWatermarkConfig: res,
	}, nil
}

// DeleteTrustCenterWatermarkConfig is the resolver for the deleteTrustCenterWatermarkConfig field.
func (r *mutationResolver) DeleteTrustCenterWatermarkConfig(ctx context.Context, id string) (*model.TrustCenterWatermarkConfigDeletePayload, error) {
	if err := withTransactionalMutation(ctx).TrustCenterWatermarkConfig.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "trustcenterwatermarkconfig"})
	}

	if err := generated.TrustCenterWatermarkConfigEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.TrustCenterWatermarkConfigDeletePayload{
		DeletedID: id,
	}, nil
}

// TrustCenterWatermarkConfig is the resolver for the trustCenterWatermarkConfig field.
func (r *queryResolver) TrustCenterWatermarkConfig(ctx context.Context, id string) (*generated.TrustCenterWatermarkConfig, error) {
	query, err := withTransactionalMutation(ctx).TrustCenterWatermarkConfig.Query().Where(trustcenterwatermarkconfig.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcenterwatermarkconfig"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "trustcenterwatermarkconfig"})
	}

	return res, nil
}
