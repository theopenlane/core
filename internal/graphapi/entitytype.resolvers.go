package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/utils/rout"
)

// CreateEntityType is the resolver for the createEntityType field.
func (r *mutationResolver) CreateEntityType(ctx context.Context, input generated.CreateEntityTypeInput) (*EntityTypeCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")
		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).EntityType.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entitytype"})
	}

	return &EntityTypeCreatePayload{
		EntityType: res,
	}, nil
}

// CreateBulkEntityType is the resolver for the createBulkEntityType field.
func (r *mutationResolver) CreateBulkEntityType(ctx context.Context, input []*generated.CreateEntityTypeInput) (*EntityTypeBulkCreatePayload, error) {
	return r.bulkCreateEntityType(ctx, input)
}

// CreateBulkCSVEntityType is the resolver for the createBulkCSVEntityType field.
func (r *mutationResolver) CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload) (*EntityTypeBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateEntityTypeInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateEntityType(ctx, data)
}

// UpdateEntityType is the resolver for the updateEntityType field.
func (r *mutationResolver) UpdateEntityType(ctx context.Context, id string, input generated.UpdateEntityTypeInput) (*EntityTypeUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).EntityType.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "entitytype"})
	}
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")
		return nil, ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "entitytype"})
	}

	return &EntityTypeUpdatePayload{
		EntityType: res,
	}, nil
}

// DeleteEntityType is the resolver for the deleteEntityType field.
func (r *mutationResolver) DeleteEntityType(ctx context.Context, id string) (*EntityTypeDeletePayload, error) {
	if err := withTransactionalMutation(ctx).EntityType.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "entitytype"})
	}

	if err := generated.EntityTypeEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &EntityTypeDeletePayload{
		DeletedID: id,
	}, nil
}

// EntityType is the resolver for the entityType field.
func (r *queryResolver) EntityType(ctx context.Context, id string) (*generated.EntityType, error) {
	res, err := withTransactionalMutation(ctx).EntityType.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entitytype"})
	}

	return res, nil
}
