package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/utils/rout"
)

// CreateSubcontrol is the resolver for the createSubcontrol field.
func (r *mutationResolver) CreateSubcontrol(ctx context.Context, input generated.CreateSubcontrolInput) (*model.SubcontrolCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	input.Status = &enums.ControlStatusPreparing

	res, err := withTransactionalMutation(ctx).Subcontrol.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "subcontrol"})
	}

	return &model.SubcontrolCreatePayload{
		Subcontrol: res,
	}, nil
}

// CreateBulkSubcontrol is the resolver for the createBulkSubcontrol field.
func (r *mutationResolver) CreateBulkSubcontrol(ctx context.Context, input []*generated.CreateSubcontrolInput) (*model.SubcontrolBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	// set the organization in the auth context if its not done for us
	// this will choose the first input OwnerID when using a personal access token
	if err := setOrganizationInAuthContextBulkRequest(ctx, input); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	return r.bulkCreateSubcontrol(ctx, input)
}

// CreateBulkCSVSubcontrol is the resolver for the createBulkCSVSubcontrol field.
func (r *mutationResolver) CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload) (*model.SubcontrolBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateSubcontrolInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	// set the organization in the auth context if its not done for us
	// this will choose the first input OwnerID when using a personal access token
	if err := setOrganizationInAuthContextBulkRequest(ctx, data); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	return r.bulkCreateSubcontrol(ctx, data)
}

// UpdateSubcontrol is the resolver for the updateSubcontrol field.
func (r *mutationResolver) UpdateSubcontrol(ctx context.Context, id string, input generated.UpdateSubcontrolInput) (*model.SubcontrolUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Subcontrol.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "subcontrol"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags).AppendMappedCategories(input.AppendMappedCategories).AppendAssessmentObjectives(input.AppendAssessmentObjectives).AppendAssessmentMethods(input.AppendAssessmentMethods).AppendControlQuestions(input.AppendControlQuestions).AppendImplementationGuidance(input.AppendImplementationGuidance).AppendExampleEvidence(input.AppendExampleEvidence).AppendReferences(input.AppendReferences)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "subcontrol"})
	}

	return &model.SubcontrolUpdatePayload{
		Subcontrol: res,
	}, nil
}

// DeleteSubcontrol is the resolver for the deleteSubcontrol field.
func (r *mutationResolver) DeleteSubcontrol(ctx context.Context, id string) (*model.SubcontrolDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Subcontrol.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "subcontrol"})
	}

	if err := generated.SubcontrolEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.SubcontrolDeletePayload{
		DeletedID: id,
	}, nil
}

// Subcontrol is the resolver for the subcontrol field.
func (r *queryResolver) Subcontrol(ctx context.Context, id string) (*generated.Subcontrol, error) {
	query, err := withTransactionalMutation(ctx).Subcontrol.Query().Where(subcontrol.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcontrol"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "subcontrol"})
	}

	return res, nil
}
