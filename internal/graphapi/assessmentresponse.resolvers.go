package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/graphapi/model"
)

// CreateAssessmentResponse is the resolver for the createAssessmentResponse field.
func (r *mutationResolver) CreateAssessmentResponse(ctx context.Context, input generated.CreateAssessmentResponseInput) (*model.AssessmentResponseCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).AssessmentResponse.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "assessmentresponse"})
	}

	return &model.AssessmentResponseCreatePayload{
		AssessmentResponse: res,
	}, nil
}

// UpdateAssessmentResponse is the resolver for the updateAssessmentResponse field.
func (r *mutationResolver) UpdateAssessmentResponse(ctx context.Context, id string, input generated.UpdateAssessmentResponseInput) (*model.AssessmentResponseUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).AssessmentResponse.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "assessmentresponse"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "assessmentresponse"})
	}

	return &model.AssessmentResponseUpdatePayload{
		AssessmentResponse: res,
	}, nil
}

// AssessmentResponse is the resolver for the assessmentResponse field.
func (r *queryResolver) AssessmentResponse(ctx context.Context, id string) (*generated.AssessmentResponse, error) {
	query, err := withTransactionalMutation(ctx).AssessmentResponse.Query().Where(assessmentresponse.ID(id)).CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "assessmentresponse"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "assessmentresponse"})
	}

	return res, nil
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateBulkAssessmentResponse(ctx context.Context, input []*generated.CreateAssessmentResponseInput) (*model.AssessmentResponseBulkCreatePayload, error) {
	if len(input) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateAssessmentResponse(ctx, input)
}
func (r *mutationResolver) CreateBulkCSVAssessmentResponse(ctx context.Context, input graphql.Upload) (*model.AssessmentResponseBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateAssessmentResponseInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	if len(data) == 0 {
		return nil, rout.NewMissingRequiredFieldError("input")
	}

	return r.bulkCreateAssessmentResponse(ctx, data)
}
func (r *mutationResolver) DeleteAssessmentResponse(ctx context.Context, id string) (*model.AssessmentResponseDeletePayload, error) {
	if err := withTransactionalMutation(ctx).AssessmentResponse.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "assessmentresponse"})
	}

	if err := generated.AssessmentResponseEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.AssessmentResponseDeletePayload{
		DeletedID: id,
	}, nil
}
*/
