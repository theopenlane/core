package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
)

// CreatePersonalAccessToken is the resolver for the createPersonalAccessToken field.
func (r *mutationResolver) CreatePersonalAccessToken(ctx context.Context, input generated.CreatePersonalAccessTokenInput) (*model.PersonalAccessTokenCreatePayload, error) {
	// grab preloads and set max result limits
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	res, err := withTransactionalMutation(ctx).PersonalAccessToken.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "personalaccesstoken"})
	}

	return &model.PersonalAccessTokenCreatePayload{
		PersonalAccessToken: res,
	}, nil
}

// UpdatePersonalAccessToken is the resolver for the updatePersonalAccessToken field.
func (r *mutationResolver) UpdatePersonalAccessToken(ctx context.Context, id string, input generated.UpdatePersonalAccessTokenInput) (*model.PersonalAccessTokenUpdatePayload, error) {
	// grab preloads and set max result limits
	graphutils.GetPreloads(ctx, r.maxResultLimit)

	res, err := withTransactionalMutation(ctx).PersonalAccessToken.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "personalaccesstoken"})
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags).AppendScopes(input.AppendScopes)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "personalaccesstoken"})
	}

	return &model.PersonalAccessTokenUpdatePayload{
		PersonalAccessToken: res,
	}, nil
}

// DeletePersonalAccessToken is the resolver for the deletePersonalAccessToken field.
func (r *mutationResolver) DeletePersonalAccessToken(ctx context.Context, id string) (*model.PersonalAccessTokenDeletePayload, error) {
	if err := withTransactionalMutation(ctx).PersonalAccessToken.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "personalaccesstoken"})
	}

	if err := generated.PersonalAccessTokenEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.PersonalAccessTokenDeletePayload{
		DeletedID: id,
	}, nil
}

// PersonalAccessToken is the resolver for the personalAccessToken field.
func (r *queryResolver) PersonalAccessToken(ctx context.Context, id string) (*generated.PersonalAccessToken, error) {
	// determine all fields that were requested
	preloads := graphutils.GetPreloads(ctx, r.maxResultLimit)

	query, err := withTransactionalMutation(ctx).PersonalAccessToken.Query().Where(personalaccesstoken.ID(id)).CollectFields(ctx, preloads...)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "personalaccesstoken"})
	}

	res, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "personalaccesstoken"})
	}

	return res, nil
}
