package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/utils/rout"
)

// CreateControlObjective is the resolver for the createControlObjective field.
func (r *mutationResolver) CreateControlObjective(ctx context.Context, input generated.CreateControlObjectiveInput) (*model.ControlObjectiveCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.NewMissingRequiredFieldError("organization_id")
	}

	res, err := withTransactionalMutation(ctx).ControlObjective.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "controlobjective"})
	}

	return &model.ControlObjectiveCreatePayload{
		ControlObjective: res,
	}, nil
}

// CreateBulkControlObjective is the resolver for the createBulkControlObjective field.
func (r *mutationResolver) CreateBulkControlObjective(ctx context.Context, input []*generated.CreateControlObjectiveInput) (*model.ControlObjectiveBulkCreatePayload, error) {
	return r.bulkCreateControlObjective(ctx, input)
}

// CreateBulkCSVControlObjective is the resolver for the createBulkCSVControlObjective field.
func (r *mutationResolver) CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload) (*model.ControlObjectiveBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateControlObjectiveInput](input)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal bulk data")

		return nil, err
	}

	return r.bulkCreateControlObjective(ctx, data)
}

// UpdateControlObjective is the resolver for the updateControlObjective field.
func (r *mutationResolver) UpdateControlObjective(ctx context.Context, id string, input generated.UpdateControlObjectiveInput) (*model.ControlObjectiveUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).ControlObjective.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "controlobjective"})
	}

	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		log.Error().Err(err).Msg("failed to set organization in auth context")

		return nil, rout.ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "controlobjective"})
	}

	return &model.ControlObjectiveUpdatePayload{
		ControlObjective: res,
	}, nil
}

// DeleteControlObjective is the resolver for the deleteControlObjective field.
func (r *mutationResolver) DeleteControlObjective(ctx context.Context, id string) (*model.ControlObjectiveDeletePayload, error) {
	if err := withTransactionalMutation(ctx).ControlObjective.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "controlobjective"})
	}

	if err := generated.ControlObjectiveEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &model.ControlObjectiveDeletePayload{
		DeletedID: id,
	}, nil
}

// ControlObjective is the resolver for the controlObjective field.
func (r *queryResolver) ControlObjective(ctx context.Context, id string) (*generated.ControlObjective, error) {
	res, err := withTransactionalMutation(ctx).ControlObjective.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "controlobjective"})
	}

	return res, nil
}
