package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated"
	entorg "github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/privacy"
	"github.com/theopenlane/core/internal/graphapi/model"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/gqlgen-plugins/graphutils"
	"github.com/theopenlane/iam/auth"
)

// CreateOrganizationWithMembers is the resolver for the createOrganizationWithMembers field.
func (r *mutationResolver) CreateOrganizationWithMembers(ctx context.Context, organizationInput generated.CreateOrganizationInput, avatarFile *graphql.Upload, members []*model.OrgMembersInput) (*model.OrganizationCreatePayload, error) {
	res, err := r.CreateOrganization(ctx, organizationInput, nil)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "organization"})
	}

	memberInput := make([]*generated.CreateOrgMembershipInput, len(members))

	for i, member := range members {
		memberInput[i] = &generated.CreateOrgMembershipInput{
			OrganizationID: res.Organization.ID,
			UserID:         member.UserID,
			Role:           member.Role,
		}
	}

	if _, err := r.CreateBulkOrgMembership(ctx, memberInput); err != nil {
		return nil, err
	}

	query, err := withTransactionalMutation(ctx).Organization.
		Query().
		WithMembers().
		Where(entorg.IDEQ(res.Organization.ID)).
		CollectFields(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "group"})
	}

	finalResult, err := query.Only(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "organization"})
	}

	return &model.OrganizationCreatePayload{
		Organization: finalResult,
	}, nil
}

// TransferOrganizationOwnership is the resolver for the transferOrganizationOwnership field.
func (r *mutationResolver) TransferOrganizationOwnership(ctx context.Context, organizationID string, newOwnerID string) (*model.OrganizationTransferOwnershipPayload, error) {
	// Step 1: Get current user from context
	currentUserID, err := auth.GetSubjectIDFromContext(ctx)
	if err != nil {
		log.Error().Err(err).Msg("unable to get current user from context")
		return nil, ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	// Step 2: Verify organization exists
	org, err := c.Organization.Get(ctx, organizationID)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organization"})
	}

	// Step 3: Verify current user is the owner
	currentUserMembership, err := c.OrgMembership.Query().
		Where(
			orgmembership.OrganizationID(organizationID),
			orgmembership.UserID(currentUserID),
		).
		Only(ctx)
	if err != nil {
		log.Error().Err(err).Msg("unable to find current user's membership")
		return nil, newNotFoundError("org_membership")
	}

	if currentUserMembership.Role != enums.RoleOwner {
		log.Info().
			Str("user_id", currentUserID).
			Str("organization_id", organizationID).
			Str("role", currentUserMembership.Role.String()).
			Msg("user attempted to transfer ownership without being owner")
		return nil, newPermissionDeniedError()
	}

	// Step 4: Verify new owner user exists
	allowCtx := privacy.DecisionContext(ctx, privacy.Allow)
	newOwnerUser, err := c.User.Get(allowCtx, newOwnerID)
	if err != nil {
		log.Error().Err(err).Str("new_owner_id", newOwnerID).Msg("new owner user not found")
		return nil, newNotFoundError("user")
	}

	// Step 5: Check if new owner is already a member
	newOwnerMembership, err := c.OrgMembership.Query().
		Where(
			orgmembership.OrganizationID(organizationID),
			orgmembership.UserID(newOwnerID),
		).
		First(ctx)

	invitationSent := false

	if err != nil {
		// User is not a member - create an invite with ownership_transfer=true
		log.Info().
			Str("new_owner_id", newOwnerID).
			Str("organization_id", organizationID).
			Msg("new owner not a member, creating ownership transfer invitation")

		ownerRole := enums.RoleOwner
		ownershipTransfer := true

		inviteInput := generated.CreateInviteInput{
			Recipient:         newOwnerUser.Email,
			Role:              &ownerRole,
			OwnerID:           &organizationID,
			OwnershipTransfer: &ownershipTransfer,
		}

		if _, err := c.Invite.Create().SetInput(inviteInput).Save(ctx); err != nil {
			log.Error().Err(err).Msg("unable to create ownership transfer invitation")
			return nil, parseRequestError(err, action{action: ActionCreate, object: "invite"})
		}

		invitationSent = true
	} else {
		// User is already a member - directly update roles
		log.Info().
			Str("new_owner_id", newOwnerID).
			Str("organization_id", organizationID).
			Msg("new owner already a member, directly transferring ownership")

		// Update new owner to OWNER role
		// Use allowCtx to bypass privacy restrictions since this is an authorized ownership transfer
		newRole := enums.RoleOwner
		if err := c.OrgMembership.UpdateOneID(newOwnerMembership.ID).
			SetRole(newRole).
			Exec(allowCtx); err != nil {
			log.Error().Err(err).Msg("unable to update new owner role")
			return nil, parseRequestError(err, action{action: ActionUpdate, object: "org_membership"})
		}

		// Update current owner to ADMIN role
		adminRole := enums.RoleAdmin
		if err := c.OrgMembership.UpdateOneID(currentUserMembership.ID).
			SetRole(adminRole).
			Exec(allowCtx); err != nil {
			log.Error().Err(err).Msg("unable to demote current owner to admin")
			return nil, parseRequestError(err, action{action: ActionUpdate, object: "org_membership"})
		}

		log.Info().
			Str("organization_id", organizationID).
			Str("old_owner_id", currentUserID).
			Str("new_owner_id", newOwnerID).
			Msg("organization ownership transferred successfully")
	}

	return &model.OrganizationTransferOwnershipPayload{
		Organization:   org,
		InvitationSent: invitationSent,
	}, nil
}

// CreateOrgSettings is the resolver for the createOrgSettings field.
func (r *createOrganizationInputResolver) CreateOrgSettings(ctx context.Context, obj *generated.CreateOrganizationInput, data *generated.CreateOrganizationSettingInput) error {
	c := withTransactionalMutation(ctx)

	orgSettings, err := c.OrganizationSetting.Create().SetInput(*data).Save(ctx)
	if err != nil {
		return parseRequestError(err, action{action: ActionCreate, object: "organization"})
	}

	obj.SettingID = &orgSettings.ID

	return nil
}

// AddOrgMembers is the resolver for the addOrgMembers field.
func (r *updateOrganizationInputResolver) AddOrgMembers(ctx context.Context, obj *generated.UpdateOrganizationInput, data []*generated.CreateOrgMembershipInput) error {
	orgID := graphutils.GetStringInputVariableByName(ctx, "id")
	if orgID == nil {
		log.Error().Msg("unable to get org from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)
	builders := make([]*generated.OrgMembershipCreate, len(data))
	for i := range data {
		input := *data[i]
		input.OrganizationID = *orgID
		builders[i] = c.OrgMembership.Create().SetInput(input)
	}

	if err := c.OrgMembership.CreateBulk(builders...).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionUpdate, object: "organization"})
	}

	return nil
}

// RemoveOrgMembers is the resolver for the removeOrgMembers field.
func (r *updateOrganizationInputResolver) RemoveOrgMembers(ctx context.Context, obj *generated.UpdateOrganizationInput, data []string) error {
	orgID := graphutils.GetStringInputVariableByName(ctx, "id")
	if orgID == nil {
		log.Error().Msg("unable to get org from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	_, err := c.OrgMembership.Delete().Where(
		orgmembership.OrganizationID(*orgID),
		orgmembership.IDIn(data...),
	).Exec(ctx)
	if err != nil {
		return parseRequestError(err, action{action: ActionUpdate, object: "organization"})
	}

	return nil
}

// UpdateOrgSettings is the resolver for the updateOrgSettings field.
func (r *updateOrganizationInputResolver) UpdateOrgSettings(ctx context.Context, obj *generated.UpdateOrganizationInput, data *generated.UpdateOrganizationSettingInput) error {
	orgID := graphutils.GetStringInputVariableByName(ctx, "id")
	if orgID == nil {
		log.Error().Msg("unable to get org from context")

		return ErrInternalServerError
	}

	c := withTransactionalMutation(ctx)

	// get setting ID to Update
	settingID := obj.SettingID
	if settingID == nil {
		org, err := c.Organization.Get(ctx, *orgID)
		if err != nil {
			return parseRequestError(err, action{action: ActionUpdate, object: "organization"})
		}

		setting, err := org.Setting(ctx)
		if err != nil {
			return parseRequestError(err, action{action: ActionUpdate, object: "organization"})
		}

		settingID = &setting.ID
	}

	if err := c.OrganizationSetting.UpdateOneID(*settingID).SetInput(*data).Exec(ctx); err != nil {
		return parseRequestError(err, action{action: ActionUpdate, object: "organization"})
	}

	return nil
}
