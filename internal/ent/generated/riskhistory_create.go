// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// RiskHistoryCreate is the builder for creating a RiskHistory entity.
type RiskHistoryCreate struct {
	config
	mutation *RiskHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (rhc *RiskHistoryCreate) SetHistoryTime(t time.Time) *RiskHistoryCreate {
	rhc.mutation.SetHistoryTime(t)
	return rhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableHistoryTime(t *time.Time) *RiskHistoryCreate {
	if t != nil {
		rhc.SetHistoryTime(*t)
	}
	return rhc
}

// SetRef sets the "ref" field.
func (rhc *RiskHistoryCreate) SetRef(s string) *RiskHistoryCreate {
	rhc.mutation.SetRef(s)
	return rhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableRef(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetRef(*s)
	}
	return rhc
}

// SetOperation sets the "operation" field.
func (rhc *RiskHistoryCreate) SetOperation(ht history.OpType) *RiskHistoryCreate {
	rhc.mutation.SetOperation(ht)
	return rhc
}

// SetCreatedAt sets the "created_at" field.
func (rhc *RiskHistoryCreate) SetCreatedAt(t time.Time) *RiskHistoryCreate {
	rhc.mutation.SetCreatedAt(t)
	return rhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableCreatedAt(t *time.Time) *RiskHistoryCreate {
	if t != nil {
		rhc.SetCreatedAt(*t)
	}
	return rhc
}

// SetUpdatedAt sets the "updated_at" field.
func (rhc *RiskHistoryCreate) SetUpdatedAt(t time.Time) *RiskHistoryCreate {
	rhc.mutation.SetUpdatedAt(t)
	return rhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableUpdatedAt(t *time.Time) *RiskHistoryCreate {
	if t != nil {
		rhc.SetUpdatedAt(*t)
	}
	return rhc
}

// SetCreatedBy sets the "created_by" field.
func (rhc *RiskHistoryCreate) SetCreatedBy(s string) *RiskHistoryCreate {
	rhc.mutation.SetCreatedBy(s)
	return rhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableCreatedBy(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetCreatedBy(*s)
	}
	return rhc
}

// SetUpdatedBy sets the "updated_by" field.
func (rhc *RiskHistoryCreate) SetUpdatedBy(s string) *RiskHistoryCreate {
	rhc.mutation.SetUpdatedBy(s)
	return rhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableUpdatedBy(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetUpdatedBy(*s)
	}
	return rhc
}

// SetDeletedAt sets the "deleted_at" field.
func (rhc *RiskHistoryCreate) SetDeletedAt(t time.Time) *RiskHistoryCreate {
	rhc.mutation.SetDeletedAt(t)
	return rhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableDeletedAt(t *time.Time) *RiskHistoryCreate {
	if t != nil {
		rhc.SetDeletedAt(*t)
	}
	return rhc
}

// SetDeletedBy sets the "deleted_by" field.
func (rhc *RiskHistoryCreate) SetDeletedBy(s string) *RiskHistoryCreate {
	rhc.mutation.SetDeletedBy(s)
	return rhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableDeletedBy(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetDeletedBy(*s)
	}
	return rhc
}

// SetDisplayID sets the "display_id" field.
func (rhc *RiskHistoryCreate) SetDisplayID(s string) *RiskHistoryCreate {
	rhc.mutation.SetDisplayID(s)
	return rhc
}

// SetTags sets the "tags" field.
func (rhc *RiskHistoryCreate) SetTags(s []string) *RiskHistoryCreate {
	rhc.mutation.SetTags(s)
	return rhc
}

// SetOwnerID sets the "owner_id" field.
func (rhc *RiskHistoryCreate) SetOwnerID(s string) *RiskHistoryCreate {
	rhc.mutation.SetOwnerID(s)
	return rhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableOwnerID(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetOwnerID(*s)
	}
	return rhc
}

// SetName sets the "name" field.
func (rhc *RiskHistoryCreate) SetName(s string) *RiskHistoryCreate {
	rhc.mutation.SetName(s)
	return rhc
}

// SetDescription sets the "description" field.
func (rhc *RiskHistoryCreate) SetDescription(s string) *RiskHistoryCreate {
	rhc.mutation.SetDescription(s)
	return rhc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableDescription(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetDescription(*s)
	}
	return rhc
}

// SetStatus sets the "status" field.
func (rhc *RiskHistoryCreate) SetStatus(s string) *RiskHistoryCreate {
	rhc.mutation.SetStatus(s)
	return rhc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableStatus(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetStatus(*s)
	}
	return rhc
}

// SetRiskType sets the "risk_type" field.
func (rhc *RiskHistoryCreate) SetRiskType(s string) *RiskHistoryCreate {
	rhc.mutation.SetRiskType(s)
	return rhc
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableRiskType(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetRiskType(*s)
	}
	return rhc
}

// SetBusinessCosts sets the "business_costs" field.
func (rhc *RiskHistoryCreate) SetBusinessCosts(s string) *RiskHistoryCreate {
	rhc.mutation.SetBusinessCosts(s)
	return rhc
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableBusinessCosts(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetBusinessCosts(*s)
	}
	return rhc
}

// SetImpact sets the "impact" field.
func (rhc *RiskHistoryCreate) SetImpact(ei enums.RiskImpact) *RiskHistoryCreate {
	rhc.mutation.SetImpact(ei)
	return rhc
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableImpact(ei *enums.RiskImpact) *RiskHistoryCreate {
	if ei != nil {
		rhc.SetImpact(*ei)
	}
	return rhc
}

// SetLikelihood sets the "likelihood" field.
func (rhc *RiskHistoryCreate) SetLikelihood(el enums.RiskLikelihood) *RiskHistoryCreate {
	rhc.mutation.SetLikelihood(el)
	return rhc
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskHistoryCreate {
	if el != nil {
		rhc.SetLikelihood(*el)
	}
	return rhc
}

// SetMitigation sets the "mitigation" field.
func (rhc *RiskHistoryCreate) SetMitigation(s string) *RiskHistoryCreate {
	rhc.mutation.SetMitigation(s)
	return rhc
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableMitigation(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetMitigation(*s)
	}
	return rhc
}

// SetSatisfies sets the "satisfies" field.
func (rhc *RiskHistoryCreate) SetSatisfies(s string) *RiskHistoryCreate {
	rhc.mutation.SetSatisfies(s)
	return rhc
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableSatisfies(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetSatisfies(*s)
	}
	return rhc
}

// SetDetails sets the "details" field.
func (rhc *RiskHistoryCreate) SetDetails(m map[string]interface{}) *RiskHistoryCreate {
	rhc.mutation.SetDetails(m)
	return rhc
}

// SetID sets the "id" field.
func (rhc *RiskHistoryCreate) SetID(s string) *RiskHistoryCreate {
	rhc.mutation.SetID(s)
	return rhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rhc *RiskHistoryCreate) SetNillableID(s *string) *RiskHistoryCreate {
	if s != nil {
		rhc.SetID(*s)
	}
	return rhc
}

// Mutation returns the RiskHistoryMutation object of the builder.
func (rhc *RiskHistoryCreate) Mutation() *RiskHistoryMutation {
	return rhc.mutation
}

// Save creates the RiskHistory in the database.
func (rhc *RiskHistoryCreate) Save(ctx context.Context) (*RiskHistory, error) {
	rhc.defaults()
	return withHooks(ctx, rhc.sqlSave, rhc.mutation, rhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rhc *RiskHistoryCreate) SaveX(ctx context.Context) *RiskHistory {
	v, err := rhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rhc *RiskHistoryCreate) Exec(ctx context.Context) error {
	_, err := rhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhc *RiskHistoryCreate) ExecX(ctx context.Context) {
	if err := rhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rhc *RiskHistoryCreate) defaults() {
	if _, ok := rhc.mutation.HistoryTime(); !ok {
		v := riskhistory.DefaultHistoryTime()
		rhc.mutation.SetHistoryTime(v)
	}
	if _, ok := rhc.mutation.CreatedAt(); !ok {
		v := riskhistory.DefaultCreatedAt()
		rhc.mutation.SetCreatedAt(v)
	}
	if _, ok := rhc.mutation.UpdatedAt(); !ok {
		v := riskhistory.DefaultUpdatedAt()
		rhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rhc.mutation.Tags(); !ok {
		v := riskhistory.DefaultTags
		rhc.mutation.SetTags(v)
	}
	if _, ok := rhc.mutation.Impact(); !ok {
		v := riskhistory.DefaultImpact
		rhc.mutation.SetImpact(v)
	}
	if _, ok := rhc.mutation.Likelihood(); !ok {
		v := riskhistory.DefaultLikelihood
		rhc.mutation.SetLikelihood(v)
	}
	if _, ok := rhc.mutation.ID(); !ok {
		v := riskhistory.DefaultID()
		rhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rhc *RiskHistoryCreate) check() error {
	if _, ok := rhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "RiskHistory.history_time"`)}
	}
	if _, ok := rhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "RiskHistory.operation"`)}
	}
	if v, ok := rhc.mutation.Operation(); ok {
		if err := riskhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.operation": %w`, err)}
		}
	}
	if _, ok := rhc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "RiskHistory.display_id"`)}
	}
	if _, ok := rhc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "RiskHistory.name"`)}
	}
	if v, ok := rhc.mutation.Impact(); ok {
		if err := riskhistory.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.impact": %w`, err)}
		}
	}
	if v, ok := rhc.mutation.Likelihood(); ok {
		if err := riskhistory.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.likelihood": %w`, err)}
		}
	}
	return nil
}

func (rhc *RiskHistoryCreate) sqlSave(ctx context.Context) (*RiskHistory, error) {
	if err := rhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RiskHistory.ID type: %T", _spec.ID.Value)
		}
	}
	rhc.mutation.id = &_node.ID
	rhc.mutation.done = true
	return _node, nil
}

func (rhc *RiskHistoryCreate) createSpec() (*RiskHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &RiskHistory{config: rhc.config}
		_spec = sqlgraph.NewCreateSpec(riskhistory.Table, sqlgraph.NewFieldSpec(riskhistory.FieldID, field.TypeString))
	)
	_spec.Schema = rhc.schemaConfig.RiskHistory
	if id, ok := rhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rhc.mutation.HistoryTime(); ok {
		_spec.SetField(riskhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := rhc.mutation.Ref(); ok {
		_spec.SetField(riskhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := rhc.mutation.Operation(); ok {
		_spec.SetField(riskhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := rhc.mutation.CreatedAt(); ok {
		_spec.SetField(riskhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rhc.mutation.UpdatedAt(); ok {
		_spec.SetField(riskhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rhc.mutation.CreatedBy(); ok {
		_spec.SetField(riskhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rhc.mutation.UpdatedBy(); ok {
		_spec.SetField(riskhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := rhc.mutation.DeletedAt(); ok {
		_spec.SetField(riskhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rhc.mutation.DeletedBy(); ok {
		_spec.SetField(riskhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := rhc.mutation.DisplayID(); ok {
		_spec.SetField(riskhistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := rhc.mutation.Tags(); ok {
		_spec.SetField(riskhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := rhc.mutation.OwnerID(); ok {
		_spec.SetField(riskhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := rhc.mutation.Name(); ok {
		_spec.SetField(riskhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rhc.mutation.Description(); ok {
		_spec.SetField(riskhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rhc.mutation.Status(); ok {
		_spec.SetField(riskhistory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rhc.mutation.RiskType(); ok {
		_spec.SetField(riskhistory.FieldRiskType, field.TypeString, value)
		_node.RiskType = value
	}
	if value, ok := rhc.mutation.BusinessCosts(); ok {
		_spec.SetField(riskhistory.FieldBusinessCosts, field.TypeString, value)
		_node.BusinessCosts = value
	}
	if value, ok := rhc.mutation.Impact(); ok {
		_spec.SetField(riskhistory.FieldImpact, field.TypeEnum, value)
		_node.Impact = value
	}
	if value, ok := rhc.mutation.Likelihood(); ok {
		_spec.SetField(riskhistory.FieldLikelihood, field.TypeEnum, value)
		_node.Likelihood = value
	}
	if value, ok := rhc.mutation.Mitigation(); ok {
		_spec.SetField(riskhistory.FieldMitigation, field.TypeString, value)
		_node.Mitigation = value
	}
	if value, ok := rhc.mutation.Satisfies(); ok {
		_spec.SetField(riskhistory.FieldSatisfies, field.TypeString, value)
		_node.Satisfies = value
	}
	if value, ok := rhc.mutation.Details(); ok {
		_spec.SetField(riskhistory.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	return _node, _spec
}

// RiskHistoryCreateBulk is the builder for creating many RiskHistory entities in bulk.
type RiskHistoryCreateBulk struct {
	config
	err      error
	builders []*RiskHistoryCreate
}

// Save creates the RiskHistory entities in the database.
func (rhcb *RiskHistoryCreateBulk) Save(ctx context.Context) ([]*RiskHistory, error) {
	if rhcb.err != nil {
		return nil, rhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rhcb.builders))
	nodes := make([]*RiskHistory, len(rhcb.builders))
	mutators := make([]Mutator, len(rhcb.builders))
	for i := range rhcb.builders {
		func(i int, root context.Context) {
			builder := rhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiskHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rhcb *RiskHistoryCreateBulk) SaveX(ctx context.Context) []*RiskHistory {
	v, err := rhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rhcb *RiskHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhcb *RiskHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := rhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
