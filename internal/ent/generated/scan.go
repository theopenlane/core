// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/pkg/enums"
)

// Scan is the model entity for the Scan schema.
type Scan struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the target of the scan, e.g., a domain name or IP address, codebase
	Target string `json:"target,omitempty"`
	// the type of scan, e.g., domain scan, vulnerability scan, provider scan
	ScanType enums.ScanType `json:"scan_type,omitempty"`
	// additional metadata for the scan, e.g., scan configuration, options, etc
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// the status of the scan, e.g., processing, completed, failed
	Status enums.ScanStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScanQuery when eager-loading is set.
	Edges         ScanEdges `json:"edges"`
	control_scans *string
	entity_scans  *string
	risk_scans    *string
	selectValues  sql.SelectValues
}

// ScanEdges holds the relations/edges for other nodes in the graph.
type ScanEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// Assets holds the value of the assets edge.
	Assets []*Asset `json:"assets,omitempty"`
	// Entities holds the value of the entities edge.
	Entities []*Entity `json:"entities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedBlockedGroups map[string][]*Group
	namedEditors       map[string][]*Group
	namedViewers       map[string][]*Group
	namedAssets        map[string][]*Asset
	namedEntities      map[string][]*Entity
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScanEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// AssetsOrErr returns the Assets value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) AssetsOrErr() ([]*Asset, error) {
	if e.loadedTypes[4] {
		return e.Assets, nil
	}
	return nil, &NotLoadedError{edge: "assets"}
}

// EntitiesOrErr returns the Entities value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) EntitiesOrErr() ([]*Entity, error) {
	if e.loadedTypes[5] {
		return e.Entities, nil
	}
	return nil, &NotLoadedError{edge: "entities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scan.FieldTags, scan.FieldMetadata:
			values[i] = new([]byte)
		case scan.FieldID, scan.FieldCreatedBy, scan.FieldUpdatedBy, scan.FieldDeletedBy, scan.FieldOwnerID, scan.FieldTarget, scan.FieldScanType, scan.FieldStatus:
			values[i] = new(sql.NullString)
		case scan.FieldCreatedAt, scan.FieldUpdatedAt, scan.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case scan.ForeignKeys[0]: // control_scans
			values[i] = new(sql.NullString)
		case scan.ForeignKeys[1]: // entity_scans
			values[i] = new(sql.NullString)
		case scan.ForeignKeys[2]: // risk_scans
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scan fields.
func (_m *Scan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scan.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case scan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case scan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case scan.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case scan.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case scan.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case scan.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case scan.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case scan.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case scan.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				_m.Target = value.String
			}
		case scan.FieldScanType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scan_type", values[i])
			} else if value.Valid {
				_m.ScanType = enums.ScanType(value.String)
			}
		case scan.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case scan.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.ScanStatus(value.String)
			}
		case scan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_scans", values[i])
			} else if value.Valid {
				_m.control_scans = new(string)
				*_m.control_scans = value.String
			}
		case scan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_scans", values[i])
			} else if value.Valid {
				_m.entity_scans = new(string)
				*_m.entity_scans = value.String
			}
		case scan.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field risk_scans", values[i])
			} else if value.Valid {
				_m.risk_scans = new(string)
				*_m.risk_scans = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Scan.
// This includes values selected through modifiers, order, etc.
func (_m *Scan) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Scan entity.
func (_m *Scan) QueryOwner() *OrganizationQuery {
	return NewScanClient(_m.config).QueryOwner(_m)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the Scan entity.
func (_m *Scan) QueryBlockedGroups() *GroupQuery {
	return NewScanClient(_m.config).QueryBlockedGroups(_m)
}

// QueryEditors queries the "editors" edge of the Scan entity.
func (_m *Scan) QueryEditors() *GroupQuery {
	return NewScanClient(_m.config).QueryEditors(_m)
}

// QueryViewers queries the "viewers" edge of the Scan entity.
func (_m *Scan) QueryViewers() *GroupQuery {
	return NewScanClient(_m.config).QueryViewers(_m)
}

// QueryAssets queries the "assets" edge of the Scan entity.
func (_m *Scan) QueryAssets() *AssetQuery {
	return NewScanClient(_m.config).QueryAssets(_m)
}

// QueryEntities queries the "entities" edge of the Scan entity.
func (_m *Scan) QueryEntities() *EntityQuery {
	return NewScanClient(_m.config).QueryEntities(_m)
}

// Update returns a builder for updating this Scan.
// Note that you need to call Scan.Unwrap() before calling this method if this Scan
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Scan) Update() *ScanUpdateOne {
	return NewScanClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Scan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Scan) Unwrap() *Scan {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Scan is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Scan) String() string {
	var builder strings.Builder
	builder.WriteString("Scan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("target=")
	builder.WriteString(_m.Target)
	builder.WriteString(", ")
	builder.WriteString("scan_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.ScanType))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Scan) NamedBlockedGroups(name string) ([]*Group, error) {
	if _m.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Scan) appendNamedBlockedGroups(name string, edges ...*Group) {
	if _m.Edges.namedBlockedGroups == nil {
		_m.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		_m.Edges.namedBlockedGroups[name] = append(_m.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Scan) NamedEditors(name string) ([]*Group, error) {
	if _m.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Scan) appendNamedEditors(name string, edges ...*Group) {
	if _m.Edges.namedEditors == nil {
		_m.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedEditors[name] = []*Group{}
	} else {
		_m.Edges.namedEditors[name] = append(_m.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Scan) NamedViewers(name string) ([]*Group, error) {
	if _m.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Scan) appendNamedViewers(name string, edges ...*Group) {
	if _m.Edges.namedViewers == nil {
		_m.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedViewers[name] = []*Group{}
	} else {
		_m.Edges.namedViewers[name] = append(_m.Edges.namedViewers[name], edges...)
	}
}

// NamedAssets returns the Assets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Scan) NamedAssets(name string) ([]*Asset, error) {
	if _m.Edges.namedAssets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedAssets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Scan) appendNamedAssets(name string, edges ...*Asset) {
	if _m.Edges.namedAssets == nil {
		_m.Edges.namedAssets = make(map[string][]*Asset)
	}
	if len(edges) == 0 {
		_m.Edges.namedAssets[name] = []*Asset{}
	} else {
		_m.Edges.namedAssets[name] = append(_m.Edges.namedAssets[name], edges...)
	}
}

// NamedEntities returns the Entities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Scan) NamedEntities(name string) ([]*Entity, error) {
	if _m.Edges.namedEntities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEntities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Scan) appendNamedEntities(name string, edges ...*Entity) {
	if _m.Edges.namedEntities == nil {
		_m.Edges.namedEntities = make(map[string][]*Entity)
	}
	if len(edges) == 0 {
		_m.Edges.namedEntities[name] = []*Entity{}
	} else {
		_m.Edges.namedEntities[name] = append(_m.Edges.namedEntities[name], edges...)
	}
}

// Scans is a parsable slice of Scan.
type Scans []*Scan
