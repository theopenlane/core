// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
)

// EvidenceCreate is the builder for creating a Evidence entity.
type EvidenceCreate struct {
	config
	mutation *EvidenceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *EvidenceCreate) SetCreatedAt(v time.Time) *EvidenceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableCreatedAt(v *time.Time) *EvidenceCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *EvidenceCreate) SetUpdatedAt(v time.Time) *EvidenceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableUpdatedAt(v *time.Time) *EvidenceCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *EvidenceCreate) SetCreatedBy(v string) *EvidenceCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableCreatedBy(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *EvidenceCreate) SetUpdatedBy(v string) *EvidenceCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableUpdatedBy(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *EvidenceCreate) SetDeletedAt(v time.Time) *EvidenceCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableDeletedAt(v *time.Time) *EvidenceCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *EvidenceCreate) SetDeletedBy(v string) *EvidenceCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableDeletedBy(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *EvidenceCreate) SetDisplayID(v string) *EvidenceCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *EvidenceCreate) SetTags(v []string) *EvidenceCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *EvidenceCreate) SetOwnerID(v string) *EvidenceCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableOwnerID(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *EvidenceCreate) SetName(v string) *EvidenceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *EvidenceCreate) SetDescription(v string) *EvidenceCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableDescription(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (_c *EvidenceCreate) SetCollectionProcedure(v string) *EvidenceCreate {
	_c.mutation.SetCollectionProcedure(v)
	return _c
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableCollectionProcedure(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetCollectionProcedure(*v)
	}
	return _c
}

// SetCreationDate sets the "creation_date" field.
func (_c *EvidenceCreate) SetCreationDate(v time.Time) *EvidenceCreate {
	_c.mutation.SetCreationDate(v)
	return _c
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableCreationDate(v *time.Time) *EvidenceCreate {
	if v != nil {
		_c.SetCreationDate(*v)
	}
	return _c
}

// SetRenewalDate sets the "renewal_date" field.
func (_c *EvidenceCreate) SetRenewalDate(v time.Time) *EvidenceCreate {
	_c.mutation.SetRenewalDate(v)
	return _c
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableRenewalDate(v *time.Time) *EvidenceCreate {
	if v != nil {
		_c.SetRenewalDate(*v)
	}
	return _c
}

// SetSource sets the "source" field.
func (_c *EvidenceCreate) SetSource(v string) *EvidenceCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableSource(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetSource(*v)
	}
	return _c
}

// SetIsAutomated sets the "is_automated" field.
func (_c *EvidenceCreate) SetIsAutomated(v bool) *EvidenceCreate {
	_c.mutation.SetIsAutomated(v)
	return _c
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableIsAutomated(v *bool) *EvidenceCreate {
	if v != nil {
		_c.SetIsAutomated(*v)
	}
	return _c
}

// SetURL sets the "url" field.
func (_c *EvidenceCreate) SetURL(v string) *EvidenceCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableURL(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetURL(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *EvidenceCreate) SetStatus(v enums.EvidenceStatus) *EvidenceCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableStatus(v *enums.EvidenceStatus) *EvidenceCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *EvidenceCreate) SetID(v string) *EvidenceCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *EvidenceCreate) SetNillableID(v *string) *EvidenceCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *EvidenceCreate) SetOwner(v *Organization) *EvidenceCreate {
	return _c.SetOwnerID(v.ID)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_c *EvidenceCreate) AddControlObjectiveIDs(ids ...string) *EvidenceCreate {
	_c.mutation.AddControlObjectiveIDs(ids...)
	return _c
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_c *EvidenceCreate) AddControlObjectives(v ...*ControlObjective) *EvidenceCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_c *EvidenceCreate) AddControlImplementationIDs(ids ...string) *EvidenceCreate {
	_c.mutation.AddControlImplementationIDs(ids...)
	return _c
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_c *EvidenceCreate) AddControlImplementations(v ...*ControlImplementation) *EvidenceCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_c *EvidenceCreate) AddControlIDs(ids ...string) *EvidenceCreate {
	_c.mutation.AddControlIDs(ids...)
	return _c
}

// AddControls adds the "controls" edges to the Control entity.
func (_c *EvidenceCreate) AddControls(v ...*Control) *EvidenceCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *EvidenceCreate) AddSubcontrolIDs(ids ...string) *EvidenceCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *EvidenceCreate) AddSubcontrols(v ...*Subcontrol) *EvidenceCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *EvidenceCreate) AddFileIDs(ids ...string) *EvidenceCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *EvidenceCreate) AddFiles(v ...*File) *EvidenceCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *EvidenceCreate) AddProgramIDs(ids ...string) *EvidenceCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *EvidenceCreate) AddPrograms(v ...*Program) *EvidenceCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *EvidenceCreate) AddTaskIDs(ids ...string) *EvidenceCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *EvidenceCreate) AddTasks(v ...*Task) *EvidenceCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// Mutation returns the EvidenceMutation object of the builder.
func (_c *EvidenceCreate) Mutation() *EvidenceMutation {
	return _c.mutation
}

// Save creates the Evidence in the database.
func (_c *EvidenceCreate) Save(ctx context.Context) (*Evidence, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *EvidenceCreate) SaveX(ctx context.Context) *Evidence {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EvidenceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EvidenceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *EvidenceCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if evidence.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized evidence.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := evidence.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if evidence.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized evidence.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := evidence.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := evidence.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.CreationDate(); !ok {
		if evidence.DefaultCreationDate == nil {
			return fmt.Errorf("generated: uninitialized evidence.DefaultCreationDate (forgotten import generated/runtime?)")
		}
		v := evidence.DefaultCreationDate()
		_c.mutation.SetCreationDate(v)
	}
	if _, ok := _c.mutation.RenewalDate(); !ok {
		v := evidence.DefaultRenewalDate
		_c.mutation.SetRenewalDate(v)
	}
	if _, ok := _c.mutation.IsAutomated(); !ok {
		v := evidence.DefaultIsAutomated
		_c.mutation.SetIsAutomated(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := evidence.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if evidence.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized evidence.DefaultID (forgotten import generated/runtime?)")
		}
		v := evidence.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *EvidenceCreate) check() error {
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Evidence.display_id"`)}
	}
	if v, ok := _c.mutation.DisplayID(); ok {
		if err := evidence.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Evidence.display_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := evidence.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Evidence.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Evidence.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := evidence.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Evidence.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreationDate(); !ok {
		return &ValidationError{Name: "creation_date", err: errors.New(`generated: missing required field "Evidence.creation_date"`)}
	}
	if v, ok := _c.mutation.URL(); ok {
		if err := evidence.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "Evidence.url": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := evidence.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Evidence.status": %w`, err)}
		}
	}
	return nil
}

func (_c *EvidenceCreate) sqlSave(ctx context.Context) (*Evidence, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Evidence.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *EvidenceCreate) createSpec() (*Evidence, *sqlgraph.CreateSpec) {
	var (
		_node = &Evidence{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(evidence.Table, sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Evidence
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(evidence.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(evidence.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(evidence.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(evidence.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(evidence.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(evidence.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(evidence.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(evidence.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(evidence.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(evidence.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidence.FieldCollectionProcedure, field.TypeString, value)
		_node.CollectionProcedure = value
	}
	if value, ok := _c.mutation.CreationDate(); ok {
		_spec.SetField(evidence.FieldCreationDate, field.TypeTime, value)
		_node.CreationDate = value
	}
	if value, ok := _c.mutation.RenewalDate(); ok {
		_spec.SetField(evidence.FieldRenewalDate, field.TypeTime, value)
		_node.RenewalDate = value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(evidence.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := _c.mutation.IsAutomated(); ok {
		_spec.SetField(evidence.FieldIsAutomated, field.TypeBool, value)
		_node.IsAutomated = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(evidence.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(evidence.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evidence.OwnerTable,
			Columns: []string{evidence.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Evidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EvidenceControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TaskEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EvidenceCreateBulk is the builder for creating many Evidence entities in bulk.
type EvidenceCreateBulk struct {
	config
	err      error
	builders []*EvidenceCreate
}

// Save creates the Evidence entities in the database.
func (_c *EvidenceCreateBulk) Save(ctx context.Context) ([]*Evidence, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Evidence, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EvidenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *EvidenceCreateBulk) SaveX(ctx context.Context) []*Evidence {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EvidenceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EvidenceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
