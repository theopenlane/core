// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ActionPlanUpdate is the builder for updating ActionPlan entities.
type ActionPlanUpdate struct {
	config
	hooks     []Hook
	mutation  *ActionPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActionPlanUpdate builder.
func (apu *ActionPlanUpdate) Where(ps ...predicate.ActionPlan) *ActionPlanUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *ActionPlanUpdate) SetUpdatedAt(t time.Time) *ActionPlanUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apu *ActionPlanUpdate) ClearUpdatedAt() *ActionPlanUpdate {
	apu.mutation.ClearUpdatedAt()
	return apu
}

// SetUpdatedBy sets the "updated_by" field.
func (apu *ActionPlanUpdate) SetUpdatedBy(s string) *ActionPlanUpdate {
	apu.mutation.SetUpdatedBy(s)
	return apu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableUpdatedBy(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetUpdatedBy(*s)
	}
	return apu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apu *ActionPlanUpdate) ClearUpdatedBy() *ActionPlanUpdate {
	apu.mutation.ClearUpdatedBy()
	return apu
}

// SetDeletedAt sets the "deleted_at" field.
func (apu *ActionPlanUpdate) SetDeletedAt(t time.Time) *ActionPlanUpdate {
	apu.mutation.SetDeletedAt(t)
	return apu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDeletedAt(t *time.Time) *ActionPlanUpdate {
	if t != nil {
		apu.SetDeletedAt(*t)
	}
	return apu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (apu *ActionPlanUpdate) ClearDeletedAt() *ActionPlanUpdate {
	apu.mutation.ClearDeletedAt()
	return apu
}

// SetDeletedBy sets the "deleted_by" field.
func (apu *ActionPlanUpdate) SetDeletedBy(s string) *ActionPlanUpdate {
	apu.mutation.SetDeletedBy(s)
	return apu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDeletedBy(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetDeletedBy(*s)
	}
	return apu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (apu *ActionPlanUpdate) ClearDeletedBy() *ActionPlanUpdate {
	apu.mutation.ClearDeletedBy()
	return apu
}

// SetTags sets the "tags" field.
func (apu *ActionPlanUpdate) SetTags(s []string) *ActionPlanUpdate {
	apu.mutation.SetTags(s)
	return apu
}

// AppendTags appends s to the "tags" field.
func (apu *ActionPlanUpdate) AppendTags(s []string) *ActionPlanUpdate {
	apu.mutation.AppendTags(s)
	return apu
}

// ClearTags clears the value of the "tags" field.
func (apu *ActionPlanUpdate) ClearTags() *ActionPlanUpdate {
	apu.mutation.ClearTags()
	return apu
}

// SetRevision sets the "revision" field.
func (apu *ActionPlanUpdate) SetRevision(s string) *ActionPlanUpdate {
	apu.mutation.SetRevision(s)
	return apu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableRevision(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetRevision(*s)
	}
	return apu
}

// ClearRevision clears the value of the "revision" field.
func (apu *ActionPlanUpdate) ClearRevision() *ActionPlanUpdate {
	apu.mutation.ClearRevision()
	return apu
}

// SetName sets the "name" field.
func (apu *ActionPlanUpdate) SetName(s string) *ActionPlanUpdate {
	apu.mutation.SetName(s)
	return apu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableName(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetName(*s)
	}
	return apu
}

// SetStatus sets the "status" field.
func (apu *ActionPlanUpdate) SetStatus(es enums.DocumentStatus) *ActionPlanUpdate {
	apu.mutation.SetStatus(es)
	return apu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableStatus(es *enums.DocumentStatus) *ActionPlanUpdate {
	if es != nil {
		apu.SetStatus(*es)
	}
	return apu
}

// ClearStatus clears the value of the "status" field.
func (apu *ActionPlanUpdate) ClearStatus() *ActionPlanUpdate {
	apu.mutation.ClearStatus()
	return apu
}

// SetActionPlanType sets the "action_plan_type" field.
func (apu *ActionPlanUpdate) SetActionPlanType(s string) *ActionPlanUpdate {
	apu.mutation.SetActionPlanType(s)
	return apu
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableActionPlanType(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetActionPlanType(*s)
	}
	return apu
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (apu *ActionPlanUpdate) ClearActionPlanType() *ActionPlanUpdate {
	apu.mutation.ClearActionPlanType()
	return apu
}

// SetDetails sets the "details" field.
func (apu *ActionPlanUpdate) SetDetails(s string) *ActionPlanUpdate {
	apu.mutation.SetDetails(s)
	return apu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDetails(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetDetails(*s)
	}
	return apu
}

// ClearDetails clears the value of the "details" field.
func (apu *ActionPlanUpdate) ClearDetails() *ActionPlanUpdate {
	apu.mutation.ClearDetails()
	return apu
}

// SetApprovalRequired sets the "approval_required" field.
func (apu *ActionPlanUpdate) SetApprovalRequired(b bool) *ActionPlanUpdate {
	apu.mutation.SetApprovalRequired(b)
	return apu
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableApprovalRequired(b *bool) *ActionPlanUpdate {
	if b != nil {
		apu.SetApprovalRequired(*b)
	}
	return apu
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (apu *ActionPlanUpdate) ClearApprovalRequired() *ActionPlanUpdate {
	apu.mutation.ClearApprovalRequired()
	return apu
}

// SetReviewDue sets the "review_due" field.
func (apu *ActionPlanUpdate) SetReviewDue(t time.Time) *ActionPlanUpdate {
	apu.mutation.SetReviewDue(t)
	return apu
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableReviewDue(t *time.Time) *ActionPlanUpdate {
	if t != nil {
		apu.SetReviewDue(*t)
	}
	return apu
}

// ClearReviewDue clears the value of the "review_due" field.
func (apu *ActionPlanUpdate) ClearReviewDue() *ActionPlanUpdate {
	apu.mutation.ClearReviewDue()
	return apu
}

// SetReviewFrequency sets the "review_frequency" field.
func (apu *ActionPlanUpdate) SetReviewFrequency(e enums.Frequency) *ActionPlanUpdate {
	apu.mutation.SetReviewFrequency(e)
	return apu
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableReviewFrequency(e *enums.Frequency) *ActionPlanUpdate {
	if e != nil {
		apu.SetReviewFrequency(*e)
	}
	return apu
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (apu *ActionPlanUpdate) ClearReviewFrequency() *ActionPlanUpdate {
	apu.mutation.ClearReviewFrequency()
	return apu
}

// SetApproverID sets the "approver_id" field.
func (apu *ActionPlanUpdate) SetApproverID(s string) *ActionPlanUpdate {
	apu.mutation.SetApproverID(s)
	return apu
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableApproverID(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetApproverID(*s)
	}
	return apu
}

// ClearApproverID clears the value of the "approver_id" field.
func (apu *ActionPlanUpdate) ClearApproverID() *ActionPlanUpdate {
	apu.mutation.ClearApproverID()
	return apu
}

// SetDelegateID sets the "delegate_id" field.
func (apu *ActionPlanUpdate) SetDelegateID(s string) *ActionPlanUpdate {
	apu.mutation.SetDelegateID(s)
	return apu
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDelegateID(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetDelegateID(*s)
	}
	return apu
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (apu *ActionPlanUpdate) ClearDelegateID() *ActionPlanUpdate {
	apu.mutation.ClearDelegateID()
	return apu
}

// SetOwnerID sets the "owner_id" field.
func (apu *ActionPlanUpdate) SetOwnerID(s string) *ActionPlanUpdate {
	apu.mutation.SetOwnerID(s)
	return apu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableOwnerID(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetOwnerID(*s)
	}
	return apu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (apu *ActionPlanUpdate) ClearOwnerID() *ActionPlanUpdate {
	apu.mutation.ClearOwnerID()
	return apu
}

// SetDueDate sets the "due_date" field.
func (apu *ActionPlanUpdate) SetDueDate(t time.Time) *ActionPlanUpdate {
	apu.mutation.SetDueDate(t)
	return apu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDueDate(t *time.Time) *ActionPlanUpdate {
	if t != nil {
		apu.SetDueDate(*t)
	}
	return apu
}

// ClearDueDate clears the value of the "due_date" field.
func (apu *ActionPlanUpdate) ClearDueDate() *ActionPlanUpdate {
	apu.mutation.ClearDueDate()
	return apu
}

// SetPriority sets the "priority" field.
func (apu *ActionPlanUpdate) SetPriority(e enums.Priority) *ActionPlanUpdate {
	apu.mutation.SetPriority(e)
	return apu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillablePriority(e *enums.Priority) *ActionPlanUpdate {
	if e != nil {
		apu.SetPriority(*e)
	}
	return apu
}

// ClearPriority clears the value of the "priority" field.
func (apu *ActionPlanUpdate) ClearPriority() *ActionPlanUpdate {
	apu.mutation.ClearPriority()
	return apu
}

// SetSource sets the "source" field.
func (apu *ActionPlanUpdate) SetSource(s string) *ActionPlanUpdate {
	apu.mutation.SetSource(s)
	return apu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableSource(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetSource(*s)
	}
	return apu
}

// ClearSource clears the value of the "source" field.
func (apu *ActionPlanUpdate) ClearSource() *ActionPlanUpdate {
	apu.mutation.ClearSource()
	return apu
}

// SetApprover sets the "approver" edge to the Group entity.
func (apu *ActionPlanUpdate) SetApprover(g *Group) *ActionPlanUpdate {
	return apu.SetApproverID(g.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (apu *ActionPlanUpdate) SetDelegate(g *Group) *ActionPlanUpdate {
	return apu.SetDelegateID(g.ID)
}

// SetOwner sets the "owner" edge to the Organization entity.
func (apu *ActionPlanUpdate) SetOwner(o *Organization) *ActionPlanUpdate {
	return apu.SetOwnerID(o.ID)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (apu *ActionPlanUpdate) AddRiskIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddRiskIDs(ids...)
	return apu
}

// AddRisks adds the "risks" edges to the Risk entity.
func (apu *ActionPlanUpdate) AddRisks(r ...*Risk) *ActionPlanUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.AddRiskIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (apu *ActionPlanUpdate) AddControlIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddControlIDs(ids...)
	return apu
}

// AddControls adds the "controls" edges to the Control entity.
func (apu *ActionPlanUpdate) AddControls(c ...*Control) *ActionPlanUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apu.AddControlIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (apu *ActionPlanUpdate) AddUserIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddUserIDs(ids...)
	return apu
}

// AddUsers adds the "users" edges to the User entity.
func (apu *ActionPlanUpdate) AddUsers(u ...*User) *ActionPlanUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apu.AddUserIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (apu *ActionPlanUpdate) AddProgramIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddProgramIDs(ids...)
	return apu
}

// AddPrograms adds the "programs" edges to the Program entity.
func (apu *ActionPlanUpdate) AddPrograms(p ...*Program) *ActionPlanUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apu.AddProgramIDs(ids...)
}

// Mutation returns the ActionPlanMutation object of the builder.
func (apu *ActionPlanUpdate) Mutation() *ActionPlanMutation {
	return apu.mutation
}

// ClearApprover clears the "approver" edge to the Group entity.
func (apu *ActionPlanUpdate) ClearApprover() *ActionPlanUpdate {
	apu.mutation.ClearApprover()
	return apu
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (apu *ActionPlanUpdate) ClearDelegate() *ActionPlanUpdate {
	apu.mutation.ClearDelegate()
	return apu
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (apu *ActionPlanUpdate) ClearOwner() *ActionPlanUpdate {
	apu.mutation.ClearOwner()
	return apu
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (apu *ActionPlanUpdate) ClearRisks() *ActionPlanUpdate {
	apu.mutation.ClearRisks()
	return apu
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (apu *ActionPlanUpdate) RemoveRiskIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveRiskIDs(ids...)
	return apu
}

// RemoveRisks removes "risks" edges to Risk entities.
func (apu *ActionPlanUpdate) RemoveRisks(r ...*Risk) *ActionPlanUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.RemoveRiskIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (apu *ActionPlanUpdate) ClearControls() *ActionPlanUpdate {
	apu.mutation.ClearControls()
	return apu
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (apu *ActionPlanUpdate) RemoveControlIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveControlIDs(ids...)
	return apu
}

// RemoveControls removes "controls" edges to Control entities.
func (apu *ActionPlanUpdate) RemoveControls(c ...*Control) *ActionPlanUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apu.RemoveControlIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (apu *ActionPlanUpdate) ClearUsers() *ActionPlanUpdate {
	apu.mutation.ClearUsers()
	return apu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (apu *ActionPlanUpdate) RemoveUserIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveUserIDs(ids...)
	return apu
}

// RemoveUsers removes "users" edges to User entities.
func (apu *ActionPlanUpdate) RemoveUsers(u ...*User) *ActionPlanUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apu.RemoveUserIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (apu *ActionPlanUpdate) ClearPrograms() *ActionPlanUpdate {
	apu.mutation.ClearPrograms()
	return apu
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (apu *ActionPlanUpdate) RemoveProgramIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveProgramIDs(ids...)
	return apu
}

// RemovePrograms removes "programs" edges to Program entities.
func (apu *ActionPlanUpdate) RemovePrograms(p ...*Program) *ActionPlanUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apu.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *ActionPlanUpdate) Save(ctx context.Context) (int, error) {
	if err := apu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *ActionPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *ActionPlanUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *ActionPlanUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *ActionPlanUpdate) defaults() error {
	if _, ok := apu.mutation.UpdatedAt(); !ok && !apu.mutation.UpdatedAtCleared() {
		if actionplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplan.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (apu *ActionPlanUpdate) check() error {
	if v, ok := apu.mutation.Revision(); ok {
		if err := actionplan.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.revision": %w`, err)}
		}
	}
	if v, ok := apu.mutation.Name(); ok {
		if err := actionplan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.name": %w`, err)}
		}
	}
	if v, ok := apu.mutation.Status(); ok {
		if err := actionplan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.status": %w`, err)}
		}
	}
	if v, ok := apu.mutation.ReviewFrequency(); ok {
		if err := actionplan.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.review_frequency": %w`, err)}
		}
	}
	if v, ok := apu.mutation.OwnerID(); ok {
		if err := actionplan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.owner_id": %w`, err)}
		}
	}
	if v, ok := apu.mutation.Priority(); ok {
		if err := actionplan.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apu *ActionPlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanUpdate {
	apu.modifiers = append(apu.modifiers, modifiers...)
	return apu
}

func (apu *ActionPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := apu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplan.Table, actionplan.Columns, sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apu.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if apu.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplan.FieldUpdatedAt, field.TypeTime)
	}
	if apu.mutation.CreatedByCleared() {
		_spec.ClearField(actionplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := apu.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplan.FieldUpdatedBy, field.TypeString, value)
	}
	if apu.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := apu.mutation.DeletedAt(); ok {
		_spec.SetField(actionplan.FieldDeletedAt, field.TypeTime, value)
	}
	if apu.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.DeletedBy(); ok {
		_spec.SetField(actionplan.FieldDeletedBy, field.TypeString, value)
	}
	if apu.mutation.DeletedByCleared() {
		_spec.ClearField(actionplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := apu.mutation.Tags(); ok {
		_spec.SetField(actionplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := apu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTags, value)
		})
	}
	if apu.mutation.TagsCleared() {
		_spec.ClearField(actionplan.FieldTags, field.TypeJSON)
	}
	if value, ok := apu.mutation.Revision(); ok {
		_spec.SetField(actionplan.FieldRevision, field.TypeString, value)
	}
	if apu.mutation.RevisionCleared() {
		_spec.ClearField(actionplan.FieldRevision, field.TypeString)
	}
	if value, ok := apu.mutation.Name(); ok {
		_spec.SetField(actionplan.FieldName, field.TypeString, value)
	}
	if value, ok := apu.mutation.Status(); ok {
		_spec.SetField(actionplan.FieldStatus, field.TypeEnum, value)
	}
	if apu.mutation.StatusCleared() {
		_spec.ClearField(actionplan.FieldStatus, field.TypeEnum)
	}
	if value, ok := apu.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplan.FieldActionPlanType, field.TypeString, value)
	}
	if apu.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplan.FieldActionPlanType, field.TypeString)
	}
	if value, ok := apu.mutation.Details(); ok {
		_spec.SetField(actionplan.FieldDetails, field.TypeString, value)
	}
	if apu.mutation.DetailsCleared() {
		_spec.ClearField(actionplan.FieldDetails, field.TypeString)
	}
	if value, ok := apu.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplan.FieldApprovalRequired, field.TypeBool, value)
	}
	if apu.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplan.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := apu.mutation.ReviewDue(); ok {
		_spec.SetField(actionplan.FieldReviewDue, field.TypeTime, value)
	}
	if apu.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplan.FieldReviewDue, field.TypeTime)
	}
	if value, ok := apu.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplan.FieldReviewFrequency, field.TypeEnum, value)
	}
	if apu.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplan.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := apu.mutation.DueDate(); ok {
		_spec.SetField(actionplan.FieldDueDate, field.TypeTime, value)
	}
	if apu.mutation.DueDateCleared() {
		_spec.ClearField(actionplan.FieldDueDate, field.TypeTime)
	}
	if value, ok := apu.mutation.Priority(); ok {
		_spec.SetField(actionplan.FieldPriority, field.TypeEnum, value)
	}
	if apu.mutation.PriorityCleared() {
		_spec.ClearField(actionplan.FieldPriority, field.TypeEnum)
	}
	if value, ok := apu.mutation.Source(); ok {
		_spec.SetField(actionplan.FieldSource, field.TypeString, value)
	}
	if apu.mutation.SourceCleared() {
		_spec.ClearField(actionplan.FieldSource, field.TypeString)
	}
	if apu.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedRisksIDs(); len(nodes) > 0 && !apu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ControlActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedControlsIDs(); len(nodes) > 0 && !apu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UsersTable,
			Columns: actionplan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.UserActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !apu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UsersTable,
			Columns: actionplan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.UserActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UsersTable,
			Columns: actionplan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.UserActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ProgramActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !apu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = apu.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, apu.schemaConfig)
	_spec.AddModifiers(apu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// ActionPlanUpdateOne is the builder for updating a single ActionPlan entity.
type ActionPlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActionPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *ActionPlanUpdateOne) SetUpdatedAt(t time.Time) *ActionPlanUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apuo *ActionPlanUpdateOne) ClearUpdatedAt() *ActionPlanUpdateOne {
	apuo.mutation.ClearUpdatedAt()
	return apuo
}

// SetUpdatedBy sets the "updated_by" field.
func (apuo *ActionPlanUpdateOne) SetUpdatedBy(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetUpdatedBy(s)
	return apuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableUpdatedBy(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetUpdatedBy(*s)
	}
	return apuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apuo *ActionPlanUpdateOne) ClearUpdatedBy() *ActionPlanUpdateOne {
	apuo.mutation.ClearUpdatedBy()
	return apuo
}

// SetDeletedAt sets the "deleted_at" field.
func (apuo *ActionPlanUpdateOne) SetDeletedAt(t time.Time) *ActionPlanUpdateOne {
	apuo.mutation.SetDeletedAt(t)
	return apuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDeletedAt(t *time.Time) *ActionPlanUpdateOne {
	if t != nil {
		apuo.SetDeletedAt(*t)
	}
	return apuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (apuo *ActionPlanUpdateOne) ClearDeletedAt() *ActionPlanUpdateOne {
	apuo.mutation.ClearDeletedAt()
	return apuo
}

// SetDeletedBy sets the "deleted_by" field.
func (apuo *ActionPlanUpdateOne) SetDeletedBy(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetDeletedBy(s)
	return apuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDeletedBy(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetDeletedBy(*s)
	}
	return apuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (apuo *ActionPlanUpdateOne) ClearDeletedBy() *ActionPlanUpdateOne {
	apuo.mutation.ClearDeletedBy()
	return apuo
}

// SetTags sets the "tags" field.
func (apuo *ActionPlanUpdateOne) SetTags(s []string) *ActionPlanUpdateOne {
	apuo.mutation.SetTags(s)
	return apuo
}

// AppendTags appends s to the "tags" field.
func (apuo *ActionPlanUpdateOne) AppendTags(s []string) *ActionPlanUpdateOne {
	apuo.mutation.AppendTags(s)
	return apuo
}

// ClearTags clears the value of the "tags" field.
func (apuo *ActionPlanUpdateOne) ClearTags() *ActionPlanUpdateOne {
	apuo.mutation.ClearTags()
	return apuo
}

// SetRevision sets the "revision" field.
func (apuo *ActionPlanUpdateOne) SetRevision(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetRevision(s)
	return apuo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableRevision(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetRevision(*s)
	}
	return apuo
}

// ClearRevision clears the value of the "revision" field.
func (apuo *ActionPlanUpdateOne) ClearRevision() *ActionPlanUpdateOne {
	apuo.mutation.ClearRevision()
	return apuo
}

// SetName sets the "name" field.
func (apuo *ActionPlanUpdateOne) SetName(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetName(s)
	return apuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableName(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetName(*s)
	}
	return apuo
}

// SetStatus sets the "status" field.
func (apuo *ActionPlanUpdateOne) SetStatus(es enums.DocumentStatus) *ActionPlanUpdateOne {
	apuo.mutation.SetStatus(es)
	return apuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableStatus(es *enums.DocumentStatus) *ActionPlanUpdateOne {
	if es != nil {
		apuo.SetStatus(*es)
	}
	return apuo
}

// ClearStatus clears the value of the "status" field.
func (apuo *ActionPlanUpdateOne) ClearStatus() *ActionPlanUpdateOne {
	apuo.mutation.ClearStatus()
	return apuo
}

// SetActionPlanType sets the "action_plan_type" field.
func (apuo *ActionPlanUpdateOne) SetActionPlanType(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetActionPlanType(s)
	return apuo
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableActionPlanType(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetActionPlanType(*s)
	}
	return apuo
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (apuo *ActionPlanUpdateOne) ClearActionPlanType() *ActionPlanUpdateOne {
	apuo.mutation.ClearActionPlanType()
	return apuo
}

// SetDetails sets the "details" field.
func (apuo *ActionPlanUpdateOne) SetDetails(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetDetails(s)
	return apuo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDetails(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetDetails(*s)
	}
	return apuo
}

// ClearDetails clears the value of the "details" field.
func (apuo *ActionPlanUpdateOne) ClearDetails() *ActionPlanUpdateOne {
	apuo.mutation.ClearDetails()
	return apuo
}

// SetApprovalRequired sets the "approval_required" field.
func (apuo *ActionPlanUpdateOne) SetApprovalRequired(b bool) *ActionPlanUpdateOne {
	apuo.mutation.SetApprovalRequired(b)
	return apuo
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableApprovalRequired(b *bool) *ActionPlanUpdateOne {
	if b != nil {
		apuo.SetApprovalRequired(*b)
	}
	return apuo
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (apuo *ActionPlanUpdateOne) ClearApprovalRequired() *ActionPlanUpdateOne {
	apuo.mutation.ClearApprovalRequired()
	return apuo
}

// SetReviewDue sets the "review_due" field.
func (apuo *ActionPlanUpdateOne) SetReviewDue(t time.Time) *ActionPlanUpdateOne {
	apuo.mutation.SetReviewDue(t)
	return apuo
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableReviewDue(t *time.Time) *ActionPlanUpdateOne {
	if t != nil {
		apuo.SetReviewDue(*t)
	}
	return apuo
}

// ClearReviewDue clears the value of the "review_due" field.
func (apuo *ActionPlanUpdateOne) ClearReviewDue() *ActionPlanUpdateOne {
	apuo.mutation.ClearReviewDue()
	return apuo
}

// SetReviewFrequency sets the "review_frequency" field.
func (apuo *ActionPlanUpdateOne) SetReviewFrequency(e enums.Frequency) *ActionPlanUpdateOne {
	apuo.mutation.SetReviewFrequency(e)
	return apuo
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableReviewFrequency(e *enums.Frequency) *ActionPlanUpdateOne {
	if e != nil {
		apuo.SetReviewFrequency(*e)
	}
	return apuo
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (apuo *ActionPlanUpdateOne) ClearReviewFrequency() *ActionPlanUpdateOne {
	apuo.mutation.ClearReviewFrequency()
	return apuo
}

// SetApproverID sets the "approver_id" field.
func (apuo *ActionPlanUpdateOne) SetApproverID(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetApproverID(s)
	return apuo
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableApproverID(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetApproverID(*s)
	}
	return apuo
}

// ClearApproverID clears the value of the "approver_id" field.
func (apuo *ActionPlanUpdateOne) ClearApproverID() *ActionPlanUpdateOne {
	apuo.mutation.ClearApproverID()
	return apuo
}

// SetDelegateID sets the "delegate_id" field.
func (apuo *ActionPlanUpdateOne) SetDelegateID(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetDelegateID(s)
	return apuo
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDelegateID(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetDelegateID(*s)
	}
	return apuo
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (apuo *ActionPlanUpdateOne) ClearDelegateID() *ActionPlanUpdateOne {
	apuo.mutation.ClearDelegateID()
	return apuo
}

// SetOwnerID sets the "owner_id" field.
func (apuo *ActionPlanUpdateOne) SetOwnerID(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetOwnerID(s)
	return apuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableOwnerID(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetOwnerID(*s)
	}
	return apuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (apuo *ActionPlanUpdateOne) ClearOwnerID() *ActionPlanUpdateOne {
	apuo.mutation.ClearOwnerID()
	return apuo
}

// SetDueDate sets the "due_date" field.
func (apuo *ActionPlanUpdateOne) SetDueDate(t time.Time) *ActionPlanUpdateOne {
	apuo.mutation.SetDueDate(t)
	return apuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDueDate(t *time.Time) *ActionPlanUpdateOne {
	if t != nil {
		apuo.SetDueDate(*t)
	}
	return apuo
}

// ClearDueDate clears the value of the "due_date" field.
func (apuo *ActionPlanUpdateOne) ClearDueDate() *ActionPlanUpdateOne {
	apuo.mutation.ClearDueDate()
	return apuo
}

// SetPriority sets the "priority" field.
func (apuo *ActionPlanUpdateOne) SetPriority(e enums.Priority) *ActionPlanUpdateOne {
	apuo.mutation.SetPriority(e)
	return apuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillablePriority(e *enums.Priority) *ActionPlanUpdateOne {
	if e != nil {
		apuo.SetPriority(*e)
	}
	return apuo
}

// ClearPriority clears the value of the "priority" field.
func (apuo *ActionPlanUpdateOne) ClearPriority() *ActionPlanUpdateOne {
	apuo.mutation.ClearPriority()
	return apuo
}

// SetSource sets the "source" field.
func (apuo *ActionPlanUpdateOne) SetSource(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetSource(s)
	return apuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableSource(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetSource(*s)
	}
	return apuo
}

// ClearSource clears the value of the "source" field.
func (apuo *ActionPlanUpdateOne) ClearSource() *ActionPlanUpdateOne {
	apuo.mutation.ClearSource()
	return apuo
}

// SetApprover sets the "approver" edge to the Group entity.
func (apuo *ActionPlanUpdateOne) SetApprover(g *Group) *ActionPlanUpdateOne {
	return apuo.SetApproverID(g.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (apuo *ActionPlanUpdateOne) SetDelegate(g *Group) *ActionPlanUpdateOne {
	return apuo.SetDelegateID(g.ID)
}

// SetOwner sets the "owner" edge to the Organization entity.
func (apuo *ActionPlanUpdateOne) SetOwner(o *Organization) *ActionPlanUpdateOne {
	return apuo.SetOwnerID(o.ID)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (apuo *ActionPlanUpdateOne) AddRiskIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddRiskIDs(ids...)
	return apuo
}

// AddRisks adds the "risks" edges to the Risk entity.
func (apuo *ActionPlanUpdateOne) AddRisks(r ...*Risk) *ActionPlanUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.AddRiskIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (apuo *ActionPlanUpdateOne) AddControlIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddControlIDs(ids...)
	return apuo
}

// AddControls adds the "controls" edges to the Control entity.
func (apuo *ActionPlanUpdateOne) AddControls(c ...*Control) *ActionPlanUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apuo.AddControlIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (apuo *ActionPlanUpdateOne) AddUserIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddUserIDs(ids...)
	return apuo
}

// AddUsers adds the "users" edges to the User entity.
func (apuo *ActionPlanUpdateOne) AddUsers(u ...*User) *ActionPlanUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apuo.AddUserIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (apuo *ActionPlanUpdateOne) AddProgramIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddProgramIDs(ids...)
	return apuo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (apuo *ActionPlanUpdateOne) AddPrograms(p ...*Program) *ActionPlanUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apuo.AddProgramIDs(ids...)
}

// Mutation returns the ActionPlanMutation object of the builder.
func (apuo *ActionPlanUpdateOne) Mutation() *ActionPlanMutation {
	return apuo.mutation
}

// ClearApprover clears the "approver" edge to the Group entity.
func (apuo *ActionPlanUpdateOne) ClearApprover() *ActionPlanUpdateOne {
	apuo.mutation.ClearApprover()
	return apuo
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (apuo *ActionPlanUpdateOne) ClearDelegate() *ActionPlanUpdateOne {
	apuo.mutation.ClearDelegate()
	return apuo
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (apuo *ActionPlanUpdateOne) ClearOwner() *ActionPlanUpdateOne {
	apuo.mutation.ClearOwner()
	return apuo
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (apuo *ActionPlanUpdateOne) ClearRisks() *ActionPlanUpdateOne {
	apuo.mutation.ClearRisks()
	return apuo
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveRiskIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveRiskIDs(ids...)
	return apuo
}

// RemoveRisks removes "risks" edges to Risk entities.
func (apuo *ActionPlanUpdateOne) RemoveRisks(r ...*Risk) *ActionPlanUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.RemoveRiskIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (apuo *ActionPlanUpdateOne) ClearControls() *ActionPlanUpdateOne {
	apuo.mutation.ClearControls()
	return apuo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveControlIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveControlIDs(ids...)
	return apuo
}

// RemoveControls removes "controls" edges to Control entities.
func (apuo *ActionPlanUpdateOne) RemoveControls(c ...*Control) *ActionPlanUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apuo.RemoveControlIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (apuo *ActionPlanUpdateOne) ClearUsers() *ActionPlanUpdateOne {
	apuo.mutation.ClearUsers()
	return apuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveUserIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveUserIDs(ids...)
	return apuo
}

// RemoveUsers removes "users" edges to User entities.
func (apuo *ActionPlanUpdateOne) RemoveUsers(u ...*User) *ActionPlanUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apuo.RemoveUserIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (apuo *ActionPlanUpdateOne) ClearPrograms() *ActionPlanUpdateOne {
	apuo.mutation.ClearPrograms()
	return apuo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveProgramIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveProgramIDs(ids...)
	return apuo
}

// RemovePrograms removes "programs" edges to Program entities.
func (apuo *ActionPlanUpdateOne) RemovePrograms(p ...*Program) *ActionPlanUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apuo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the ActionPlanUpdate builder.
func (apuo *ActionPlanUpdateOne) Where(ps ...predicate.ActionPlan) *ActionPlanUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *ActionPlanUpdateOne) Select(field string, fields ...string) *ActionPlanUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated ActionPlan entity.
func (apuo *ActionPlanUpdateOne) Save(ctx context.Context) (*ActionPlan, error) {
	if err := apuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *ActionPlanUpdateOne) SaveX(ctx context.Context) *ActionPlan {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *ActionPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *ActionPlanUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *ActionPlanUpdateOne) defaults() error {
	if _, ok := apuo.mutation.UpdatedAt(); !ok && !apuo.mutation.UpdatedAtCleared() {
		if actionplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplan.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (apuo *ActionPlanUpdateOne) check() error {
	if v, ok := apuo.mutation.Revision(); ok {
		if err := actionplan.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.revision": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.Name(); ok {
		if err := actionplan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.name": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.Status(); ok {
		if err := actionplan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.status": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.ReviewFrequency(); ok {
		if err := actionplan.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.review_frequency": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.OwnerID(); ok {
		if err := actionplan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.owner_id": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.Priority(); ok {
		if err := actionplan.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apuo *ActionPlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanUpdateOne {
	apuo.modifiers = append(apuo.modifiers, modifiers...)
	return apuo
}

func (apuo *ActionPlanUpdateOne) sqlSave(ctx context.Context) (_node *ActionPlan, err error) {
	if err := apuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplan.Table, actionplan.Columns, sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ActionPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionplan.FieldID)
		for _, f := range fields {
			if !actionplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != actionplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apuo.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if apuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplan.FieldUpdatedAt, field.TypeTime)
	}
	if apuo.mutation.CreatedByCleared() {
		_spec.ClearField(actionplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := apuo.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplan.FieldUpdatedBy, field.TypeString, value)
	}
	if apuo.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := apuo.mutation.DeletedAt(); ok {
		_spec.SetField(actionplan.FieldDeletedAt, field.TypeTime, value)
	}
	if apuo.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.DeletedBy(); ok {
		_spec.SetField(actionplan.FieldDeletedBy, field.TypeString, value)
	}
	if apuo.mutation.DeletedByCleared() {
		_spec.ClearField(actionplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := apuo.mutation.Tags(); ok {
		_spec.SetField(actionplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := apuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTags, value)
		})
	}
	if apuo.mutation.TagsCleared() {
		_spec.ClearField(actionplan.FieldTags, field.TypeJSON)
	}
	if value, ok := apuo.mutation.Revision(); ok {
		_spec.SetField(actionplan.FieldRevision, field.TypeString, value)
	}
	if apuo.mutation.RevisionCleared() {
		_spec.ClearField(actionplan.FieldRevision, field.TypeString)
	}
	if value, ok := apuo.mutation.Name(); ok {
		_spec.SetField(actionplan.FieldName, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Status(); ok {
		_spec.SetField(actionplan.FieldStatus, field.TypeEnum, value)
	}
	if apuo.mutation.StatusCleared() {
		_spec.ClearField(actionplan.FieldStatus, field.TypeEnum)
	}
	if value, ok := apuo.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplan.FieldActionPlanType, field.TypeString, value)
	}
	if apuo.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplan.FieldActionPlanType, field.TypeString)
	}
	if value, ok := apuo.mutation.Details(); ok {
		_spec.SetField(actionplan.FieldDetails, field.TypeString, value)
	}
	if apuo.mutation.DetailsCleared() {
		_spec.ClearField(actionplan.FieldDetails, field.TypeString)
	}
	if value, ok := apuo.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplan.FieldApprovalRequired, field.TypeBool, value)
	}
	if apuo.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplan.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := apuo.mutation.ReviewDue(); ok {
		_spec.SetField(actionplan.FieldReviewDue, field.TypeTime, value)
	}
	if apuo.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplan.FieldReviewDue, field.TypeTime)
	}
	if value, ok := apuo.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplan.FieldReviewFrequency, field.TypeEnum, value)
	}
	if apuo.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplan.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := apuo.mutation.DueDate(); ok {
		_spec.SetField(actionplan.FieldDueDate, field.TypeTime, value)
	}
	if apuo.mutation.DueDateCleared() {
		_spec.ClearField(actionplan.FieldDueDate, field.TypeTime)
	}
	if value, ok := apuo.mutation.Priority(); ok {
		_spec.SetField(actionplan.FieldPriority, field.TypeEnum, value)
	}
	if apuo.mutation.PriorityCleared() {
		_spec.ClearField(actionplan.FieldPriority, field.TypeEnum)
	}
	if value, ok := apuo.mutation.Source(); ok {
		_spec.SetField(actionplan.FieldSource, field.TypeString, value)
	}
	if apuo.mutation.SourceCleared() {
		_spec.ClearField(actionplan.FieldSource, field.TypeString)
	}
	if apuo.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedRisksIDs(); len(nodes) > 0 && !apuo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ControlActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !apuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UsersTable,
			Columns: actionplan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.UserActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !apuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UsersTable,
			Columns: actionplan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.UserActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UsersTable,
			Columns: actionplan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.UserActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ProgramActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !apuo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = apuo.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, apuo.schemaConfig)
	_spec.AddModifiers(apuo.modifiers...)
	_node = &ActionPlan{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
