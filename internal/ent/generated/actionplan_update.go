// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ActionPlanUpdate is the builder for updating ActionPlan entities.
type ActionPlanUpdate struct {
	config
	hooks     []Hook
	mutation  *ActionPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActionPlanUpdate builder.
func (_u *ActionPlanUpdate) Where(ps ...predicate.ActionPlan) *ActionPlanUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ActionPlanUpdate) SetUpdatedAt(v time.Time) *ActionPlanUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ActionPlanUpdate) ClearUpdatedAt() *ActionPlanUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ActionPlanUpdate) SetUpdatedBy(v string) *ActionPlanUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableUpdatedBy(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ActionPlanUpdate) ClearUpdatedBy() *ActionPlanUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ActionPlanUpdate) SetDeletedAt(v time.Time) *ActionPlanUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableDeletedAt(v *time.Time) *ActionPlanUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ActionPlanUpdate) ClearDeletedAt() *ActionPlanUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ActionPlanUpdate) SetDeletedBy(v string) *ActionPlanUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableDeletedBy(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ActionPlanUpdate) ClearDeletedBy() *ActionPlanUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ActionPlanUpdate) SetTags(v []string) *ActionPlanUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ActionPlanUpdate) AppendTags(v []string) *ActionPlanUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ActionPlanUpdate) ClearTags() *ActionPlanUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ActionPlanUpdate) SetRevision(v string) *ActionPlanUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableRevision(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ActionPlanUpdate) ClearRevision() *ActionPlanUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetName sets the "name" field.
func (_u *ActionPlanUpdate) SetName(v string) *ActionPlanUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableName(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ActionPlanUpdate) SetStatus(v enums.DocumentStatus) *ActionPlanUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableStatus(v *enums.DocumentStatus) *ActionPlanUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ActionPlanUpdate) ClearStatus() *ActionPlanUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetActionPlanType sets the "action_plan_type" field.
func (_u *ActionPlanUpdate) SetActionPlanType(v string) *ActionPlanUpdate {
	_u.mutation.SetActionPlanType(v)
	return _u
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableActionPlanType(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetActionPlanType(*v)
	}
	return _u
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (_u *ActionPlanUpdate) ClearActionPlanType() *ActionPlanUpdate {
	_u.mutation.ClearActionPlanType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ActionPlanUpdate) SetDetails(v string) *ActionPlanUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableDetails(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ActionPlanUpdate) ClearDetails() *ActionPlanUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ActionPlanUpdate) SetApprovalRequired(v bool) *ActionPlanUpdate {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableApprovalRequired(v *bool) *ActionPlanUpdate {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ActionPlanUpdate) ClearApprovalRequired() *ActionPlanUpdate {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ActionPlanUpdate) SetReviewDue(v time.Time) *ActionPlanUpdate {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableReviewDue(v *time.Time) *ActionPlanUpdate {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ActionPlanUpdate) ClearReviewDue() *ActionPlanUpdate {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ActionPlanUpdate) SetReviewFrequency(v enums.Frequency) *ActionPlanUpdate {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableReviewFrequency(v *enums.Frequency) *ActionPlanUpdate {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ActionPlanUpdate) ClearReviewFrequency() *ActionPlanUpdate {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ActionPlanUpdate) SetApproverID(v string) *ActionPlanUpdate {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableApproverID(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ActionPlanUpdate) ClearApproverID() *ActionPlanUpdate {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ActionPlanUpdate) SetDelegateID(v string) *ActionPlanUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableDelegateID(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ActionPlanUpdate) ClearDelegateID() *ActionPlanUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ActionPlanUpdate) SetSummary(v string) *ActionPlanUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableSummary(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ActionPlanUpdate) ClearSummary() *ActionPlanUpdate {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ActionPlanUpdate) SetTagSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ActionPlanUpdate) AppendTagSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ActionPlanUpdate) ClearTagSuggestions() *ActionPlanUpdate {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ActionPlanUpdate) SetDismissedTagSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ActionPlanUpdate) AppendDismissedTagSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ActionPlanUpdate) ClearDismissedTagSuggestions() *ActionPlanUpdate {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ActionPlanUpdate) SetControlSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ActionPlanUpdate) AppendControlSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ActionPlanUpdate) ClearControlSuggestions() *ActionPlanUpdate {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ActionPlanUpdate) SetDismissedControlSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ActionPlanUpdate) AppendDismissedControlSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ActionPlanUpdate) ClearDismissedControlSuggestions() *ActionPlanUpdate {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ActionPlanUpdate) SetImprovementSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ActionPlanUpdate) AppendImprovementSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ActionPlanUpdate) ClearImprovementSuggestions() *ActionPlanUpdate {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanUpdate) SetDismissedImprovementSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanUpdate) AppendDismissedImprovementSuggestions(v []string) *ActionPlanUpdate {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanUpdate) ClearDismissedImprovementSuggestions() *ActionPlanUpdate {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetURL sets the "url" field.
func (_u *ActionPlanUpdate) SetURL(v string) *ActionPlanUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableURL(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *ActionPlanUpdate) ClearURL() *ActionPlanUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *ActionPlanUpdate) SetFileID(v string) *ActionPlanUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableFileID(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *ActionPlanUpdate) ClearFileID() *ActionPlanUpdate {
	_u.mutation.ClearFileID()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ActionPlanUpdate) SetOwnerID(v string) *ActionPlanUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableOwnerID(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ActionPlanUpdate) ClearOwnerID() *ActionPlanUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *ActionPlanUpdate) SetInternalNotes(v string) *ActionPlanUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableInternalNotes(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *ActionPlanUpdate) ClearInternalNotes() *ActionPlanUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *ActionPlanUpdate) SetSystemInternalID(v string) *ActionPlanUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableSystemInternalID(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *ActionPlanUpdate) ClearSystemInternalID() *ActionPlanUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *ActionPlanUpdate) SetDueDate(v time.Time) *ActionPlanUpdate {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableDueDate(v *time.Time) *ActionPlanUpdate {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *ActionPlanUpdate) ClearDueDate() *ActionPlanUpdate {
	_u.mutation.ClearDueDate()
	return _u
}

// SetPriority sets the "priority" field.
func (_u *ActionPlanUpdate) SetPriority(v enums.Priority) *ActionPlanUpdate {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillablePriority(v *enums.Priority) *ActionPlanUpdate {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// ClearPriority clears the value of the "priority" field.
func (_u *ActionPlanUpdate) ClearPriority() *ActionPlanUpdate {
	_u.mutation.ClearPriority()
	return _u
}

// SetSource sets the "source" field.
func (_u *ActionPlanUpdate) SetSource(v string) *ActionPlanUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ActionPlanUpdate) SetNillableSource(v *string) *ActionPlanUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ActionPlanUpdate) ClearSource() *ActionPlanUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetApprover sets the "approver" edge to the Group entity.
func (_u *ActionPlanUpdate) SetApprover(v *Group) *ActionPlanUpdate {
	return _u.SetApproverID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *ActionPlanUpdate) SetDelegate(v *Group) *ActionPlanUpdate {
	return _u.SetDelegateID(v.ID)
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ActionPlanUpdate) SetOwner(v *Organization) *ActionPlanUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *ActionPlanUpdate) AddRiskIDs(ids ...string) *ActionPlanUpdate {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *ActionPlanUpdate) AddRisks(v ...*Risk) *ActionPlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *ActionPlanUpdate) AddControlIDs(ids ...string) *ActionPlanUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *ActionPlanUpdate) AddControls(v ...*Control) *ActionPlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ActionPlanUpdate) AddProgramIDs(ids ...string) *ActionPlanUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ActionPlanUpdate) AddPrograms(v ...*Program) *ActionPlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// SetFile sets the "file" edge to the File entity.
func (_u *ActionPlanUpdate) SetFile(v *File) *ActionPlanUpdate {
	return _u.SetFileID(v.ID)
}

// Mutation returns the ActionPlanMutation object of the builder.
func (_u *ActionPlanUpdate) Mutation() *ActionPlanMutation {
	return _u.mutation
}

// ClearApprover clears the "approver" edge to the Group entity.
func (_u *ActionPlanUpdate) ClearApprover() *ActionPlanUpdate {
	_u.mutation.ClearApprover()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *ActionPlanUpdate) ClearDelegate() *ActionPlanUpdate {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ActionPlanUpdate) ClearOwner() *ActionPlanUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *ActionPlanUpdate) ClearRisks() *ActionPlanUpdate {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *ActionPlanUpdate) RemoveRiskIDs(ids ...string) *ActionPlanUpdate {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *ActionPlanUpdate) RemoveRisks(v ...*Risk) *ActionPlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *ActionPlanUpdate) ClearControls() *ActionPlanUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *ActionPlanUpdate) RemoveControlIDs(ids ...string) *ActionPlanUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *ActionPlanUpdate) RemoveControls(v ...*Control) *ActionPlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ActionPlanUpdate) ClearPrograms() *ActionPlanUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ActionPlanUpdate) RemoveProgramIDs(ids ...string) *ActionPlanUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ActionPlanUpdate) RemovePrograms(v ...*Program) *ActionPlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (_u *ActionPlanUpdate) ClearFile() *ActionPlanUpdate {
	_u.mutation.ClearFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ActionPlanUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActionPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ActionPlanUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActionPlanUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ActionPlanUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if actionplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplan.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ActionPlanUpdate) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := actionplan.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := actionplan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := actionplan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := actionplan.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.review_frequency": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := actionplan.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ActionPlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ActionPlanUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplan.Table, actionplan.Columns, sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplan.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(actionplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplan.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(actionplan.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(actionplan.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(actionplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(actionplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(actionplan.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(actionplan.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(actionplan.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(actionplan.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(actionplan.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(actionplan.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplan.FieldActionPlanType, field.TypeString, value)
	}
	if _u.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplan.FieldActionPlanType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(actionplan.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(actionplan.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplan.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplan.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(actionplan.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplan.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplan.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplan.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(actionplan.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(actionplan.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(actionplan.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(actionplan.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(actionplan.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(actionplan.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(actionplan.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(actionplan.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(actionplan.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(actionplan.FieldURL, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(actionplan.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(actionplan.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(actionplan.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(actionplan.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(actionplan.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(actionplan.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(actionplan.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(actionplan.FieldPriority, field.TypeEnum, value)
	}
	if _u.mutation.PriorityCleared() {
		_spec.ClearField(actionplan.FieldPriority, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(actionplan.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(actionplan.FieldSource, field.TypeString)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.FileTable,
			Columns: []string{actionplan.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.FileTable,
			Columns: []string{actionplan.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ActionPlanUpdateOne is the builder for updating a single ActionPlan entity.
type ActionPlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActionPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ActionPlanUpdateOne) SetUpdatedAt(v time.Time) *ActionPlanUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ActionPlanUpdateOne) ClearUpdatedAt() *ActionPlanUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ActionPlanUpdateOne) SetUpdatedBy(v string) *ActionPlanUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableUpdatedBy(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ActionPlanUpdateOne) ClearUpdatedBy() *ActionPlanUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ActionPlanUpdateOne) SetDeletedAt(v time.Time) *ActionPlanUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableDeletedAt(v *time.Time) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ActionPlanUpdateOne) ClearDeletedAt() *ActionPlanUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ActionPlanUpdateOne) SetDeletedBy(v string) *ActionPlanUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableDeletedBy(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ActionPlanUpdateOne) ClearDeletedBy() *ActionPlanUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ActionPlanUpdateOne) SetTags(v []string) *ActionPlanUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ActionPlanUpdateOne) AppendTags(v []string) *ActionPlanUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ActionPlanUpdateOne) ClearTags() *ActionPlanUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ActionPlanUpdateOne) SetRevision(v string) *ActionPlanUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableRevision(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ActionPlanUpdateOne) ClearRevision() *ActionPlanUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetName sets the "name" field.
func (_u *ActionPlanUpdateOne) SetName(v string) *ActionPlanUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableName(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ActionPlanUpdateOne) SetStatus(v enums.DocumentStatus) *ActionPlanUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableStatus(v *enums.DocumentStatus) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ActionPlanUpdateOne) ClearStatus() *ActionPlanUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetActionPlanType sets the "action_plan_type" field.
func (_u *ActionPlanUpdateOne) SetActionPlanType(v string) *ActionPlanUpdateOne {
	_u.mutation.SetActionPlanType(v)
	return _u
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableActionPlanType(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetActionPlanType(*v)
	}
	return _u
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (_u *ActionPlanUpdateOne) ClearActionPlanType() *ActionPlanUpdateOne {
	_u.mutation.ClearActionPlanType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ActionPlanUpdateOne) SetDetails(v string) *ActionPlanUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableDetails(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ActionPlanUpdateOne) ClearDetails() *ActionPlanUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ActionPlanUpdateOne) SetApprovalRequired(v bool) *ActionPlanUpdateOne {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableApprovalRequired(v *bool) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ActionPlanUpdateOne) ClearApprovalRequired() *ActionPlanUpdateOne {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ActionPlanUpdateOne) SetReviewDue(v time.Time) *ActionPlanUpdateOne {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableReviewDue(v *time.Time) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ActionPlanUpdateOne) ClearReviewDue() *ActionPlanUpdateOne {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ActionPlanUpdateOne) SetReviewFrequency(v enums.Frequency) *ActionPlanUpdateOne {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableReviewFrequency(v *enums.Frequency) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ActionPlanUpdateOne) ClearReviewFrequency() *ActionPlanUpdateOne {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ActionPlanUpdateOne) SetApproverID(v string) *ActionPlanUpdateOne {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableApproverID(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ActionPlanUpdateOne) ClearApproverID() *ActionPlanUpdateOne {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ActionPlanUpdateOne) SetDelegateID(v string) *ActionPlanUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableDelegateID(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ActionPlanUpdateOne) ClearDelegateID() *ActionPlanUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ActionPlanUpdateOne) SetSummary(v string) *ActionPlanUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableSummary(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ActionPlanUpdateOne) ClearSummary() *ActionPlanUpdateOne {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ActionPlanUpdateOne) SetTagSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ActionPlanUpdateOne) AppendTagSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ActionPlanUpdateOne) ClearTagSuggestions() *ActionPlanUpdateOne {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ActionPlanUpdateOne) SetDismissedTagSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ActionPlanUpdateOne) AppendDismissedTagSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ActionPlanUpdateOne) ClearDismissedTagSuggestions() *ActionPlanUpdateOne {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ActionPlanUpdateOne) SetControlSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ActionPlanUpdateOne) AppendControlSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ActionPlanUpdateOne) ClearControlSuggestions() *ActionPlanUpdateOne {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ActionPlanUpdateOne) SetDismissedControlSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ActionPlanUpdateOne) AppendDismissedControlSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ActionPlanUpdateOne) ClearDismissedControlSuggestions() *ActionPlanUpdateOne {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ActionPlanUpdateOne) SetImprovementSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ActionPlanUpdateOne) AppendImprovementSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ActionPlanUpdateOne) ClearImprovementSuggestions() *ActionPlanUpdateOne {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanUpdateOne) SetDismissedImprovementSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanUpdateOne) AppendDismissedImprovementSuggestions(v []string) *ActionPlanUpdateOne {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanUpdateOne) ClearDismissedImprovementSuggestions() *ActionPlanUpdateOne {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetURL sets the "url" field.
func (_u *ActionPlanUpdateOne) SetURL(v string) *ActionPlanUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableURL(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *ActionPlanUpdateOne) ClearURL() *ActionPlanUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *ActionPlanUpdateOne) SetFileID(v string) *ActionPlanUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableFileID(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *ActionPlanUpdateOne) ClearFileID() *ActionPlanUpdateOne {
	_u.mutation.ClearFileID()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ActionPlanUpdateOne) SetOwnerID(v string) *ActionPlanUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableOwnerID(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ActionPlanUpdateOne) ClearOwnerID() *ActionPlanUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *ActionPlanUpdateOne) SetInternalNotes(v string) *ActionPlanUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableInternalNotes(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *ActionPlanUpdateOne) ClearInternalNotes() *ActionPlanUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *ActionPlanUpdateOne) SetSystemInternalID(v string) *ActionPlanUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableSystemInternalID(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *ActionPlanUpdateOne) ClearSystemInternalID() *ActionPlanUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *ActionPlanUpdateOne) SetDueDate(v time.Time) *ActionPlanUpdateOne {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableDueDate(v *time.Time) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *ActionPlanUpdateOne) ClearDueDate() *ActionPlanUpdateOne {
	_u.mutation.ClearDueDate()
	return _u
}

// SetPriority sets the "priority" field.
func (_u *ActionPlanUpdateOne) SetPriority(v enums.Priority) *ActionPlanUpdateOne {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillablePriority(v *enums.Priority) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// ClearPriority clears the value of the "priority" field.
func (_u *ActionPlanUpdateOne) ClearPriority() *ActionPlanUpdateOne {
	_u.mutation.ClearPriority()
	return _u
}

// SetSource sets the "source" field.
func (_u *ActionPlanUpdateOne) SetSource(v string) *ActionPlanUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ActionPlanUpdateOne) SetNillableSource(v *string) *ActionPlanUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ActionPlanUpdateOne) ClearSource() *ActionPlanUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetApprover sets the "approver" edge to the Group entity.
func (_u *ActionPlanUpdateOne) SetApprover(v *Group) *ActionPlanUpdateOne {
	return _u.SetApproverID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *ActionPlanUpdateOne) SetDelegate(v *Group) *ActionPlanUpdateOne {
	return _u.SetDelegateID(v.ID)
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ActionPlanUpdateOne) SetOwner(v *Organization) *ActionPlanUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *ActionPlanUpdateOne) AddRiskIDs(ids ...string) *ActionPlanUpdateOne {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *ActionPlanUpdateOne) AddRisks(v ...*Risk) *ActionPlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *ActionPlanUpdateOne) AddControlIDs(ids ...string) *ActionPlanUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *ActionPlanUpdateOne) AddControls(v ...*Control) *ActionPlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ActionPlanUpdateOne) AddProgramIDs(ids ...string) *ActionPlanUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ActionPlanUpdateOne) AddPrograms(v ...*Program) *ActionPlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// SetFile sets the "file" edge to the File entity.
func (_u *ActionPlanUpdateOne) SetFile(v *File) *ActionPlanUpdateOne {
	return _u.SetFileID(v.ID)
}

// Mutation returns the ActionPlanMutation object of the builder.
func (_u *ActionPlanUpdateOne) Mutation() *ActionPlanMutation {
	return _u.mutation
}

// ClearApprover clears the "approver" edge to the Group entity.
func (_u *ActionPlanUpdateOne) ClearApprover() *ActionPlanUpdateOne {
	_u.mutation.ClearApprover()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *ActionPlanUpdateOne) ClearDelegate() *ActionPlanUpdateOne {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ActionPlanUpdateOne) ClearOwner() *ActionPlanUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *ActionPlanUpdateOne) ClearRisks() *ActionPlanUpdateOne {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *ActionPlanUpdateOne) RemoveRiskIDs(ids ...string) *ActionPlanUpdateOne {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *ActionPlanUpdateOne) RemoveRisks(v ...*Risk) *ActionPlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *ActionPlanUpdateOne) ClearControls() *ActionPlanUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *ActionPlanUpdateOne) RemoveControlIDs(ids ...string) *ActionPlanUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *ActionPlanUpdateOne) RemoveControls(v ...*Control) *ActionPlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ActionPlanUpdateOne) ClearPrograms() *ActionPlanUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ActionPlanUpdateOne) RemoveProgramIDs(ids ...string) *ActionPlanUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ActionPlanUpdateOne) RemovePrograms(v ...*Program) *ActionPlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (_u *ActionPlanUpdateOne) ClearFile() *ActionPlanUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// Where appends a list predicates to the ActionPlanUpdate builder.
func (_u *ActionPlanUpdateOne) Where(ps ...predicate.ActionPlan) *ActionPlanUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ActionPlanUpdateOne) Select(field string, fields ...string) *ActionPlanUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ActionPlan entity.
func (_u *ActionPlanUpdateOne) Save(ctx context.Context) (*ActionPlan, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActionPlanUpdateOne) SaveX(ctx context.Context) *ActionPlan {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ActionPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActionPlanUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ActionPlanUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if actionplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplan.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ActionPlanUpdateOne) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := actionplan.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := actionplan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := actionplan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := actionplan.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.review_frequency": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := actionplan.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlan.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ActionPlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ActionPlanUpdateOne) sqlSave(ctx context.Context) (_node *ActionPlan, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplan.Table, actionplan.Columns, sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ActionPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionplan.FieldID)
		for _, f := range fields {
			if !actionplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != actionplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplan.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(actionplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplan.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(actionplan.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(actionplan.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(actionplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(actionplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(actionplan.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(actionplan.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(actionplan.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(actionplan.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(actionplan.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(actionplan.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplan.FieldActionPlanType, field.TypeString, value)
	}
	if _u.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplan.FieldActionPlanType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(actionplan.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(actionplan.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplan.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplan.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(actionplan.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplan.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplan.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplan.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(actionplan.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(actionplan.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(actionplan.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(actionplan.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(actionplan.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(actionplan.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(actionplan.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(actionplan.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(actionplan.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(actionplan.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(actionplan.FieldURL, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(actionplan.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(actionplan.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(actionplan.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(actionplan.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(actionplan.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(actionplan.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(actionplan.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(actionplan.FieldPriority, field.TypeEnum, value)
	}
	if _u.mutation.PriorityCleared() {
		_spec.ClearField(actionplan.FieldPriority, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(actionplan.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(actionplan.FieldSource, field.TypeString)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.FileTable,
			Columns: []string{actionplan.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.FileTable,
			Columns: []string{actionplan.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ActionPlan{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
