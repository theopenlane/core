// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ActionPlanUpdate is the builder for updating ActionPlan entities.
type ActionPlanUpdate struct {
	config
	hooks     []Hook
	mutation  *ActionPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActionPlanUpdate builder.
func (apu *ActionPlanUpdate) Where(ps ...predicate.ActionPlan) *ActionPlanUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *ActionPlanUpdate) SetUpdatedAt(t time.Time) *ActionPlanUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apu *ActionPlanUpdate) ClearUpdatedAt() *ActionPlanUpdate {
	apu.mutation.ClearUpdatedAt()
	return apu
}

// SetUpdatedBy sets the "updated_by" field.
func (apu *ActionPlanUpdate) SetUpdatedBy(s string) *ActionPlanUpdate {
	apu.mutation.SetUpdatedBy(s)
	return apu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableUpdatedBy(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetUpdatedBy(*s)
	}
	return apu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apu *ActionPlanUpdate) ClearUpdatedBy() *ActionPlanUpdate {
	apu.mutation.ClearUpdatedBy()
	return apu
}

// SetDeletedAt sets the "deleted_at" field.
func (apu *ActionPlanUpdate) SetDeletedAt(t time.Time) *ActionPlanUpdate {
	apu.mutation.SetDeletedAt(t)
	return apu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDeletedAt(t *time.Time) *ActionPlanUpdate {
	if t != nil {
		apu.SetDeletedAt(*t)
	}
	return apu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (apu *ActionPlanUpdate) ClearDeletedAt() *ActionPlanUpdate {
	apu.mutation.ClearDeletedAt()
	return apu
}

// SetDeletedBy sets the "deleted_by" field.
func (apu *ActionPlanUpdate) SetDeletedBy(s string) *ActionPlanUpdate {
	apu.mutation.SetDeletedBy(s)
	return apu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDeletedBy(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetDeletedBy(*s)
	}
	return apu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (apu *ActionPlanUpdate) ClearDeletedBy() *ActionPlanUpdate {
	apu.mutation.ClearDeletedBy()
	return apu
}

// SetTags sets the "tags" field.
func (apu *ActionPlanUpdate) SetTags(s []string) *ActionPlanUpdate {
	apu.mutation.SetTags(s)
	return apu
}

// AppendTags appends s to the "tags" field.
func (apu *ActionPlanUpdate) AppendTags(s []string) *ActionPlanUpdate {
	apu.mutation.AppendTags(s)
	return apu
}

// ClearTags clears the value of the "tags" field.
func (apu *ActionPlanUpdate) ClearTags() *ActionPlanUpdate {
	apu.mutation.ClearTags()
	return apu
}

// SetName sets the "name" field.
func (apu *ActionPlanUpdate) SetName(s string) *ActionPlanUpdate {
	apu.mutation.SetName(s)
	return apu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableName(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetName(*s)
	}
	return apu
}

// SetDescription sets the "description" field.
func (apu *ActionPlanUpdate) SetDescription(s string) *ActionPlanUpdate {
	apu.mutation.SetDescription(s)
	return apu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDescription(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetDescription(*s)
	}
	return apu
}

// ClearDescription clears the value of the "description" field.
func (apu *ActionPlanUpdate) ClearDescription() *ActionPlanUpdate {
	apu.mutation.ClearDescription()
	return apu
}

// SetStatus sets the "status" field.
func (apu *ActionPlanUpdate) SetStatus(s string) *ActionPlanUpdate {
	apu.mutation.SetStatus(s)
	return apu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableStatus(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetStatus(*s)
	}
	return apu
}

// ClearStatus clears the value of the "status" field.
func (apu *ActionPlanUpdate) ClearStatus() *ActionPlanUpdate {
	apu.mutation.ClearStatus()
	return apu
}

// SetDueDate sets the "due_date" field.
func (apu *ActionPlanUpdate) SetDueDate(t time.Time) *ActionPlanUpdate {
	apu.mutation.SetDueDate(t)
	return apu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableDueDate(t *time.Time) *ActionPlanUpdate {
	if t != nil {
		apu.SetDueDate(*t)
	}
	return apu
}

// ClearDueDate clears the value of the "due_date" field.
func (apu *ActionPlanUpdate) ClearDueDate() *ActionPlanUpdate {
	apu.mutation.ClearDueDate()
	return apu
}

// SetPriority sets the "priority" field.
func (apu *ActionPlanUpdate) SetPriority(s string) *ActionPlanUpdate {
	apu.mutation.SetPriority(s)
	return apu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillablePriority(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetPriority(*s)
	}
	return apu
}

// ClearPriority clears the value of the "priority" field.
func (apu *ActionPlanUpdate) ClearPriority() *ActionPlanUpdate {
	apu.mutation.ClearPriority()
	return apu
}

// SetSource sets the "source" field.
func (apu *ActionPlanUpdate) SetSource(s string) *ActionPlanUpdate {
	apu.mutation.SetSource(s)
	return apu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (apu *ActionPlanUpdate) SetNillableSource(s *string) *ActionPlanUpdate {
	if s != nil {
		apu.SetSource(*s)
	}
	return apu
}

// ClearSource clears the value of the "source" field.
func (apu *ActionPlanUpdate) ClearSource() *ActionPlanUpdate {
	apu.mutation.ClearSource()
	return apu
}

// SetDetails sets the "details" field.
func (apu *ActionPlanUpdate) SetDetails(m map[string]interface{}) *ActionPlanUpdate {
	apu.mutation.SetDetails(m)
	return apu
}

// ClearDetails clears the value of the "details" field.
func (apu *ActionPlanUpdate) ClearDetails() *ActionPlanUpdate {
	apu.mutation.ClearDetails()
	return apu
}

// AddStandardIDs adds the "standard" edge to the Standard entity by IDs.
func (apu *ActionPlanUpdate) AddStandardIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddStandardIDs(ids...)
	return apu
}

// AddStandard adds the "standard" edges to the Standard entity.
func (apu *ActionPlanUpdate) AddStandard(s ...*Standard) *ActionPlanUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return apu.AddStandardIDs(ids...)
}

// AddRiskIDs adds the "risk" edge to the Risk entity by IDs.
func (apu *ActionPlanUpdate) AddRiskIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddRiskIDs(ids...)
	return apu
}

// AddRisk adds the "risk" edges to the Risk entity.
func (apu *ActionPlanUpdate) AddRisk(r ...*Risk) *ActionPlanUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.AddRiskIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (apu *ActionPlanUpdate) AddControlIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddControlIDs(ids...)
	return apu
}

// AddControl adds the "control" edges to the Control entity.
func (apu *ActionPlanUpdate) AddControl(c ...*Control) *ActionPlanUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apu.AddControlIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (apu *ActionPlanUpdate) AddUserIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddUserIDs(ids...)
	return apu
}

// AddUser adds the "user" edges to the User entity.
func (apu *ActionPlanUpdate) AddUser(u ...*User) *ActionPlanUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apu.AddUserIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (apu *ActionPlanUpdate) AddProgramIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.AddProgramIDs(ids...)
	return apu
}

// AddProgram adds the "program" edges to the Program entity.
func (apu *ActionPlanUpdate) AddProgram(p ...*Program) *ActionPlanUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apu.AddProgramIDs(ids...)
}

// Mutation returns the ActionPlanMutation object of the builder.
func (apu *ActionPlanUpdate) Mutation() *ActionPlanMutation {
	return apu.mutation
}

// ClearStandard clears all "standard" edges to the Standard entity.
func (apu *ActionPlanUpdate) ClearStandard() *ActionPlanUpdate {
	apu.mutation.ClearStandard()
	return apu
}

// RemoveStandardIDs removes the "standard" edge to Standard entities by IDs.
func (apu *ActionPlanUpdate) RemoveStandardIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveStandardIDs(ids...)
	return apu
}

// RemoveStandard removes "standard" edges to Standard entities.
func (apu *ActionPlanUpdate) RemoveStandard(s ...*Standard) *ActionPlanUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return apu.RemoveStandardIDs(ids...)
}

// ClearRisk clears all "risk" edges to the Risk entity.
func (apu *ActionPlanUpdate) ClearRisk() *ActionPlanUpdate {
	apu.mutation.ClearRisk()
	return apu
}

// RemoveRiskIDs removes the "risk" edge to Risk entities by IDs.
func (apu *ActionPlanUpdate) RemoveRiskIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveRiskIDs(ids...)
	return apu
}

// RemoveRisk removes "risk" edges to Risk entities.
func (apu *ActionPlanUpdate) RemoveRisk(r ...*Risk) *ActionPlanUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.RemoveRiskIDs(ids...)
}

// ClearControl clears all "control" edges to the Control entity.
func (apu *ActionPlanUpdate) ClearControl() *ActionPlanUpdate {
	apu.mutation.ClearControl()
	return apu
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (apu *ActionPlanUpdate) RemoveControlIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveControlIDs(ids...)
	return apu
}

// RemoveControl removes "control" edges to Control entities.
func (apu *ActionPlanUpdate) RemoveControl(c ...*Control) *ActionPlanUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apu.RemoveControlIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (apu *ActionPlanUpdate) ClearUser() *ActionPlanUpdate {
	apu.mutation.ClearUser()
	return apu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (apu *ActionPlanUpdate) RemoveUserIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveUserIDs(ids...)
	return apu
}

// RemoveUser removes "user" edges to User entities.
func (apu *ActionPlanUpdate) RemoveUser(u ...*User) *ActionPlanUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apu.RemoveUserIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (apu *ActionPlanUpdate) ClearProgram() *ActionPlanUpdate {
	apu.mutation.ClearProgram()
	return apu
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (apu *ActionPlanUpdate) RemoveProgramIDs(ids ...string) *ActionPlanUpdate {
	apu.mutation.RemoveProgramIDs(ids...)
	return apu
}

// RemoveProgram removes "program" edges to Program entities.
func (apu *ActionPlanUpdate) RemoveProgram(p ...*Program) *ActionPlanUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apu.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *ActionPlanUpdate) Save(ctx context.Context) (int, error) {
	if err := apu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *ActionPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *ActionPlanUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *ActionPlanUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *ActionPlanUpdate) defaults() error {
	if _, ok := apu.mutation.UpdatedAt(); !ok && !apu.mutation.UpdatedAtCleared() {
		if actionplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplan.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apu *ActionPlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanUpdate {
	apu.modifiers = append(apu.modifiers, modifiers...)
	return apu
}

func (apu *ActionPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(actionplan.Table, actionplan.Columns, sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apu.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if apu.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplan.FieldUpdatedAt, field.TypeTime)
	}
	if apu.mutation.CreatedByCleared() {
		_spec.ClearField(actionplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := apu.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplan.FieldUpdatedBy, field.TypeString, value)
	}
	if apu.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := apu.mutation.DeletedAt(); ok {
		_spec.SetField(actionplan.FieldDeletedAt, field.TypeTime, value)
	}
	if apu.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.DeletedBy(); ok {
		_spec.SetField(actionplan.FieldDeletedBy, field.TypeString, value)
	}
	if apu.mutation.DeletedByCleared() {
		_spec.ClearField(actionplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := apu.mutation.Tags(); ok {
		_spec.SetField(actionplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := apu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTags, value)
		})
	}
	if apu.mutation.TagsCleared() {
		_spec.ClearField(actionplan.FieldTags, field.TypeJSON)
	}
	if value, ok := apu.mutation.Name(); ok {
		_spec.SetField(actionplan.FieldName, field.TypeString, value)
	}
	if value, ok := apu.mutation.Description(); ok {
		_spec.SetField(actionplan.FieldDescription, field.TypeString, value)
	}
	if apu.mutation.DescriptionCleared() {
		_spec.ClearField(actionplan.FieldDescription, field.TypeString)
	}
	if value, ok := apu.mutation.Status(); ok {
		_spec.SetField(actionplan.FieldStatus, field.TypeString, value)
	}
	if apu.mutation.StatusCleared() {
		_spec.ClearField(actionplan.FieldStatus, field.TypeString)
	}
	if value, ok := apu.mutation.DueDate(); ok {
		_spec.SetField(actionplan.FieldDueDate, field.TypeTime, value)
	}
	if apu.mutation.DueDateCleared() {
		_spec.ClearField(actionplan.FieldDueDate, field.TypeTime)
	}
	if value, ok := apu.mutation.Priority(); ok {
		_spec.SetField(actionplan.FieldPriority, field.TypeString, value)
	}
	if apu.mutation.PriorityCleared() {
		_spec.ClearField(actionplan.FieldPriority, field.TypeString)
	}
	if value, ok := apu.mutation.Source(); ok {
		_spec.SetField(actionplan.FieldSource, field.TypeString, value)
	}
	if apu.mutation.SourceCleared() {
		_spec.ClearField(actionplan.FieldSource, field.TypeString)
	}
	if value, ok := apu.mutation.Details(); ok {
		_spec.SetField(actionplan.FieldDetails, field.TypeJSON, value)
	}
	if apu.mutation.DetailsCleared() {
		_spec.ClearField(actionplan.FieldDetails, field.TypeJSON)
	}
	if apu.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.StandardTable,
			Columns: actionplan.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.StandardActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedStandardIDs(); len(nodes) > 0 && !apu.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.StandardTable,
			Columns: actionplan.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.StandardActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.StandardTable,
			Columns: actionplan.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.StandardActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.RiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RiskTable,
			Columns: actionplan.RiskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.RiskActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedRiskIDs(); len(nodes) > 0 && !apu.mutation.RiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RiskTable,
			Columns: actionplan.RiskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RiskTable,
			Columns: actionplan.RiskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlTable,
			Columns: actionplan.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ControlActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedControlIDs(); len(nodes) > 0 && !apu.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlTable,
			Columns: actionplan.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlTable,
			Columns: actionplan.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UserTable,
			Columns: actionplan.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.UserActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedUserIDs(); len(nodes) > 0 && !apu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UserTable,
			Columns: actionplan.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.UserActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UserTable,
			Columns: actionplan.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.UserActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramTable,
			Columns: actionplan.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ProgramActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedProgramIDs(); len(nodes) > 0 && !apu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramTable,
			Columns: actionplan.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramTable,
			Columns: actionplan.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apu.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = apu.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, apu.schemaConfig)
	_spec.AddModifiers(apu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// ActionPlanUpdateOne is the builder for updating a single ActionPlan entity.
type ActionPlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActionPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *ActionPlanUpdateOne) SetUpdatedAt(t time.Time) *ActionPlanUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apuo *ActionPlanUpdateOne) ClearUpdatedAt() *ActionPlanUpdateOne {
	apuo.mutation.ClearUpdatedAt()
	return apuo
}

// SetUpdatedBy sets the "updated_by" field.
func (apuo *ActionPlanUpdateOne) SetUpdatedBy(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetUpdatedBy(s)
	return apuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableUpdatedBy(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetUpdatedBy(*s)
	}
	return apuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apuo *ActionPlanUpdateOne) ClearUpdatedBy() *ActionPlanUpdateOne {
	apuo.mutation.ClearUpdatedBy()
	return apuo
}

// SetDeletedAt sets the "deleted_at" field.
func (apuo *ActionPlanUpdateOne) SetDeletedAt(t time.Time) *ActionPlanUpdateOne {
	apuo.mutation.SetDeletedAt(t)
	return apuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDeletedAt(t *time.Time) *ActionPlanUpdateOne {
	if t != nil {
		apuo.SetDeletedAt(*t)
	}
	return apuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (apuo *ActionPlanUpdateOne) ClearDeletedAt() *ActionPlanUpdateOne {
	apuo.mutation.ClearDeletedAt()
	return apuo
}

// SetDeletedBy sets the "deleted_by" field.
func (apuo *ActionPlanUpdateOne) SetDeletedBy(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetDeletedBy(s)
	return apuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDeletedBy(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetDeletedBy(*s)
	}
	return apuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (apuo *ActionPlanUpdateOne) ClearDeletedBy() *ActionPlanUpdateOne {
	apuo.mutation.ClearDeletedBy()
	return apuo
}

// SetTags sets the "tags" field.
func (apuo *ActionPlanUpdateOne) SetTags(s []string) *ActionPlanUpdateOne {
	apuo.mutation.SetTags(s)
	return apuo
}

// AppendTags appends s to the "tags" field.
func (apuo *ActionPlanUpdateOne) AppendTags(s []string) *ActionPlanUpdateOne {
	apuo.mutation.AppendTags(s)
	return apuo
}

// ClearTags clears the value of the "tags" field.
func (apuo *ActionPlanUpdateOne) ClearTags() *ActionPlanUpdateOne {
	apuo.mutation.ClearTags()
	return apuo
}

// SetName sets the "name" field.
func (apuo *ActionPlanUpdateOne) SetName(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetName(s)
	return apuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableName(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetName(*s)
	}
	return apuo
}

// SetDescription sets the "description" field.
func (apuo *ActionPlanUpdateOne) SetDescription(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetDescription(s)
	return apuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDescription(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetDescription(*s)
	}
	return apuo
}

// ClearDescription clears the value of the "description" field.
func (apuo *ActionPlanUpdateOne) ClearDescription() *ActionPlanUpdateOne {
	apuo.mutation.ClearDescription()
	return apuo
}

// SetStatus sets the "status" field.
func (apuo *ActionPlanUpdateOne) SetStatus(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetStatus(s)
	return apuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableStatus(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetStatus(*s)
	}
	return apuo
}

// ClearStatus clears the value of the "status" field.
func (apuo *ActionPlanUpdateOne) ClearStatus() *ActionPlanUpdateOne {
	apuo.mutation.ClearStatus()
	return apuo
}

// SetDueDate sets the "due_date" field.
func (apuo *ActionPlanUpdateOne) SetDueDate(t time.Time) *ActionPlanUpdateOne {
	apuo.mutation.SetDueDate(t)
	return apuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableDueDate(t *time.Time) *ActionPlanUpdateOne {
	if t != nil {
		apuo.SetDueDate(*t)
	}
	return apuo
}

// ClearDueDate clears the value of the "due_date" field.
func (apuo *ActionPlanUpdateOne) ClearDueDate() *ActionPlanUpdateOne {
	apuo.mutation.ClearDueDate()
	return apuo
}

// SetPriority sets the "priority" field.
func (apuo *ActionPlanUpdateOne) SetPriority(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetPriority(s)
	return apuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillablePriority(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetPriority(*s)
	}
	return apuo
}

// ClearPriority clears the value of the "priority" field.
func (apuo *ActionPlanUpdateOne) ClearPriority() *ActionPlanUpdateOne {
	apuo.mutation.ClearPriority()
	return apuo
}

// SetSource sets the "source" field.
func (apuo *ActionPlanUpdateOne) SetSource(s string) *ActionPlanUpdateOne {
	apuo.mutation.SetSource(s)
	return apuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (apuo *ActionPlanUpdateOne) SetNillableSource(s *string) *ActionPlanUpdateOne {
	if s != nil {
		apuo.SetSource(*s)
	}
	return apuo
}

// ClearSource clears the value of the "source" field.
func (apuo *ActionPlanUpdateOne) ClearSource() *ActionPlanUpdateOne {
	apuo.mutation.ClearSource()
	return apuo
}

// SetDetails sets the "details" field.
func (apuo *ActionPlanUpdateOne) SetDetails(m map[string]interface{}) *ActionPlanUpdateOne {
	apuo.mutation.SetDetails(m)
	return apuo
}

// ClearDetails clears the value of the "details" field.
func (apuo *ActionPlanUpdateOne) ClearDetails() *ActionPlanUpdateOne {
	apuo.mutation.ClearDetails()
	return apuo
}

// AddStandardIDs adds the "standard" edge to the Standard entity by IDs.
func (apuo *ActionPlanUpdateOne) AddStandardIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddStandardIDs(ids...)
	return apuo
}

// AddStandard adds the "standard" edges to the Standard entity.
func (apuo *ActionPlanUpdateOne) AddStandard(s ...*Standard) *ActionPlanUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return apuo.AddStandardIDs(ids...)
}

// AddRiskIDs adds the "risk" edge to the Risk entity by IDs.
func (apuo *ActionPlanUpdateOne) AddRiskIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddRiskIDs(ids...)
	return apuo
}

// AddRisk adds the "risk" edges to the Risk entity.
func (apuo *ActionPlanUpdateOne) AddRisk(r ...*Risk) *ActionPlanUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.AddRiskIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (apuo *ActionPlanUpdateOne) AddControlIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddControlIDs(ids...)
	return apuo
}

// AddControl adds the "control" edges to the Control entity.
func (apuo *ActionPlanUpdateOne) AddControl(c ...*Control) *ActionPlanUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apuo.AddControlIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (apuo *ActionPlanUpdateOne) AddUserIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddUserIDs(ids...)
	return apuo
}

// AddUser adds the "user" edges to the User entity.
func (apuo *ActionPlanUpdateOne) AddUser(u ...*User) *ActionPlanUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apuo.AddUserIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (apuo *ActionPlanUpdateOne) AddProgramIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.AddProgramIDs(ids...)
	return apuo
}

// AddProgram adds the "program" edges to the Program entity.
func (apuo *ActionPlanUpdateOne) AddProgram(p ...*Program) *ActionPlanUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apuo.AddProgramIDs(ids...)
}

// Mutation returns the ActionPlanMutation object of the builder.
func (apuo *ActionPlanUpdateOne) Mutation() *ActionPlanMutation {
	return apuo.mutation
}

// ClearStandard clears all "standard" edges to the Standard entity.
func (apuo *ActionPlanUpdateOne) ClearStandard() *ActionPlanUpdateOne {
	apuo.mutation.ClearStandard()
	return apuo
}

// RemoveStandardIDs removes the "standard" edge to Standard entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveStandardIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveStandardIDs(ids...)
	return apuo
}

// RemoveStandard removes "standard" edges to Standard entities.
func (apuo *ActionPlanUpdateOne) RemoveStandard(s ...*Standard) *ActionPlanUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return apuo.RemoveStandardIDs(ids...)
}

// ClearRisk clears all "risk" edges to the Risk entity.
func (apuo *ActionPlanUpdateOne) ClearRisk() *ActionPlanUpdateOne {
	apuo.mutation.ClearRisk()
	return apuo
}

// RemoveRiskIDs removes the "risk" edge to Risk entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveRiskIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveRiskIDs(ids...)
	return apuo
}

// RemoveRisk removes "risk" edges to Risk entities.
func (apuo *ActionPlanUpdateOne) RemoveRisk(r ...*Risk) *ActionPlanUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.RemoveRiskIDs(ids...)
}

// ClearControl clears all "control" edges to the Control entity.
func (apuo *ActionPlanUpdateOne) ClearControl() *ActionPlanUpdateOne {
	apuo.mutation.ClearControl()
	return apuo
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveControlIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveControlIDs(ids...)
	return apuo
}

// RemoveControl removes "control" edges to Control entities.
func (apuo *ActionPlanUpdateOne) RemoveControl(c ...*Control) *ActionPlanUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return apuo.RemoveControlIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (apuo *ActionPlanUpdateOne) ClearUser() *ActionPlanUpdateOne {
	apuo.mutation.ClearUser()
	return apuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveUserIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveUserIDs(ids...)
	return apuo
}

// RemoveUser removes "user" edges to User entities.
func (apuo *ActionPlanUpdateOne) RemoveUser(u ...*User) *ActionPlanUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apuo.RemoveUserIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (apuo *ActionPlanUpdateOne) ClearProgram() *ActionPlanUpdateOne {
	apuo.mutation.ClearProgram()
	return apuo
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (apuo *ActionPlanUpdateOne) RemoveProgramIDs(ids ...string) *ActionPlanUpdateOne {
	apuo.mutation.RemoveProgramIDs(ids...)
	return apuo
}

// RemoveProgram removes "program" edges to Program entities.
func (apuo *ActionPlanUpdateOne) RemoveProgram(p ...*Program) *ActionPlanUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apuo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the ActionPlanUpdate builder.
func (apuo *ActionPlanUpdateOne) Where(ps ...predicate.ActionPlan) *ActionPlanUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *ActionPlanUpdateOne) Select(field string, fields ...string) *ActionPlanUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated ActionPlan entity.
func (apuo *ActionPlanUpdateOne) Save(ctx context.Context) (*ActionPlan, error) {
	if err := apuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *ActionPlanUpdateOne) SaveX(ctx context.Context) *ActionPlan {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *ActionPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *ActionPlanUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *ActionPlanUpdateOne) defaults() error {
	if _, ok := apuo.mutation.UpdatedAt(); !ok && !apuo.mutation.UpdatedAtCleared() {
		if actionplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplan.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apuo *ActionPlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanUpdateOne {
	apuo.modifiers = append(apuo.modifiers, modifiers...)
	return apuo
}

func (apuo *ActionPlanUpdateOne) sqlSave(ctx context.Context) (_node *ActionPlan, err error) {
	_spec := sqlgraph.NewUpdateSpec(actionplan.Table, actionplan.Columns, sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ActionPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionplan.FieldID)
		for _, f := range fields {
			if !actionplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != actionplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apuo.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if apuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplan.FieldUpdatedAt, field.TypeTime)
	}
	if apuo.mutation.CreatedByCleared() {
		_spec.ClearField(actionplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := apuo.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplan.FieldUpdatedBy, field.TypeString, value)
	}
	if apuo.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := apuo.mutation.DeletedAt(); ok {
		_spec.SetField(actionplan.FieldDeletedAt, field.TypeTime, value)
	}
	if apuo.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.DeletedBy(); ok {
		_spec.SetField(actionplan.FieldDeletedBy, field.TypeString, value)
	}
	if apuo.mutation.DeletedByCleared() {
		_spec.ClearField(actionplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := apuo.mutation.Tags(); ok {
		_spec.SetField(actionplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := apuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplan.FieldTags, value)
		})
	}
	if apuo.mutation.TagsCleared() {
		_spec.ClearField(actionplan.FieldTags, field.TypeJSON)
	}
	if value, ok := apuo.mutation.Name(); ok {
		_spec.SetField(actionplan.FieldName, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Description(); ok {
		_spec.SetField(actionplan.FieldDescription, field.TypeString, value)
	}
	if apuo.mutation.DescriptionCleared() {
		_spec.ClearField(actionplan.FieldDescription, field.TypeString)
	}
	if value, ok := apuo.mutation.Status(); ok {
		_spec.SetField(actionplan.FieldStatus, field.TypeString, value)
	}
	if apuo.mutation.StatusCleared() {
		_spec.ClearField(actionplan.FieldStatus, field.TypeString)
	}
	if value, ok := apuo.mutation.DueDate(); ok {
		_spec.SetField(actionplan.FieldDueDate, field.TypeTime, value)
	}
	if apuo.mutation.DueDateCleared() {
		_spec.ClearField(actionplan.FieldDueDate, field.TypeTime)
	}
	if value, ok := apuo.mutation.Priority(); ok {
		_spec.SetField(actionplan.FieldPriority, field.TypeString, value)
	}
	if apuo.mutation.PriorityCleared() {
		_spec.ClearField(actionplan.FieldPriority, field.TypeString)
	}
	if value, ok := apuo.mutation.Source(); ok {
		_spec.SetField(actionplan.FieldSource, field.TypeString, value)
	}
	if apuo.mutation.SourceCleared() {
		_spec.ClearField(actionplan.FieldSource, field.TypeString)
	}
	if value, ok := apuo.mutation.Details(); ok {
		_spec.SetField(actionplan.FieldDetails, field.TypeJSON, value)
	}
	if apuo.mutation.DetailsCleared() {
		_spec.ClearField(actionplan.FieldDetails, field.TypeJSON)
	}
	if apuo.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.StandardTable,
			Columns: actionplan.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.StandardActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedStandardIDs(); len(nodes) > 0 && !apuo.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.StandardTable,
			Columns: actionplan.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.StandardActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.StandardTable,
			Columns: actionplan.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.StandardActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.RiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RiskTable,
			Columns: actionplan.RiskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.RiskActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedRiskIDs(); len(nodes) > 0 && !apuo.mutation.RiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RiskTable,
			Columns: actionplan.RiskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RiskTable,
			Columns: actionplan.RiskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlTable,
			Columns: actionplan.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ControlActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedControlIDs(); len(nodes) > 0 && !apuo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlTable,
			Columns: actionplan.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlTable,
			Columns: actionplan.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UserTable,
			Columns: actionplan.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.UserActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !apuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UserTable,
			Columns: actionplan.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.UserActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.UserTable,
			Columns: actionplan.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.UserActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramTable,
			Columns: actionplan.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ProgramActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedProgramIDs(); len(nodes) > 0 && !apuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramTable,
			Columns: actionplan.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramTable,
			Columns: actionplan.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = apuo.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = apuo.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, apuo.schemaConfig)
	_spec.AddModifiers(apuo.modifiers...)
	_node = &ActionPlan{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
