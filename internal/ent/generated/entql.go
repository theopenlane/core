// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/assethistory"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementationhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/customdomainhistory"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/dnsverificationhistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/evidencehistory"
	"github.com/theopenlane/core/internal/ent/generated/export"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplatehistory"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomainhistory"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/narrativehistory"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/onboarding"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscriptionhistory"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/programmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/scanhistory"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobhistory"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/standardhistory"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/subprocessorhistory"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliance"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliancehistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterhistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessorhistory"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 109)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apitoken.Table,
			Columns: apitoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apitoken.FieldID,
			},
		},
		Type: "APIToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			apitoken.FieldCreatedAt:         {Type: field.TypeTime, Column: apitoken.FieldCreatedAt},
			apitoken.FieldUpdatedAt:         {Type: field.TypeTime, Column: apitoken.FieldUpdatedAt},
			apitoken.FieldCreatedBy:         {Type: field.TypeString, Column: apitoken.FieldCreatedBy},
			apitoken.FieldUpdatedBy:         {Type: field.TypeString, Column: apitoken.FieldUpdatedBy},
			apitoken.FieldDeletedAt:         {Type: field.TypeTime, Column: apitoken.FieldDeletedAt},
			apitoken.FieldDeletedBy:         {Type: field.TypeString, Column: apitoken.FieldDeletedBy},
			apitoken.FieldTags:              {Type: field.TypeJSON, Column: apitoken.FieldTags},
			apitoken.FieldOwnerID:           {Type: field.TypeString, Column: apitoken.FieldOwnerID},
			apitoken.FieldName:              {Type: field.TypeString, Column: apitoken.FieldName},
			apitoken.FieldToken:             {Type: field.TypeString, Column: apitoken.FieldToken},
			apitoken.FieldExpiresAt:         {Type: field.TypeTime, Column: apitoken.FieldExpiresAt},
			apitoken.FieldDescription:       {Type: field.TypeString, Column: apitoken.FieldDescription},
			apitoken.FieldScopes:            {Type: field.TypeJSON, Column: apitoken.FieldScopes},
			apitoken.FieldLastUsedAt:        {Type: field.TypeTime, Column: apitoken.FieldLastUsedAt},
			apitoken.FieldIsActive:          {Type: field.TypeBool, Column: apitoken.FieldIsActive},
			apitoken.FieldRevokedReason:     {Type: field.TypeString, Column: apitoken.FieldRevokedReason},
			apitoken.FieldRevokedBy:         {Type: field.TypeString, Column: apitoken.FieldRevokedBy},
			apitoken.FieldRevokedAt:         {Type: field.TypeTime, Column: apitoken.FieldRevokedAt},
			apitoken.FieldSSOAuthorizations: {Type: field.TypeJSON, Column: apitoken.FieldSSOAuthorizations},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   actionplan.Table,
			Columns: actionplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: actionplan.FieldID,
			},
		},
		Type: "ActionPlan",
		Fields: map[string]*sqlgraph.FieldSpec{
			actionplan.FieldCreatedAt:                       {Type: field.TypeTime, Column: actionplan.FieldCreatedAt},
			actionplan.FieldUpdatedAt:                       {Type: field.TypeTime, Column: actionplan.FieldUpdatedAt},
			actionplan.FieldCreatedBy:                       {Type: field.TypeString, Column: actionplan.FieldCreatedBy},
			actionplan.FieldUpdatedBy:                       {Type: field.TypeString, Column: actionplan.FieldUpdatedBy},
			actionplan.FieldDeletedAt:                       {Type: field.TypeTime, Column: actionplan.FieldDeletedAt},
			actionplan.FieldDeletedBy:                       {Type: field.TypeString, Column: actionplan.FieldDeletedBy},
			actionplan.FieldTags:                            {Type: field.TypeJSON, Column: actionplan.FieldTags},
			actionplan.FieldRevision:                        {Type: field.TypeString, Column: actionplan.FieldRevision},
			actionplan.FieldName:                            {Type: field.TypeString, Column: actionplan.FieldName},
			actionplan.FieldStatus:                          {Type: field.TypeEnum, Column: actionplan.FieldStatus},
			actionplan.FieldActionPlanType:                  {Type: field.TypeString, Column: actionplan.FieldActionPlanType},
			actionplan.FieldDetails:                         {Type: field.TypeString, Column: actionplan.FieldDetails},
			actionplan.FieldApprovalRequired:                {Type: field.TypeBool, Column: actionplan.FieldApprovalRequired},
			actionplan.FieldReviewDue:                       {Type: field.TypeTime, Column: actionplan.FieldReviewDue},
			actionplan.FieldReviewFrequency:                 {Type: field.TypeEnum, Column: actionplan.FieldReviewFrequency},
			actionplan.FieldApproverID:                      {Type: field.TypeString, Column: actionplan.FieldApproverID},
			actionplan.FieldDelegateID:                      {Type: field.TypeString, Column: actionplan.FieldDelegateID},
			actionplan.FieldSummary:                         {Type: field.TypeString, Column: actionplan.FieldSummary},
			actionplan.FieldTagSuggestions:                  {Type: field.TypeJSON, Column: actionplan.FieldTagSuggestions},
			actionplan.FieldDismissedTagSuggestions:         {Type: field.TypeJSON, Column: actionplan.FieldDismissedTagSuggestions},
			actionplan.FieldControlSuggestions:              {Type: field.TypeJSON, Column: actionplan.FieldControlSuggestions},
			actionplan.FieldDismissedControlSuggestions:     {Type: field.TypeJSON, Column: actionplan.FieldDismissedControlSuggestions},
			actionplan.FieldImprovementSuggestions:          {Type: field.TypeJSON, Column: actionplan.FieldImprovementSuggestions},
			actionplan.FieldDismissedImprovementSuggestions: {Type: field.TypeJSON, Column: actionplan.FieldDismissedImprovementSuggestions},
			actionplan.FieldOwnerID:                         {Type: field.TypeString, Column: actionplan.FieldOwnerID},
			actionplan.FieldDueDate:                         {Type: field.TypeTime, Column: actionplan.FieldDueDate},
			actionplan.FieldPriority:                        {Type: field.TypeEnum, Column: actionplan.FieldPriority},
			actionplan.FieldSource:                          {Type: field.TypeString, Column: actionplan.FieldSource},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   actionplanhistory.Table,
			Columns: actionplanhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: actionplanhistory.FieldID,
			},
		},
		Type: "ActionPlanHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			actionplanhistory.FieldHistoryTime:                     {Type: field.TypeTime, Column: actionplanhistory.FieldHistoryTime},
			actionplanhistory.FieldRef:                             {Type: field.TypeString, Column: actionplanhistory.FieldRef},
			actionplanhistory.FieldOperation:                       {Type: field.TypeEnum, Column: actionplanhistory.FieldOperation},
			actionplanhistory.FieldCreatedAt:                       {Type: field.TypeTime, Column: actionplanhistory.FieldCreatedAt},
			actionplanhistory.FieldUpdatedAt:                       {Type: field.TypeTime, Column: actionplanhistory.FieldUpdatedAt},
			actionplanhistory.FieldCreatedBy:                       {Type: field.TypeString, Column: actionplanhistory.FieldCreatedBy},
			actionplanhistory.FieldUpdatedBy:                       {Type: field.TypeString, Column: actionplanhistory.FieldUpdatedBy},
			actionplanhistory.FieldDeletedAt:                       {Type: field.TypeTime, Column: actionplanhistory.FieldDeletedAt},
			actionplanhistory.FieldDeletedBy:                       {Type: field.TypeString, Column: actionplanhistory.FieldDeletedBy},
			actionplanhistory.FieldTags:                            {Type: field.TypeJSON, Column: actionplanhistory.FieldTags},
			actionplanhistory.FieldRevision:                        {Type: field.TypeString, Column: actionplanhistory.FieldRevision},
			actionplanhistory.FieldName:                            {Type: field.TypeString, Column: actionplanhistory.FieldName},
			actionplanhistory.FieldStatus:                          {Type: field.TypeEnum, Column: actionplanhistory.FieldStatus},
			actionplanhistory.FieldActionPlanType:                  {Type: field.TypeString, Column: actionplanhistory.FieldActionPlanType},
			actionplanhistory.FieldDetails:                         {Type: field.TypeString, Column: actionplanhistory.FieldDetails},
			actionplanhistory.FieldApprovalRequired:                {Type: field.TypeBool, Column: actionplanhistory.FieldApprovalRequired},
			actionplanhistory.FieldReviewDue:                       {Type: field.TypeTime, Column: actionplanhistory.FieldReviewDue},
			actionplanhistory.FieldReviewFrequency:                 {Type: field.TypeEnum, Column: actionplanhistory.FieldReviewFrequency},
			actionplanhistory.FieldApproverID:                      {Type: field.TypeString, Column: actionplanhistory.FieldApproverID},
			actionplanhistory.FieldDelegateID:                      {Type: field.TypeString, Column: actionplanhistory.FieldDelegateID},
			actionplanhistory.FieldSummary:                         {Type: field.TypeString, Column: actionplanhistory.FieldSummary},
			actionplanhistory.FieldTagSuggestions:                  {Type: field.TypeJSON, Column: actionplanhistory.FieldTagSuggestions},
			actionplanhistory.FieldDismissedTagSuggestions:         {Type: field.TypeJSON, Column: actionplanhistory.FieldDismissedTagSuggestions},
			actionplanhistory.FieldControlSuggestions:              {Type: field.TypeJSON, Column: actionplanhistory.FieldControlSuggestions},
			actionplanhistory.FieldDismissedControlSuggestions:     {Type: field.TypeJSON, Column: actionplanhistory.FieldDismissedControlSuggestions},
			actionplanhistory.FieldImprovementSuggestions:          {Type: field.TypeJSON, Column: actionplanhistory.FieldImprovementSuggestions},
			actionplanhistory.FieldDismissedImprovementSuggestions: {Type: field.TypeJSON, Column: actionplanhistory.FieldDismissedImprovementSuggestions},
			actionplanhistory.FieldOwnerID:                         {Type: field.TypeString, Column: actionplanhistory.FieldOwnerID},
			actionplanhistory.FieldDueDate:                         {Type: field.TypeTime, Column: actionplanhistory.FieldDueDate},
			actionplanhistory.FieldPriority:                        {Type: field.TypeEnum, Column: actionplanhistory.FieldPriority},
			actionplanhistory.FieldSource:                          {Type: field.TypeString, Column: actionplanhistory.FieldSource},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   asset.Table,
			Columns: asset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: asset.FieldID,
			},
		},
		Type: "Asset",
		Fields: map[string]*sqlgraph.FieldSpec{
			asset.FieldCreatedAt:   {Type: field.TypeTime, Column: asset.FieldCreatedAt},
			asset.FieldUpdatedAt:   {Type: field.TypeTime, Column: asset.FieldUpdatedAt},
			asset.FieldCreatedBy:   {Type: field.TypeString, Column: asset.FieldCreatedBy},
			asset.FieldUpdatedBy:   {Type: field.TypeString, Column: asset.FieldUpdatedBy},
			asset.FieldDeletedAt:   {Type: field.TypeTime, Column: asset.FieldDeletedAt},
			asset.FieldDeletedBy:   {Type: field.TypeString, Column: asset.FieldDeletedBy},
			asset.FieldTags:        {Type: field.TypeJSON, Column: asset.FieldTags},
			asset.FieldOwnerID:     {Type: field.TypeString, Column: asset.FieldOwnerID},
			asset.FieldAssetType:   {Type: field.TypeEnum, Column: asset.FieldAssetType},
			asset.FieldName:        {Type: field.TypeString, Column: asset.FieldName},
			asset.FieldDescription: {Type: field.TypeString, Column: asset.FieldDescription},
			asset.FieldIdentifier:  {Type: field.TypeString, Column: asset.FieldIdentifier},
			asset.FieldWebsite:     {Type: field.TypeString, Column: asset.FieldWebsite},
			asset.FieldCpe:         {Type: field.TypeString, Column: asset.FieldCpe},
			asset.FieldCategories:  {Type: field.TypeJSON, Column: asset.FieldCategories},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   assethistory.Table,
			Columns: assethistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: assethistory.FieldID,
			},
		},
		Type: "AssetHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			assethistory.FieldHistoryTime: {Type: field.TypeTime, Column: assethistory.FieldHistoryTime},
			assethistory.FieldRef:         {Type: field.TypeString, Column: assethistory.FieldRef},
			assethistory.FieldOperation:   {Type: field.TypeEnum, Column: assethistory.FieldOperation},
			assethistory.FieldCreatedAt:   {Type: field.TypeTime, Column: assethistory.FieldCreatedAt},
			assethistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: assethistory.FieldUpdatedAt},
			assethistory.FieldCreatedBy:   {Type: field.TypeString, Column: assethistory.FieldCreatedBy},
			assethistory.FieldUpdatedBy:   {Type: field.TypeString, Column: assethistory.FieldUpdatedBy},
			assethistory.FieldDeletedAt:   {Type: field.TypeTime, Column: assethistory.FieldDeletedAt},
			assethistory.FieldDeletedBy:   {Type: field.TypeString, Column: assethistory.FieldDeletedBy},
			assethistory.FieldTags:        {Type: field.TypeJSON, Column: assethistory.FieldTags},
			assethistory.FieldOwnerID:     {Type: field.TypeString, Column: assethistory.FieldOwnerID},
			assethistory.FieldAssetType:   {Type: field.TypeEnum, Column: assethistory.FieldAssetType},
			assethistory.FieldName:        {Type: field.TypeString, Column: assethistory.FieldName},
			assethistory.FieldDescription: {Type: field.TypeString, Column: assethistory.FieldDescription},
			assethistory.FieldIdentifier:  {Type: field.TypeString, Column: assethistory.FieldIdentifier},
			assethistory.FieldWebsite:     {Type: field.TypeString, Column: assethistory.FieldWebsite},
			assethistory.FieldCpe:         {Type: field.TypeString, Column: assethistory.FieldCpe},
			assethistory.FieldCategories:  {Type: field.TypeJSON, Column: assethistory.FieldCategories},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contact.Table,
			Columns: contact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contact.FieldID,
			},
		},
		Type: "Contact",
		Fields: map[string]*sqlgraph.FieldSpec{
			contact.FieldCreatedAt:   {Type: field.TypeTime, Column: contact.FieldCreatedAt},
			contact.FieldUpdatedAt:   {Type: field.TypeTime, Column: contact.FieldUpdatedAt},
			contact.FieldCreatedBy:   {Type: field.TypeString, Column: contact.FieldCreatedBy},
			contact.FieldUpdatedBy:   {Type: field.TypeString, Column: contact.FieldUpdatedBy},
			contact.FieldDeletedAt:   {Type: field.TypeTime, Column: contact.FieldDeletedAt},
			contact.FieldDeletedBy:   {Type: field.TypeString, Column: contact.FieldDeletedBy},
			contact.FieldTags:        {Type: field.TypeJSON, Column: contact.FieldTags},
			contact.FieldOwnerID:     {Type: field.TypeString, Column: contact.FieldOwnerID},
			contact.FieldFullName:    {Type: field.TypeString, Column: contact.FieldFullName},
			contact.FieldTitle:       {Type: field.TypeString, Column: contact.FieldTitle},
			contact.FieldCompany:     {Type: field.TypeString, Column: contact.FieldCompany},
			contact.FieldEmail:       {Type: field.TypeString, Column: contact.FieldEmail},
			contact.FieldPhoneNumber: {Type: field.TypeString, Column: contact.FieldPhoneNumber},
			contact.FieldAddress:     {Type: field.TypeString, Column: contact.FieldAddress},
			contact.FieldStatus:      {Type: field.TypeEnum, Column: contact.FieldStatus},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contacthistory.Table,
			Columns: contacthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contacthistory.FieldID,
			},
		},
		Type: "ContactHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			contacthistory.FieldHistoryTime: {Type: field.TypeTime, Column: contacthistory.FieldHistoryTime},
			contacthistory.FieldRef:         {Type: field.TypeString, Column: contacthistory.FieldRef},
			contacthistory.FieldOperation:   {Type: field.TypeEnum, Column: contacthistory.FieldOperation},
			contacthistory.FieldCreatedAt:   {Type: field.TypeTime, Column: contacthistory.FieldCreatedAt},
			contacthistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: contacthistory.FieldUpdatedAt},
			contacthistory.FieldCreatedBy:   {Type: field.TypeString, Column: contacthistory.FieldCreatedBy},
			contacthistory.FieldUpdatedBy:   {Type: field.TypeString, Column: contacthistory.FieldUpdatedBy},
			contacthistory.FieldDeletedAt:   {Type: field.TypeTime, Column: contacthistory.FieldDeletedAt},
			contacthistory.FieldDeletedBy:   {Type: field.TypeString, Column: contacthistory.FieldDeletedBy},
			contacthistory.FieldTags:        {Type: field.TypeJSON, Column: contacthistory.FieldTags},
			contacthistory.FieldOwnerID:     {Type: field.TypeString, Column: contacthistory.FieldOwnerID},
			contacthistory.FieldFullName:    {Type: field.TypeString, Column: contacthistory.FieldFullName},
			contacthistory.FieldTitle:       {Type: field.TypeString, Column: contacthistory.FieldTitle},
			contacthistory.FieldCompany:     {Type: field.TypeString, Column: contacthistory.FieldCompany},
			contacthistory.FieldEmail:       {Type: field.TypeString, Column: contacthistory.FieldEmail},
			contacthistory.FieldPhoneNumber: {Type: field.TypeString, Column: contacthistory.FieldPhoneNumber},
			contacthistory.FieldAddress:     {Type: field.TypeString, Column: contacthistory.FieldAddress},
			contacthistory.FieldStatus:      {Type: field.TypeEnum, Column: contacthistory.FieldStatus},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   control.Table,
			Columns: control.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: control.FieldID,
			},
		},
		Type: "Control",
		Fields: map[string]*sqlgraph.FieldSpec{
			control.FieldCreatedAt:              {Type: field.TypeTime, Column: control.FieldCreatedAt},
			control.FieldUpdatedAt:              {Type: field.TypeTime, Column: control.FieldUpdatedAt},
			control.FieldCreatedBy:              {Type: field.TypeString, Column: control.FieldCreatedBy},
			control.FieldUpdatedBy:              {Type: field.TypeString, Column: control.FieldUpdatedBy},
			control.FieldDeletedAt:              {Type: field.TypeTime, Column: control.FieldDeletedAt},
			control.FieldDeletedBy:              {Type: field.TypeString, Column: control.FieldDeletedBy},
			control.FieldDisplayID:              {Type: field.TypeString, Column: control.FieldDisplayID},
			control.FieldTags:                   {Type: field.TypeJSON, Column: control.FieldTags},
			control.FieldDescription:            {Type: field.TypeString, Column: control.FieldDescription},
			control.FieldReferenceID:            {Type: field.TypeString, Column: control.FieldReferenceID},
			control.FieldAuditorReferenceID:     {Type: field.TypeString, Column: control.FieldAuditorReferenceID},
			control.FieldStatus:                 {Type: field.TypeEnum, Column: control.FieldStatus},
			control.FieldSource:                 {Type: field.TypeEnum, Column: control.FieldSource},
			control.FieldReferenceFramework:     {Type: field.TypeString, Column: control.FieldReferenceFramework},
			control.FieldControlType:            {Type: field.TypeEnum, Column: control.FieldControlType},
			control.FieldCategory:               {Type: field.TypeString, Column: control.FieldCategory},
			control.FieldCategoryID:             {Type: field.TypeString, Column: control.FieldCategoryID},
			control.FieldSubcategory:            {Type: field.TypeString, Column: control.FieldSubcategory},
			control.FieldMappedCategories:       {Type: field.TypeJSON, Column: control.FieldMappedCategories},
			control.FieldAssessmentObjectives:   {Type: field.TypeJSON, Column: control.FieldAssessmentObjectives},
			control.FieldAssessmentMethods:      {Type: field.TypeJSON, Column: control.FieldAssessmentMethods},
			control.FieldControlQuestions:       {Type: field.TypeJSON, Column: control.FieldControlQuestions},
			control.FieldImplementationGuidance: {Type: field.TypeJSON, Column: control.FieldImplementationGuidance},
			control.FieldExampleEvidence:        {Type: field.TypeJSON, Column: control.FieldExampleEvidence},
			control.FieldReferences:             {Type: field.TypeJSON, Column: control.FieldReferences},
			control.FieldControlOwnerID:         {Type: field.TypeString, Column: control.FieldControlOwnerID},
			control.FieldDelegateID:             {Type: field.TypeString, Column: control.FieldDelegateID},
			control.FieldOwnerID:                {Type: field.TypeString, Column: control.FieldOwnerID},
			control.FieldRefCode:                {Type: field.TypeString, Column: control.FieldRefCode},
			control.FieldStandardID:             {Type: field.TypeString, Column: control.FieldStandardID},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   controlhistory.Table,
			Columns: controlhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: controlhistory.FieldID,
			},
		},
		Type: "ControlHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			controlhistory.FieldHistoryTime:            {Type: field.TypeTime, Column: controlhistory.FieldHistoryTime},
			controlhistory.FieldRef:                    {Type: field.TypeString, Column: controlhistory.FieldRef},
			controlhistory.FieldOperation:              {Type: field.TypeEnum, Column: controlhistory.FieldOperation},
			controlhistory.FieldCreatedAt:              {Type: field.TypeTime, Column: controlhistory.FieldCreatedAt},
			controlhistory.FieldUpdatedAt:              {Type: field.TypeTime, Column: controlhistory.FieldUpdatedAt},
			controlhistory.FieldCreatedBy:              {Type: field.TypeString, Column: controlhistory.FieldCreatedBy},
			controlhistory.FieldUpdatedBy:              {Type: field.TypeString, Column: controlhistory.FieldUpdatedBy},
			controlhistory.FieldDeletedAt:              {Type: field.TypeTime, Column: controlhistory.FieldDeletedAt},
			controlhistory.FieldDeletedBy:              {Type: field.TypeString, Column: controlhistory.FieldDeletedBy},
			controlhistory.FieldDisplayID:              {Type: field.TypeString, Column: controlhistory.FieldDisplayID},
			controlhistory.FieldTags:                   {Type: field.TypeJSON, Column: controlhistory.FieldTags},
			controlhistory.FieldDescription:            {Type: field.TypeString, Column: controlhistory.FieldDescription},
			controlhistory.FieldReferenceID:            {Type: field.TypeString, Column: controlhistory.FieldReferenceID},
			controlhistory.FieldAuditorReferenceID:     {Type: field.TypeString, Column: controlhistory.FieldAuditorReferenceID},
			controlhistory.FieldStatus:                 {Type: field.TypeEnum, Column: controlhistory.FieldStatus},
			controlhistory.FieldSource:                 {Type: field.TypeEnum, Column: controlhistory.FieldSource},
			controlhistory.FieldReferenceFramework:     {Type: field.TypeString, Column: controlhistory.FieldReferenceFramework},
			controlhistory.FieldControlType:            {Type: field.TypeEnum, Column: controlhistory.FieldControlType},
			controlhistory.FieldCategory:               {Type: field.TypeString, Column: controlhistory.FieldCategory},
			controlhistory.FieldCategoryID:             {Type: field.TypeString, Column: controlhistory.FieldCategoryID},
			controlhistory.FieldSubcategory:            {Type: field.TypeString, Column: controlhistory.FieldSubcategory},
			controlhistory.FieldMappedCategories:       {Type: field.TypeJSON, Column: controlhistory.FieldMappedCategories},
			controlhistory.FieldAssessmentObjectives:   {Type: field.TypeJSON, Column: controlhistory.FieldAssessmentObjectives},
			controlhistory.FieldAssessmentMethods:      {Type: field.TypeJSON, Column: controlhistory.FieldAssessmentMethods},
			controlhistory.FieldControlQuestions:       {Type: field.TypeJSON, Column: controlhistory.FieldControlQuestions},
			controlhistory.FieldImplementationGuidance: {Type: field.TypeJSON, Column: controlhistory.FieldImplementationGuidance},
			controlhistory.FieldExampleEvidence:        {Type: field.TypeJSON, Column: controlhistory.FieldExampleEvidence},
			controlhistory.FieldReferences:             {Type: field.TypeJSON, Column: controlhistory.FieldReferences},
			controlhistory.FieldControlOwnerID:         {Type: field.TypeString, Column: controlhistory.FieldControlOwnerID},
			controlhistory.FieldDelegateID:             {Type: field.TypeString, Column: controlhistory.FieldDelegateID},
			controlhistory.FieldOwnerID:                {Type: field.TypeString, Column: controlhistory.FieldOwnerID},
			controlhistory.FieldRefCode:                {Type: field.TypeString, Column: controlhistory.FieldRefCode},
			controlhistory.FieldStandardID:             {Type: field.TypeString, Column: controlhistory.FieldStandardID},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   controlimplementation.Table,
			Columns: controlimplementation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: controlimplementation.FieldID,
			},
		},
		Type: "ControlImplementation",
		Fields: map[string]*sqlgraph.FieldSpec{
			controlimplementation.FieldCreatedAt:          {Type: field.TypeTime, Column: controlimplementation.FieldCreatedAt},
			controlimplementation.FieldUpdatedAt:          {Type: field.TypeTime, Column: controlimplementation.FieldUpdatedAt},
			controlimplementation.FieldCreatedBy:          {Type: field.TypeString, Column: controlimplementation.FieldCreatedBy},
			controlimplementation.FieldUpdatedBy:          {Type: field.TypeString, Column: controlimplementation.FieldUpdatedBy},
			controlimplementation.FieldDeletedAt:          {Type: field.TypeTime, Column: controlimplementation.FieldDeletedAt},
			controlimplementation.FieldDeletedBy:          {Type: field.TypeString, Column: controlimplementation.FieldDeletedBy},
			controlimplementation.FieldTags:               {Type: field.TypeJSON, Column: controlimplementation.FieldTags},
			controlimplementation.FieldOwnerID:            {Type: field.TypeString, Column: controlimplementation.FieldOwnerID},
			controlimplementation.FieldStatus:             {Type: field.TypeEnum, Column: controlimplementation.FieldStatus},
			controlimplementation.FieldImplementationDate: {Type: field.TypeTime, Column: controlimplementation.FieldImplementationDate},
			controlimplementation.FieldVerified:           {Type: field.TypeBool, Column: controlimplementation.FieldVerified},
			controlimplementation.FieldVerificationDate:   {Type: field.TypeTime, Column: controlimplementation.FieldVerificationDate},
			controlimplementation.FieldDetails:            {Type: field.TypeString, Column: controlimplementation.FieldDetails},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   controlimplementationhistory.Table,
			Columns: controlimplementationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: controlimplementationhistory.FieldID,
			},
		},
		Type: "ControlImplementationHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			controlimplementationhistory.FieldHistoryTime:        {Type: field.TypeTime, Column: controlimplementationhistory.FieldHistoryTime},
			controlimplementationhistory.FieldRef:                {Type: field.TypeString, Column: controlimplementationhistory.FieldRef},
			controlimplementationhistory.FieldOperation:          {Type: field.TypeEnum, Column: controlimplementationhistory.FieldOperation},
			controlimplementationhistory.FieldCreatedAt:          {Type: field.TypeTime, Column: controlimplementationhistory.FieldCreatedAt},
			controlimplementationhistory.FieldUpdatedAt:          {Type: field.TypeTime, Column: controlimplementationhistory.FieldUpdatedAt},
			controlimplementationhistory.FieldCreatedBy:          {Type: field.TypeString, Column: controlimplementationhistory.FieldCreatedBy},
			controlimplementationhistory.FieldUpdatedBy:          {Type: field.TypeString, Column: controlimplementationhistory.FieldUpdatedBy},
			controlimplementationhistory.FieldDeletedAt:          {Type: field.TypeTime, Column: controlimplementationhistory.FieldDeletedAt},
			controlimplementationhistory.FieldDeletedBy:          {Type: field.TypeString, Column: controlimplementationhistory.FieldDeletedBy},
			controlimplementationhistory.FieldTags:               {Type: field.TypeJSON, Column: controlimplementationhistory.FieldTags},
			controlimplementationhistory.FieldOwnerID:            {Type: field.TypeString, Column: controlimplementationhistory.FieldOwnerID},
			controlimplementationhistory.FieldStatus:             {Type: field.TypeEnum, Column: controlimplementationhistory.FieldStatus},
			controlimplementationhistory.FieldImplementationDate: {Type: field.TypeTime, Column: controlimplementationhistory.FieldImplementationDate},
			controlimplementationhistory.FieldVerified:           {Type: field.TypeBool, Column: controlimplementationhistory.FieldVerified},
			controlimplementationhistory.FieldVerificationDate:   {Type: field.TypeTime, Column: controlimplementationhistory.FieldVerificationDate},
			controlimplementationhistory.FieldDetails:            {Type: field.TypeString, Column: controlimplementationhistory.FieldDetails},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   controlobjective.Table,
			Columns: controlobjective.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: controlobjective.FieldID,
			},
		},
		Type: "ControlObjective",
		Fields: map[string]*sqlgraph.FieldSpec{
			controlobjective.FieldCreatedAt:            {Type: field.TypeTime, Column: controlobjective.FieldCreatedAt},
			controlobjective.FieldUpdatedAt:            {Type: field.TypeTime, Column: controlobjective.FieldUpdatedAt},
			controlobjective.FieldCreatedBy:            {Type: field.TypeString, Column: controlobjective.FieldCreatedBy},
			controlobjective.FieldUpdatedBy:            {Type: field.TypeString, Column: controlobjective.FieldUpdatedBy},
			controlobjective.FieldDeletedAt:            {Type: field.TypeTime, Column: controlobjective.FieldDeletedAt},
			controlobjective.FieldDeletedBy:            {Type: field.TypeString, Column: controlobjective.FieldDeletedBy},
			controlobjective.FieldDisplayID:            {Type: field.TypeString, Column: controlobjective.FieldDisplayID},
			controlobjective.FieldTags:                 {Type: field.TypeJSON, Column: controlobjective.FieldTags},
			controlobjective.FieldRevision:             {Type: field.TypeString, Column: controlobjective.FieldRevision},
			controlobjective.FieldOwnerID:              {Type: field.TypeString, Column: controlobjective.FieldOwnerID},
			controlobjective.FieldName:                 {Type: field.TypeString, Column: controlobjective.FieldName},
			controlobjective.FieldDesiredOutcome:       {Type: field.TypeString, Column: controlobjective.FieldDesiredOutcome},
			controlobjective.FieldStatus:               {Type: field.TypeEnum, Column: controlobjective.FieldStatus},
			controlobjective.FieldSource:               {Type: field.TypeEnum, Column: controlobjective.FieldSource},
			controlobjective.FieldControlObjectiveType: {Type: field.TypeString, Column: controlobjective.FieldControlObjectiveType},
			controlobjective.FieldCategory:             {Type: field.TypeString, Column: controlobjective.FieldCategory},
			controlobjective.FieldSubcategory:          {Type: field.TypeString, Column: controlobjective.FieldSubcategory},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   controlobjectivehistory.Table,
			Columns: controlobjectivehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: controlobjectivehistory.FieldID,
			},
		},
		Type: "ControlObjectiveHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			controlobjectivehistory.FieldHistoryTime:          {Type: field.TypeTime, Column: controlobjectivehistory.FieldHistoryTime},
			controlobjectivehistory.FieldRef:                  {Type: field.TypeString, Column: controlobjectivehistory.FieldRef},
			controlobjectivehistory.FieldOperation:            {Type: field.TypeEnum, Column: controlobjectivehistory.FieldOperation},
			controlobjectivehistory.FieldCreatedAt:            {Type: field.TypeTime, Column: controlobjectivehistory.FieldCreatedAt},
			controlobjectivehistory.FieldUpdatedAt:            {Type: field.TypeTime, Column: controlobjectivehistory.FieldUpdatedAt},
			controlobjectivehistory.FieldCreatedBy:            {Type: field.TypeString, Column: controlobjectivehistory.FieldCreatedBy},
			controlobjectivehistory.FieldUpdatedBy:            {Type: field.TypeString, Column: controlobjectivehistory.FieldUpdatedBy},
			controlobjectivehistory.FieldDeletedAt:            {Type: field.TypeTime, Column: controlobjectivehistory.FieldDeletedAt},
			controlobjectivehistory.FieldDeletedBy:            {Type: field.TypeString, Column: controlobjectivehistory.FieldDeletedBy},
			controlobjectivehistory.FieldDisplayID:            {Type: field.TypeString, Column: controlobjectivehistory.FieldDisplayID},
			controlobjectivehistory.FieldTags:                 {Type: field.TypeJSON, Column: controlobjectivehistory.FieldTags},
			controlobjectivehistory.FieldRevision:             {Type: field.TypeString, Column: controlobjectivehistory.FieldRevision},
			controlobjectivehistory.FieldOwnerID:              {Type: field.TypeString, Column: controlobjectivehistory.FieldOwnerID},
			controlobjectivehistory.FieldName:                 {Type: field.TypeString, Column: controlobjectivehistory.FieldName},
			controlobjectivehistory.FieldDesiredOutcome:       {Type: field.TypeString, Column: controlobjectivehistory.FieldDesiredOutcome},
			controlobjectivehistory.FieldStatus:               {Type: field.TypeEnum, Column: controlobjectivehistory.FieldStatus},
			controlobjectivehistory.FieldSource:               {Type: field.TypeEnum, Column: controlobjectivehistory.FieldSource},
			controlobjectivehistory.FieldControlObjectiveType: {Type: field.TypeString, Column: controlobjectivehistory.FieldControlObjectiveType},
			controlobjectivehistory.FieldCategory:             {Type: field.TypeString, Column: controlobjectivehistory.FieldCategory},
			controlobjectivehistory.FieldSubcategory:          {Type: field.TypeString, Column: controlobjectivehistory.FieldSubcategory},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customdomain.Table,
			Columns: customdomain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customdomain.FieldID,
			},
		},
		Type: "CustomDomain",
		Fields: map[string]*sqlgraph.FieldSpec{
			customdomain.FieldCreatedAt:         {Type: field.TypeTime, Column: customdomain.FieldCreatedAt},
			customdomain.FieldUpdatedAt:         {Type: field.TypeTime, Column: customdomain.FieldUpdatedAt},
			customdomain.FieldCreatedBy:         {Type: field.TypeString, Column: customdomain.FieldCreatedBy},
			customdomain.FieldUpdatedBy:         {Type: field.TypeString, Column: customdomain.FieldUpdatedBy},
			customdomain.FieldDeletedAt:         {Type: field.TypeTime, Column: customdomain.FieldDeletedAt},
			customdomain.FieldDeletedBy:         {Type: field.TypeString, Column: customdomain.FieldDeletedBy},
			customdomain.FieldTags:              {Type: field.TypeJSON, Column: customdomain.FieldTags},
			customdomain.FieldOwnerID:           {Type: field.TypeString, Column: customdomain.FieldOwnerID},
			customdomain.FieldCnameRecord:       {Type: field.TypeString, Column: customdomain.FieldCnameRecord},
			customdomain.FieldMappableDomainID:  {Type: field.TypeString, Column: customdomain.FieldMappableDomainID},
			customdomain.FieldDNSVerificationID: {Type: field.TypeString, Column: customdomain.FieldDNSVerificationID},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customdomainhistory.Table,
			Columns: customdomainhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customdomainhistory.FieldID,
			},
		},
		Type: "CustomDomainHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			customdomainhistory.FieldHistoryTime:       {Type: field.TypeTime, Column: customdomainhistory.FieldHistoryTime},
			customdomainhistory.FieldRef:               {Type: field.TypeString, Column: customdomainhistory.FieldRef},
			customdomainhistory.FieldOperation:         {Type: field.TypeEnum, Column: customdomainhistory.FieldOperation},
			customdomainhistory.FieldCreatedAt:         {Type: field.TypeTime, Column: customdomainhistory.FieldCreatedAt},
			customdomainhistory.FieldUpdatedAt:         {Type: field.TypeTime, Column: customdomainhistory.FieldUpdatedAt},
			customdomainhistory.FieldCreatedBy:         {Type: field.TypeString, Column: customdomainhistory.FieldCreatedBy},
			customdomainhistory.FieldUpdatedBy:         {Type: field.TypeString, Column: customdomainhistory.FieldUpdatedBy},
			customdomainhistory.FieldDeletedAt:         {Type: field.TypeTime, Column: customdomainhistory.FieldDeletedAt},
			customdomainhistory.FieldDeletedBy:         {Type: field.TypeString, Column: customdomainhistory.FieldDeletedBy},
			customdomainhistory.FieldTags:              {Type: field.TypeJSON, Column: customdomainhistory.FieldTags},
			customdomainhistory.FieldOwnerID:           {Type: field.TypeString, Column: customdomainhistory.FieldOwnerID},
			customdomainhistory.FieldCnameRecord:       {Type: field.TypeString, Column: customdomainhistory.FieldCnameRecord},
			customdomainhistory.FieldMappableDomainID:  {Type: field.TypeString, Column: customdomainhistory.FieldMappableDomainID},
			customdomainhistory.FieldDNSVerificationID: {Type: field.TypeString, Column: customdomainhistory.FieldDNSVerificationID},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dnsverification.Table,
			Columns: dnsverification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dnsverification.FieldID,
			},
		},
		Type: "DNSVerification",
		Fields: map[string]*sqlgraph.FieldSpec{
			dnsverification.FieldCreatedAt:                   {Type: field.TypeTime, Column: dnsverification.FieldCreatedAt},
			dnsverification.FieldUpdatedAt:                   {Type: field.TypeTime, Column: dnsverification.FieldUpdatedAt},
			dnsverification.FieldCreatedBy:                   {Type: field.TypeString, Column: dnsverification.FieldCreatedBy},
			dnsverification.FieldUpdatedBy:                   {Type: field.TypeString, Column: dnsverification.FieldUpdatedBy},
			dnsverification.FieldDeletedAt:                   {Type: field.TypeTime, Column: dnsverification.FieldDeletedAt},
			dnsverification.FieldDeletedBy:                   {Type: field.TypeString, Column: dnsverification.FieldDeletedBy},
			dnsverification.FieldTags:                        {Type: field.TypeJSON, Column: dnsverification.FieldTags},
			dnsverification.FieldOwnerID:                     {Type: field.TypeString, Column: dnsverification.FieldOwnerID},
			dnsverification.FieldCloudflareHostnameID:        {Type: field.TypeString, Column: dnsverification.FieldCloudflareHostnameID},
			dnsverification.FieldDNSTxtRecord:                {Type: field.TypeString, Column: dnsverification.FieldDNSTxtRecord},
			dnsverification.FieldDNSTxtValue:                 {Type: field.TypeString, Column: dnsverification.FieldDNSTxtValue},
			dnsverification.FieldDNSVerificationStatus:       {Type: field.TypeEnum, Column: dnsverification.FieldDNSVerificationStatus},
			dnsverification.FieldDNSVerificationStatusReason: {Type: field.TypeString, Column: dnsverification.FieldDNSVerificationStatusReason},
			dnsverification.FieldAcmeChallengePath:           {Type: field.TypeString, Column: dnsverification.FieldAcmeChallengePath},
			dnsverification.FieldExpectedAcmeChallengeValue:  {Type: field.TypeString, Column: dnsverification.FieldExpectedAcmeChallengeValue},
			dnsverification.FieldAcmeChallengeStatus:         {Type: field.TypeEnum, Column: dnsverification.FieldAcmeChallengeStatus},
			dnsverification.FieldAcmeChallengeStatusReason:   {Type: field.TypeString, Column: dnsverification.FieldAcmeChallengeStatusReason},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dnsverificationhistory.Table,
			Columns: dnsverificationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dnsverificationhistory.FieldID,
			},
		},
		Type: "DNSVerificationHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			dnsverificationhistory.FieldHistoryTime:                 {Type: field.TypeTime, Column: dnsverificationhistory.FieldHistoryTime},
			dnsverificationhistory.FieldRef:                         {Type: field.TypeString, Column: dnsverificationhistory.FieldRef},
			dnsverificationhistory.FieldOperation:                   {Type: field.TypeEnum, Column: dnsverificationhistory.FieldOperation},
			dnsverificationhistory.FieldCreatedAt:                   {Type: field.TypeTime, Column: dnsverificationhistory.FieldCreatedAt},
			dnsverificationhistory.FieldUpdatedAt:                   {Type: field.TypeTime, Column: dnsverificationhistory.FieldUpdatedAt},
			dnsverificationhistory.FieldCreatedBy:                   {Type: field.TypeString, Column: dnsverificationhistory.FieldCreatedBy},
			dnsverificationhistory.FieldUpdatedBy:                   {Type: field.TypeString, Column: dnsverificationhistory.FieldUpdatedBy},
			dnsverificationhistory.FieldDeletedAt:                   {Type: field.TypeTime, Column: dnsverificationhistory.FieldDeletedAt},
			dnsverificationhistory.FieldDeletedBy:                   {Type: field.TypeString, Column: dnsverificationhistory.FieldDeletedBy},
			dnsverificationhistory.FieldTags:                        {Type: field.TypeJSON, Column: dnsverificationhistory.FieldTags},
			dnsverificationhistory.FieldOwnerID:                     {Type: field.TypeString, Column: dnsverificationhistory.FieldOwnerID},
			dnsverificationhistory.FieldCloudflareHostnameID:        {Type: field.TypeString, Column: dnsverificationhistory.FieldCloudflareHostnameID},
			dnsverificationhistory.FieldDNSTxtRecord:                {Type: field.TypeString, Column: dnsverificationhistory.FieldDNSTxtRecord},
			dnsverificationhistory.FieldDNSTxtValue:                 {Type: field.TypeString, Column: dnsverificationhistory.FieldDNSTxtValue},
			dnsverificationhistory.FieldDNSVerificationStatus:       {Type: field.TypeEnum, Column: dnsverificationhistory.FieldDNSVerificationStatus},
			dnsverificationhistory.FieldDNSVerificationStatusReason: {Type: field.TypeString, Column: dnsverificationhistory.FieldDNSVerificationStatusReason},
			dnsverificationhistory.FieldAcmeChallengePath:           {Type: field.TypeString, Column: dnsverificationhistory.FieldAcmeChallengePath},
			dnsverificationhistory.FieldExpectedAcmeChallengeValue:  {Type: field.TypeString, Column: dnsverificationhistory.FieldExpectedAcmeChallengeValue},
			dnsverificationhistory.FieldAcmeChallengeStatus:         {Type: field.TypeEnum, Column: dnsverificationhistory.FieldAcmeChallengeStatus},
			dnsverificationhistory.FieldAcmeChallengeStatusReason:   {Type: field.TypeString, Column: dnsverificationhistory.FieldAcmeChallengeStatusReason},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   documentdata.Table,
			Columns: documentdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: documentdata.FieldID,
			},
		},
		Type: "DocumentData",
		Fields: map[string]*sqlgraph.FieldSpec{
			documentdata.FieldCreatedAt:  {Type: field.TypeTime, Column: documentdata.FieldCreatedAt},
			documentdata.FieldUpdatedAt:  {Type: field.TypeTime, Column: documentdata.FieldUpdatedAt},
			documentdata.FieldCreatedBy:  {Type: field.TypeString, Column: documentdata.FieldCreatedBy},
			documentdata.FieldUpdatedBy:  {Type: field.TypeString, Column: documentdata.FieldUpdatedBy},
			documentdata.FieldDeletedAt:  {Type: field.TypeTime, Column: documentdata.FieldDeletedAt},
			documentdata.FieldDeletedBy:  {Type: field.TypeString, Column: documentdata.FieldDeletedBy},
			documentdata.FieldTags:       {Type: field.TypeJSON, Column: documentdata.FieldTags},
			documentdata.FieldOwnerID:    {Type: field.TypeString, Column: documentdata.FieldOwnerID},
			documentdata.FieldTemplateID: {Type: field.TypeString, Column: documentdata.FieldTemplateID},
			documentdata.FieldData:       {Type: field.TypeJSON, Column: documentdata.FieldData},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   documentdatahistory.Table,
			Columns: documentdatahistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: documentdatahistory.FieldID,
			},
		},
		Type: "DocumentDataHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			documentdatahistory.FieldHistoryTime: {Type: field.TypeTime, Column: documentdatahistory.FieldHistoryTime},
			documentdatahistory.FieldRef:         {Type: field.TypeString, Column: documentdatahistory.FieldRef},
			documentdatahistory.FieldOperation:   {Type: field.TypeEnum, Column: documentdatahistory.FieldOperation},
			documentdatahistory.FieldCreatedAt:   {Type: field.TypeTime, Column: documentdatahistory.FieldCreatedAt},
			documentdatahistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: documentdatahistory.FieldUpdatedAt},
			documentdatahistory.FieldCreatedBy:   {Type: field.TypeString, Column: documentdatahistory.FieldCreatedBy},
			documentdatahistory.FieldUpdatedBy:   {Type: field.TypeString, Column: documentdatahistory.FieldUpdatedBy},
			documentdatahistory.FieldDeletedAt:   {Type: field.TypeTime, Column: documentdatahistory.FieldDeletedAt},
			documentdatahistory.FieldDeletedBy:   {Type: field.TypeString, Column: documentdatahistory.FieldDeletedBy},
			documentdatahistory.FieldTags:        {Type: field.TypeJSON, Column: documentdatahistory.FieldTags},
			documentdatahistory.FieldOwnerID:     {Type: field.TypeString, Column: documentdatahistory.FieldOwnerID},
			documentdatahistory.FieldTemplateID:  {Type: field.TypeString, Column: documentdatahistory.FieldTemplateID},
			documentdatahistory.FieldData:        {Type: field.TypeJSON, Column: documentdatahistory.FieldData},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailverificationtoken.Table,
			Columns: emailverificationtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emailverificationtoken.FieldID,
			},
		},
		Type: "EmailVerificationToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailverificationtoken.FieldCreatedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldCreatedAt},
			emailverificationtoken.FieldUpdatedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldUpdatedAt},
			emailverificationtoken.FieldCreatedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldCreatedBy},
			emailverificationtoken.FieldUpdatedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldUpdatedBy},
			emailverificationtoken.FieldDeletedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldDeletedAt},
			emailverificationtoken.FieldDeletedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldDeletedBy},
			emailverificationtoken.FieldOwnerID:   {Type: field.TypeString, Column: emailverificationtoken.FieldOwnerID},
			emailverificationtoken.FieldToken:     {Type: field.TypeString, Column: emailverificationtoken.FieldToken},
			emailverificationtoken.FieldTTL:       {Type: field.TypeTime, Column: emailverificationtoken.FieldTTL},
			emailverificationtoken.FieldEmail:     {Type: field.TypeString, Column: emailverificationtoken.FieldEmail},
			emailverificationtoken.FieldSecret:    {Type: field.TypeBytes, Column: emailverificationtoken.FieldSecret},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entity.FieldID,
			},
		},
		Type: "Entity",
		Fields: map[string]*sqlgraph.FieldSpec{
			entity.FieldCreatedAt:    {Type: field.TypeTime, Column: entity.FieldCreatedAt},
			entity.FieldUpdatedAt:    {Type: field.TypeTime, Column: entity.FieldUpdatedAt},
			entity.FieldCreatedBy:    {Type: field.TypeString, Column: entity.FieldCreatedBy},
			entity.FieldUpdatedBy:    {Type: field.TypeString, Column: entity.FieldUpdatedBy},
			entity.FieldDeletedAt:    {Type: field.TypeTime, Column: entity.FieldDeletedAt},
			entity.FieldDeletedBy:    {Type: field.TypeString, Column: entity.FieldDeletedBy},
			entity.FieldTags:         {Type: field.TypeJSON, Column: entity.FieldTags},
			entity.FieldOwnerID:      {Type: field.TypeString, Column: entity.FieldOwnerID},
			entity.FieldName:         {Type: field.TypeString, Column: entity.FieldName},
			entity.FieldDisplayName:  {Type: field.TypeString, Column: entity.FieldDisplayName},
			entity.FieldDescription:  {Type: field.TypeString, Column: entity.FieldDescription},
			entity.FieldDomains:      {Type: field.TypeJSON, Column: entity.FieldDomains},
			entity.FieldEntityTypeID: {Type: field.TypeString, Column: entity.FieldEntityTypeID},
			entity.FieldStatus:       {Type: field.TypeString, Column: entity.FieldStatus},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entityhistory.Table,
			Columns: entityhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entityhistory.FieldID,
			},
		},
		Type: "EntityHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			entityhistory.FieldHistoryTime:  {Type: field.TypeTime, Column: entityhistory.FieldHistoryTime},
			entityhistory.FieldRef:          {Type: field.TypeString, Column: entityhistory.FieldRef},
			entityhistory.FieldOperation:    {Type: field.TypeEnum, Column: entityhistory.FieldOperation},
			entityhistory.FieldCreatedAt:    {Type: field.TypeTime, Column: entityhistory.FieldCreatedAt},
			entityhistory.FieldUpdatedAt:    {Type: field.TypeTime, Column: entityhistory.FieldUpdatedAt},
			entityhistory.FieldCreatedBy:    {Type: field.TypeString, Column: entityhistory.FieldCreatedBy},
			entityhistory.FieldUpdatedBy:    {Type: field.TypeString, Column: entityhistory.FieldUpdatedBy},
			entityhistory.FieldDeletedAt:    {Type: field.TypeTime, Column: entityhistory.FieldDeletedAt},
			entityhistory.FieldDeletedBy:    {Type: field.TypeString, Column: entityhistory.FieldDeletedBy},
			entityhistory.FieldTags:         {Type: field.TypeJSON, Column: entityhistory.FieldTags},
			entityhistory.FieldOwnerID:      {Type: field.TypeString, Column: entityhistory.FieldOwnerID},
			entityhistory.FieldName:         {Type: field.TypeString, Column: entityhistory.FieldName},
			entityhistory.FieldDisplayName:  {Type: field.TypeString, Column: entityhistory.FieldDisplayName},
			entityhistory.FieldDescription:  {Type: field.TypeString, Column: entityhistory.FieldDescription},
			entityhistory.FieldDomains:      {Type: field.TypeJSON, Column: entityhistory.FieldDomains},
			entityhistory.FieldEntityTypeID: {Type: field.TypeString, Column: entityhistory.FieldEntityTypeID},
			entityhistory.FieldStatus:       {Type: field.TypeString, Column: entityhistory.FieldStatus},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitytype.Table,
			Columns: entitytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitytype.FieldID,
			},
		},
		Type: "EntityType",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitytype.FieldCreatedAt: {Type: field.TypeTime, Column: entitytype.FieldCreatedAt},
			entitytype.FieldUpdatedAt: {Type: field.TypeTime, Column: entitytype.FieldUpdatedAt},
			entitytype.FieldCreatedBy: {Type: field.TypeString, Column: entitytype.FieldCreatedBy},
			entitytype.FieldUpdatedBy: {Type: field.TypeString, Column: entitytype.FieldUpdatedBy},
			entitytype.FieldDeletedAt: {Type: field.TypeTime, Column: entitytype.FieldDeletedAt},
			entitytype.FieldDeletedBy: {Type: field.TypeString, Column: entitytype.FieldDeletedBy},
			entitytype.FieldTags:      {Type: field.TypeJSON, Column: entitytype.FieldTags},
			entitytype.FieldOwnerID:   {Type: field.TypeString, Column: entitytype.FieldOwnerID},
			entitytype.FieldName:      {Type: field.TypeString, Column: entitytype.FieldName},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitytypehistory.Table,
			Columns: entitytypehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitytypehistory.FieldID,
			},
		},
		Type: "EntityTypeHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitytypehistory.FieldHistoryTime: {Type: field.TypeTime, Column: entitytypehistory.FieldHistoryTime},
			entitytypehistory.FieldRef:         {Type: field.TypeString, Column: entitytypehistory.FieldRef},
			entitytypehistory.FieldOperation:   {Type: field.TypeEnum, Column: entitytypehistory.FieldOperation},
			entitytypehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: entitytypehistory.FieldCreatedAt},
			entitytypehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: entitytypehistory.FieldUpdatedAt},
			entitytypehistory.FieldCreatedBy:   {Type: field.TypeString, Column: entitytypehistory.FieldCreatedBy},
			entitytypehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: entitytypehistory.FieldUpdatedBy},
			entitytypehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: entitytypehistory.FieldDeletedAt},
			entitytypehistory.FieldDeletedBy:   {Type: field.TypeString, Column: entitytypehistory.FieldDeletedBy},
			entitytypehistory.FieldTags:        {Type: field.TypeJSON, Column: entitytypehistory.FieldTags},
			entitytypehistory.FieldOwnerID:     {Type: field.TypeString, Column: entitytypehistory.FieldOwnerID},
			entitytypehistory.FieldName:        {Type: field.TypeString, Column: entitytypehistory.FieldName},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldCreatedAt:     {Type: field.TypeTime, Column: event.FieldCreatedAt},
			event.FieldUpdatedAt:     {Type: field.TypeTime, Column: event.FieldUpdatedAt},
			event.FieldCreatedBy:     {Type: field.TypeString, Column: event.FieldCreatedBy},
			event.FieldUpdatedBy:     {Type: field.TypeString, Column: event.FieldUpdatedBy},
			event.FieldTags:          {Type: field.TypeJSON, Column: event.FieldTags},
			event.FieldEventID:       {Type: field.TypeString, Column: event.FieldEventID},
			event.FieldCorrelationID: {Type: field.TypeString, Column: event.FieldCorrelationID},
			event.FieldEventType:     {Type: field.TypeString, Column: event.FieldEventType},
			event.FieldMetadata:      {Type: field.TypeJSON, Column: event.FieldMetadata},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   evidence.Table,
			Columns: evidence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: evidence.FieldID,
			},
		},
		Type: "Evidence",
		Fields: map[string]*sqlgraph.FieldSpec{
			evidence.FieldCreatedAt:           {Type: field.TypeTime, Column: evidence.FieldCreatedAt},
			evidence.FieldUpdatedAt:           {Type: field.TypeTime, Column: evidence.FieldUpdatedAt},
			evidence.FieldCreatedBy:           {Type: field.TypeString, Column: evidence.FieldCreatedBy},
			evidence.FieldUpdatedBy:           {Type: field.TypeString, Column: evidence.FieldUpdatedBy},
			evidence.FieldDeletedAt:           {Type: field.TypeTime, Column: evidence.FieldDeletedAt},
			evidence.FieldDeletedBy:           {Type: field.TypeString, Column: evidence.FieldDeletedBy},
			evidence.FieldDisplayID:           {Type: field.TypeString, Column: evidence.FieldDisplayID},
			evidence.FieldTags:                {Type: field.TypeJSON, Column: evidence.FieldTags},
			evidence.FieldOwnerID:             {Type: field.TypeString, Column: evidence.FieldOwnerID},
			evidence.FieldName:                {Type: field.TypeString, Column: evidence.FieldName},
			evidence.FieldDescription:         {Type: field.TypeString, Column: evidence.FieldDescription},
			evidence.FieldCollectionProcedure: {Type: field.TypeString, Column: evidence.FieldCollectionProcedure},
			evidence.FieldCreationDate:        {Type: field.TypeTime, Column: evidence.FieldCreationDate},
			evidence.FieldRenewalDate:         {Type: field.TypeTime, Column: evidence.FieldRenewalDate},
			evidence.FieldSource:              {Type: field.TypeString, Column: evidence.FieldSource},
			evidence.FieldIsAutomated:         {Type: field.TypeBool, Column: evidence.FieldIsAutomated},
			evidence.FieldURL:                 {Type: field.TypeString, Column: evidence.FieldURL},
			evidence.FieldStatus:              {Type: field.TypeEnum, Column: evidence.FieldStatus},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   evidencehistory.Table,
			Columns: evidencehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: evidencehistory.FieldID,
			},
		},
		Type: "EvidenceHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			evidencehistory.FieldHistoryTime:         {Type: field.TypeTime, Column: evidencehistory.FieldHistoryTime},
			evidencehistory.FieldRef:                 {Type: field.TypeString, Column: evidencehistory.FieldRef},
			evidencehistory.FieldOperation:           {Type: field.TypeEnum, Column: evidencehistory.FieldOperation},
			evidencehistory.FieldCreatedAt:           {Type: field.TypeTime, Column: evidencehistory.FieldCreatedAt},
			evidencehistory.FieldUpdatedAt:           {Type: field.TypeTime, Column: evidencehistory.FieldUpdatedAt},
			evidencehistory.FieldCreatedBy:           {Type: field.TypeString, Column: evidencehistory.FieldCreatedBy},
			evidencehistory.FieldUpdatedBy:           {Type: field.TypeString, Column: evidencehistory.FieldUpdatedBy},
			evidencehistory.FieldDeletedAt:           {Type: field.TypeTime, Column: evidencehistory.FieldDeletedAt},
			evidencehistory.FieldDeletedBy:           {Type: field.TypeString, Column: evidencehistory.FieldDeletedBy},
			evidencehistory.FieldDisplayID:           {Type: field.TypeString, Column: evidencehistory.FieldDisplayID},
			evidencehistory.FieldTags:                {Type: field.TypeJSON, Column: evidencehistory.FieldTags},
			evidencehistory.FieldOwnerID:             {Type: field.TypeString, Column: evidencehistory.FieldOwnerID},
			evidencehistory.FieldName:                {Type: field.TypeString, Column: evidencehistory.FieldName},
			evidencehistory.FieldDescription:         {Type: field.TypeString, Column: evidencehistory.FieldDescription},
			evidencehistory.FieldCollectionProcedure: {Type: field.TypeString, Column: evidencehistory.FieldCollectionProcedure},
			evidencehistory.FieldCreationDate:        {Type: field.TypeTime, Column: evidencehistory.FieldCreationDate},
			evidencehistory.FieldRenewalDate:         {Type: field.TypeTime, Column: evidencehistory.FieldRenewalDate},
			evidencehistory.FieldSource:              {Type: field.TypeString, Column: evidencehistory.FieldSource},
			evidencehistory.FieldIsAutomated:         {Type: field.TypeBool, Column: evidencehistory.FieldIsAutomated},
			evidencehistory.FieldURL:                 {Type: field.TypeString, Column: evidencehistory.FieldURL},
			evidencehistory.FieldStatus:              {Type: field.TypeEnum, Column: evidencehistory.FieldStatus},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   export.Table,
			Columns: export.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: export.FieldID,
			},
		},
		Type: "Export",
		Fields: map[string]*sqlgraph.FieldSpec{
			export.FieldCreatedAt:    {Type: field.TypeTime, Column: export.FieldCreatedAt},
			export.FieldUpdatedAt:    {Type: field.TypeTime, Column: export.FieldUpdatedAt},
			export.FieldCreatedBy:    {Type: field.TypeString, Column: export.FieldCreatedBy},
			export.FieldUpdatedBy:    {Type: field.TypeString, Column: export.FieldUpdatedBy},
			export.FieldDeletedAt:    {Type: field.TypeTime, Column: export.FieldDeletedAt},
			export.FieldDeletedBy:    {Type: field.TypeString, Column: export.FieldDeletedBy},
			export.FieldOwnerID:      {Type: field.TypeString, Column: export.FieldOwnerID},
			export.FieldExportType:   {Type: field.TypeEnum, Column: export.FieldExportType},
			export.FieldFormat:       {Type: field.TypeEnum, Column: export.FieldFormat},
			export.FieldStatus:       {Type: field.TypeEnum, Column: export.FieldStatus},
			export.FieldRequestorID:  {Type: field.TypeString, Column: export.FieldRequestorID},
			export.FieldFields:       {Type: field.TypeJSON, Column: export.FieldFields},
			export.FieldFilters:      {Type: field.TypeString, Column: export.FieldFilters},
			export.FieldErrorMessage: {Type: field.TypeString, Column: export.FieldErrorMessage},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: file.FieldID,
			},
		},
		Type: "File",
		Fields: map[string]*sqlgraph.FieldSpec{
			file.FieldCreatedAt:             {Type: field.TypeTime, Column: file.FieldCreatedAt},
			file.FieldUpdatedAt:             {Type: field.TypeTime, Column: file.FieldUpdatedAt},
			file.FieldCreatedBy:             {Type: field.TypeString, Column: file.FieldCreatedBy},
			file.FieldUpdatedBy:             {Type: field.TypeString, Column: file.FieldUpdatedBy},
			file.FieldDeletedAt:             {Type: field.TypeTime, Column: file.FieldDeletedAt},
			file.FieldDeletedBy:             {Type: field.TypeString, Column: file.FieldDeletedBy},
			file.FieldTags:                  {Type: field.TypeJSON, Column: file.FieldTags},
			file.FieldProvidedFileName:      {Type: field.TypeString, Column: file.FieldProvidedFileName},
			file.FieldProvidedFileExtension: {Type: field.TypeString, Column: file.FieldProvidedFileExtension},
			file.FieldProvidedFileSize:      {Type: field.TypeInt64, Column: file.FieldProvidedFileSize},
			file.FieldPersistedFileSize:     {Type: field.TypeInt64, Column: file.FieldPersistedFileSize},
			file.FieldDetectedMimeType:      {Type: field.TypeString, Column: file.FieldDetectedMimeType},
			file.FieldMd5Hash:               {Type: field.TypeString, Column: file.FieldMd5Hash},
			file.FieldDetectedContentType:   {Type: field.TypeString, Column: file.FieldDetectedContentType},
			file.FieldStoreKey:              {Type: field.TypeString, Column: file.FieldStoreKey},
			file.FieldCategoryType:          {Type: field.TypeString, Column: file.FieldCategoryType},
			file.FieldURI:                   {Type: field.TypeString, Column: file.FieldURI},
			file.FieldStorageScheme:         {Type: field.TypeString, Column: file.FieldStorageScheme},
			file.FieldStorageVolume:         {Type: field.TypeString, Column: file.FieldStorageVolume},
			file.FieldStoragePath:           {Type: field.TypeString, Column: file.FieldStoragePath},
			file.FieldFileContents:          {Type: field.TypeBytes, Column: file.FieldFileContents},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   filehistory.Table,
			Columns: filehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: filehistory.FieldID,
			},
		},
		Type: "FileHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			filehistory.FieldHistoryTime:           {Type: field.TypeTime, Column: filehistory.FieldHistoryTime},
			filehistory.FieldRef:                   {Type: field.TypeString, Column: filehistory.FieldRef},
			filehistory.FieldOperation:             {Type: field.TypeEnum, Column: filehistory.FieldOperation},
			filehistory.FieldCreatedAt:             {Type: field.TypeTime, Column: filehistory.FieldCreatedAt},
			filehistory.FieldUpdatedAt:             {Type: field.TypeTime, Column: filehistory.FieldUpdatedAt},
			filehistory.FieldCreatedBy:             {Type: field.TypeString, Column: filehistory.FieldCreatedBy},
			filehistory.FieldUpdatedBy:             {Type: field.TypeString, Column: filehistory.FieldUpdatedBy},
			filehistory.FieldDeletedAt:             {Type: field.TypeTime, Column: filehistory.FieldDeletedAt},
			filehistory.FieldDeletedBy:             {Type: field.TypeString, Column: filehistory.FieldDeletedBy},
			filehistory.FieldTags:                  {Type: field.TypeJSON, Column: filehistory.FieldTags},
			filehistory.FieldProvidedFileName:      {Type: field.TypeString, Column: filehistory.FieldProvidedFileName},
			filehistory.FieldProvidedFileExtension: {Type: field.TypeString, Column: filehistory.FieldProvidedFileExtension},
			filehistory.FieldProvidedFileSize:      {Type: field.TypeInt64, Column: filehistory.FieldProvidedFileSize},
			filehistory.FieldPersistedFileSize:     {Type: field.TypeInt64, Column: filehistory.FieldPersistedFileSize},
			filehistory.FieldDetectedMimeType:      {Type: field.TypeString, Column: filehistory.FieldDetectedMimeType},
			filehistory.FieldMd5Hash:               {Type: field.TypeString, Column: filehistory.FieldMd5Hash},
			filehistory.FieldDetectedContentType:   {Type: field.TypeString, Column: filehistory.FieldDetectedContentType},
			filehistory.FieldStoreKey:              {Type: field.TypeString, Column: filehistory.FieldStoreKey},
			filehistory.FieldCategoryType:          {Type: field.TypeString, Column: filehistory.FieldCategoryType},
			filehistory.FieldURI:                   {Type: field.TypeString, Column: filehistory.FieldURI},
			filehistory.FieldStorageScheme:         {Type: field.TypeString, Column: filehistory.FieldStorageScheme},
			filehistory.FieldStorageVolume:         {Type: field.TypeString, Column: filehistory.FieldStorageVolume},
			filehistory.FieldStoragePath:           {Type: field.TypeString, Column: filehistory.FieldStoragePath},
			filehistory.FieldFileContents:          {Type: field.TypeBytes, Column: filehistory.FieldFileContents},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: group.FieldID,
			},
		},
		Type: "Group",
		Fields: map[string]*sqlgraph.FieldSpec{
			group.FieldCreatedAt:       {Type: field.TypeTime, Column: group.FieldCreatedAt},
			group.FieldUpdatedAt:       {Type: field.TypeTime, Column: group.FieldUpdatedAt},
			group.FieldCreatedBy:       {Type: field.TypeString, Column: group.FieldCreatedBy},
			group.FieldUpdatedBy:       {Type: field.TypeString, Column: group.FieldUpdatedBy},
			group.FieldDeletedAt:       {Type: field.TypeTime, Column: group.FieldDeletedAt},
			group.FieldDeletedBy:       {Type: field.TypeString, Column: group.FieldDeletedBy},
			group.FieldDisplayID:       {Type: field.TypeString, Column: group.FieldDisplayID},
			group.FieldTags:            {Type: field.TypeJSON, Column: group.FieldTags},
			group.FieldOwnerID:         {Type: field.TypeString, Column: group.FieldOwnerID},
			group.FieldName:            {Type: field.TypeString, Column: group.FieldName},
			group.FieldDescription:     {Type: field.TypeString, Column: group.FieldDescription},
			group.FieldIsManaged:       {Type: field.TypeBool, Column: group.FieldIsManaged},
			group.FieldGravatarLogoURL: {Type: field.TypeString, Column: group.FieldGravatarLogoURL},
			group.FieldLogoURL:         {Type: field.TypeString, Column: group.FieldLogoURL},
			group.FieldDisplayName:     {Type: field.TypeString, Column: group.FieldDisplayName},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   grouphistory.Table,
			Columns: grouphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: grouphistory.FieldID,
			},
		},
		Type: "GroupHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			grouphistory.FieldHistoryTime:     {Type: field.TypeTime, Column: grouphistory.FieldHistoryTime},
			grouphistory.FieldRef:             {Type: field.TypeString, Column: grouphistory.FieldRef},
			grouphistory.FieldOperation:       {Type: field.TypeEnum, Column: grouphistory.FieldOperation},
			grouphistory.FieldCreatedAt:       {Type: field.TypeTime, Column: grouphistory.FieldCreatedAt},
			grouphistory.FieldUpdatedAt:       {Type: field.TypeTime, Column: grouphistory.FieldUpdatedAt},
			grouphistory.FieldCreatedBy:       {Type: field.TypeString, Column: grouphistory.FieldCreatedBy},
			grouphistory.FieldUpdatedBy:       {Type: field.TypeString, Column: grouphistory.FieldUpdatedBy},
			grouphistory.FieldDeletedAt:       {Type: field.TypeTime, Column: grouphistory.FieldDeletedAt},
			grouphistory.FieldDeletedBy:       {Type: field.TypeString, Column: grouphistory.FieldDeletedBy},
			grouphistory.FieldDisplayID:       {Type: field.TypeString, Column: grouphistory.FieldDisplayID},
			grouphistory.FieldTags:            {Type: field.TypeJSON, Column: grouphistory.FieldTags},
			grouphistory.FieldOwnerID:         {Type: field.TypeString, Column: grouphistory.FieldOwnerID},
			grouphistory.FieldName:            {Type: field.TypeString, Column: grouphistory.FieldName},
			grouphistory.FieldDescription:     {Type: field.TypeString, Column: grouphistory.FieldDescription},
			grouphistory.FieldIsManaged:       {Type: field.TypeBool, Column: grouphistory.FieldIsManaged},
			grouphistory.FieldGravatarLogoURL: {Type: field.TypeString, Column: grouphistory.FieldGravatarLogoURL},
			grouphistory.FieldLogoURL:         {Type: field.TypeString, Column: grouphistory.FieldLogoURL},
			grouphistory.FieldDisplayName:     {Type: field.TypeString, Column: grouphistory.FieldDisplayName},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupmembership.Table,
			Columns: groupmembership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupmembership.FieldID,
			},
		},
		Type: "GroupMembership",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupmembership.FieldCreatedAt: {Type: field.TypeTime, Column: groupmembership.FieldCreatedAt},
			groupmembership.FieldUpdatedAt: {Type: field.TypeTime, Column: groupmembership.FieldUpdatedAt},
			groupmembership.FieldCreatedBy: {Type: field.TypeString, Column: groupmembership.FieldCreatedBy},
			groupmembership.FieldUpdatedBy: {Type: field.TypeString, Column: groupmembership.FieldUpdatedBy},
			groupmembership.FieldRole:      {Type: field.TypeEnum, Column: groupmembership.FieldRole},
			groupmembership.FieldGroupID:   {Type: field.TypeString, Column: groupmembership.FieldGroupID},
			groupmembership.FieldUserID:    {Type: field.TypeString, Column: groupmembership.FieldUserID},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupmembershiphistory.Table,
			Columns: groupmembershiphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupmembershiphistory.FieldID,
			},
		},
		Type: "GroupMembershipHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupmembershiphistory.FieldHistoryTime: {Type: field.TypeTime, Column: groupmembershiphistory.FieldHistoryTime},
			groupmembershiphistory.FieldRef:         {Type: field.TypeString, Column: groupmembershiphistory.FieldRef},
			groupmembershiphistory.FieldOperation:   {Type: field.TypeEnum, Column: groupmembershiphistory.FieldOperation},
			groupmembershiphistory.FieldCreatedAt:   {Type: field.TypeTime, Column: groupmembershiphistory.FieldCreatedAt},
			groupmembershiphistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: groupmembershiphistory.FieldUpdatedAt},
			groupmembershiphistory.FieldCreatedBy:   {Type: field.TypeString, Column: groupmembershiphistory.FieldCreatedBy},
			groupmembershiphistory.FieldUpdatedBy:   {Type: field.TypeString, Column: groupmembershiphistory.FieldUpdatedBy},
			groupmembershiphistory.FieldRole:        {Type: field.TypeEnum, Column: groupmembershiphistory.FieldRole},
			groupmembershiphistory.FieldGroupID:     {Type: field.TypeString, Column: groupmembershiphistory.FieldGroupID},
			groupmembershiphistory.FieldUserID:      {Type: field.TypeString, Column: groupmembershiphistory.FieldUserID},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupsetting.Table,
			Columns: groupsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupsetting.FieldID,
			},
		},
		Type: "GroupSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupsetting.FieldCreatedAt:    {Type: field.TypeTime, Column: groupsetting.FieldCreatedAt},
			groupsetting.FieldUpdatedAt:    {Type: field.TypeTime, Column: groupsetting.FieldUpdatedAt},
			groupsetting.FieldCreatedBy:    {Type: field.TypeString, Column: groupsetting.FieldCreatedBy},
			groupsetting.FieldUpdatedBy:    {Type: field.TypeString, Column: groupsetting.FieldUpdatedBy},
			groupsetting.FieldDeletedAt:    {Type: field.TypeTime, Column: groupsetting.FieldDeletedAt},
			groupsetting.FieldDeletedBy:    {Type: field.TypeString, Column: groupsetting.FieldDeletedBy},
			groupsetting.FieldVisibility:   {Type: field.TypeEnum, Column: groupsetting.FieldVisibility},
			groupsetting.FieldJoinPolicy:   {Type: field.TypeEnum, Column: groupsetting.FieldJoinPolicy},
			groupsetting.FieldSyncToSlack:  {Type: field.TypeBool, Column: groupsetting.FieldSyncToSlack},
			groupsetting.FieldSyncToGithub: {Type: field.TypeBool, Column: groupsetting.FieldSyncToGithub},
			groupsetting.FieldGroupID:      {Type: field.TypeString, Column: groupsetting.FieldGroupID},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupsettinghistory.Table,
			Columns: groupsettinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupsettinghistory.FieldID,
			},
		},
		Type: "GroupSettingHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupsettinghistory.FieldHistoryTime:  {Type: field.TypeTime, Column: groupsettinghistory.FieldHistoryTime},
			groupsettinghistory.FieldRef:          {Type: field.TypeString, Column: groupsettinghistory.FieldRef},
			groupsettinghistory.FieldOperation:    {Type: field.TypeEnum, Column: groupsettinghistory.FieldOperation},
			groupsettinghistory.FieldCreatedAt:    {Type: field.TypeTime, Column: groupsettinghistory.FieldCreatedAt},
			groupsettinghistory.FieldUpdatedAt:    {Type: field.TypeTime, Column: groupsettinghistory.FieldUpdatedAt},
			groupsettinghistory.FieldCreatedBy:    {Type: field.TypeString, Column: groupsettinghistory.FieldCreatedBy},
			groupsettinghistory.FieldUpdatedBy:    {Type: field.TypeString, Column: groupsettinghistory.FieldUpdatedBy},
			groupsettinghistory.FieldDeletedAt:    {Type: field.TypeTime, Column: groupsettinghistory.FieldDeletedAt},
			groupsettinghistory.FieldDeletedBy:    {Type: field.TypeString, Column: groupsettinghistory.FieldDeletedBy},
			groupsettinghistory.FieldVisibility:   {Type: field.TypeEnum, Column: groupsettinghistory.FieldVisibility},
			groupsettinghistory.FieldJoinPolicy:   {Type: field.TypeEnum, Column: groupsettinghistory.FieldJoinPolicy},
			groupsettinghistory.FieldSyncToSlack:  {Type: field.TypeBool, Column: groupsettinghistory.FieldSyncToSlack},
			groupsettinghistory.FieldSyncToGithub: {Type: field.TypeBool, Column: groupsettinghistory.FieldSyncToGithub},
			groupsettinghistory.FieldGroupID:      {Type: field.TypeString, Column: groupsettinghistory.FieldGroupID},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hush.Table,
			Columns: hush.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hush.FieldID,
			},
		},
		Type: "Hush",
		Fields: map[string]*sqlgraph.FieldSpec{
			hush.FieldCreatedAt:   {Type: field.TypeTime, Column: hush.FieldCreatedAt},
			hush.FieldUpdatedAt:   {Type: field.TypeTime, Column: hush.FieldUpdatedAt},
			hush.FieldCreatedBy:   {Type: field.TypeString, Column: hush.FieldCreatedBy},
			hush.FieldUpdatedBy:   {Type: field.TypeString, Column: hush.FieldUpdatedBy},
			hush.FieldDeletedAt:   {Type: field.TypeTime, Column: hush.FieldDeletedAt},
			hush.FieldDeletedBy:   {Type: field.TypeString, Column: hush.FieldDeletedBy},
			hush.FieldOwnerID:     {Type: field.TypeString, Column: hush.FieldOwnerID},
			hush.FieldName:        {Type: field.TypeString, Column: hush.FieldName},
			hush.FieldDescription: {Type: field.TypeString, Column: hush.FieldDescription},
			hush.FieldKind:        {Type: field.TypeString, Column: hush.FieldKind},
			hush.FieldSecretName:  {Type: field.TypeString, Column: hush.FieldSecretName},
			hush.FieldSecretValue: {Type: field.TypeString, Column: hush.FieldSecretValue},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hushhistory.Table,
			Columns: hushhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hushhistory.FieldID,
			},
		},
		Type: "HushHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			hushhistory.FieldHistoryTime: {Type: field.TypeTime, Column: hushhistory.FieldHistoryTime},
			hushhistory.FieldRef:         {Type: field.TypeString, Column: hushhistory.FieldRef},
			hushhistory.FieldOperation:   {Type: field.TypeEnum, Column: hushhistory.FieldOperation},
			hushhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: hushhistory.FieldCreatedAt},
			hushhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: hushhistory.FieldUpdatedAt},
			hushhistory.FieldCreatedBy:   {Type: field.TypeString, Column: hushhistory.FieldCreatedBy},
			hushhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: hushhistory.FieldUpdatedBy},
			hushhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: hushhistory.FieldDeletedAt},
			hushhistory.FieldDeletedBy:   {Type: field.TypeString, Column: hushhistory.FieldDeletedBy},
			hushhistory.FieldOwnerID:     {Type: field.TypeString, Column: hushhistory.FieldOwnerID},
			hushhistory.FieldName:        {Type: field.TypeString, Column: hushhistory.FieldName},
			hushhistory.FieldDescription: {Type: field.TypeString, Column: hushhistory.FieldDescription},
			hushhistory.FieldKind:        {Type: field.TypeString, Column: hushhistory.FieldKind},
			hushhistory.FieldSecretName:  {Type: field.TypeString, Column: hushhistory.FieldSecretName},
			hushhistory.FieldSecretValue: {Type: field.TypeString, Column: hushhistory.FieldSecretValue},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   integration.Table,
			Columns: integration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: integration.FieldID,
			},
		},
		Type: "Integration",
		Fields: map[string]*sqlgraph.FieldSpec{
			integration.FieldCreatedAt:   {Type: field.TypeTime, Column: integration.FieldCreatedAt},
			integration.FieldUpdatedAt:   {Type: field.TypeTime, Column: integration.FieldUpdatedAt},
			integration.FieldCreatedBy:   {Type: field.TypeString, Column: integration.FieldCreatedBy},
			integration.FieldUpdatedBy:   {Type: field.TypeString, Column: integration.FieldUpdatedBy},
			integration.FieldDeletedAt:   {Type: field.TypeTime, Column: integration.FieldDeletedAt},
			integration.FieldDeletedBy:   {Type: field.TypeString, Column: integration.FieldDeletedBy},
			integration.FieldTags:        {Type: field.TypeJSON, Column: integration.FieldTags},
			integration.FieldOwnerID:     {Type: field.TypeString, Column: integration.FieldOwnerID},
			integration.FieldName:        {Type: field.TypeString, Column: integration.FieldName},
			integration.FieldDescription: {Type: field.TypeString, Column: integration.FieldDescription},
			integration.FieldKind:        {Type: field.TypeString, Column: integration.FieldKind},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   integrationhistory.Table,
			Columns: integrationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: integrationhistory.FieldID,
			},
		},
		Type: "IntegrationHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			integrationhistory.FieldHistoryTime: {Type: field.TypeTime, Column: integrationhistory.FieldHistoryTime},
			integrationhistory.FieldRef:         {Type: field.TypeString, Column: integrationhistory.FieldRef},
			integrationhistory.FieldOperation:   {Type: field.TypeEnum, Column: integrationhistory.FieldOperation},
			integrationhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: integrationhistory.FieldCreatedAt},
			integrationhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: integrationhistory.FieldUpdatedAt},
			integrationhistory.FieldCreatedBy:   {Type: field.TypeString, Column: integrationhistory.FieldCreatedBy},
			integrationhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: integrationhistory.FieldUpdatedBy},
			integrationhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: integrationhistory.FieldDeletedAt},
			integrationhistory.FieldDeletedBy:   {Type: field.TypeString, Column: integrationhistory.FieldDeletedBy},
			integrationhistory.FieldTags:        {Type: field.TypeJSON, Column: integrationhistory.FieldTags},
			integrationhistory.FieldOwnerID:     {Type: field.TypeString, Column: integrationhistory.FieldOwnerID},
			integrationhistory.FieldName:        {Type: field.TypeString, Column: integrationhistory.FieldName},
			integrationhistory.FieldDescription: {Type: field.TypeString, Column: integrationhistory.FieldDescription},
			integrationhistory.FieldKind:        {Type: field.TypeString, Column: integrationhistory.FieldKind},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   internalpolicy.Table,
			Columns: internalpolicy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: internalpolicy.FieldID,
			},
		},
		Type: "InternalPolicy",
		Fields: map[string]*sqlgraph.FieldSpec{
			internalpolicy.FieldCreatedAt:                       {Type: field.TypeTime, Column: internalpolicy.FieldCreatedAt},
			internalpolicy.FieldUpdatedAt:                       {Type: field.TypeTime, Column: internalpolicy.FieldUpdatedAt},
			internalpolicy.FieldCreatedBy:                       {Type: field.TypeString, Column: internalpolicy.FieldCreatedBy},
			internalpolicy.FieldUpdatedBy:                       {Type: field.TypeString, Column: internalpolicy.FieldUpdatedBy},
			internalpolicy.FieldDeletedAt:                       {Type: field.TypeTime, Column: internalpolicy.FieldDeletedAt},
			internalpolicy.FieldDeletedBy:                       {Type: field.TypeString, Column: internalpolicy.FieldDeletedBy},
			internalpolicy.FieldDisplayID:                       {Type: field.TypeString, Column: internalpolicy.FieldDisplayID},
			internalpolicy.FieldTags:                            {Type: field.TypeJSON, Column: internalpolicy.FieldTags},
			internalpolicy.FieldRevision:                        {Type: field.TypeString, Column: internalpolicy.FieldRevision},
			internalpolicy.FieldOwnerID:                         {Type: field.TypeString, Column: internalpolicy.FieldOwnerID},
			internalpolicy.FieldName:                            {Type: field.TypeString, Column: internalpolicy.FieldName},
			internalpolicy.FieldStatus:                          {Type: field.TypeEnum, Column: internalpolicy.FieldStatus},
			internalpolicy.FieldPolicyType:                      {Type: field.TypeString, Column: internalpolicy.FieldPolicyType},
			internalpolicy.FieldDetails:                         {Type: field.TypeString, Column: internalpolicy.FieldDetails},
			internalpolicy.FieldApprovalRequired:                {Type: field.TypeBool, Column: internalpolicy.FieldApprovalRequired},
			internalpolicy.FieldReviewDue:                       {Type: field.TypeTime, Column: internalpolicy.FieldReviewDue},
			internalpolicy.FieldReviewFrequency:                 {Type: field.TypeEnum, Column: internalpolicy.FieldReviewFrequency},
			internalpolicy.FieldApproverID:                      {Type: field.TypeString, Column: internalpolicy.FieldApproverID},
			internalpolicy.FieldDelegateID:                      {Type: field.TypeString, Column: internalpolicy.FieldDelegateID},
			internalpolicy.FieldSummary:                         {Type: field.TypeString, Column: internalpolicy.FieldSummary},
			internalpolicy.FieldTagSuggestions:                  {Type: field.TypeJSON, Column: internalpolicy.FieldTagSuggestions},
			internalpolicy.FieldDismissedTagSuggestions:         {Type: field.TypeJSON, Column: internalpolicy.FieldDismissedTagSuggestions},
			internalpolicy.FieldControlSuggestions:              {Type: field.TypeJSON, Column: internalpolicy.FieldControlSuggestions},
			internalpolicy.FieldDismissedControlSuggestions:     {Type: field.TypeJSON, Column: internalpolicy.FieldDismissedControlSuggestions},
			internalpolicy.FieldImprovementSuggestions:          {Type: field.TypeJSON, Column: internalpolicy.FieldImprovementSuggestions},
			internalpolicy.FieldDismissedImprovementSuggestions: {Type: field.TypeJSON, Column: internalpolicy.FieldDismissedImprovementSuggestions},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   internalpolicyhistory.Table,
			Columns: internalpolicyhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: internalpolicyhistory.FieldID,
			},
		},
		Type: "InternalPolicyHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			internalpolicyhistory.FieldHistoryTime:                     {Type: field.TypeTime, Column: internalpolicyhistory.FieldHistoryTime},
			internalpolicyhistory.FieldRef:                             {Type: field.TypeString, Column: internalpolicyhistory.FieldRef},
			internalpolicyhistory.FieldOperation:                       {Type: field.TypeEnum, Column: internalpolicyhistory.FieldOperation},
			internalpolicyhistory.FieldCreatedAt:                       {Type: field.TypeTime, Column: internalpolicyhistory.FieldCreatedAt},
			internalpolicyhistory.FieldUpdatedAt:                       {Type: field.TypeTime, Column: internalpolicyhistory.FieldUpdatedAt},
			internalpolicyhistory.FieldCreatedBy:                       {Type: field.TypeString, Column: internalpolicyhistory.FieldCreatedBy},
			internalpolicyhistory.FieldUpdatedBy:                       {Type: field.TypeString, Column: internalpolicyhistory.FieldUpdatedBy},
			internalpolicyhistory.FieldDeletedAt:                       {Type: field.TypeTime, Column: internalpolicyhistory.FieldDeletedAt},
			internalpolicyhistory.FieldDeletedBy:                       {Type: field.TypeString, Column: internalpolicyhistory.FieldDeletedBy},
			internalpolicyhistory.FieldDisplayID:                       {Type: field.TypeString, Column: internalpolicyhistory.FieldDisplayID},
			internalpolicyhistory.FieldTags:                            {Type: field.TypeJSON, Column: internalpolicyhistory.FieldTags},
			internalpolicyhistory.FieldRevision:                        {Type: field.TypeString, Column: internalpolicyhistory.FieldRevision},
			internalpolicyhistory.FieldOwnerID:                         {Type: field.TypeString, Column: internalpolicyhistory.FieldOwnerID},
			internalpolicyhistory.FieldName:                            {Type: field.TypeString, Column: internalpolicyhistory.FieldName},
			internalpolicyhistory.FieldStatus:                          {Type: field.TypeEnum, Column: internalpolicyhistory.FieldStatus},
			internalpolicyhistory.FieldPolicyType:                      {Type: field.TypeString, Column: internalpolicyhistory.FieldPolicyType},
			internalpolicyhistory.FieldDetails:                         {Type: field.TypeString, Column: internalpolicyhistory.FieldDetails},
			internalpolicyhistory.FieldApprovalRequired:                {Type: field.TypeBool, Column: internalpolicyhistory.FieldApprovalRequired},
			internalpolicyhistory.FieldReviewDue:                       {Type: field.TypeTime, Column: internalpolicyhistory.FieldReviewDue},
			internalpolicyhistory.FieldReviewFrequency:                 {Type: field.TypeEnum, Column: internalpolicyhistory.FieldReviewFrequency},
			internalpolicyhistory.FieldApproverID:                      {Type: field.TypeString, Column: internalpolicyhistory.FieldApproverID},
			internalpolicyhistory.FieldDelegateID:                      {Type: field.TypeString, Column: internalpolicyhistory.FieldDelegateID},
			internalpolicyhistory.FieldSummary:                         {Type: field.TypeString, Column: internalpolicyhistory.FieldSummary},
			internalpolicyhistory.FieldTagSuggestions:                  {Type: field.TypeJSON, Column: internalpolicyhistory.FieldTagSuggestions},
			internalpolicyhistory.FieldDismissedTagSuggestions:         {Type: field.TypeJSON, Column: internalpolicyhistory.FieldDismissedTagSuggestions},
			internalpolicyhistory.FieldControlSuggestions:              {Type: field.TypeJSON, Column: internalpolicyhistory.FieldControlSuggestions},
			internalpolicyhistory.FieldDismissedControlSuggestions:     {Type: field.TypeJSON, Column: internalpolicyhistory.FieldDismissedControlSuggestions},
			internalpolicyhistory.FieldImprovementSuggestions:          {Type: field.TypeJSON, Column: internalpolicyhistory.FieldImprovementSuggestions},
			internalpolicyhistory.FieldDismissedImprovementSuggestions: {Type: field.TypeJSON, Column: internalpolicyhistory.FieldDismissedImprovementSuggestions},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invite.Table,
			Columns: invite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: invite.FieldID,
			},
		},
		Type: "Invite",
		Fields: map[string]*sqlgraph.FieldSpec{
			invite.FieldCreatedAt:    {Type: field.TypeTime, Column: invite.FieldCreatedAt},
			invite.FieldUpdatedAt:    {Type: field.TypeTime, Column: invite.FieldUpdatedAt},
			invite.FieldCreatedBy:    {Type: field.TypeString, Column: invite.FieldCreatedBy},
			invite.FieldUpdatedBy:    {Type: field.TypeString, Column: invite.FieldUpdatedBy},
			invite.FieldDeletedAt:    {Type: field.TypeTime, Column: invite.FieldDeletedAt},
			invite.FieldDeletedBy:    {Type: field.TypeString, Column: invite.FieldDeletedBy},
			invite.FieldOwnerID:      {Type: field.TypeString, Column: invite.FieldOwnerID},
			invite.FieldToken:        {Type: field.TypeString, Column: invite.FieldToken},
			invite.FieldExpires:      {Type: field.TypeTime, Column: invite.FieldExpires},
			invite.FieldRecipient:    {Type: field.TypeString, Column: invite.FieldRecipient},
			invite.FieldStatus:       {Type: field.TypeEnum, Column: invite.FieldStatus},
			invite.FieldRole:         {Type: field.TypeEnum, Column: invite.FieldRole},
			invite.FieldSendAttempts: {Type: field.TypeInt, Column: invite.FieldSendAttempts},
			invite.FieldRequestorID:  {Type: field.TypeString, Column: invite.FieldRequestorID},
			invite.FieldSecret:       {Type: field.TypeBytes, Column: invite.FieldSecret},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   jobresult.Table,
			Columns: jobresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobresult.FieldID,
			},
		},
		Type: "JobResult",
		Fields: map[string]*sqlgraph.FieldSpec{
			jobresult.FieldCreatedAt:      {Type: field.TypeTime, Column: jobresult.FieldCreatedAt},
			jobresult.FieldUpdatedAt:      {Type: field.TypeTime, Column: jobresult.FieldUpdatedAt},
			jobresult.FieldCreatedBy:      {Type: field.TypeString, Column: jobresult.FieldCreatedBy},
			jobresult.FieldUpdatedBy:      {Type: field.TypeString, Column: jobresult.FieldUpdatedBy},
			jobresult.FieldDeletedAt:      {Type: field.TypeTime, Column: jobresult.FieldDeletedAt},
			jobresult.FieldDeletedBy:      {Type: field.TypeString, Column: jobresult.FieldDeletedBy},
			jobresult.FieldOwnerID:        {Type: field.TypeString, Column: jobresult.FieldOwnerID},
			jobresult.FieldScheduledJobID: {Type: field.TypeString, Column: jobresult.FieldScheduledJobID},
			jobresult.FieldStatus:         {Type: field.TypeEnum, Column: jobresult.FieldStatus},
			jobresult.FieldExitCode:       {Type: field.TypeInt, Column: jobresult.FieldExitCode},
			jobresult.FieldFinishedAt:     {Type: field.TypeTime, Column: jobresult.FieldFinishedAt},
			jobresult.FieldStartedAt:      {Type: field.TypeTime, Column: jobresult.FieldStartedAt},
			jobresult.FieldFileID:         {Type: field.TypeString, Column: jobresult.FieldFileID},
			jobresult.FieldLog:            {Type: field.TypeString, Column: jobresult.FieldLog},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   jobrunner.Table,
			Columns: jobrunner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobrunner.FieldID,
			},
		},
		Type: "JobRunner",
		Fields: map[string]*sqlgraph.FieldSpec{
			jobrunner.FieldCreatedAt:   {Type: field.TypeTime, Column: jobrunner.FieldCreatedAt},
			jobrunner.FieldUpdatedAt:   {Type: field.TypeTime, Column: jobrunner.FieldUpdatedAt},
			jobrunner.FieldCreatedBy:   {Type: field.TypeString, Column: jobrunner.FieldCreatedBy},
			jobrunner.FieldUpdatedBy:   {Type: field.TypeString, Column: jobrunner.FieldUpdatedBy},
			jobrunner.FieldDeletedAt:   {Type: field.TypeTime, Column: jobrunner.FieldDeletedAt},
			jobrunner.FieldDeletedBy:   {Type: field.TypeString, Column: jobrunner.FieldDeletedBy},
			jobrunner.FieldDisplayID:   {Type: field.TypeString, Column: jobrunner.FieldDisplayID},
			jobrunner.FieldTags:        {Type: field.TypeJSON, Column: jobrunner.FieldTags},
			jobrunner.FieldOwnerID:     {Type: field.TypeString, Column: jobrunner.FieldOwnerID},
			jobrunner.FieldSystemOwned: {Type: field.TypeBool, Column: jobrunner.FieldSystemOwned},
			jobrunner.FieldName:        {Type: field.TypeString, Column: jobrunner.FieldName},
			jobrunner.FieldStatus:      {Type: field.TypeEnum, Column: jobrunner.FieldStatus},
			jobrunner.FieldIPAddress:   {Type: field.TypeString, Column: jobrunner.FieldIPAddress},
			jobrunner.FieldLastSeen:    {Type: field.TypeTime, Column: jobrunner.FieldLastSeen},
			jobrunner.FieldVersion:     {Type: field.TypeString, Column: jobrunner.FieldVersion},
			jobrunner.FieldOs:          {Type: field.TypeString, Column: jobrunner.FieldOs},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   jobrunnerregistrationtoken.Table,
			Columns: jobrunnerregistrationtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobrunnerregistrationtoken.FieldID,
			},
		},
		Type: "JobRunnerRegistrationToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			jobrunnerregistrationtoken.FieldCreatedAt:   {Type: field.TypeTime, Column: jobrunnerregistrationtoken.FieldCreatedAt},
			jobrunnerregistrationtoken.FieldUpdatedAt:   {Type: field.TypeTime, Column: jobrunnerregistrationtoken.FieldUpdatedAt},
			jobrunnerregistrationtoken.FieldCreatedBy:   {Type: field.TypeString, Column: jobrunnerregistrationtoken.FieldCreatedBy},
			jobrunnerregistrationtoken.FieldUpdatedBy:   {Type: field.TypeString, Column: jobrunnerregistrationtoken.FieldUpdatedBy},
			jobrunnerregistrationtoken.FieldDeletedAt:   {Type: field.TypeTime, Column: jobrunnerregistrationtoken.FieldDeletedAt},
			jobrunnerregistrationtoken.FieldDeletedBy:   {Type: field.TypeString, Column: jobrunnerregistrationtoken.FieldDeletedBy},
			jobrunnerregistrationtoken.FieldTags:        {Type: field.TypeJSON, Column: jobrunnerregistrationtoken.FieldTags},
			jobrunnerregistrationtoken.FieldOwnerID:     {Type: field.TypeString, Column: jobrunnerregistrationtoken.FieldOwnerID},
			jobrunnerregistrationtoken.FieldToken:       {Type: field.TypeString, Column: jobrunnerregistrationtoken.FieldToken},
			jobrunnerregistrationtoken.FieldExpiresAt:   {Type: field.TypeTime, Column: jobrunnerregistrationtoken.FieldExpiresAt},
			jobrunnerregistrationtoken.FieldLastUsedAt:  {Type: field.TypeTime, Column: jobrunnerregistrationtoken.FieldLastUsedAt},
			jobrunnerregistrationtoken.FieldJobRunnerID: {Type: field.TypeString, Column: jobrunnerregistrationtoken.FieldJobRunnerID},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   jobrunnertoken.Table,
			Columns: jobrunnertoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobrunnertoken.FieldID,
			},
		},
		Type: "JobRunnerToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			jobrunnertoken.FieldCreatedAt:     {Type: field.TypeTime, Column: jobrunnertoken.FieldCreatedAt},
			jobrunnertoken.FieldUpdatedAt:     {Type: field.TypeTime, Column: jobrunnertoken.FieldUpdatedAt},
			jobrunnertoken.FieldCreatedBy:     {Type: field.TypeString, Column: jobrunnertoken.FieldCreatedBy},
			jobrunnertoken.FieldUpdatedBy:     {Type: field.TypeString, Column: jobrunnertoken.FieldUpdatedBy},
			jobrunnertoken.FieldDeletedAt:     {Type: field.TypeTime, Column: jobrunnertoken.FieldDeletedAt},
			jobrunnertoken.FieldDeletedBy:     {Type: field.TypeString, Column: jobrunnertoken.FieldDeletedBy},
			jobrunnertoken.FieldTags:          {Type: field.TypeJSON, Column: jobrunnertoken.FieldTags},
			jobrunnertoken.FieldOwnerID:       {Type: field.TypeString, Column: jobrunnertoken.FieldOwnerID},
			jobrunnertoken.FieldToken:         {Type: field.TypeString, Column: jobrunnertoken.FieldToken},
			jobrunnertoken.FieldExpiresAt:     {Type: field.TypeTime, Column: jobrunnertoken.FieldExpiresAt},
			jobrunnertoken.FieldLastUsedAt:    {Type: field.TypeTime, Column: jobrunnertoken.FieldLastUsedAt},
			jobrunnertoken.FieldIsActive:      {Type: field.TypeBool, Column: jobrunnertoken.FieldIsActive},
			jobrunnertoken.FieldRevokedReason: {Type: field.TypeString, Column: jobrunnertoken.FieldRevokedReason},
			jobrunnertoken.FieldRevokedBy:     {Type: field.TypeString, Column: jobrunnertoken.FieldRevokedBy},
			jobrunnertoken.FieldRevokedAt:     {Type: field.TypeTime, Column: jobrunnertoken.FieldRevokedAt},
		},
	}
	graph.Nodes[47] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   jobtemplate.Table,
			Columns: jobtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobtemplate.FieldID,
			},
		},
		Type: "JobTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			jobtemplate.FieldCreatedAt:     {Type: field.TypeTime, Column: jobtemplate.FieldCreatedAt},
			jobtemplate.FieldUpdatedAt:     {Type: field.TypeTime, Column: jobtemplate.FieldUpdatedAt},
			jobtemplate.FieldCreatedBy:     {Type: field.TypeString, Column: jobtemplate.FieldCreatedBy},
			jobtemplate.FieldUpdatedBy:     {Type: field.TypeString, Column: jobtemplate.FieldUpdatedBy},
			jobtemplate.FieldDeletedAt:     {Type: field.TypeTime, Column: jobtemplate.FieldDeletedAt},
			jobtemplate.FieldDeletedBy:     {Type: field.TypeString, Column: jobtemplate.FieldDeletedBy},
			jobtemplate.FieldDisplayID:     {Type: field.TypeString, Column: jobtemplate.FieldDisplayID},
			jobtemplate.FieldTags:          {Type: field.TypeJSON, Column: jobtemplate.FieldTags},
			jobtemplate.FieldOwnerID:       {Type: field.TypeString, Column: jobtemplate.FieldOwnerID},
			jobtemplate.FieldSystemOwned:   {Type: field.TypeBool, Column: jobtemplate.FieldSystemOwned},
			jobtemplate.FieldTitle:         {Type: field.TypeString, Column: jobtemplate.FieldTitle},
			jobtemplate.FieldDescription:   {Type: field.TypeString, Column: jobtemplate.FieldDescription},
			jobtemplate.FieldPlatform:      {Type: field.TypeEnum, Column: jobtemplate.FieldPlatform},
			jobtemplate.FieldWindmillPath:  {Type: field.TypeString, Column: jobtemplate.FieldWindmillPath},
			jobtemplate.FieldDownloadURL:   {Type: field.TypeString, Column: jobtemplate.FieldDownloadURL},
			jobtemplate.FieldConfiguration: {Type: field.TypeJSON, Column: jobtemplate.FieldConfiguration},
			jobtemplate.FieldCron:          {Type: field.TypeString, Column: jobtemplate.FieldCron},
		},
	}
	graph.Nodes[48] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   jobtemplatehistory.Table,
			Columns: jobtemplatehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobtemplatehistory.FieldID,
			},
		},
		Type: "JobTemplateHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			jobtemplatehistory.FieldHistoryTime:   {Type: field.TypeTime, Column: jobtemplatehistory.FieldHistoryTime},
			jobtemplatehistory.FieldRef:           {Type: field.TypeString, Column: jobtemplatehistory.FieldRef},
			jobtemplatehistory.FieldOperation:     {Type: field.TypeEnum, Column: jobtemplatehistory.FieldOperation},
			jobtemplatehistory.FieldCreatedAt:     {Type: field.TypeTime, Column: jobtemplatehistory.FieldCreatedAt},
			jobtemplatehistory.FieldUpdatedAt:     {Type: field.TypeTime, Column: jobtemplatehistory.FieldUpdatedAt},
			jobtemplatehistory.FieldCreatedBy:     {Type: field.TypeString, Column: jobtemplatehistory.FieldCreatedBy},
			jobtemplatehistory.FieldUpdatedBy:     {Type: field.TypeString, Column: jobtemplatehistory.FieldUpdatedBy},
			jobtemplatehistory.FieldDeletedAt:     {Type: field.TypeTime, Column: jobtemplatehistory.FieldDeletedAt},
			jobtemplatehistory.FieldDeletedBy:     {Type: field.TypeString, Column: jobtemplatehistory.FieldDeletedBy},
			jobtemplatehistory.FieldDisplayID:     {Type: field.TypeString, Column: jobtemplatehistory.FieldDisplayID},
			jobtemplatehistory.FieldTags:          {Type: field.TypeJSON, Column: jobtemplatehistory.FieldTags},
			jobtemplatehistory.FieldOwnerID:       {Type: field.TypeString, Column: jobtemplatehistory.FieldOwnerID},
			jobtemplatehistory.FieldSystemOwned:   {Type: field.TypeBool, Column: jobtemplatehistory.FieldSystemOwned},
			jobtemplatehistory.FieldTitle:         {Type: field.TypeString, Column: jobtemplatehistory.FieldTitle},
			jobtemplatehistory.FieldDescription:   {Type: field.TypeString, Column: jobtemplatehistory.FieldDescription},
			jobtemplatehistory.FieldPlatform:      {Type: field.TypeEnum, Column: jobtemplatehistory.FieldPlatform},
			jobtemplatehistory.FieldWindmillPath:  {Type: field.TypeString, Column: jobtemplatehistory.FieldWindmillPath},
			jobtemplatehistory.FieldDownloadURL:   {Type: field.TypeString, Column: jobtemplatehistory.FieldDownloadURL},
			jobtemplatehistory.FieldConfiguration: {Type: field.TypeJSON, Column: jobtemplatehistory.FieldConfiguration},
			jobtemplatehistory.FieldCron:          {Type: field.TypeString, Column: jobtemplatehistory.FieldCron},
		},
	}
	graph.Nodes[49] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mappabledomain.Table,
			Columns: mappabledomain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mappabledomain.FieldID,
			},
		},
		Type: "MappableDomain",
		Fields: map[string]*sqlgraph.FieldSpec{
			mappabledomain.FieldCreatedAt: {Type: field.TypeTime, Column: mappabledomain.FieldCreatedAt},
			mappabledomain.FieldUpdatedAt: {Type: field.TypeTime, Column: mappabledomain.FieldUpdatedAt},
			mappabledomain.FieldCreatedBy: {Type: field.TypeString, Column: mappabledomain.FieldCreatedBy},
			mappabledomain.FieldUpdatedBy: {Type: field.TypeString, Column: mappabledomain.FieldUpdatedBy},
			mappabledomain.FieldDeletedAt: {Type: field.TypeTime, Column: mappabledomain.FieldDeletedAt},
			mappabledomain.FieldDeletedBy: {Type: field.TypeString, Column: mappabledomain.FieldDeletedBy},
			mappabledomain.FieldTags:      {Type: field.TypeJSON, Column: mappabledomain.FieldTags},
			mappabledomain.FieldName:      {Type: field.TypeString, Column: mappabledomain.FieldName},
			mappabledomain.FieldZoneID:    {Type: field.TypeString, Column: mappabledomain.FieldZoneID},
		},
	}
	graph.Nodes[50] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mappabledomainhistory.Table,
			Columns: mappabledomainhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mappabledomainhistory.FieldID,
			},
		},
		Type: "MappableDomainHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			mappabledomainhistory.FieldHistoryTime: {Type: field.TypeTime, Column: mappabledomainhistory.FieldHistoryTime},
			mappabledomainhistory.FieldRef:         {Type: field.TypeString, Column: mappabledomainhistory.FieldRef},
			mappabledomainhistory.FieldOperation:   {Type: field.TypeEnum, Column: mappabledomainhistory.FieldOperation},
			mappabledomainhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: mappabledomainhistory.FieldCreatedAt},
			mappabledomainhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: mappabledomainhistory.FieldUpdatedAt},
			mappabledomainhistory.FieldCreatedBy:   {Type: field.TypeString, Column: mappabledomainhistory.FieldCreatedBy},
			mappabledomainhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: mappabledomainhistory.FieldUpdatedBy},
			mappabledomainhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: mappabledomainhistory.FieldDeletedAt},
			mappabledomainhistory.FieldDeletedBy:   {Type: field.TypeString, Column: mappabledomainhistory.FieldDeletedBy},
			mappabledomainhistory.FieldTags:        {Type: field.TypeJSON, Column: mappabledomainhistory.FieldTags},
			mappabledomainhistory.FieldName:        {Type: field.TypeString, Column: mappabledomainhistory.FieldName},
			mappabledomainhistory.FieldZoneID:      {Type: field.TypeString, Column: mappabledomainhistory.FieldZoneID},
		},
	}
	graph.Nodes[51] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mappedcontrol.Table,
			Columns: mappedcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mappedcontrol.FieldID,
			},
		},
		Type: "MappedControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			mappedcontrol.FieldCreatedAt:   {Type: field.TypeTime, Column: mappedcontrol.FieldCreatedAt},
			mappedcontrol.FieldUpdatedAt:   {Type: field.TypeTime, Column: mappedcontrol.FieldUpdatedAt},
			mappedcontrol.FieldCreatedBy:   {Type: field.TypeString, Column: mappedcontrol.FieldCreatedBy},
			mappedcontrol.FieldUpdatedBy:   {Type: field.TypeString, Column: mappedcontrol.FieldUpdatedBy},
			mappedcontrol.FieldDeletedAt:   {Type: field.TypeTime, Column: mappedcontrol.FieldDeletedAt},
			mappedcontrol.FieldDeletedBy:   {Type: field.TypeString, Column: mappedcontrol.FieldDeletedBy},
			mappedcontrol.FieldTags:        {Type: field.TypeJSON, Column: mappedcontrol.FieldTags},
			mappedcontrol.FieldOwnerID:     {Type: field.TypeString, Column: mappedcontrol.FieldOwnerID},
			mappedcontrol.FieldMappingType: {Type: field.TypeEnum, Column: mappedcontrol.FieldMappingType},
			mappedcontrol.FieldRelation:    {Type: field.TypeString, Column: mappedcontrol.FieldRelation},
			mappedcontrol.FieldConfidence:  {Type: field.TypeInt, Column: mappedcontrol.FieldConfidence},
			mappedcontrol.FieldSource:      {Type: field.TypeEnum, Column: mappedcontrol.FieldSource},
		},
	}
	graph.Nodes[52] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mappedcontrolhistory.Table,
			Columns: mappedcontrolhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mappedcontrolhistory.FieldID,
			},
		},
		Type: "MappedControlHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			mappedcontrolhistory.FieldHistoryTime: {Type: field.TypeTime, Column: mappedcontrolhistory.FieldHistoryTime},
			mappedcontrolhistory.FieldRef:         {Type: field.TypeString, Column: mappedcontrolhistory.FieldRef},
			mappedcontrolhistory.FieldOperation:   {Type: field.TypeEnum, Column: mappedcontrolhistory.FieldOperation},
			mappedcontrolhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: mappedcontrolhistory.FieldCreatedAt},
			mappedcontrolhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: mappedcontrolhistory.FieldUpdatedAt},
			mappedcontrolhistory.FieldCreatedBy:   {Type: field.TypeString, Column: mappedcontrolhistory.FieldCreatedBy},
			mappedcontrolhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: mappedcontrolhistory.FieldUpdatedBy},
			mappedcontrolhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: mappedcontrolhistory.FieldDeletedAt},
			mappedcontrolhistory.FieldDeletedBy:   {Type: field.TypeString, Column: mappedcontrolhistory.FieldDeletedBy},
			mappedcontrolhistory.FieldTags:        {Type: field.TypeJSON, Column: mappedcontrolhistory.FieldTags},
			mappedcontrolhistory.FieldOwnerID:     {Type: field.TypeString, Column: mappedcontrolhistory.FieldOwnerID},
			mappedcontrolhistory.FieldMappingType: {Type: field.TypeEnum, Column: mappedcontrolhistory.FieldMappingType},
			mappedcontrolhistory.FieldRelation:    {Type: field.TypeString, Column: mappedcontrolhistory.FieldRelation},
			mappedcontrolhistory.FieldConfidence:  {Type: field.TypeInt, Column: mappedcontrolhistory.FieldConfidence},
			mappedcontrolhistory.FieldSource:      {Type: field.TypeEnum, Column: mappedcontrolhistory.FieldSource},
		},
	}
	graph.Nodes[53] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   narrative.Table,
			Columns: narrative.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: narrative.FieldID,
			},
		},
		Type: "Narrative",
		Fields: map[string]*sqlgraph.FieldSpec{
			narrative.FieldCreatedAt:   {Type: field.TypeTime, Column: narrative.FieldCreatedAt},
			narrative.FieldUpdatedAt:   {Type: field.TypeTime, Column: narrative.FieldUpdatedAt},
			narrative.FieldCreatedBy:   {Type: field.TypeString, Column: narrative.FieldCreatedBy},
			narrative.FieldUpdatedBy:   {Type: field.TypeString, Column: narrative.FieldUpdatedBy},
			narrative.FieldDeletedAt:   {Type: field.TypeTime, Column: narrative.FieldDeletedAt},
			narrative.FieldDeletedBy:   {Type: field.TypeString, Column: narrative.FieldDeletedBy},
			narrative.FieldDisplayID:   {Type: field.TypeString, Column: narrative.FieldDisplayID},
			narrative.FieldTags:        {Type: field.TypeJSON, Column: narrative.FieldTags},
			narrative.FieldOwnerID:     {Type: field.TypeString, Column: narrative.FieldOwnerID},
			narrative.FieldName:        {Type: field.TypeString, Column: narrative.FieldName},
			narrative.FieldDescription: {Type: field.TypeString, Column: narrative.FieldDescription},
			narrative.FieldDetails:     {Type: field.TypeString, Column: narrative.FieldDetails},
		},
	}
	graph.Nodes[54] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   narrativehistory.Table,
			Columns: narrativehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: narrativehistory.FieldID,
			},
		},
		Type: "NarrativeHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			narrativehistory.FieldHistoryTime: {Type: field.TypeTime, Column: narrativehistory.FieldHistoryTime},
			narrativehistory.FieldRef:         {Type: field.TypeString, Column: narrativehistory.FieldRef},
			narrativehistory.FieldOperation:   {Type: field.TypeEnum, Column: narrativehistory.FieldOperation},
			narrativehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: narrativehistory.FieldCreatedAt},
			narrativehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: narrativehistory.FieldUpdatedAt},
			narrativehistory.FieldCreatedBy:   {Type: field.TypeString, Column: narrativehistory.FieldCreatedBy},
			narrativehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: narrativehistory.FieldUpdatedBy},
			narrativehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: narrativehistory.FieldDeletedAt},
			narrativehistory.FieldDeletedBy:   {Type: field.TypeString, Column: narrativehistory.FieldDeletedBy},
			narrativehistory.FieldDisplayID:   {Type: field.TypeString, Column: narrativehistory.FieldDisplayID},
			narrativehistory.FieldTags:        {Type: field.TypeJSON, Column: narrativehistory.FieldTags},
			narrativehistory.FieldOwnerID:     {Type: field.TypeString, Column: narrativehistory.FieldOwnerID},
			narrativehistory.FieldName:        {Type: field.TypeString, Column: narrativehistory.FieldName},
			narrativehistory.FieldDescription: {Type: field.TypeString, Column: narrativehistory.FieldDescription},
			narrativehistory.FieldDetails:     {Type: field.TypeString, Column: narrativehistory.FieldDetails},
		},
	}
	graph.Nodes[55] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   note.Table,
			Columns: note.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: note.FieldID,
			},
		},
		Type: "Note",
		Fields: map[string]*sqlgraph.FieldSpec{
			note.FieldCreatedAt: {Type: field.TypeTime, Column: note.FieldCreatedAt},
			note.FieldUpdatedAt: {Type: field.TypeTime, Column: note.FieldUpdatedAt},
			note.FieldCreatedBy: {Type: field.TypeString, Column: note.FieldCreatedBy},
			note.FieldUpdatedBy: {Type: field.TypeString, Column: note.FieldUpdatedBy},
			note.FieldDeletedAt: {Type: field.TypeTime, Column: note.FieldDeletedAt},
			note.FieldDeletedBy: {Type: field.TypeString, Column: note.FieldDeletedBy},
			note.FieldDisplayID: {Type: field.TypeString, Column: note.FieldDisplayID},
			note.FieldOwnerID:   {Type: field.TypeString, Column: note.FieldOwnerID},
			note.FieldText:      {Type: field.TypeString, Column: note.FieldText},
		},
	}
	graph.Nodes[56] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notehistory.Table,
			Columns: notehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: notehistory.FieldID,
			},
		},
		Type: "NoteHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			notehistory.FieldHistoryTime: {Type: field.TypeTime, Column: notehistory.FieldHistoryTime},
			notehistory.FieldRef:         {Type: field.TypeString, Column: notehistory.FieldRef},
			notehistory.FieldOperation:   {Type: field.TypeEnum, Column: notehistory.FieldOperation},
			notehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: notehistory.FieldCreatedAt},
			notehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: notehistory.FieldUpdatedAt},
			notehistory.FieldCreatedBy:   {Type: field.TypeString, Column: notehistory.FieldCreatedBy},
			notehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: notehistory.FieldUpdatedBy},
			notehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: notehistory.FieldDeletedAt},
			notehistory.FieldDeletedBy:   {Type: field.TypeString, Column: notehistory.FieldDeletedBy},
			notehistory.FieldDisplayID:   {Type: field.TypeString, Column: notehistory.FieldDisplayID},
			notehistory.FieldOwnerID:     {Type: field.TypeString, Column: notehistory.FieldOwnerID},
			notehistory.FieldText:        {Type: field.TypeString, Column: notehistory.FieldText},
		},
	}
	graph.Nodes[57] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   onboarding.Table,
			Columns: onboarding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: onboarding.FieldID,
			},
		},
		Type: "Onboarding",
		Fields: map[string]*sqlgraph.FieldSpec{
			onboarding.FieldDeletedAt:      {Type: field.TypeTime, Column: onboarding.FieldDeletedAt},
			onboarding.FieldDeletedBy:      {Type: field.TypeString, Column: onboarding.FieldDeletedBy},
			onboarding.FieldOrganizationID: {Type: field.TypeString, Column: onboarding.FieldOrganizationID},
			onboarding.FieldCompanyName:    {Type: field.TypeString, Column: onboarding.FieldCompanyName},
			onboarding.FieldDomains:        {Type: field.TypeJSON, Column: onboarding.FieldDomains},
			onboarding.FieldCompanyDetails: {Type: field.TypeJSON, Column: onboarding.FieldCompanyDetails},
			onboarding.FieldUserDetails:    {Type: field.TypeJSON, Column: onboarding.FieldUserDetails},
			onboarding.FieldCompliance:     {Type: field.TypeJSON, Column: onboarding.FieldCompliance},
		},
	}
	graph.Nodes[58] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgmembership.Table,
			Columns: orgmembership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgmembership.FieldID,
			},
		},
		Type: "OrgMembership",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgmembership.FieldCreatedAt:      {Type: field.TypeTime, Column: orgmembership.FieldCreatedAt},
			orgmembership.FieldUpdatedAt:      {Type: field.TypeTime, Column: orgmembership.FieldUpdatedAt},
			orgmembership.FieldCreatedBy:      {Type: field.TypeString, Column: orgmembership.FieldCreatedBy},
			orgmembership.FieldUpdatedBy:      {Type: field.TypeString, Column: orgmembership.FieldUpdatedBy},
			orgmembership.FieldRole:           {Type: field.TypeEnum, Column: orgmembership.FieldRole},
			orgmembership.FieldOrganizationID: {Type: field.TypeString, Column: orgmembership.FieldOrganizationID},
			orgmembership.FieldUserID:         {Type: field.TypeString, Column: orgmembership.FieldUserID},
		},
	}
	graph.Nodes[59] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgmembershiphistory.Table,
			Columns: orgmembershiphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgmembershiphistory.FieldID,
			},
		},
		Type: "OrgMembershipHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgmembershiphistory.FieldHistoryTime:    {Type: field.TypeTime, Column: orgmembershiphistory.FieldHistoryTime},
			orgmembershiphistory.FieldRef:            {Type: field.TypeString, Column: orgmembershiphistory.FieldRef},
			orgmembershiphistory.FieldOperation:      {Type: field.TypeEnum, Column: orgmembershiphistory.FieldOperation},
			orgmembershiphistory.FieldCreatedAt:      {Type: field.TypeTime, Column: orgmembershiphistory.FieldCreatedAt},
			orgmembershiphistory.FieldUpdatedAt:      {Type: field.TypeTime, Column: orgmembershiphistory.FieldUpdatedAt},
			orgmembershiphistory.FieldCreatedBy:      {Type: field.TypeString, Column: orgmembershiphistory.FieldCreatedBy},
			orgmembershiphistory.FieldUpdatedBy:      {Type: field.TypeString, Column: orgmembershiphistory.FieldUpdatedBy},
			orgmembershiphistory.FieldRole:           {Type: field.TypeEnum, Column: orgmembershiphistory.FieldRole},
			orgmembershiphistory.FieldOrganizationID: {Type: field.TypeString, Column: orgmembershiphistory.FieldOrganizationID},
			orgmembershiphistory.FieldUserID:         {Type: field.TypeString, Column: orgmembershiphistory.FieldUserID},
		},
	}
	graph.Nodes[60] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgmodule.Table,
			Columns: orgmodule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgmodule.FieldID,
			},
		},
		Type: "OrgModule",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgmodule.FieldCreatedAt:       {Type: field.TypeTime, Column: orgmodule.FieldCreatedAt},
			orgmodule.FieldUpdatedAt:       {Type: field.TypeTime, Column: orgmodule.FieldUpdatedAt},
			orgmodule.FieldCreatedBy:       {Type: field.TypeString, Column: orgmodule.FieldCreatedBy},
			orgmodule.FieldUpdatedBy:       {Type: field.TypeString, Column: orgmodule.FieldUpdatedBy},
			orgmodule.FieldDeletedAt:       {Type: field.TypeTime, Column: orgmodule.FieldDeletedAt},
			orgmodule.FieldDeletedBy:       {Type: field.TypeString, Column: orgmodule.FieldDeletedBy},
			orgmodule.FieldTags:            {Type: field.TypeJSON, Column: orgmodule.FieldTags},
			orgmodule.FieldOwnerID:         {Type: field.TypeString, Column: orgmodule.FieldOwnerID},
			orgmodule.FieldModule:          {Type: field.TypeString, Column: orgmodule.FieldModule},
			orgmodule.FieldPrice:           {Type: field.TypeJSON, Column: orgmodule.FieldPrice},
			orgmodule.FieldStripePriceID:   {Type: field.TypeString, Column: orgmodule.FieldStripePriceID},
			orgmodule.FieldStatus:          {Type: field.TypeString, Column: orgmodule.FieldStatus},
			orgmodule.FieldVisibility:      {Type: field.TypeString, Column: orgmodule.FieldVisibility},
			orgmodule.FieldActive:          {Type: field.TypeBool, Column: orgmodule.FieldActive},
			orgmodule.FieldModuleLookupKey: {Type: field.TypeString, Column: orgmodule.FieldModuleLookupKey},
			orgmodule.FieldSubscriptionID:  {Type: field.TypeString, Column: orgmodule.FieldSubscriptionID},
			orgmodule.FieldPriceID:         {Type: field.TypeString, Column: orgmodule.FieldPriceID},
		},
	}
	graph.Nodes[61] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgprice.Table,
			Columns: orgprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgprice.FieldID,
			},
		},
		Type: "OrgPrice",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgprice.FieldCreatedAt:      {Type: field.TypeTime, Column: orgprice.FieldCreatedAt},
			orgprice.FieldUpdatedAt:      {Type: field.TypeTime, Column: orgprice.FieldUpdatedAt},
			orgprice.FieldCreatedBy:      {Type: field.TypeString, Column: orgprice.FieldCreatedBy},
			orgprice.FieldUpdatedBy:      {Type: field.TypeString, Column: orgprice.FieldUpdatedBy},
			orgprice.FieldDeletedAt:      {Type: field.TypeTime, Column: orgprice.FieldDeletedAt},
			orgprice.FieldDeletedBy:      {Type: field.TypeString, Column: orgprice.FieldDeletedBy},
			orgprice.FieldTags:           {Type: field.TypeJSON, Column: orgprice.FieldTags},
			orgprice.FieldOwnerID:        {Type: field.TypeString, Column: orgprice.FieldOwnerID},
			orgprice.FieldPrice:          {Type: field.TypeJSON, Column: orgprice.FieldPrice},
			orgprice.FieldStripePriceID:  {Type: field.TypeString, Column: orgprice.FieldStripePriceID},
			orgprice.FieldStatus:         {Type: field.TypeString, Column: orgprice.FieldStatus},
			orgprice.FieldActive:         {Type: field.TypeBool, Column: orgprice.FieldActive},
			orgprice.FieldProductID:      {Type: field.TypeString, Column: orgprice.FieldProductID},
			orgprice.FieldSubscriptionID: {Type: field.TypeString, Column: orgprice.FieldSubscriptionID},
		},
	}
	graph.Nodes[62] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgproduct.Table,
			Columns: orgproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgproduct.FieldID,
			},
		},
		Type: "OrgProduct",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgproduct.FieldCreatedAt:       {Type: field.TypeTime, Column: orgproduct.FieldCreatedAt},
			orgproduct.FieldUpdatedAt:       {Type: field.TypeTime, Column: orgproduct.FieldUpdatedAt},
			orgproduct.FieldCreatedBy:       {Type: field.TypeString, Column: orgproduct.FieldCreatedBy},
			orgproduct.FieldUpdatedBy:       {Type: field.TypeString, Column: orgproduct.FieldUpdatedBy},
			orgproduct.FieldDeletedAt:       {Type: field.TypeTime, Column: orgproduct.FieldDeletedAt},
			orgproduct.FieldDeletedBy:       {Type: field.TypeString, Column: orgproduct.FieldDeletedBy},
			orgproduct.FieldTags:            {Type: field.TypeJSON, Column: orgproduct.FieldTags},
			orgproduct.FieldOwnerID:         {Type: field.TypeString, Column: orgproduct.FieldOwnerID},
			orgproduct.FieldModule:          {Type: field.TypeString, Column: orgproduct.FieldModule},
			orgproduct.FieldStripeProductID: {Type: field.TypeString, Column: orgproduct.FieldStripeProductID},
			orgproduct.FieldStatus:          {Type: field.TypeString, Column: orgproduct.FieldStatus},
			orgproduct.FieldActive:          {Type: field.TypeBool, Column: orgproduct.FieldActive},
			orgproduct.FieldSubscriptionID:  {Type: field.TypeString, Column: orgproduct.FieldSubscriptionID},
			orgproduct.FieldPriceID:         {Type: field.TypeString, Column: orgproduct.FieldPriceID},
		},
	}
	graph.Nodes[63] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgsubscription.Table,
			Columns: orgsubscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgsubscription.FieldID,
			},
		},
		Type: "OrgSubscription",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgsubscription.FieldCreatedAt:                {Type: field.TypeTime, Column: orgsubscription.FieldCreatedAt},
			orgsubscription.FieldUpdatedAt:                {Type: field.TypeTime, Column: orgsubscription.FieldUpdatedAt},
			orgsubscription.FieldCreatedBy:                {Type: field.TypeString, Column: orgsubscription.FieldCreatedBy},
			orgsubscription.FieldUpdatedBy:                {Type: field.TypeString, Column: orgsubscription.FieldUpdatedBy},
			orgsubscription.FieldDeletedAt:                {Type: field.TypeTime, Column: orgsubscription.FieldDeletedAt},
			orgsubscription.FieldDeletedBy:                {Type: field.TypeString, Column: orgsubscription.FieldDeletedBy},
			orgsubscription.FieldTags:                     {Type: field.TypeJSON, Column: orgsubscription.FieldTags},
			orgsubscription.FieldOwnerID:                  {Type: field.TypeString, Column: orgsubscription.FieldOwnerID},
			orgsubscription.FieldStripeSubscriptionID:     {Type: field.TypeString, Column: orgsubscription.FieldStripeSubscriptionID},
			orgsubscription.FieldProductTier:              {Type: field.TypeString, Column: orgsubscription.FieldProductTier},
			orgsubscription.FieldProductPrice:             {Type: field.TypeJSON, Column: orgsubscription.FieldProductPrice},
			orgsubscription.FieldStripeProductTierID:      {Type: field.TypeString, Column: orgsubscription.FieldStripeProductTierID},
			orgsubscription.FieldStripeSubscriptionStatus: {Type: field.TypeString, Column: orgsubscription.FieldStripeSubscriptionStatus},
			orgsubscription.FieldActive:                   {Type: field.TypeBool, Column: orgsubscription.FieldActive},
			orgsubscription.FieldStripeCustomerID:         {Type: field.TypeString, Column: orgsubscription.FieldStripeCustomerID},
			orgsubscription.FieldExpiresAt:                {Type: field.TypeTime, Column: orgsubscription.FieldExpiresAt},
			orgsubscription.FieldTrialExpiresAt:           {Type: field.TypeTime, Column: orgsubscription.FieldTrialExpiresAt},
			orgsubscription.FieldDaysUntilDue:             {Type: field.TypeString, Column: orgsubscription.FieldDaysUntilDue},
			orgsubscription.FieldPaymentMethodAdded:       {Type: field.TypeBool, Column: orgsubscription.FieldPaymentMethodAdded},
			orgsubscription.FieldFeatures:                 {Type: field.TypeJSON, Column: orgsubscription.FieldFeatures},
			orgsubscription.FieldFeatureLookupKeys:        {Type: field.TypeJSON, Column: orgsubscription.FieldFeatureLookupKeys},
		},
	}
	graph.Nodes[64] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgsubscriptionhistory.Table,
			Columns: orgsubscriptionhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgsubscriptionhistory.FieldID,
			},
		},
		Type: "OrgSubscriptionHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgsubscriptionhistory.FieldHistoryTime:              {Type: field.TypeTime, Column: orgsubscriptionhistory.FieldHistoryTime},
			orgsubscriptionhistory.FieldRef:                      {Type: field.TypeString, Column: orgsubscriptionhistory.FieldRef},
			orgsubscriptionhistory.FieldOperation:                {Type: field.TypeEnum, Column: orgsubscriptionhistory.FieldOperation},
			orgsubscriptionhistory.FieldCreatedAt:                {Type: field.TypeTime, Column: orgsubscriptionhistory.FieldCreatedAt},
			orgsubscriptionhistory.FieldUpdatedAt:                {Type: field.TypeTime, Column: orgsubscriptionhistory.FieldUpdatedAt},
			orgsubscriptionhistory.FieldCreatedBy:                {Type: field.TypeString, Column: orgsubscriptionhistory.FieldCreatedBy},
			orgsubscriptionhistory.FieldUpdatedBy:                {Type: field.TypeString, Column: orgsubscriptionhistory.FieldUpdatedBy},
			orgsubscriptionhistory.FieldDeletedAt:                {Type: field.TypeTime, Column: orgsubscriptionhistory.FieldDeletedAt},
			orgsubscriptionhistory.FieldDeletedBy:                {Type: field.TypeString, Column: orgsubscriptionhistory.FieldDeletedBy},
			orgsubscriptionhistory.FieldTags:                     {Type: field.TypeJSON, Column: orgsubscriptionhistory.FieldTags},
			orgsubscriptionhistory.FieldOwnerID:                  {Type: field.TypeString, Column: orgsubscriptionhistory.FieldOwnerID},
			orgsubscriptionhistory.FieldStripeSubscriptionID:     {Type: field.TypeString, Column: orgsubscriptionhistory.FieldStripeSubscriptionID},
			orgsubscriptionhistory.FieldProductTier:              {Type: field.TypeString, Column: orgsubscriptionhistory.FieldProductTier},
			orgsubscriptionhistory.FieldProductPrice:             {Type: field.TypeJSON, Column: orgsubscriptionhistory.FieldProductPrice},
			orgsubscriptionhistory.FieldStripeProductTierID:      {Type: field.TypeString, Column: orgsubscriptionhistory.FieldStripeProductTierID},
			orgsubscriptionhistory.FieldStripeSubscriptionStatus: {Type: field.TypeString, Column: orgsubscriptionhistory.FieldStripeSubscriptionStatus},
			orgsubscriptionhistory.FieldActive:                   {Type: field.TypeBool, Column: orgsubscriptionhistory.FieldActive},
			orgsubscriptionhistory.FieldStripeCustomerID:         {Type: field.TypeString, Column: orgsubscriptionhistory.FieldStripeCustomerID},
			orgsubscriptionhistory.FieldExpiresAt:                {Type: field.TypeTime, Column: orgsubscriptionhistory.FieldExpiresAt},
			orgsubscriptionhistory.FieldTrialExpiresAt:           {Type: field.TypeTime, Column: orgsubscriptionhistory.FieldTrialExpiresAt},
			orgsubscriptionhistory.FieldDaysUntilDue:             {Type: field.TypeString, Column: orgsubscriptionhistory.FieldDaysUntilDue},
			orgsubscriptionhistory.FieldPaymentMethodAdded:       {Type: field.TypeBool, Column: orgsubscriptionhistory.FieldPaymentMethodAdded},
			orgsubscriptionhistory.FieldFeatures:                 {Type: field.TypeJSON, Column: orgsubscriptionhistory.FieldFeatures},
			orgsubscriptionhistory.FieldFeatureLookupKeys:        {Type: field.TypeJSON, Column: orgsubscriptionhistory.FieldFeatureLookupKeys},
		},
	}
	graph.Nodes[65] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt:            {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:            {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldCreatedBy:            {Type: field.TypeString, Column: organization.FieldCreatedBy},
			organization.FieldUpdatedBy:            {Type: field.TypeString, Column: organization.FieldUpdatedBy},
			organization.FieldDeletedAt:            {Type: field.TypeTime, Column: organization.FieldDeletedAt},
			organization.FieldDeletedBy:            {Type: field.TypeString, Column: organization.FieldDeletedBy},
			organization.FieldTags:                 {Type: field.TypeJSON, Column: organization.FieldTags},
			organization.FieldName:                 {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldDisplayName:          {Type: field.TypeString, Column: organization.FieldDisplayName},
			organization.FieldDescription:          {Type: field.TypeString, Column: organization.FieldDescription},
			organization.FieldParentOrganizationID: {Type: field.TypeString, Column: organization.FieldParentOrganizationID},
			organization.FieldPersonalOrg:          {Type: field.TypeBool, Column: organization.FieldPersonalOrg},
			organization.FieldAvatarRemoteURL:      {Type: field.TypeString, Column: organization.FieldAvatarRemoteURL},
			organization.FieldAvatarLocalFileID:    {Type: field.TypeString, Column: organization.FieldAvatarLocalFileID},
			organization.FieldAvatarUpdatedAt:      {Type: field.TypeTime, Column: organization.FieldAvatarUpdatedAt},
			organization.FieldDedicatedDb:          {Type: field.TypeBool, Column: organization.FieldDedicatedDb},
		},
	}
	graph.Nodes[66] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationhistory.Table,
			Columns: organizationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationhistory.FieldID,
			},
		},
		Type: "OrganizationHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationhistory.FieldHistoryTime:          {Type: field.TypeTime, Column: organizationhistory.FieldHistoryTime},
			organizationhistory.FieldRef:                  {Type: field.TypeString, Column: organizationhistory.FieldRef},
			organizationhistory.FieldOperation:            {Type: field.TypeEnum, Column: organizationhistory.FieldOperation},
			organizationhistory.FieldCreatedAt:            {Type: field.TypeTime, Column: organizationhistory.FieldCreatedAt},
			organizationhistory.FieldUpdatedAt:            {Type: field.TypeTime, Column: organizationhistory.FieldUpdatedAt},
			organizationhistory.FieldCreatedBy:            {Type: field.TypeString, Column: organizationhistory.FieldCreatedBy},
			organizationhistory.FieldUpdatedBy:            {Type: field.TypeString, Column: organizationhistory.FieldUpdatedBy},
			organizationhistory.FieldDeletedAt:            {Type: field.TypeTime, Column: organizationhistory.FieldDeletedAt},
			organizationhistory.FieldDeletedBy:            {Type: field.TypeString, Column: organizationhistory.FieldDeletedBy},
			organizationhistory.FieldTags:                 {Type: field.TypeJSON, Column: organizationhistory.FieldTags},
			organizationhistory.FieldName:                 {Type: field.TypeString, Column: organizationhistory.FieldName},
			organizationhistory.FieldDisplayName:          {Type: field.TypeString, Column: organizationhistory.FieldDisplayName},
			organizationhistory.FieldDescription:          {Type: field.TypeString, Column: organizationhistory.FieldDescription},
			organizationhistory.FieldParentOrganizationID: {Type: field.TypeString, Column: organizationhistory.FieldParentOrganizationID},
			organizationhistory.FieldPersonalOrg:          {Type: field.TypeBool, Column: organizationhistory.FieldPersonalOrg},
			organizationhistory.FieldAvatarRemoteURL:      {Type: field.TypeString, Column: organizationhistory.FieldAvatarRemoteURL},
			organizationhistory.FieldAvatarLocalFileID:    {Type: field.TypeString, Column: organizationhistory.FieldAvatarLocalFileID},
			organizationhistory.FieldAvatarUpdatedAt:      {Type: field.TypeTime, Column: organizationhistory.FieldAvatarUpdatedAt},
			organizationhistory.FieldDedicatedDb:          {Type: field.TypeBool, Column: organizationhistory.FieldDedicatedDb},
		},
	}
	graph.Nodes[67] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationsetting.Table,
			Columns: organizationsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationsetting.FieldID,
			},
		},
		Type: "OrganizationSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationsetting.FieldCreatedAt:                        {Type: field.TypeTime, Column: organizationsetting.FieldCreatedAt},
			organizationsetting.FieldUpdatedAt:                        {Type: field.TypeTime, Column: organizationsetting.FieldUpdatedAt},
			organizationsetting.FieldCreatedBy:                        {Type: field.TypeString, Column: organizationsetting.FieldCreatedBy},
			organizationsetting.FieldUpdatedBy:                        {Type: field.TypeString, Column: organizationsetting.FieldUpdatedBy},
			organizationsetting.FieldDeletedAt:                        {Type: field.TypeTime, Column: organizationsetting.FieldDeletedAt},
			organizationsetting.FieldDeletedBy:                        {Type: field.TypeString, Column: organizationsetting.FieldDeletedBy},
			organizationsetting.FieldTags:                             {Type: field.TypeJSON, Column: organizationsetting.FieldTags},
			organizationsetting.FieldDomains:                          {Type: field.TypeJSON, Column: organizationsetting.FieldDomains},
			organizationsetting.FieldBillingContact:                   {Type: field.TypeString, Column: organizationsetting.FieldBillingContact},
			organizationsetting.FieldBillingEmail:                     {Type: field.TypeString, Column: organizationsetting.FieldBillingEmail},
			organizationsetting.FieldBillingPhone:                     {Type: field.TypeString, Column: organizationsetting.FieldBillingPhone},
			organizationsetting.FieldBillingAddress:                   {Type: field.TypeJSON, Column: organizationsetting.FieldBillingAddress},
			organizationsetting.FieldTaxIdentifier:                    {Type: field.TypeString, Column: organizationsetting.FieldTaxIdentifier},
			organizationsetting.FieldGeoLocation:                      {Type: field.TypeEnum, Column: organizationsetting.FieldGeoLocation},
			organizationsetting.FieldOrganizationID:                   {Type: field.TypeString, Column: organizationsetting.FieldOrganizationID},
			organizationsetting.FieldBillingNotificationsEnabled:      {Type: field.TypeBool, Column: organizationsetting.FieldBillingNotificationsEnabled},
			organizationsetting.FieldAllowedEmailDomains:              {Type: field.TypeJSON, Column: organizationsetting.FieldAllowedEmailDomains},
			organizationsetting.FieldIdentityProvider:                 {Type: field.TypeEnum, Column: organizationsetting.FieldIdentityProvider},
			organizationsetting.FieldIdentityProviderClientID:         {Type: field.TypeString, Column: organizationsetting.FieldIdentityProviderClientID},
			organizationsetting.FieldIdentityProviderClientSecret:     {Type: field.TypeString, Column: organizationsetting.FieldIdentityProviderClientSecret},
			organizationsetting.FieldIdentityProviderMetadataEndpoint: {Type: field.TypeString, Column: organizationsetting.FieldIdentityProviderMetadataEndpoint},
			organizationsetting.FieldIdentityProviderEntityID:         {Type: field.TypeString, Column: organizationsetting.FieldIdentityProviderEntityID},
			organizationsetting.FieldOidcDiscoveryEndpoint:            {Type: field.TypeString, Column: organizationsetting.FieldOidcDiscoveryEndpoint},
			organizationsetting.FieldIdentityProviderLoginEnforced:    {Type: field.TypeBool, Column: organizationsetting.FieldIdentityProviderLoginEnforced},
			organizationsetting.FieldComplianceWebhookToken:           {Type: field.TypeString, Column: organizationsetting.FieldComplianceWebhookToken},
		},
	}
	graph.Nodes[68] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationsettinghistory.Table,
			Columns: organizationsettinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationsettinghistory.FieldID,
			},
		},
		Type: "OrganizationSettingHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationsettinghistory.FieldHistoryTime:                      {Type: field.TypeTime, Column: organizationsettinghistory.FieldHistoryTime},
			organizationsettinghistory.FieldRef:                              {Type: field.TypeString, Column: organizationsettinghistory.FieldRef},
			organizationsettinghistory.FieldOperation:                        {Type: field.TypeEnum, Column: organizationsettinghistory.FieldOperation},
			organizationsettinghistory.FieldCreatedAt:                        {Type: field.TypeTime, Column: organizationsettinghistory.FieldCreatedAt},
			organizationsettinghistory.FieldUpdatedAt:                        {Type: field.TypeTime, Column: organizationsettinghistory.FieldUpdatedAt},
			organizationsettinghistory.FieldCreatedBy:                        {Type: field.TypeString, Column: organizationsettinghistory.FieldCreatedBy},
			organizationsettinghistory.FieldUpdatedBy:                        {Type: field.TypeString, Column: organizationsettinghistory.FieldUpdatedBy},
			organizationsettinghistory.FieldDeletedAt:                        {Type: field.TypeTime, Column: organizationsettinghistory.FieldDeletedAt},
			organizationsettinghistory.FieldDeletedBy:                        {Type: field.TypeString, Column: organizationsettinghistory.FieldDeletedBy},
			organizationsettinghistory.FieldTags:                             {Type: field.TypeJSON, Column: organizationsettinghistory.FieldTags},
			organizationsettinghistory.FieldDomains:                          {Type: field.TypeJSON, Column: organizationsettinghistory.FieldDomains},
			organizationsettinghistory.FieldBillingContact:                   {Type: field.TypeString, Column: organizationsettinghistory.FieldBillingContact},
			organizationsettinghistory.FieldBillingEmail:                     {Type: field.TypeString, Column: organizationsettinghistory.FieldBillingEmail},
			organizationsettinghistory.FieldBillingPhone:                     {Type: field.TypeString, Column: organizationsettinghistory.FieldBillingPhone},
			organizationsettinghistory.FieldBillingAddress:                   {Type: field.TypeJSON, Column: organizationsettinghistory.FieldBillingAddress},
			organizationsettinghistory.FieldTaxIdentifier:                    {Type: field.TypeString, Column: organizationsettinghistory.FieldTaxIdentifier},
			organizationsettinghistory.FieldGeoLocation:                      {Type: field.TypeEnum, Column: organizationsettinghistory.FieldGeoLocation},
			organizationsettinghistory.FieldOrganizationID:                   {Type: field.TypeString, Column: organizationsettinghistory.FieldOrganizationID},
			organizationsettinghistory.FieldBillingNotificationsEnabled:      {Type: field.TypeBool, Column: organizationsettinghistory.FieldBillingNotificationsEnabled},
			organizationsettinghistory.FieldAllowedEmailDomains:              {Type: field.TypeJSON, Column: organizationsettinghistory.FieldAllowedEmailDomains},
			organizationsettinghistory.FieldIdentityProvider:                 {Type: field.TypeEnum, Column: organizationsettinghistory.FieldIdentityProvider},
			organizationsettinghistory.FieldIdentityProviderClientID:         {Type: field.TypeString, Column: organizationsettinghistory.FieldIdentityProviderClientID},
			organizationsettinghistory.FieldIdentityProviderClientSecret:     {Type: field.TypeString, Column: organizationsettinghistory.FieldIdentityProviderClientSecret},
			organizationsettinghistory.FieldIdentityProviderMetadataEndpoint: {Type: field.TypeString, Column: organizationsettinghistory.FieldIdentityProviderMetadataEndpoint},
			organizationsettinghistory.FieldIdentityProviderEntityID:         {Type: field.TypeString, Column: organizationsettinghistory.FieldIdentityProviderEntityID},
			organizationsettinghistory.FieldOidcDiscoveryEndpoint:            {Type: field.TypeString, Column: organizationsettinghistory.FieldOidcDiscoveryEndpoint},
			organizationsettinghistory.FieldIdentityProviderLoginEnforced:    {Type: field.TypeBool, Column: organizationsettinghistory.FieldIdentityProviderLoginEnforced},
			organizationsettinghistory.FieldComplianceWebhookToken:           {Type: field.TypeString, Column: organizationsettinghistory.FieldComplianceWebhookToken},
		},
	}
	graph.Nodes[69] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   passwordresettoken.Table,
			Columns: passwordresettoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: passwordresettoken.FieldID,
			},
		},
		Type: "PasswordResetToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			passwordresettoken.FieldCreatedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldCreatedAt},
			passwordresettoken.FieldUpdatedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldUpdatedAt},
			passwordresettoken.FieldCreatedBy: {Type: field.TypeString, Column: passwordresettoken.FieldCreatedBy},
			passwordresettoken.FieldUpdatedBy: {Type: field.TypeString, Column: passwordresettoken.FieldUpdatedBy},
			passwordresettoken.FieldDeletedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldDeletedAt},
			passwordresettoken.FieldDeletedBy: {Type: field.TypeString, Column: passwordresettoken.FieldDeletedBy},
			passwordresettoken.FieldOwnerID:   {Type: field.TypeString, Column: passwordresettoken.FieldOwnerID},
			passwordresettoken.FieldToken:     {Type: field.TypeString, Column: passwordresettoken.FieldToken},
			passwordresettoken.FieldTTL:       {Type: field.TypeTime, Column: passwordresettoken.FieldTTL},
			passwordresettoken.FieldEmail:     {Type: field.TypeString, Column: passwordresettoken.FieldEmail},
			passwordresettoken.FieldSecret:    {Type: field.TypeBytes, Column: passwordresettoken.FieldSecret},
		},
	}
	graph.Nodes[70] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   personalaccesstoken.Table,
			Columns: personalaccesstoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: personalaccesstoken.FieldID,
			},
		},
		Type: "PersonalAccessToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			personalaccesstoken.FieldCreatedAt:         {Type: field.TypeTime, Column: personalaccesstoken.FieldCreatedAt},
			personalaccesstoken.FieldUpdatedAt:         {Type: field.TypeTime, Column: personalaccesstoken.FieldUpdatedAt},
			personalaccesstoken.FieldCreatedBy:         {Type: field.TypeString, Column: personalaccesstoken.FieldCreatedBy},
			personalaccesstoken.FieldUpdatedBy:         {Type: field.TypeString, Column: personalaccesstoken.FieldUpdatedBy},
			personalaccesstoken.FieldDeletedAt:         {Type: field.TypeTime, Column: personalaccesstoken.FieldDeletedAt},
			personalaccesstoken.FieldDeletedBy:         {Type: field.TypeString, Column: personalaccesstoken.FieldDeletedBy},
			personalaccesstoken.FieldTags:              {Type: field.TypeJSON, Column: personalaccesstoken.FieldTags},
			personalaccesstoken.FieldOwnerID:           {Type: field.TypeString, Column: personalaccesstoken.FieldOwnerID},
			personalaccesstoken.FieldName:              {Type: field.TypeString, Column: personalaccesstoken.FieldName},
			personalaccesstoken.FieldToken:             {Type: field.TypeString, Column: personalaccesstoken.FieldToken},
			personalaccesstoken.FieldExpiresAt:         {Type: field.TypeTime, Column: personalaccesstoken.FieldExpiresAt},
			personalaccesstoken.FieldDescription:       {Type: field.TypeString, Column: personalaccesstoken.FieldDescription},
			personalaccesstoken.FieldScopes:            {Type: field.TypeJSON, Column: personalaccesstoken.FieldScopes},
			personalaccesstoken.FieldSSOAuthorizations: {Type: field.TypeJSON, Column: personalaccesstoken.FieldSSOAuthorizations},
			personalaccesstoken.FieldLastUsedAt:        {Type: field.TypeTime, Column: personalaccesstoken.FieldLastUsedAt},
			personalaccesstoken.FieldIsActive:          {Type: field.TypeBool, Column: personalaccesstoken.FieldIsActive},
			personalaccesstoken.FieldRevokedReason:     {Type: field.TypeString, Column: personalaccesstoken.FieldRevokedReason},
			personalaccesstoken.FieldRevokedBy:         {Type: field.TypeString, Column: personalaccesstoken.FieldRevokedBy},
			personalaccesstoken.FieldRevokedAt:         {Type: field.TypeTime, Column: personalaccesstoken.FieldRevokedAt},
		},
	}
	graph.Nodes[71] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   procedure.Table,
			Columns: procedure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: procedure.FieldID,
			},
		},
		Type: "Procedure",
		Fields: map[string]*sqlgraph.FieldSpec{
			procedure.FieldCreatedAt:                       {Type: field.TypeTime, Column: procedure.FieldCreatedAt},
			procedure.FieldUpdatedAt:                       {Type: field.TypeTime, Column: procedure.FieldUpdatedAt},
			procedure.FieldCreatedBy:                       {Type: field.TypeString, Column: procedure.FieldCreatedBy},
			procedure.FieldUpdatedBy:                       {Type: field.TypeString, Column: procedure.FieldUpdatedBy},
			procedure.FieldDeletedAt:                       {Type: field.TypeTime, Column: procedure.FieldDeletedAt},
			procedure.FieldDeletedBy:                       {Type: field.TypeString, Column: procedure.FieldDeletedBy},
			procedure.FieldDisplayID:                       {Type: field.TypeString, Column: procedure.FieldDisplayID},
			procedure.FieldTags:                            {Type: field.TypeJSON, Column: procedure.FieldTags},
			procedure.FieldRevision:                        {Type: field.TypeString, Column: procedure.FieldRevision},
			procedure.FieldOwnerID:                         {Type: field.TypeString, Column: procedure.FieldOwnerID},
			procedure.FieldName:                            {Type: field.TypeString, Column: procedure.FieldName},
			procedure.FieldStatus:                          {Type: field.TypeEnum, Column: procedure.FieldStatus},
			procedure.FieldProcedureType:                   {Type: field.TypeString, Column: procedure.FieldProcedureType},
			procedure.FieldDetails:                         {Type: field.TypeString, Column: procedure.FieldDetails},
			procedure.FieldApprovalRequired:                {Type: field.TypeBool, Column: procedure.FieldApprovalRequired},
			procedure.FieldReviewDue:                       {Type: field.TypeTime, Column: procedure.FieldReviewDue},
			procedure.FieldReviewFrequency:                 {Type: field.TypeEnum, Column: procedure.FieldReviewFrequency},
			procedure.FieldApproverID:                      {Type: field.TypeString, Column: procedure.FieldApproverID},
			procedure.FieldDelegateID:                      {Type: field.TypeString, Column: procedure.FieldDelegateID},
			procedure.FieldSummary:                         {Type: field.TypeString, Column: procedure.FieldSummary},
			procedure.FieldTagSuggestions:                  {Type: field.TypeJSON, Column: procedure.FieldTagSuggestions},
			procedure.FieldDismissedTagSuggestions:         {Type: field.TypeJSON, Column: procedure.FieldDismissedTagSuggestions},
			procedure.FieldControlSuggestions:              {Type: field.TypeJSON, Column: procedure.FieldControlSuggestions},
			procedure.FieldDismissedControlSuggestions:     {Type: field.TypeJSON, Column: procedure.FieldDismissedControlSuggestions},
			procedure.FieldImprovementSuggestions:          {Type: field.TypeJSON, Column: procedure.FieldImprovementSuggestions},
			procedure.FieldDismissedImprovementSuggestions: {Type: field.TypeJSON, Column: procedure.FieldDismissedImprovementSuggestions},
		},
	}
	graph.Nodes[72] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   procedurehistory.Table,
			Columns: procedurehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: procedurehistory.FieldID,
			},
		},
		Type: "ProcedureHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			procedurehistory.FieldHistoryTime:                     {Type: field.TypeTime, Column: procedurehistory.FieldHistoryTime},
			procedurehistory.FieldRef:                             {Type: field.TypeString, Column: procedurehistory.FieldRef},
			procedurehistory.FieldOperation:                       {Type: field.TypeEnum, Column: procedurehistory.FieldOperation},
			procedurehistory.FieldCreatedAt:                       {Type: field.TypeTime, Column: procedurehistory.FieldCreatedAt},
			procedurehistory.FieldUpdatedAt:                       {Type: field.TypeTime, Column: procedurehistory.FieldUpdatedAt},
			procedurehistory.FieldCreatedBy:                       {Type: field.TypeString, Column: procedurehistory.FieldCreatedBy},
			procedurehistory.FieldUpdatedBy:                       {Type: field.TypeString, Column: procedurehistory.FieldUpdatedBy},
			procedurehistory.FieldDeletedAt:                       {Type: field.TypeTime, Column: procedurehistory.FieldDeletedAt},
			procedurehistory.FieldDeletedBy:                       {Type: field.TypeString, Column: procedurehistory.FieldDeletedBy},
			procedurehistory.FieldDisplayID:                       {Type: field.TypeString, Column: procedurehistory.FieldDisplayID},
			procedurehistory.FieldTags:                            {Type: field.TypeJSON, Column: procedurehistory.FieldTags},
			procedurehistory.FieldRevision:                        {Type: field.TypeString, Column: procedurehistory.FieldRevision},
			procedurehistory.FieldOwnerID:                         {Type: field.TypeString, Column: procedurehistory.FieldOwnerID},
			procedurehistory.FieldName:                            {Type: field.TypeString, Column: procedurehistory.FieldName},
			procedurehistory.FieldStatus:                          {Type: field.TypeEnum, Column: procedurehistory.FieldStatus},
			procedurehistory.FieldProcedureType:                   {Type: field.TypeString, Column: procedurehistory.FieldProcedureType},
			procedurehistory.FieldDetails:                         {Type: field.TypeString, Column: procedurehistory.FieldDetails},
			procedurehistory.FieldApprovalRequired:                {Type: field.TypeBool, Column: procedurehistory.FieldApprovalRequired},
			procedurehistory.FieldReviewDue:                       {Type: field.TypeTime, Column: procedurehistory.FieldReviewDue},
			procedurehistory.FieldReviewFrequency:                 {Type: field.TypeEnum, Column: procedurehistory.FieldReviewFrequency},
			procedurehistory.FieldApproverID:                      {Type: field.TypeString, Column: procedurehistory.FieldApproverID},
			procedurehistory.FieldDelegateID:                      {Type: field.TypeString, Column: procedurehistory.FieldDelegateID},
			procedurehistory.FieldSummary:                         {Type: field.TypeString, Column: procedurehistory.FieldSummary},
			procedurehistory.FieldTagSuggestions:                  {Type: field.TypeJSON, Column: procedurehistory.FieldTagSuggestions},
			procedurehistory.FieldDismissedTagSuggestions:         {Type: field.TypeJSON, Column: procedurehistory.FieldDismissedTagSuggestions},
			procedurehistory.FieldControlSuggestions:              {Type: field.TypeJSON, Column: procedurehistory.FieldControlSuggestions},
			procedurehistory.FieldDismissedControlSuggestions:     {Type: field.TypeJSON, Column: procedurehistory.FieldDismissedControlSuggestions},
			procedurehistory.FieldImprovementSuggestions:          {Type: field.TypeJSON, Column: procedurehistory.FieldImprovementSuggestions},
			procedurehistory.FieldDismissedImprovementSuggestions: {Type: field.TypeJSON, Column: procedurehistory.FieldDismissedImprovementSuggestions},
		},
	}
	graph.Nodes[73] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   program.Table,
			Columns: program.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: program.FieldID,
			},
		},
		Type: "Program",
		Fields: map[string]*sqlgraph.FieldSpec{
			program.FieldCreatedAt:            {Type: field.TypeTime, Column: program.FieldCreatedAt},
			program.FieldUpdatedAt:            {Type: field.TypeTime, Column: program.FieldUpdatedAt},
			program.FieldCreatedBy:            {Type: field.TypeString, Column: program.FieldCreatedBy},
			program.FieldUpdatedBy:            {Type: field.TypeString, Column: program.FieldUpdatedBy},
			program.FieldDeletedAt:            {Type: field.TypeTime, Column: program.FieldDeletedAt},
			program.FieldDeletedBy:            {Type: field.TypeString, Column: program.FieldDeletedBy},
			program.FieldDisplayID:            {Type: field.TypeString, Column: program.FieldDisplayID},
			program.FieldTags:                 {Type: field.TypeJSON, Column: program.FieldTags},
			program.FieldOwnerID:              {Type: field.TypeString, Column: program.FieldOwnerID},
			program.FieldName:                 {Type: field.TypeString, Column: program.FieldName},
			program.FieldDescription:          {Type: field.TypeString, Column: program.FieldDescription},
			program.FieldStatus:               {Type: field.TypeEnum, Column: program.FieldStatus},
			program.FieldProgramType:          {Type: field.TypeEnum, Column: program.FieldProgramType},
			program.FieldFrameworkName:        {Type: field.TypeString, Column: program.FieldFrameworkName},
			program.FieldStartDate:            {Type: field.TypeTime, Column: program.FieldStartDate},
			program.FieldEndDate:              {Type: field.TypeTime, Column: program.FieldEndDate},
			program.FieldAuditorReady:         {Type: field.TypeBool, Column: program.FieldAuditorReady},
			program.FieldAuditorWriteComments: {Type: field.TypeBool, Column: program.FieldAuditorWriteComments},
			program.FieldAuditorReadComments:  {Type: field.TypeBool, Column: program.FieldAuditorReadComments},
			program.FieldAuditFirm:            {Type: field.TypeString, Column: program.FieldAuditFirm},
			program.FieldAuditor:              {Type: field.TypeString, Column: program.FieldAuditor},
			program.FieldAuditorEmail:         {Type: field.TypeString, Column: program.FieldAuditorEmail},
		},
	}
	graph.Nodes[74] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   programhistory.Table,
			Columns: programhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: programhistory.FieldID,
			},
		},
		Type: "ProgramHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			programhistory.FieldHistoryTime:          {Type: field.TypeTime, Column: programhistory.FieldHistoryTime},
			programhistory.FieldRef:                  {Type: field.TypeString, Column: programhistory.FieldRef},
			programhistory.FieldOperation:            {Type: field.TypeEnum, Column: programhistory.FieldOperation},
			programhistory.FieldCreatedAt:            {Type: field.TypeTime, Column: programhistory.FieldCreatedAt},
			programhistory.FieldUpdatedAt:            {Type: field.TypeTime, Column: programhistory.FieldUpdatedAt},
			programhistory.FieldCreatedBy:            {Type: field.TypeString, Column: programhistory.FieldCreatedBy},
			programhistory.FieldUpdatedBy:            {Type: field.TypeString, Column: programhistory.FieldUpdatedBy},
			programhistory.FieldDeletedAt:            {Type: field.TypeTime, Column: programhistory.FieldDeletedAt},
			programhistory.FieldDeletedBy:            {Type: field.TypeString, Column: programhistory.FieldDeletedBy},
			programhistory.FieldDisplayID:            {Type: field.TypeString, Column: programhistory.FieldDisplayID},
			programhistory.FieldTags:                 {Type: field.TypeJSON, Column: programhistory.FieldTags},
			programhistory.FieldOwnerID:              {Type: field.TypeString, Column: programhistory.FieldOwnerID},
			programhistory.FieldName:                 {Type: field.TypeString, Column: programhistory.FieldName},
			programhistory.FieldDescription:          {Type: field.TypeString, Column: programhistory.FieldDescription},
			programhistory.FieldStatus:               {Type: field.TypeEnum, Column: programhistory.FieldStatus},
			programhistory.FieldProgramType:          {Type: field.TypeEnum, Column: programhistory.FieldProgramType},
			programhistory.FieldFrameworkName:        {Type: field.TypeString, Column: programhistory.FieldFrameworkName},
			programhistory.FieldStartDate:            {Type: field.TypeTime, Column: programhistory.FieldStartDate},
			programhistory.FieldEndDate:              {Type: field.TypeTime, Column: programhistory.FieldEndDate},
			programhistory.FieldAuditorReady:         {Type: field.TypeBool, Column: programhistory.FieldAuditorReady},
			programhistory.FieldAuditorWriteComments: {Type: field.TypeBool, Column: programhistory.FieldAuditorWriteComments},
			programhistory.FieldAuditorReadComments:  {Type: field.TypeBool, Column: programhistory.FieldAuditorReadComments},
			programhistory.FieldAuditFirm:            {Type: field.TypeString, Column: programhistory.FieldAuditFirm},
			programhistory.FieldAuditor:              {Type: field.TypeString, Column: programhistory.FieldAuditor},
			programhistory.FieldAuditorEmail:         {Type: field.TypeString, Column: programhistory.FieldAuditorEmail},
		},
	}
	graph.Nodes[75] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   programmembership.Table,
			Columns: programmembership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: programmembership.FieldID,
			},
		},
		Type: "ProgramMembership",
		Fields: map[string]*sqlgraph.FieldSpec{
			programmembership.FieldCreatedAt: {Type: field.TypeTime, Column: programmembership.FieldCreatedAt},
			programmembership.FieldUpdatedAt: {Type: field.TypeTime, Column: programmembership.FieldUpdatedAt},
			programmembership.FieldCreatedBy: {Type: field.TypeString, Column: programmembership.FieldCreatedBy},
			programmembership.FieldUpdatedBy: {Type: field.TypeString, Column: programmembership.FieldUpdatedBy},
			programmembership.FieldRole:      {Type: field.TypeEnum, Column: programmembership.FieldRole},
			programmembership.FieldProgramID: {Type: field.TypeString, Column: programmembership.FieldProgramID},
			programmembership.FieldUserID:    {Type: field.TypeString, Column: programmembership.FieldUserID},
		},
	}
	graph.Nodes[76] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   programmembershiphistory.Table,
			Columns: programmembershiphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: programmembershiphistory.FieldID,
			},
		},
		Type: "ProgramMembershipHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			programmembershiphistory.FieldHistoryTime: {Type: field.TypeTime, Column: programmembershiphistory.FieldHistoryTime},
			programmembershiphistory.FieldRef:         {Type: field.TypeString, Column: programmembershiphistory.FieldRef},
			programmembershiphistory.FieldOperation:   {Type: field.TypeEnum, Column: programmembershiphistory.FieldOperation},
			programmembershiphistory.FieldCreatedAt:   {Type: field.TypeTime, Column: programmembershiphistory.FieldCreatedAt},
			programmembershiphistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: programmembershiphistory.FieldUpdatedAt},
			programmembershiphistory.FieldCreatedBy:   {Type: field.TypeString, Column: programmembershiphistory.FieldCreatedBy},
			programmembershiphistory.FieldUpdatedBy:   {Type: field.TypeString, Column: programmembershiphistory.FieldUpdatedBy},
			programmembershiphistory.FieldRole:        {Type: field.TypeEnum, Column: programmembershiphistory.FieldRole},
			programmembershiphistory.FieldProgramID:   {Type: field.TypeString, Column: programmembershiphistory.FieldProgramID},
			programmembershiphistory.FieldUserID:      {Type: field.TypeString, Column: programmembershiphistory.FieldUserID},
		},
	}
	graph.Nodes[77] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   risk.Table,
			Columns: risk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: risk.FieldID,
			},
		},
		Type: "Risk",
		Fields: map[string]*sqlgraph.FieldSpec{
			risk.FieldCreatedAt:     {Type: field.TypeTime, Column: risk.FieldCreatedAt},
			risk.FieldUpdatedAt:     {Type: field.TypeTime, Column: risk.FieldUpdatedAt},
			risk.FieldCreatedBy:     {Type: field.TypeString, Column: risk.FieldCreatedBy},
			risk.FieldUpdatedBy:     {Type: field.TypeString, Column: risk.FieldUpdatedBy},
			risk.FieldDeletedAt:     {Type: field.TypeTime, Column: risk.FieldDeletedAt},
			risk.FieldDeletedBy:     {Type: field.TypeString, Column: risk.FieldDeletedBy},
			risk.FieldDisplayID:     {Type: field.TypeString, Column: risk.FieldDisplayID},
			risk.FieldTags:          {Type: field.TypeJSON, Column: risk.FieldTags},
			risk.FieldOwnerID:       {Type: field.TypeString, Column: risk.FieldOwnerID},
			risk.FieldName:          {Type: field.TypeString, Column: risk.FieldName},
			risk.FieldStatus:        {Type: field.TypeEnum, Column: risk.FieldStatus},
			risk.FieldRiskType:      {Type: field.TypeString, Column: risk.FieldRiskType},
			risk.FieldCategory:      {Type: field.TypeString, Column: risk.FieldCategory},
			risk.FieldImpact:        {Type: field.TypeEnum, Column: risk.FieldImpact},
			risk.FieldLikelihood:    {Type: field.TypeEnum, Column: risk.FieldLikelihood},
			risk.FieldScore:         {Type: field.TypeInt, Column: risk.FieldScore},
			risk.FieldMitigation:    {Type: field.TypeString, Column: risk.FieldMitigation},
			risk.FieldDetails:       {Type: field.TypeString, Column: risk.FieldDetails},
			risk.FieldBusinessCosts: {Type: field.TypeString, Column: risk.FieldBusinessCosts},
			risk.FieldStakeholderID: {Type: field.TypeString, Column: risk.FieldStakeholderID},
			risk.FieldDelegateID:    {Type: field.TypeString, Column: risk.FieldDelegateID},
		},
	}
	graph.Nodes[78] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   riskhistory.Table,
			Columns: riskhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: riskhistory.FieldID,
			},
		},
		Type: "RiskHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			riskhistory.FieldHistoryTime:   {Type: field.TypeTime, Column: riskhistory.FieldHistoryTime},
			riskhistory.FieldRef:           {Type: field.TypeString, Column: riskhistory.FieldRef},
			riskhistory.FieldOperation:     {Type: field.TypeEnum, Column: riskhistory.FieldOperation},
			riskhistory.FieldCreatedAt:     {Type: field.TypeTime, Column: riskhistory.FieldCreatedAt},
			riskhistory.FieldUpdatedAt:     {Type: field.TypeTime, Column: riskhistory.FieldUpdatedAt},
			riskhistory.FieldCreatedBy:     {Type: field.TypeString, Column: riskhistory.FieldCreatedBy},
			riskhistory.FieldUpdatedBy:     {Type: field.TypeString, Column: riskhistory.FieldUpdatedBy},
			riskhistory.FieldDeletedAt:     {Type: field.TypeTime, Column: riskhistory.FieldDeletedAt},
			riskhistory.FieldDeletedBy:     {Type: field.TypeString, Column: riskhistory.FieldDeletedBy},
			riskhistory.FieldDisplayID:     {Type: field.TypeString, Column: riskhistory.FieldDisplayID},
			riskhistory.FieldTags:          {Type: field.TypeJSON, Column: riskhistory.FieldTags},
			riskhistory.FieldOwnerID:       {Type: field.TypeString, Column: riskhistory.FieldOwnerID},
			riskhistory.FieldName:          {Type: field.TypeString, Column: riskhistory.FieldName},
			riskhistory.FieldStatus:        {Type: field.TypeEnum, Column: riskhistory.FieldStatus},
			riskhistory.FieldRiskType:      {Type: field.TypeString, Column: riskhistory.FieldRiskType},
			riskhistory.FieldCategory:      {Type: field.TypeString, Column: riskhistory.FieldCategory},
			riskhistory.FieldImpact:        {Type: field.TypeEnum, Column: riskhistory.FieldImpact},
			riskhistory.FieldLikelihood:    {Type: field.TypeEnum, Column: riskhistory.FieldLikelihood},
			riskhistory.FieldScore:         {Type: field.TypeInt, Column: riskhistory.FieldScore},
			riskhistory.FieldMitigation:    {Type: field.TypeString, Column: riskhistory.FieldMitigation},
			riskhistory.FieldDetails:       {Type: field.TypeString, Column: riskhistory.FieldDetails},
			riskhistory.FieldBusinessCosts: {Type: field.TypeString, Column: riskhistory.FieldBusinessCosts},
			riskhistory.FieldStakeholderID: {Type: field.TypeString, Column: riskhistory.FieldStakeholderID},
			riskhistory.FieldDelegateID:    {Type: field.TypeString, Column: riskhistory.FieldDelegateID},
		},
	}
	graph.Nodes[79] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scan.Table,
			Columns: scan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: scan.FieldID,
			},
		},
		Type: "Scan",
		Fields: map[string]*sqlgraph.FieldSpec{
			scan.FieldCreatedAt: {Type: field.TypeTime, Column: scan.FieldCreatedAt},
			scan.FieldUpdatedAt: {Type: field.TypeTime, Column: scan.FieldUpdatedAt},
			scan.FieldCreatedBy: {Type: field.TypeString, Column: scan.FieldCreatedBy},
			scan.FieldUpdatedBy: {Type: field.TypeString, Column: scan.FieldUpdatedBy},
			scan.FieldDeletedAt: {Type: field.TypeTime, Column: scan.FieldDeletedAt},
			scan.FieldDeletedBy: {Type: field.TypeString, Column: scan.FieldDeletedBy},
			scan.FieldTags:      {Type: field.TypeJSON, Column: scan.FieldTags},
			scan.FieldOwnerID:   {Type: field.TypeString, Column: scan.FieldOwnerID},
			scan.FieldTarget:    {Type: field.TypeString, Column: scan.FieldTarget},
			scan.FieldScanType:  {Type: field.TypeEnum, Column: scan.FieldScanType},
			scan.FieldMetadata:  {Type: field.TypeJSON, Column: scan.FieldMetadata},
			scan.FieldStatus:    {Type: field.TypeEnum, Column: scan.FieldStatus},
		},
	}
	graph.Nodes[80] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scanhistory.Table,
			Columns: scanhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: scanhistory.FieldID,
			},
		},
		Type: "ScanHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			scanhistory.FieldHistoryTime: {Type: field.TypeTime, Column: scanhistory.FieldHistoryTime},
			scanhistory.FieldRef:         {Type: field.TypeString, Column: scanhistory.FieldRef},
			scanhistory.FieldOperation:   {Type: field.TypeEnum, Column: scanhistory.FieldOperation},
			scanhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: scanhistory.FieldCreatedAt},
			scanhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: scanhistory.FieldUpdatedAt},
			scanhistory.FieldCreatedBy:   {Type: field.TypeString, Column: scanhistory.FieldCreatedBy},
			scanhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: scanhistory.FieldUpdatedBy},
			scanhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: scanhistory.FieldDeletedAt},
			scanhistory.FieldDeletedBy:   {Type: field.TypeString, Column: scanhistory.FieldDeletedBy},
			scanhistory.FieldTags:        {Type: field.TypeJSON, Column: scanhistory.FieldTags},
			scanhistory.FieldOwnerID:     {Type: field.TypeString, Column: scanhistory.FieldOwnerID},
			scanhistory.FieldTarget:      {Type: field.TypeString, Column: scanhistory.FieldTarget},
			scanhistory.FieldScanType:    {Type: field.TypeEnum, Column: scanhistory.FieldScanType},
			scanhistory.FieldMetadata:    {Type: field.TypeJSON, Column: scanhistory.FieldMetadata},
			scanhistory.FieldStatus:      {Type: field.TypeEnum, Column: scanhistory.FieldStatus},
		},
	}
	graph.Nodes[81] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scheduledjob.Table,
			Columns: scheduledjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: scheduledjob.FieldID,
			},
		},
		Type: "ScheduledJob",
		Fields: map[string]*sqlgraph.FieldSpec{
			scheduledjob.FieldCreatedAt:     {Type: field.TypeTime, Column: scheduledjob.FieldCreatedAt},
			scheduledjob.FieldUpdatedAt:     {Type: field.TypeTime, Column: scheduledjob.FieldUpdatedAt},
			scheduledjob.FieldCreatedBy:     {Type: field.TypeString, Column: scheduledjob.FieldCreatedBy},
			scheduledjob.FieldUpdatedBy:     {Type: field.TypeString, Column: scheduledjob.FieldUpdatedBy},
			scheduledjob.FieldDeletedAt:     {Type: field.TypeTime, Column: scheduledjob.FieldDeletedAt},
			scheduledjob.FieldDeletedBy:     {Type: field.TypeString, Column: scheduledjob.FieldDeletedBy},
			scheduledjob.FieldDisplayID:     {Type: field.TypeString, Column: scheduledjob.FieldDisplayID},
			scheduledjob.FieldOwnerID:       {Type: field.TypeString, Column: scheduledjob.FieldOwnerID},
			scheduledjob.FieldJobID:         {Type: field.TypeString, Column: scheduledjob.FieldJobID},
			scheduledjob.FieldActive:        {Type: field.TypeBool, Column: scheduledjob.FieldActive},
			scheduledjob.FieldConfiguration: {Type: field.TypeJSON, Column: scheduledjob.FieldConfiguration},
			scheduledjob.FieldCron:          {Type: field.TypeString, Column: scheduledjob.FieldCron},
			scheduledjob.FieldJobRunnerID:   {Type: field.TypeString, Column: scheduledjob.FieldJobRunnerID},
		},
	}
	graph.Nodes[82] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scheduledjobhistory.Table,
			Columns: scheduledjobhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: scheduledjobhistory.FieldID,
			},
		},
		Type: "ScheduledJobHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			scheduledjobhistory.FieldHistoryTime:   {Type: field.TypeTime, Column: scheduledjobhistory.FieldHistoryTime},
			scheduledjobhistory.FieldRef:           {Type: field.TypeString, Column: scheduledjobhistory.FieldRef},
			scheduledjobhistory.FieldOperation:     {Type: field.TypeEnum, Column: scheduledjobhistory.FieldOperation},
			scheduledjobhistory.FieldCreatedAt:     {Type: field.TypeTime, Column: scheduledjobhistory.FieldCreatedAt},
			scheduledjobhistory.FieldUpdatedAt:     {Type: field.TypeTime, Column: scheduledjobhistory.FieldUpdatedAt},
			scheduledjobhistory.FieldCreatedBy:     {Type: field.TypeString, Column: scheduledjobhistory.FieldCreatedBy},
			scheduledjobhistory.FieldUpdatedBy:     {Type: field.TypeString, Column: scheduledjobhistory.FieldUpdatedBy},
			scheduledjobhistory.FieldDeletedAt:     {Type: field.TypeTime, Column: scheduledjobhistory.FieldDeletedAt},
			scheduledjobhistory.FieldDeletedBy:     {Type: field.TypeString, Column: scheduledjobhistory.FieldDeletedBy},
			scheduledjobhistory.FieldDisplayID:     {Type: field.TypeString, Column: scheduledjobhistory.FieldDisplayID},
			scheduledjobhistory.FieldOwnerID:       {Type: field.TypeString, Column: scheduledjobhistory.FieldOwnerID},
			scheduledjobhistory.FieldJobID:         {Type: field.TypeString, Column: scheduledjobhistory.FieldJobID},
			scheduledjobhistory.FieldActive:        {Type: field.TypeBool, Column: scheduledjobhistory.FieldActive},
			scheduledjobhistory.FieldConfiguration: {Type: field.TypeJSON, Column: scheduledjobhistory.FieldConfiguration},
			scheduledjobhistory.FieldCron:          {Type: field.TypeString, Column: scheduledjobhistory.FieldCron},
			scheduledjobhistory.FieldJobRunnerID:   {Type: field.TypeString, Column: scheduledjobhistory.FieldJobRunnerID},
		},
	}
	graph.Nodes[83] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scheduledjobrun.Table,
			Columns: scheduledjobrun.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: scheduledjobrun.FieldID,
			},
		},
		Type: "ScheduledJobRun",
		Fields: map[string]*sqlgraph.FieldSpec{
			scheduledjobrun.FieldCreatedAt:             {Type: field.TypeTime, Column: scheduledjobrun.FieldCreatedAt},
			scheduledjobrun.FieldUpdatedAt:             {Type: field.TypeTime, Column: scheduledjobrun.FieldUpdatedAt},
			scheduledjobrun.FieldCreatedBy:             {Type: field.TypeString, Column: scheduledjobrun.FieldCreatedBy},
			scheduledjobrun.FieldUpdatedBy:             {Type: field.TypeString, Column: scheduledjobrun.FieldUpdatedBy},
			scheduledjobrun.FieldDeletedAt:             {Type: field.TypeTime, Column: scheduledjobrun.FieldDeletedAt},
			scheduledjobrun.FieldDeletedBy:             {Type: field.TypeString, Column: scheduledjobrun.FieldDeletedBy},
			scheduledjobrun.FieldOwnerID:               {Type: field.TypeString, Column: scheduledjobrun.FieldOwnerID},
			scheduledjobrun.FieldJobRunnerID:           {Type: field.TypeString, Column: scheduledjobrun.FieldJobRunnerID},
			scheduledjobrun.FieldStatus:                {Type: field.TypeEnum, Column: scheduledjobrun.FieldStatus},
			scheduledjobrun.FieldScheduledJobID:        {Type: field.TypeString, Column: scheduledjobrun.FieldScheduledJobID},
			scheduledjobrun.FieldExpectedExecutionTime: {Type: field.TypeTime, Column: scheduledjobrun.FieldExpectedExecutionTime},
			scheduledjobrun.FieldScript:                {Type: field.TypeString, Column: scheduledjobrun.FieldScript},
		},
	}
	graph.Nodes[84] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   standard.Table,
			Columns: standard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: standard.FieldID,
			},
		},
		Type: "Standard",
		Fields: map[string]*sqlgraph.FieldSpec{
			standard.FieldCreatedAt:            {Type: field.TypeTime, Column: standard.FieldCreatedAt},
			standard.FieldUpdatedAt:            {Type: field.TypeTime, Column: standard.FieldUpdatedAt},
			standard.FieldCreatedBy:            {Type: field.TypeString, Column: standard.FieldCreatedBy},
			standard.FieldUpdatedBy:            {Type: field.TypeString, Column: standard.FieldUpdatedBy},
			standard.FieldDeletedAt:            {Type: field.TypeTime, Column: standard.FieldDeletedAt},
			standard.FieldDeletedBy:            {Type: field.TypeString, Column: standard.FieldDeletedBy},
			standard.FieldTags:                 {Type: field.TypeJSON, Column: standard.FieldTags},
			standard.FieldRevision:             {Type: field.TypeString, Column: standard.FieldRevision},
			standard.FieldOwnerID:              {Type: field.TypeString, Column: standard.FieldOwnerID},
			standard.FieldSystemOwned:          {Type: field.TypeBool, Column: standard.FieldSystemOwned},
			standard.FieldName:                 {Type: field.TypeString, Column: standard.FieldName},
			standard.FieldShortName:            {Type: field.TypeString, Column: standard.FieldShortName},
			standard.FieldFramework:            {Type: field.TypeString, Column: standard.FieldFramework},
			standard.FieldDescription:          {Type: field.TypeString, Column: standard.FieldDescription},
			standard.FieldGoverningBodyLogoURL: {Type: field.TypeString, Column: standard.FieldGoverningBodyLogoURL},
			standard.FieldGoverningBody:        {Type: field.TypeString, Column: standard.FieldGoverningBody},
			standard.FieldDomains:              {Type: field.TypeJSON, Column: standard.FieldDomains},
			standard.FieldLink:                 {Type: field.TypeString, Column: standard.FieldLink},
			standard.FieldStatus:               {Type: field.TypeEnum, Column: standard.FieldStatus},
			standard.FieldIsPublic:             {Type: field.TypeBool, Column: standard.FieldIsPublic},
			standard.FieldFreeToUse:            {Type: field.TypeBool, Column: standard.FieldFreeToUse},
			standard.FieldStandardType:         {Type: field.TypeString, Column: standard.FieldStandardType},
			standard.FieldVersion:              {Type: field.TypeString, Column: standard.FieldVersion},
		},
	}
	graph.Nodes[85] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   standardhistory.Table,
			Columns: standardhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: standardhistory.FieldID,
			},
		},
		Type: "StandardHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			standardhistory.FieldHistoryTime:          {Type: field.TypeTime, Column: standardhistory.FieldHistoryTime},
			standardhistory.FieldRef:                  {Type: field.TypeString, Column: standardhistory.FieldRef},
			standardhistory.FieldOperation:            {Type: field.TypeEnum, Column: standardhistory.FieldOperation},
			standardhistory.FieldCreatedAt:            {Type: field.TypeTime, Column: standardhistory.FieldCreatedAt},
			standardhistory.FieldUpdatedAt:            {Type: field.TypeTime, Column: standardhistory.FieldUpdatedAt},
			standardhistory.FieldCreatedBy:            {Type: field.TypeString, Column: standardhistory.FieldCreatedBy},
			standardhistory.FieldUpdatedBy:            {Type: field.TypeString, Column: standardhistory.FieldUpdatedBy},
			standardhistory.FieldDeletedAt:            {Type: field.TypeTime, Column: standardhistory.FieldDeletedAt},
			standardhistory.FieldDeletedBy:            {Type: field.TypeString, Column: standardhistory.FieldDeletedBy},
			standardhistory.FieldTags:                 {Type: field.TypeJSON, Column: standardhistory.FieldTags},
			standardhistory.FieldRevision:             {Type: field.TypeString, Column: standardhistory.FieldRevision},
			standardhistory.FieldOwnerID:              {Type: field.TypeString, Column: standardhistory.FieldOwnerID},
			standardhistory.FieldSystemOwned:          {Type: field.TypeBool, Column: standardhistory.FieldSystemOwned},
			standardhistory.FieldName:                 {Type: field.TypeString, Column: standardhistory.FieldName},
			standardhistory.FieldShortName:            {Type: field.TypeString, Column: standardhistory.FieldShortName},
			standardhistory.FieldFramework:            {Type: field.TypeString, Column: standardhistory.FieldFramework},
			standardhistory.FieldDescription:          {Type: field.TypeString, Column: standardhistory.FieldDescription},
			standardhistory.FieldGoverningBodyLogoURL: {Type: field.TypeString, Column: standardhistory.FieldGoverningBodyLogoURL},
			standardhistory.FieldGoverningBody:        {Type: field.TypeString, Column: standardhistory.FieldGoverningBody},
			standardhistory.FieldDomains:              {Type: field.TypeJSON, Column: standardhistory.FieldDomains},
			standardhistory.FieldLink:                 {Type: field.TypeString, Column: standardhistory.FieldLink},
			standardhistory.FieldStatus:               {Type: field.TypeEnum, Column: standardhistory.FieldStatus},
			standardhistory.FieldIsPublic:             {Type: field.TypeBool, Column: standardhistory.FieldIsPublic},
			standardhistory.FieldFreeToUse:            {Type: field.TypeBool, Column: standardhistory.FieldFreeToUse},
			standardhistory.FieldStandardType:         {Type: field.TypeString, Column: standardhistory.FieldStandardType},
			standardhistory.FieldVersion:              {Type: field.TypeString, Column: standardhistory.FieldVersion},
		},
	}
	graph.Nodes[86] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subcontrol.Table,
			Columns: subcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: subcontrol.FieldID,
			},
		},
		Type: "Subcontrol",
		Fields: map[string]*sqlgraph.FieldSpec{
			subcontrol.FieldCreatedAt:              {Type: field.TypeTime, Column: subcontrol.FieldCreatedAt},
			subcontrol.FieldUpdatedAt:              {Type: field.TypeTime, Column: subcontrol.FieldUpdatedAt},
			subcontrol.FieldCreatedBy:              {Type: field.TypeString, Column: subcontrol.FieldCreatedBy},
			subcontrol.FieldUpdatedBy:              {Type: field.TypeString, Column: subcontrol.FieldUpdatedBy},
			subcontrol.FieldDeletedAt:              {Type: field.TypeTime, Column: subcontrol.FieldDeletedAt},
			subcontrol.FieldDeletedBy:              {Type: field.TypeString, Column: subcontrol.FieldDeletedBy},
			subcontrol.FieldDisplayID:              {Type: field.TypeString, Column: subcontrol.FieldDisplayID},
			subcontrol.FieldTags:                   {Type: field.TypeJSON, Column: subcontrol.FieldTags},
			subcontrol.FieldDescription:            {Type: field.TypeString, Column: subcontrol.FieldDescription},
			subcontrol.FieldReferenceID:            {Type: field.TypeString, Column: subcontrol.FieldReferenceID},
			subcontrol.FieldAuditorReferenceID:     {Type: field.TypeString, Column: subcontrol.FieldAuditorReferenceID},
			subcontrol.FieldStatus:                 {Type: field.TypeEnum, Column: subcontrol.FieldStatus},
			subcontrol.FieldSource:                 {Type: field.TypeEnum, Column: subcontrol.FieldSource},
			subcontrol.FieldReferenceFramework:     {Type: field.TypeString, Column: subcontrol.FieldReferenceFramework},
			subcontrol.FieldControlType:            {Type: field.TypeEnum, Column: subcontrol.FieldControlType},
			subcontrol.FieldCategory:               {Type: field.TypeString, Column: subcontrol.FieldCategory},
			subcontrol.FieldCategoryID:             {Type: field.TypeString, Column: subcontrol.FieldCategoryID},
			subcontrol.FieldSubcategory:            {Type: field.TypeString, Column: subcontrol.FieldSubcategory},
			subcontrol.FieldMappedCategories:       {Type: field.TypeJSON, Column: subcontrol.FieldMappedCategories},
			subcontrol.FieldAssessmentObjectives:   {Type: field.TypeJSON, Column: subcontrol.FieldAssessmentObjectives},
			subcontrol.FieldAssessmentMethods:      {Type: field.TypeJSON, Column: subcontrol.FieldAssessmentMethods},
			subcontrol.FieldControlQuestions:       {Type: field.TypeJSON, Column: subcontrol.FieldControlQuestions},
			subcontrol.FieldImplementationGuidance: {Type: field.TypeJSON, Column: subcontrol.FieldImplementationGuidance},
			subcontrol.FieldExampleEvidence:        {Type: field.TypeJSON, Column: subcontrol.FieldExampleEvidence},
			subcontrol.FieldReferences:             {Type: field.TypeJSON, Column: subcontrol.FieldReferences},
			subcontrol.FieldControlOwnerID:         {Type: field.TypeString, Column: subcontrol.FieldControlOwnerID},
			subcontrol.FieldDelegateID:             {Type: field.TypeString, Column: subcontrol.FieldDelegateID},
			subcontrol.FieldOwnerID:                {Type: field.TypeString, Column: subcontrol.FieldOwnerID},
			subcontrol.FieldRefCode:                {Type: field.TypeString, Column: subcontrol.FieldRefCode},
			subcontrol.FieldControlID:              {Type: field.TypeString, Column: subcontrol.FieldControlID},
		},
	}
	graph.Nodes[87] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subcontrolhistory.Table,
			Columns: subcontrolhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: subcontrolhistory.FieldID,
			},
		},
		Type: "SubcontrolHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			subcontrolhistory.FieldHistoryTime:            {Type: field.TypeTime, Column: subcontrolhistory.FieldHistoryTime},
			subcontrolhistory.FieldRef:                    {Type: field.TypeString, Column: subcontrolhistory.FieldRef},
			subcontrolhistory.FieldOperation:              {Type: field.TypeEnum, Column: subcontrolhistory.FieldOperation},
			subcontrolhistory.FieldCreatedAt:              {Type: field.TypeTime, Column: subcontrolhistory.FieldCreatedAt},
			subcontrolhistory.FieldUpdatedAt:              {Type: field.TypeTime, Column: subcontrolhistory.FieldUpdatedAt},
			subcontrolhistory.FieldCreatedBy:              {Type: field.TypeString, Column: subcontrolhistory.FieldCreatedBy},
			subcontrolhistory.FieldUpdatedBy:              {Type: field.TypeString, Column: subcontrolhistory.FieldUpdatedBy},
			subcontrolhistory.FieldDeletedAt:              {Type: field.TypeTime, Column: subcontrolhistory.FieldDeletedAt},
			subcontrolhistory.FieldDeletedBy:              {Type: field.TypeString, Column: subcontrolhistory.FieldDeletedBy},
			subcontrolhistory.FieldDisplayID:              {Type: field.TypeString, Column: subcontrolhistory.FieldDisplayID},
			subcontrolhistory.FieldTags:                   {Type: field.TypeJSON, Column: subcontrolhistory.FieldTags},
			subcontrolhistory.FieldDescription:            {Type: field.TypeString, Column: subcontrolhistory.FieldDescription},
			subcontrolhistory.FieldReferenceID:            {Type: field.TypeString, Column: subcontrolhistory.FieldReferenceID},
			subcontrolhistory.FieldAuditorReferenceID:     {Type: field.TypeString, Column: subcontrolhistory.FieldAuditorReferenceID},
			subcontrolhistory.FieldStatus:                 {Type: field.TypeEnum, Column: subcontrolhistory.FieldStatus},
			subcontrolhistory.FieldSource:                 {Type: field.TypeEnum, Column: subcontrolhistory.FieldSource},
			subcontrolhistory.FieldReferenceFramework:     {Type: field.TypeString, Column: subcontrolhistory.FieldReferenceFramework},
			subcontrolhistory.FieldControlType:            {Type: field.TypeEnum, Column: subcontrolhistory.FieldControlType},
			subcontrolhistory.FieldCategory:               {Type: field.TypeString, Column: subcontrolhistory.FieldCategory},
			subcontrolhistory.FieldCategoryID:             {Type: field.TypeString, Column: subcontrolhistory.FieldCategoryID},
			subcontrolhistory.FieldSubcategory:            {Type: field.TypeString, Column: subcontrolhistory.FieldSubcategory},
			subcontrolhistory.FieldMappedCategories:       {Type: field.TypeJSON, Column: subcontrolhistory.FieldMappedCategories},
			subcontrolhistory.FieldAssessmentObjectives:   {Type: field.TypeJSON, Column: subcontrolhistory.FieldAssessmentObjectives},
			subcontrolhistory.FieldAssessmentMethods:      {Type: field.TypeJSON, Column: subcontrolhistory.FieldAssessmentMethods},
			subcontrolhistory.FieldControlQuestions:       {Type: field.TypeJSON, Column: subcontrolhistory.FieldControlQuestions},
			subcontrolhistory.FieldImplementationGuidance: {Type: field.TypeJSON, Column: subcontrolhistory.FieldImplementationGuidance},
			subcontrolhistory.FieldExampleEvidence:        {Type: field.TypeJSON, Column: subcontrolhistory.FieldExampleEvidence},
			subcontrolhistory.FieldReferences:             {Type: field.TypeJSON, Column: subcontrolhistory.FieldReferences},
			subcontrolhistory.FieldControlOwnerID:         {Type: field.TypeString, Column: subcontrolhistory.FieldControlOwnerID},
			subcontrolhistory.FieldDelegateID:             {Type: field.TypeString, Column: subcontrolhistory.FieldDelegateID},
			subcontrolhistory.FieldOwnerID:                {Type: field.TypeString, Column: subcontrolhistory.FieldOwnerID},
			subcontrolhistory.FieldRefCode:                {Type: field.TypeString, Column: subcontrolhistory.FieldRefCode},
			subcontrolhistory.FieldControlID:              {Type: field.TypeString, Column: subcontrolhistory.FieldControlID},
		},
	}
	graph.Nodes[88] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subprocessor.Table,
			Columns: subprocessor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: subprocessor.FieldID,
			},
		},
		Type: "Subprocessor",
		Fields: map[string]*sqlgraph.FieldSpec{
			subprocessor.FieldCreatedAt:       {Type: field.TypeTime, Column: subprocessor.FieldCreatedAt},
			subprocessor.FieldUpdatedAt:       {Type: field.TypeTime, Column: subprocessor.FieldUpdatedAt},
			subprocessor.FieldCreatedBy:       {Type: field.TypeString, Column: subprocessor.FieldCreatedBy},
			subprocessor.FieldUpdatedBy:       {Type: field.TypeString, Column: subprocessor.FieldUpdatedBy},
			subprocessor.FieldDeletedAt:       {Type: field.TypeTime, Column: subprocessor.FieldDeletedAt},
			subprocessor.FieldDeletedBy:       {Type: field.TypeString, Column: subprocessor.FieldDeletedBy},
			subprocessor.FieldTags:            {Type: field.TypeJSON, Column: subprocessor.FieldTags},
			subprocessor.FieldOwnerID:         {Type: field.TypeString, Column: subprocessor.FieldOwnerID},
			subprocessor.FieldSystemOwned:     {Type: field.TypeBool, Column: subprocessor.FieldSystemOwned},
			subprocessor.FieldName:            {Type: field.TypeString, Column: subprocessor.FieldName},
			subprocessor.FieldDescription:     {Type: field.TypeString, Column: subprocessor.FieldDescription},
			subprocessor.FieldLogoRemoteURL:   {Type: field.TypeString, Column: subprocessor.FieldLogoRemoteURL},
			subprocessor.FieldLogoLocalFileID: {Type: field.TypeString, Column: subprocessor.FieldLogoLocalFileID},
		},
	}
	graph.Nodes[89] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subprocessorhistory.Table,
			Columns: subprocessorhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: subprocessorhistory.FieldID,
			},
		},
		Type: "SubprocessorHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			subprocessorhistory.FieldHistoryTime:     {Type: field.TypeTime, Column: subprocessorhistory.FieldHistoryTime},
			subprocessorhistory.FieldRef:             {Type: field.TypeString, Column: subprocessorhistory.FieldRef},
			subprocessorhistory.FieldOperation:       {Type: field.TypeEnum, Column: subprocessorhistory.FieldOperation},
			subprocessorhistory.FieldCreatedAt:       {Type: field.TypeTime, Column: subprocessorhistory.FieldCreatedAt},
			subprocessorhistory.FieldUpdatedAt:       {Type: field.TypeTime, Column: subprocessorhistory.FieldUpdatedAt},
			subprocessorhistory.FieldCreatedBy:       {Type: field.TypeString, Column: subprocessorhistory.FieldCreatedBy},
			subprocessorhistory.FieldUpdatedBy:       {Type: field.TypeString, Column: subprocessorhistory.FieldUpdatedBy},
			subprocessorhistory.FieldDeletedAt:       {Type: field.TypeTime, Column: subprocessorhistory.FieldDeletedAt},
			subprocessorhistory.FieldDeletedBy:       {Type: field.TypeString, Column: subprocessorhistory.FieldDeletedBy},
			subprocessorhistory.FieldTags:            {Type: field.TypeJSON, Column: subprocessorhistory.FieldTags},
			subprocessorhistory.FieldOwnerID:         {Type: field.TypeString, Column: subprocessorhistory.FieldOwnerID},
			subprocessorhistory.FieldSystemOwned:     {Type: field.TypeBool, Column: subprocessorhistory.FieldSystemOwned},
			subprocessorhistory.FieldName:            {Type: field.TypeString, Column: subprocessorhistory.FieldName},
			subprocessorhistory.FieldDescription:     {Type: field.TypeString, Column: subprocessorhistory.FieldDescription},
			subprocessorhistory.FieldLogoRemoteURL:   {Type: field.TypeString, Column: subprocessorhistory.FieldLogoRemoteURL},
			subprocessorhistory.FieldLogoLocalFileID: {Type: field.TypeString, Column: subprocessorhistory.FieldLogoLocalFileID},
		},
	}
	graph.Nodes[90] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscriber.Table,
			Columns: subscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: subscriber.FieldID,
			},
		},
		Type: "Subscriber",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscriber.FieldCreatedAt:     {Type: field.TypeTime, Column: subscriber.FieldCreatedAt},
			subscriber.FieldUpdatedAt:     {Type: field.TypeTime, Column: subscriber.FieldUpdatedAt},
			subscriber.FieldCreatedBy:     {Type: field.TypeString, Column: subscriber.FieldCreatedBy},
			subscriber.FieldUpdatedBy:     {Type: field.TypeString, Column: subscriber.FieldUpdatedBy},
			subscriber.FieldDeletedAt:     {Type: field.TypeTime, Column: subscriber.FieldDeletedAt},
			subscriber.FieldDeletedBy:     {Type: field.TypeString, Column: subscriber.FieldDeletedBy},
			subscriber.FieldTags:          {Type: field.TypeJSON, Column: subscriber.FieldTags},
			subscriber.FieldOwnerID:       {Type: field.TypeString, Column: subscriber.FieldOwnerID},
			subscriber.FieldEmail:         {Type: field.TypeString, Column: subscriber.FieldEmail},
			subscriber.FieldPhoneNumber:   {Type: field.TypeString, Column: subscriber.FieldPhoneNumber},
			subscriber.FieldVerifiedEmail: {Type: field.TypeBool, Column: subscriber.FieldVerifiedEmail},
			subscriber.FieldVerifiedPhone: {Type: field.TypeBool, Column: subscriber.FieldVerifiedPhone},
			subscriber.FieldActive:        {Type: field.TypeBool, Column: subscriber.FieldActive},
			subscriber.FieldToken:         {Type: field.TypeString, Column: subscriber.FieldToken},
			subscriber.FieldTTL:           {Type: field.TypeTime, Column: subscriber.FieldTTL},
			subscriber.FieldSecret:        {Type: field.TypeBytes, Column: subscriber.FieldSecret},
			subscriber.FieldUnsubscribed:  {Type: field.TypeBool, Column: subscriber.FieldUnsubscribed},
			subscriber.FieldSendAttempts:  {Type: field.TypeInt, Column: subscriber.FieldSendAttempts},
		},
	}
	graph.Nodes[91] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tfasetting.Table,
			Columns: tfasetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tfasetting.FieldID,
			},
		},
		Type: "TFASetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			tfasetting.FieldCreatedAt:       {Type: field.TypeTime, Column: tfasetting.FieldCreatedAt},
			tfasetting.FieldUpdatedAt:       {Type: field.TypeTime, Column: tfasetting.FieldUpdatedAt},
			tfasetting.FieldCreatedBy:       {Type: field.TypeString, Column: tfasetting.FieldCreatedBy},
			tfasetting.FieldUpdatedBy:       {Type: field.TypeString, Column: tfasetting.FieldUpdatedBy},
			tfasetting.FieldDeletedAt:       {Type: field.TypeTime, Column: tfasetting.FieldDeletedAt},
			tfasetting.FieldDeletedBy:       {Type: field.TypeString, Column: tfasetting.FieldDeletedBy},
			tfasetting.FieldOwnerID:         {Type: field.TypeString, Column: tfasetting.FieldOwnerID},
			tfasetting.FieldTfaSecret:       {Type: field.TypeString, Column: tfasetting.FieldTfaSecret},
			tfasetting.FieldVerified:        {Type: field.TypeBool, Column: tfasetting.FieldVerified},
			tfasetting.FieldRecoveryCodes:   {Type: field.TypeJSON, Column: tfasetting.FieldRecoveryCodes},
			tfasetting.FieldPhoneOtpAllowed: {Type: field.TypeBool, Column: tfasetting.FieldPhoneOtpAllowed},
			tfasetting.FieldEmailOtpAllowed: {Type: field.TypeBool, Column: tfasetting.FieldEmailOtpAllowed},
			tfasetting.FieldTotpAllowed:     {Type: field.TypeBool, Column: tfasetting.FieldTotpAllowed},
		},
	}
	graph.Nodes[92] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: task.FieldID,
			},
		},
		Type: "Task",
		Fields: map[string]*sqlgraph.FieldSpec{
			task.FieldCreatedAt:  {Type: field.TypeTime, Column: task.FieldCreatedAt},
			task.FieldUpdatedAt:  {Type: field.TypeTime, Column: task.FieldUpdatedAt},
			task.FieldCreatedBy:  {Type: field.TypeString, Column: task.FieldCreatedBy},
			task.FieldUpdatedBy:  {Type: field.TypeString, Column: task.FieldUpdatedBy},
			task.FieldDeletedAt:  {Type: field.TypeTime, Column: task.FieldDeletedAt},
			task.FieldDeletedBy:  {Type: field.TypeString, Column: task.FieldDeletedBy},
			task.FieldDisplayID:  {Type: field.TypeString, Column: task.FieldDisplayID},
			task.FieldTags:       {Type: field.TypeJSON, Column: task.FieldTags},
			task.FieldOwnerID:    {Type: field.TypeString, Column: task.FieldOwnerID},
			task.FieldTitle:      {Type: field.TypeString, Column: task.FieldTitle},
			task.FieldDetails:    {Type: field.TypeString, Column: task.FieldDetails},
			task.FieldStatus:     {Type: field.TypeEnum, Column: task.FieldStatus},
			task.FieldCategory:   {Type: field.TypeString, Column: task.FieldCategory},
			task.FieldDue:        {Type: field.TypeTime, Column: task.FieldDue},
			task.FieldCompleted:  {Type: field.TypeTime, Column: task.FieldCompleted},
			task.FieldAssigneeID: {Type: field.TypeString, Column: task.FieldAssigneeID},
			task.FieldAssignerID: {Type: field.TypeString, Column: task.FieldAssignerID},
		},
	}
	graph.Nodes[93] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   taskhistory.Table,
			Columns: taskhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskhistory.FieldID,
			},
		},
		Type: "TaskHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			taskhistory.FieldHistoryTime: {Type: field.TypeTime, Column: taskhistory.FieldHistoryTime},
			taskhistory.FieldRef:         {Type: field.TypeString, Column: taskhistory.FieldRef},
			taskhistory.FieldOperation:   {Type: field.TypeEnum, Column: taskhistory.FieldOperation},
			taskhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: taskhistory.FieldCreatedAt},
			taskhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: taskhistory.FieldUpdatedAt},
			taskhistory.FieldCreatedBy:   {Type: field.TypeString, Column: taskhistory.FieldCreatedBy},
			taskhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: taskhistory.FieldUpdatedBy},
			taskhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: taskhistory.FieldDeletedAt},
			taskhistory.FieldDeletedBy:   {Type: field.TypeString, Column: taskhistory.FieldDeletedBy},
			taskhistory.FieldDisplayID:   {Type: field.TypeString, Column: taskhistory.FieldDisplayID},
			taskhistory.FieldTags:        {Type: field.TypeJSON, Column: taskhistory.FieldTags},
			taskhistory.FieldOwnerID:     {Type: field.TypeString, Column: taskhistory.FieldOwnerID},
			taskhistory.FieldTitle:       {Type: field.TypeString, Column: taskhistory.FieldTitle},
			taskhistory.FieldDetails:     {Type: field.TypeString, Column: taskhistory.FieldDetails},
			taskhistory.FieldStatus:      {Type: field.TypeEnum, Column: taskhistory.FieldStatus},
			taskhistory.FieldCategory:    {Type: field.TypeString, Column: taskhistory.FieldCategory},
			taskhistory.FieldDue:         {Type: field.TypeTime, Column: taskhistory.FieldDue},
			taskhistory.FieldCompleted:   {Type: field.TypeTime, Column: taskhistory.FieldCompleted},
			taskhistory.FieldAssigneeID:  {Type: field.TypeString, Column: taskhistory.FieldAssigneeID},
			taskhistory.FieldAssignerID:  {Type: field.TypeString, Column: taskhistory.FieldAssignerID},
		},
	}
	graph.Nodes[94] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   template.Table,
			Columns: template.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: template.FieldID,
			},
		},
		Type: "Template",
		Fields: map[string]*sqlgraph.FieldSpec{
			template.FieldCreatedAt:    {Type: field.TypeTime, Column: template.FieldCreatedAt},
			template.FieldUpdatedAt:    {Type: field.TypeTime, Column: template.FieldUpdatedAt},
			template.FieldCreatedBy:    {Type: field.TypeString, Column: template.FieldCreatedBy},
			template.FieldUpdatedBy:    {Type: field.TypeString, Column: template.FieldUpdatedBy},
			template.FieldDeletedAt:    {Type: field.TypeTime, Column: template.FieldDeletedAt},
			template.FieldDeletedBy:    {Type: field.TypeString, Column: template.FieldDeletedBy},
			template.FieldTags:         {Type: field.TypeJSON, Column: template.FieldTags},
			template.FieldOwnerID:      {Type: field.TypeString, Column: template.FieldOwnerID},
			template.FieldName:         {Type: field.TypeString, Column: template.FieldName},
			template.FieldTemplateType: {Type: field.TypeEnum, Column: template.FieldTemplateType},
			template.FieldDescription:  {Type: field.TypeString, Column: template.FieldDescription},
			template.FieldJsonconfig:   {Type: field.TypeJSON, Column: template.FieldJsonconfig},
			template.FieldUischema:     {Type: field.TypeJSON, Column: template.FieldUischema},
		},
	}
	graph.Nodes[95] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   templatehistory.Table,
			Columns: templatehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: templatehistory.FieldID,
			},
		},
		Type: "TemplateHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			templatehistory.FieldHistoryTime:  {Type: field.TypeTime, Column: templatehistory.FieldHistoryTime},
			templatehistory.FieldRef:          {Type: field.TypeString, Column: templatehistory.FieldRef},
			templatehistory.FieldOperation:    {Type: field.TypeEnum, Column: templatehistory.FieldOperation},
			templatehistory.FieldCreatedAt:    {Type: field.TypeTime, Column: templatehistory.FieldCreatedAt},
			templatehistory.FieldUpdatedAt:    {Type: field.TypeTime, Column: templatehistory.FieldUpdatedAt},
			templatehistory.FieldCreatedBy:    {Type: field.TypeString, Column: templatehistory.FieldCreatedBy},
			templatehistory.FieldUpdatedBy:    {Type: field.TypeString, Column: templatehistory.FieldUpdatedBy},
			templatehistory.FieldDeletedAt:    {Type: field.TypeTime, Column: templatehistory.FieldDeletedAt},
			templatehistory.FieldDeletedBy:    {Type: field.TypeString, Column: templatehistory.FieldDeletedBy},
			templatehistory.FieldTags:         {Type: field.TypeJSON, Column: templatehistory.FieldTags},
			templatehistory.FieldOwnerID:      {Type: field.TypeString, Column: templatehistory.FieldOwnerID},
			templatehistory.FieldName:         {Type: field.TypeString, Column: templatehistory.FieldName},
			templatehistory.FieldTemplateType: {Type: field.TypeEnum, Column: templatehistory.FieldTemplateType},
			templatehistory.FieldDescription:  {Type: field.TypeString, Column: templatehistory.FieldDescription},
			templatehistory.FieldJsonconfig:   {Type: field.TypeJSON, Column: templatehistory.FieldJsonconfig},
			templatehistory.FieldUischema:     {Type: field.TypeJSON, Column: templatehistory.FieldUischema},
		},
	}
	graph.Nodes[96] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcenter.Table,
			Columns: trustcenter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcenter.FieldID,
			},
		},
		Type: "TrustCenter",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcenter.FieldCreatedAt:      {Type: field.TypeTime, Column: trustcenter.FieldCreatedAt},
			trustcenter.FieldUpdatedAt:      {Type: field.TypeTime, Column: trustcenter.FieldUpdatedAt},
			trustcenter.FieldCreatedBy:      {Type: field.TypeString, Column: trustcenter.FieldCreatedBy},
			trustcenter.FieldUpdatedBy:      {Type: field.TypeString, Column: trustcenter.FieldUpdatedBy},
			trustcenter.FieldDeletedAt:      {Type: field.TypeTime, Column: trustcenter.FieldDeletedAt},
			trustcenter.FieldDeletedBy:      {Type: field.TypeString, Column: trustcenter.FieldDeletedBy},
			trustcenter.FieldTags:           {Type: field.TypeJSON, Column: trustcenter.FieldTags},
			trustcenter.FieldOwnerID:        {Type: field.TypeString, Column: trustcenter.FieldOwnerID},
			trustcenter.FieldSlug:           {Type: field.TypeString, Column: trustcenter.FieldSlug},
			trustcenter.FieldCustomDomainID: {Type: field.TypeString, Column: trustcenter.FieldCustomDomainID},
		},
	}
	graph.Nodes[97] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcentercompliance.Table,
			Columns: trustcentercompliance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcentercompliance.FieldID,
			},
		},
		Type: "TrustCenterCompliance",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcentercompliance.FieldCreatedAt: {Type: field.TypeTime, Column: trustcentercompliance.FieldCreatedAt},
			trustcentercompliance.FieldUpdatedAt: {Type: field.TypeTime, Column: trustcentercompliance.FieldUpdatedAt},
			trustcentercompliance.FieldCreatedBy: {Type: field.TypeString, Column: trustcentercompliance.FieldCreatedBy},
			trustcentercompliance.FieldUpdatedBy: {Type: field.TypeString, Column: trustcentercompliance.FieldUpdatedBy},
			trustcentercompliance.FieldDeletedAt: {Type: field.TypeTime, Column: trustcentercompliance.FieldDeletedAt},
			trustcentercompliance.FieldDeletedBy: {Type: field.TypeString, Column: trustcentercompliance.FieldDeletedBy},
			trustcentercompliance.FieldTags:      {Type: field.TypeJSON, Column: trustcentercompliance.FieldTags},
		},
	}
	graph.Nodes[98] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcentercompliancehistory.Table,
			Columns: trustcentercompliancehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcentercompliancehistory.FieldID,
			},
		},
		Type: "TrustCenterComplianceHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcentercompliancehistory.FieldHistoryTime: {Type: field.TypeTime, Column: trustcentercompliancehistory.FieldHistoryTime},
			trustcentercompliancehistory.FieldRef:         {Type: field.TypeString, Column: trustcentercompliancehistory.FieldRef},
			trustcentercompliancehistory.FieldOperation:   {Type: field.TypeEnum, Column: trustcentercompliancehistory.FieldOperation},
			trustcentercompliancehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: trustcentercompliancehistory.FieldCreatedAt},
			trustcentercompliancehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: trustcentercompliancehistory.FieldUpdatedAt},
			trustcentercompliancehistory.FieldCreatedBy:   {Type: field.TypeString, Column: trustcentercompliancehistory.FieldCreatedBy},
			trustcentercompliancehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: trustcentercompliancehistory.FieldUpdatedBy},
			trustcentercompliancehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: trustcentercompliancehistory.FieldDeletedAt},
			trustcentercompliancehistory.FieldDeletedBy:   {Type: field.TypeString, Column: trustcentercompliancehistory.FieldDeletedBy},
			trustcentercompliancehistory.FieldTags:        {Type: field.TypeJSON, Column: trustcentercompliancehistory.FieldTags},
		},
	}
	graph.Nodes[99] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcenterhistory.Table,
			Columns: trustcenterhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcenterhistory.FieldID,
			},
		},
		Type: "TrustCenterHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcenterhistory.FieldHistoryTime:    {Type: field.TypeTime, Column: trustcenterhistory.FieldHistoryTime},
			trustcenterhistory.FieldRef:            {Type: field.TypeString, Column: trustcenterhistory.FieldRef},
			trustcenterhistory.FieldOperation:      {Type: field.TypeEnum, Column: trustcenterhistory.FieldOperation},
			trustcenterhistory.FieldCreatedAt:      {Type: field.TypeTime, Column: trustcenterhistory.FieldCreatedAt},
			trustcenterhistory.FieldUpdatedAt:      {Type: field.TypeTime, Column: trustcenterhistory.FieldUpdatedAt},
			trustcenterhistory.FieldCreatedBy:      {Type: field.TypeString, Column: trustcenterhistory.FieldCreatedBy},
			trustcenterhistory.FieldUpdatedBy:      {Type: field.TypeString, Column: trustcenterhistory.FieldUpdatedBy},
			trustcenterhistory.FieldDeletedAt:      {Type: field.TypeTime, Column: trustcenterhistory.FieldDeletedAt},
			trustcenterhistory.FieldDeletedBy:      {Type: field.TypeString, Column: trustcenterhistory.FieldDeletedBy},
			trustcenterhistory.FieldTags:           {Type: field.TypeJSON, Column: trustcenterhistory.FieldTags},
			trustcenterhistory.FieldOwnerID:        {Type: field.TypeString, Column: trustcenterhistory.FieldOwnerID},
			trustcenterhistory.FieldSlug:           {Type: field.TypeString, Column: trustcenterhistory.FieldSlug},
			trustcenterhistory.FieldCustomDomainID: {Type: field.TypeString, Column: trustcenterhistory.FieldCustomDomainID},
		},
	}
	graph.Nodes[100] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcentersetting.Table,
			Columns: trustcentersetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcentersetting.FieldID,
			},
		},
		Type: "TrustCenterSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcentersetting.FieldCreatedAt:          {Type: field.TypeTime, Column: trustcentersetting.FieldCreatedAt},
			trustcentersetting.FieldUpdatedAt:          {Type: field.TypeTime, Column: trustcentersetting.FieldUpdatedAt},
			trustcentersetting.FieldCreatedBy:          {Type: field.TypeString, Column: trustcentersetting.FieldCreatedBy},
			trustcentersetting.FieldUpdatedBy:          {Type: field.TypeString, Column: trustcentersetting.FieldUpdatedBy},
			trustcentersetting.FieldDeletedAt:          {Type: field.TypeTime, Column: trustcentersetting.FieldDeletedAt},
			trustcentersetting.FieldDeletedBy:          {Type: field.TypeString, Column: trustcentersetting.FieldDeletedBy},
			trustcentersetting.FieldTrustCenterID:      {Type: field.TypeString, Column: trustcentersetting.FieldTrustCenterID},
			trustcentersetting.FieldTitle:              {Type: field.TypeString, Column: trustcentersetting.FieldTitle},
			trustcentersetting.FieldOverview:           {Type: field.TypeString, Column: trustcentersetting.FieldOverview},
			trustcentersetting.FieldLogoRemoteURL:      {Type: field.TypeString, Column: trustcentersetting.FieldLogoRemoteURL},
			trustcentersetting.FieldLogoLocalFileID:    {Type: field.TypeString, Column: trustcentersetting.FieldLogoLocalFileID},
			trustcentersetting.FieldFaviconRemoteURL:   {Type: field.TypeString, Column: trustcentersetting.FieldFaviconRemoteURL},
			trustcentersetting.FieldFaviconLocalFileID: {Type: field.TypeString, Column: trustcentersetting.FieldFaviconLocalFileID},
			trustcentersetting.FieldThemeMode:          {Type: field.TypeEnum, Column: trustcentersetting.FieldThemeMode},
			trustcentersetting.FieldPrimaryColor:       {Type: field.TypeString, Column: trustcentersetting.FieldPrimaryColor},
			trustcentersetting.FieldFont:               {Type: field.TypeString, Column: trustcentersetting.FieldFont},
			trustcentersetting.FieldForegroundColor:    {Type: field.TypeString, Column: trustcentersetting.FieldForegroundColor},
			trustcentersetting.FieldBackgroundColor:    {Type: field.TypeString, Column: trustcentersetting.FieldBackgroundColor},
			trustcentersetting.FieldAccentColor:        {Type: field.TypeString, Column: trustcentersetting.FieldAccentColor},
		},
	}
	graph.Nodes[101] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcentersettinghistory.Table,
			Columns: trustcentersettinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcentersettinghistory.FieldID,
			},
		},
		Type: "TrustCenterSettingHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcentersettinghistory.FieldHistoryTime:        {Type: field.TypeTime, Column: trustcentersettinghistory.FieldHistoryTime},
			trustcentersettinghistory.FieldRef:                {Type: field.TypeString, Column: trustcentersettinghistory.FieldRef},
			trustcentersettinghistory.FieldOperation:          {Type: field.TypeEnum, Column: trustcentersettinghistory.FieldOperation},
			trustcentersettinghistory.FieldCreatedAt:          {Type: field.TypeTime, Column: trustcentersettinghistory.FieldCreatedAt},
			trustcentersettinghistory.FieldUpdatedAt:          {Type: field.TypeTime, Column: trustcentersettinghistory.FieldUpdatedAt},
			trustcentersettinghistory.FieldCreatedBy:          {Type: field.TypeString, Column: trustcentersettinghistory.FieldCreatedBy},
			trustcentersettinghistory.FieldUpdatedBy:          {Type: field.TypeString, Column: trustcentersettinghistory.FieldUpdatedBy},
			trustcentersettinghistory.FieldDeletedAt:          {Type: field.TypeTime, Column: trustcentersettinghistory.FieldDeletedAt},
			trustcentersettinghistory.FieldDeletedBy:          {Type: field.TypeString, Column: trustcentersettinghistory.FieldDeletedBy},
			trustcentersettinghistory.FieldTrustCenterID:      {Type: field.TypeString, Column: trustcentersettinghistory.FieldTrustCenterID},
			trustcentersettinghistory.FieldTitle:              {Type: field.TypeString, Column: trustcentersettinghistory.FieldTitle},
			trustcentersettinghistory.FieldOverview:           {Type: field.TypeString, Column: trustcentersettinghistory.FieldOverview},
			trustcentersettinghistory.FieldLogoRemoteURL:      {Type: field.TypeString, Column: trustcentersettinghistory.FieldLogoRemoteURL},
			trustcentersettinghistory.FieldLogoLocalFileID:    {Type: field.TypeString, Column: trustcentersettinghistory.FieldLogoLocalFileID},
			trustcentersettinghistory.FieldFaviconRemoteURL:   {Type: field.TypeString, Column: trustcentersettinghistory.FieldFaviconRemoteURL},
			trustcentersettinghistory.FieldFaviconLocalFileID: {Type: field.TypeString, Column: trustcentersettinghistory.FieldFaviconLocalFileID},
			trustcentersettinghistory.FieldThemeMode:          {Type: field.TypeEnum, Column: trustcentersettinghistory.FieldThemeMode},
			trustcentersettinghistory.FieldPrimaryColor:       {Type: field.TypeString, Column: trustcentersettinghistory.FieldPrimaryColor},
			trustcentersettinghistory.FieldFont:               {Type: field.TypeString, Column: trustcentersettinghistory.FieldFont},
			trustcentersettinghistory.FieldForegroundColor:    {Type: field.TypeString, Column: trustcentersettinghistory.FieldForegroundColor},
			trustcentersettinghistory.FieldBackgroundColor:    {Type: field.TypeString, Column: trustcentersettinghistory.FieldBackgroundColor},
			trustcentersettinghistory.FieldAccentColor:        {Type: field.TypeString, Column: trustcentersettinghistory.FieldAccentColor},
		},
	}
	graph.Nodes[102] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcentersubprocessor.Table,
			Columns: trustcentersubprocessor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcentersubprocessor.FieldID,
			},
		},
		Type: "TrustCenterSubprocessor",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcentersubprocessor.FieldCreatedAt:      {Type: field.TypeTime, Column: trustcentersubprocessor.FieldCreatedAt},
			trustcentersubprocessor.FieldUpdatedAt:      {Type: field.TypeTime, Column: trustcentersubprocessor.FieldUpdatedAt},
			trustcentersubprocessor.FieldCreatedBy:      {Type: field.TypeString, Column: trustcentersubprocessor.FieldCreatedBy},
			trustcentersubprocessor.FieldUpdatedBy:      {Type: field.TypeString, Column: trustcentersubprocessor.FieldUpdatedBy},
			trustcentersubprocessor.FieldDeletedAt:      {Type: field.TypeTime, Column: trustcentersubprocessor.FieldDeletedAt},
			trustcentersubprocessor.FieldDeletedBy:      {Type: field.TypeString, Column: trustcentersubprocessor.FieldDeletedBy},
			trustcentersubprocessor.FieldSubprocessorID: {Type: field.TypeString, Column: trustcentersubprocessor.FieldSubprocessorID},
			trustcentersubprocessor.FieldTrustCenterID:  {Type: field.TypeString, Column: trustcentersubprocessor.FieldTrustCenterID},
			trustcentersubprocessor.FieldCountries:      {Type: field.TypeJSON, Column: trustcentersubprocessor.FieldCountries},
			trustcentersubprocessor.FieldCategory:       {Type: field.TypeString, Column: trustcentersubprocessor.FieldCategory},
		},
	}
	graph.Nodes[103] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trustcentersubprocessorhistory.Table,
			Columns: trustcentersubprocessorhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: trustcentersubprocessorhistory.FieldID,
			},
		},
		Type: "TrustCenterSubprocessorHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			trustcentersubprocessorhistory.FieldHistoryTime:    {Type: field.TypeTime, Column: trustcentersubprocessorhistory.FieldHistoryTime},
			trustcentersubprocessorhistory.FieldRef:            {Type: field.TypeString, Column: trustcentersubprocessorhistory.FieldRef},
			trustcentersubprocessorhistory.FieldOperation:      {Type: field.TypeEnum, Column: trustcentersubprocessorhistory.FieldOperation},
			trustcentersubprocessorhistory.FieldCreatedAt:      {Type: field.TypeTime, Column: trustcentersubprocessorhistory.FieldCreatedAt},
			trustcentersubprocessorhistory.FieldUpdatedAt:      {Type: field.TypeTime, Column: trustcentersubprocessorhistory.FieldUpdatedAt},
			trustcentersubprocessorhistory.FieldCreatedBy:      {Type: field.TypeString, Column: trustcentersubprocessorhistory.FieldCreatedBy},
			trustcentersubprocessorhistory.FieldUpdatedBy:      {Type: field.TypeString, Column: trustcentersubprocessorhistory.FieldUpdatedBy},
			trustcentersubprocessorhistory.FieldDeletedAt:      {Type: field.TypeTime, Column: trustcentersubprocessorhistory.FieldDeletedAt},
			trustcentersubprocessorhistory.FieldDeletedBy:      {Type: field.TypeString, Column: trustcentersubprocessorhistory.FieldDeletedBy},
			trustcentersubprocessorhistory.FieldSubprocessorID: {Type: field.TypeString, Column: trustcentersubprocessorhistory.FieldSubprocessorID},
			trustcentersubprocessorhistory.FieldTrustCenterID:  {Type: field.TypeString, Column: trustcentersubprocessorhistory.FieldTrustCenterID},
			trustcentersubprocessorhistory.FieldCountries:      {Type: field.TypeJSON, Column: trustcentersubprocessorhistory.FieldCountries},
			trustcentersubprocessorhistory.FieldCategory:       {Type: field.TypeString, Column: trustcentersubprocessorhistory.FieldCategory},
		},
	}
	graph.Nodes[104] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:         {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:         {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldCreatedBy:         {Type: field.TypeString, Column: user.FieldCreatedBy},
			user.FieldUpdatedBy:         {Type: field.TypeString, Column: user.FieldUpdatedBy},
			user.FieldDeletedAt:         {Type: field.TypeTime, Column: user.FieldDeletedAt},
			user.FieldDeletedBy:         {Type: field.TypeString, Column: user.FieldDeletedBy},
			user.FieldDisplayID:         {Type: field.TypeString, Column: user.FieldDisplayID},
			user.FieldTags:              {Type: field.TypeJSON, Column: user.FieldTags},
			user.FieldEmail:             {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldFirstName:         {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:          {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldDisplayName:       {Type: field.TypeString, Column: user.FieldDisplayName},
			user.FieldAvatarRemoteURL:   {Type: field.TypeString, Column: user.FieldAvatarRemoteURL},
			user.FieldAvatarLocalFileID: {Type: field.TypeString, Column: user.FieldAvatarLocalFileID},
			user.FieldAvatarUpdatedAt:   {Type: field.TypeTime, Column: user.FieldAvatarUpdatedAt},
			user.FieldLastSeen:          {Type: field.TypeTime, Column: user.FieldLastSeen},
			user.FieldLastLoginProvider: {Type: field.TypeEnum, Column: user.FieldLastLoginProvider},
			user.FieldPassword:          {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldSub:               {Type: field.TypeString, Column: user.FieldSub},
			user.FieldAuthProvider:      {Type: field.TypeEnum, Column: user.FieldAuthProvider},
			user.FieldRole:              {Type: field.TypeEnum, Column: user.FieldRole},
		},
	}
	graph.Nodes[105] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userhistory.Table,
			Columns: userhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: userhistory.FieldID,
			},
		},
		Type: "UserHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			userhistory.FieldHistoryTime:       {Type: field.TypeTime, Column: userhistory.FieldHistoryTime},
			userhistory.FieldRef:               {Type: field.TypeString, Column: userhistory.FieldRef},
			userhistory.FieldOperation:         {Type: field.TypeEnum, Column: userhistory.FieldOperation},
			userhistory.FieldCreatedAt:         {Type: field.TypeTime, Column: userhistory.FieldCreatedAt},
			userhistory.FieldUpdatedAt:         {Type: field.TypeTime, Column: userhistory.FieldUpdatedAt},
			userhistory.FieldCreatedBy:         {Type: field.TypeString, Column: userhistory.FieldCreatedBy},
			userhistory.FieldUpdatedBy:         {Type: field.TypeString, Column: userhistory.FieldUpdatedBy},
			userhistory.FieldDeletedAt:         {Type: field.TypeTime, Column: userhistory.FieldDeletedAt},
			userhistory.FieldDeletedBy:         {Type: field.TypeString, Column: userhistory.FieldDeletedBy},
			userhistory.FieldDisplayID:         {Type: field.TypeString, Column: userhistory.FieldDisplayID},
			userhistory.FieldTags:              {Type: field.TypeJSON, Column: userhistory.FieldTags},
			userhistory.FieldEmail:             {Type: field.TypeString, Column: userhistory.FieldEmail},
			userhistory.FieldFirstName:         {Type: field.TypeString, Column: userhistory.FieldFirstName},
			userhistory.FieldLastName:          {Type: field.TypeString, Column: userhistory.FieldLastName},
			userhistory.FieldDisplayName:       {Type: field.TypeString, Column: userhistory.FieldDisplayName},
			userhistory.FieldAvatarRemoteURL:   {Type: field.TypeString, Column: userhistory.FieldAvatarRemoteURL},
			userhistory.FieldAvatarLocalFileID: {Type: field.TypeString, Column: userhistory.FieldAvatarLocalFileID},
			userhistory.FieldAvatarUpdatedAt:   {Type: field.TypeTime, Column: userhistory.FieldAvatarUpdatedAt},
			userhistory.FieldLastSeen:          {Type: field.TypeTime, Column: userhistory.FieldLastSeen},
			userhistory.FieldLastLoginProvider: {Type: field.TypeEnum, Column: userhistory.FieldLastLoginProvider},
			userhistory.FieldPassword:          {Type: field.TypeString, Column: userhistory.FieldPassword},
			userhistory.FieldSub:               {Type: field.TypeString, Column: userhistory.FieldSub},
			userhistory.FieldAuthProvider:      {Type: field.TypeEnum, Column: userhistory.FieldAuthProvider},
			userhistory.FieldRole:              {Type: field.TypeEnum, Column: userhistory.FieldRole},
		},
	}
	graph.Nodes[106] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usersetting.Table,
			Columns: usersetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: usersetting.FieldID,
			},
		},
		Type: "UserSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			usersetting.FieldCreatedAt:         {Type: field.TypeTime, Column: usersetting.FieldCreatedAt},
			usersetting.FieldUpdatedAt:         {Type: field.TypeTime, Column: usersetting.FieldUpdatedAt},
			usersetting.FieldCreatedBy:         {Type: field.TypeString, Column: usersetting.FieldCreatedBy},
			usersetting.FieldUpdatedBy:         {Type: field.TypeString, Column: usersetting.FieldUpdatedBy},
			usersetting.FieldDeletedAt:         {Type: field.TypeTime, Column: usersetting.FieldDeletedAt},
			usersetting.FieldDeletedBy:         {Type: field.TypeString, Column: usersetting.FieldDeletedBy},
			usersetting.FieldTags:              {Type: field.TypeJSON, Column: usersetting.FieldTags},
			usersetting.FieldUserID:            {Type: field.TypeString, Column: usersetting.FieldUserID},
			usersetting.FieldLocked:            {Type: field.TypeBool, Column: usersetting.FieldLocked},
			usersetting.FieldSilencedAt:        {Type: field.TypeTime, Column: usersetting.FieldSilencedAt},
			usersetting.FieldSuspendedAt:       {Type: field.TypeTime, Column: usersetting.FieldSuspendedAt},
			usersetting.FieldStatus:            {Type: field.TypeEnum, Column: usersetting.FieldStatus},
			usersetting.FieldEmailConfirmed:    {Type: field.TypeBool, Column: usersetting.FieldEmailConfirmed},
			usersetting.FieldIsWebauthnAllowed: {Type: field.TypeBool, Column: usersetting.FieldIsWebauthnAllowed},
			usersetting.FieldIsTfaEnabled:      {Type: field.TypeBool, Column: usersetting.FieldIsTfaEnabled},
			usersetting.FieldPhoneNumber:       {Type: field.TypeString, Column: usersetting.FieldPhoneNumber},
		},
	}
	graph.Nodes[107] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usersettinghistory.Table,
			Columns: usersettinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: usersettinghistory.FieldID,
			},
		},
		Type: "UserSettingHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			usersettinghistory.FieldHistoryTime:       {Type: field.TypeTime, Column: usersettinghistory.FieldHistoryTime},
			usersettinghistory.FieldRef:               {Type: field.TypeString, Column: usersettinghistory.FieldRef},
			usersettinghistory.FieldOperation:         {Type: field.TypeEnum, Column: usersettinghistory.FieldOperation},
			usersettinghistory.FieldCreatedAt:         {Type: field.TypeTime, Column: usersettinghistory.FieldCreatedAt},
			usersettinghistory.FieldUpdatedAt:         {Type: field.TypeTime, Column: usersettinghistory.FieldUpdatedAt},
			usersettinghistory.FieldCreatedBy:         {Type: field.TypeString, Column: usersettinghistory.FieldCreatedBy},
			usersettinghistory.FieldUpdatedBy:         {Type: field.TypeString, Column: usersettinghistory.FieldUpdatedBy},
			usersettinghistory.FieldDeletedAt:         {Type: field.TypeTime, Column: usersettinghistory.FieldDeletedAt},
			usersettinghistory.FieldDeletedBy:         {Type: field.TypeString, Column: usersettinghistory.FieldDeletedBy},
			usersettinghistory.FieldTags:              {Type: field.TypeJSON, Column: usersettinghistory.FieldTags},
			usersettinghistory.FieldUserID:            {Type: field.TypeString, Column: usersettinghistory.FieldUserID},
			usersettinghistory.FieldLocked:            {Type: field.TypeBool, Column: usersettinghistory.FieldLocked},
			usersettinghistory.FieldSilencedAt:        {Type: field.TypeTime, Column: usersettinghistory.FieldSilencedAt},
			usersettinghistory.FieldSuspendedAt:       {Type: field.TypeTime, Column: usersettinghistory.FieldSuspendedAt},
			usersettinghistory.FieldStatus:            {Type: field.TypeEnum, Column: usersettinghistory.FieldStatus},
			usersettinghistory.FieldEmailConfirmed:    {Type: field.TypeBool, Column: usersettinghistory.FieldEmailConfirmed},
			usersettinghistory.FieldIsWebauthnAllowed: {Type: field.TypeBool, Column: usersettinghistory.FieldIsWebauthnAllowed},
			usersettinghistory.FieldIsTfaEnabled:      {Type: field.TypeBool, Column: usersettinghistory.FieldIsTfaEnabled},
			usersettinghistory.FieldPhoneNumber:       {Type: field.TypeString, Column: usersettinghistory.FieldPhoneNumber},
		},
	}
	graph.Nodes[108] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   webauthn.Table,
			Columns: webauthn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webauthn.FieldID,
			},
		},
		Type: "Webauthn",
		Fields: map[string]*sqlgraph.FieldSpec{
			webauthn.FieldCreatedAt:       {Type: field.TypeTime, Column: webauthn.FieldCreatedAt},
			webauthn.FieldUpdatedAt:       {Type: field.TypeTime, Column: webauthn.FieldUpdatedAt},
			webauthn.FieldCreatedBy:       {Type: field.TypeString, Column: webauthn.FieldCreatedBy},
			webauthn.FieldUpdatedBy:       {Type: field.TypeString, Column: webauthn.FieldUpdatedBy},
			webauthn.FieldTags:            {Type: field.TypeJSON, Column: webauthn.FieldTags},
			webauthn.FieldOwnerID:         {Type: field.TypeString, Column: webauthn.FieldOwnerID},
			webauthn.FieldCredentialID:    {Type: field.TypeBytes, Column: webauthn.FieldCredentialID},
			webauthn.FieldPublicKey:       {Type: field.TypeBytes, Column: webauthn.FieldPublicKey},
			webauthn.FieldAttestationType: {Type: field.TypeString, Column: webauthn.FieldAttestationType},
			webauthn.FieldAaguid:          {Type: field.TypeOther, Column: webauthn.FieldAaguid},
			webauthn.FieldSignCount:       {Type: field.TypeInt32, Column: webauthn.FieldSignCount},
			webauthn.FieldTransports:      {Type: field.TypeJSON, Column: webauthn.FieldTransports},
			webauthn.FieldBackupEligible:  {Type: field.TypeBool, Column: webauthn.FieldBackupEligible},
			webauthn.FieldBackupState:     {Type: field.TypeBool, Column: webauthn.FieldBackupState},
			webauthn.FieldUserPresent:     {Type: field.TypeBool, Column: webauthn.FieldUserPresent},
			webauthn.FieldUserVerified:    {Type: field.TypeBool, Column: webauthn.FieldUserVerified},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.OwnerTable,
			Columns: []string{apitoken.OwnerColumn},
			Bidi:    false,
		},
		"APIToken",
		"Organization",
	)
	graph.MustAddE(
		"approver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.ApproverTable,
			Columns: []string{actionplan.ApproverColumn},
			Bidi:    false,
		},
		"ActionPlan",
		"Group",
	)
	graph.MustAddE(
		"delegate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actionplan.DelegateTable,
			Columns: []string{actionplan.DelegateColumn},
			Bidi:    false,
		},
		"ActionPlan",
		"Group",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionplan.OwnerTable,
			Columns: []string{actionplan.OwnerColumn},
			Bidi:    false,
		},
		"ActionPlan",
		"Organization",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.RisksTable,
			Columns: actionplan.RisksPrimaryKey,
			Bidi:    false,
		},
		"ActionPlan",
		"Risk",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ControlsTable,
			Columns: actionplan.ControlsPrimaryKey,
			Bidi:    false,
		},
		"ActionPlan",
		"Control",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actionplan.ProgramsTable,
			Columns: actionplan.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"ActionPlan",
		"Program",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
		},
		"Asset",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
		},
		"Asset",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
		},
		"Asset",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
		},
		"Asset",
		"Group",
	)
	graph.MustAddE(
		"scans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
		},
		"Asset",
		"Scan",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
		},
		"Asset",
		"Entity",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
		},
		"Asset",
		"Control",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
		},
		"Contact",
		"Organization",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
		},
		"Contact",
		"Entity",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
		},
		"Contact",
		"File",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Evidence",
	)
	graph.MustAddE(
		"control_objectives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"ControlObjective",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Task",
	)
	graph.MustAddE(
		"narratives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Narrative",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Risk",
	)
	graph.MustAddE(
		"action_plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"ActionPlan",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Procedure",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"InternalPolicy",
	)
	graph.MustAddE(
		"control_owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.ControlOwnerTable,
			Columns: []string{control.ControlOwnerColumn},
			Bidi:    false,
		},
		"Control",
		"Group",
	)
	graph.MustAddE(
		"delegate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.DelegateTable,
			Columns: []string{control.DelegateColumn},
			Bidi:    false,
		},
		"Control",
		"Group",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.OwnerTable,
			Columns: []string{control.OwnerColumn},
			Bidi:    false,
		},
		"Control",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Group",
	)
	graph.MustAddE(
		"standard",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: []string{control.StandardColumn},
			Bidi:    false,
		},
		"Control",
		"Standard",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Program",
	)
	graph.MustAddE(
		"assets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"Asset",
	)
	graph.MustAddE(
		"scans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
		},
		"Control",
		"Scan",
	)
	graph.MustAddE(
		"control_implementations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"ControlImplementation",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
		},
		"Control",
		"Subcontrol",
	)
	graph.MustAddE(
		"scheduled_jobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"ScheduledJob",
	)
	graph.MustAddE(
		"mapped_to_controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"MappedControl",
	)
	graph.MustAddE(
		"mapped_from_controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
		},
		"Control",
		"MappedControl",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlimplementation.OwnerTable,
			Columns: []string{controlimplementation.OwnerColumn},
			Bidi:    false,
		},
		"ControlImplementation",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"ControlImplementation",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
		},
		"ControlImplementation",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
		},
		"ControlImplementation",
		"Group",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
		},
		"ControlImplementation",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"ControlImplementation",
		"Subcontrol",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
		},
		"ControlImplementation",
		"Task",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlobjective.OwnerTable,
			Columns: []string{controlobjective.OwnerColumn},
			Bidi:    false,
		},
		"ControlObjective",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.BlockedGroupsTable,
			Columns: controlobjective.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.EditorsTable,
			Columns: controlobjective.EditorsPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.ViewersTable,
			Columns: controlobjective.ViewersPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Group",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Program",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.EvidenceTable,
			Columns: controlobjective.EvidencePrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Evidence",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ControlsTable,
			Columns: controlobjective.ControlsPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.SubcontrolsTable,
			Columns: controlobjective.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Subcontrol",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.InternalPoliciesTable,
			Columns: controlobjective.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"InternalPolicy",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
		},
		"ControlObjective",
		"Procedure",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
		},
		"ControlObjective",
		"Risk",
	)
	graph.MustAddE(
		"narratives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: []string{controlobjective.NarrativesColumn},
			Bidi:    false,
		},
		"ControlObjective",
		"Narrative",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
		},
		"ControlObjective",
		"Task",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
		},
		"CustomDomain",
		"Organization",
	)
	graph.MustAddE(
		"mappable_domain",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.MappableDomainTable,
			Columns: []string{customdomain.MappableDomainColumn},
			Bidi:    false,
		},
		"CustomDomain",
		"MappableDomain",
	)
	graph.MustAddE(
		"dns_verification",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.DNSVerificationTable,
			Columns: []string{customdomain.DNSVerificationColumn},
			Bidi:    false,
		},
		"CustomDomain",
		"DNSVerification",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsverification.OwnerTable,
			Columns: []string{dnsverification.OwnerColumn},
			Bidi:    false,
		},
		"DNSVerification",
		"Organization",
	)
	graph.MustAddE(
		"custom_domains",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
		},
		"DNSVerification",
		"CustomDomain",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentdata.OwnerTable,
			Columns: []string{documentdata.OwnerColumn},
			Bidi:    false,
		},
		"DocumentData",
		"Organization",
	)
	graph.MustAddE(
		"template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentdata.TemplateTable,
			Columns: []string{documentdata.TemplateColumn},
			Bidi:    false,
		},
		"DocumentData",
		"Template",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentdata.EntitiesTable,
			Columns: documentdata.EntitiesPrimaryKey,
			Bidi:    false,
		},
		"DocumentData",
		"Entity",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   documentdata.FilesTable,
			Columns: documentdata.FilesPrimaryKey,
			Bidi:    false,
		},
		"DocumentData",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailverificationtoken.OwnerTable,
			Columns: []string{emailverificationtoken.OwnerColumn},
			Bidi:    false,
		},
		"EmailVerificationToken",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.OwnerTable,
			Columns: []string{entity.OwnerColumn},
			Bidi:    false,
		},
		"Entity",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.BlockedGroupsTable,
			Columns: entity.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.EditorsTable,
			Columns: entity.EditorsPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ViewersTable,
			Columns: entity.ViewersPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"Group",
	)
	graph.MustAddE(
		"contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"Contact",
	)
	graph.MustAddE(
		"documents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"DocumentData",
	)
	graph.MustAddE(
		"notes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
		},
		"Entity",
		"Note",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"File",
	)
	graph.MustAddE(
		"assets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.AssetsTable,
			Columns: entity.AssetsPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"Asset",
	)
	graph.MustAddE(
		"scans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ScansTable,
			Columns: []string{entity.ScansColumn},
			Bidi:    false,
		},
		"Entity",
		"Scan",
	)
	graph.MustAddE(
		"entity_type",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entity.EntityTypeTable,
			Columns: []string{entity.EntityTypeColumn},
			Bidi:    false,
		},
		"Entity",
		"EntityType",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.OwnerTable,
			Columns: []string{entitytype.OwnerColumn},
			Bidi:    false,
		},
		"EntityType",
		"Organization",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
		},
		"EntityType",
		"Entity",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"User",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Group",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Integration",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Organization",
	)
	graph.MustAddE(
		"invites",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Invite",
	)
	graph.MustAddE(
		"personal_access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"secrets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Hush",
	)
	graph.MustAddE(
		"org_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgMembershipsTable,
			Columns: event.OrgMembershipsPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"OrgMembership",
	)
	graph.MustAddE(
		"group_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupMembershipsTable,
			Columns: event.GroupMembershipsPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"GroupMembership",
	)
	graph.MustAddE(
		"subscribers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Subscriber",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"File",
	)
	graph.MustAddE(
		"org_subscriptions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"OrgSubscription",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evidence.OwnerTable,
			Columns: []string{evidence.OwnerColumn},
			Bidi:    false,
		},
		"Evidence",
		"Organization",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
		},
		"Evidence",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"Evidence",
		"Subcontrol",
	)
	graph.MustAddE(
		"control_objectives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
		},
		"Evidence",
		"ControlObjective",
	)
	graph.MustAddE(
		"control_implementations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
		},
		"Evidence",
		"ControlImplementation",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
		},
		"Evidence",
		"File",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"Evidence",
		"Program",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
		},
		"Evidence",
		"Task",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   export.OwnerTable,
			Columns: []string{export.OwnerColumn},
			Bidi:    false,
		},
		"Export",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   export.EventsTable,
			Columns: []string{export.EventsColumn},
			Bidi:    false,
		},
		"Export",
		"Event",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   export.FilesTable,
			Columns: []string{export.FilesColumn},
			Bidi:    false,
		},
		"Export",
		"File",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
		},
		"File",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Organization",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Group",
	)
	graph.MustAddE(
		"contact",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Contact",
	)
	graph.MustAddE(
		"entity",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Entity",
	)
	graph.MustAddE(
		"user_setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
		},
		"File",
		"UserSetting",
	)
	graph.MustAddE(
		"organization_setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
		},
		"File",
		"OrganizationSetting",
	)
	graph.MustAddE(
		"template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
		},
		"File",
		"Template",
	)
	graph.MustAddE(
		"document",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
		},
		"File",
		"DocumentData",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Program",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
		},
		"File",
		"Evidence",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Event",
	)
	graph.MustAddE(
		"trust_center_setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
		},
		"File",
		"TrustCenterSetting",
	)
	graph.MustAddE(
		"subprocessor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Subprocessor",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
		},
		"Group",
		"Organization",
	)
	graph.MustAddE(
		"program_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Program",
	)
	graph.MustAddE(
		"program_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Program",
	)
	graph.MustAddE(
		"program_viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Program",
	)
	graph.MustAddE(
		"risk_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Risk",
	)
	graph.MustAddE(
		"risk_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Risk",
	)
	graph.MustAddE(
		"risk_viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Risk",
	)
	graph.MustAddE(
		"control_objective_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"ControlObjective",
	)
	graph.MustAddE(
		"control_objective_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"ControlObjective",
	)
	graph.MustAddE(
		"control_objective_viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"ControlObjective",
	)
	graph.MustAddE(
		"narrative_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Narrative",
	)
	graph.MustAddE(
		"narrative_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Narrative",
	)
	graph.MustAddE(
		"narrative_viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Narrative",
	)
	graph.MustAddE(
		"control_implementation_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"ControlImplementation",
	)
	graph.MustAddE(
		"control_implementation_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"ControlImplementation",
	)
	graph.MustAddE(
		"control_implementation_viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"ControlImplementation",
	)
	graph.MustAddE(
		"scan_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Scan",
	)
	graph.MustAddE(
		"scan_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Scan",
	)
	graph.MustAddE(
		"scan_viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Scan",
	)
	graph.MustAddE(
		"entity_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Entity",
	)
	graph.MustAddE(
		"entity_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Entity",
	)
	graph.MustAddE(
		"entity_viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Entity",
	)
	graph.MustAddE(
		"procedure_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Procedure",
	)
	graph.MustAddE(
		"procedure_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Procedure",
	)
	graph.MustAddE(
		"internal_policy_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"InternalPolicy",
	)
	graph.MustAddE(
		"internal_policy_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"InternalPolicy",
	)
	graph.MustAddE(
		"control_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Control",
	)
	graph.MustAddE(
		"control_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Control",
	)
	graph.MustAddE(
		"mapped_control_editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"MappedControl",
	)
	graph.MustAddE(
		"mapped_control_blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"MappedControl",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
		},
		"Group",
		"GroupSetting",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"User",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Event",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
		},
		"Group",
		"Integration",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"File",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Task",
	)
	graph.MustAddE(
		"invites",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Invite",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
		},
		"Group",
		"GroupMembership",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupmembership.GroupTable,
			Columns: []string{groupmembership.GroupColumn},
			Bidi:    false,
		},
		"GroupMembership",
		"Group",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupmembership.UserTable,
			Columns: []string{groupmembership.UserColumn},
			Bidi:    false,
		},
		"GroupMembership",
		"User",
	)
	graph.MustAddE(
		"org_membership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupmembership.OrgMembershipTable,
			Columns: []string{groupmembership.OrgMembershipColumn},
			Bidi:    false,
		},
		"GroupMembership",
		"OrgMembership",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groupmembership.EventsTable,
			Columns: groupmembership.EventsPrimaryKey,
			Bidi:    false,
		},
		"GroupMembership",
		"Event",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsetting.GroupTable,
			Columns: []string{groupsetting.GroupColumn},
			Bidi:    false,
		},
		"GroupSetting",
		"Group",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hush.OwnerTable,
			Columns: []string{hush.OwnerColumn},
			Bidi:    false,
		},
		"Hush",
		"Organization",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hush.IntegrationsTable,
			Columns: hush.IntegrationsPrimaryKey,
			Bidi:    false,
		},
		"Hush",
		"Integration",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hush.EventsTable,
			Columns: hush.EventsPrimaryKey,
			Bidi:    false,
		},
		"Hush",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OwnerTable,
			Columns: []string{integration.OwnerColumn},
			Bidi:    false,
		},
		"Integration",
		"Organization",
	)
	graph.MustAddE(
		"secrets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   integration.SecretsTable,
			Columns: integration.SecretsPrimaryKey,
			Bidi:    false,
		},
		"Integration",
		"Hush",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   integration.EventsTable,
			Columns: integration.EventsPrimaryKey,
			Bidi:    false,
		},
		"Integration",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internalpolicy.OwnerTable,
			Columns: []string{internalpolicy.OwnerColumn},
			Bidi:    false,
		},
		"InternalPolicy",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Group",
	)
	graph.MustAddE(
		"approver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.ApproverTable,
			Columns: []string{internalpolicy.ApproverColumn},
			Bidi:    false,
		},
		"InternalPolicy",
		"Group",
	)
	graph.MustAddE(
		"delegate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.DelegateTable,
			Columns: []string{internalpolicy.DelegateColumn},
			Bidi:    false,
		},
		"InternalPolicy",
		"Group",
	)
	graph.MustAddE(
		"control_objectives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"ControlObjective",
	)
	graph.MustAddE(
		"control_implementations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
		},
		"InternalPolicy",
		"ControlImplementation",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Subcontrol",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Procedure",
	)
	graph.MustAddE(
		"narratives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Narrative",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Task",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Risk",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"InternalPolicy",
		"Program",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.OwnerTable,
			Columns: []string{invite.OwnerColumn},
			Bidi:    false,
		},
		"Invite",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
		},
		"Invite",
		"Event",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.GroupsTable,
			Columns: invite.GroupsPrimaryKey,
			Bidi:    false,
		},
		"Invite",
		"Group",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresult.OwnerTable,
			Columns: []string{jobresult.OwnerColumn},
			Bidi:    false,
		},
		"JobResult",
		"Organization",
	)
	graph.MustAddE(
		"scheduled_job",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.ScheduledJobTable,
			Columns: []string{jobresult.ScheduledJobColumn},
			Bidi:    false,
		},
		"JobResult",
		"ScheduledJob",
	)
	graph.MustAddE(
		"file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.FileTable,
			Columns: []string{jobresult.FileColumn},
			Bidi:    false,
		},
		"JobResult",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunner.OwnerTable,
			Columns: []string{jobrunner.OwnerColumn},
			Bidi:    false,
		},
		"JobRunner",
		"Organization",
	)
	graph.MustAddE(
		"job_runner_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
		},
		"JobRunner",
		"JobRunnerToken",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnerregistrationtoken.OwnerTable,
			Columns: []string{jobrunnerregistrationtoken.OwnerColumn},
			Bidi:    false,
		},
		"JobRunnerRegistrationToken",
		"Organization",
	)
	graph.MustAddE(
		"job_runner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobrunnerregistrationtoken.JobRunnerTable,
			Columns: []string{jobrunnerregistrationtoken.JobRunnerColumn},
			Bidi:    false,
		},
		"JobRunnerRegistrationToken",
		"JobRunner",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnertoken.OwnerTable,
			Columns: []string{jobrunnertoken.OwnerColumn},
			Bidi:    false,
		},
		"JobRunnerToken",
		"Organization",
	)
	graph.MustAddE(
		"job_runners",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
		},
		"JobRunnerToken",
		"JobRunner",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
		},
		"JobTemplate",
		"Organization",
	)
	graph.MustAddE(
		"scheduled_jobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
		},
		"JobTemplate",
		"ScheduledJob",
	)
	graph.MustAddE(
		"custom_domains",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
		},
		"MappableDomain",
		"CustomDomain",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedcontrol.OwnerTable,
			Columns: []string{mappedcontrol.OwnerColumn},
			Bidi:    false,
		},
		"MappedControl",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"MappedControl",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
		},
		"MappedControl",
		"Group",
	)
	graph.MustAddE(
		"from_controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
		},
		"MappedControl",
		"Control",
	)
	graph.MustAddE(
		"to_controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
		},
		"MappedControl",
		"Control",
	)
	graph.MustAddE(
		"from_subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"MappedControl",
		"Subcontrol",
	)
	graph.MustAddE(
		"to_subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"MappedControl",
		"Subcontrol",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   narrative.OwnerTable,
			Columns: []string{narrative.OwnerColumn},
			Bidi:    false,
		},
		"Narrative",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrative.BlockedGroupsTable,
			Columns: narrative.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Narrative",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrative.EditorsTable,
			Columns: narrative.EditorsPrimaryKey,
			Bidi:    false,
		},
		"Narrative",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   narrative.ViewersTable,
			Columns: narrative.ViewersPrimaryKey,
			Bidi:    false,
		},
		"Narrative",
		"Group",
	)
	graph.MustAddE(
		"satisfies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.SatisfiesTable,
			Columns: narrative.SatisfiesPrimaryKey,
			Bidi:    false,
		},
		"Narrative",
		"Control",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramsTable,
			Columns: narrative.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"Narrative",
		"Program",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.InternalPoliciesTable,
			Columns: narrative.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"Narrative",
		"InternalPolicy",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProceduresTable,
			Columns: narrative.ProceduresPrimaryKey,
			Bidi:    false,
		},
		"Narrative",
		"Procedure",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
		},
		"Note",
		"Organization",
	)
	graph.MustAddE(
		"task",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TaskTable,
			Columns: []string{note.TaskColumn},
			Bidi:    false,
		},
		"Note",
		"Task",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
		},
		"Note",
		"File",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   onboarding.OrganizationTable,
			Columns: []string{onboarding.OrganizationColumn},
			Bidi:    false,
		},
		"Onboarding",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.OrganizationTable,
			Columns: []string{orgmembership.OrganizationColumn},
			Bidi:    false,
		},
		"OrgMembership",
		"Organization",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.UserTable,
			Columns: []string{orgmembership.UserColumn},
			Bidi:    false,
		},
		"OrgMembership",
		"User",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmembership.EventsTable,
			Columns: orgmembership.EventsPrimaryKey,
			Bidi:    false,
		},
		"OrgMembership",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OwnerTable,
			Columns: []string{orgmodule.OwnerColumn},
			Bidi:    false,
		},
		"OrgModule",
		"Organization",
	)
	graph.MustAddE(
		"org_subscription",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OrgSubscriptionTable,
			Columns: []string{orgmodule.OrgSubscriptionColumn},
			Bidi:    false,
		},
		"OrgModule",
		"OrgSubscription",
	)
	graph.MustAddE(
		"org_products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
		},
		"OrgModule",
		"OrgProduct",
	)
	graph.MustAddE(
		"org_prices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
		},
		"OrgModule",
		"OrgPrice",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OwnerTable,
			Columns: []string{orgprice.OwnerColumn},
			Bidi:    false,
		},
		"OrgPrice",
		"Organization",
	)
	graph.MustAddE(
		"org_products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgProductsTable,
			Columns: orgprice.OrgProductsPrimaryKey,
			Bidi:    false,
		},
		"OrgPrice",
		"OrgProduct",
	)
	graph.MustAddE(
		"org_modules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgModulesTable,
			Columns: orgprice.OrgModulesPrimaryKey,
			Bidi:    false,
		},
		"OrgPrice",
		"OrgModule",
	)
	graph.MustAddE(
		"org_subscription",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OrgSubscriptionTable,
			Columns: []string{orgprice.OrgSubscriptionColumn},
			Bidi:    false,
		},
		"OrgPrice",
		"OrgSubscription",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OwnerTable,
			Columns: []string{orgproduct.OwnerColumn},
			Bidi:    false,
		},
		"OrgProduct",
		"Organization",
	)
	graph.MustAddE(
		"org_subscription",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OrgSubscriptionTable,
			Columns: []string{orgproduct.OrgSubscriptionColumn},
			Bidi:    false,
		},
		"OrgProduct",
		"OrgSubscription",
	)
	graph.MustAddE(
		"org_prices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgproduct.OrgPricesTable,
			Columns: orgproduct.OrgPricesPrimaryKey,
			Bidi:    false,
		},
		"OrgProduct",
		"OrgPrice",
	)
	graph.MustAddE(
		"org_modules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.OrgModulesTable,
			Columns: []string{orgproduct.OrgModulesColumn},
			Bidi:    false,
		},
		"OrgProduct",
		"OrgModule",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
		},
		"OrgSubscription",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgsubscription.EventsTable,
			Columns: orgsubscription.EventsPrimaryKey,
			Bidi:    false,
		},
		"OrgSubscription",
		"Event",
	)
	graph.MustAddE(
		"modules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ModulesTable,
			Columns: []string{orgsubscription.ModulesColumn},
			Bidi:    false,
		},
		"OrgSubscription",
		"OrgModule",
	)
	graph.MustAddE(
		"products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ProductsTable,
			Columns: []string{orgsubscription.ProductsColumn},
			Bidi:    false,
		},
		"OrgSubscription",
		"OrgProduct",
	)
	graph.MustAddE(
		"prices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.PricesTable,
			Columns: []string{orgsubscription.PricesColumn},
			Bidi:    false,
		},
		"OrgSubscription",
		"OrgPrice",
	)
	graph.MustAddE(
		"control_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"control_implementation_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"control_objective_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"evidence_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"group_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"internal_policy_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"mapped_control_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"narrative_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"procedure_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"program_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"risk_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"scheduled_job_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"standard_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"template_creators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
		},
		"Organization",
		"OrganizationSetting",
	)
	graph.MustAddE(
		"personal_access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"api_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
		},
		"Organization",
		"APIToken",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"File",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"Event",
	)
	graph.MustAddE(
		"secrets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
		},
		"Organization",
		"Hush",
	)
	graph.MustAddE(
		"avatar_file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.AvatarFileTable,
			Columns: []string{organization.AvatarFileColumn},
			Bidi:    false,
		},
		"Organization",
		"File",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"templates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
		},
		"Organization",
		"Template",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
		},
		"Organization",
		"Integration",
	)
	graph.MustAddE(
		"documents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
		},
		"Organization",
		"DocumentData",
	)
	graph.MustAddE(
		"org_subscriptions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgSubscription",
	)
	graph.MustAddE(
		"org_products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgProduct",
	)
	graph.MustAddE(
		"org_prices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgPrice",
	)
	graph.MustAddE(
		"org_modules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgModule",
	)
	graph.MustAddE(
		"invites",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
		},
		"Organization",
		"Invite",
	)
	graph.MustAddE(
		"subscribers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
		},
		"Organization",
		"Subscriber",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
		},
		"Organization",
		"Entity",
	)
	graph.MustAddE(
		"entity_types",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
		},
		"Organization",
		"EntityType",
	)
	graph.MustAddE(
		"contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
		},
		"Organization",
		"Contact",
	)
	graph.MustAddE(
		"notes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
		},
		"Organization",
		"Note",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
		},
		"Organization",
		"Task",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
		},
		"Organization",
		"Program",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
		},
		"Organization",
		"Procedure",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
		},
		"Organization",
		"InternalPolicy",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
		},
		"Organization",
		"Risk",
	)
	graph.MustAddE(
		"control_objectives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
		},
		"Organization",
		"ControlObjective",
	)
	graph.MustAddE(
		"narratives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
		},
		"Organization",
		"Narrative",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
		},
		"Organization",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
		},
		"Organization",
		"Subcontrol",
	)
	graph.MustAddE(
		"control_implementations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
		},
		"Organization",
		"ControlImplementation",
	)
	graph.MustAddE(
		"mapped_controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
		},
		"Organization",
		"MappedControl",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
		},
		"Organization",
		"Evidence",
	)
	graph.MustAddE(
		"standards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
		},
		"Organization",
		"Standard",
	)
	graph.MustAddE(
		"action_plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
		},
		"Organization",
		"ActionPlan",
	)
	graph.MustAddE(
		"custom_domains",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
		},
		"Organization",
		"CustomDomain",
	)
	graph.MustAddE(
		"job_runners",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
		},
		"Organization",
		"JobRunner",
	)
	graph.MustAddE(
		"job_runner_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
		},
		"Organization",
		"JobRunnerToken",
	)
	graph.MustAddE(
		"job_runner_registration_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
		},
		"Organization",
		"JobRunnerRegistrationToken",
	)
	graph.MustAddE(
		"dns_verifications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
		},
		"Organization",
		"DNSVerification",
	)
	graph.MustAddE(
		"job_templates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
		},
		"Organization",
		"JobTemplate",
	)
	graph.MustAddE(
		"scheduled_jobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
		},
		"Organization",
		"ScheduledJob",
	)
	graph.MustAddE(
		"job_results",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
		},
		"Organization",
		"JobResult",
	)
	graph.MustAddE(
		"scheduled_job_runs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
		},
		"Organization",
		"ScheduledJobRun",
	)
	graph.MustAddE(
		"trust_centers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
		},
		"Organization",
		"TrustCenter",
	)
	graph.MustAddE(
		"assets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
		},
		"Organization",
		"Asset",
	)
	graph.MustAddE(
		"scans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
		},
		"Organization",
		"Scan",
	)
	graph.MustAddE(
		"subprocessors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
		},
		"Organization",
		"Subprocessor",
	)
	graph.MustAddE(
		"exports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
		},
		"Organization",
		"Export",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgMembership",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrganizationTable,
			Columns: []string{organizationsetting.OrganizationColumn},
			Bidi:    false,
		},
		"OrganizationSetting",
		"Organization",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
		},
		"OrganizationSetting",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresettoken.OwnerTable,
			Columns: []string{passwordresettoken.OwnerColumn},
			Bidi:    false,
		},
		"PasswordResetToken",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalaccesstoken.OwnerTable,
			Columns: []string{personalaccesstoken.OwnerColumn},
			Bidi:    false,
		},
		"PersonalAccessToken",
		"User",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personalaccesstoken.OrganizationsTable,
			Columns: personalaccesstoken.OrganizationsPrimaryKey,
			Bidi:    false,
		},
		"PersonalAccessToken",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalaccesstoken.EventsTable,
			Columns: personalaccesstoken.EventsPrimaryKey,
			Bidi:    false,
		},
		"PersonalAccessToken",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
		},
		"Procedure",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Group",
	)
	graph.MustAddE(
		"approver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
		},
		"Procedure",
		"Group",
	)
	graph.MustAddE(
		"delegate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
		},
		"Procedure",
		"Group",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Subcontrol",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"InternalPolicy",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Program",
	)
	graph.MustAddE(
		"narratives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Narrative",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Risk",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
		},
		"Procedure",
		"Task",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.OwnerTable,
			Columns: []string{program.OwnerColumn},
			Bidi:    false,
		},
		"Program",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.BlockedGroupsTable,
			Columns: program.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.EditorsTable,
			Columns: program.EditorsPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ViewersTable,
			Columns: program.ViewersPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Group",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: []string{program.SubcontrolsColumn},
			Bidi:    false,
		},
		"Program",
		"Subcontrol",
	)
	graph.MustAddE(
		"control_objectives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlObjectivesTable,
			Columns: program.ControlObjectivesPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"ControlObjective",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.InternalPoliciesTable,
			Columns: program.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"InternalPolicy",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Procedure",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Risk",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Task",
	)
	graph.MustAddE(
		"notes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: []string{program.NotesColumn},
			Bidi:    false,
		},
		"Program",
		"Note",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"File",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.EvidenceTable,
			Columns: program.EvidencePrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Evidence",
	)
	graph.MustAddE(
		"narratives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"Narrative",
	)
	graph.MustAddE(
		"action_plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionPlansTable,
			Columns: program.ActionPlansPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"ActionPlan",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
		},
		"Program",
		"User",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
		},
		"Program",
		"ProgramMembership",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.ProgramTable,
			Columns: []string{programmembership.ProgramColumn},
			Bidi:    false,
		},
		"ProgramMembership",
		"Program",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UserTable,
			Columns: []string{programmembership.UserColumn},
			Bidi:    false,
		},
		"ProgramMembership",
		"User",
	)
	graph.MustAddE(
		"org_membership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.OrgMembershipTable,
			Columns: []string{programmembership.OrgMembershipColumn},
			Bidi:    false,
		},
		"ProgramMembership",
		"OrgMembership",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.OwnerTable,
			Columns: []string{risk.OwnerColumn},
			Bidi:    false,
		},
		"Risk",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Group",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Subcontrol",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Procedure",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"InternalPolicy",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Program",
	)
	graph.MustAddE(
		"action_plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"ActionPlan",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.TasksTable,
			Columns: risk.TasksPrimaryKey,
			Bidi:    false,
		},
		"Risk",
		"Task",
	)
	graph.MustAddE(
		"assets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.AssetsTable,
			Columns: []string{risk.AssetsColumn},
			Bidi:    false,
		},
		"Risk",
		"Asset",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.EntitiesTable,
			Columns: []string{risk.EntitiesColumn},
			Bidi:    false,
		},
		"Risk",
		"Entity",
	)
	graph.MustAddE(
		"scans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.ScansTable,
			Columns: []string{risk.ScansColumn},
			Bidi:    false,
		},
		"Risk",
		"Scan",
	)
	graph.MustAddE(
		"stakeholder",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
		},
		"Risk",
		"Group",
	)
	graph.MustAddE(
		"delegate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
		},
		"Risk",
		"Group",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
		},
		"Scan",
		"Organization",
	)
	graph.MustAddE(
		"blocked_groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
		},
		"Scan",
		"Group",
	)
	graph.MustAddE(
		"editors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
		},
		"Scan",
		"Group",
	)
	graph.MustAddE(
		"viewers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
		},
		"Scan",
		"Group",
	)
	graph.MustAddE(
		"assets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
		},
		"Scan",
		"Asset",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
		},
		"Scan",
		"Entity",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.OwnerTable,
			Columns: []string{scheduledjob.OwnerColumn},
			Bidi:    false,
		},
		"ScheduledJob",
		"Organization",
	)
	graph.MustAddE(
		"job_template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.JobTemplateTable,
			Columns: []string{scheduledjob.JobTemplateColumn},
			Bidi:    false,
		},
		"ScheduledJob",
		"JobTemplate",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.ControlsTable,
			Columns: scheduledjob.ControlsPrimaryKey,
			Bidi:    false,
		},
		"ScheduledJob",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.SubcontrolsTable,
			Columns: scheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"ScheduledJob",
		"Subcontrol",
	)
	graph.MustAddE(
		"job_runner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjob.JobRunnerTable,
			Columns: []string{scheduledjob.JobRunnerColumn},
			Bidi:    false,
		},
		"ScheduledJob",
		"JobRunner",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjobrun.OwnerTable,
			Columns: []string{scheduledjobrun.OwnerColumn},
			Bidi:    false,
		},
		"ScheduledJobRun",
		"Organization",
	)
	graph.MustAddE(
		"scheduled_job",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjobrun.ScheduledJobTable,
			Columns: []string{scheduledjobrun.ScheduledJobColumn},
			Bidi:    false,
		},
		"ScheduledJobRun",
		"ScheduledJob",
	)
	graph.MustAddE(
		"job_runner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjobrun.JobRunnerTable,
			Columns: []string{scheduledjobrun.JobRunnerColumn},
			Bidi:    false,
		},
		"ScheduledJobRun",
		"JobRunner",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   standard.OwnerTable,
			Columns: []string{standard.OwnerColumn},
			Bidi:    false,
		},
		"Standard",
		"Organization",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: []string{standard.ControlsColumn},
			Bidi:    false,
		},
		"Standard",
		"Control",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"Evidence",
	)
	graph.MustAddE(
		"control_objectives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"ControlObjective",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"Task",
	)
	graph.MustAddE(
		"narratives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
		},
		"Subcontrol",
		"Narrative",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: subcontrol.RisksPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"Risk",
	)
	graph.MustAddE(
		"action_plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
		},
		"Subcontrol",
		"ActionPlan",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: subcontrol.ProceduresPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"Procedure",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: subcontrol.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"InternalPolicy",
	)
	graph.MustAddE(
		"control_owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
		},
		"Subcontrol",
		"Group",
	)
	graph.MustAddE(
		"delegate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
		},
		"Subcontrol",
		"Group",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.OwnerTable,
			Columns: []string{subcontrol.OwnerColumn},
			Bidi:    false,
		},
		"Subcontrol",
		"Organization",
	)
	graph.MustAddE(
		"control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
		},
		"Subcontrol",
		"Control",
	)
	graph.MustAddE(
		"control_implementations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlImplementationsTable,
			Columns: subcontrol.ControlImplementationsPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"ControlImplementation",
	)
	graph.MustAddE(
		"scheduled_jobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ScheduledJobsTable,
			Columns: subcontrol.ScheduledJobsPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"ScheduledJob",
	)
	graph.MustAddE(
		"mapped_to_subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedToSubcontrolsTable,
			Columns: subcontrol.MappedToSubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"MappedControl",
	)
	graph.MustAddE(
		"mapped_from_subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedFromSubcontrolsTable,
			Columns: subcontrol.MappedFromSubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"Subcontrol",
		"MappedControl",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subprocessor.OwnerTable,
			Columns: []string{subprocessor.OwnerColumn},
			Bidi:    false,
		},
		"Subprocessor",
		"Organization",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
		},
		"Subprocessor",
		"File",
	)
	graph.MustAddE(
		"logo_file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subprocessor.LogoFileTable,
			Columns: []string{subprocessor.LogoFileColumn},
			Bidi:    false,
		},
		"Subprocessor",
		"File",
	)
	graph.MustAddE(
		"trust_center_subprocessors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subprocessor.TrustCenterSubprocessorsTable,
			Columns: []string{subprocessor.TrustCenterSubprocessorsColumn},
			Bidi:    false,
		},
		"Subprocessor",
		"TrustCenterSubprocessor",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriber.OwnerTable,
			Columns: []string{subscriber.OwnerColumn},
			Bidi:    false,
		},
		"Subscriber",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
		},
		"Subscriber",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tfasetting.OwnerTable,
			Columns: []string{tfasetting.OwnerColumn},
			Bidi:    false,
		},
		"TFASetting",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OwnerTable,
			Columns: []string{task.OwnerColumn},
			Bidi:    false,
		},
		"Task",
		"Organization",
	)
	graph.MustAddE(
		"assigner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssignerTable,
			Columns: []string{task.AssignerColumn},
			Bidi:    false,
		},
		"Task",
		"User",
	)
	graph.MustAddE(
		"assignee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
		},
		"Task",
		"User",
	)
	graph.MustAddE(
		"comments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
		},
		"Task",
		"Note",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupsTable,
			Columns: task.GroupsPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Group",
	)
	graph.MustAddE(
		"internal_policies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.InternalPoliciesTable,
			Columns: task.InternalPoliciesPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"InternalPolicy",
	)
	graph.MustAddE(
		"procedures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProceduresTable,
			Columns: task.ProceduresPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Procedure",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlsTable,
			Columns: task.ControlsPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Control",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolsTable,
			Columns: task.SubcontrolsPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Subcontrol",
	)
	graph.MustAddE(
		"control_objectives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectivesTable,
			Columns: task.ControlObjectivesPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"ControlObjective",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramsTable,
			Columns: task.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Program",
	)
	graph.MustAddE(
		"risks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.RisksTable,
			Columns: task.RisksPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Risk",
	)
	graph.MustAddE(
		"control_implementations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlImplementationsTable,
			Columns: task.ControlImplementationsPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"ControlImplementation",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.EvidenceTable,
			Columns: task.EvidencePrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Evidence",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   template.OwnerTable,
			Columns: []string{template.OwnerColumn},
			Bidi:    false,
		},
		"Template",
		"Organization",
	)
	graph.MustAddE(
		"documents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.DocumentsTable,
			Columns: []string{template.DocumentsColumn},
			Bidi:    false,
		},
		"Template",
		"DocumentData",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   template.FilesTable,
			Columns: template.FilesPrimaryKey,
			Bidi:    false,
		},
		"Template",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
		},
		"TrustCenter",
		"Organization",
	)
	graph.MustAddE(
		"custom_domain",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
		},
		"TrustCenter",
		"CustomDomain",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
		},
		"TrustCenter",
		"TrustCenterSetting",
	)
	graph.MustAddE(
		"trust_center_subprocessors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
		},
		"TrustCenter",
		"TrustCenterSubprocessor",
	)
	graph.MustAddE(
		"trust_center",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
		},
		"TrustCenterSetting",
		"TrustCenter",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   trustcentersetting.FilesTable,
			Columns: trustcentersetting.FilesPrimaryKey,
			Bidi:    false,
		},
		"TrustCenterSetting",
		"File",
	)
	graph.MustAddE(
		"logo_file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.LogoFileTable,
			Columns: []string{trustcentersetting.LogoFileColumn},
			Bidi:    false,
		},
		"TrustCenterSetting",
		"File",
	)
	graph.MustAddE(
		"favicon_file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.FaviconFileTable,
			Columns: []string{trustcentersetting.FaviconFileColumn},
			Bidi:    false,
		},
		"TrustCenterSetting",
		"File",
	)
	graph.MustAddE(
		"trust_center",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.TrustCenterTable,
			Columns: []string{trustcentersubprocessor.TrustCenterColumn},
			Bidi:    false,
		},
		"TrustCenterSubprocessor",
		"TrustCenter",
	)
	graph.MustAddE(
		"subprocessor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.SubprocessorTable,
			Columns: []string{trustcentersubprocessor.SubprocessorColumn},
			Bidi:    false,
		},
		"TrustCenterSubprocessor",
		"Subprocessor",
	)
	graph.MustAddE(
		"personal_access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
		},
		"User",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"tfa_settings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TfaSettingsTable,
			Columns: []string{user.TfaSettingsColumn},
			Bidi:    false,
		},
		"User",
		"TFASetting",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
		},
		"User",
		"UserSetting",
	)
	graph.MustAddE(
		"email_verification_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
		},
		"User",
		"EmailVerificationToken",
	)
	graph.MustAddE(
		"password_reset_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
		},
		"User",
		"PasswordResetToken",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Group",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	graph.MustAddE(
		"webauthns",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnsTable,
			Columns: []string{user.WebauthnsColumn},
			Bidi:    false,
		},
		"User",
		"Webauthn",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: user.FilesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"File",
	)
	graph.MustAddE(
		"avatar_file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.AvatarFileTable,
			Columns: []string{user.AvatarFileColumn},
			Bidi:    false,
		},
		"User",
		"File",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Event",
	)
	graph.MustAddE(
		"action_plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActionPlansTable,
			Columns: []string{user.ActionPlansColumn},
			Bidi:    false,
		},
		"User",
		"ActionPlan",
	)
	graph.MustAddE(
		"subcontrols",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubcontrolsTable,
			Columns: []string{user.SubcontrolsColumn},
			Bidi:    false,
		},
		"User",
		"Subcontrol",
	)
	graph.MustAddE(
		"assigner_tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignerTasksTable,
			Columns: []string{user.AssignerTasksColumn},
			Bidi:    false,
		},
		"User",
		"Task",
	)
	graph.MustAddE(
		"assignee_tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssigneeTasksTable,
			Columns: []string{user.AssigneeTasksColumn},
			Bidi:    false,
		},
		"User",
		"Task",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ProgramsTable,
			Columns: user.ProgramsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Program",
	)
	graph.MustAddE(
		"group_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
		},
		"User",
		"GroupMembership",
	)
	graph.MustAddE(
		"org_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
		},
		"User",
		"OrgMembership",
	)
	graph.MustAddE(
		"program_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProgramMembershipsTable,
			Columns: []string{user.ProgramMembershipsColumn},
			Bidi:    false,
		},
		"User",
		"ProgramMembership",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
		},
		"UserSetting",
		"User",
	)
	graph.MustAddE(
		"default_org",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersetting.DefaultOrgTable,
			Columns: []string{usersetting.DefaultOrgColumn},
			Bidi:    false,
		},
		"UserSetting",
		"Organization",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
		},
		"UserSetting",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
		},
		"Webauthn",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *APITokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the APITokenQuery builder.
func (_q *APITokenQuery) Filter() *APITokenFilter {
	return &APITokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *APITokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the APITokenMutation builder.
func (m *APITokenMutation) Filter() *APITokenFilter {
	return &APITokenFilter{config: m.config, predicateAdder: m}
}

// APITokenFilter provides a generic filtering capability at runtime for APITokenQuery.
type APITokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *APITokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *APITokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *APITokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *APITokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *APITokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *APITokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *APITokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *APITokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *APITokenFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(apitoken.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *APITokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *APITokenFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldName))
}

// WhereToken applies the entql string predicate on the token field.
func (f *APITokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *APITokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldExpiresAt))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *APITokenFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldDescription))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *APITokenFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(apitoken.FieldScopes))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *APITokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldLastUsedAt))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *APITokenFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(apitoken.FieldIsActive))
}

// WhereRevokedReason applies the entql string predicate on the revoked_reason field.
func (f *APITokenFilter) WhereRevokedReason(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldRevokedReason))
}

// WhereRevokedBy applies the entql string predicate on the revoked_by field.
func (f *APITokenFilter) WhereRevokedBy(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldRevokedBy))
}

// WhereRevokedAt applies the entql time.Time predicate on the revoked_at field.
func (f *APITokenFilter) WhereRevokedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldRevokedAt))
}

// WhereSSOAuthorizations applies the entql json.RawMessage predicate on the sso_authorizations field.
func (f *APITokenFilter) WhereSSOAuthorizations(p entql.BytesP) {
	f.Where(p.Field(apitoken.FieldSSOAuthorizations))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *APITokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *APITokenFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ActionPlanQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ActionPlanQuery builder.
func (_q *ActionPlanQuery) Filter() *ActionPlanFilter {
	return &ActionPlanFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ActionPlanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ActionPlanMutation builder.
func (m *ActionPlanMutation) Filter() *ActionPlanFilter {
	return &ActionPlanFilter{config: m.config, predicateAdder: m}
}

// ActionPlanFilter provides a generic filtering capability at runtime for ActionPlanQuery.
type ActionPlanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ActionPlanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ActionPlanFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ActionPlanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(actionplan.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ActionPlanFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(actionplan.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ActionPlanFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ActionPlanFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ActionPlanFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(actionplan.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ActionPlanFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ActionPlanFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(actionplan.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *ActionPlanFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldRevision))
}

// WhereName applies the entql string predicate on the name field.
func (f *ActionPlanFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ActionPlanFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldStatus))
}

// WhereActionPlanType applies the entql string predicate on the action_plan_type field.
func (f *ActionPlanFilter) WhereActionPlanType(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldActionPlanType))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *ActionPlanFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldDetails))
}

// WhereApprovalRequired applies the entql bool predicate on the approval_required field.
func (f *ActionPlanFilter) WhereApprovalRequired(p entql.BoolP) {
	f.Where(p.Field(actionplan.FieldApprovalRequired))
}

// WhereReviewDue applies the entql time.Time predicate on the review_due field.
func (f *ActionPlanFilter) WhereReviewDue(p entql.TimeP) {
	f.Where(p.Field(actionplan.FieldReviewDue))
}

// WhereReviewFrequency applies the entql string predicate on the review_frequency field.
func (f *ActionPlanFilter) WhereReviewFrequency(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldReviewFrequency))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *ActionPlanFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldApproverID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *ActionPlanFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldDelegateID))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *ActionPlanFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldSummary))
}

// WhereTagSuggestions applies the entql json.RawMessage predicate on the tag_suggestions field.
func (f *ActionPlanFilter) WhereTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplan.FieldTagSuggestions))
}

// WhereDismissedTagSuggestions applies the entql json.RawMessage predicate on the dismissed_tag_suggestions field.
func (f *ActionPlanFilter) WhereDismissedTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplan.FieldDismissedTagSuggestions))
}

// WhereControlSuggestions applies the entql json.RawMessage predicate on the control_suggestions field.
func (f *ActionPlanFilter) WhereControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplan.FieldControlSuggestions))
}

// WhereDismissedControlSuggestions applies the entql json.RawMessage predicate on the dismissed_control_suggestions field.
func (f *ActionPlanFilter) WhereDismissedControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplan.FieldDismissedControlSuggestions))
}

// WhereImprovementSuggestions applies the entql json.RawMessage predicate on the improvement_suggestions field.
func (f *ActionPlanFilter) WhereImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplan.FieldImprovementSuggestions))
}

// WhereDismissedImprovementSuggestions applies the entql json.RawMessage predicate on the dismissed_improvement_suggestions field.
func (f *ActionPlanFilter) WhereDismissedImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplan.FieldDismissedImprovementSuggestions))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ActionPlanFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldOwnerID))
}

// WhereDueDate applies the entql time.Time predicate on the due_date field.
func (f *ActionPlanFilter) WhereDueDate(p entql.TimeP) {
	f.Where(p.Field(actionplan.FieldDueDate))
}

// WherePriority applies the entql string predicate on the priority field.
func (f *ActionPlanFilter) WherePriority(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldPriority))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ActionPlanFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(actionplan.FieldSource))
}

// WhereHasApprover applies a predicate to check if query has an edge approver.
func (f *ActionPlanFilter) WhereHasApprover() {
	f.Where(entql.HasEdge("approver"))
}

// WhereHasApproverWith applies a predicate to check if query has an edge approver with a given conditions (other predicates).
func (f *ActionPlanFilter) WhereHasApproverWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("approver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDelegate applies a predicate to check if query has an edge delegate.
func (f *ActionPlanFilter) WhereHasDelegate() {
	f.Where(entql.HasEdge("delegate"))
}

// WhereHasDelegateWith applies a predicate to check if query has an edge delegate with a given conditions (other predicates).
func (f *ActionPlanFilter) WhereHasDelegateWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("delegate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ActionPlanFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ActionPlanFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *ActionPlanFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *ActionPlanFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *ActionPlanFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *ActionPlanFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *ActionPlanFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *ActionPlanFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ActionPlanHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ActionPlanHistoryQuery builder.
func (_q *ActionPlanHistoryQuery) Filter() *ActionPlanHistoryFilter {
	return &ActionPlanHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ActionPlanHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ActionPlanHistoryMutation builder.
func (m *ActionPlanHistoryMutation) Filter() *ActionPlanHistoryFilter {
	return &ActionPlanHistoryFilter{config: m.config, predicateAdder: m}
}

// ActionPlanHistoryFilter provides a generic filtering capability at runtime for ActionPlanHistoryQuery.
type ActionPlanHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ActionPlanHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ActionPlanHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ActionPlanHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(actionplanhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ActionPlanHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ActionPlanHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ActionPlanHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(actionplanhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ActionPlanHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(actionplanhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ActionPlanHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ActionPlanHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ActionPlanHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(actionplanhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ActionPlanHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ActionPlanHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(actionplanhistory.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *ActionPlanHistoryFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldRevision))
}

// WhereName applies the entql string predicate on the name field.
func (f *ActionPlanHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ActionPlanHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldStatus))
}

// WhereActionPlanType applies the entql string predicate on the action_plan_type field.
func (f *ActionPlanHistoryFilter) WhereActionPlanType(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldActionPlanType))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *ActionPlanHistoryFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldDetails))
}

// WhereApprovalRequired applies the entql bool predicate on the approval_required field.
func (f *ActionPlanHistoryFilter) WhereApprovalRequired(p entql.BoolP) {
	f.Where(p.Field(actionplanhistory.FieldApprovalRequired))
}

// WhereReviewDue applies the entql time.Time predicate on the review_due field.
func (f *ActionPlanHistoryFilter) WhereReviewDue(p entql.TimeP) {
	f.Where(p.Field(actionplanhistory.FieldReviewDue))
}

// WhereReviewFrequency applies the entql string predicate on the review_frequency field.
func (f *ActionPlanHistoryFilter) WhereReviewFrequency(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldReviewFrequency))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *ActionPlanHistoryFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldApproverID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *ActionPlanHistoryFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldDelegateID))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *ActionPlanHistoryFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldSummary))
}

// WhereTagSuggestions applies the entql json.RawMessage predicate on the tag_suggestions field.
func (f *ActionPlanHistoryFilter) WhereTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplanhistory.FieldTagSuggestions))
}

// WhereDismissedTagSuggestions applies the entql json.RawMessage predicate on the dismissed_tag_suggestions field.
func (f *ActionPlanHistoryFilter) WhereDismissedTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplanhistory.FieldDismissedTagSuggestions))
}

// WhereControlSuggestions applies the entql json.RawMessage predicate on the control_suggestions field.
func (f *ActionPlanHistoryFilter) WhereControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplanhistory.FieldControlSuggestions))
}

// WhereDismissedControlSuggestions applies the entql json.RawMessage predicate on the dismissed_control_suggestions field.
func (f *ActionPlanHistoryFilter) WhereDismissedControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplanhistory.FieldDismissedControlSuggestions))
}

// WhereImprovementSuggestions applies the entql json.RawMessage predicate on the improvement_suggestions field.
func (f *ActionPlanHistoryFilter) WhereImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplanhistory.FieldImprovementSuggestions))
}

// WhereDismissedImprovementSuggestions applies the entql json.RawMessage predicate on the dismissed_improvement_suggestions field.
func (f *ActionPlanHistoryFilter) WhereDismissedImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(actionplanhistory.FieldDismissedImprovementSuggestions))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ActionPlanHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldOwnerID))
}

// WhereDueDate applies the entql time.Time predicate on the due_date field.
func (f *ActionPlanHistoryFilter) WhereDueDate(p entql.TimeP) {
	f.Where(p.Field(actionplanhistory.FieldDueDate))
}

// WherePriority applies the entql string predicate on the priority field.
func (f *ActionPlanHistoryFilter) WherePriority(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldPriority))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ActionPlanHistoryFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(actionplanhistory.FieldSource))
}

// addPredicate implements the predicateAdder interface.
func (_q *AssetQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AssetQuery builder.
func (_q *AssetQuery) Filter() *AssetFilter {
	return &AssetFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AssetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AssetMutation builder.
func (m *AssetMutation) Filter() *AssetFilter {
	return &AssetFilter{config: m.config, predicateAdder: m}
}

// AssetFilter provides a generic filtering capability at runtime for AssetQuery.
type AssetFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AssetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AssetFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(asset.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AssetFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(asset.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AssetFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(asset.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *AssetFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(asset.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *AssetFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(asset.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AssetFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(asset.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *AssetFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(asset.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *AssetFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(asset.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *AssetFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(asset.FieldOwnerID))
}

// WhereAssetType applies the entql string predicate on the asset_type field.
func (f *AssetFilter) WhereAssetType(p entql.StringP) {
	f.Where(p.Field(asset.FieldAssetType))
}

// WhereName applies the entql string predicate on the name field.
func (f *AssetFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(asset.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AssetFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(asset.FieldDescription))
}

// WhereIdentifier applies the entql string predicate on the identifier field.
func (f *AssetFilter) WhereIdentifier(p entql.StringP) {
	f.Where(p.Field(asset.FieldIdentifier))
}

// WhereWebsite applies the entql string predicate on the website field.
func (f *AssetFilter) WhereWebsite(p entql.StringP) {
	f.Where(p.Field(asset.FieldWebsite))
}

// WhereCpe applies the entql string predicate on the cpe field.
func (f *AssetFilter) WhereCpe(p entql.StringP) {
	f.Where(p.Field(asset.FieldCpe))
}

// WhereCategories applies the entql json.RawMessage predicate on the categories field.
func (f *AssetFilter) WhereCategories(p entql.BytesP) {
	f.Where(p.Field(asset.FieldCategories))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *AssetFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *AssetFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *AssetFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *AssetFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *AssetFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *AssetFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *AssetFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *AssetFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScans applies a predicate to check if query has an edge scans.
func (f *AssetFilter) WhereHasScans() {
	f.Where(entql.HasEdge("scans"))
}

// WhereHasScansWith applies a predicate to check if query has an edge scans with a given conditions (other predicates).
func (f *AssetFilter) WhereHasScansWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *AssetFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *AssetFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *AssetFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *AssetFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AssetHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AssetHistoryQuery builder.
func (_q *AssetHistoryQuery) Filter() *AssetHistoryFilter {
	return &AssetHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AssetHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AssetHistoryMutation builder.
func (m *AssetHistoryMutation) Filter() *AssetHistoryFilter {
	return &AssetHistoryFilter{config: m.config, predicateAdder: m}
}

// AssetHistoryFilter provides a generic filtering capability at runtime for AssetHistoryQuery.
type AssetHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AssetHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AssetHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *AssetHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(assethistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *AssetHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *AssetHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AssetHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(assethistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AssetHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(assethistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *AssetHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *AssetHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AssetHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(assethistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *AssetHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *AssetHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(assethistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *AssetHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldOwnerID))
}

// WhereAssetType applies the entql string predicate on the asset_type field.
func (f *AssetHistoryFilter) WhereAssetType(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldAssetType))
}

// WhereName applies the entql string predicate on the name field.
func (f *AssetHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AssetHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldDescription))
}

// WhereIdentifier applies the entql string predicate on the identifier field.
func (f *AssetHistoryFilter) WhereIdentifier(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldIdentifier))
}

// WhereWebsite applies the entql string predicate on the website field.
func (f *AssetHistoryFilter) WhereWebsite(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldWebsite))
}

// WhereCpe applies the entql string predicate on the cpe field.
func (f *AssetHistoryFilter) WhereCpe(p entql.StringP) {
	f.Where(p.Field(assethistory.FieldCpe))
}

// WhereCategories applies the entql json.RawMessage predicate on the categories field.
func (f *AssetHistoryFilter) WhereCategories(p entql.BytesP) {
	f.Where(p.Field(assethistory.FieldCategories))
}

// addPredicate implements the predicateAdder interface.
func (_q *ContactQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContactQuery builder.
func (_q *ContactQuery) Filter() *ContactFilter {
	return &ContactFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ContactMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContactMutation builder.
func (m *ContactMutation) Filter() *ContactFilter {
	return &ContactFilter{config: m.config, predicateAdder: m}
}

// ContactFilter provides a generic filtering capability at runtime for ContactQuery.
type ContactFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContactFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ContactFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(contact.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContactFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contact.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContactFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contact.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ContactFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(contact.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ContactFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(contact.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContactFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contact.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ContactFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(contact.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ContactFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(contact.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ContactFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(contact.FieldOwnerID))
}

// WhereFullName applies the entql string predicate on the full_name field.
func (f *ContactFilter) WhereFullName(p entql.StringP) {
	f.Where(p.Field(contact.FieldFullName))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ContactFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(contact.FieldTitle))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *ContactFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(contact.FieldCompany))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *ContactFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(contact.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *ContactFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(contact.FieldPhoneNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *ContactFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(contact.FieldAddress))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ContactFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(contact.FieldStatus))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ContactFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ContactFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *ContactFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *ContactFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *ContactFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *ContactFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ContactHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContactHistoryQuery builder.
func (_q *ContactHistoryQuery) Filter() *ContactHistoryFilter {
	return &ContactHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ContactHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContactHistoryMutation builder.
func (m *ContactHistoryMutation) Filter() *ContactHistoryFilter {
	return &ContactHistoryFilter{config: m.config, predicateAdder: m}
}

// ContactHistoryFilter provides a generic filtering capability at runtime for ContactHistoryQuery.
type ContactHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContactHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ContactHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ContactHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ContactHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ContactHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContactHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContactHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ContactHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ContactHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContactHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ContactHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ContactHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(contacthistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ContactHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldOwnerID))
}

// WhereFullName applies the entql string predicate on the full_name field.
func (f *ContactHistoryFilter) WhereFullName(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldFullName))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ContactHistoryFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldTitle))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *ContactHistoryFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldCompany))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *ContactHistoryFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *ContactHistoryFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldPhoneNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *ContactHistoryFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldAddress))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ContactHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (_q *ControlQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ControlQuery builder.
func (_q *ControlQuery) Filter() *ControlFilter {
	return &ControlFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ControlMutation builder.
func (m *ControlMutation) Filter() *ControlFilter {
	return &ControlFilter{config: m.config, predicateAdder: m}
}

// ControlFilter provides a generic filtering capability at runtime for ControlQuery.
type ControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ControlFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(control.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(control.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(control.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ControlFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(control.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ControlFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(control.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ControlFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(control.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ControlFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(control.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ControlFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(control.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ControlFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(control.FieldTags))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ControlFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(control.FieldDescription))
}

// WhereReferenceID applies the entql string predicate on the reference_id field.
func (f *ControlFilter) WhereReferenceID(p entql.StringP) {
	f.Where(p.Field(control.FieldReferenceID))
}

// WhereAuditorReferenceID applies the entql string predicate on the auditor_reference_id field.
func (f *ControlFilter) WhereAuditorReferenceID(p entql.StringP) {
	f.Where(p.Field(control.FieldAuditorReferenceID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ControlFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(control.FieldStatus))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ControlFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(control.FieldSource))
}

// WhereReferenceFramework applies the entql string predicate on the reference_framework field.
func (f *ControlFilter) WhereReferenceFramework(p entql.StringP) {
	f.Where(p.Field(control.FieldReferenceFramework))
}

// WhereControlType applies the entql string predicate on the control_type field.
func (f *ControlFilter) WhereControlType(p entql.StringP) {
	f.Where(p.Field(control.FieldControlType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *ControlFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(control.FieldCategory))
}

// WhereCategoryID applies the entql string predicate on the category_id field.
func (f *ControlFilter) WhereCategoryID(p entql.StringP) {
	f.Where(p.Field(control.FieldCategoryID))
}

// WhereSubcategory applies the entql string predicate on the subcategory field.
func (f *ControlFilter) WhereSubcategory(p entql.StringP) {
	f.Where(p.Field(control.FieldSubcategory))
}

// WhereMappedCategories applies the entql json.RawMessage predicate on the mapped_categories field.
func (f *ControlFilter) WhereMappedCategories(p entql.BytesP) {
	f.Where(p.Field(control.FieldMappedCategories))
}

// WhereAssessmentObjectives applies the entql json.RawMessage predicate on the assessment_objectives field.
func (f *ControlFilter) WhereAssessmentObjectives(p entql.BytesP) {
	f.Where(p.Field(control.FieldAssessmentObjectives))
}

// WhereAssessmentMethods applies the entql json.RawMessage predicate on the assessment_methods field.
func (f *ControlFilter) WhereAssessmentMethods(p entql.BytesP) {
	f.Where(p.Field(control.FieldAssessmentMethods))
}

// WhereControlQuestions applies the entql json.RawMessage predicate on the control_questions field.
func (f *ControlFilter) WhereControlQuestions(p entql.BytesP) {
	f.Where(p.Field(control.FieldControlQuestions))
}

// WhereImplementationGuidance applies the entql json.RawMessage predicate on the implementation_guidance field.
func (f *ControlFilter) WhereImplementationGuidance(p entql.BytesP) {
	f.Where(p.Field(control.FieldImplementationGuidance))
}

// WhereExampleEvidence applies the entql json.RawMessage predicate on the example_evidence field.
func (f *ControlFilter) WhereExampleEvidence(p entql.BytesP) {
	f.Where(p.Field(control.FieldExampleEvidence))
}

// WhereReferences applies the entql json.RawMessage predicate on the references field.
func (f *ControlFilter) WhereReferences(p entql.BytesP) {
	f.Where(p.Field(control.FieldReferences))
}

// WhereControlOwnerID applies the entql string predicate on the control_owner_id field.
func (f *ControlFilter) WhereControlOwnerID(p entql.StringP) {
	f.Where(p.Field(control.FieldControlOwnerID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *ControlFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(control.FieldDelegateID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ControlFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(control.FieldOwnerID))
}

// WhereRefCode applies the entql string predicate on the ref_code field.
func (f *ControlFilter) WhereRefCode(p entql.StringP) {
	f.Where(p.Field(control.FieldRefCode))
}

// WhereStandardID applies the entql string predicate on the standard_id field.
func (f *ControlFilter) WhereStandardID(p entql.StringP) {
	f.Where(p.Field(control.FieldStandardID))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *ControlFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *ControlFilter) WhereHasEvidenceWith(preds ...predicate.Evidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectives applies a predicate to check if query has an edge control_objectives.
func (f *ControlFilter) WhereHasControlObjectives() {
	f.Where(entql.HasEdge("control_objectives"))
}

// WhereHasControlObjectivesWith applies a predicate to check if query has an edge control_objectives with a given conditions (other predicates).
func (f *ControlFilter) WhereHasControlObjectivesWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objectives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *ControlFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *ControlFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarratives applies a predicate to check if query has an edge narratives.
func (f *ControlFilter) WhereHasNarratives() {
	f.Where(entql.HasEdge("narratives"))
}

// WhereHasNarrativesWith applies a predicate to check if query has an edge narratives with a given conditions (other predicates).
func (f *ControlFilter) WhereHasNarrativesWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narratives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *ControlFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *ControlFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActionPlans applies a predicate to check if query has an edge action_plans.
func (f *ControlFilter) WhereHasActionPlans() {
	f.Where(entql.HasEdge("action_plans"))
}

// WhereHasActionPlansWith applies a predicate to check if query has an edge action_plans with a given conditions (other predicates).
func (f *ControlFilter) WhereHasActionPlansWith(preds ...predicate.ActionPlan) {
	f.Where(entql.HasEdgeWith("action_plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *ControlFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *ControlFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *ControlFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *ControlFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlOwner applies a predicate to check if query has an edge control_owner.
func (f *ControlFilter) WhereHasControlOwner() {
	f.Where(entql.HasEdge("control_owner"))
}

// WhereHasControlOwnerWith applies a predicate to check if query has an edge control_owner with a given conditions (other predicates).
func (f *ControlFilter) WhereHasControlOwnerWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("control_owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDelegate applies a predicate to check if query has an edge delegate.
func (f *ControlFilter) WhereHasDelegate() {
	f.Where(entql.HasEdge("delegate"))
}

// WhereHasDelegateWith applies a predicate to check if query has an edge delegate with a given conditions (other predicates).
func (f *ControlFilter) WhereHasDelegateWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("delegate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ControlFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ControlFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *ControlFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *ControlFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *ControlFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *ControlFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStandard applies a predicate to check if query has an edge standard.
func (f *ControlFilter) WhereHasStandard() {
	f.Where(entql.HasEdge("standard"))
}

// WhereHasStandardWith applies a predicate to check if query has an edge standard with a given conditions (other predicates).
func (f *ControlFilter) WhereHasStandardWith(preds ...predicate.Standard) {
	f.Where(entql.HasEdgeWith("standard", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *ControlFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *ControlFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssets applies a predicate to check if query has an edge assets.
func (f *ControlFilter) WhereHasAssets() {
	f.Where(entql.HasEdge("assets"))
}

// WhereHasAssetsWith applies a predicate to check if query has an edge assets with a given conditions (other predicates).
func (f *ControlFilter) WhereHasAssetsWith(preds ...predicate.Asset) {
	f.Where(entql.HasEdgeWith("assets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScans applies a predicate to check if query has an edge scans.
func (f *ControlFilter) WhereHasScans() {
	f.Where(entql.HasEdge("scans"))
}

// WhereHasScansWith applies a predicate to check if query has an edge scans with a given conditions (other predicates).
func (f *ControlFilter) WhereHasScansWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementations applies a predicate to check if query has an edge control_implementations.
func (f *ControlFilter) WhereHasControlImplementations() {
	f.Where(entql.HasEdge("control_implementations"))
}

// WhereHasControlImplementationsWith applies a predicate to check if query has an edge control_implementations with a given conditions (other predicates).
func (f *ControlFilter) WhereHasControlImplementationsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *ControlFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *ControlFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJobs applies a predicate to check if query has an edge scheduled_jobs.
func (f *ControlFilter) WhereHasScheduledJobs() {
	f.Where(entql.HasEdge("scheduled_jobs"))
}

// WhereHasScheduledJobsWith applies a predicate to check if query has an edge scheduled_jobs with a given conditions (other predicates).
func (f *ControlFilter) WhereHasScheduledJobsWith(preds ...predicate.ScheduledJob) {
	f.Where(entql.HasEdgeWith("scheduled_jobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedToControls applies a predicate to check if query has an edge mapped_to_controls.
func (f *ControlFilter) WhereHasMappedToControls() {
	f.Where(entql.HasEdge("mapped_to_controls"))
}

// WhereHasMappedToControlsWith applies a predicate to check if query has an edge mapped_to_controls with a given conditions (other predicates).
func (f *ControlFilter) WhereHasMappedToControlsWith(preds ...predicate.MappedControl) {
	f.Where(entql.HasEdgeWith("mapped_to_controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedFromControls applies a predicate to check if query has an edge mapped_from_controls.
func (f *ControlFilter) WhereHasMappedFromControls() {
	f.Where(entql.HasEdge("mapped_from_controls"))
}

// WhereHasMappedFromControlsWith applies a predicate to check if query has an edge mapped_from_controls with a given conditions (other predicates).
func (f *ControlFilter) WhereHasMappedFromControlsWith(preds ...predicate.MappedControl) {
	f.Where(entql.HasEdgeWith("mapped_from_controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ControlHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ControlHistoryQuery builder.
func (_q *ControlHistoryQuery) Filter() *ControlHistoryFilter {
	return &ControlHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ControlHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ControlHistoryMutation builder.
func (m *ControlHistoryMutation) Filter() *ControlHistoryFilter {
	return &ControlHistoryFilter{config: m.config, predicateAdder: m}
}

// ControlHistoryFilter provides a generic filtering capability at runtime for ControlHistoryQuery.
type ControlHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ControlHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ControlHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ControlHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(controlhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ControlHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ControlHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ControlHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(controlhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ControlHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(controlhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ControlHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ControlHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ControlHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(controlhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ControlHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ControlHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ControlHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldTags))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ControlHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldDescription))
}

// WhereReferenceID applies the entql string predicate on the reference_id field.
func (f *ControlHistoryFilter) WhereReferenceID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldReferenceID))
}

// WhereAuditorReferenceID applies the entql string predicate on the auditor_reference_id field.
func (f *ControlHistoryFilter) WhereAuditorReferenceID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldAuditorReferenceID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ControlHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldStatus))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ControlHistoryFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldSource))
}

// WhereReferenceFramework applies the entql string predicate on the reference_framework field.
func (f *ControlHistoryFilter) WhereReferenceFramework(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldReferenceFramework))
}

// WhereControlType applies the entql string predicate on the control_type field.
func (f *ControlHistoryFilter) WhereControlType(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldControlType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *ControlHistoryFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldCategory))
}

// WhereCategoryID applies the entql string predicate on the category_id field.
func (f *ControlHistoryFilter) WhereCategoryID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldCategoryID))
}

// WhereSubcategory applies the entql string predicate on the subcategory field.
func (f *ControlHistoryFilter) WhereSubcategory(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldSubcategory))
}

// WhereMappedCategories applies the entql json.RawMessage predicate on the mapped_categories field.
func (f *ControlHistoryFilter) WhereMappedCategories(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldMappedCategories))
}

// WhereAssessmentObjectives applies the entql json.RawMessage predicate on the assessment_objectives field.
func (f *ControlHistoryFilter) WhereAssessmentObjectives(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldAssessmentObjectives))
}

// WhereAssessmentMethods applies the entql json.RawMessage predicate on the assessment_methods field.
func (f *ControlHistoryFilter) WhereAssessmentMethods(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldAssessmentMethods))
}

// WhereControlQuestions applies the entql json.RawMessage predicate on the control_questions field.
func (f *ControlHistoryFilter) WhereControlQuestions(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldControlQuestions))
}

// WhereImplementationGuidance applies the entql json.RawMessage predicate on the implementation_guidance field.
func (f *ControlHistoryFilter) WhereImplementationGuidance(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldImplementationGuidance))
}

// WhereExampleEvidence applies the entql json.RawMessage predicate on the example_evidence field.
func (f *ControlHistoryFilter) WhereExampleEvidence(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldExampleEvidence))
}

// WhereReferences applies the entql json.RawMessage predicate on the references field.
func (f *ControlHistoryFilter) WhereReferences(p entql.BytesP) {
	f.Where(p.Field(controlhistory.FieldReferences))
}

// WhereControlOwnerID applies the entql string predicate on the control_owner_id field.
func (f *ControlHistoryFilter) WhereControlOwnerID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldControlOwnerID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *ControlHistoryFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldDelegateID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ControlHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldOwnerID))
}

// WhereRefCode applies the entql string predicate on the ref_code field.
func (f *ControlHistoryFilter) WhereRefCode(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldRefCode))
}

// WhereStandardID applies the entql string predicate on the standard_id field.
func (f *ControlHistoryFilter) WhereStandardID(p entql.StringP) {
	f.Where(p.Field(controlhistory.FieldStandardID))
}

// addPredicate implements the predicateAdder interface.
func (_q *ControlImplementationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ControlImplementationQuery builder.
func (_q *ControlImplementationQuery) Filter() *ControlImplementationFilter {
	return &ControlImplementationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ControlImplementationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ControlImplementationMutation builder.
func (m *ControlImplementationMutation) Filter() *ControlImplementationFilter {
	return &ControlImplementationFilter{config: m.config, predicateAdder: m}
}

// ControlImplementationFilter provides a generic filtering capability at runtime for ControlImplementationQuery.
type ControlImplementationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ControlImplementationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ControlImplementationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(controlimplementation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ControlImplementationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(controlimplementation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ControlImplementationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(controlimplementation.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ControlImplementationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(controlimplementation.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ControlImplementationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(controlimplementation.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ControlImplementationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(controlimplementation.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ControlImplementationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(controlimplementation.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ControlImplementationFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(controlimplementation.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ControlImplementationFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(controlimplementation.FieldOwnerID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ControlImplementationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(controlimplementation.FieldStatus))
}

// WhereImplementationDate applies the entql time.Time predicate on the implementation_date field.
func (f *ControlImplementationFilter) WhereImplementationDate(p entql.TimeP) {
	f.Where(p.Field(controlimplementation.FieldImplementationDate))
}

// WhereVerified applies the entql bool predicate on the verified field.
func (f *ControlImplementationFilter) WhereVerified(p entql.BoolP) {
	f.Where(p.Field(controlimplementation.FieldVerified))
}

// WhereVerificationDate applies the entql time.Time predicate on the verification_date field.
func (f *ControlImplementationFilter) WhereVerificationDate(p entql.TimeP) {
	f.Where(p.Field(controlimplementation.FieldVerificationDate))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *ControlImplementationFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(controlimplementation.FieldDetails))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ControlImplementationFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ControlImplementationFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *ControlImplementationFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *ControlImplementationFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *ControlImplementationFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *ControlImplementationFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *ControlImplementationFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *ControlImplementationFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *ControlImplementationFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *ControlImplementationFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *ControlImplementationFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *ControlImplementationFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *ControlImplementationFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *ControlImplementationFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ControlImplementationHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ControlImplementationHistoryQuery builder.
func (_q *ControlImplementationHistoryQuery) Filter() *ControlImplementationHistoryFilter {
	return &ControlImplementationHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ControlImplementationHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ControlImplementationHistoryMutation builder.
func (m *ControlImplementationHistoryMutation) Filter() *ControlImplementationHistoryFilter {
	return &ControlImplementationHistoryFilter{config: m.config, predicateAdder: m}
}

// ControlImplementationHistoryFilter provides a generic filtering capability at runtime for ControlImplementationHistoryQuery.
type ControlImplementationHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ControlImplementationHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ControlImplementationHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ControlImplementationHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(controlimplementationhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ControlImplementationHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ControlImplementationHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ControlImplementationHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(controlimplementationhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ControlImplementationHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(controlimplementationhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ControlImplementationHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ControlImplementationHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ControlImplementationHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(controlimplementationhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ControlImplementationHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ControlImplementationHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(controlimplementationhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ControlImplementationHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldOwnerID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ControlImplementationHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldStatus))
}

// WhereImplementationDate applies the entql time.Time predicate on the implementation_date field.
func (f *ControlImplementationHistoryFilter) WhereImplementationDate(p entql.TimeP) {
	f.Where(p.Field(controlimplementationhistory.FieldImplementationDate))
}

// WhereVerified applies the entql bool predicate on the verified field.
func (f *ControlImplementationHistoryFilter) WhereVerified(p entql.BoolP) {
	f.Where(p.Field(controlimplementationhistory.FieldVerified))
}

// WhereVerificationDate applies the entql time.Time predicate on the verification_date field.
func (f *ControlImplementationHistoryFilter) WhereVerificationDate(p entql.TimeP) {
	f.Where(p.Field(controlimplementationhistory.FieldVerificationDate))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *ControlImplementationHistoryFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(controlimplementationhistory.FieldDetails))
}

// addPredicate implements the predicateAdder interface.
func (_q *ControlObjectiveQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ControlObjectiveQuery builder.
func (_q *ControlObjectiveQuery) Filter() *ControlObjectiveFilter {
	return &ControlObjectiveFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ControlObjectiveMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ControlObjectiveMutation builder.
func (m *ControlObjectiveMutation) Filter() *ControlObjectiveFilter {
	return &ControlObjectiveFilter{config: m.config, predicateAdder: m}
}

// ControlObjectiveFilter provides a generic filtering capability at runtime for ControlObjectiveQuery.
type ControlObjectiveFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ControlObjectiveFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ControlObjectiveFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ControlObjectiveFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(controlobjective.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ControlObjectiveFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(controlobjective.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ControlObjectiveFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ControlObjectiveFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ControlObjectiveFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(controlobjective.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ControlObjectiveFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ControlObjectiveFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ControlObjectiveFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(controlobjective.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *ControlObjectiveFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ControlObjectiveFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ControlObjectiveFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldName))
}

// WhereDesiredOutcome applies the entql string predicate on the desired_outcome field.
func (f *ControlObjectiveFilter) WhereDesiredOutcome(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldDesiredOutcome))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ControlObjectiveFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldStatus))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ControlObjectiveFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldSource))
}

// WhereControlObjectiveType applies the entql string predicate on the control_objective_type field.
func (f *ControlObjectiveFilter) WhereControlObjectiveType(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldControlObjectiveType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *ControlObjectiveFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldCategory))
}

// WhereSubcategory applies the entql string predicate on the subcategory field.
func (f *ControlObjectiveFilter) WhereSubcategory(p entql.StringP) {
	f.Where(p.Field(controlobjective.FieldSubcategory))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ControlObjectiveFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *ControlObjectiveFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *ControlObjectiveFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *ControlObjectiveFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *ControlObjectiveFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *ControlObjectiveFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasEvidenceWith(preds ...predicate.Evidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *ControlObjectiveFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *ControlObjectiveFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *ControlObjectiveFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *ControlObjectiveFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *ControlObjectiveFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarratives applies a predicate to check if query has an edge narratives.
func (f *ControlObjectiveFilter) WhereHasNarratives() {
	f.Where(entql.HasEdge("narratives"))
}

// WhereHasNarrativesWith applies a predicate to check if query has an edge narratives with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasNarrativesWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narratives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *ControlObjectiveFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *ControlObjectiveFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ControlObjectiveHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ControlObjectiveHistoryQuery builder.
func (_q *ControlObjectiveHistoryQuery) Filter() *ControlObjectiveHistoryFilter {
	return &ControlObjectiveHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ControlObjectiveHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ControlObjectiveHistoryMutation builder.
func (m *ControlObjectiveHistoryMutation) Filter() *ControlObjectiveHistoryFilter {
	return &ControlObjectiveHistoryFilter{config: m.config, predicateAdder: m}
}

// ControlObjectiveHistoryFilter provides a generic filtering capability at runtime for ControlObjectiveHistoryQuery.
type ControlObjectiveHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ControlObjectiveHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ControlObjectiveHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ControlObjectiveHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(controlobjectivehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ControlObjectiveHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ControlObjectiveHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ControlObjectiveHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(controlobjectivehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ControlObjectiveHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(controlobjectivehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ControlObjectiveHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ControlObjectiveHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ControlObjectiveHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(controlobjectivehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ControlObjectiveHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ControlObjectiveHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ControlObjectiveHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(controlobjectivehistory.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *ControlObjectiveHistoryFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ControlObjectiveHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ControlObjectiveHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldName))
}

// WhereDesiredOutcome applies the entql string predicate on the desired_outcome field.
func (f *ControlObjectiveHistoryFilter) WhereDesiredOutcome(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldDesiredOutcome))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ControlObjectiveHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldStatus))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ControlObjectiveHistoryFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldSource))
}

// WhereControlObjectiveType applies the entql string predicate on the control_objective_type field.
func (f *ControlObjectiveHistoryFilter) WhereControlObjectiveType(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldControlObjectiveType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *ControlObjectiveHistoryFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldCategory))
}

// WhereSubcategory applies the entql string predicate on the subcategory field.
func (f *ControlObjectiveHistoryFilter) WhereSubcategory(p entql.StringP) {
	f.Where(p.Field(controlobjectivehistory.FieldSubcategory))
}

// addPredicate implements the predicateAdder interface.
func (_q *CustomDomainQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomDomainQuery builder.
func (_q *CustomDomainQuery) Filter() *CustomDomainFilter {
	return &CustomDomainFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomDomainMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomDomainMutation builder.
func (m *CustomDomainMutation) Filter() *CustomDomainFilter {
	return &CustomDomainFilter{config: m.config, predicateAdder: m}
}

// CustomDomainFilter provides a generic filtering capability at runtime for CustomDomainQuery.
type CustomDomainFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomDomainFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CustomDomainFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomDomainFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customdomain.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CustomDomainFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(customdomain.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *CustomDomainFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *CustomDomainFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CustomDomainFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(customdomain.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *CustomDomainFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *CustomDomainFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(customdomain.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *CustomDomainFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldOwnerID))
}

// WhereCnameRecord applies the entql string predicate on the cname_record field.
func (f *CustomDomainFilter) WhereCnameRecord(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldCnameRecord))
}

// WhereMappableDomainID applies the entql string predicate on the mappable_domain_id field.
func (f *CustomDomainFilter) WhereMappableDomainID(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldMappableDomainID))
}

// WhereDNSVerificationID applies the entql string predicate on the dns_verification_id field.
func (f *CustomDomainFilter) WhereDNSVerificationID(p entql.StringP) {
	f.Where(p.Field(customdomain.FieldDNSVerificationID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *CustomDomainFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *CustomDomainFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappableDomain applies a predicate to check if query has an edge mappable_domain.
func (f *CustomDomainFilter) WhereHasMappableDomain() {
	f.Where(entql.HasEdge("mappable_domain"))
}

// WhereHasMappableDomainWith applies a predicate to check if query has an edge mappable_domain with a given conditions (other predicates).
func (f *CustomDomainFilter) WhereHasMappableDomainWith(preds ...predicate.MappableDomain) {
	f.Where(entql.HasEdgeWith("mappable_domain", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDNSVerification applies a predicate to check if query has an edge dns_verification.
func (f *CustomDomainFilter) WhereHasDNSVerification() {
	f.Where(entql.HasEdge("dns_verification"))
}

// WhereHasDNSVerificationWith applies a predicate to check if query has an edge dns_verification with a given conditions (other predicates).
func (f *CustomDomainFilter) WhereHasDNSVerificationWith(preds ...predicate.DNSVerification) {
	f.Where(entql.HasEdgeWith("dns_verification", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *CustomDomainHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomDomainHistoryQuery builder.
func (_q *CustomDomainHistoryQuery) Filter() *CustomDomainHistoryFilter {
	return &CustomDomainHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomDomainHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomDomainHistoryMutation builder.
func (m *CustomDomainHistoryMutation) Filter() *CustomDomainHistoryFilter {
	return &CustomDomainHistoryFilter{config: m.config, predicateAdder: m}
}

// CustomDomainHistoryFilter provides a generic filtering capability at runtime for CustomDomainHistoryQuery.
type CustomDomainHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomDomainHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CustomDomainHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *CustomDomainHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(customdomainhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *CustomDomainHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *CustomDomainHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomDomainHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customdomainhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CustomDomainHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(customdomainhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *CustomDomainHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *CustomDomainHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CustomDomainHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(customdomainhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *CustomDomainHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *CustomDomainHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(customdomainhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *CustomDomainHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldOwnerID))
}

// WhereCnameRecord applies the entql string predicate on the cname_record field.
func (f *CustomDomainHistoryFilter) WhereCnameRecord(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldCnameRecord))
}

// WhereMappableDomainID applies the entql string predicate on the mappable_domain_id field.
func (f *CustomDomainHistoryFilter) WhereMappableDomainID(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldMappableDomainID))
}

// WhereDNSVerificationID applies the entql string predicate on the dns_verification_id field.
func (f *CustomDomainHistoryFilter) WhereDNSVerificationID(p entql.StringP) {
	f.Where(p.Field(customdomainhistory.FieldDNSVerificationID))
}

// addPredicate implements the predicateAdder interface.
func (_q *DNSVerificationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DNSVerificationQuery builder.
func (_q *DNSVerificationQuery) Filter() *DNSVerificationFilter {
	return &DNSVerificationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DNSVerificationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DNSVerificationMutation builder.
func (m *DNSVerificationMutation) Filter() *DNSVerificationFilter {
	return &DNSVerificationFilter{config: m.config, predicateAdder: m}
}

// DNSVerificationFilter provides a generic filtering capability at runtime for DNSVerificationQuery.
type DNSVerificationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DNSVerificationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DNSVerificationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DNSVerificationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dnsverification.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DNSVerificationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dnsverification.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DNSVerificationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DNSVerificationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DNSVerificationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(dnsverification.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DNSVerificationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DNSVerificationFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(dnsverification.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *DNSVerificationFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldOwnerID))
}

// WhereCloudflareHostnameID applies the entql string predicate on the cloudflare_hostname_id field.
func (f *DNSVerificationFilter) WhereCloudflareHostnameID(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldCloudflareHostnameID))
}

// WhereDNSTxtRecord applies the entql string predicate on the dns_txt_record field.
func (f *DNSVerificationFilter) WhereDNSTxtRecord(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldDNSTxtRecord))
}

// WhereDNSTxtValue applies the entql string predicate on the dns_txt_value field.
func (f *DNSVerificationFilter) WhereDNSTxtValue(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldDNSTxtValue))
}

// WhereDNSVerificationStatus applies the entql string predicate on the dns_verification_status field.
func (f *DNSVerificationFilter) WhereDNSVerificationStatus(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldDNSVerificationStatus))
}

// WhereDNSVerificationStatusReason applies the entql string predicate on the dns_verification_status_reason field.
func (f *DNSVerificationFilter) WhereDNSVerificationStatusReason(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldDNSVerificationStatusReason))
}

// WhereAcmeChallengePath applies the entql string predicate on the acme_challenge_path field.
func (f *DNSVerificationFilter) WhereAcmeChallengePath(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldAcmeChallengePath))
}

// WhereExpectedAcmeChallengeValue applies the entql string predicate on the expected_acme_challenge_value field.
func (f *DNSVerificationFilter) WhereExpectedAcmeChallengeValue(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldExpectedAcmeChallengeValue))
}

// WhereAcmeChallengeStatus applies the entql string predicate on the acme_challenge_status field.
func (f *DNSVerificationFilter) WhereAcmeChallengeStatus(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldAcmeChallengeStatus))
}

// WhereAcmeChallengeStatusReason applies the entql string predicate on the acme_challenge_status_reason field.
func (f *DNSVerificationFilter) WhereAcmeChallengeStatusReason(p entql.StringP) {
	f.Where(p.Field(dnsverification.FieldAcmeChallengeStatusReason))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *DNSVerificationFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *DNSVerificationFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomDomains applies a predicate to check if query has an edge custom_domains.
func (f *DNSVerificationFilter) WhereHasCustomDomains() {
	f.Where(entql.HasEdge("custom_domains"))
}

// WhereHasCustomDomainsWith applies a predicate to check if query has an edge custom_domains with a given conditions (other predicates).
func (f *DNSVerificationFilter) WhereHasCustomDomainsWith(preds ...predicate.CustomDomain) {
	f.Where(entql.HasEdgeWith("custom_domains", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DNSVerificationHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DNSVerificationHistoryQuery builder.
func (_q *DNSVerificationHistoryQuery) Filter() *DNSVerificationHistoryFilter {
	return &DNSVerificationHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DNSVerificationHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DNSVerificationHistoryMutation builder.
func (m *DNSVerificationHistoryMutation) Filter() *DNSVerificationHistoryFilter {
	return &DNSVerificationHistoryFilter{config: m.config, predicateAdder: m}
}

// DNSVerificationHistoryFilter provides a generic filtering capability at runtime for DNSVerificationHistoryQuery.
type DNSVerificationHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DNSVerificationHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DNSVerificationHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *DNSVerificationHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(dnsverificationhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *DNSVerificationHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *DNSVerificationHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DNSVerificationHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dnsverificationhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DNSVerificationHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dnsverificationhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DNSVerificationHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DNSVerificationHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DNSVerificationHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(dnsverificationhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DNSVerificationHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DNSVerificationHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(dnsverificationhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *DNSVerificationHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldOwnerID))
}

// WhereCloudflareHostnameID applies the entql string predicate on the cloudflare_hostname_id field.
func (f *DNSVerificationHistoryFilter) WhereCloudflareHostnameID(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldCloudflareHostnameID))
}

// WhereDNSTxtRecord applies the entql string predicate on the dns_txt_record field.
func (f *DNSVerificationHistoryFilter) WhereDNSTxtRecord(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldDNSTxtRecord))
}

// WhereDNSTxtValue applies the entql string predicate on the dns_txt_value field.
func (f *DNSVerificationHistoryFilter) WhereDNSTxtValue(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldDNSTxtValue))
}

// WhereDNSVerificationStatus applies the entql string predicate on the dns_verification_status field.
func (f *DNSVerificationHistoryFilter) WhereDNSVerificationStatus(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldDNSVerificationStatus))
}

// WhereDNSVerificationStatusReason applies the entql string predicate on the dns_verification_status_reason field.
func (f *DNSVerificationHistoryFilter) WhereDNSVerificationStatusReason(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldDNSVerificationStatusReason))
}

// WhereAcmeChallengePath applies the entql string predicate on the acme_challenge_path field.
func (f *DNSVerificationHistoryFilter) WhereAcmeChallengePath(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldAcmeChallengePath))
}

// WhereExpectedAcmeChallengeValue applies the entql string predicate on the expected_acme_challenge_value field.
func (f *DNSVerificationHistoryFilter) WhereExpectedAcmeChallengeValue(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldExpectedAcmeChallengeValue))
}

// WhereAcmeChallengeStatus applies the entql string predicate on the acme_challenge_status field.
func (f *DNSVerificationHistoryFilter) WhereAcmeChallengeStatus(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldAcmeChallengeStatus))
}

// WhereAcmeChallengeStatusReason applies the entql string predicate on the acme_challenge_status_reason field.
func (f *DNSVerificationHistoryFilter) WhereAcmeChallengeStatusReason(p entql.StringP) {
	f.Where(p.Field(dnsverificationhistory.FieldAcmeChallengeStatusReason))
}

// addPredicate implements the predicateAdder interface.
func (_q *DocumentDataQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentDataQuery builder.
func (_q *DocumentDataQuery) Filter() *DocumentDataFilter {
	return &DocumentDataFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentDataMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentDataMutation builder.
func (m *DocumentDataMutation) Filter() *DocumentDataFilter {
	return &DocumentDataFilter{config: m.config, predicateAdder: m}
}

// DocumentDataFilter provides a generic filtering capability at runtime for DocumentDataQuery.
type DocumentDataFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentDataFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DocumentDataFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentDataFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdata.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DocumentDataFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdata.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DocumentDataFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DocumentDataFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DocumentDataFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(documentdata.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DocumentDataFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DocumentDataFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(documentdata.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *DocumentDataFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldOwnerID))
}

// WhereTemplateID applies the entql string predicate on the template_id field.
func (f *DocumentDataFilter) WhereTemplateID(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldTemplateID))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *DocumentDataFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(documentdata.FieldData))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *DocumentDataFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplate applies a predicate to check if query has an edge template.
func (f *DocumentDataFilter) WhereHasTemplate() {
	f.Where(entql.HasEdge("template"))
}

// WhereHasTemplateWith applies a predicate to check if query has an edge template with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasTemplateWith(preds ...predicate.Template) {
	f.Where(entql.HasEdgeWith("template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *DocumentDataFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *DocumentDataFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DocumentDataHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentDataHistoryQuery builder.
func (_q *DocumentDataHistoryQuery) Filter() *DocumentDataHistoryFilter {
	return &DocumentDataHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentDataHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentDataHistoryMutation builder.
func (m *DocumentDataHistoryMutation) Filter() *DocumentDataHistoryFilter {
	return &DocumentDataHistoryFilter{config: m.config, predicateAdder: m}
}

// DocumentDataHistoryFilter provides a generic filtering capability at runtime for DocumentDataHistoryQuery.
type DocumentDataHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentDataHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DocumentDataHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *DocumentDataHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *DocumentDataHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *DocumentDataHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentDataHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DocumentDataHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DocumentDataHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DocumentDataHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DocumentDataHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DocumentDataHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DocumentDataHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(documentdatahistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *DocumentDataHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldOwnerID))
}

// WhereTemplateID applies the entql string predicate on the template_id field.
func (f *DocumentDataHistoryFilter) WhereTemplateID(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldTemplateID))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *DocumentDataHistoryFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(documentdatahistory.FieldData))
}

// addPredicate implements the predicateAdder interface.
func (_q *EmailVerificationTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailVerificationTokenQuery builder.
func (_q *EmailVerificationTokenQuery) Filter() *EmailVerificationTokenFilter {
	return &EmailVerificationTokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailVerificationTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailVerificationTokenMutation builder.
func (m *EmailVerificationTokenMutation) Filter() *EmailVerificationTokenFilter {
	return &EmailVerificationTokenFilter{config: m.config, predicateAdder: m}
}

// EmailVerificationTokenFilter provides a generic filtering capability at runtime for EmailVerificationTokenQuery.
type EmailVerificationTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailVerificationTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EmailVerificationTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmailVerificationTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmailVerificationTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EmailVerificationTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EmailVerificationTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmailVerificationTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EmailVerificationTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EmailVerificationTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *EmailVerificationTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *EmailVerificationTokenFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldTTL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *EmailVerificationTokenFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldEmail))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *EmailVerificationTokenFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(emailverificationtoken.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EmailVerificationTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EmailVerificationTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EntityQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityQuery builder.
func (_q *EntityQuery) Filter() *EntityFilter {
	return &EntityFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityMutation builder.
func (m *EntityMutation) Filter() *EntityFilter {
	return &EntityFilter{config: m.config, predicateAdder: m}
}

// EntityFilter provides a generic filtering capability at runtime for EntityQuery.
type EntityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entity.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entity.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entity.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entity.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entity.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entity.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entity.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entity.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entity.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entity.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *EntityFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(entity.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EntityFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(entity.FieldDescription))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *EntityFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(entity.FieldDomains))
}

// WhereEntityTypeID applies the entql string predicate on the entity_type_id field.
func (f *EntityFilter) WhereEntityTypeID(p entql.StringP) {
	f.Where(p.Field(entity.FieldEntityTypeID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EntityFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(entity.FieldStatus))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntityFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntityFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *EntityFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *EntityFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *EntityFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *EntityFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *EntityFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *EntityFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContacts applies a predicate to check if query has an edge contacts.
func (f *EntityFilter) WhereHasContacts() {
	f.Where(entql.HasEdge("contacts"))
}

// WhereHasContactsWith applies a predicate to check if query has an edge contacts with a given conditions (other predicates).
func (f *EntityFilter) WhereHasContactsWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocuments applies a predicate to check if query has an edge documents.
func (f *EntityFilter) WhereHasDocuments() {
	f.Where(entql.HasEdge("documents"))
}

// WhereHasDocumentsWith applies a predicate to check if query has an edge documents with a given conditions (other predicates).
func (f *EntityFilter) WhereHasDocumentsWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("documents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotes applies a predicate to check if query has an edge notes.
func (f *EntityFilter) WhereHasNotes() {
	f.Where(entql.HasEdge("notes"))
}

// WhereHasNotesWith applies a predicate to check if query has an edge notes with a given conditions (other predicates).
func (f *EntityFilter) WhereHasNotesWith(preds ...predicate.Note) {
	f.Where(entql.HasEdgeWith("notes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *EntityFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *EntityFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssets applies a predicate to check if query has an edge assets.
func (f *EntityFilter) WhereHasAssets() {
	f.Where(entql.HasEdge("assets"))
}

// WhereHasAssetsWith applies a predicate to check if query has an edge assets with a given conditions (other predicates).
func (f *EntityFilter) WhereHasAssetsWith(preds ...predicate.Asset) {
	f.Where(entql.HasEdgeWith("assets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScans applies a predicate to check if query has an edge scans.
func (f *EntityFilter) WhereHasScans() {
	f.Where(entql.HasEdge("scans"))
}

// WhereHasScansWith applies a predicate to check if query has an edge scans with a given conditions (other predicates).
func (f *EntityFilter) WhereHasScansWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntityType applies a predicate to check if query has an edge entity_type.
func (f *EntityFilter) WhereHasEntityType() {
	f.Where(entql.HasEdge("entity_type"))
}

// WhereHasEntityTypeWith applies a predicate to check if query has an edge entity_type with a given conditions (other predicates).
func (f *EntityFilter) WhereHasEntityTypeWith(preds ...predicate.EntityType) {
	f.Where(entql.HasEdgeWith("entity_type", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EntityHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityHistoryQuery builder.
func (_q *EntityHistoryQuery) Filter() *EntityHistoryFilter {
	return &EntityHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityHistoryMutation builder.
func (m *EntityHistoryMutation) Filter() *EntityHistoryFilter {
	return &EntityHistoryFilter{config: m.config, predicateAdder: m}
}

// EntityHistoryFilter provides a generic filtering capability at runtime for EntityHistoryQuery.
type EntityHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EntityHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EntityHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EntityHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entityhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *EntityHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EntityHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldDescription))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *EntityHistoryFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(entityhistory.FieldDomains))
}

// WhereEntityTypeID applies the entql string predicate on the entity_type_id field.
func (f *EntityHistoryFilter) WhereEntityTypeID(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldEntityTypeID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EntityHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (_q *EntityTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityTypeQuery builder.
func (_q *EntityTypeQuery) Filter() *EntityTypeFilter {
	return &EntityTypeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityTypeMutation builder.
func (m *EntityTypeMutation) Filter() *EntityTypeFilter {
	return &EntityTypeFilter{config: m.config, predicateAdder: m}
}

// EntityTypeFilter provides a generic filtering capability at runtime for EntityTypeQuery.
type EntityTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityTypeFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytype.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityTypeFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityTypeFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityTypeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitytype.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityTypeFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityTypeFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitytype.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityTypeFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityTypeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldName))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntityTypeFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntityTypeFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *EntityTypeFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *EntityTypeFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EntityTypeHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityTypeHistoryQuery builder.
func (_q *EntityTypeHistoryQuery) Filter() *EntityTypeHistoryFilter {
	return &EntityTypeHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityTypeHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityTypeHistoryMutation builder.
func (m *EntityTypeHistoryMutation) Filter() *EntityTypeHistoryFilter {
	return &EntityTypeHistoryFilter{config: m.config, predicateAdder: m}
}

// EntityTypeHistoryFilter provides a generic filtering capability at runtime for EntityTypeHistoryQuery.
type EntityTypeHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityTypeHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityTypeHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EntityTypeHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EntityTypeHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EntityTypeHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityTypeHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityTypeHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityTypeHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityTypeHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityTypeHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityTypeHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityTypeHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitytypehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityTypeHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityTypeHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (_q *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (_q *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EventFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(event.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EventFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(event.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EventFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(event.FieldUpdatedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EventFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(event.FieldTags))
}

// WhereEventID applies the entql string predicate on the event_id field.
func (f *EventFilter) WhereEventID(p entql.StringP) {
	f.Where(p.Field(event.FieldEventID))
}

// WhereCorrelationID applies the entql string predicate on the correlation_id field.
func (f *EventFilter) WhereCorrelationID(p entql.StringP) {
	f.Where(p.Field(event.FieldCorrelationID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(event.FieldEventType))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EventFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(event.FieldMetadata))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *EventFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *EventFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *EventFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *EventFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *EventFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *EventFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *EventFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *EventFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInvites applies a predicate to check if query has an edge invites.
func (f *EventFilter) WhereHasInvites() {
	f.Where(entql.HasEdge("invites"))
}

// WhereHasInvitesWith applies a predicate to check if query has an edge invites with a given conditions (other predicates).
func (f *EventFilter) WhereHasInvitesWith(preds ...predicate.Invite) {
	f.Where(entql.HasEdgeWith("invites", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPersonalAccessTokens applies a predicate to check if query has an edge personal_access_tokens.
func (f *EventFilter) WhereHasPersonalAccessTokens() {
	f.Where(entql.HasEdge("personal_access_tokens"))
}

// WhereHasPersonalAccessTokensWith applies a predicate to check if query has an edge personal_access_tokens with a given conditions (other predicates).
func (f *EventFilter) WhereHasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSecrets applies a predicate to check if query has an edge secrets.
func (f *EventFilter) WhereHasSecrets() {
	f.Where(entql.HasEdge("secrets"))
}

// WhereHasSecretsWith applies a predicate to check if query has an edge secrets with a given conditions (other predicates).
func (f *EventFilter) WhereHasSecretsWith(preds ...predicate.Hush) {
	f.Where(entql.HasEdgeWith("secrets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgMemberships applies a predicate to check if query has an edge org_memberships.
func (f *EventFilter) WhereHasOrgMemberships() {
	f.Where(entql.HasEdge("org_memberships"))
}

// WhereHasOrgMembershipsWith applies a predicate to check if query has an edge org_memberships with a given conditions (other predicates).
func (f *EventFilter) WhereHasOrgMembershipsWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("org_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupMemberships applies a predicate to check if query has an edge group_memberships.
func (f *EventFilter) WhereHasGroupMemberships() {
	f.Where(entql.HasEdge("group_memberships"))
}

// WhereHasGroupMembershipsWith applies a predicate to check if query has an edge group_memberships with a given conditions (other predicates).
func (f *EventFilter) WhereHasGroupMembershipsWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("group_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribers applies a predicate to check if query has an edge subscribers.
func (f *EventFilter) WhereHasSubscribers() {
	f.Where(entql.HasEdge("subscribers"))
}

// WhereHasSubscribersWith applies a predicate to check if query has an edge subscribers with a given conditions (other predicates).
func (f *EventFilter) WhereHasSubscribersWith(preds ...predicate.Subscriber) {
	f.Where(entql.HasEdgeWith("subscribers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *EventFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *EventFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgSubscriptions applies a predicate to check if query has an edge org_subscriptions.
func (f *EventFilter) WhereHasOrgSubscriptions() {
	f.Where(entql.HasEdge("org_subscriptions"))
}

// WhereHasOrgSubscriptionsWith applies a predicate to check if query has an edge org_subscriptions with a given conditions (other predicates).
func (f *EventFilter) WhereHasOrgSubscriptionsWith(preds ...predicate.OrgSubscription) {
	f.Where(entql.HasEdgeWith("org_subscriptions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EvidenceQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EvidenceQuery builder.
func (_q *EvidenceQuery) Filter() *EvidenceFilter {
	return &EvidenceFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EvidenceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EvidenceMutation builder.
func (m *EvidenceMutation) Filter() *EvidenceFilter {
	return &EvidenceFilter{config: m.config, predicateAdder: m}
}

// EvidenceFilter provides a generic filtering capability at runtime for EvidenceQuery.
type EvidenceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EvidenceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EvidenceFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(evidence.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EvidenceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(evidence.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EvidenceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(evidence.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EvidenceFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(evidence.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EvidenceFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(evidence.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EvidenceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(evidence.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EvidenceFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(evidence.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *EvidenceFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(evidence.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EvidenceFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(evidence.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EvidenceFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(evidence.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EvidenceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(evidence.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EvidenceFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(evidence.FieldDescription))
}

// WhereCollectionProcedure applies the entql string predicate on the collection_procedure field.
func (f *EvidenceFilter) WhereCollectionProcedure(p entql.StringP) {
	f.Where(p.Field(evidence.FieldCollectionProcedure))
}

// WhereCreationDate applies the entql time.Time predicate on the creation_date field.
func (f *EvidenceFilter) WhereCreationDate(p entql.TimeP) {
	f.Where(p.Field(evidence.FieldCreationDate))
}

// WhereRenewalDate applies the entql time.Time predicate on the renewal_date field.
func (f *EvidenceFilter) WhereRenewalDate(p entql.TimeP) {
	f.Where(p.Field(evidence.FieldRenewalDate))
}

// WhereSource applies the entql string predicate on the source field.
func (f *EvidenceFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(evidence.FieldSource))
}

// WhereIsAutomated applies the entql bool predicate on the is_automated field.
func (f *EvidenceFilter) WhereIsAutomated(p entql.BoolP) {
	f.Where(p.Field(evidence.FieldIsAutomated))
}

// WhereURL applies the entql string predicate on the url field.
func (f *EvidenceFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(evidence.FieldURL))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EvidenceFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(evidence.FieldStatus))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EvidenceFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *EvidenceFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *EvidenceFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectives applies a predicate to check if query has an edge control_objectives.
func (f *EvidenceFilter) WhereHasControlObjectives() {
	f.Where(entql.HasEdge("control_objectives"))
}

// WhereHasControlObjectivesWith applies a predicate to check if query has an edge control_objectives with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasControlObjectivesWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objectives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementations applies a predicate to check if query has an edge control_implementations.
func (f *EvidenceFilter) WhereHasControlImplementations() {
	f.Where(entql.HasEdge("control_implementations"))
}

// WhereHasControlImplementationsWith applies a predicate to check if query has an edge control_implementations with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasControlImplementationsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *EvidenceFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *EvidenceFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *EvidenceFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *EvidenceFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EvidenceHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EvidenceHistoryQuery builder.
func (_q *EvidenceHistoryQuery) Filter() *EvidenceHistoryFilter {
	return &EvidenceHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EvidenceHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EvidenceHistoryMutation builder.
func (m *EvidenceHistoryMutation) Filter() *EvidenceHistoryFilter {
	return &EvidenceHistoryFilter{config: m.config, predicateAdder: m}
}

// EvidenceHistoryFilter provides a generic filtering capability at runtime for EvidenceHistoryQuery.
type EvidenceHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EvidenceHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EvidenceHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EvidenceHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(evidencehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EvidenceHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EvidenceHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EvidenceHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(evidencehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EvidenceHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(evidencehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EvidenceHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EvidenceHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EvidenceHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(evidencehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EvidenceHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *EvidenceHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EvidenceHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(evidencehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EvidenceHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EvidenceHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EvidenceHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldDescription))
}

// WhereCollectionProcedure applies the entql string predicate on the collection_procedure field.
func (f *EvidenceHistoryFilter) WhereCollectionProcedure(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldCollectionProcedure))
}

// WhereCreationDate applies the entql time.Time predicate on the creation_date field.
func (f *EvidenceHistoryFilter) WhereCreationDate(p entql.TimeP) {
	f.Where(p.Field(evidencehistory.FieldCreationDate))
}

// WhereRenewalDate applies the entql time.Time predicate on the renewal_date field.
func (f *EvidenceHistoryFilter) WhereRenewalDate(p entql.TimeP) {
	f.Where(p.Field(evidencehistory.FieldRenewalDate))
}

// WhereSource applies the entql string predicate on the source field.
func (f *EvidenceHistoryFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldSource))
}

// WhereIsAutomated applies the entql bool predicate on the is_automated field.
func (f *EvidenceHistoryFilter) WhereIsAutomated(p entql.BoolP) {
	f.Where(p.Field(evidencehistory.FieldIsAutomated))
}

// WhereURL applies the entql string predicate on the url field.
func (f *EvidenceHistoryFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldURL))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EvidenceHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(evidencehistory.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (_q *ExportQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExportQuery builder.
func (_q *ExportQuery) Filter() *ExportFilter {
	return &ExportFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ExportMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExportMutation builder.
func (m *ExportMutation) Filter() *ExportFilter {
	return &ExportFilter{config: m.config, predicateAdder: m}
}

// ExportFilter provides a generic filtering capability at runtime for ExportQuery.
type ExportFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExportFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ExportFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(export.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ExportFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(export.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ExportFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(export.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ExportFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(export.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ExportFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(export.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ExportFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(export.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ExportFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(export.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ExportFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(export.FieldOwnerID))
}

// WhereExportType applies the entql string predicate on the export_type field.
func (f *ExportFilter) WhereExportType(p entql.StringP) {
	f.Where(p.Field(export.FieldExportType))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *ExportFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(export.FieldFormat))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ExportFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(export.FieldStatus))
}

// WhereRequestorID applies the entql string predicate on the requestor_id field.
func (f *ExportFilter) WhereRequestorID(p entql.StringP) {
	f.Where(p.Field(export.FieldRequestorID))
}

// WhereFields applies the entql json.RawMessage predicate on the fields field.
func (f *ExportFilter) WhereFields(p entql.BytesP) {
	f.Where(p.Field(export.FieldFields))
}

// WhereFilters applies the entql string predicate on the filters field.
func (f *ExportFilter) WhereFilters(p entql.StringP) {
	f.Where(p.Field(export.FieldFilters))
}

// WhereErrorMessage applies the entql string predicate on the error_message field.
func (f *ExportFilter) WhereErrorMessage(p entql.StringP) {
	f.Where(p.Field(export.FieldErrorMessage))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ExportFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ExportFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *ExportFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *ExportFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *ExportFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *ExportFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *FileQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FileQuery builder.
func (_q *FileQuery) Filter() *FileFilter {
	return &FileFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *FileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FileMutation builder.
func (m *FileMutation) Filter() *FileFilter {
	return &FileFilter{config: m.config, predicateAdder: m}
}

// FileFilter provides a generic filtering capability at runtime for FileQuery.
type FileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FileFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(file.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *FileFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(file.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *FileFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(file.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FileFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *FileFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(file.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *FileFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(file.FieldTags))
}

// WhereProvidedFileName applies the entql string predicate on the provided_file_name field.
func (f *FileFilter) WhereProvidedFileName(p entql.StringP) {
	f.Where(p.Field(file.FieldProvidedFileName))
}

// WhereProvidedFileExtension applies the entql string predicate on the provided_file_extension field.
func (f *FileFilter) WhereProvidedFileExtension(p entql.StringP) {
	f.Where(p.Field(file.FieldProvidedFileExtension))
}

// WhereProvidedFileSize applies the entql int64 predicate on the provided_file_size field.
func (f *FileFilter) WhereProvidedFileSize(p entql.Int64P) {
	f.Where(p.Field(file.FieldProvidedFileSize))
}

// WherePersistedFileSize applies the entql int64 predicate on the persisted_file_size field.
func (f *FileFilter) WherePersistedFileSize(p entql.Int64P) {
	f.Where(p.Field(file.FieldPersistedFileSize))
}

// WhereDetectedMimeType applies the entql string predicate on the detected_mime_type field.
func (f *FileFilter) WhereDetectedMimeType(p entql.StringP) {
	f.Where(p.Field(file.FieldDetectedMimeType))
}

// WhereMd5Hash applies the entql string predicate on the md5_hash field.
func (f *FileFilter) WhereMd5Hash(p entql.StringP) {
	f.Where(p.Field(file.FieldMd5Hash))
}

// WhereDetectedContentType applies the entql string predicate on the detected_content_type field.
func (f *FileFilter) WhereDetectedContentType(p entql.StringP) {
	f.Where(p.Field(file.FieldDetectedContentType))
}

// WhereStoreKey applies the entql string predicate on the store_key field.
func (f *FileFilter) WhereStoreKey(p entql.StringP) {
	f.Where(p.Field(file.FieldStoreKey))
}

// WhereCategoryType applies the entql string predicate on the category_type field.
func (f *FileFilter) WhereCategoryType(p entql.StringP) {
	f.Where(p.Field(file.FieldCategoryType))
}

// WhereURI applies the entql string predicate on the uri field.
func (f *FileFilter) WhereURI(p entql.StringP) {
	f.Where(p.Field(file.FieldURI))
}

// WhereStorageScheme applies the entql string predicate on the storage_scheme field.
func (f *FileFilter) WhereStorageScheme(p entql.StringP) {
	f.Where(p.Field(file.FieldStorageScheme))
}

// WhereStorageVolume applies the entql string predicate on the storage_volume field.
func (f *FileFilter) WhereStorageVolume(p entql.StringP) {
	f.Where(p.Field(file.FieldStorageVolume))
}

// WhereStoragePath applies the entql string predicate on the storage_path field.
func (f *FileFilter) WhereStoragePath(p entql.StringP) {
	f.Where(p.Field(file.FieldStoragePath))
}

// WhereFileContents applies the entql []byte predicate on the file_contents field.
func (f *FileFilter) WhereFileContents(p entql.BytesP) {
	f.Where(p.Field(file.FieldFileContents))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *FileFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *FileFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *FileFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *FileFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *FileFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *FileFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContact applies a predicate to check if query has an edge contact.
func (f *FileFilter) WhereHasContact() {
	f.Where(entql.HasEdge("contact"))
}

// WhereHasContactWith applies a predicate to check if query has an edge contact with a given conditions (other predicates).
func (f *FileFilter) WhereHasContactWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("contact", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntity applies a predicate to check if query has an edge entity.
func (f *FileFilter) WhereHasEntity() {
	f.Where(entql.HasEdge("entity"))
}

// WhereHasEntityWith applies a predicate to check if query has an edge entity with a given conditions (other predicates).
func (f *FileFilter) WhereHasEntityWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entity", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserSetting applies a predicate to check if query has an edge user_setting.
func (f *FileFilter) WhereHasUserSetting() {
	f.Where(entql.HasEdge("user_setting"))
}

// WhereHasUserSettingWith applies a predicate to check if query has an edge user_setting with a given conditions (other predicates).
func (f *FileFilter) WhereHasUserSettingWith(preds ...predicate.UserSetting) {
	f.Where(entql.HasEdgeWith("user_setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationSetting applies a predicate to check if query has an edge organization_setting.
func (f *FileFilter) WhereHasOrganizationSetting() {
	f.Where(entql.HasEdge("organization_setting"))
}

// WhereHasOrganizationSettingWith applies a predicate to check if query has an edge organization_setting with a given conditions (other predicates).
func (f *FileFilter) WhereHasOrganizationSettingWith(preds ...predicate.OrganizationSetting) {
	f.Where(entql.HasEdgeWith("organization_setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplate applies a predicate to check if query has an edge template.
func (f *FileFilter) WhereHasTemplate() {
	f.Where(entql.HasEdge("template"))
}

// WhereHasTemplateWith applies a predicate to check if query has an edge template with a given conditions (other predicates).
func (f *FileFilter) WhereHasTemplateWith(preds ...predicate.Template) {
	f.Where(entql.HasEdgeWith("template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocument applies a predicate to check if query has an edge document.
func (f *FileFilter) WhereHasDocument() {
	f.Where(entql.HasEdge("document"))
}

// WhereHasDocumentWith applies a predicate to check if query has an edge document with a given conditions (other predicates).
func (f *FileFilter) WhereHasDocumentWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("document", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *FileFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *FileFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *FileFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *FileFilter) WhereHasEvidenceWith(preds ...predicate.Evidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *FileFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *FileFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTrustCenterSetting applies a predicate to check if query has an edge trust_center_setting.
func (f *FileFilter) WhereHasTrustCenterSetting() {
	f.Where(entql.HasEdge("trust_center_setting"))
}

// WhereHasTrustCenterSettingWith applies a predicate to check if query has an edge trust_center_setting with a given conditions (other predicates).
func (f *FileFilter) WhereHasTrustCenterSettingWith(preds ...predicate.TrustCenterSetting) {
	f.Where(entql.HasEdgeWith("trust_center_setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubprocessor applies a predicate to check if query has an edge subprocessor.
func (f *FileFilter) WhereHasSubprocessor() {
	f.Where(entql.HasEdge("subprocessor"))
}

// WhereHasSubprocessorWith applies a predicate to check if query has an edge subprocessor with a given conditions (other predicates).
func (f *FileFilter) WhereHasSubprocessorWith(preds ...predicate.Subprocessor) {
	f.Where(entql.HasEdgeWith("subprocessor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *FileHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FileHistoryQuery builder.
func (_q *FileHistoryQuery) Filter() *FileHistoryFilter {
	return &FileHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *FileHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FileHistoryMutation builder.
func (m *FileHistoryMutation) Filter() *FileHistoryFilter {
	return &FileHistoryFilter{config: m.config, predicateAdder: m}
}

// FileHistoryFilter provides a generic filtering capability at runtime for FileHistoryQuery.
type FileHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FileHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FileHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *FileHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *FileHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *FileHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FileHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FileHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *FileHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *FileHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FileHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *FileHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *FileHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(filehistory.FieldTags))
}

// WhereProvidedFileName applies the entql string predicate on the provided_file_name field.
func (f *FileHistoryFilter) WhereProvidedFileName(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldProvidedFileName))
}

// WhereProvidedFileExtension applies the entql string predicate on the provided_file_extension field.
func (f *FileHistoryFilter) WhereProvidedFileExtension(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldProvidedFileExtension))
}

// WhereProvidedFileSize applies the entql int64 predicate on the provided_file_size field.
func (f *FileHistoryFilter) WhereProvidedFileSize(p entql.Int64P) {
	f.Where(p.Field(filehistory.FieldProvidedFileSize))
}

// WherePersistedFileSize applies the entql int64 predicate on the persisted_file_size field.
func (f *FileHistoryFilter) WherePersistedFileSize(p entql.Int64P) {
	f.Where(p.Field(filehistory.FieldPersistedFileSize))
}

// WhereDetectedMimeType applies the entql string predicate on the detected_mime_type field.
func (f *FileHistoryFilter) WhereDetectedMimeType(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldDetectedMimeType))
}

// WhereMd5Hash applies the entql string predicate on the md5_hash field.
func (f *FileHistoryFilter) WhereMd5Hash(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldMd5Hash))
}

// WhereDetectedContentType applies the entql string predicate on the detected_content_type field.
func (f *FileHistoryFilter) WhereDetectedContentType(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldDetectedContentType))
}

// WhereStoreKey applies the entql string predicate on the store_key field.
func (f *FileHistoryFilter) WhereStoreKey(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStoreKey))
}

// WhereCategoryType applies the entql string predicate on the category_type field.
func (f *FileHistoryFilter) WhereCategoryType(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldCategoryType))
}

// WhereURI applies the entql string predicate on the uri field.
func (f *FileHistoryFilter) WhereURI(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldURI))
}

// WhereStorageScheme applies the entql string predicate on the storage_scheme field.
func (f *FileHistoryFilter) WhereStorageScheme(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStorageScheme))
}

// WhereStorageVolume applies the entql string predicate on the storage_volume field.
func (f *FileHistoryFilter) WhereStorageVolume(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStorageVolume))
}

// WhereStoragePath applies the entql string predicate on the storage_path field.
func (f *FileHistoryFilter) WhereStoragePath(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStoragePath))
}

// WhereFileContents applies the entql []byte predicate on the file_contents field.
func (f *FileHistoryFilter) WhereFileContents(p entql.BytesP) {
	f.Where(p.Field(filehistory.FieldFileContents))
}

// addPredicate implements the predicateAdder interface.
func (_q *GroupQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupQuery builder.
func (_q *GroupQuery) Filter() *GroupFilter {
	return &GroupFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMutation builder.
func (m *GroupMutation) Filter() *GroupFilter {
	return &GroupFilter{config: m.config, predicateAdder: m}
}

// GroupFilter provides a generic filtering capability at runtime for GroupQuery.
type GroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(group.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *GroupFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(group.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *GroupFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(group.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *GroupFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(group.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(group.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GroupFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(group.FieldDescription))
}

// WhereIsManaged applies the entql bool predicate on the is_managed field.
func (f *GroupFilter) WhereIsManaged(p entql.BoolP) {
	f.Where(p.Field(group.FieldIsManaged))
}

// WhereGravatarLogoURL applies the entql string predicate on the gravatar_logo_url field.
func (f *GroupFilter) WhereGravatarLogoURL(p entql.StringP) {
	f.Where(p.Field(group.FieldGravatarLogoURL))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *GroupFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(group.FieldLogoURL))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *GroupFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(group.FieldDisplayName))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *GroupFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *GroupFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgramEditors applies a predicate to check if query has an edge program_editors.
func (f *GroupFilter) WhereHasProgramEditors() {
	f.Where(entql.HasEdge("program_editors"))
}

// WhereHasProgramEditorsWith applies a predicate to check if query has an edge program_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasProgramEditorsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgramBlockedGroups applies a predicate to check if query has an edge program_blocked_groups.
func (f *GroupFilter) WhereHasProgramBlockedGroups() {
	f.Where(entql.HasEdge("program_blocked_groups"))
}

// WhereHasProgramBlockedGroupsWith applies a predicate to check if query has an edge program_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasProgramBlockedGroupsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgramViewers applies a predicate to check if query has an edge program_viewers.
func (f *GroupFilter) WhereHasProgramViewers() {
	f.Where(entql.HasEdge("program_viewers"))
}

// WhereHasProgramViewersWith applies a predicate to check if query has an edge program_viewers with a given conditions (other predicates).
func (f *GroupFilter) WhereHasProgramViewersWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program_viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskEditors applies a predicate to check if query has an edge risk_editors.
func (f *GroupFilter) WhereHasRiskEditors() {
	f.Where(entql.HasEdge("risk_editors"))
}

// WhereHasRiskEditorsWith applies a predicate to check if query has an edge risk_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasRiskEditorsWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskBlockedGroups applies a predicate to check if query has an edge risk_blocked_groups.
func (f *GroupFilter) WhereHasRiskBlockedGroups() {
	f.Where(entql.HasEdge("risk_blocked_groups"))
}

// WhereHasRiskBlockedGroupsWith applies a predicate to check if query has an edge risk_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasRiskBlockedGroupsWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskViewers applies a predicate to check if query has an edge risk_viewers.
func (f *GroupFilter) WhereHasRiskViewers() {
	f.Where(entql.HasEdge("risk_viewers"))
}

// WhereHasRiskViewersWith applies a predicate to check if query has an edge risk_viewers with a given conditions (other predicates).
func (f *GroupFilter) WhereHasRiskViewersWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risk_viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectiveEditors applies a predicate to check if query has an edge control_objective_editors.
func (f *GroupFilter) WhereHasControlObjectiveEditors() {
	f.Where(entql.HasEdge("control_objective_editors"))
}

// WhereHasControlObjectiveEditorsWith applies a predicate to check if query has an edge control_objective_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlObjectiveEditorsWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objective_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectiveBlockedGroups applies a predicate to check if query has an edge control_objective_blocked_groups.
func (f *GroupFilter) WhereHasControlObjectiveBlockedGroups() {
	f.Where(entql.HasEdge("control_objective_blocked_groups"))
}

// WhereHasControlObjectiveBlockedGroupsWith applies a predicate to check if query has an edge control_objective_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlObjectiveBlockedGroupsWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objective_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectiveViewers applies a predicate to check if query has an edge control_objective_viewers.
func (f *GroupFilter) WhereHasControlObjectiveViewers() {
	f.Where(entql.HasEdge("control_objective_viewers"))
}

// WhereHasControlObjectiveViewersWith applies a predicate to check if query has an edge control_objective_viewers with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlObjectiveViewersWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objective_viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarrativeEditors applies a predicate to check if query has an edge narrative_editors.
func (f *GroupFilter) WhereHasNarrativeEditors() {
	f.Where(entql.HasEdge("narrative_editors"))
}

// WhereHasNarrativeEditorsWith applies a predicate to check if query has an edge narrative_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasNarrativeEditorsWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narrative_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarrativeBlockedGroups applies a predicate to check if query has an edge narrative_blocked_groups.
func (f *GroupFilter) WhereHasNarrativeBlockedGroups() {
	f.Where(entql.HasEdge("narrative_blocked_groups"))
}

// WhereHasNarrativeBlockedGroupsWith applies a predicate to check if query has an edge narrative_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasNarrativeBlockedGroupsWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narrative_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarrativeViewers applies a predicate to check if query has an edge narrative_viewers.
func (f *GroupFilter) WhereHasNarrativeViewers() {
	f.Where(entql.HasEdge("narrative_viewers"))
}

// WhereHasNarrativeViewersWith applies a predicate to check if query has an edge narrative_viewers with a given conditions (other predicates).
func (f *GroupFilter) WhereHasNarrativeViewersWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narrative_viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementationEditors applies a predicate to check if query has an edge control_implementation_editors.
func (f *GroupFilter) WhereHasControlImplementationEditors() {
	f.Where(entql.HasEdge("control_implementation_editors"))
}

// WhereHasControlImplementationEditorsWith applies a predicate to check if query has an edge control_implementation_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlImplementationEditorsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementation_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementationBlockedGroups applies a predicate to check if query has an edge control_implementation_blocked_groups.
func (f *GroupFilter) WhereHasControlImplementationBlockedGroups() {
	f.Where(entql.HasEdge("control_implementation_blocked_groups"))
}

// WhereHasControlImplementationBlockedGroupsWith applies a predicate to check if query has an edge control_implementation_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlImplementationBlockedGroupsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementation_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementationViewers applies a predicate to check if query has an edge control_implementation_viewers.
func (f *GroupFilter) WhereHasControlImplementationViewers() {
	f.Where(entql.HasEdge("control_implementation_viewers"))
}

// WhereHasControlImplementationViewersWith applies a predicate to check if query has an edge control_implementation_viewers with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlImplementationViewersWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementation_viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScanEditors applies a predicate to check if query has an edge scan_editors.
func (f *GroupFilter) WhereHasScanEditors() {
	f.Where(entql.HasEdge("scan_editors"))
}

// WhereHasScanEditorsWith applies a predicate to check if query has an edge scan_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasScanEditorsWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scan_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScanBlockedGroups applies a predicate to check if query has an edge scan_blocked_groups.
func (f *GroupFilter) WhereHasScanBlockedGroups() {
	f.Where(entql.HasEdge("scan_blocked_groups"))
}

// WhereHasScanBlockedGroupsWith applies a predicate to check if query has an edge scan_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasScanBlockedGroupsWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scan_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScanViewers applies a predicate to check if query has an edge scan_viewers.
func (f *GroupFilter) WhereHasScanViewers() {
	f.Where(entql.HasEdge("scan_viewers"))
}

// WhereHasScanViewersWith applies a predicate to check if query has an edge scan_viewers with a given conditions (other predicates).
func (f *GroupFilter) WhereHasScanViewersWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scan_viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntityEditors applies a predicate to check if query has an edge entity_editors.
func (f *GroupFilter) WhereHasEntityEditors() {
	f.Where(entql.HasEdge("entity_editors"))
}

// WhereHasEntityEditorsWith applies a predicate to check if query has an edge entity_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasEntityEditorsWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entity_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntityBlockedGroups applies a predicate to check if query has an edge entity_blocked_groups.
func (f *GroupFilter) WhereHasEntityBlockedGroups() {
	f.Where(entql.HasEdge("entity_blocked_groups"))
}

// WhereHasEntityBlockedGroupsWith applies a predicate to check if query has an edge entity_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasEntityBlockedGroupsWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entity_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntityViewers applies a predicate to check if query has an edge entity_viewers.
func (f *GroupFilter) WhereHasEntityViewers() {
	f.Where(entql.HasEdge("entity_viewers"))
}

// WhereHasEntityViewersWith applies a predicate to check if query has an edge entity_viewers with a given conditions (other predicates).
func (f *GroupFilter) WhereHasEntityViewersWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entity_viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedureEditors applies a predicate to check if query has an edge procedure_editors.
func (f *GroupFilter) WhereHasProcedureEditors() {
	f.Where(entql.HasEdge("procedure_editors"))
}

// WhereHasProcedureEditorsWith applies a predicate to check if query has an edge procedure_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasProcedureEditorsWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedure_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedureBlockedGroups applies a predicate to check if query has an edge procedure_blocked_groups.
func (f *GroupFilter) WhereHasProcedureBlockedGroups() {
	f.Where(entql.HasEdge("procedure_blocked_groups"))
}

// WhereHasProcedureBlockedGroupsWith applies a predicate to check if query has an edge procedure_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasProcedureBlockedGroupsWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedure_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicyEditors applies a predicate to check if query has an edge internal_policy_editors.
func (f *GroupFilter) WhereHasInternalPolicyEditors() {
	f.Where(entql.HasEdge("internal_policy_editors"))
}

// WhereHasInternalPolicyEditorsWith applies a predicate to check if query has an edge internal_policy_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasInternalPolicyEditorsWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policy_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicyBlockedGroups applies a predicate to check if query has an edge internal_policy_blocked_groups.
func (f *GroupFilter) WhereHasInternalPolicyBlockedGroups() {
	f.Where(entql.HasEdge("internal_policy_blocked_groups"))
}

// WhereHasInternalPolicyBlockedGroupsWith applies a predicate to check if query has an edge internal_policy_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasInternalPolicyBlockedGroupsWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policy_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlEditors applies a predicate to check if query has an edge control_editors.
func (f *GroupFilter) WhereHasControlEditors() {
	f.Where(entql.HasEdge("control_editors"))
}

// WhereHasControlEditorsWith applies a predicate to check if query has an edge control_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlEditorsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("control_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlBlockedGroups applies a predicate to check if query has an edge control_blocked_groups.
func (f *GroupFilter) WhereHasControlBlockedGroups() {
	f.Where(entql.HasEdge("control_blocked_groups"))
}

// WhereHasControlBlockedGroupsWith applies a predicate to check if query has an edge control_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasControlBlockedGroupsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("control_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedControlEditors applies a predicate to check if query has an edge mapped_control_editors.
func (f *GroupFilter) WhereHasMappedControlEditors() {
	f.Where(entql.HasEdge("mapped_control_editors"))
}

// WhereHasMappedControlEditorsWith applies a predicate to check if query has an edge mapped_control_editors with a given conditions (other predicates).
func (f *GroupFilter) WhereHasMappedControlEditorsWith(preds ...predicate.MappedControl) {
	f.Where(entql.HasEdgeWith("mapped_control_editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedControlBlockedGroups applies a predicate to check if query has an edge mapped_control_blocked_groups.
func (f *GroupFilter) WhereHasMappedControlBlockedGroups() {
	f.Where(entql.HasEdge("mapped_control_blocked_groups"))
}

// WhereHasMappedControlBlockedGroupsWith applies a predicate to check if query has an edge mapped_control_blocked_groups with a given conditions (other predicates).
func (f *GroupFilter) WhereHasMappedControlBlockedGroupsWith(preds ...predicate.MappedControl) {
	f.Where(entql.HasEdgeWith("mapped_control_blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *GroupFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *GroupFilter) WhereHasSettingWith(preds ...predicate.GroupSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *GroupFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *GroupFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *GroupFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *GroupFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *GroupFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *GroupFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *GroupFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *GroupFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *GroupFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *GroupFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInvites applies a predicate to check if query has an edge invites.
func (f *GroupFilter) WhereHasInvites() {
	f.Where(entql.HasEdge("invites"))
}

// WhereHasInvitesWith applies a predicate to check if query has an edge invites with a given conditions (other predicates).
func (f *GroupFilter) WhereHasInvitesWith(preds ...predicate.Invite) {
	f.Where(entql.HasEdgeWith("invites", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *GroupFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *GroupFilter) WhereHasMembersWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *GroupHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupHistoryQuery builder.
func (_q *GroupHistoryQuery) Filter() *GroupHistoryFilter {
	return &GroupHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupHistoryMutation builder.
func (m *GroupHistoryMutation) Filter() *GroupHistoryFilter {
	return &GroupHistoryFilter{config: m.config, predicateAdder: m}
}

// GroupHistoryFilter provides a generic filtering capability at runtime for GroupHistoryQuery.
type GroupHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *GroupHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *GroupHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *GroupHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *GroupHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *GroupHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(grouphistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *GroupHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GroupHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GroupHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldDescription))
}

// WhereIsManaged applies the entql bool predicate on the is_managed field.
func (f *GroupHistoryFilter) WhereIsManaged(p entql.BoolP) {
	f.Where(p.Field(grouphistory.FieldIsManaged))
}

// WhereGravatarLogoURL applies the entql string predicate on the gravatar_logo_url field.
func (f *GroupHistoryFilter) WhereGravatarLogoURL(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldGravatarLogoURL))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *GroupHistoryFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldLogoURL))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *GroupHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldDisplayName))
}

// addPredicate implements the predicateAdder interface.
func (_q *GroupMembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupMembershipQuery builder.
func (_q *GroupMembershipQuery) Filter() *GroupMembershipFilter {
	return &GroupMembershipFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMembershipMutation builder.
func (m *GroupMembershipMutation) Filter() *GroupMembershipFilter {
	return &GroupMembershipFilter{config: m.config, predicateAdder: m}
}

// GroupMembershipFilter provides a generic filtering capability at runtime for GroupMembershipQuery.
type GroupMembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupMembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupMembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupMembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupMembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupMembershipFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupMembershipFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldUpdatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *GroupMembershipFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldRole))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupMembershipFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldGroupID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *GroupMembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldUserID))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *GroupMembershipFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *GroupMembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgMembership applies a predicate to check if query has an edge org_membership.
func (f *GroupMembershipFilter) WhereHasOrgMembership() {
	f.Where(entql.HasEdge("org_membership"))
}

// WhereHasOrgMembershipWith applies a predicate to check if query has an edge org_membership with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasOrgMembershipWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("org_membership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *GroupMembershipFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *GroupMembershipHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupMembershipHistoryQuery builder.
func (_q *GroupMembershipHistoryQuery) Filter() *GroupMembershipHistoryFilter {
	return &GroupMembershipHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMembershipHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMembershipHistoryMutation builder.
func (m *GroupMembershipHistoryMutation) Filter() *GroupMembershipHistoryFilter {
	return &GroupMembershipHistoryFilter{config: m.config, predicateAdder: m}
}

// GroupMembershipHistoryFilter provides a generic filtering capability at runtime for GroupMembershipHistoryQuery.
type GroupMembershipHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupMembershipHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupMembershipHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *GroupMembershipHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(groupmembershiphistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *GroupMembershipHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *GroupMembershipHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupMembershipHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembershiphistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupMembershipHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembershiphistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupMembershipHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupMembershipHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldUpdatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *GroupMembershipHistoryFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldRole))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupMembershipHistoryFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldGroupID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *GroupMembershipHistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (_q *GroupSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupSettingQuery builder.
func (_q *GroupSettingQuery) Filter() *GroupSettingFilter {
	return &GroupSettingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupSettingMutation builder.
func (m *GroupSettingMutation) Filter() *GroupSettingFilter {
	return &GroupSettingFilter{config: m.config, predicateAdder: m}
}

// GroupSettingFilter provides a generic filtering capability at runtime for GroupSettingQuery.
type GroupSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldDeletedBy))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *GroupSettingFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldVisibility))
}

// WhereJoinPolicy applies the entql string predicate on the join_policy field.
func (f *GroupSettingFilter) WhereJoinPolicy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldJoinPolicy))
}

// WhereSyncToSlack applies the entql bool predicate on the sync_to_slack field.
func (f *GroupSettingFilter) WhereSyncToSlack(p entql.BoolP) {
	f.Where(p.Field(groupsetting.FieldSyncToSlack))
}

// WhereSyncToGithub applies the entql bool predicate on the sync_to_github field.
func (f *GroupSettingFilter) WhereSyncToGithub(p entql.BoolP) {
	f.Where(p.Field(groupsetting.FieldSyncToGithub))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupSettingFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldGroupID))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *GroupSettingFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *GroupSettingFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *GroupSettingHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupSettingHistoryQuery builder.
func (_q *GroupSettingHistoryQuery) Filter() *GroupSettingHistoryFilter {
	return &GroupSettingHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupSettingHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupSettingHistoryMutation builder.
func (m *GroupSettingHistoryMutation) Filter() *GroupSettingHistoryFilter {
	return &GroupSettingHistoryFilter{config: m.config, predicateAdder: m}
}

// GroupSettingHistoryFilter provides a generic filtering capability at runtime for GroupSettingHistoryQuery.
type GroupSettingHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupSettingHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupSettingHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *GroupSettingHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *GroupSettingHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *GroupSettingHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupSettingHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupSettingHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupSettingHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupSettingHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupSettingHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupSettingHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldDeletedBy))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *GroupSettingHistoryFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldVisibility))
}

// WhereJoinPolicy applies the entql string predicate on the join_policy field.
func (f *GroupSettingHistoryFilter) WhereJoinPolicy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldJoinPolicy))
}

// WhereSyncToSlack applies the entql bool predicate on the sync_to_slack field.
func (f *GroupSettingHistoryFilter) WhereSyncToSlack(p entql.BoolP) {
	f.Where(p.Field(groupsettinghistory.FieldSyncToSlack))
}

// WhereSyncToGithub applies the entql bool predicate on the sync_to_github field.
func (f *GroupSettingHistoryFilter) WhereSyncToGithub(p entql.BoolP) {
	f.Where(p.Field(groupsettinghistory.FieldSyncToGithub))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupSettingHistoryFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldGroupID))
}

// addPredicate implements the predicateAdder interface.
func (_q *HushQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HushQuery builder.
func (_q *HushQuery) Filter() *HushFilter {
	return &HushFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *HushMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HushMutation builder.
func (m *HushMutation) Filter() *HushFilter {
	return &HushFilter{config: m.config, predicateAdder: m}
}

// HushFilter provides a generic filtering capability at runtime for HushQuery.
type HushFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HushFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HushFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hush.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HushFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hush.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HushFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hush.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *HushFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(hush.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *HushFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(hush.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *HushFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(hush.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *HushFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(hush.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *HushFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(hush.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *HushFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hush.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HushFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hush.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *HushFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(hush.FieldKind))
}

// WhereSecretName applies the entql string predicate on the secret_name field.
func (f *HushFilter) WhereSecretName(p entql.StringP) {
	f.Where(p.Field(hush.FieldSecretName))
}

// WhereSecretValue applies the entql string predicate on the secret_value field.
func (f *HushFilter) WhereSecretValue(p entql.StringP) {
	f.Where(p.Field(hush.FieldSecretValue))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *HushFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *HushFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *HushFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *HushFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *HushFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *HushFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *HushHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HushHistoryQuery builder.
func (_q *HushHistoryQuery) Filter() *HushHistoryFilter {
	return &HushHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *HushHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HushHistoryMutation builder.
func (m *HushHistoryMutation) Filter() *HushHistoryFilter {
	return &HushHistoryFilter{config: m.config, predicateAdder: m}
}

// HushHistoryFilter provides a generic filtering capability at runtime for HushHistoryQuery.
type HushHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HushHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HushHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *HushHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *HushHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *HushHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HushHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HushHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *HushHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *HushHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *HushHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *HushHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *HushHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *HushHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HushHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *HushHistoryFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldKind))
}

// WhereSecretName applies the entql string predicate on the secret_name field.
func (f *HushHistoryFilter) WhereSecretName(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldSecretName))
}

// WhereSecretValue applies the entql string predicate on the secret_value field.
func (f *HushHistoryFilter) WhereSecretValue(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldSecretValue))
}

// addPredicate implements the predicateAdder interface.
func (_q *IntegrationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IntegrationQuery builder.
func (_q *IntegrationQuery) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *IntegrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IntegrationMutation builder.
func (m *IntegrationMutation) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: m.config, predicateAdder: m}
}

// IntegrationFilter provides a generic filtering capability at runtime for IntegrationQuery.
type IntegrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IntegrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IntegrationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(integration.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IntegrationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IntegrationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *IntegrationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *IntegrationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IntegrationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *IntegrationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *IntegrationFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(integration.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *IntegrationFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(integration.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *IntegrationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(integration.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IntegrationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(integration.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IntegrationFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(integration.FieldKind))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *IntegrationFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSecrets applies a predicate to check if query has an edge secrets.
func (f *IntegrationFilter) WhereHasSecrets() {
	f.Where(entql.HasEdge("secrets"))
}

// WhereHasSecretsWith applies a predicate to check if query has an edge secrets with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasSecretsWith(preds ...predicate.Hush) {
	f.Where(entql.HasEdgeWith("secrets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *IntegrationFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *IntegrationHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IntegrationHistoryQuery builder.
func (_q *IntegrationHistoryQuery) Filter() *IntegrationHistoryFilter {
	return &IntegrationHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *IntegrationHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IntegrationHistoryMutation builder.
func (m *IntegrationHistoryMutation) Filter() *IntegrationHistoryFilter {
	return &IntegrationHistoryFilter{config: m.config, predicateAdder: m}
}

// IntegrationHistoryFilter provides a generic filtering capability at runtime for IntegrationHistoryQuery.
type IntegrationHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IntegrationHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IntegrationHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *IntegrationHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *IntegrationHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *IntegrationHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IntegrationHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IntegrationHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *IntegrationHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *IntegrationHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IntegrationHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *IntegrationHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *IntegrationHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(integrationhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *IntegrationHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *IntegrationHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IntegrationHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IntegrationHistoryFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldKind))
}

// addPredicate implements the predicateAdder interface.
func (_q *InternalPolicyQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InternalPolicyQuery builder.
func (_q *InternalPolicyQuery) Filter() *InternalPolicyFilter {
	return &InternalPolicyFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *InternalPolicyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InternalPolicyMutation builder.
func (m *InternalPolicyMutation) Filter() *InternalPolicyFilter {
	return &InternalPolicyFilter{config: m.config, predicateAdder: m}
}

// InternalPolicyFilter provides a generic filtering capability at runtime for InternalPolicyQuery.
type InternalPolicyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InternalPolicyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *InternalPolicyFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InternalPolicyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(internalpolicy.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InternalPolicyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(internalpolicy.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *InternalPolicyFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *InternalPolicyFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InternalPolicyFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(internalpolicy.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *InternalPolicyFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *InternalPolicyFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *InternalPolicyFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(internalpolicy.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *InternalPolicyFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *InternalPolicyFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *InternalPolicyFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *InternalPolicyFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldStatus))
}

// WherePolicyType applies the entql string predicate on the policy_type field.
func (f *InternalPolicyFilter) WherePolicyType(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldPolicyType))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *InternalPolicyFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldDetails))
}

// WhereApprovalRequired applies the entql bool predicate on the approval_required field.
func (f *InternalPolicyFilter) WhereApprovalRequired(p entql.BoolP) {
	f.Where(p.Field(internalpolicy.FieldApprovalRequired))
}

// WhereReviewDue applies the entql time.Time predicate on the review_due field.
func (f *InternalPolicyFilter) WhereReviewDue(p entql.TimeP) {
	f.Where(p.Field(internalpolicy.FieldReviewDue))
}

// WhereReviewFrequency applies the entql string predicate on the review_frequency field.
func (f *InternalPolicyFilter) WhereReviewFrequency(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldReviewFrequency))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *InternalPolicyFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldApproverID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *InternalPolicyFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldDelegateID))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *InternalPolicyFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(internalpolicy.FieldSummary))
}

// WhereTagSuggestions applies the entql json.RawMessage predicate on the tag_suggestions field.
func (f *InternalPolicyFilter) WhereTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicy.FieldTagSuggestions))
}

// WhereDismissedTagSuggestions applies the entql json.RawMessage predicate on the dismissed_tag_suggestions field.
func (f *InternalPolicyFilter) WhereDismissedTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicy.FieldDismissedTagSuggestions))
}

// WhereControlSuggestions applies the entql json.RawMessage predicate on the control_suggestions field.
func (f *InternalPolicyFilter) WhereControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicy.FieldControlSuggestions))
}

// WhereDismissedControlSuggestions applies the entql json.RawMessage predicate on the dismissed_control_suggestions field.
func (f *InternalPolicyFilter) WhereDismissedControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicy.FieldDismissedControlSuggestions))
}

// WhereImprovementSuggestions applies the entql json.RawMessage predicate on the improvement_suggestions field.
func (f *InternalPolicyFilter) WhereImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicy.FieldImprovementSuggestions))
}

// WhereDismissedImprovementSuggestions applies the entql json.RawMessage predicate on the dismissed_improvement_suggestions field.
func (f *InternalPolicyFilter) WhereDismissedImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicy.FieldDismissedImprovementSuggestions))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *InternalPolicyFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *InternalPolicyFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *InternalPolicyFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApprover applies a predicate to check if query has an edge approver.
func (f *InternalPolicyFilter) WhereHasApprover() {
	f.Where(entql.HasEdge("approver"))
}

// WhereHasApproverWith applies a predicate to check if query has an edge approver with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasApproverWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("approver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDelegate applies a predicate to check if query has an edge delegate.
func (f *InternalPolicyFilter) WhereHasDelegate() {
	f.Where(entql.HasEdge("delegate"))
}

// WhereHasDelegateWith applies a predicate to check if query has an edge delegate with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasDelegateWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("delegate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectives applies a predicate to check if query has an edge control_objectives.
func (f *InternalPolicyFilter) WhereHasControlObjectives() {
	f.Where(entql.HasEdge("control_objectives"))
}

// WhereHasControlObjectivesWith applies a predicate to check if query has an edge control_objectives with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasControlObjectivesWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objectives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementations applies a predicate to check if query has an edge control_implementations.
func (f *InternalPolicyFilter) WhereHasControlImplementations() {
	f.Where(entql.HasEdge("control_implementations"))
}

// WhereHasControlImplementationsWith applies a predicate to check if query has an edge control_implementations with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasControlImplementationsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *InternalPolicyFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *InternalPolicyFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *InternalPolicyFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarratives applies a predicate to check if query has an edge narratives.
func (f *InternalPolicyFilter) WhereHasNarratives() {
	f.Where(entql.HasEdge("narratives"))
}

// WhereHasNarrativesWith applies a predicate to check if query has an edge narratives with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasNarrativesWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narratives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *InternalPolicyFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *InternalPolicyFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *InternalPolicyFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *InternalPolicyFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *InternalPolicyHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InternalPolicyHistoryQuery builder.
func (_q *InternalPolicyHistoryQuery) Filter() *InternalPolicyHistoryFilter {
	return &InternalPolicyHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *InternalPolicyHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InternalPolicyHistoryMutation builder.
func (m *InternalPolicyHistoryMutation) Filter() *InternalPolicyHistoryFilter {
	return &InternalPolicyHistoryFilter{config: m.config, predicateAdder: m}
}

// InternalPolicyHistoryFilter provides a generic filtering capability at runtime for InternalPolicyHistoryQuery.
type InternalPolicyHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InternalPolicyHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *InternalPolicyHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *InternalPolicyHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(internalpolicyhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *InternalPolicyHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *InternalPolicyHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InternalPolicyHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(internalpolicyhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InternalPolicyHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(internalpolicyhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *InternalPolicyHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *InternalPolicyHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InternalPolicyHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(internalpolicyhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *InternalPolicyHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *InternalPolicyHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *InternalPolicyHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(internalpolicyhistory.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *InternalPolicyHistoryFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *InternalPolicyHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *InternalPolicyHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *InternalPolicyHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldStatus))
}

// WherePolicyType applies the entql string predicate on the policy_type field.
func (f *InternalPolicyHistoryFilter) WherePolicyType(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldPolicyType))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *InternalPolicyHistoryFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldDetails))
}

// WhereApprovalRequired applies the entql bool predicate on the approval_required field.
func (f *InternalPolicyHistoryFilter) WhereApprovalRequired(p entql.BoolP) {
	f.Where(p.Field(internalpolicyhistory.FieldApprovalRequired))
}

// WhereReviewDue applies the entql time.Time predicate on the review_due field.
func (f *InternalPolicyHistoryFilter) WhereReviewDue(p entql.TimeP) {
	f.Where(p.Field(internalpolicyhistory.FieldReviewDue))
}

// WhereReviewFrequency applies the entql string predicate on the review_frequency field.
func (f *InternalPolicyHistoryFilter) WhereReviewFrequency(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldReviewFrequency))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *InternalPolicyHistoryFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldApproverID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *InternalPolicyHistoryFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldDelegateID))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *InternalPolicyHistoryFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(internalpolicyhistory.FieldSummary))
}

// WhereTagSuggestions applies the entql json.RawMessage predicate on the tag_suggestions field.
func (f *InternalPolicyHistoryFilter) WhereTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicyhistory.FieldTagSuggestions))
}

// WhereDismissedTagSuggestions applies the entql json.RawMessage predicate on the dismissed_tag_suggestions field.
func (f *InternalPolicyHistoryFilter) WhereDismissedTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicyhistory.FieldDismissedTagSuggestions))
}

// WhereControlSuggestions applies the entql json.RawMessage predicate on the control_suggestions field.
func (f *InternalPolicyHistoryFilter) WhereControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicyhistory.FieldControlSuggestions))
}

// WhereDismissedControlSuggestions applies the entql json.RawMessage predicate on the dismissed_control_suggestions field.
func (f *InternalPolicyHistoryFilter) WhereDismissedControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicyhistory.FieldDismissedControlSuggestions))
}

// WhereImprovementSuggestions applies the entql json.RawMessage predicate on the improvement_suggestions field.
func (f *InternalPolicyHistoryFilter) WhereImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicyhistory.FieldImprovementSuggestions))
}

// WhereDismissedImprovementSuggestions applies the entql json.RawMessage predicate on the dismissed_improvement_suggestions field.
func (f *InternalPolicyHistoryFilter) WhereDismissedImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(internalpolicyhistory.FieldDismissedImprovementSuggestions))
}

// addPredicate implements the predicateAdder interface.
func (_q *InviteQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InviteQuery builder.
func (_q *InviteQuery) Filter() *InviteFilter {
	return &InviteFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *InviteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InviteMutation builder.
func (m *InviteMutation) Filter() *InviteFilter {
	return &InviteFilter{config: m.config, predicateAdder: m}
}

// InviteFilter provides a generic filtering capability at runtime for InviteQuery.
type InviteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InviteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *InviteFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(invite.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InviteFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InviteFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *InviteFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *InviteFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InviteFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *InviteFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *InviteFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(invite.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *InviteFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(invite.FieldToken))
}

// WhereExpires applies the entql time.Time predicate on the expires field.
func (f *InviteFilter) WhereExpires(p entql.TimeP) {
	f.Where(p.Field(invite.FieldExpires))
}

// WhereRecipient applies the entql string predicate on the recipient field.
func (f *InviteFilter) WhereRecipient(p entql.StringP) {
	f.Where(p.Field(invite.FieldRecipient))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *InviteFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(invite.FieldStatus))
}

// WhereRole applies the entql string predicate on the role field.
func (f *InviteFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(invite.FieldRole))
}

// WhereSendAttempts applies the entql int predicate on the send_attempts field.
func (f *InviteFilter) WhereSendAttempts(p entql.IntP) {
	f.Where(p.Field(invite.FieldSendAttempts))
}

// WhereRequestorID applies the entql string predicate on the requestor_id field.
func (f *InviteFilter) WhereRequestorID(p entql.StringP) {
	f.Where(p.Field(invite.FieldRequestorID))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *InviteFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(invite.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *InviteFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *InviteFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *InviteFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *InviteFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *InviteFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *InviteFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobResultQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobResultQuery builder.
func (_q *JobResultQuery) Filter() *JobResultFilter {
	return &JobResultFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobResultMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobResultMutation builder.
func (m *JobResultMutation) Filter() *JobResultFilter {
	return &JobResultFilter{config: m.config, predicateAdder: m}
}

// JobResultFilter provides a generic filtering capability at runtime for JobResultQuery.
type JobResultFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobResultFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *JobResultFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobResultFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(jobresult.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *JobResultFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(jobresult.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *JobResultFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *JobResultFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *JobResultFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(jobresult.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *JobResultFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *JobResultFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldOwnerID))
}

// WhereScheduledJobID applies the entql string predicate on the scheduled_job_id field.
func (f *JobResultFilter) WhereScheduledJobID(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldScheduledJobID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *JobResultFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldStatus))
}

// WhereExitCode applies the entql int predicate on the exit_code field.
func (f *JobResultFilter) WhereExitCode(p entql.IntP) {
	f.Where(p.Field(jobresult.FieldExitCode))
}

// WhereFinishedAt applies the entql time.Time predicate on the finished_at field.
func (f *JobResultFilter) WhereFinishedAt(p entql.TimeP) {
	f.Where(p.Field(jobresult.FieldFinishedAt))
}

// WhereStartedAt applies the entql time.Time predicate on the started_at field.
func (f *JobResultFilter) WhereStartedAt(p entql.TimeP) {
	f.Where(p.Field(jobresult.FieldStartedAt))
}

// WhereFileID applies the entql string predicate on the file_id field.
func (f *JobResultFilter) WhereFileID(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldFileID))
}

// WhereLog applies the entql string predicate on the log field.
func (f *JobResultFilter) WhereLog(p entql.StringP) {
	f.Where(p.Field(jobresult.FieldLog))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *JobResultFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *JobResultFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJob applies a predicate to check if query has an edge scheduled_job.
func (f *JobResultFilter) WhereHasScheduledJob() {
	f.Where(entql.HasEdge("scheduled_job"))
}

// WhereHasScheduledJobWith applies a predicate to check if query has an edge scheduled_job with a given conditions (other predicates).
func (f *JobResultFilter) WhereHasScheduledJobWith(preds ...predicate.ScheduledJob) {
	f.Where(entql.HasEdgeWith("scheduled_job", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFile applies a predicate to check if query has an edge file.
func (f *JobResultFilter) WhereHasFile() {
	f.Where(entql.HasEdge("file"))
}

// WhereHasFileWith applies a predicate to check if query has an edge file with a given conditions (other predicates).
func (f *JobResultFilter) WhereHasFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobRunnerQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobRunnerQuery builder.
func (_q *JobRunnerQuery) Filter() *JobRunnerFilter {
	return &JobRunnerFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobRunnerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobRunnerMutation builder.
func (m *JobRunnerMutation) Filter() *JobRunnerFilter {
	return &JobRunnerFilter{config: m.config, predicateAdder: m}
}

// JobRunnerFilter provides a generic filtering capability at runtime for JobRunnerQuery.
type JobRunnerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobRunnerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *JobRunnerFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobRunnerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunner.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *JobRunnerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunner.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *JobRunnerFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *JobRunnerFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *JobRunnerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunner.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *JobRunnerFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *JobRunnerFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *JobRunnerFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(jobrunner.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *JobRunnerFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldOwnerID))
}

// WhereSystemOwned applies the entql bool predicate on the system_owned field.
func (f *JobRunnerFilter) WhereSystemOwned(p entql.BoolP) {
	f.Where(p.Field(jobrunner.FieldSystemOwned))
}

// WhereName applies the entql string predicate on the name field.
func (f *JobRunnerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *JobRunnerFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldStatus))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *JobRunnerFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldIPAddress))
}

// WhereLastSeen applies the entql time.Time predicate on the last_seen field.
func (f *JobRunnerFilter) WhereLastSeen(p entql.TimeP) {
	f.Where(p.Field(jobrunner.FieldLastSeen))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *JobRunnerFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldVersion))
}

// WhereOs applies the entql string predicate on the os field.
func (f *JobRunnerFilter) WhereOs(p entql.StringP) {
	f.Where(p.Field(jobrunner.FieldOs))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *JobRunnerFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *JobRunnerFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunnerTokens applies a predicate to check if query has an edge job_runner_tokens.
func (f *JobRunnerFilter) WhereHasJobRunnerTokens() {
	f.Where(entql.HasEdge("job_runner_tokens"))
}

// WhereHasJobRunnerTokensWith applies a predicate to check if query has an edge job_runner_tokens with a given conditions (other predicates).
func (f *JobRunnerFilter) WhereHasJobRunnerTokensWith(preds ...predicate.JobRunnerToken) {
	f.Where(entql.HasEdgeWith("job_runner_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobRunnerRegistrationTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobRunnerRegistrationTokenQuery builder.
func (_q *JobRunnerRegistrationTokenQuery) Filter() *JobRunnerRegistrationTokenFilter {
	return &JobRunnerRegistrationTokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobRunnerRegistrationTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobRunnerRegistrationTokenMutation builder.
func (m *JobRunnerRegistrationTokenMutation) Filter() *JobRunnerRegistrationTokenFilter {
	return &JobRunnerRegistrationTokenFilter{config: m.config, predicateAdder: m}
}

// JobRunnerRegistrationTokenFilter provides a generic filtering capability at runtime for JobRunnerRegistrationTokenQuery.
type JobRunnerRegistrationTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobRunnerRegistrationTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *JobRunnerRegistrationTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobRunnerRegistrationTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *JobRunnerRegistrationTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *JobRunnerRegistrationTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *JobRunnerRegistrationTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *JobRunnerRegistrationTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *JobRunnerRegistrationTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *JobRunnerRegistrationTokenFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *JobRunnerRegistrationTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *JobRunnerRegistrationTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *JobRunnerRegistrationTokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldExpiresAt))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *JobRunnerRegistrationTokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldLastUsedAt))
}

// WhereJobRunnerID applies the entql string predicate on the job_runner_id field.
func (f *JobRunnerRegistrationTokenFilter) WhereJobRunnerID(p entql.StringP) {
	f.Where(p.Field(jobrunnerregistrationtoken.FieldJobRunnerID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *JobRunnerRegistrationTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *JobRunnerRegistrationTokenFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunner applies a predicate to check if query has an edge job_runner.
func (f *JobRunnerRegistrationTokenFilter) WhereHasJobRunner() {
	f.Where(entql.HasEdge("job_runner"))
}

// WhereHasJobRunnerWith applies a predicate to check if query has an edge job_runner with a given conditions (other predicates).
func (f *JobRunnerRegistrationTokenFilter) WhereHasJobRunnerWith(preds ...predicate.JobRunner) {
	f.Where(entql.HasEdgeWith("job_runner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobRunnerTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobRunnerTokenQuery builder.
func (_q *JobRunnerTokenQuery) Filter() *JobRunnerTokenFilter {
	return &JobRunnerTokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobRunnerTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobRunnerTokenMutation builder.
func (m *JobRunnerTokenMutation) Filter() *JobRunnerTokenFilter {
	return &JobRunnerTokenFilter{config: m.config, predicateAdder: m}
}

// JobRunnerTokenFilter provides a generic filtering capability at runtime for JobRunnerTokenQuery.
type JobRunnerTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobRunnerTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *JobRunnerTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobRunnerTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnertoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *JobRunnerTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnertoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *JobRunnerTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *JobRunnerTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *JobRunnerTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnertoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *JobRunnerTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *JobRunnerTokenFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(jobrunnertoken.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *JobRunnerTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *JobRunnerTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *JobRunnerTokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnertoken.FieldExpiresAt))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *JobRunnerTokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnertoken.FieldLastUsedAt))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *JobRunnerTokenFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(jobrunnertoken.FieldIsActive))
}

// WhereRevokedReason applies the entql string predicate on the revoked_reason field.
func (f *JobRunnerTokenFilter) WhereRevokedReason(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldRevokedReason))
}

// WhereRevokedBy applies the entql string predicate on the revoked_by field.
func (f *JobRunnerTokenFilter) WhereRevokedBy(p entql.StringP) {
	f.Where(p.Field(jobrunnertoken.FieldRevokedBy))
}

// WhereRevokedAt applies the entql time.Time predicate on the revoked_at field.
func (f *JobRunnerTokenFilter) WhereRevokedAt(p entql.TimeP) {
	f.Where(p.Field(jobrunnertoken.FieldRevokedAt))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *JobRunnerTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *JobRunnerTokenFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunners applies a predicate to check if query has an edge job_runners.
func (f *JobRunnerTokenFilter) WhereHasJobRunners() {
	f.Where(entql.HasEdge("job_runners"))
}

// WhereHasJobRunnersWith applies a predicate to check if query has an edge job_runners with a given conditions (other predicates).
func (f *JobRunnerTokenFilter) WhereHasJobRunnersWith(preds ...predicate.JobRunner) {
	f.Where(entql.HasEdgeWith("job_runners", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobTemplateQuery builder.
func (_q *JobTemplateQuery) Filter() *JobTemplateFilter {
	return &JobTemplateFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobTemplateMutation builder.
func (m *JobTemplateMutation) Filter() *JobTemplateFilter {
	return &JobTemplateFilter{config: m.config, predicateAdder: m}
}

// JobTemplateFilter provides a generic filtering capability at runtime for JobTemplateQuery.
type JobTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[47].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *JobTemplateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobTemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(jobtemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *JobTemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(jobtemplate.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *JobTemplateFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *JobTemplateFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *JobTemplateFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(jobtemplate.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *JobTemplateFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *JobTemplateFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *JobTemplateFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(jobtemplate.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *JobTemplateFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldOwnerID))
}

// WhereSystemOwned applies the entql bool predicate on the system_owned field.
func (f *JobTemplateFilter) WhereSystemOwned(p entql.BoolP) {
	f.Where(p.Field(jobtemplate.FieldSystemOwned))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *JobTemplateFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *JobTemplateFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldDescription))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *JobTemplateFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldPlatform))
}

// WhereWindmillPath applies the entql string predicate on the windmill_path field.
func (f *JobTemplateFilter) WhereWindmillPath(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldWindmillPath))
}

// WhereDownloadURL applies the entql string predicate on the download_url field.
func (f *JobTemplateFilter) WhereDownloadURL(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldDownloadURL))
}

// WhereConfiguration applies the entql json.RawMessage predicate on the configuration field.
func (f *JobTemplateFilter) WhereConfiguration(p entql.BytesP) {
	f.Where(p.Field(jobtemplate.FieldConfiguration))
}

// WhereCron applies the entql string predicate on the cron field.
func (f *JobTemplateFilter) WhereCron(p entql.StringP) {
	f.Where(p.Field(jobtemplate.FieldCron))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *JobTemplateFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *JobTemplateFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJobs applies a predicate to check if query has an edge scheduled_jobs.
func (f *JobTemplateFilter) WhereHasScheduledJobs() {
	f.Where(entql.HasEdge("scheduled_jobs"))
}

// WhereHasScheduledJobsWith applies a predicate to check if query has an edge scheduled_jobs with a given conditions (other predicates).
func (f *JobTemplateFilter) WhereHasScheduledJobsWith(preds ...predicate.ScheduledJob) {
	f.Where(entql.HasEdgeWith("scheduled_jobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobTemplateHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobTemplateHistoryQuery builder.
func (_q *JobTemplateHistoryQuery) Filter() *JobTemplateHistoryFilter {
	return &JobTemplateHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobTemplateHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobTemplateHistoryMutation builder.
func (m *JobTemplateHistoryMutation) Filter() *JobTemplateHistoryFilter {
	return &JobTemplateHistoryFilter{config: m.config, predicateAdder: m}
}

// JobTemplateHistoryFilter provides a generic filtering capability at runtime for JobTemplateHistoryQuery.
type JobTemplateHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobTemplateHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[48].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *JobTemplateHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *JobTemplateHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(jobtemplatehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *JobTemplateHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *JobTemplateHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobTemplateHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(jobtemplatehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *JobTemplateHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(jobtemplatehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *JobTemplateHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *JobTemplateHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *JobTemplateHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(jobtemplatehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *JobTemplateHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *JobTemplateHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *JobTemplateHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(jobtemplatehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *JobTemplateHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldOwnerID))
}

// WhereSystemOwned applies the entql bool predicate on the system_owned field.
func (f *JobTemplateHistoryFilter) WhereSystemOwned(p entql.BoolP) {
	f.Where(p.Field(jobtemplatehistory.FieldSystemOwned))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *JobTemplateHistoryFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *JobTemplateHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldDescription))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *JobTemplateHistoryFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldPlatform))
}

// WhereWindmillPath applies the entql string predicate on the windmill_path field.
func (f *JobTemplateHistoryFilter) WhereWindmillPath(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldWindmillPath))
}

// WhereDownloadURL applies the entql string predicate on the download_url field.
func (f *JobTemplateHistoryFilter) WhereDownloadURL(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldDownloadURL))
}

// WhereConfiguration applies the entql json.RawMessage predicate on the configuration field.
func (f *JobTemplateHistoryFilter) WhereConfiguration(p entql.BytesP) {
	f.Where(p.Field(jobtemplatehistory.FieldConfiguration))
}

// WhereCron applies the entql string predicate on the cron field.
func (f *JobTemplateHistoryFilter) WhereCron(p entql.StringP) {
	f.Where(p.Field(jobtemplatehistory.FieldCron))
}

// addPredicate implements the predicateAdder interface.
func (_q *MappableDomainQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MappableDomainQuery builder.
func (_q *MappableDomainQuery) Filter() *MappableDomainFilter {
	return &MappableDomainFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MappableDomainMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MappableDomainMutation builder.
func (m *MappableDomainMutation) Filter() *MappableDomainFilter {
	return &MappableDomainFilter{config: m.config, predicateAdder: m}
}

// MappableDomainFilter provides a generic filtering capability at runtime for MappableDomainQuery.
type MappableDomainFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MappableDomainFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[49].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *MappableDomainFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(mappabledomain.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MappableDomainFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mappabledomain.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MappableDomainFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mappabledomain.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *MappableDomainFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(mappabledomain.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *MappableDomainFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(mappabledomain.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MappableDomainFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(mappabledomain.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *MappableDomainFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(mappabledomain.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *MappableDomainFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(mappabledomain.FieldTags))
}

// WhereName applies the entql string predicate on the name field.
func (f *MappableDomainFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(mappabledomain.FieldName))
}

// WhereZoneID applies the entql string predicate on the zone_id field.
func (f *MappableDomainFilter) WhereZoneID(p entql.StringP) {
	f.Where(p.Field(mappabledomain.FieldZoneID))
}

// WhereHasCustomDomains applies a predicate to check if query has an edge custom_domains.
func (f *MappableDomainFilter) WhereHasCustomDomains() {
	f.Where(entql.HasEdge("custom_domains"))
}

// WhereHasCustomDomainsWith applies a predicate to check if query has an edge custom_domains with a given conditions (other predicates).
func (f *MappableDomainFilter) WhereHasCustomDomainsWith(preds ...predicate.CustomDomain) {
	f.Where(entql.HasEdgeWith("custom_domains", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *MappableDomainHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MappableDomainHistoryQuery builder.
func (_q *MappableDomainHistoryQuery) Filter() *MappableDomainHistoryFilter {
	return &MappableDomainHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MappableDomainHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MappableDomainHistoryMutation builder.
func (m *MappableDomainHistoryMutation) Filter() *MappableDomainHistoryFilter {
	return &MappableDomainHistoryFilter{config: m.config, predicateAdder: m}
}

// MappableDomainHistoryFilter provides a generic filtering capability at runtime for MappableDomainHistoryQuery.
type MappableDomainHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MappableDomainHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[50].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *MappableDomainHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *MappableDomainHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(mappabledomainhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *MappableDomainHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *MappableDomainHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MappableDomainHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mappabledomainhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MappableDomainHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mappabledomainhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *MappableDomainHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *MappableDomainHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MappableDomainHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(mappabledomainhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *MappableDomainHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *MappableDomainHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(mappabledomainhistory.FieldTags))
}

// WhereName applies the entql string predicate on the name field.
func (f *MappableDomainHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldName))
}

// WhereZoneID applies the entql string predicate on the zone_id field.
func (f *MappableDomainHistoryFilter) WhereZoneID(p entql.StringP) {
	f.Where(p.Field(mappabledomainhistory.FieldZoneID))
}

// addPredicate implements the predicateAdder interface.
func (_q *MappedControlQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MappedControlQuery builder.
func (_q *MappedControlQuery) Filter() *MappedControlFilter {
	return &MappedControlFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MappedControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MappedControlMutation builder.
func (m *MappedControlMutation) Filter() *MappedControlFilter {
	return &MappedControlFilter{config: m.config, predicateAdder: m}
}

// MappedControlFilter provides a generic filtering capability at runtime for MappedControlQuery.
type MappedControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MappedControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[51].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *MappedControlFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MappedControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mappedcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MappedControlFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mappedcontrol.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *MappedControlFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *MappedControlFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MappedControlFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(mappedcontrol.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *MappedControlFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *MappedControlFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(mappedcontrol.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *MappedControlFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldOwnerID))
}

// WhereMappingType applies the entql string predicate on the mapping_type field.
func (f *MappedControlFilter) WhereMappingType(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldMappingType))
}

// WhereRelation applies the entql string predicate on the relation field.
func (f *MappedControlFilter) WhereRelation(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldRelation))
}

// WhereConfidence applies the entql int predicate on the confidence field.
func (f *MappedControlFilter) WhereConfidence(p entql.IntP) {
	f.Where(p.Field(mappedcontrol.FieldConfidence))
}

// WhereSource applies the entql string predicate on the source field.
func (f *MappedControlFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(mappedcontrol.FieldSource))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *MappedControlFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *MappedControlFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *MappedControlFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *MappedControlFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *MappedControlFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *MappedControlFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFromControls applies a predicate to check if query has an edge from_controls.
func (f *MappedControlFilter) WhereHasFromControls() {
	f.Where(entql.HasEdge("from_controls"))
}

// WhereHasFromControlsWith applies a predicate to check if query has an edge from_controls with a given conditions (other predicates).
func (f *MappedControlFilter) WhereHasFromControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("from_controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasToControls applies a predicate to check if query has an edge to_controls.
func (f *MappedControlFilter) WhereHasToControls() {
	f.Where(entql.HasEdge("to_controls"))
}

// WhereHasToControlsWith applies a predicate to check if query has an edge to_controls with a given conditions (other predicates).
func (f *MappedControlFilter) WhereHasToControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("to_controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFromSubcontrols applies a predicate to check if query has an edge from_subcontrols.
func (f *MappedControlFilter) WhereHasFromSubcontrols() {
	f.Where(entql.HasEdge("from_subcontrols"))
}

// WhereHasFromSubcontrolsWith applies a predicate to check if query has an edge from_subcontrols with a given conditions (other predicates).
func (f *MappedControlFilter) WhereHasFromSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("from_subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasToSubcontrols applies a predicate to check if query has an edge to_subcontrols.
func (f *MappedControlFilter) WhereHasToSubcontrols() {
	f.Where(entql.HasEdge("to_subcontrols"))
}

// WhereHasToSubcontrolsWith applies a predicate to check if query has an edge to_subcontrols with a given conditions (other predicates).
func (f *MappedControlFilter) WhereHasToSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("to_subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *MappedControlHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MappedControlHistoryQuery builder.
func (_q *MappedControlHistoryQuery) Filter() *MappedControlHistoryFilter {
	return &MappedControlHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MappedControlHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MappedControlHistoryMutation builder.
func (m *MappedControlHistoryMutation) Filter() *MappedControlHistoryFilter {
	return &MappedControlHistoryFilter{config: m.config, predicateAdder: m}
}

// MappedControlHistoryFilter provides a generic filtering capability at runtime for MappedControlHistoryQuery.
type MappedControlHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MappedControlHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[52].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *MappedControlHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *MappedControlHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(mappedcontrolhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *MappedControlHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *MappedControlHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MappedControlHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mappedcontrolhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MappedControlHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mappedcontrolhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *MappedControlHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *MappedControlHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MappedControlHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(mappedcontrolhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *MappedControlHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *MappedControlHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(mappedcontrolhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *MappedControlHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldOwnerID))
}

// WhereMappingType applies the entql string predicate on the mapping_type field.
func (f *MappedControlHistoryFilter) WhereMappingType(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldMappingType))
}

// WhereRelation applies the entql string predicate on the relation field.
func (f *MappedControlHistoryFilter) WhereRelation(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldRelation))
}

// WhereConfidence applies the entql int predicate on the confidence field.
func (f *MappedControlHistoryFilter) WhereConfidence(p entql.IntP) {
	f.Where(p.Field(mappedcontrolhistory.FieldConfidence))
}

// WhereSource applies the entql string predicate on the source field.
func (f *MappedControlHistoryFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(mappedcontrolhistory.FieldSource))
}

// addPredicate implements the predicateAdder interface.
func (_q *NarrativeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NarrativeQuery builder.
func (_q *NarrativeQuery) Filter() *NarrativeFilter {
	return &NarrativeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NarrativeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NarrativeMutation builder.
func (m *NarrativeMutation) Filter() *NarrativeFilter {
	return &NarrativeFilter{config: m.config, predicateAdder: m}
}

// NarrativeFilter provides a generic filtering capability at runtime for NarrativeQuery.
type NarrativeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NarrativeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[53].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *NarrativeFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(narrative.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NarrativeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(narrative.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NarrativeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(narrative.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *NarrativeFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(narrative.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *NarrativeFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(narrative.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NarrativeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(narrative.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *NarrativeFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(narrative.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *NarrativeFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(narrative.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *NarrativeFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(narrative.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *NarrativeFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(narrative.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *NarrativeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(narrative.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *NarrativeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(narrative.FieldDescription))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *NarrativeFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(narrative.FieldDetails))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *NarrativeFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *NarrativeFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *NarrativeFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *NarrativeFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSatisfies applies a predicate to check if query has an edge satisfies.
func (f *NarrativeFilter) WhereHasSatisfies() {
	f.Where(entql.HasEdge("satisfies"))
}

// WhereHasSatisfiesWith applies a predicate to check if query has an edge satisfies with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasSatisfiesWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("satisfies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *NarrativeFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *NarrativeFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *NarrativeFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *NarrativeFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *NarrativeHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NarrativeHistoryQuery builder.
func (_q *NarrativeHistoryQuery) Filter() *NarrativeHistoryFilter {
	return &NarrativeHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NarrativeHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NarrativeHistoryMutation builder.
func (m *NarrativeHistoryMutation) Filter() *NarrativeHistoryFilter {
	return &NarrativeHistoryFilter{config: m.config, predicateAdder: m}
}

// NarrativeHistoryFilter provides a generic filtering capability at runtime for NarrativeHistoryQuery.
type NarrativeHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NarrativeHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[54].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *NarrativeHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *NarrativeHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(narrativehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *NarrativeHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *NarrativeHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NarrativeHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(narrativehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NarrativeHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(narrativehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *NarrativeHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *NarrativeHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NarrativeHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(narrativehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *NarrativeHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *NarrativeHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *NarrativeHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(narrativehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *NarrativeHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *NarrativeHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *NarrativeHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldDescription))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *NarrativeHistoryFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(narrativehistory.FieldDetails))
}

// addPredicate implements the predicateAdder interface.
func (_q *NoteQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NoteQuery builder.
func (_q *NoteQuery) Filter() *NoteFilter {
	return &NoteFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NoteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NoteMutation builder.
func (m *NoteMutation) Filter() *NoteFilter {
	return &NoteFilter{config: m.config, predicateAdder: m}
}

// NoteFilter provides a generic filtering capability at runtime for NoteQuery.
type NoteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NoteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[55].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *NoteFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(note.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NoteFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(note.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NoteFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(note.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *NoteFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(note.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *NoteFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(note.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NoteFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(note.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *NoteFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(note.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *NoteFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(note.FieldDisplayID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *NoteFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(note.FieldOwnerID))
}

// WhereText applies the entql string predicate on the text field.
func (f *NoteFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(note.FieldText))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *NoteFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *NoteFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTask applies a predicate to check if query has an edge task.
func (f *NoteFilter) WhereHasTask() {
	f.Where(entql.HasEdge("task"))
}

// WhereHasTaskWith applies a predicate to check if query has an edge task with a given conditions (other predicates).
func (f *NoteFilter) WhereHasTaskWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("task", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *NoteFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *NoteFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *NoteHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NoteHistoryQuery builder.
func (_q *NoteHistoryQuery) Filter() *NoteHistoryFilter {
	return &NoteHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NoteHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NoteHistoryMutation builder.
func (m *NoteHistoryMutation) Filter() *NoteHistoryFilter {
	return &NoteHistoryFilter{config: m.config, predicateAdder: m}
}

// NoteHistoryFilter provides a generic filtering capability at runtime for NoteHistoryQuery.
type NoteHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NoteHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[56].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *NoteHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *NoteHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *NoteHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *NoteHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NoteHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NoteHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *NoteHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *NoteHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NoteHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *NoteHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *NoteHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldDisplayID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *NoteHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldOwnerID))
}

// WhereText applies the entql string predicate on the text field.
func (f *NoteHistoryFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldText))
}

// addPredicate implements the predicateAdder interface.
func (_q *OnboardingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OnboardingQuery builder.
func (_q *OnboardingQuery) Filter() *OnboardingFilter {
	return &OnboardingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OnboardingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OnboardingMutation builder.
func (m *OnboardingMutation) Filter() *OnboardingFilter {
	return &OnboardingFilter{config: m.config, predicateAdder: m}
}

// OnboardingFilter provides a generic filtering capability at runtime for OnboardingQuery.
type OnboardingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OnboardingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[57].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OnboardingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(onboarding.FieldID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OnboardingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(onboarding.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OnboardingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(onboarding.FieldDeletedBy))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OnboardingFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(onboarding.FieldOrganizationID))
}

// WhereCompanyName applies the entql string predicate on the company_name field.
func (f *OnboardingFilter) WhereCompanyName(p entql.StringP) {
	f.Where(p.Field(onboarding.FieldCompanyName))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *OnboardingFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(onboarding.FieldDomains))
}

// WhereCompanyDetails applies the entql json.RawMessage predicate on the company_details field.
func (f *OnboardingFilter) WhereCompanyDetails(p entql.BytesP) {
	f.Where(p.Field(onboarding.FieldCompanyDetails))
}

// WhereUserDetails applies the entql json.RawMessage predicate on the user_details field.
func (f *OnboardingFilter) WhereUserDetails(p entql.BytesP) {
	f.Where(p.Field(onboarding.FieldUserDetails))
}

// WhereCompliance applies the entql json.RawMessage predicate on the compliance field.
func (f *OnboardingFilter) WhereCompliance(p entql.BytesP) {
	f.Where(p.Field(onboarding.FieldCompliance))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OnboardingFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OnboardingFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrgMembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgMembershipQuery builder.
func (_q *OrgMembershipQuery) Filter() *OrgMembershipFilter {
	return &OrgMembershipFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgMembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgMembershipMutation builder.
func (m *OrgMembershipMutation) Filter() *OrgMembershipFilter {
	return &OrgMembershipFilter{config: m.config, predicateAdder: m}
}

// OrgMembershipFilter provides a generic filtering capability at runtime for OrgMembershipQuery.
type OrgMembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgMembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[58].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgMembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgMembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgMembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgMembershipFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgMembershipFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldUpdatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *OrgMembershipFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldRole))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrgMembershipFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldOrganizationID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *OrgMembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldUserID))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrgMembershipFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OrgMembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *OrgMembershipFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrgMembershipHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgMembershipHistoryQuery builder.
func (_q *OrgMembershipHistoryQuery) Filter() *OrgMembershipHistoryFilter {
	return &OrgMembershipHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgMembershipHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgMembershipHistoryMutation builder.
func (m *OrgMembershipHistoryMutation) Filter() *OrgMembershipHistoryFilter {
	return &OrgMembershipHistoryFilter{config: m.config, predicateAdder: m}
}

// OrgMembershipHistoryFilter provides a generic filtering capability at runtime for OrgMembershipHistoryQuery.
type OrgMembershipHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgMembershipHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[59].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgMembershipHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OrgMembershipHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(orgmembershiphistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OrgMembershipHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OrgMembershipHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgMembershipHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembershiphistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgMembershipHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembershiphistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgMembershipHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgMembershipHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldUpdatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *OrgMembershipHistoryFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldRole))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrgMembershipHistoryFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldOrganizationID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *OrgMembershipHistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrgModuleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgModuleQuery builder.
func (_q *OrgModuleQuery) Filter() *OrgModuleFilter {
	return &OrgModuleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgModuleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgModuleMutation builder.
func (m *OrgModuleMutation) Filter() *OrgModuleFilter {
	return &OrgModuleFilter{config: m.config, predicateAdder: m}
}

// OrgModuleFilter provides a generic filtering capability at runtime for OrgModuleQuery.
type OrgModuleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgModuleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[60].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgModuleFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgModuleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmodule.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgModuleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmodule.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgModuleFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgModuleFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgModuleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgmodule.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgModuleFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrgModuleFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(orgmodule.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OrgModuleFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldOwnerID))
}

// WhereModule applies the entql string predicate on the module field.
func (f *OrgModuleFilter) WhereModule(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldModule))
}

// WherePrice applies the entql json.RawMessage predicate on the price field.
func (f *OrgModuleFilter) WherePrice(p entql.BytesP) {
	f.Where(p.Field(orgmodule.FieldPrice))
}

// WhereStripePriceID applies the entql string predicate on the stripe_price_id field.
func (f *OrgModuleFilter) WhereStripePriceID(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldStripePriceID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *OrgModuleFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldStatus))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *OrgModuleFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldVisibility))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *OrgModuleFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(orgmodule.FieldActive))
}

// WhereModuleLookupKey applies the entql string predicate on the module_lookup_key field.
func (f *OrgModuleFilter) WhereModuleLookupKey(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldModuleLookupKey))
}

// WhereSubscriptionID applies the entql string predicate on the subscription_id field.
func (f *OrgModuleFilter) WhereSubscriptionID(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldSubscriptionID))
}

// WherePriceID applies the entql string predicate on the price_id field.
func (f *OrgModuleFilter) WherePriceID(p entql.StringP) {
	f.Where(p.Field(orgmodule.FieldPriceID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *OrgModuleFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *OrgModuleFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgSubscription applies a predicate to check if query has an edge org_subscription.
func (f *OrgModuleFilter) WhereHasOrgSubscription() {
	f.Where(entql.HasEdge("org_subscription"))
}

// WhereHasOrgSubscriptionWith applies a predicate to check if query has an edge org_subscription with a given conditions (other predicates).
func (f *OrgModuleFilter) WhereHasOrgSubscriptionWith(preds ...predicate.OrgSubscription) {
	f.Where(entql.HasEdgeWith("org_subscription", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgProducts applies a predicate to check if query has an edge org_products.
func (f *OrgModuleFilter) WhereHasOrgProducts() {
	f.Where(entql.HasEdge("org_products"))
}

// WhereHasOrgProductsWith applies a predicate to check if query has an edge org_products with a given conditions (other predicates).
func (f *OrgModuleFilter) WhereHasOrgProductsWith(preds ...predicate.OrgProduct) {
	f.Where(entql.HasEdgeWith("org_products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgPrices applies a predicate to check if query has an edge org_prices.
func (f *OrgModuleFilter) WhereHasOrgPrices() {
	f.Where(entql.HasEdge("org_prices"))
}

// WhereHasOrgPricesWith applies a predicate to check if query has an edge org_prices with a given conditions (other predicates).
func (f *OrgModuleFilter) WhereHasOrgPricesWith(preds ...predicate.OrgPrice) {
	f.Where(entql.HasEdgeWith("org_prices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrgPriceQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgPriceQuery builder.
func (_q *OrgPriceQuery) Filter() *OrgPriceFilter {
	return &OrgPriceFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgPriceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgPriceMutation builder.
func (m *OrgPriceMutation) Filter() *OrgPriceFilter {
	return &OrgPriceFilter{config: m.config, predicateAdder: m}
}

// OrgPriceFilter provides a generic filtering capability at runtime for OrgPriceQuery.
type OrgPriceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgPriceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[61].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgPriceFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgPriceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgprice.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgPriceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgprice.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgPriceFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgPriceFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgPriceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgprice.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgPriceFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrgPriceFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(orgprice.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OrgPriceFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldOwnerID))
}

// WherePrice applies the entql json.RawMessage predicate on the price field.
func (f *OrgPriceFilter) WherePrice(p entql.BytesP) {
	f.Where(p.Field(orgprice.FieldPrice))
}

// WhereStripePriceID applies the entql string predicate on the stripe_price_id field.
func (f *OrgPriceFilter) WhereStripePriceID(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldStripePriceID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *OrgPriceFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldStatus))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *OrgPriceFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(orgprice.FieldActive))
}

// WhereProductID applies the entql string predicate on the product_id field.
func (f *OrgPriceFilter) WhereProductID(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldProductID))
}

// WhereSubscriptionID applies the entql string predicate on the subscription_id field.
func (f *OrgPriceFilter) WhereSubscriptionID(p entql.StringP) {
	f.Where(p.Field(orgprice.FieldSubscriptionID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *OrgPriceFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *OrgPriceFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgProducts applies a predicate to check if query has an edge org_products.
func (f *OrgPriceFilter) WhereHasOrgProducts() {
	f.Where(entql.HasEdge("org_products"))
}

// WhereHasOrgProductsWith applies a predicate to check if query has an edge org_products with a given conditions (other predicates).
func (f *OrgPriceFilter) WhereHasOrgProductsWith(preds ...predicate.OrgProduct) {
	f.Where(entql.HasEdgeWith("org_products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgModules applies a predicate to check if query has an edge org_modules.
func (f *OrgPriceFilter) WhereHasOrgModules() {
	f.Where(entql.HasEdge("org_modules"))
}

// WhereHasOrgModulesWith applies a predicate to check if query has an edge org_modules with a given conditions (other predicates).
func (f *OrgPriceFilter) WhereHasOrgModulesWith(preds ...predicate.OrgModule) {
	f.Where(entql.HasEdgeWith("org_modules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgSubscription applies a predicate to check if query has an edge org_subscription.
func (f *OrgPriceFilter) WhereHasOrgSubscription() {
	f.Where(entql.HasEdge("org_subscription"))
}

// WhereHasOrgSubscriptionWith applies a predicate to check if query has an edge org_subscription with a given conditions (other predicates).
func (f *OrgPriceFilter) WhereHasOrgSubscriptionWith(preds ...predicate.OrgSubscription) {
	f.Where(entql.HasEdgeWith("org_subscription", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrgProductQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgProductQuery builder.
func (_q *OrgProductQuery) Filter() *OrgProductFilter {
	return &OrgProductFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgProductMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgProductMutation builder.
func (m *OrgProductMutation) Filter() *OrgProductFilter {
	return &OrgProductFilter{config: m.config, predicateAdder: m}
}

// OrgProductFilter provides a generic filtering capability at runtime for OrgProductQuery.
type OrgProductFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgProductFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[62].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgProductFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgProductFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgproduct.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgProductFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgproduct.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgProductFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgProductFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgProductFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgproduct.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgProductFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrgProductFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(orgproduct.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OrgProductFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldOwnerID))
}

// WhereModule applies the entql string predicate on the module field.
func (f *OrgProductFilter) WhereModule(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldModule))
}

// WhereStripeProductID applies the entql string predicate on the stripe_product_id field.
func (f *OrgProductFilter) WhereStripeProductID(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldStripeProductID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *OrgProductFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldStatus))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *OrgProductFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(orgproduct.FieldActive))
}

// WhereSubscriptionID applies the entql string predicate on the subscription_id field.
func (f *OrgProductFilter) WhereSubscriptionID(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldSubscriptionID))
}

// WherePriceID applies the entql string predicate on the price_id field.
func (f *OrgProductFilter) WherePriceID(p entql.StringP) {
	f.Where(p.Field(orgproduct.FieldPriceID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *OrgProductFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *OrgProductFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgSubscription applies a predicate to check if query has an edge org_subscription.
func (f *OrgProductFilter) WhereHasOrgSubscription() {
	f.Where(entql.HasEdge("org_subscription"))
}

// WhereHasOrgSubscriptionWith applies a predicate to check if query has an edge org_subscription with a given conditions (other predicates).
func (f *OrgProductFilter) WhereHasOrgSubscriptionWith(preds ...predicate.OrgSubscription) {
	f.Where(entql.HasEdgeWith("org_subscription", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgPrices applies a predicate to check if query has an edge org_prices.
func (f *OrgProductFilter) WhereHasOrgPrices() {
	f.Where(entql.HasEdge("org_prices"))
}

// WhereHasOrgPricesWith applies a predicate to check if query has an edge org_prices with a given conditions (other predicates).
func (f *OrgProductFilter) WhereHasOrgPricesWith(preds ...predicate.OrgPrice) {
	f.Where(entql.HasEdgeWith("org_prices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgModules applies a predicate to check if query has an edge org_modules.
func (f *OrgProductFilter) WhereHasOrgModules() {
	f.Where(entql.HasEdge("org_modules"))
}

// WhereHasOrgModulesWith applies a predicate to check if query has an edge org_modules with a given conditions (other predicates).
func (f *OrgProductFilter) WhereHasOrgModulesWith(preds ...predicate.OrgModule) {
	f.Where(entql.HasEdgeWith("org_modules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrgSubscriptionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgSubscriptionQuery builder.
func (_q *OrgSubscriptionQuery) Filter() *OrgSubscriptionFilter {
	return &OrgSubscriptionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgSubscriptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgSubscriptionMutation builder.
func (m *OrgSubscriptionMutation) Filter() *OrgSubscriptionFilter {
	return &OrgSubscriptionFilter{config: m.config, predicateAdder: m}
}

// OrgSubscriptionFilter provides a generic filtering capability at runtime for OrgSubscriptionQuery.
type OrgSubscriptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgSubscriptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[63].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgSubscriptionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgSubscriptionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscription.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgSubscriptionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscription.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgSubscriptionFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgSubscriptionFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgSubscriptionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscription.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgSubscriptionFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrgSubscriptionFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(orgsubscription.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OrgSubscriptionFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldOwnerID))
}

// WhereStripeSubscriptionID applies the entql string predicate on the stripe_subscription_id field.
func (f *OrgSubscriptionFilter) WhereStripeSubscriptionID(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldStripeSubscriptionID))
}

// WhereProductTier applies the entql string predicate on the product_tier field.
func (f *OrgSubscriptionFilter) WhereProductTier(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldProductTier))
}

// WhereProductPrice applies the entql json.RawMessage predicate on the product_price field.
func (f *OrgSubscriptionFilter) WhereProductPrice(p entql.BytesP) {
	f.Where(p.Field(orgsubscription.FieldProductPrice))
}

// WhereStripeProductTierID applies the entql string predicate on the stripe_product_tier_id field.
func (f *OrgSubscriptionFilter) WhereStripeProductTierID(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldStripeProductTierID))
}

// WhereStripeSubscriptionStatus applies the entql string predicate on the stripe_subscription_status field.
func (f *OrgSubscriptionFilter) WhereStripeSubscriptionStatus(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldStripeSubscriptionStatus))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *OrgSubscriptionFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(orgsubscription.FieldActive))
}

// WhereStripeCustomerID applies the entql string predicate on the stripe_customer_id field.
func (f *OrgSubscriptionFilter) WhereStripeCustomerID(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldStripeCustomerID))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *OrgSubscriptionFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscription.FieldExpiresAt))
}

// WhereTrialExpiresAt applies the entql time.Time predicate on the trial_expires_at field.
func (f *OrgSubscriptionFilter) WhereTrialExpiresAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscription.FieldTrialExpiresAt))
}

// WhereDaysUntilDue applies the entql string predicate on the days_until_due field.
func (f *OrgSubscriptionFilter) WhereDaysUntilDue(p entql.StringP) {
	f.Where(p.Field(orgsubscription.FieldDaysUntilDue))
}

// WherePaymentMethodAdded applies the entql bool predicate on the payment_method_added field.
func (f *OrgSubscriptionFilter) WherePaymentMethodAdded(p entql.BoolP) {
	f.Where(p.Field(orgsubscription.FieldPaymentMethodAdded))
}

// WhereFeatures applies the entql json.RawMessage predicate on the features field.
func (f *OrgSubscriptionFilter) WhereFeatures(p entql.BytesP) {
	f.Where(p.Field(orgsubscription.FieldFeatures))
}

// WhereFeatureLookupKeys applies the entql json.RawMessage predicate on the feature_lookup_keys field.
func (f *OrgSubscriptionFilter) WhereFeatureLookupKeys(p entql.BytesP) {
	f.Where(p.Field(orgsubscription.FieldFeatureLookupKeys))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *OrgSubscriptionFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *OrgSubscriptionFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *OrgSubscriptionFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *OrgSubscriptionFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasModules applies a predicate to check if query has an edge modules.
func (f *OrgSubscriptionFilter) WhereHasModules() {
	f.Where(entql.HasEdge("modules"))
}

// WhereHasModulesWith applies a predicate to check if query has an edge modules with a given conditions (other predicates).
func (f *OrgSubscriptionFilter) WhereHasModulesWith(preds ...predicate.OrgModule) {
	f.Where(entql.HasEdgeWith("modules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProducts applies a predicate to check if query has an edge products.
func (f *OrgSubscriptionFilter) WhereHasProducts() {
	f.Where(entql.HasEdge("products"))
}

// WhereHasProductsWith applies a predicate to check if query has an edge products with a given conditions (other predicates).
func (f *OrgSubscriptionFilter) WhereHasProductsWith(preds ...predicate.OrgProduct) {
	f.Where(entql.HasEdgeWith("products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrices applies a predicate to check if query has an edge prices.
func (f *OrgSubscriptionFilter) WhereHasPrices() {
	f.Where(entql.HasEdge("prices"))
}

// WhereHasPricesWith applies a predicate to check if query has an edge prices with a given conditions (other predicates).
func (f *OrgSubscriptionFilter) WhereHasPricesWith(preds ...predicate.OrgPrice) {
	f.Where(entql.HasEdgeWith("prices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrgSubscriptionHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgSubscriptionHistoryQuery builder.
func (_q *OrgSubscriptionHistoryQuery) Filter() *OrgSubscriptionHistoryFilter {
	return &OrgSubscriptionHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgSubscriptionHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgSubscriptionHistoryMutation builder.
func (m *OrgSubscriptionHistoryMutation) Filter() *OrgSubscriptionHistoryFilter {
	return &OrgSubscriptionHistoryFilter{config: m.config, predicateAdder: m}
}

// OrgSubscriptionHistoryFilter provides a generic filtering capability at runtime for OrgSubscriptionHistoryQuery.
type OrgSubscriptionHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgSubscriptionHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[64].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgSubscriptionHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OrgSubscriptionHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OrgSubscriptionHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OrgSubscriptionHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgSubscriptionHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgSubscriptionHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgSubscriptionHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgSubscriptionHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgSubscriptionHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgSubscriptionHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrgSubscriptionHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OrgSubscriptionHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldOwnerID))
}

// WhereStripeSubscriptionID applies the entql string predicate on the stripe_subscription_id field.
func (f *OrgSubscriptionHistoryFilter) WhereStripeSubscriptionID(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldStripeSubscriptionID))
}

// WhereProductTier applies the entql string predicate on the product_tier field.
func (f *OrgSubscriptionHistoryFilter) WhereProductTier(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldProductTier))
}

// WhereProductPrice applies the entql json.RawMessage predicate on the product_price field.
func (f *OrgSubscriptionHistoryFilter) WhereProductPrice(p entql.BytesP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldProductPrice))
}

// WhereStripeProductTierID applies the entql string predicate on the stripe_product_tier_id field.
func (f *OrgSubscriptionHistoryFilter) WhereStripeProductTierID(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldStripeProductTierID))
}

// WhereStripeSubscriptionStatus applies the entql string predicate on the stripe_subscription_status field.
func (f *OrgSubscriptionHistoryFilter) WhereStripeSubscriptionStatus(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldStripeSubscriptionStatus))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *OrgSubscriptionHistoryFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldActive))
}

// WhereStripeCustomerID applies the entql string predicate on the stripe_customer_id field.
func (f *OrgSubscriptionHistoryFilter) WhereStripeCustomerID(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldStripeCustomerID))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *OrgSubscriptionHistoryFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldExpiresAt))
}

// WhereTrialExpiresAt applies the entql time.Time predicate on the trial_expires_at field.
func (f *OrgSubscriptionHistoryFilter) WhereTrialExpiresAt(p entql.TimeP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldTrialExpiresAt))
}

// WhereDaysUntilDue applies the entql string predicate on the days_until_due field.
func (f *OrgSubscriptionHistoryFilter) WhereDaysUntilDue(p entql.StringP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldDaysUntilDue))
}

// WherePaymentMethodAdded applies the entql bool predicate on the payment_method_added field.
func (f *OrgSubscriptionHistoryFilter) WherePaymentMethodAdded(p entql.BoolP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldPaymentMethodAdded))
}

// WhereFeatures applies the entql json.RawMessage predicate on the features field.
func (f *OrgSubscriptionHistoryFilter) WhereFeatures(p entql.BytesP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldFeatures))
}

// WhereFeatureLookupKeys applies the entql json.RawMessage predicate on the feature_lookup_keys field.
func (f *OrgSubscriptionHistoryFilter) WhereFeatureLookupKeys(p entql.BytesP) {
	f.Where(p.Field(orgsubscriptionhistory.FieldFeatureLookupKeys))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (_q *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[65].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organization.FieldTags))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *OrganizationFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(organization.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OrganizationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(organization.FieldDescription))
}

// WhereParentOrganizationID applies the entql string predicate on the parent_organization_id field.
func (f *OrganizationFilter) WhereParentOrganizationID(p entql.StringP) {
	f.Where(p.Field(organization.FieldParentOrganizationID))
}

// WherePersonalOrg applies the entql bool predicate on the personal_org field.
func (f *OrganizationFilter) WherePersonalOrg(p entql.BoolP) {
	f.Where(p.Field(organization.FieldPersonalOrg))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *OrganizationFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(organization.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFileID applies the entql string predicate on the avatar_local_file_id field.
func (f *OrganizationFilter) WhereAvatarLocalFileID(p entql.StringP) {
	f.Where(p.Field(organization.FieldAvatarLocalFileID))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *OrganizationFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldAvatarUpdatedAt))
}

// WhereDedicatedDb applies the entql bool predicate on the dedicated_db field.
func (f *OrganizationFilter) WhereDedicatedDb(p entql.BoolP) {
	f.Where(p.Field(organization.FieldDedicatedDb))
}

// WhereHasControlCreators applies a predicate to check if query has an edge control_creators.
func (f *OrganizationFilter) WhereHasControlCreators() {
	f.Where(entql.HasEdge("control_creators"))
}

// WhereHasControlCreatorsWith applies a predicate to check if query has an edge control_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasControlCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("control_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementationCreators applies a predicate to check if query has an edge control_implementation_creators.
func (f *OrganizationFilter) WhereHasControlImplementationCreators() {
	f.Where(entql.HasEdge("control_implementation_creators"))
}

// WhereHasControlImplementationCreatorsWith applies a predicate to check if query has an edge control_implementation_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasControlImplementationCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("control_implementation_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectiveCreators applies a predicate to check if query has an edge control_objective_creators.
func (f *OrganizationFilter) WhereHasControlObjectiveCreators() {
	f.Where(entql.HasEdge("control_objective_creators"))
}

// WhereHasControlObjectiveCreatorsWith applies a predicate to check if query has an edge control_objective_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasControlObjectiveCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("control_objective_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvidenceCreators applies a predicate to check if query has an edge evidence_creators.
func (f *OrganizationFilter) WhereHasEvidenceCreators() {
	f.Where(entql.HasEdge("evidence_creators"))
}

// WhereHasEvidenceCreatorsWith applies a predicate to check if query has an edge evidence_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEvidenceCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("evidence_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupCreators applies a predicate to check if query has an edge group_creators.
func (f *OrganizationFilter) WhereHasGroupCreators() {
	f.Where(entql.HasEdge("group_creators"))
}

// WhereHasGroupCreatorsWith applies a predicate to check if query has an edge group_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasGroupCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicyCreators applies a predicate to check if query has an edge internal_policy_creators.
func (f *OrganizationFilter) WhereHasInternalPolicyCreators() {
	f.Where(entql.HasEdge("internal_policy_creators"))
}

// WhereHasInternalPolicyCreatorsWith applies a predicate to check if query has an edge internal_policy_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasInternalPolicyCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("internal_policy_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedControlCreators applies a predicate to check if query has an edge mapped_control_creators.
func (f *OrganizationFilter) WhereHasMappedControlCreators() {
	f.Where(entql.HasEdge("mapped_control_creators"))
}

// WhereHasMappedControlCreatorsWith applies a predicate to check if query has an edge mapped_control_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasMappedControlCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("mapped_control_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarrativeCreators applies a predicate to check if query has an edge narrative_creators.
func (f *OrganizationFilter) WhereHasNarrativeCreators() {
	f.Where(entql.HasEdge("narrative_creators"))
}

// WhereHasNarrativeCreatorsWith applies a predicate to check if query has an edge narrative_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasNarrativeCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("narrative_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedureCreators applies a predicate to check if query has an edge procedure_creators.
func (f *OrganizationFilter) WhereHasProcedureCreators() {
	f.Where(entql.HasEdge("procedure_creators"))
}

// WhereHasProcedureCreatorsWith applies a predicate to check if query has an edge procedure_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasProcedureCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("procedure_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgramCreators applies a predicate to check if query has an edge program_creators.
func (f *OrganizationFilter) WhereHasProgramCreators() {
	f.Where(entql.HasEdge("program_creators"))
}

// WhereHasProgramCreatorsWith applies a predicate to check if query has an edge program_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasProgramCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("program_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiskCreators applies a predicate to check if query has an edge risk_creators.
func (f *OrganizationFilter) WhereHasRiskCreators() {
	f.Where(entql.HasEdge("risk_creators"))
}

// WhereHasRiskCreatorsWith applies a predicate to check if query has an edge risk_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasRiskCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("risk_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJobCreators applies a predicate to check if query has an edge scheduled_job_creators.
func (f *OrganizationFilter) WhereHasScheduledJobCreators() {
	f.Where(entql.HasEdge("scheduled_job_creators"))
}

// WhereHasScheduledJobCreatorsWith applies a predicate to check if query has an edge scheduled_job_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasScheduledJobCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("scheduled_job_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStandardCreators applies a predicate to check if query has an edge standard_creators.
func (f *OrganizationFilter) WhereHasStandardCreators() {
	f.Where(entql.HasEdge("standard_creators"))
}

// WhereHasStandardCreatorsWith applies a predicate to check if query has an edge standard_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasStandardCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("standard_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplateCreators applies a predicate to check if query has an edge template_creators.
func (f *OrganizationFilter) WhereHasTemplateCreators() {
	f.Where(entql.HasEdge("template_creators"))
}

// WhereHasTemplateCreatorsWith applies a predicate to check if query has an edge template_creators with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasTemplateCreatorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("template_creators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *OrganizationFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasParentWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *OrganizationFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasChildrenWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *OrganizationFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSettingWith(preds ...predicate.OrganizationSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPersonalAccessTokens applies a predicate to check if query has an edge personal_access_tokens.
func (f *OrganizationFilter) WhereHasPersonalAccessTokens() {
	f.Where(entql.HasEdge("personal_access_tokens"))
}

// WhereHasPersonalAccessTokensWith applies a predicate to check if query has an edge personal_access_tokens with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPITokens applies a predicate to check if query has an edge api_tokens.
func (f *OrganizationFilter) WhereHasAPITokens() {
	f.Where(entql.HasEdge("api_tokens"))
}

// WhereHasAPITokensWith applies a predicate to check if query has an edge api_tokens with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasAPITokensWith(preds ...predicate.APIToken) {
	f.Where(entql.HasEdgeWith("api_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *OrganizationFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *OrganizationFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *OrganizationFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSecrets applies a predicate to check if query has an edge secrets.
func (f *OrganizationFilter) WhereHasSecrets() {
	f.Where(entql.HasEdge("secrets"))
}

// WhereHasSecretsWith applies a predicate to check if query has an edge secrets with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSecretsWith(preds ...predicate.Hush) {
	f.Where(entql.HasEdgeWith("secrets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAvatarFile applies a predicate to check if query has an edge avatar_file.
func (f *OrganizationFilter) WhereHasAvatarFile() {
	f.Where(entql.HasEdge("avatar_file"))
}

// WhereHasAvatarFileWith applies a predicate to check if query has an edge avatar_file with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasAvatarFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("avatar_file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *OrganizationFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplates applies a predicate to check if query has an edge templates.
func (f *OrganizationFilter) WhereHasTemplates() {
	f.Where(entql.HasEdge("templates"))
}

// WhereHasTemplatesWith applies a predicate to check if query has an edge templates with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasTemplatesWith(preds ...predicate.Template) {
	f.Where(entql.HasEdgeWith("templates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *OrganizationFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocuments applies a predicate to check if query has an edge documents.
func (f *OrganizationFilter) WhereHasDocuments() {
	f.Where(entql.HasEdge("documents"))
}

// WhereHasDocumentsWith applies a predicate to check if query has an edge documents with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasDocumentsWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("documents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgSubscriptions applies a predicate to check if query has an edge org_subscriptions.
func (f *OrganizationFilter) WhereHasOrgSubscriptions() {
	f.Where(entql.HasEdge("org_subscriptions"))
}

// WhereHasOrgSubscriptionsWith applies a predicate to check if query has an edge org_subscriptions with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOrgSubscriptionsWith(preds ...predicate.OrgSubscription) {
	f.Where(entql.HasEdgeWith("org_subscriptions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgProducts applies a predicate to check if query has an edge org_products.
func (f *OrganizationFilter) WhereHasOrgProducts() {
	f.Where(entql.HasEdge("org_products"))
}

// WhereHasOrgProductsWith applies a predicate to check if query has an edge org_products with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOrgProductsWith(preds ...predicate.OrgProduct) {
	f.Where(entql.HasEdgeWith("org_products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgPrices applies a predicate to check if query has an edge org_prices.
func (f *OrganizationFilter) WhereHasOrgPrices() {
	f.Where(entql.HasEdge("org_prices"))
}

// WhereHasOrgPricesWith applies a predicate to check if query has an edge org_prices with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOrgPricesWith(preds ...predicate.OrgPrice) {
	f.Where(entql.HasEdgeWith("org_prices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgModules applies a predicate to check if query has an edge org_modules.
func (f *OrganizationFilter) WhereHasOrgModules() {
	f.Where(entql.HasEdge("org_modules"))
}

// WhereHasOrgModulesWith applies a predicate to check if query has an edge org_modules with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOrgModulesWith(preds ...predicate.OrgModule) {
	f.Where(entql.HasEdgeWith("org_modules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInvites applies a predicate to check if query has an edge invites.
func (f *OrganizationFilter) WhereHasInvites() {
	f.Where(entql.HasEdge("invites"))
}

// WhereHasInvitesWith applies a predicate to check if query has an edge invites with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasInvitesWith(preds ...predicate.Invite) {
	f.Where(entql.HasEdgeWith("invites", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribers applies a predicate to check if query has an edge subscribers.
func (f *OrganizationFilter) WhereHasSubscribers() {
	f.Where(entql.HasEdge("subscribers"))
}

// WhereHasSubscribersWith applies a predicate to check if query has an edge subscribers with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSubscribersWith(preds ...predicate.Subscriber) {
	f.Where(entql.HasEdgeWith("subscribers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *OrganizationFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntityTypes applies a predicate to check if query has an edge entity_types.
func (f *OrganizationFilter) WhereHasEntityTypes() {
	f.Where(entql.HasEdge("entity_types"))
}

// WhereHasEntityTypesWith applies a predicate to check if query has an edge entity_types with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntityTypesWith(preds ...predicate.EntityType) {
	f.Where(entql.HasEdgeWith("entity_types", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContacts applies a predicate to check if query has an edge contacts.
func (f *OrganizationFilter) WhereHasContacts() {
	f.Where(entql.HasEdge("contacts"))
}

// WhereHasContactsWith applies a predicate to check if query has an edge contacts with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasContactsWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotes applies a predicate to check if query has an edge notes.
func (f *OrganizationFilter) WhereHasNotes() {
	f.Where(entql.HasEdge("notes"))
}

// WhereHasNotesWith applies a predicate to check if query has an edge notes with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasNotesWith(preds ...predicate.Note) {
	f.Where(entql.HasEdgeWith("notes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *OrganizationFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *OrganizationFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *OrganizationFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *OrganizationFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *OrganizationFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectives applies a predicate to check if query has an edge control_objectives.
func (f *OrganizationFilter) WhereHasControlObjectives() {
	f.Where(entql.HasEdge("control_objectives"))
}

// WhereHasControlObjectivesWith applies a predicate to check if query has an edge control_objectives with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasControlObjectivesWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objectives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarratives applies a predicate to check if query has an edge narratives.
func (f *OrganizationFilter) WhereHasNarratives() {
	f.Where(entql.HasEdge("narratives"))
}

// WhereHasNarrativesWith applies a predicate to check if query has an edge narratives with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasNarrativesWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narratives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *OrganizationFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *OrganizationFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementations applies a predicate to check if query has an edge control_implementations.
func (f *OrganizationFilter) WhereHasControlImplementations() {
	f.Where(entql.HasEdge("control_implementations"))
}

// WhereHasControlImplementationsWith applies a predicate to check if query has an edge control_implementations with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasControlImplementationsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedControls applies a predicate to check if query has an edge mapped_controls.
func (f *OrganizationFilter) WhereHasMappedControls() {
	f.Where(entql.HasEdge("mapped_controls"))
}

// WhereHasMappedControlsWith applies a predicate to check if query has an edge mapped_controls with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasMappedControlsWith(preds ...predicate.MappedControl) {
	f.Where(entql.HasEdgeWith("mapped_controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *OrganizationFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEvidenceWith(preds ...predicate.Evidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStandards applies a predicate to check if query has an edge standards.
func (f *OrganizationFilter) WhereHasStandards() {
	f.Where(entql.HasEdge("standards"))
}

// WhereHasStandardsWith applies a predicate to check if query has an edge standards with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasStandardsWith(preds ...predicate.Standard) {
	f.Where(entql.HasEdgeWith("standards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActionPlans applies a predicate to check if query has an edge action_plans.
func (f *OrganizationFilter) WhereHasActionPlans() {
	f.Where(entql.HasEdge("action_plans"))
}

// WhereHasActionPlansWith applies a predicate to check if query has an edge action_plans with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasActionPlansWith(preds ...predicate.ActionPlan) {
	f.Where(entql.HasEdgeWith("action_plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomDomains applies a predicate to check if query has an edge custom_domains.
func (f *OrganizationFilter) WhereHasCustomDomains() {
	f.Where(entql.HasEdge("custom_domains"))
}

// WhereHasCustomDomainsWith applies a predicate to check if query has an edge custom_domains with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasCustomDomainsWith(preds ...predicate.CustomDomain) {
	f.Where(entql.HasEdgeWith("custom_domains", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunners applies a predicate to check if query has an edge job_runners.
func (f *OrganizationFilter) WhereHasJobRunners() {
	f.Where(entql.HasEdge("job_runners"))
}

// WhereHasJobRunnersWith applies a predicate to check if query has an edge job_runners with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasJobRunnersWith(preds ...predicate.JobRunner) {
	f.Where(entql.HasEdgeWith("job_runners", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunnerTokens applies a predicate to check if query has an edge job_runner_tokens.
func (f *OrganizationFilter) WhereHasJobRunnerTokens() {
	f.Where(entql.HasEdge("job_runner_tokens"))
}

// WhereHasJobRunnerTokensWith applies a predicate to check if query has an edge job_runner_tokens with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasJobRunnerTokensWith(preds ...predicate.JobRunnerToken) {
	f.Where(entql.HasEdgeWith("job_runner_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunnerRegistrationTokens applies a predicate to check if query has an edge job_runner_registration_tokens.
func (f *OrganizationFilter) WhereHasJobRunnerRegistrationTokens() {
	f.Where(entql.HasEdge("job_runner_registration_tokens"))
}

// WhereHasJobRunnerRegistrationTokensWith applies a predicate to check if query has an edge job_runner_registration_tokens with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasJobRunnerRegistrationTokensWith(preds ...predicate.JobRunnerRegistrationToken) {
	f.Where(entql.HasEdgeWith("job_runner_registration_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDNSVerifications applies a predicate to check if query has an edge dns_verifications.
func (f *OrganizationFilter) WhereHasDNSVerifications() {
	f.Where(entql.HasEdge("dns_verifications"))
}

// WhereHasDNSVerificationsWith applies a predicate to check if query has an edge dns_verifications with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasDNSVerificationsWith(preds ...predicate.DNSVerification) {
	f.Where(entql.HasEdgeWith("dns_verifications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobTemplates applies a predicate to check if query has an edge job_templates.
func (f *OrganizationFilter) WhereHasJobTemplates() {
	f.Where(entql.HasEdge("job_templates"))
}

// WhereHasJobTemplatesWith applies a predicate to check if query has an edge job_templates with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasJobTemplatesWith(preds ...predicate.JobTemplate) {
	f.Where(entql.HasEdgeWith("job_templates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJobs applies a predicate to check if query has an edge scheduled_jobs.
func (f *OrganizationFilter) WhereHasScheduledJobs() {
	f.Where(entql.HasEdge("scheduled_jobs"))
}

// WhereHasScheduledJobsWith applies a predicate to check if query has an edge scheduled_jobs with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasScheduledJobsWith(preds ...predicate.ScheduledJob) {
	f.Where(entql.HasEdgeWith("scheduled_jobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobResults applies a predicate to check if query has an edge job_results.
func (f *OrganizationFilter) WhereHasJobResults() {
	f.Where(entql.HasEdge("job_results"))
}

// WhereHasJobResultsWith applies a predicate to check if query has an edge job_results with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasJobResultsWith(preds ...predicate.JobResult) {
	f.Where(entql.HasEdgeWith("job_results", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJobRuns applies a predicate to check if query has an edge scheduled_job_runs.
func (f *OrganizationFilter) WhereHasScheduledJobRuns() {
	f.Where(entql.HasEdge("scheduled_job_runs"))
}

// WhereHasScheduledJobRunsWith applies a predicate to check if query has an edge scheduled_job_runs with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasScheduledJobRunsWith(preds ...predicate.ScheduledJobRun) {
	f.Where(entql.HasEdgeWith("scheduled_job_runs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTrustCenters applies a predicate to check if query has an edge trust_centers.
func (f *OrganizationFilter) WhereHasTrustCenters() {
	f.Where(entql.HasEdge("trust_centers"))
}

// WhereHasTrustCentersWith applies a predicate to check if query has an edge trust_centers with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasTrustCentersWith(preds ...predicate.TrustCenter) {
	f.Where(entql.HasEdgeWith("trust_centers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssets applies a predicate to check if query has an edge assets.
func (f *OrganizationFilter) WhereHasAssets() {
	f.Where(entql.HasEdge("assets"))
}

// WhereHasAssetsWith applies a predicate to check if query has an edge assets with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasAssetsWith(preds ...predicate.Asset) {
	f.Where(entql.HasEdgeWith("assets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScans applies a predicate to check if query has an edge scans.
func (f *OrganizationFilter) WhereHasScans() {
	f.Where(entql.HasEdge("scans"))
}

// WhereHasScansWith applies a predicate to check if query has an edge scans with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasScansWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubprocessors applies a predicate to check if query has an edge subprocessors.
func (f *OrganizationFilter) WhereHasSubprocessors() {
	f.Where(entql.HasEdge("subprocessors"))
}

// WhereHasSubprocessorsWith applies a predicate to check if query has an edge subprocessors with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSubprocessorsWith(preds ...predicate.Subprocessor) {
	f.Where(entql.HasEdgeWith("subprocessors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExports applies a predicate to check if query has an edge exports.
func (f *OrganizationFilter) WhereHasExports() {
	f.Where(entql.HasEdge("exports"))
}

// WhereHasExportsWith applies a predicate to check if query has an edge exports with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasExportsWith(preds ...predicate.Export) {
	f.Where(entql.HasEdgeWith("exports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *OrganizationFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasMembersWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrganizationHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationHistoryQuery builder.
func (_q *OrganizationHistoryQuery) Filter() *OrganizationHistoryFilter {
	return &OrganizationHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationHistoryMutation builder.
func (m *OrganizationHistoryMutation) Filter() *OrganizationHistoryFilter {
	return &OrganizationHistoryFilter{config: m.config, predicateAdder: m}
}

// OrganizationHistoryFilter provides a generic filtering capability at runtime for OrganizationHistoryQuery.
type OrganizationHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[66].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OrganizationHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OrganizationHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OrganizationHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organizationhistory.FieldTags))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *OrganizationHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OrganizationHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldDescription))
}

// WhereParentOrganizationID applies the entql string predicate on the parent_organization_id field.
func (f *OrganizationHistoryFilter) WhereParentOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldParentOrganizationID))
}

// WherePersonalOrg applies the entql bool predicate on the personal_org field.
func (f *OrganizationHistoryFilter) WherePersonalOrg(p entql.BoolP) {
	f.Where(p.Field(organizationhistory.FieldPersonalOrg))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *OrganizationHistoryFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFileID applies the entql string predicate on the avatar_local_file_id field.
func (f *OrganizationHistoryFilter) WhereAvatarLocalFileID(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldAvatarLocalFileID))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *OrganizationHistoryFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldAvatarUpdatedAt))
}

// WhereDedicatedDb applies the entql bool predicate on the dedicated_db field.
func (f *OrganizationHistoryFilter) WhereDedicatedDb(p entql.BoolP) {
	f.Where(p.Field(organizationhistory.FieldDedicatedDb))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrganizationSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationSettingQuery builder.
func (_q *OrganizationSettingQuery) Filter() *OrganizationSettingFilter {
	return &OrganizationSettingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationSettingMutation builder.
func (m *OrganizationSettingMutation) Filter() *OrganizationSettingFilter {
	return &OrganizationSettingFilter{config: m.config, predicateAdder: m}
}

// OrganizationSettingFilter provides a generic filtering capability at runtime for OrganizationSettingQuery.
type OrganizationSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[67].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldTags))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *OrganizationSettingFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldDomains))
}

// WhereBillingContact applies the entql string predicate on the billing_contact field.
func (f *OrganizationSettingFilter) WhereBillingContact(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingContact))
}

// WhereBillingEmail applies the entql string predicate on the billing_email field.
func (f *OrganizationSettingFilter) WhereBillingEmail(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingEmail))
}

// WhereBillingPhone applies the entql string predicate on the billing_phone field.
func (f *OrganizationSettingFilter) WhereBillingPhone(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingPhone))
}

// WhereBillingAddress applies the entql json.RawMessage predicate on the billing_address field.
func (f *OrganizationSettingFilter) WhereBillingAddress(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldBillingAddress))
}

// WhereTaxIdentifier applies the entql string predicate on the tax_identifier field.
func (f *OrganizationSettingFilter) WhereTaxIdentifier(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldTaxIdentifier))
}

// WhereGeoLocation applies the entql string predicate on the geo_location field.
func (f *OrganizationSettingFilter) WhereGeoLocation(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldGeoLocation))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrganizationSettingFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldOrganizationID))
}

// WhereBillingNotificationsEnabled applies the entql bool predicate on the billing_notifications_enabled field.
func (f *OrganizationSettingFilter) WhereBillingNotificationsEnabled(p entql.BoolP) {
	f.Where(p.Field(organizationsetting.FieldBillingNotificationsEnabled))
}

// WhereAllowedEmailDomains applies the entql json.RawMessage predicate on the allowed_email_domains field.
func (f *OrganizationSettingFilter) WhereAllowedEmailDomains(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldAllowedEmailDomains))
}

// WhereIdentityProvider applies the entql string predicate on the identity_provider field.
func (f *OrganizationSettingFilter) WhereIdentityProvider(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldIdentityProvider))
}

// WhereIdentityProviderClientID applies the entql string predicate on the identity_provider_client_id field.
func (f *OrganizationSettingFilter) WhereIdentityProviderClientID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldIdentityProviderClientID))
}

// WhereIdentityProviderClientSecret applies the entql string predicate on the identity_provider_client_secret field.
func (f *OrganizationSettingFilter) WhereIdentityProviderClientSecret(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldIdentityProviderClientSecret))
}

// WhereIdentityProviderMetadataEndpoint applies the entql string predicate on the identity_provider_metadata_endpoint field.
func (f *OrganizationSettingFilter) WhereIdentityProviderMetadataEndpoint(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldIdentityProviderMetadataEndpoint))
}

// WhereIdentityProviderEntityID applies the entql string predicate on the identity_provider_entity_id field.
func (f *OrganizationSettingFilter) WhereIdentityProviderEntityID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldIdentityProviderEntityID))
}

// WhereOidcDiscoveryEndpoint applies the entql string predicate on the oidc_discovery_endpoint field.
func (f *OrganizationSettingFilter) WhereOidcDiscoveryEndpoint(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldOidcDiscoveryEndpoint))
}

// WhereIdentityProviderLoginEnforced applies the entql bool predicate on the identity_provider_login_enforced field.
func (f *OrganizationSettingFilter) WhereIdentityProviderLoginEnforced(p entql.BoolP) {
	f.Where(p.Field(organizationsetting.FieldIdentityProviderLoginEnforced))
}

// WhereComplianceWebhookToken applies the entql string predicate on the compliance_webhook_token field.
func (f *OrganizationSettingFilter) WhereComplianceWebhookToken(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldComplianceWebhookToken))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrganizationSettingFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrganizationSettingFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *OrganizationSettingFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *OrganizationSettingFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrganizationSettingHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationSettingHistoryQuery builder.
func (_q *OrganizationSettingHistoryQuery) Filter() *OrganizationSettingHistoryFilter {
	return &OrganizationSettingHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationSettingHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationSettingHistoryMutation builder.
func (m *OrganizationSettingHistoryMutation) Filter() *OrganizationSettingHistoryFilter {
	return &OrganizationSettingHistoryFilter{config: m.config, predicateAdder: m}
}

// OrganizationSettingHistoryFilter provides a generic filtering capability at runtime for OrganizationSettingHistoryQuery.
type OrganizationSettingHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationSettingHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[68].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationSettingHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OrganizationSettingHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OrganizationSettingHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OrganizationSettingHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationSettingHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationSettingHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationSettingHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationSettingHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationSettingHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationSettingHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationSettingHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organizationsettinghistory.FieldTags))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *OrganizationSettingHistoryFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(organizationsettinghistory.FieldDomains))
}

// WhereBillingContact applies the entql string predicate on the billing_contact field.
func (f *OrganizationSettingHistoryFilter) WhereBillingContact(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingContact))
}

// WhereBillingEmail applies the entql string predicate on the billing_email field.
func (f *OrganizationSettingHistoryFilter) WhereBillingEmail(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingEmail))
}

// WhereBillingPhone applies the entql string predicate on the billing_phone field.
func (f *OrganizationSettingHistoryFilter) WhereBillingPhone(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingPhone))
}

// WhereBillingAddress applies the entql json.RawMessage predicate on the billing_address field.
func (f *OrganizationSettingHistoryFilter) WhereBillingAddress(p entql.BytesP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingAddress))
}

// WhereTaxIdentifier applies the entql string predicate on the tax_identifier field.
func (f *OrganizationSettingHistoryFilter) WhereTaxIdentifier(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldTaxIdentifier))
}

// WhereGeoLocation applies the entql string predicate on the geo_location field.
func (f *OrganizationSettingHistoryFilter) WhereGeoLocation(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldGeoLocation))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrganizationSettingHistoryFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldOrganizationID))
}

// WhereBillingNotificationsEnabled applies the entql bool predicate on the billing_notifications_enabled field.
func (f *OrganizationSettingHistoryFilter) WhereBillingNotificationsEnabled(p entql.BoolP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingNotificationsEnabled))
}

// WhereAllowedEmailDomains applies the entql json.RawMessage predicate on the allowed_email_domains field.
func (f *OrganizationSettingHistoryFilter) WhereAllowedEmailDomains(p entql.BytesP) {
	f.Where(p.Field(organizationsettinghistory.FieldAllowedEmailDomains))
}

// WhereIdentityProvider applies the entql string predicate on the identity_provider field.
func (f *OrganizationSettingHistoryFilter) WhereIdentityProvider(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldIdentityProvider))
}

// WhereIdentityProviderClientID applies the entql string predicate on the identity_provider_client_id field.
func (f *OrganizationSettingHistoryFilter) WhereIdentityProviderClientID(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldIdentityProviderClientID))
}

// WhereIdentityProviderClientSecret applies the entql string predicate on the identity_provider_client_secret field.
func (f *OrganizationSettingHistoryFilter) WhereIdentityProviderClientSecret(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldIdentityProviderClientSecret))
}

// WhereIdentityProviderMetadataEndpoint applies the entql string predicate on the identity_provider_metadata_endpoint field.
func (f *OrganizationSettingHistoryFilter) WhereIdentityProviderMetadataEndpoint(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldIdentityProviderMetadataEndpoint))
}

// WhereIdentityProviderEntityID applies the entql string predicate on the identity_provider_entity_id field.
func (f *OrganizationSettingHistoryFilter) WhereIdentityProviderEntityID(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldIdentityProviderEntityID))
}

// WhereOidcDiscoveryEndpoint applies the entql string predicate on the oidc_discovery_endpoint field.
func (f *OrganizationSettingHistoryFilter) WhereOidcDiscoveryEndpoint(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldOidcDiscoveryEndpoint))
}

// WhereIdentityProviderLoginEnforced applies the entql bool predicate on the identity_provider_login_enforced field.
func (f *OrganizationSettingHistoryFilter) WhereIdentityProviderLoginEnforced(p entql.BoolP) {
	f.Where(p.Field(organizationsettinghistory.FieldIdentityProviderLoginEnforced))
}

// WhereComplianceWebhookToken applies the entql string predicate on the compliance_webhook_token field.
func (f *OrganizationSettingHistoryFilter) WhereComplianceWebhookToken(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldComplianceWebhookToken))
}

// addPredicate implements the predicateAdder interface.
func (_q *PasswordResetTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PasswordResetTokenQuery builder.
func (_q *PasswordResetTokenQuery) Filter() *PasswordResetTokenFilter {
	return &PasswordResetTokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PasswordResetTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PasswordResetTokenMutation builder.
func (m *PasswordResetTokenMutation) Filter() *PasswordResetTokenFilter {
	return &PasswordResetTokenFilter{config: m.config, predicateAdder: m}
}

// PasswordResetTokenFilter provides a generic filtering capability at runtime for PasswordResetTokenQuery.
type PasswordResetTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PasswordResetTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[69].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PasswordResetTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PasswordResetTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PasswordResetTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PasswordResetTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *PasswordResetTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PasswordResetTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *PasswordResetTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *PasswordResetTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *PasswordResetTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *PasswordResetTokenFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldTTL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *PasswordResetTokenFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldEmail))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *PasswordResetTokenFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(passwordresettoken.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *PasswordResetTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *PasswordResetTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PersonalAccessTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonalAccessTokenQuery builder.
func (_q *PersonalAccessTokenQuery) Filter() *PersonalAccessTokenFilter {
	return &PersonalAccessTokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonalAccessTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonalAccessTokenMutation builder.
func (m *PersonalAccessTokenMutation) Filter() *PersonalAccessTokenFilter {
	return &PersonalAccessTokenFilter{config: m.config, predicateAdder: m}
}

// PersonalAccessTokenFilter provides a generic filtering capability at runtime for PersonalAccessTokenQuery.
type PersonalAccessTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PersonalAccessTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[70].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PersonalAccessTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonalAccessTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonalAccessTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PersonalAccessTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *PersonalAccessTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonalAccessTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *PersonalAccessTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *PersonalAccessTokenFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(personalaccesstoken.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *PersonalAccessTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonalAccessTokenFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldName))
}

// WhereToken applies the entql string predicate on the token field.
func (f *PersonalAccessTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *PersonalAccessTokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldExpiresAt))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PersonalAccessTokenFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldDescription))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *PersonalAccessTokenFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(personalaccesstoken.FieldScopes))
}

// WhereSSOAuthorizations applies the entql json.RawMessage predicate on the sso_authorizations field.
func (f *PersonalAccessTokenFilter) WhereSSOAuthorizations(p entql.BytesP) {
	f.Where(p.Field(personalaccesstoken.FieldSSOAuthorizations))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *PersonalAccessTokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldLastUsedAt))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *PersonalAccessTokenFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(personalaccesstoken.FieldIsActive))
}

// WhereRevokedReason applies the entql string predicate on the revoked_reason field.
func (f *PersonalAccessTokenFilter) WhereRevokedReason(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldRevokedReason))
}

// WhereRevokedBy applies the entql string predicate on the revoked_by field.
func (f *PersonalAccessTokenFilter) WhereRevokedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldRevokedBy))
}

// WhereRevokedAt applies the entql time.Time predicate on the revoked_at field.
func (f *PersonalAccessTokenFilter) WhereRevokedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldRevokedAt))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *PersonalAccessTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *PersonalAccessTokenFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *PersonalAccessTokenFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProcedureQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProcedureQuery builder.
func (_q *ProcedureQuery) Filter() *ProcedureFilter {
	return &ProcedureFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProcedureMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProcedureMutation builder.
func (m *ProcedureMutation) Filter() *ProcedureFilter {
	return &ProcedureFilter{config: m.config, predicateAdder: m}
}

// ProcedureFilter provides a generic filtering capability at runtime for ProcedureQuery.
type ProcedureFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProcedureFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[71].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProcedureFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(procedure.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProcedureFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(procedure.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProcedureFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(procedure.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ProcedureFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(procedure.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ProcedureFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(procedure.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ProcedureFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(procedure.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ProcedureFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(procedure.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ProcedureFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(procedure.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ProcedureFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(procedure.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *ProcedureFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(procedure.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ProcedureFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(procedure.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProcedureFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(procedure.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProcedureFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(procedure.FieldStatus))
}

// WhereProcedureType applies the entql string predicate on the procedure_type field.
func (f *ProcedureFilter) WhereProcedureType(p entql.StringP) {
	f.Where(p.Field(procedure.FieldProcedureType))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *ProcedureFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(procedure.FieldDetails))
}

// WhereApprovalRequired applies the entql bool predicate on the approval_required field.
func (f *ProcedureFilter) WhereApprovalRequired(p entql.BoolP) {
	f.Where(p.Field(procedure.FieldApprovalRequired))
}

// WhereReviewDue applies the entql time.Time predicate on the review_due field.
func (f *ProcedureFilter) WhereReviewDue(p entql.TimeP) {
	f.Where(p.Field(procedure.FieldReviewDue))
}

// WhereReviewFrequency applies the entql string predicate on the review_frequency field.
func (f *ProcedureFilter) WhereReviewFrequency(p entql.StringP) {
	f.Where(p.Field(procedure.FieldReviewFrequency))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *ProcedureFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(procedure.FieldApproverID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *ProcedureFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(procedure.FieldDelegateID))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *ProcedureFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(procedure.FieldSummary))
}

// WhereTagSuggestions applies the entql json.RawMessage predicate on the tag_suggestions field.
func (f *ProcedureFilter) WhereTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedure.FieldTagSuggestions))
}

// WhereDismissedTagSuggestions applies the entql json.RawMessage predicate on the dismissed_tag_suggestions field.
func (f *ProcedureFilter) WhereDismissedTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedure.FieldDismissedTagSuggestions))
}

// WhereControlSuggestions applies the entql json.RawMessage predicate on the control_suggestions field.
func (f *ProcedureFilter) WhereControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedure.FieldControlSuggestions))
}

// WhereDismissedControlSuggestions applies the entql json.RawMessage predicate on the dismissed_control_suggestions field.
func (f *ProcedureFilter) WhereDismissedControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedure.FieldDismissedControlSuggestions))
}

// WhereImprovementSuggestions applies the entql json.RawMessage predicate on the improvement_suggestions field.
func (f *ProcedureFilter) WhereImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedure.FieldImprovementSuggestions))
}

// WhereDismissedImprovementSuggestions applies the entql json.RawMessage predicate on the dismissed_improvement_suggestions field.
func (f *ProcedureFilter) WhereDismissedImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedure.FieldDismissedImprovementSuggestions))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ProcedureFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *ProcedureFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *ProcedureFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApprover applies a predicate to check if query has an edge approver.
func (f *ProcedureFilter) WhereHasApprover() {
	f.Where(entql.HasEdge("approver"))
}

// WhereHasApproverWith applies a predicate to check if query has an edge approver with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasApproverWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("approver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDelegate applies a predicate to check if query has an edge delegate.
func (f *ProcedureFilter) WhereHasDelegate() {
	f.Where(entql.HasEdge("delegate"))
}

// WhereHasDelegateWith applies a predicate to check if query has an edge delegate with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasDelegateWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("delegate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *ProcedureFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *ProcedureFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *ProcedureFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *ProcedureFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarratives applies a predicate to check if query has an edge narratives.
func (f *ProcedureFilter) WhereHasNarratives() {
	f.Where(entql.HasEdge("narratives"))
}

// WhereHasNarrativesWith applies a predicate to check if query has an edge narratives with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasNarrativesWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narratives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *ProcedureFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *ProcedureFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *ProcedureFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProcedureHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProcedureHistoryQuery builder.
func (_q *ProcedureHistoryQuery) Filter() *ProcedureHistoryFilter {
	return &ProcedureHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProcedureHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProcedureHistoryMutation builder.
func (m *ProcedureHistoryMutation) Filter() *ProcedureHistoryFilter {
	return &ProcedureHistoryFilter{config: m.config, predicateAdder: m}
}

// ProcedureHistoryFilter provides a generic filtering capability at runtime for ProcedureHistoryQuery.
type ProcedureHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProcedureHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[72].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProcedureHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ProcedureHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(procedurehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ProcedureHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ProcedureHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProcedureHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(procedurehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProcedureHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(procedurehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ProcedureHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ProcedureHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ProcedureHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(procedurehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ProcedureHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ProcedureHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ProcedureHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(procedurehistory.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *ProcedureHistoryFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ProcedureHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProcedureHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProcedureHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldStatus))
}

// WhereProcedureType applies the entql string predicate on the procedure_type field.
func (f *ProcedureHistoryFilter) WhereProcedureType(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldProcedureType))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *ProcedureHistoryFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldDetails))
}

// WhereApprovalRequired applies the entql bool predicate on the approval_required field.
func (f *ProcedureHistoryFilter) WhereApprovalRequired(p entql.BoolP) {
	f.Where(p.Field(procedurehistory.FieldApprovalRequired))
}

// WhereReviewDue applies the entql time.Time predicate on the review_due field.
func (f *ProcedureHistoryFilter) WhereReviewDue(p entql.TimeP) {
	f.Where(p.Field(procedurehistory.FieldReviewDue))
}

// WhereReviewFrequency applies the entql string predicate on the review_frequency field.
func (f *ProcedureHistoryFilter) WhereReviewFrequency(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldReviewFrequency))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *ProcedureHistoryFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldApproverID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *ProcedureHistoryFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldDelegateID))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *ProcedureHistoryFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(procedurehistory.FieldSummary))
}

// WhereTagSuggestions applies the entql json.RawMessage predicate on the tag_suggestions field.
func (f *ProcedureHistoryFilter) WhereTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedurehistory.FieldTagSuggestions))
}

// WhereDismissedTagSuggestions applies the entql json.RawMessage predicate on the dismissed_tag_suggestions field.
func (f *ProcedureHistoryFilter) WhereDismissedTagSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedurehistory.FieldDismissedTagSuggestions))
}

// WhereControlSuggestions applies the entql json.RawMessage predicate on the control_suggestions field.
func (f *ProcedureHistoryFilter) WhereControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedurehistory.FieldControlSuggestions))
}

// WhereDismissedControlSuggestions applies the entql json.RawMessage predicate on the dismissed_control_suggestions field.
func (f *ProcedureHistoryFilter) WhereDismissedControlSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedurehistory.FieldDismissedControlSuggestions))
}

// WhereImprovementSuggestions applies the entql json.RawMessage predicate on the improvement_suggestions field.
func (f *ProcedureHistoryFilter) WhereImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedurehistory.FieldImprovementSuggestions))
}

// WhereDismissedImprovementSuggestions applies the entql json.RawMessage predicate on the dismissed_improvement_suggestions field.
func (f *ProcedureHistoryFilter) WhereDismissedImprovementSuggestions(p entql.BytesP) {
	f.Where(p.Field(procedurehistory.FieldDismissedImprovementSuggestions))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramQuery builder.
func (_q *ProgramQuery) Filter() *ProgramFilter {
	return &ProgramFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramMutation builder.
func (m *ProgramMutation) Filter() *ProgramFilter {
	return &ProgramFilter{config: m.config, predicateAdder: m}
}

// ProgramFilter provides a generic filtering capability at runtime for ProgramQuery.
type ProgramFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[73].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProgramFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(program.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(program.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(program.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ProgramFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(program.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ProgramFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(program.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ProgramFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(program.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ProgramFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(program.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ProgramFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(program.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ProgramFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(program.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ProgramFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(program.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProgramFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(program.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ProgramFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(program.FieldDescription))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProgramFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(program.FieldStatus))
}

// WhereProgramType applies the entql string predicate on the program_type field.
func (f *ProgramFilter) WhereProgramType(p entql.StringP) {
	f.Where(p.Field(program.FieldProgramType))
}

// WhereFrameworkName applies the entql string predicate on the framework_name field.
func (f *ProgramFilter) WhereFrameworkName(p entql.StringP) {
	f.Where(p.Field(program.FieldFrameworkName))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *ProgramFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(program.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *ProgramFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(program.FieldEndDate))
}

// WhereAuditorReady applies the entql bool predicate on the auditor_ready field.
func (f *ProgramFilter) WhereAuditorReady(p entql.BoolP) {
	f.Where(p.Field(program.FieldAuditorReady))
}

// WhereAuditorWriteComments applies the entql bool predicate on the auditor_write_comments field.
func (f *ProgramFilter) WhereAuditorWriteComments(p entql.BoolP) {
	f.Where(p.Field(program.FieldAuditorWriteComments))
}

// WhereAuditorReadComments applies the entql bool predicate on the auditor_read_comments field.
func (f *ProgramFilter) WhereAuditorReadComments(p entql.BoolP) {
	f.Where(p.Field(program.FieldAuditorReadComments))
}

// WhereAuditFirm applies the entql string predicate on the audit_firm field.
func (f *ProgramFilter) WhereAuditFirm(p entql.StringP) {
	f.Where(p.Field(program.FieldAuditFirm))
}

// WhereAuditor applies the entql string predicate on the auditor field.
func (f *ProgramFilter) WhereAuditor(p entql.StringP) {
	f.Where(p.Field(program.FieldAuditor))
}

// WhereAuditorEmail applies the entql string predicate on the auditor_email field.
func (f *ProgramFilter) WhereAuditorEmail(p entql.StringP) {
	f.Where(p.Field(program.FieldAuditorEmail))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ProgramFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *ProgramFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *ProgramFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *ProgramFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *ProgramFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *ProgramFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectives applies a predicate to check if query has an edge control_objectives.
func (f *ProgramFilter) WhereHasControlObjectives() {
	f.Where(entql.HasEdge("control_objectives"))
}

// WhereHasControlObjectivesWith applies a predicate to check if query has an edge control_objectives with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasControlObjectivesWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objectives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *ProgramFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *ProgramFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *ProgramFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *ProgramFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotes applies a predicate to check if query has an edge notes.
func (f *ProgramFilter) WhereHasNotes() {
	f.Where(entql.HasEdge("notes"))
}

// WhereHasNotesWith applies a predicate to check if query has an edge notes with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasNotesWith(preds ...predicate.Note) {
	f.Where(entql.HasEdgeWith("notes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *ProgramFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *ProgramFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasEvidenceWith(preds ...predicate.Evidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarratives applies a predicate to check if query has an edge narratives.
func (f *ProgramFilter) WhereHasNarratives() {
	f.Where(entql.HasEdge("narratives"))
}

// WhereHasNarrativesWith applies a predicate to check if query has an edge narratives with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasNarrativesWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narratives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActionPlans applies a predicate to check if query has an edge action_plans.
func (f *ProgramFilter) WhereHasActionPlans() {
	f.Where(entql.HasEdge("action_plans"))
}

// WhereHasActionPlansWith applies a predicate to check if query has an edge action_plans with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasActionPlansWith(preds ...predicate.ActionPlan) {
	f.Where(entql.HasEdgeWith("action_plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *ProgramFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *ProgramFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasMembersWith(preds ...predicate.ProgramMembership) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramHistoryQuery builder.
func (_q *ProgramHistoryQuery) Filter() *ProgramHistoryFilter {
	return &ProgramHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramHistoryMutation builder.
func (m *ProgramHistoryMutation) Filter() *ProgramHistoryFilter {
	return &ProgramHistoryFilter{config: m.config, predicateAdder: m}
}

// ProgramHistoryFilter provides a generic filtering capability at runtime for ProgramHistoryQuery.
type ProgramHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[74].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProgramHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ProgramHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(programhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ProgramHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ProgramHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(programhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(programhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ProgramHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ProgramHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ProgramHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(programhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ProgramHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ProgramHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ProgramHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(programhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ProgramHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProgramHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ProgramHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldDescription))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProgramHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldStatus))
}

// WhereProgramType applies the entql string predicate on the program_type field.
func (f *ProgramHistoryFilter) WhereProgramType(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldProgramType))
}

// WhereFrameworkName applies the entql string predicate on the framework_name field.
func (f *ProgramHistoryFilter) WhereFrameworkName(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldFrameworkName))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *ProgramHistoryFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(programhistory.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *ProgramHistoryFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(programhistory.FieldEndDate))
}

// WhereAuditorReady applies the entql bool predicate on the auditor_ready field.
func (f *ProgramHistoryFilter) WhereAuditorReady(p entql.BoolP) {
	f.Where(p.Field(programhistory.FieldAuditorReady))
}

// WhereAuditorWriteComments applies the entql bool predicate on the auditor_write_comments field.
func (f *ProgramHistoryFilter) WhereAuditorWriteComments(p entql.BoolP) {
	f.Where(p.Field(programhistory.FieldAuditorWriteComments))
}

// WhereAuditorReadComments applies the entql bool predicate on the auditor_read_comments field.
func (f *ProgramHistoryFilter) WhereAuditorReadComments(p entql.BoolP) {
	f.Where(p.Field(programhistory.FieldAuditorReadComments))
}

// WhereAuditFirm applies the entql string predicate on the audit_firm field.
func (f *ProgramHistoryFilter) WhereAuditFirm(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldAuditFirm))
}

// WhereAuditor applies the entql string predicate on the auditor field.
func (f *ProgramHistoryFilter) WhereAuditor(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldAuditor))
}

// WhereAuditorEmail applies the entql string predicate on the auditor_email field.
func (f *ProgramHistoryFilter) WhereAuditorEmail(p entql.StringP) {
	f.Where(p.Field(programhistory.FieldAuditorEmail))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramMembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramMembershipQuery builder.
func (_q *ProgramMembershipQuery) Filter() *ProgramMembershipFilter {
	return &ProgramMembershipFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramMembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramMembershipMutation builder.
func (m *ProgramMembershipMutation) Filter() *ProgramMembershipFilter {
	return &ProgramMembershipFilter{config: m.config, predicateAdder: m}
}

// ProgramMembershipFilter provides a generic filtering capability at runtime for ProgramMembershipQuery.
type ProgramMembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramMembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[75].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProgramMembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(programmembership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramMembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(programmembership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramMembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(programmembership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ProgramMembershipFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(programmembership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ProgramMembershipFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(programmembership.FieldUpdatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *ProgramMembershipFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(programmembership.FieldRole))
}

// WhereProgramID applies the entql string predicate on the program_id field.
func (f *ProgramMembershipFilter) WhereProgramID(p entql.StringP) {
	f.Where(p.Field(programmembership.FieldProgramID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *ProgramMembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(programmembership.FieldUserID))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *ProgramMembershipFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *ProgramMembershipFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ProgramMembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ProgramMembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgMembership applies a predicate to check if query has an edge org_membership.
func (f *ProgramMembershipFilter) WhereHasOrgMembership() {
	f.Where(entql.HasEdge("org_membership"))
}

// WhereHasOrgMembershipWith applies a predicate to check if query has an edge org_membership with a given conditions (other predicates).
func (f *ProgramMembershipFilter) WhereHasOrgMembershipWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("org_membership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramMembershipHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramMembershipHistoryQuery builder.
func (_q *ProgramMembershipHistoryQuery) Filter() *ProgramMembershipHistoryFilter {
	return &ProgramMembershipHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramMembershipHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramMembershipHistoryMutation builder.
func (m *ProgramMembershipHistoryMutation) Filter() *ProgramMembershipHistoryFilter {
	return &ProgramMembershipHistoryFilter{config: m.config, predicateAdder: m}
}

// ProgramMembershipHistoryFilter provides a generic filtering capability at runtime for ProgramMembershipHistoryQuery.
type ProgramMembershipHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramMembershipHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[76].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProgramMembershipHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ProgramMembershipHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(programmembershiphistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ProgramMembershipHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ProgramMembershipHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramMembershipHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(programmembershiphistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramMembershipHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(programmembershiphistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ProgramMembershipHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ProgramMembershipHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldUpdatedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *ProgramMembershipHistoryFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldRole))
}

// WhereProgramID applies the entql string predicate on the program_id field.
func (f *ProgramMembershipHistoryFilter) WhereProgramID(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldProgramID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *ProgramMembershipHistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(programmembershiphistory.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (_q *RiskQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskQuery builder.
func (_q *RiskQuery) Filter() *RiskFilter {
	return &RiskFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskMutation builder.
func (m *RiskMutation) Filter() *RiskFilter {
	return &RiskFilter{config: m.config, predicateAdder: m}
}

// RiskFilter provides a generic filtering capability at runtime for RiskQuery.
type RiskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[77].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *RiskFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(risk.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *RiskFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(risk.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *RiskFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(risk.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(risk.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *RiskFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(risk.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *RiskFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(risk.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *RiskFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(risk.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *RiskFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(risk.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(risk.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *RiskFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(risk.FieldStatus))
}

// WhereRiskType applies the entql string predicate on the risk_type field.
func (f *RiskFilter) WhereRiskType(p entql.StringP) {
	f.Where(p.Field(risk.FieldRiskType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *RiskFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(risk.FieldCategory))
}

// WhereImpact applies the entql string predicate on the impact field.
func (f *RiskFilter) WhereImpact(p entql.StringP) {
	f.Where(p.Field(risk.FieldImpact))
}

// WhereLikelihood applies the entql string predicate on the likelihood field.
func (f *RiskFilter) WhereLikelihood(p entql.StringP) {
	f.Where(p.Field(risk.FieldLikelihood))
}

// WhereScore applies the entql int predicate on the score field.
func (f *RiskFilter) WhereScore(p entql.IntP) {
	f.Where(p.Field(risk.FieldScore))
}

// WhereMitigation applies the entql string predicate on the mitigation field.
func (f *RiskFilter) WhereMitigation(p entql.StringP) {
	f.Where(p.Field(risk.FieldMitigation))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *RiskFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(risk.FieldDetails))
}

// WhereBusinessCosts applies the entql string predicate on the business_costs field.
func (f *RiskFilter) WhereBusinessCosts(p entql.StringP) {
	f.Where(p.Field(risk.FieldBusinessCosts))
}

// WhereStakeholderID applies the entql string predicate on the stakeholder_id field.
func (f *RiskFilter) WhereStakeholderID(p entql.StringP) {
	f.Where(p.Field(risk.FieldStakeholderID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *RiskFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(risk.FieldDelegateID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *RiskFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *RiskFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *RiskFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *RiskFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *RiskFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *RiskFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *RiskFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *RiskFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *RiskFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *RiskFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *RiskFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *RiskFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *RiskFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *RiskFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *RiskFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *RiskFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *RiskFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *RiskFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActionPlans applies a predicate to check if query has an edge action_plans.
func (f *RiskFilter) WhereHasActionPlans() {
	f.Where(entql.HasEdge("action_plans"))
}

// WhereHasActionPlansWith applies a predicate to check if query has an edge action_plans with a given conditions (other predicates).
func (f *RiskFilter) WhereHasActionPlansWith(preds ...predicate.ActionPlan) {
	f.Where(entql.HasEdgeWith("action_plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *RiskFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *RiskFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssets applies a predicate to check if query has an edge assets.
func (f *RiskFilter) WhereHasAssets() {
	f.Where(entql.HasEdge("assets"))
}

// WhereHasAssetsWith applies a predicate to check if query has an edge assets with a given conditions (other predicates).
func (f *RiskFilter) WhereHasAssetsWith(preds ...predicate.Asset) {
	f.Where(entql.HasEdgeWith("assets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *RiskFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *RiskFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScans applies a predicate to check if query has an edge scans.
func (f *RiskFilter) WhereHasScans() {
	f.Where(entql.HasEdge("scans"))
}

// WhereHasScansWith applies a predicate to check if query has an edge scans with a given conditions (other predicates).
func (f *RiskFilter) WhereHasScansWith(preds ...predicate.Scan) {
	f.Where(entql.HasEdgeWith("scans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStakeholder applies a predicate to check if query has an edge stakeholder.
func (f *RiskFilter) WhereHasStakeholder() {
	f.Where(entql.HasEdge("stakeholder"))
}

// WhereHasStakeholderWith applies a predicate to check if query has an edge stakeholder with a given conditions (other predicates).
func (f *RiskFilter) WhereHasStakeholderWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("stakeholder", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDelegate applies a predicate to check if query has an edge delegate.
func (f *RiskFilter) WhereHasDelegate() {
	f.Where(entql.HasEdge("delegate"))
}

// WhereHasDelegateWith applies a predicate to check if query has an edge delegate with a given conditions (other predicates).
func (f *RiskFilter) WhereHasDelegateWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("delegate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RiskHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiskHistoryQuery builder.
func (_q *RiskHistoryQuery) Filter() *RiskHistoryFilter {
	return &RiskHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RiskHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiskHistoryMutation builder.
func (m *RiskHistoryMutation) Filter() *RiskHistoryFilter {
	return &RiskHistoryFilter{config: m.config, predicateAdder: m}
}

// RiskHistoryFilter provides a generic filtering capability at runtime for RiskHistoryQuery.
type RiskHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiskHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[78].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *RiskHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *RiskHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(riskhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *RiskHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *RiskHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiskHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(riskhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiskHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(riskhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *RiskHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *RiskHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiskHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(riskhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *RiskHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *RiskHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *RiskHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(riskhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *RiskHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiskHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *RiskHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldStatus))
}

// WhereRiskType applies the entql string predicate on the risk_type field.
func (f *RiskHistoryFilter) WhereRiskType(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldRiskType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *RiskHistoryFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldCategory))
}

// WhereImpact applies the entql string predicate on the impact field.
func (f *RiskHistoryFilter) WhereImpact(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldImpact))
}

// WhereLikelihood applies the entql string predicate on the likelihood field.
func (f *RiskHistoryFilter) WhereLikelihood(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldLikelihood))
}

// WhereScore applies the entql int predicate on the score field.
func (f *RiskHistoryFilter) WhereScore(p entql.IntP) {
	f.Where(p.Field(riskhistory.FieldScore))
}

// WhereMitigation applies the entql string predicate on the mitigation field.
func (f *RiskHistoryFilter) WhereMitigation(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldMitigation))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *RiskHistoryFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldDetails))
}

// WhereBusinessCosts applies the entql string predicate on the business_costs field.
func (f *RiskHistoryFilter) WhereBusinessCosts(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldBusinessCosts))
}

// WhereStakeholderID applies the entql string predicate on the stakeholder_id field.
func (f *RiskHistoryFilter) WhereStakeholderID(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldStakeholderID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *RiskHistoryFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(riskhistory.FieldDelegateID))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScanQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScanQuery builder.
func (_q *ScanQuery) Filter() *ScanFilter {
	return &ScanFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScanMutation builder.
func (m *ScanMutation) Filter() *ScanFilter {
	return &ScanFilter{config: m.config, predicateAdder: m}
}

// ScanFilter provides a generic filtering capability at runtime for ScanQuery.
type ScanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[79].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ScanFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(scan.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ScanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(scan.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ScanFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(scan.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ScanFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(scan.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ScanFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(scan.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ScanFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(scan.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ScanFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(scan.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ScanFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(scan.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ScanFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(scan.FieldOwnerID))
}

// WhereTarget applies the entql string predicate on the target field.
func (f *ScanFilter) WhereTarget(p entql.StringP) {
	f.Where(p.Field(scan.FieldTarget))
}

// WhereScanType applies the entql string predicate on the scan_type field.
func (f *ScanFilter) WhereScanType(p entql.StringP) {
	f.Where(p.Field(scan.FieldScanType))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *ScanFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(scan.FieldMetadata))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ScanFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(scan.FieldStatus))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ScanFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ScanFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockedGroups applies a predicate to check if query has an edge blocked_groups.
func (f *ScanFilter) WhereHasBlockedGroups() {
	f.Where(entql.HasEdge("blocked_groups"))
}

// WhereHasBlockedGroupsWith applies a predicate to check if query has an edge blocked_groups with a given conditions (other predicates).
func (f *ScanFilter) WhereHasBlockedGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("blocked_groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEditors applies a predicate to check if query has an edge editors.
func (f *ScanFilter) WhereHasEditors() {
	f.Where(entql.HasEdge("editors"))
}

// WhereHasEditorsWith applies a predicate to check if query has an edge editors with a given conditions (other predicates).
func (f *ScanFilter) WhereHasEditorsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("editors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasViewers applies a predicate to check if query has an edge viewers.
func (f *ScanFilter) WhereHasViewers() {
	f.Where(entql.HasEdge("viewers"))
}

// WhereHasViewersWith applies a predicate to check if query has an edge viewers with a given conditions (other predicates).
func (f *ScanFilter) WhereHasViewersWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("viewers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssets applies a predicate to check if query has an edge assets.
func (f *ScanFilter) WhereHasAssets() {
	f.Where(entql.HasEdge("assets"))
}

// WhereHasAssetsWith applies a predicate to check if query has an edge assets with a given conditions (other predicates).
func (f *ScanFilter) WhereHasAssetsWith(preds ...predicate.Asset) {
	f.Where(entql.HasEdgeWith("assets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *ScanFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *ScanFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScanHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScanHistoryQuery builder.
func (_q *ScanHistoryQuery) Filter() *ScanHistoryFilter {
	return &ScanHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScanHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScanHistoryMutation builder.
func (m *ScanHistoryMutation) Filter() *ScanHistoryFilter {
	return &ScanHistoryFilter{config: m.config, predicateAdder: m}
}

// ScanHistoryFilter provides a generic filtering capability at runtime for ScanHistoryQuery.
type ScanHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScanHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[80].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ScanHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ScanHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(scanhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ScanHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ScanHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ScanHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(scanhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ScanHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(scanhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ScanHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ScanHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ScanHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(scanhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ScanHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ScanHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(scanhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ScanHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldOwnerID))
}

// WhereTarget applies the entql string predicate on the target field.
func (f *ScanHistoryFilter) WhereTarget(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldTarget))
}

// WhereScanType applies the entql string predicate on the scan_type field.
func (f *ScanHistoryFilter) WhereScanType(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldScanType))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *ScanHistoryFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(scanhistory.FieldMetadata))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ScanHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(scanhistory.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScheduledJobQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScheduledJobQuery builder.
func (_q *ScheduledJobQuery) Filter() *ScheduledJobFilter {
	return &ScheduledJobFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScheduledJobMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScheduledJobMutation builder.
func (m *ScheduledJobMutation) Filter() *ScheduledJobFilter {
	return &ScheduledJobFilter{config: m.config, predicateAdder: m}
}

// ScheduledJobFilter provides a generic filtering capability at runtime for ScheduledJobQuery.
type ScheduledJobFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScheduledJobFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[81].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ScheduledJobFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ScheduledJobFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjob.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ScheduledJobFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjob.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ScheduledJobFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ScheduledJobFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ScheduledJobFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjob.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ScheduledJobFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ScheduledJobFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldDisplayID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ScheduledJobFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldOwnerID))
}

// WhereJobID applies the entql string predicate on the job_id field.
func (f *ScheduledJobFilter) WhereJobID(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldJobID))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *ScheduledJobFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(scheduledjob.FieldActive))
}

// WhereConfiguration applies the entql json.RawMessage predicate on the configuration field.
func (f *ScheduledJobFilter) WhereConfiguration(p entql.BytesP) {
	f.Where(p.Field(scheduledjob.FieldConfiguration))
}

// WhereCron applies the entql string predicate on the cron field.
func (f *ScheduledJobFilter) WhereCron(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldCron))
}

// WhereJobRunnerID applies the entql string predicate on the job_runner_id field.
func (f *ScheduledJobFilter) WhereJobRunnerID(p entql.StringP) {
	f.Where(p.Field(scheduledjob.FieldJobRunnerID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ScheduledJobFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ScheduledJobFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobTemplate applies a predicate to check if query has an edge job_template.
func (f *ScheduledJobFilter) WhereHasJobTemplate() {
	f.Where(entql.HasEdge("job_template"))
}

// WhereHasJobTemplateWith applies a predicate to check if query has an edge job_template with a given conditions (other predicates).
func (f *ScheduledJobFilter) WhereHasJobTemplateWith(preds ...predicate.JobTemplate) {
	f.Where(entql.HasEdgeWith("job_template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *ScheduledJobFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *ScheduledJobFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *ScheduledJobFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *ScheduledJobFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunner applies a predicate to check if query has an edge job_runner.
func (f *ScheduledJobFilter) WhereHasJobRunner() {
	f.Where(entql.HasEdge("job_runner"))
}

// WhereHasJobRunnerWith applies a predicate to check if query has an edge job_runner with a given conditions (other predicates).
func (f *ScheduledJobFilter) WhereHasJobRunnerWith(preds ...predicate.JobRunner) {
	f.Where(entql.HasEdgeWith("job_runner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScheduledJobHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScheduledJobHistoryQuery builder.
func (_q *ScheduledJobHistoryQuery) Filter() *ScheduledJobHistoryFilter {
	return &ScheduledJobHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScheduledJobHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScheduledJobHistoryMutation builder.
func (m *ScheduledJobHistoryMutation) Filter() *ScheduledJobHistoryFilter {
	return &ScheduledJobHistoryFilter{config: m.config, predicateAdder: m}
}

// ScheduledJobHistoryFilter provides a generic filtering capability at runtime for ScheduledJobHistoryQuery.
type ScheduledJobHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScheduledJobHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[82].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ScheduledJobHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ScheduledJobHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(scheduledjobhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ScheduledJobHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ScheduledJobHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ScheduledJobHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjobhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ScheduledJobHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjobhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ScheduledJobHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ScheduledJobHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ScheduledJobHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjobhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ScheduledJobHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *ScheduledJobHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldDisplayID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ScheduledJobHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldOwnerID))
}

// WhereJobID applies the entql string predicate on the job_id field.
func (f *ScheduledJobHistoryFilter) WhereJobID(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldJobID))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *ScheduledJobHistoryFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(scheduledjobhistory.FieldActive))
}

// WhereConfiguration applies the entql json.RawMessage predicate on the configuration field.
func (f *ScheduledJobHistoryFilter) WhereConfiguration(p entql.BytesP) {
	f.Where(p.Field(scheduledjobhistory.FieldConfiguration))
}

// WhereCron applies the entql string predicate on the cron field.
func (f *ScheduledJobHistoryFilter) WhereCron(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldCron))
}

// WhereJobRunnerID applies the entql string predicate on the job_runner_id field.
func (f *ScheduledJobHistoryFilter) WhereJobRunnerID(p entql.StringP) {
	f.Where(p.Field(scheduledjobhistory.FieldJobRunnerID))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScheduledJobRunQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScheduledJobRunQuery builder.
func (_q *ScheduledJobRunQuery) Filter() *ScheduledJobRunFilter {
	return &ScheduledJobRunFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScheduledJobRunMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScheduledJobRunMutation builder.
func (m *ScheduledJobRunMutation) Filter() *ScheduledJobRunFilter {
	return &ScheduledJobRunFilter{config: m.config, predicateAdder: m}
}

// ScheduledJobRunFilter provides a generic filtering capability at runtime for ScheduledJobRunQuery.
type ScheduledJobRunFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScheduledJobRunFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[83].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ScheduledJobRunFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ScheduledJobRunFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjobrun.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ScheduledJobRunFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjobrun.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ScheduledJobRunFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ScheduledJobRunFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ScheduledJobRunFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledjobrun.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ScheduledJobRunFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ScheduledJobRunFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldOwnerID))
}

// WhereJobRunnerID applies the entql string predicate on the job_runner_id field.
func (f *ScheduledJobRunFilter) WhereJobRunnerID(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldJobRunnerID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ScheduledJobRunFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldStatus))
}

// WhereScheduledJobID applies the entql string predicate on the scheduled_job_id field.
func (f *ScheduledJobRunFilter) WhereScheduledJobID(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldScheduledJobID))
}

// WhereExpectedExecutionTime applies the entql time.Time predicate on the expected_execution_time field.
func (f *ScheduledJobRunFilter) WhereExpectedExecutionTime(p entql.TimeP) {
	f.Where(p.Field(scheduledjobrun.FieldExpectedExecutionTime))
}

// WhereScript applies the entql string predicate on the script field.
func (f *ScheduledJobRunFilter) WhereScript(p entql.StringP) {
	f.Where(p.Field(scheduledjobrun.FieldScript))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ScheduledJobRunFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ScheduledJobRunFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJob applies a predicate to check if query has an edge scheduled_job.
func (f *ScheduledJobRunFilter) WhereHasScheduledJob() {
	f.Where(entql.HasEdge("scheduled_job"))
}

// WhereHasScheduledJobWith applies a predicate to check if query has an edge scheduled_job with a given conditions (other predicates).
func (f *ScheduledJobRunFilter) WhereHasScheduledJobWith(preds ...predicate.ScheduledJob) {
	f.Where(entql.HasEdgeWith("scheduled_job", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobRunner applies a predicate to check if query has an edge job_runner.
func (f *ScheduledJobRunFilter) WhereHasJobRunner() {
	f.Where(entql.HasEdge("job_runner"))
}

// WhereHasJobRunnerWith applies a predicate to check if query has an edge job_runner with a given conditions (other predicates).
func (f *ScheduledJobRunFilter) WhereHasJobRunnerWith(preds ...predicate.JobRunner) {
	f.Where(entql.HasEdgeWith("job_runner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *StandardQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StandardQuery builder.
func (_q *StandardQuery) Filter() *StandardFilter {
	return &StandardFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *StandardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StandardMutation builder.
func (m *StandardMutation) Filter() *StandardFilter {
	return &StandardFilter{config: m.config, predicateAdder: m}
}

// StandardFilter provides a generic filtering capability at runtime for StandardQuery.
type StandardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StandardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[84].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *StandardFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(standard.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StandardFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(standard.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StandardFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(standard.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *StandardFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(standard.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *StandardFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(standard.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *StandardFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(standard.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *StandardFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(standard.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *StandardFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(standard.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *StandardFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(standard.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *StandardFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(standard.FieldOwnerID))
}

// WhereSystemOwned applies the entql bool predicate on the system_owned field.
func (f *StandardFilter) WhereSystemOwned(p entql.BoolP) {
	f.Where(p.Field(standard.FieldSystemOwned))
}

// WhereName applies the entql string predicate on the name field.
func (f *StandardFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(standard.FieldName))
}

// WhereShortName applies the entql string predicate on the short_name field.
func (f *StandardFilter) WhereShortName(p entql.StringP) {
	f.Where(p.Field(standard.FieldShortName))
}

// WhereFramework applies the entql string predicate on the framework field.
func (f *StandardFilter) WhereFramework(p entql.StringP) {
	f.Where(p.Field(standard.FieldFramework))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *StandardFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(standard.FieldDescription))
}

// WhereGoverningBodyLogoURL applies the entql string predicate on the governing_body_logo_url field.
func (f *StandardFilter) WhereGoverningBodyLogoURL(p entql.StringP) {
	f.Where(p.Field(standard.FieldGoverningBodyLogoURL))
}

// WhereGoverningBody applies the entql string predicate on the governing_body field.
func (f *StandardFilter) WhereGoverningBody(p entql.StringP) {
	f.Where(p.Field(standard.FieldGoverningBody))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *StandardFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(standard.FieldDomains))
}

// WhereLink applies the entql string predicate on the link field.
func (f *StandardFilter) WhereLink(p entql.StringP) {
	f.Where(p.Field(standard.FieldLink))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *StandardFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(standard.FieldStatus))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *StandardFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(standard.FieldIsPublic))
}

// WhereFreeToUse applies the entql bool predicate on the free_to_use field.
func (f *StandardFilter) WhereFreeToUse(p entql.BoolP) {
	f.Where(p.Field(standard.FieldFreeToUse))
}

// WhereStandardType applies the entql string predicate on the standard_type field.
func (f *StandardFilter) WhereStandardType(p entql.StringP) {
	f.Where(p.Field(standard.FieldStandardType))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *StandardFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(standard.FieldVersion))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *StandardFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *StandardFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *StandardFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *StandardFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *StandardHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StandardHistoryQuery builder.
func (_q *StandardHistoryQuery) Filter() *StandardHistoryFilter {
	return &StandardHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *StandardHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StandardHistoryMutation builder.
func (m *StandardHistoryMutation) Filter() *StandardHistoryFilter {
	return &StandardHistoryFilter{config: m.config, predicateAdder: m}
}

// StandardHistoryFilter provides a generic filtering capability at runtime for StandardHistoryQuery.
type StandardHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StandardHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[85].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *StandardHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *StandardHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(standardhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *StandardHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *StandardHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StandardHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(standardhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StandardHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(standardhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *StandardHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *StandardHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *StandardHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(standardhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *StandardHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *StandardHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(standardhistory.FieldTags))
}

// WhereRevision applies the entql string predicate on the revision field.
func (f *StandardHistoryFilter) WhereRevision(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldRevision))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *StandardHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldOwnerID))
}

// WhereSystemOwned applies the entql bool predicate on the system_owned field.
func (f *StandardHistoryFilter) WhereSystemOwned(p entql.BoolP) {
	f.Where(p.Field(standardhistory.FieldSystemOwned))
}

// WhereName applies the entql string predicate on the name field.
func (f *StandardHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldName))
}

// WhereShortName applies the entql string predicate on the short_name field.
func (f *StandardHistoryFilter) WhereShortName(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldShortName))
}

// WhereFramework applies the entql string predicate on the framework field.
func (f *StandardHistoryFilter) WhereFramework(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldFramework))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *StandardHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldDescription))
}

// WhereGoverningBodyLogoURL applies the entql string predicate on the governing_body_logo_url field.
func (f *StandardHistoryFilter) WhereGoverningBodyLogoURL(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldGoverningBodyLogoURL))
}

// WhereGoverningBody applies the entql string predicate on the governing_body field.
func (f *StandardHistoryFilter) WhereGoverningBody(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldGoverningBody))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *StandardHistoryFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(standardhistory.FieldDomains))
}

// WhereLink applies the entql string predicate on the link field.
func (f *StandardHistoryFilter) WhereLink(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldLink))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *StandardHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldStatus))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *StandardHistoryFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(standardhistory.FieldIsPublic))
}

// WhereFreeToUse applies the entql bool predicate on the free_to_use field.
func (f *StandardHistoryFilter) WhereFreeToUse(p entql.BoolP) {
	f.Where(p.Field(standardhistory.FieldFreeToUse))
}

// WhereStandardType applies the entql string predicate on the standard_type field.
func (f *StandardHistoryFilter) WhereStandardType(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldStandardType))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *StandardHistoryFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(standardhistory.FieldVersion))
}

// addPredicate implements the predicateAdder interface.
func (_q *SubcontrolQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubcontrolQuery builder.
func (_q *SubcontrolQuery) Filter() *SubcontrolFilter {
	return &SubcontrolFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SubcontrolMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubcontrolMutation builder.
func (m *SubcontrolMutation) Filter() *SubcontrolFilter {
	return &SubcontrolFilter{config: m.config, predicateAdder: m}
}

// SubcontrolFilter provides a generic filtering capability at runtime for SubcontrolQuery.
type SubcontrolFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubcontrolFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[86].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SubcontrolFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubcontrolFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subcontrol.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubcontrolFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subcontrol.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *SubcontrolFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *SubcontrolFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubcontrolFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subcontrol.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *SubcontrolFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *SubcontrolFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *SubcontrolFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldTags))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SubcontrolFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldDescription))
}

// WhereReferenceID applies the entql string predicate on the reference_id field.
func (f *SubcontrolFilter) WhereReferenceID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldReferenceID))
}

// WhereAuditorReferenceID applies the entql string predicate on the auditor_reference_id field.
func (f *SubcontrolFilter) WhereAuditorReferenceID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldAuditorReferenceID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *SubcontrolFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldStatus))
}

// WhereSource applies the entql string predicate on the source field.
func (f *SubcontrolFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldSource))
}

// WhereReferenceFramework applies the entql string predicate on the reference_framework field.
func (f *SubcontrolFilter) WhereReferenceFramework(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldReferenceFramework))
}

// WhereControlType applies the entql string predicate on the control_type field.
func (f *SubcontrolFilter) WhereControlType(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldControlType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *SubcontrolFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldCategory))
}

// WhereCategoryID applies the entql string predicate on the category_id field.
func (f *SubcontrolFilter) WhereCategoryID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldCategoryID))
}

// WhereSubcategory applies the entql string predicate on the subcategory field.
func (f *SubcontrolFilter) WhereSubcategory(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldSubcategory))
}

// WhereMappedCategories applies the entql json.RawMessage predicate on the mapped_categories field.
func (f *SubcontrolFilter) WhereMappedCategories(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldMappedCategories))
}

// WhereAssessmentObjectives applies the entql json.RawMessage predicate on the assessment_objectives field.
func (f *SubcontrolFilter) WhereAssessmentObjectives(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldAssessmentObjectives))
}

// WhereAssessmentMethods applies the entql json.RawMessage predicate on the assessment_methods field.
func (f *SubcontrolFilter) WhereAssessmentMethods(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldAssessmentMethods))
}

// WhereControlQuestions applies the entql json.RawMessage predicate on the control_questions field.
func (f *SubcontrolFilter) WhereControlQuestions(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldControlQuestions))
}

// WhereImplementationGuidance applies the entql json.RawMessage predicate on the implementation_guidance field.
func (f *SubcontrolFilter) WhereImplementationGuidance(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldImplementationGuidance))
}

// WhereExampleEvidence applies the entql json.RawMessage predicate on the example_evidence field.
func (f *SubcontrolFilter) WhereExampleEvidence(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldExampleEvidence))
}

// WhereReferences applies the entql json.RawMessage predicate on the references field.
func (f *SubcontrolFilter) WhereReferences(p entql.BytesP) {
	f.Where(p.Field(subcontrol.FieldReferences))
}

// WhereControlOwnerID applies the entql string predicate on the control_owner_id field.
func (f *SubcontrolFilter) WhereControlOwnerID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldControlOwnerID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *SubcontrolFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldDelegateID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *SubcontrolFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldOwnerID))
}

// WhereRefCode applies the entql string predicate on the ref_code field.
func (f *SubcontrolFilter) WhereRefCode(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldRefCode))
}

// WhereControlID applies the entql string predicate on the control_id field.
func (f *SubcontrolFilter) WhereControlID(p entql.StringP) {
	f.Where(p.Field(subcontrol.FieldControlID))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *SubcontrolFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasEvidenceWith(preds ...predicate.Evidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectives applies a predicate to check if query has an edge control_objectives.
func (f *SubcontrolFilter) WhereHasControlObjectives() {
	f.Where(entql.HasEdge("control_objectives"))
}

// WhereHasControlObjectivesWith applies a predicate to check if query has an edge control_objectives with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasControlObjectivesWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objectives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *SubcontrolFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNarratives applies a predicate to check if query has an edge narratives.
func (f *SubcontrolFilter) WhereHasNarratives() {
	f.Where(entql.HasEdge("narratives"))
}

// WhereHasNarrativesWith applies a predicate to check if query has an edge narratives with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasNarrativesWith(preds ...predicate.Narrative) {
	f.Where(entql.HasEdgeWith("narratives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *SubcontrolFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActionPlans applies a predicate to check if query has an edge action_plans.
func (f *SubcontrolFilter) WhereHasActionPlans() {
	f.Where(entql.HasEdge("action_plans"))
}

// WhereHasActionPlansWith applies a predicate to check if query has an edge action_plans with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasActionPlansWith(preds ...predicate.ActionPlan) {
	f.Where(entql.HasEdgeWith("action_plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *SubcontrolFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *SubcontrolFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlOwner applies a predicate to check if query has an edge control_owner.
func (f *SubcontrolFilter) WhereHasControlOwner() {
	f.Where(entql.HasEdge("control_owner"))
}

// WhereHasControlOwnerWith applies a predicate to check if query has an edge control_owner with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasControlOwnerWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("control_owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDelegate applies a predicate to check if query has an edge delegate.
func (f *SubcontrolFilter) WhereHasDelegate() {
	f.Where(entql.HasEdge("delegate"))
}

// WhereHasDelegateWith applies a predicate to check if query has an edge delegate with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasDelegateWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("delegate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *SubcontrolFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControl applies a predicate to check if query has an edge control.
func (f *SubcontrolFilter) WhereHasControl() {
	f.Where(entql.HasEdge("control"))
}

// WhereHasControlWith applies a predicate to check if query has an edge control with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasControlWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementations applies a predicate to check if query has an edge control_implementations.
func (f *SubcontrolFilter) WhereHasControlImplementations() {
	f.Where(entql.HasEdge("control_implementations"))
}

// WhereHasControlImplementationsWith applies a predicate to check if query has an edge control_implementations with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasControlImplementationsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledJobs applies a predicate to check if query has an edge scheduled_jobs.
func (f *SubcontrolFilter) WhereHasScheduledJobs() {
	f.Where(entql.HasEdge("scheduled_jobs"))
}

// WhereHasScheduledJobsWith applies a predicate to check if query has an edge scheduled_jobs with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasScheduledJobsWith(preds ...predicate.ScheduledJob) {
	f.Where(entql.HasEdgeWith("scheduled_jobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedToSubcontrols applies a predicate to check if query has an edge mapped_to_subcontrols.
func (f *SubcontrolFilter) WhereHasMappedToSubcontrols() {
	f.Where(entql.HasEdge("mapped_to_subcontrols"))
}

// WhereHasMappedToSubcontrolsWith applies a predicate to check if query has an edge mapped_to_subcontrols with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasMappedToSubcontrolsWith(preds ...predicate.MappedControl) {
	f.Where(entql.HasEdgeWith("mapped_to_subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMappedFromSubcontrols applies a predicate to check if query has an edge mapped_from_subcontrols.
func (f *SubcontrolFilter) WhereHasMappedFromSubcontrols() {
	f.Where(entql.HasEdge("mapped_from_subcontrols"))
}

// WhereHasMappedFromSubcontrolsWith applies a predicate to check if query has an edge mapped_from_subcontrols with a given conditions (other predicates).
func (f *SubcontrolFilter) WhereHasMappedFromSubcontrolsWith(preds ...predicate.MappedControl) {
	f.Where(entql.HasEdgeWith("mapped_from_subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SubcontrolHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubcontrolHistoryQuery builder.
func (_q *SubcontrolHistoryQuery) Filter() *SubcontrolHistoryFilter {
	return &SubcontrolHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SubcontrolHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubcontrolHistoryMutation builder.
func (m *SubcontrolHistoryMutation) Filter() *SubcontrolHistoryFilter {
	return &SubcontrolHistoryFilter{config: m.config, predicateAdder: m}
}

// SubcontrolHistoryFilter provides a generic filtering capability at runtime for SubcontrolHistoryQuery.
type SubcontrolHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubcontrolHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[87].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SubcontrolHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *SubcontrolHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(subcontrolhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *SubcontrolHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *SubcontrolHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubcontrolHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subcontrolhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubcontrolHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subcontrolhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *SubcontrolHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *SubcontrolHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubcontrolHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subcontrolhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *SubcontrolHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *SubcontrolHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *SubcontrolHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldTags))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SubcontrolHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldDescription))
}

// WhereReferenceID applies the entql string predicate on the reference_id field.
func (f *SubcontrolHistoryFilter) WhereReferenceID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldReferenceID))
}

// WhereAuditorReferenceID applies the entql string predicate on the auditor_reference_id field.
func (f *SubcontrolHistoryFilter) WhereAuditorReferenceID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldAuditorReferenceID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *SubcontrolHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldStatus))
}

// WhereSource applies the entql string predicate on the source field.
func (f *SubcontrolHistoryFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldSource))
}

// WhereReferenceFramework applies the entql string predicate on the reference_framework field.
func (f *SubcontrolHistoryFilter) WhereReferenceFramework(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldReferenceFramework))
}

// WhereControlType applies the entql string predicate on the control_type field.
func (f *SubcontrolHistoryFilter) WhereControlType(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldControlType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *SubcontrolHistoryFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldCategory))
}

// WhereCategoryID applies the entql string predicate on the category_id field.
func (f *SubcontrolHistoryFilter) WhereCategoryID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldCategoryID))
}

// WhereSubcategory applies the entql string predicate on the subcategory field.
func (f *SubcontrolHistoryFilter) WhereSubcategory(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldSubcategory))
}

// WhereMappedCategories applies the entql json.RawMessage predicate on the mapped_categories field.
func (f *SubcontrolHistoryFilter) WhereMappedCategories(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldMappedCategories))
}

// WhereAssessmentObjectives applies the entql json.RawMessage predicate on the assessment_objectives field.
func (f *SubcontrolHistoryFilter) WhereAssessmentObjectives(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldAssessmentObjectives))
}

// WhereAssessmentMethods applies the entql json.RawMessage predicate on the assessment_methods field.
func (f *SubcontrolHistoryFilter) WhereAssessmentMethods(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldAssessmentMethods))
}

// WhereControlQuestions applies the entql json.RawMessage predicate on the control_questions field.
func (f *SubcontrolHistoryFilter) WhereControlQuestions(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldControlQuestions))
}

// WhereImplementationGuidance applies the entql json.RawMessage predicate on the implementation_guidance field.
func (f *SubcontrolHistoryFilter) WhereImplementationGuidance(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldImplementationGuidance))
}

// WhereExampleEvidence applies the entql json.RawMessage predicate on the example_evidence field.
func (f *SubcontrolHistoryFilter) WhereExampleEvidence(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldExampleEvidence))
}

// WhereReferences applies the entql json.RawMessage predicate on the references field.
func (f *SubcontrolHistoryFilter) WhereReferences(p entql.BytesP) {
	f.Where(p.Field(subcontrolhistory.FieldReferences))
}

// WhereControlOwnerID applies the entql string predicate on the control_owner_id field.
func (f *SubcontrolHistoryFilter) WhereControlOwnerID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldControlOwnerID))
}

// WhereDelegateID applies the entql string predicate on the delegate_id field.
func (f *SubcontrolHistoryFilter) WhereDelegateID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldDelegateID))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *SubcontrolHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldOwnerID))
}

// WhereRefCode applies the entql string predicate on the ref_code field.
func (f *SubcontrolHistoryFilter) WhereRefCode(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldRefCode))
}

// WhereControlID applies the entql string predicate on the control_id field.
func (f *SubcontrolHistoryFilter) WhereControlID(p entql.StringP) {
	f.Where(p.Field(subcontrolhistory.FieldControlID))
}

// addPredicate implements the predicateAdder interface.
func (_q *SubprocessorQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubprocessorQuery builder.
func (_q *SubprocessorQuery) Filter() *SubprocessorFilter {
	return &SubprocessorFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SubprocessorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubprocessorMutation builder.
func (m *SubprocessorMutation) Filter() *SubprocessorFilter {
	return &SubprocessorFilter{config: m.config, predicateAdder: m}
}

// SubprocessorFilter provides a generic filtering capability at runtime for SubprocessorQuery.
type SubprocessorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubprocessorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[88].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SubprocessorFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubprocessorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subprocessor.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubprocessorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subprocessor.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *SubprocessorFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *SubprocessorFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubprocessorFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subprocessor.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *SubprocessorFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *SubprocessorFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(subprocessor.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *SubprocessorFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldOwnerID))
}

// WhereSystemOwned applies the entql bool predicate on the system_owned field.
func (f *SubprocessorFilter) WhereSystemOwned(p entql.BoolP) {
	f.Where(p.Field(subprocessor.FieldSystemOwned))
}

// WhereName applies the entql string predicate on the name field.
func (f *SubprocessorFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SubprocessorFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldDescription))
}

// WhereLogoRemoteURL applies the entql string predicate on the logo_remote_url field.
func (f *SubprocessorFilter) WhereLogoRemoteURL(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldLogoRemoteURL))
}

// WhereLogoLocalFileID applies the entql string predicate on the logo_local_file_id field.
func (f *SubprocessorFilter) WhereLogoLocalFileID(p entql.StringP) {
	f.Where(p.Field(subprocessor.FieldLogoLocalFileID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *SubprocessorFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *SubprocessorFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *SubprocessorFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *SubprocessorFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLogoFile applies a predicate to check if query has an edge logo_file.
func (f *SubprocessorFilter) WhereHasLogoFile() {
	f.Where(entql.HasEdge("logo_file"))
}

// WhereHasLogoFileWith applies a predicate to check if query has an edge logo_file with a given conditions (other predicates).
func (f *SubprocessorFilter) WhereHasLogoFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("logo_file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTrustCenterSubprocessors applies a predicate to check if query has an edge trust_center_subprocessors.
func (f *SubprocessorFilter) WhereHasTrustCenterSubprocessors() {
	f.Where(entql.HasEdge("trust_center_subprocessors"))
}

// WhereHasTrustCenterSubprocessorsWith applies a predicate to check if query has an edge trust_center_subprocessors with a given conditions (other predicates).
func (f *SubprocessorFilter) WhereHasTrustCenterSubprocessorsWith(preds ...predicate.TrustCenterSubprocessor) {
	f.Where(entql.HasEdgeWith("trust_center_subprocessors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SubprocessorHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubprocessorHistoryQuery builder.
func (_q *SubprocessorHistoryQuery) Filter() *SubprocessorHistoryFilter {
	return &SubprocessorHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SubprocessorHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubprocessorHistoryMutation builder.
func (m *SubprocessorHistoryMutation) Filter() *SubprocessorHistoryFilter {
	return &SubprocessorHistoryFilter{config: m.config, predicateAdder: m}
}

// SubprocessorHistoryFilter provides a generic filtering capability at runtime for SubprocessorHistoryQuery.
type SubprocessorHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubprocessorHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[89].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SubprocessorHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *SubprocessorHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(subprocessorhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *SubprocessorHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *SubprocessorHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubprocessorHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subprocessorhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubprocessorHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subprocessorhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *SubprocessorHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *SubprocessorHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubprocessorHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subprocessorhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *SubprocessorHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *SubprocessorHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(subprocessorhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *SubprocessorHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldOwnerID))
}

// WhereSystemOwned applies the entql bool predicate on the system_owned field.
func (f *SubprocessorHistoryFilter) WhereSystemOwned(p entql.BoolP) {
	f.Where(p.Field(subprocessorhistory.FieldSystemOwned))
}

// WhereName applies the entql string predicate on the name field.
func (f *SubprocessorHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SubprocessorHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldDescription))
}

// WhereLogoRemoteURL applies the entql string predicate on the logo_remote_url field.
func (f *SubprocessorHistoryFilter) WhereLogoRemoteURL(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldLogoRemoteURL))
}

// WhereLogoLocalFileID applies the entql string predicate on the logo_local_file_id field.
func (f *SubprocessorHistoryFilter) WhereLogoLocalFileID(p entql.StringP) {
	f.Where(p.Field(subprocessorhistory.FieldLogoLocalFileID))
}

// addPredicate implements the predicateAdder interface.
func (_q *SubscriberQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscriberQuery builder.
func (_q *SubscriberQuery) Filter() *SubscriberFilter {
	return &SubscriberFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscriberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscriberMutation builder.
func (m *SubscriberMutation) Filter() *SubscriberFilter {
	return &SubscriberFilter{config: m.config, predicateAdder: m}
}

// SubscriberFilter provides a generic filtering capability at runtime for SubscriberQuery.
type SubscriberFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscriberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[90].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SubscriberFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscriberFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscriberFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *SubscriberFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *SubscriberFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscriberFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *SubscriberFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *SubscriberFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(subscriber.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *SubscriberFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldOwnerID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *SubscriberFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *SubscriberFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldPhoneNumber))
}

// WhereVerifiedEmail applies the entql bool predicate on the verified_email field.
func (f *SubscriberFilter) WhereVerifiedEmail(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldVerifiedEmail))
}

// WhereVerifiedPhone applies the entql bool predicate on the verified_phone field.
func (f *SubscriberFilter) WhereVerifiedPhone(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldVerifiedPhone))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *SubscriberFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldActive))
}

// WhereToken applies the entql string predicate on the token field.
func (f *SubscriberFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *SubscriberFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldTTL))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *SubscriberFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(subscriber.FieldSecret))
}

// WhereUnsubscribed applies the entql bool predicate on the unsubscribed field.
func (f *SubscriberFilter) WhereUnsubscribed(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldUnsubscribed))
}

// WhereSendAttempts applies the entql int predicate on the send_attempts field.
func (f *SubscriberFilter) WhereSendAttempts(p entql.IntP) {
	f.Where(p.Field(subscriber.FieldSendAttempts))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *SubscriberFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *SubscriberFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *SubscriberFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *SubscriberFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TFASettingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TFASettingQuery builder.
func (_q *TFASettingQuery) Filter() *TFASettingFilter {
	return &TFASettingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TFASettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TFASettingMutation builder.
func (m *TFASettingMutation) Filter() *TFASettingFilter {
	return &TFASettingFilter{config: m.config, predicateAdder: m}
}

// TFASettingFilter provides a generic filtering capability at runtime for TFASettingQuery.
type TFASettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TFASettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[91].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TFASettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TFASettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tfasetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TFASettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tfasetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TFASettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TFASettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TFASettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(tfasetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TFASettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TFASettingFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldOwnerID))
}

// WhereTfaSecret applies the entql string predicate on the tfa_secret field.
func (f *TFASettingFilter) WhereTfaSecret(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldTfaSecret))
}

// WhereVerified applies the entql bool predicate on the verified field.
func (f *TFASettingFilter) WhereVerified(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldVerified))
}

// WhereRecoveryCodes applies the entql json.RawMessage predicate on the recovery_codes field.
func (f *TFASettingFilter) WhereRecoveryCodes(p entql.BytesP) {
	f.Where(p.Field(tfasetting.FieldRecoveryCodes))
}

// WherePhoneOtpAllowed applies the entql bool predicate on the phone_otp_allowed field.
func (f *TFASettingFilter) WherePhoneOtpAllowed(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldPhoneOtpAllowed))
}

// WhereEmailOtpAllowed applies the entql bool predicate on the email_otp_allowed field.
func (f *TFASettingFilter) WhereEmailOtpAllowed(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldEmailOtpAllowed))
}

// WhereTotpAllowed applies the entql bool predicate on the totp_allowed field.
func (f *TFASettingFilter) WhereTotpAllowed(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldTotpAllowed))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TFASettingFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TFASettingFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TaskQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskQuery builder.
func (_q *TaskQuery) Filter() *TaskFilter {
	return &TaskFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskMutation builder.
func (m *TaskMutation) Filter() *TaskFilter {
	return &TaskFilter{config: m.config, predicateAdder: m}
}

// TaskFilter provides a generic filtering capability at runtime for TaskQuery.
type TaskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[92].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TaskFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(task.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TaskFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TaskFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TaskFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(task.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TaskFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(task.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TaskFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TaskFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(task.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *TaskFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(task.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TaskFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(task.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TaskFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(task.FieldOwnerID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TaskFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(task.FieldTitle))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *TaskFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(task.FieldDetails))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TaskFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(task.FieldStatus))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *TaskFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(task.FieldCategory))
}

// WhereDue applies the entql time.Time predicate on the due field.
func (f *TaskFilter) WhereDue(p entql.TimeP) {
	f.Where(p.Field(task.FieldDue))
}

// WhereCompleted applies the entql time.Time predicate on the completed field.
func (f *TaskFilter) WhereCompleted(p entql.TimeP) {
	f.Where(p.Field(task.FieldCompleted))
}

// WhereAssigneeID applies the entql string predicate on the assignee_id field.
func (f *TaskFilter) WhereAssigneeID(p entql.StringP) {
	f.Where(p.Field(task.FieldAssigneeID))
}

// WhereAssignerID applies the entql string predicate on the assigner_id field.
func (f *TaskFilter) WhereAssignerID(p entql.StringP) {
	f.Where(p.Field(task.FieldAssignerID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TaskFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TaskFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssigner applies a predicate to check if query has an edge assigner.
func (f *TaskFilter) WhereHasAssigner() {
	f.Where(entql.HasEdge("assigner"))
}

// WhereHasAssignerWith applies a predicate to check if query has an edge assigner with a given conditions (other predicates).
func (f *TaskFilter) WhereHasAssignerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("assigner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignee applies a predicate to check if query has an edge assignee.
func (f *TaskFilter) WhereHasAssignee() {
	f.Where(entql.HasEdge("assignee"))
}

// WhereHasAssigneeWith applies a predicate to check if query has an edge assignee with a given conditions (other predicates).
func (f *TaskFilter) WhereHasAssigneeWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("assignee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComments applies a predicate to check if query has an edge comments.
func (f *TaskFilter) WhereHasComments() {
	f.Where(entql.HasEdge("comments"))
}

// WhereHasCommentsWith applies a predicate to check if query has an edge comments with a given conditions (other predicates).
func (f *TaskFilter) WhereHasCommentsWith(preds ...predicate.Note) {
	f.Where(entql.HasEdgeWith("comments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *TaskFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *TaskFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInternalPolicies applies a predicate to check if query has an edge internal_policies.
func (f *TaskFilter) WhereHasInternalPolicies() {
	f.Where(entql.HasEdge("internal_policies"))
}

// WhereHasInternalPoliciesWith applies a predicate to check if query has an edge internal_policies with a given conditions (other predicates).
func (f *TaskFilter) WhereHasInternalPoliciesWith(preds ...predicate.InternalPolicy) {
	f.Where(entql.HasEdgeWith("internal_policies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProcedures applies a predicate to check if query has an edge procedures.
func (f *TaskFilter) WhereHasProcedures() {
	f.Where(entql.HasEdge("procedures"))
}

// WhereHasProceduresWith applies a predicate to check if query has an edge procedures with a given conditions (other predicates).
func (f *TaskFilter) WhereHasProceduresWith(preds ...predicate.Procedure) {
	f.Where(entql.HasEdgeWith("procedures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *TaskFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *TaskFilter) WhereHasControlsWith(preds ...predicate.Control) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *TaskFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *TaskFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlObjectives applies a predicate to check if query has an edge control_objectives.
func (f *TaskFilter) WhereHasControlObjectives() {
	f.Where(entql.HasEdge("control_objectives"))
}

// WhereHasControlObjectivesWith applies a predicate to check if query has an edge control_objectives with a given conditions (other predicates).
func (f *TaskFilter) WhereHasControlObjectivesWith(preds ...predicate.ControlObjective) {
	f.Where(entql.HasEdgeWith("control_objectives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *TaskFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *TaskFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRisks applies a predicate to check if query has an edge risks.
func (f *TaskFilter) WhereHasRisks() {
	f.Where(entql.HasEdge("risks"))
}

// WhereHasRisksWith applies a predicate to check if query has an edge risks with a given conditions (other predicates).
func (f *TaskFilter) WhereHasRisksWith(preds ...predicate.Risk) {
	f.Where(entql.HasEdgeWith("risks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlImplementations applies a predicate to check if query has an edge control_implementations.
func (f *TaskFilter) WhereHasControlImplementations() {
	f.Where(entql.HasEdge("control_implementations"))
}

// WhereHasControlImplementationsWith applies a predicate to check if query has an edge control_implementations with a given conditions (other predicates).
func (f *TaskFilter) WhereHasControlImplementationsWith(preds ...predicate.ControlImplementation) {
	f.Where(entql.HasEdgeWith("control_implementations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *TaskFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *TaskFilter) WhereHasEvidenceWith(preds ...predicate.Evidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TaskHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskHistoryQuery builder.
func (_q *TaskHistoryQuery) Filter() *TaskHistoryFilter {
	return &TaskHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskHistoryMutation builder.
func (m *TaskHistoryMutation) Filter() *TaskHistoryFilter {
	return &TaskHistoryFilter{config: m.config, predicateAdder: m}
}

// TaskHistoryFilter provides a generic filtering capability at runtime for TaskHistoryQuery.
type TaskHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[93].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TaskHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TaskHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(taskhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *TaskHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TaskHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TaskHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(taskhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TaskHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(taskhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TaskHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TaskHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TaskHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(taskhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TaskHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *TaskHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TaskHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(taskhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TaskHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldOwnerID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TaskHistoryFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldTitle))
}

// WhereDetails applies the entql string predicate on the details field.
func (f *TaskHistoryFilter) WhereDetails(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldDetails))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TaskHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldStatus))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *TaskHistoryFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldCategory))
}

// WhereDue applies the entql time.Time predicate on the due field.
func (f *TaskHistoryFilter) WhereDue(p entql.TimeP) {
	f.Where(p.Field(taskhistory.FieldDue))
}

// WhereCompleted applies the entql time.Time predicate on the completed field.
func (f *TaskHistoryFilter) WhereCompleted(p entql.TimeP) {
	f.Where(p.Field(taskhistory.FieldCompleted))
}

// WhereAssigneeID applies the entql string predicate on the assignee_id field.
func (f *TaskHistoryFilter) WhereAssigneeID(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldAssigneeID))
}

// WhereAssignerID applies the entql string predicate on the assigner_id field.
func (f *TaskHistoryFilter) WhereAssignerID(p entql.StringP) {
	f.Where(p.Field(taskhistory.FieldAssignerID))
}

// addPredicate implements the predicateAdder interface.
func (_q *TemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TemplateQuery builder.
func (_q *TemplateQuery) Filter() *TemplateFilter {
	return &TemplateFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TemplateMutation builder.
func (m *TemplateMutation) Filter() *TemplateFilter {
	return &TemplateFilter{config: m.config, predicateAdder: m}
}

// TemplateFilter provides a generic filtering capability at runtime for TemplateQuery.
type TemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[94].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TemplateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(template.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(template.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(template.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TemplateFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(template.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TemplateFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(template.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TemplateFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(template.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TemplateFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(template.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TemplateFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(template.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TemplateFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(template.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TemplateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(template.FieldName))
}

// WhereTemplateType applies the entql string predicate on the template_type field.
func (f *TemplateFilter) WhereTemplateType(p entql.StringP) {
	f.Where(p.Field(template.FieldTemplateType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *TemplateFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(template.FieldDescription))
}

// WhereJsonconfig applies the entql json.RawMessage predicate on the jsonconfig field.
func (f *TemplateFilter) WhereJsonconfig(p entql.BytesP) {
	f.Where(p.Field(template.FieldJsonconfig))
}

// WhereUischema applies the entql json.RawMessage predicate on the uischema field.
func (f *TemplateFilter) WhereUischema(p entql.BytesP) {
	f.Where(p.Field(template.FieldUischema))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TemplateFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TemplateFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocuments applies a predicate to check if query has an edge documents.
func (f *TemplateFilter) WhereHasDocuments() {
	f.Where(entql.HasEdge("documents"))
}

// WhereHasDocumentsWith applies a predicate to check if query has an edge documents with a given conditions (other predicates).
func (f *TemplateFilter) WhereHasDocumentsWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("documents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *TemplateFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *TemplateFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TemplateHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TemplateHistoryQuery builder.
func (_q *TemplateHistoryQuery) Filter() *TemplateHistoryFilter {
	return &TemplateHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TemplateHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TemplateHistoryMutation builder.
func (m *TemplateHistoryMutation) Filter() *TemplateHistoryFilter {
	return &TemplateHistoryFilter{config: m.config, predicateAdder: m}
}

// TemplateHistoryFilter provides a generic filtering capability at runtime for TemplateHistoryQuery.
type TemplateHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TemplateHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[95].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TemplateHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TemplateHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *TemplateHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TemplateHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TemplateHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TemplateHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TemplateHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TemplateHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TemplateHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TemplateHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TemplateHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(templatehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TemplateHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TemplateHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldName))
}

// WhereTemplateType applies the entql string predicate on the template_type field.
func (f *TemplateHistoryFilter) WhereTemplateType(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldTemplateType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *TemplateHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldDescription))
}

// WhereJsonconfig applies the entql json.RawMessage predicate on the jsonconfig field.
func (f *TemplateHistoryFilter) WhereJsonconfig(p entql.BytesP) {
	f.Where(p.Field(templatehistory.FieldJsonconfig))
}

// WhereUischema applies the entql json.RawMessage predicate on the uischema field.
func (f *TemplateHistoryFilter) WhereUischema(p entql.BytesP) {
	f.Where(p.Field(templatehistory.FieldUischema))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterQuery builder.
func (_q *TrustCenterQuery) Filter() *TrustCenterFilter {
	return &TrustCenterFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterMutation builder.
func (m *TrustCenterMutation) Filter() *TrustCenterFilter {
	return &TrustCenterFilter{config: m.config, predicateAdder: m}
}

// TrustCenterFilter provides a generic filtering capability at runtime for TrustCenterQuery.
type TrustCenterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[96].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcenter.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcenter.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcenter.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcenter.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcenter.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcenter.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcenter.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TrustCenterFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(trustcenter.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TrustCenterFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(trustcenter.FieldOwnerID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *TrustCenterFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(trustcenter.FieldSlug))
}

// WhereCustomDomainID applies the entql string predicate on the custom_domain_id field.
func (f *TrustCenterFilter) WhereCustomDomainID(p entql.StringP) {
	f.Where(p.Field(trustcenter.FieldCustomDomainID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TrustCenterFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TrustCenterFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomDomain applies a predicate to check if query has an edge custom_domain.
func (f *TrustCenterFilter) WhereHasCustomDomain() {
	f.Where(entql.HasEdge("custom_domain"))
}

// WhereHasCustomDomainWith applies a predicate to check if query has an edge custom_domain with a given conditions (other predicates).
func (f *TrustCenterFilter) WhereHasCustomDomainWith(preds ...predicate.CustomDomain) {
	f.Where(entql.HasEdgeWith("custom_domain", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *TrustCenterFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *TrustCenterFilter) WhereHasSettingWith(preds ...predicate.TrustCenterSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTrustCenterSubprocessors applies a predicate to check if query has an edge trust_center_subprocessors.
func (f *TrustCenterFilter) WhereHasTrustCenterSubprocessors() {
	f.Where(entql.HasEdge("trust_center_subprocessors"))
}

// WhereHasTrustCenterSubprocessorsWith applies a predicate to check if query has an edge trust_center_subprocessors with a given conditions (other predicates).
func (f *TrustCenterFilter) WhereHasTrustCenterSubprocessorsWith(preds ...predicate.TrustCenterSubprocessor) {
	f.Where(entql.HasEdgeWith("trust_center_subprocessors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterComplianceQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterComplianceQuery builder.
func (_q *TrustCenterComplianceQuery) Filter() *TrustCenterComplianceFilter {
	return &TrustCenterComplianceFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterComplianceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterComplianceMutation builder.
func (m *TrustCenterComplianceMutation) Filter() *TrustCenterComplianceFilter {
	return &TrustCenterComplianceFilter{config: m.config, predicateAdder: m}
}

// TrustCenterComplianceFilter provides a generic filtering capability at runtime for TrustCenterComplianceQuery.
type TrustCenterComplianceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterComplianceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[97].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterComplianceFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcentercompliance.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterComplianceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentercompliance.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterComplianceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentercompliance.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterComplianceFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentercompliance.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterComplianceFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentercompliance.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterComplianceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentercompliance.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterComplianceFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcentercompliance.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TrustCenterComplianceFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(trustcentercompliance.FieldTags))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterComplianceHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterComplianceHistoryQuery builder.
func (_q *TrustCenterComplianceHistoryQuery) Filter() *TrustCenterComplianceHistoryFilter {
	return &TrustCenterComplianceHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterComplianceHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterComplianceHistoryMutation builder.
func (m *TrustCenterComplianceHistoryMutation) Filter() *TrustCenterComplianceHistoryFilter {
	return &TrustCenterComplianceHistoryFilter{config: m.config, predicateAdder: m}
}

// TrustCenterComplianceHistoryFilter provides a generic filtering capability at runtime for TrustCenterComplianceHistoryQuery.
type TrustCenterComplianceHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterComplianceHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[98].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterComplianceHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TrustCenterComplianceHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *TrustCenterComplianceHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TrustCenterComplianceHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterComplianceHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterComplianceHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterComplianceHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterComplianceHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterComplianceHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterComplianceHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TrustCenterComplianceHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(trustcentercompliancehistory.FieldTags))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterHistoryQuery builder.
func (_q *TrustCenterHistoryQuery) Filter() *TrustCenterHistoryFilter {
	return &TrustCenterHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterHistoryMutation builder.
func (m *TrustCenterHistoryMutation) Filter() *TrustCenterHistoryFilter {
	return &TrustCenterHistoryFilter{config: m.config, predicateAdder: m}
}

// TrustCenterHistoryFilter provides a generic filtering capability at runtime for TrustCenterHistoryQuery.
type TrustCenterHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[99].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TrustCenterHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(trustcenterhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *TrustCenterHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TrustCenterHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcenterhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcenterhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcenterhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TrustCenterHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(trustcenterhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TrustCenterHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldOwnerID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *TrustCenterHistoryFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldSlug))
}

// WhereCustomDomainID applies the entql string predicate on the custom_domain_id field.
func (f *TrustCenterHistoryFilter) WhereCustomDomainID(p entql.StringP) {
	f.Where(p.Field(trustcenterhistory.FieldCustomDomainID))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterSettingQuery builder.
func (_q *TrustCenterSettingQuery) Filter() *TrustCenterSettingFilter {
	return &TrustCenterSettingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterSettingMutation builder.
func (m *TrustCenterSettingMutation) Filter() *TrustCenterSettingFilter {
	return &TrustCenterSettingFilter{config: m.config, predicateAdder: m}
}

// TrustCenterSettingFilter provides a generic filtering capability at runtime for TrustCenterSettingQuery.
type TrustCenterSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[100].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldDeletedBy))
}

// WhereTrustCenterID applies the entql string predicate on the trust_center_id field.
func (f *TrustCenterSettingFilter) WhereTrustCenterID(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldTrustCenterID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TrustCenterSettingFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldTitle))
}

// WhereOverview applies the entql string predicate on the overview field.
func (f *TrustCenterSettingFilter) WhereOverview(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldOverview))
}

// WhereLogoRemoteURL applies the entql string predicate on the logo_remote_url field.
func (f *TrustCenterSettingFilter) WhereLogoRemoteURL(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldLogoRemoteURL))
}

// WhereLogoLocalFileID applies the entql string predicate on the logo_local_file_id field.
func (f *TrustCenterSettingFilter) WhereLogoLocalFileID(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldLogoLocalFileID))
}

// WhereFaviconRemoteURL applies the entql string predicate on the favicon_remote_url field.
func (f *TrustCenterSettingFilter) WhereFaviconRemoteURL(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldFaviconRemoteURL))
}

// WhereFaviconLocalFileID applies the entql string predicate on the favicon_local_file_id field.
func (f *TrustCenterSettingFilter) WhereFaviconLocalFileID(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldFaviconLocalFileID))
}

// WhereThemeMode applies the entql string predicate on the theme_mode field.
func (f *TrustCenterSettingFilter) WhereThemeMode(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldThemeMode))
}

// WherePrimaryColor applies the entql string predicate on the primary_color field.
func (f *TrustCenterSettingFilter) WherePrimaryColor(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldPrimaryColor))
}

// WhereFont applies the entql string predicate on the font field.
func (f *TrustCenterSettingFilter) WhereFont(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldFont))
}

// WhereForegroundColor applies the entql string predicate on the foreground_color field.
func (f *TrustCenterSettingFilter) WhereForegroundColor(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldForegroundColor))
}

// WhereBackgroundColor applies the entql string predicate on the background_color field.
func (f *TrustCenterSettingFilter) WhereBackgroundColor(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldBackgroundColor))
}

// WhereAccentColor applies the entql string predicate on the accent_color field.
func (f *TrustCenterSettingFilter) WhereAccentColor(p entql.StringP) {
	f.Where(p.Field(trustcentersetting.FieldAccentColor))
}

// WhereHasTrustCenter applies a predicate to check if query has an edge trust_center.
func (f *TrustCenterSettingFilter) WhereHasTrustCenter() {
	f.Where(entql.HasEdge("trust_center"))
}

// WhereHasTrustCenterWith applies a predicate to check if query has an edge trust_center with a given conditions (other predicates).
func (f *TrustCenterSettingFilter) WhereHasTrustCenterWith(preds ...predicate.TrustCenter) {
	f.Where(entql.HasEdgeWith("trust_center", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *TrustCenterSettingFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *TrustCenterSettingFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLogoFile applies a predicate to check if query has an edge logo_file.
func (f *TrustCenterSettingFilter) WhereHasLogoFile() {
	f.Where(entql.HasEdge("logo_file"))
}

// WhereHasLogoFileWith applies a predicate to check if query has an edge logo_file with a given conditions (other predicates).
func (f *TrustCenterSettingFilter) WhereHasLogoFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("logo_file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaviconFile applies a predicate to check if query has an edge favicon_file.
func (f *TrustCenterSettingFilter) WhereHasFaviconFile() {
	f.Where(entql.HasEdge("favicon_file"))
}

// WhereHasFaviconFileWith applies a predicate to check if query has an edge favicon_file with a given conditions (other predicates).
func (f *TrustCenterSettingFilter) WhereHasFaviconFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("favicon_file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterSettingHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterSettingHistoryQuery builder.
func (_q *TrustCenterSettingHistoryQuery) Filter() *TrustCenterSettingHistoryFilter {
	return &TrustCenterSettingHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterSettingHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterSettingHistoryMutation builder.
func (m *TrustCenterSettingHistoryMutation) Filter() *TrustCenterSettingHistoryFilter {
	return &TrustCenterSettingHistoryFilter{config: m.config, predicateAdder: m}
}

// TrustCenterSettingHistoryFilter provides a generic filtering capability at runtime for TrustCenterSettingHistoryQuery.
type TrustCenterSettingHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterSettingHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[101].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterSettingHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TrustCenterSettingHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(trustcentersettinghistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *TrustCenterSettingHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TrustCenterSettingHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterSettingHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersettinghistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterSettingHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersettinghistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterSettingHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterSettingHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterSettingHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersettinghistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterSettingHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldDeletedBy))
}

// WhereTrustCenterID applies the entql string predicate on the trust_center_id field.
func (f *TrustCenterSettingHistoryFilter) WhereTrustCenterID(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldTrustCenterID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TrustCenterSettingHistoryFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldTitle))
}

// WhereOverview applies the entql string predicate on the overview field.
func (f *TrustCenterSettingHistoryFilter) WhereOverview(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldOverview))
}

// WhereLogoRemoteURL applies the entql string predicate on the logo_remote_url field.
func (f *TrustCenterSettingHistoryFilter) WhereLogoRemoteURL(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldLogoRemoteURL))
}

// WhereLogoLocalFileID applies the entql string predicate on the logo_local_file_id field.
func (f *TrustCenterSettingHistoryFilter) WhereLogoLocalFileID(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldLogoLocalFileID))
}

// WhereFaviconRemoteURL applies the entql string predicate on the favicon_remote_url field.
func (f *TrustCenterSettingHistoryFilter) WhereFaviconRemoteURL(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldFaviconRemoteURL))
}

// WhereFaviconLocalFileID applies the entql string predicate on the favicon_local_file_id field.
func (f *TrustCenterSettingHistoryFilter) WhereFaviconLocalFileID(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldFaviconLocalFileID))
}

// WhereThemeMode applies the entql string predicate on the theme_mode field.
func (f *TrustCenterSettingHistoryFilter) WhereThemeMode(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldThemeMode))
}

// WherePrimaryColor applies the entql string predicate on the primary_color field.
func (f *TrustCenterSettingHistoryFilter) WherePrimaryColor(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldPrimaryColor))
}

// WhereFont applies the entql string predicate on the font field.
func (f *TrustCenterSettingHistoryFilter) WhereFont(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldFont))
}

// WhereForegroundColor applies the entql string predicate on the foreground_color field.
func (f *TrustCenterSettingHistoryFilter) WhereForegroundColor(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldForegroundColor))
}

// WhereBackgroundColor applies the entql string predicate on the background_color field.
func (f *TrustCenterSettingHistoryFilter) WhereBackgroundColor(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldBackgroundColor))
}

// WhereAccentColor applies the entql string predicate on the accent_color field.
func (f *TrustCenterSettingHistoryFilter) WhereAccentColor(p entql.StringP) {
	f.Where(p.Field(trustcentersettinghistory.FieldAccentColor))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterSubprocessorQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterSubprocessorQuery builder.
func (_q *TrustCenterSubprocessorQuery) Filter() *TrustCenterSubprocessorFilter {
	return &TrustCenterSubprocessorFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterSubprocessorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterSubprocessorMutation builder.
func (m *TrustCenterSubprocessorMutation) Filter() *TrustCenterSubprocessorFilter {
	return &TrustCenterSubprocessorFilter{config: m.config, predicateAdder: m}
}

// TrustCenterSubprocessorFilter provides a generic filtering capability at runtime for TrustCenterSubprocessorQuery.
type TrustCenterSubprocessorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterSubprocessorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[102].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterSubprocessorFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessor.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterSubprocessorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersubprocessor.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterSubprocessorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersubprocessor.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterSubprocessorFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessor.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterSubprocessorFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessor.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterSubprocessorFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersubprocessor.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterSubprocessorFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessor.FieldDeletedBy))
}

// WhereSubprocessorID applies the entql string predicate on the subprocessor_id field.
func (f *TrustCenterSubprocessorFilter) WhereSubprocessorID(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessor.FieldSubprocessorID))
}

// WhereTrustCenterID applies the entql string predicate on the trust_center_id field.
func (f *TrustCenterSubprocessorFilter) WhereTrustCenterID(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessor.FieldTrustCenterID))
}

// WhereCountries applies the entql json.RawMessage predicate on the countries field.
func (f *TrustCenterSubprocessorFilter) WhereCountries(p entql.BytesP) {
	f.Where(p.Field(trustcentersubprocessor.FieldCountries))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *TrustCenterSubprocessorFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessor.FieldCategory))
}

// WhereHasTrustCenter applies a predicate to check if query has an edge trust_center.
func (f *TrustCenterSubprocessorFilter) WhereHasTrustCenter() {
	f.Where(entql.HasEdge("trust_center"))
}

// WhereHasTrustCenterWith applies a predicate to check if query has an edge trust_center with a given conditions (other predicates).
func (f *TrustCenterSubprocessorFilter) WhereHasTrustCenterWith(preds ...predicate.TrustCenter) {
	f.Where(entql.HasEdgeWith("trust_center", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubprocessor applies a predicate to check if query has an edge subprocessor.
func (f *TrustCenterSubprocessorFilter) WhereHasSubprocessor() {
	f.Where(entql.HasEdge("subprocessor"))
}

// WhereHasSubprocessorWith applies a predicate to check if query has an edge subprocessor with a given conditions (other predicates).
func (f *TrustCenterSubprocessorFilter) WhereHasSubprocessorWith(preds ...predicate.Subprocessor) {
	f.Where(entql.HasEdgeWith("subprocessor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustCenterSubprocessorHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustCenterSubprocessorHistoryQuery builder.
func (_q *TrustCenterSubprocessorHistoryQuery) Filter() *TrustCenterSubprocessorHistoryFilter {
	return &TrustCenterSubprocessorHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustCenterSubprocessorHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustCenterSubprocessorHistoryMutation builder.
func (m *TrustCenterSubprocessorHistoryMutation) Filter() *TrustCenterSubprocessorHistoryFilter {
	return &TrustCenterSubprocessorHistoryFilter{config: m.config, predicateAdder: m}
}

// TrustCenterSubprocessorHistoryFilter provides a generic filtering capability at runtime for TrustCenterSubprocessorHistoryQuery.
type TrustCenterSubprocessorHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustCenterSubprocessorHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[103].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldDeletedBy))
}

// WhereSubprocessorID applies the entql string predicate on the subprocessor_id field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereSubprocessorID(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldSubprocessorID))
}

// WhereTrustCenterID applies the entql string predicate on the trust_center_id field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereTrustCenterID(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldTrustCenterID))
}

// WhereCountries applies the entql json.RawMessage predicate on the countries field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereCountries(p entql.BytesP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldCountries))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *TrustCenterSubprocessorHistoryFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(trustcentersubprocessorhistory.FieldCategory))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[104].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *UserFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(user.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(user.FieldTags))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *UserFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(user.FieldDisplayName))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *UserFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFileID applies the entql string predicate on the avatar_local_file_id field.
func (f *UserFilter) WhereAvatarLocalFileID(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarLocalFileID))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *UserFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldAvatarUpdatedAt))
}

// WhereLastSeen applies the entql time.Time predicate on the last_seen field.
func (f *UserFilter) WhereLastSeen(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastSeen))
}

// WhereLastLoginProvider applies the entql string predicate on the last_login_provider field.
func (f *UserFilter) WhereLastLoginProvider(p entql.StringP) {
	f.Where(p.Field(user.FieldLastLoginProvider))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereSub applies the entql string predicate on the sub field.
func (f *UserFilter) WhereSub(p entql.StringP) {
	f.Where(p.Field(user.FieldSub))
}

// WhereAuthProvider applies the entql string predicate on the auth_provider field.
func (f *UserFilter) WhereAuthProvider(p entql.StringP) {
	f.Where(p.Field(user.FieldAuthProvider))
}

// WhereRole applies the entql string predicate on the role field.
func (f *UserFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(user.FieldRole))
}

// WhereHasPersonalAccessTokens applies a predicate to check if query has an edge personal_access_tokens.
func (f *UserFilter) WhereHasPersonalAccessTokens() {
	f.Where(entql.HasEdge("personal_access_tokens"))
}

// WhereHasPersonalAccessTokensWith applies a predicate to check if query has an edge personal_access_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTfaSettings applies a predicate to check if query has an edge tfa_settings.
func (f *UserFilter) WhereHasTfaSettings() {
	f.Where(entql.HasEdge("tfa_settings"))
}

// WhereHasTfaSettingsWith applies a predicate to check if query has an edge tfa_settings with a given conditions (other predicates).
func (f *UserFilter) WhereHasTfaSettingsWith(preds ...predicate.TFASetting) {
	f.Where(entql.HasEdgeWith("tfa_settings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *UserFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *UserFilter) WhereHasSettingWith(preds ...predicate.UserSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailVerificationTokens applies a predicate to check if query has an edge email_verification_tokens.
func (f *UserFilter) WhereHasEmailVerificationTokens() {
	f.Where(entql.HasEdge("email_verification_tokens"))
}

// WhereHasEmailVerificationTokensWith applies a predicate to check if query has an edge email_verification_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasEmailVerificationTokensWith(preds ...predicate.EmailVerificationToken) {
	f.Where(entql.HasEdgeWith("email_verification_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPasswordResetTokens applies a predicate to check if query has an edge password_reset_tokens.
func (f *UserFilter) WhereHasPasswordResetTokens() {
	f.Where(entql.HasEdge("password_reset_tokens"))
}

// WhereHasPasswordResetTokensWith applies a predicate to check if query has an edge password_reset_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasPasswordResetTokensWith(preds ...predicate.PasswordResetToken) {
	f.Where(entql.HasEdgeWith("password_reset_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *UserFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *UserFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *UserFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWebauthns applies a predicate to check if query has an edge webauthns.
func (f *UserFilter) WhereHasWebauthns() {
	f.Where(entql.HasEdge("webauthns"))
}

// WhereHasWebauthnsWith applies a predicate to check if query has an edge webauthns with a given conditions (other predicates).
func (f *UserFilter) WhereHasWebauthnsWith(preds ...predicate.Webauthn) {
	f.Where(entql.HasEdgeWith("webauthns", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *UserFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *UserFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAvatarFile applies a predicate to check if query has an edge avatar_file.
func (f *UserFilter) WhereHasAvatarFile() {
	f.Where(entql.HasEdge("avatar_file"))
}

// WhereHasAvatarFileWith applies a predicate to check if query has an edge avatar_file with a given conditions (other predicates).
func (f *UserFilter) WhereHasAvatarFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("avatar_file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *UserFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *UserFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActionPlans applies a predicate to check if query has an edge action_plans.
func (f *UserFilter) WhereHasActionPlans() {
	f.Where(entql.HasEdge("action_plans"))
}

// WhereHasActionPlansWith applies a predicate to check if query has an edge action_plans with a given conditions (other predicates).
func (f *UserFilter) WhereHasActionPlansWith(preds ...predicate.ActionPlan) {
	f.Where(entql.HasEdgeWith("action_plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubcontrols applies a predicate to check if query has an edge subcontrols.
func (f *UserFilter) WhereHasSubcontrols() {
	f.Where(entql.HasEdge("subcontrols"))
}

// WhereHasSubcontrolsWith applies a predicate to check if query has an edge subcontrols with a given conditions (other predicates).
func (f *UserFilter) WhereHasSubcontrolsWith(preds ...predicate.Subcontrol) {
	f.Where(entql.HasEdgeWith("subcontrols", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignerTasks applies a predicate to check if query has an edge assigner_tasks.
func (f *UserFilter) WhereHasAssignerTasks() {
	f.Where(entql.HasEdge("assigner_tasks"))
}

// WhereHasAssignerTasksWith applies a predicate to check if query has an edge assigner_tasks with a given conditions (other predicates).
func (f *UserFilter) WhereHasAssignerTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("assigner_tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssigneeTasks applies a predicate to check if query has an edge assignee_tasks.
func (f *UserFilter) WhereHasAssigneeTasks() {
	f.Where(entql.HasEdge("assignee_tasks"))
}

// WhereHasAssigneeTasksWith applies a predicate to check if query has an edge assignee_tasks with a given conditions (other predicates).
func (f *UserFilter) WhereHasAssigneeTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("assignee_tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *UserFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *UserFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupMemberships applies a predicate to check if query has an edge group_memberships.
func (f *UserFilter) WhereHasGroupMemberships() {
	f.Where(entql.HasEdge("group_memberships"))
}

// WhereHasGroupMembershipsWith applies a predicate to check if query has an edge group_memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasGroupMembershipsWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("group_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgMemberships applies a predicate to check if query has an edge org_memberships.
func (f *UserFilter) WhereHasOrgMemberships() {
	f.Where(entql.HasEdge("org_memberships"))
}

// WhereHasOrgMembershipsWith applies a predicate to check if query has an edge org_memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrgMembershipsWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("org_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgramMemberships applies a predicate to check if query has an edge program_memberships.
func (f *UserFilter) WhereHasProgramMemberships() {
	f.Where(entql.HasEdge("program_memberships"))
}

// WhereHasProgramMembershipsWith applies a predicate to check if query has an edge program_memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasProgramMembershipsWith(preds ...predicate.ProgramMembership) {
	f.Where(entql.HasEdgeWith("program_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserHistoryQuery builder.
func (_q *UserHistoryQuery) Filter() *UserHistoryFilter {
	return &UserHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserHistoryMutation builder.
func (m *UserHistoryMutation) Filter() *UserHistoryFilter {
	return &UserHistoryFilter{config: m.config, predicateAdder: m}
}

// UserHistoryFilter provides a generic filtering capability at runtime for UserHistoryQuery.
type UserHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[105].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *UserHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *UserHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *UserHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldDeletedBy))
}

// WhereDisplayID applies the entql string predicate on the display_id field.
func (f *UserHistoryFilter) WhereDisplayID(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldDisplayID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(userhistory.FieldTags))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserHistoryFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldEmail))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserHistoryFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserHistoryFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldLastName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *UserHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldDisplayName))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *UserHistoryFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFileID applies the entql string predicate on the avatar_local_file_id field.
func (f *UserHistoryFilter) WhereAvatarLocalFileID(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldAvatarLocalFileID))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *UserHistoryFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldAvatarUpdatedAt))
}

// WhereLastSeen applies the entql time.Time predicate on the last_seen field.
func (f *UserHistoryFilter) WhereLastSeen(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldLastSeen))
}

// WhereLastLoginProvider applies the entql string predicate on the last_login_provider field.
func (f *UserHistoryFilter) WhereLastLoginProvider(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldLastLoginProvider))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserHistoryFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldPassword))
}

// WhereSub applies the entql string predicate on the sub field.
func (f *UserHistoryFilter) WhereSub(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldSub))
}

// WhereAuthProvider applies the entql string predicate on the auth_provider field.
func (f *UserHistoryFilter) WhereAuthProvider(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldAuthProvider))
}

// WhereRole applies the entql string predicate on the role field.
func (f *UserHistoryFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldRole))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSettingQuery builder.
func (_q *UserSettingQuery) Filter() *UserSettingFilter {
	return &UserSettingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSettingMutation builder.
func (m *UserSettingMutation) Filter() *UserSettingFilter {
	return &UserSettingFilter{config: m.config, predicateAdder: m}
}

// UserSettingFilter provides a generic filtering capability at runtime for UserSettingQuery.
type UserSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[106].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(usersetting.FieldTags))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserSettingFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldUserID))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *UserSettingFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldLocked))
}

// WhereSilencedAt applies the entql time.Time predicate on the silenced_at field.
func (f *UserSettingFilter) WhereSilencedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldSilencedAt))
}

// WhereSuspendedAt applies the entql time.Time predicate on the suspended_at field.
func (f *UserSettingFilter) WhereSuspendedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldSuspendedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserSettingFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldStatus))
}

// WhereEmailConfirmed applies the entql bool predicate on the email_confirmed field.
func (f *UserSettingFilter) WhereEmailConfirmed(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldEmailConfirmed))
}

// WhereIsWebauthnAllowed applies the entql bool predicate on the is_webauthn_allowed field.
func (f *UserSettingFilter) WhereIsWebauthnAllowed(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldIsWebauthnAllowed))
}

// WhereIsTfaEnabled applies the entql bool predicate on the is_tfa_enabled field.
func (f *UserSettingFilter) WhereIsTfaEnabled(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldIsTfaEnabled))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserSettingFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldPhoneNumber))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserSettingFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultOrg applies a predicate to check if query has an edge default_org.
func (f *UserSettingFilter) WhereHasDefaultOrg() {
	f.Where(entql.HasEdge("default_org"))
}

// WhereHasDefaultOrgWith applies a predicate to check if query has an edge default_org with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasDefaultOrgWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("default_org", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *UserSettingFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserSettingHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSettingHistoryQuery builder.
func (_q *UserSettingHistoryQuery) Filter() *UserSettingHistoryFilter {
	return &UserSettingHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSettingHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSettingHistoryMutation builder.
func (m *UserSettingHistoryMutation) Filter() *UserSettingHistoryFilter {
	return &UserSettingHistoryFilter{config: m.config, predicateAdder: m}
}

// UserSettingHistoryFilter provides a generic filtering capability at runtime for UserSettingHistoryQuery.
type UserSettingHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSettingHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[107].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserSettingHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *UserSettingHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *UserSettingHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *UserSettingHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserSettingHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserSettingHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserSettingHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserSettingHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserSettingHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserSettingHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserSettingHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(usersettinghistory.FieldTags))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserSettingHistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldUserID))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *UserSettingHistoryFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldLocked))
}

// WhereSilencedAt applies the entql time.Time predicate on the silenced_at field.
func (f *UserSettingHistoryFilter) WhereSilencedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldSilencedAt))
}

// WhereSuspendedAt applies the entql time.Time predicate on the suspended_at field.
func (f *UserSettingHistoryFilter) WhereSuspendedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldSuspendedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserSettingHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldStatus))
}

// WhereEmailConfirmed applies the entql bool predicate on the email_confirmed field.
func (f *UserSettingHistoryFilter) WhereEmailConfirmed(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldEmailConfirmed))
}

// WhereIsWebauthnAllowed applies the entql bool predicate on the is_webauthn_allowed field.
func (f *UserSettingHistoryFilter) WhereIsWebauthnAllowed(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldIsWebauthnAllowed))
}

// WhereIsTfaEnabled applies the entql bool predicate on the is_tfa_enabled field.
func (f *UserSettingHistoryFilter) WhereIsTfaEnabled(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldIsTfaEnabled))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserSettingHistoryFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldPhoneNumber))
}

// addPredicate implements the predicateAdder interface.
func (_q *WebauthnQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WebauthnQuery builder.
func (_q *WebauthnQuery) Filter() *WebauthnFilter {
	return &WebauthnFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *WebauthnMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WebauthnMutation builder.
func (m *WebauthnMutation) Filter() *WebauthnFilter {
	return &WebauthnFilter{config: m.config, predicateAdder: m}
}

// WebauthnFilter provides a generic filtering capability at runtime for WebauthnQuery.
type WebauthnFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WebauthnFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[108].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WebauthnFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WebauthnFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(webauthn.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WebauthnFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(webauthn.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *WebauthnFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *WebauthnFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldUpdatedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *WebauthnFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *WebauthnFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldOwnerID))
}

// WhereCredentialID applies the entql []byte predicate on the credential_id field.
func (f *WebauthnFilter) WhereCredentialID(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldCredentialID))
}

// WherePublicKey applies the entql []byte predicate on the public_key field.
func (f *WebauthnFilter) WherePublicKey(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldPublicKey))
}

// WhereAttestationType applies the entql string predicate on the attestation_type field.
func (f *WebauthnFilter) WhereAttestationType(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldAttestationType))
}

// WhereAaguid applies the entql other predicate on the aaguid field.
func (f *WebauthnFilter) WhereAaguid(p entql.OtherP) {
	f.Where(p.Field(webauthn.FieldAaguid))
}

// WhereSignCount applies the entql int32 predicate on the sign_count field.
func (f *WebauthnFilter) WhereSignCount(p entql.Int32P) {
	f.Where(p.Field(webauthn.FieldSignCount))
}

// WhereTransports applies the entql json.RawMessage predicate on the transports field.
func (f *WebauthnFilter) WhereTransports(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldTransports))
}

// WhereBackupEligible applies the entql bool predicate on the backup_eligible field.
func (f *WebauthnFilter) WhereBackupEligible(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldBackupEligible))
}

// WhereBackupState applies the entql bool predicate on the backup_state field.
func (f *WebauthnFilter) WhereBackupState(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldBackupState))
}

// WhereUserPresent applies the entql bool predicate on the user_present field.
func (f *WebauthnFilter) WhereUserPresent(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldUserPresent))
}

// WhereUserVerified applies the entql bool predicate on the user_verified field.
func (f *WebauthnFilter) WhereUserVerified(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldUserVerified))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *WebauthnFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *WebauthnFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
