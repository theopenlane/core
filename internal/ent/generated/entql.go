// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/eventhistory"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/featurehistory"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/oauthprovider"
	"github.com/theopenlane/core/internal/ent/generated/oauthproviderhistory"
	"github.com/theopenlane/core/internal/ent/generated/ohauthtootoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"
	"github.com/theopenlane/core/internal/ent/generated/webhook"
	"github.com/theopenlane/core/internal/ent/generated/webhookhistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 57)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apitoken.Table,
			Columns: apitoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apitoken.FieldID,
			},
		},
		Type: "APIToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			apitoken.FieldCreatedAt:   {Type: field.TypeTime, Column: apitoken.FieldCreatedAt},
			apitoken.FieldUpdatedAt:   {Type: field.TypeTime, Column: apitoken.FieldUpdatedAt},
			apitoken.FieldCreatedBy:   {Type: field.TypeString, Column: apitoken.FieldCreatedBy},
			apitoken.FieldUpdatedBy:   {Type: field.TypeString, Column: apitoken.FieldUpdatedBy},
			apitoken.FieldDeletedAt:   {Type: field.TypeTime, Column: apitoken.FieldDeletedAt},
			apitoken.FieldDeletedBy:   {Type: field.TypeString, Column: apitoken.FieldDeletedBy},
			apitoken.FieldMappingID:   {Type: field.TypeString, Column: apitoken.FieldMappingID},
			apitoken.FieldTags:        {Type: field.TypeJSON, Column: apitoken.FieldTags},
			apitoken.FieldOwnerID:     {Type: field.TypeString, Column: apitoken.FieldOwnerID},
			apitoken.FieldName:        {Type: field.TypeString, Column: apitoken.FieldName},
			apitoken.FieldToken:       {Type: field.TypeString, Column: apitoken.FieldToken},
			apitoken.FieldExpiresAt:   {Type: field.TypeTime, Column: apitoken.FieldExpiresAt},
			apitoken.FieldDescription: {Type: field.TypeString, Column: apitoken.FieldDescription},
			apitoken.FieldScopes:      {Type: field.TypeJSON, Column: apitoken.FieldScopes},
			apitoken.FieldLastUsedAt:  {Type: field.TypeTime, Column: apitoken.FieldLastUsedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contact.Table,
			Columns: contact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contact.FieldID,
			},
		},
		Type: "Contact",
		Fields: map[string]*sqlgraph.FieldSpec{
			contact.FieldCreatedAt:   {Type: field.TypeTime, Column: contact.FieldCreatedAt},
			contact.FieldUpdatedAt:   {Type: field.TypeTime, Column: contact.FieldUpdatedAt},
			contact.FieldCreatedBy:   {Type: field.TypeString, Column: contact.FieldCreatedBy},
			contact.FieldUpdatedBy:   {Type: field.TypeString, Column: contact.FieldUpdatedBy},
			contact.FieldMappingID:   {Type: field.TypeString, Column: contact.FieldMappingID},
			contact.FieldDeletedAt:   {Type: field.TypeTime, Column: contact.FieldDeletedAt},
			contact.FieldDeletedBy:   {Type: field.TypeString, Column: contact.FieldDeletedBy},
			contact.FieldTags:        {Type: field.TypeJSON, Column: contact.FieldTags},
			contact.FieldOwnerID:     {Type: field.TypeString, Column: contact.FieldOwnerID},
			contact.FieldFullName:    {Type: field.TypeString, Column: contact.FieldFullName},
			contact.FieldTitle:       {Type: field.TypeString, Column: contact.FieldTitle},
			contact.FieldCompany:     {Type: field.TypeString, Column: contact.FieldCompany},
			contact.FieldEmail:       {Type: field.TypeString, Column: contact.FieldEmail},
			contact.FieldPhoneNumber: {Type: field.TypeString, Column: contact.FieldPhoneNumber},
			contact.FieldAddress:     {Type: field.TypeString, Column: contact.FieldAddress},
			contact.FieldStatus:      {Type: field.TypeEnum, Column: contact.FieldStatus},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contacthistory.Table,
			Columns: contacthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contacthistory.FieldID,
			},
		},
		Type: "ContactHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			contacthistory.FieldHistoryTime: {Type: field.TypeTime, Column: contacthistory.FieldHistoryTime},
			contacthistory.FieldRef:         {Type: field.TypeString, Column: contacthistory.FieldRef},
			contacthistory.FieldOperation:   {Type: field.TypeEnum, Column: contacthistory.FieldOperation},
			contacthistory.FieldCreatedAt:   {Type: field.TypeTime, Column: contacthistory.FieldCreatedAt},
			contacthistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: contacthistory.FieldUpdatedAt},
			contacthistory.FieldCreatedBy:   {Type: field.TypeString, Column: contacthistory.FieldCreatedBy},
			contacthistory.FieldUpdatedBy:   {Type: field.TypeString, Column: contacthistory.FieldUpdatedBy},
			contacthistory.FieldMappingID:   {Type: field.TypeString, Column: contacthistory.FieldMappingID},
			contacthistory.FieldDeletedAt:   {Type: field.TypeTime, Column: contacthistory.FieldDeletedAt},
			contacthistory.FieldDeletedBy:   {Type: field.TypeString, Column: contacthistory.FieldDeletedBy},
			contacthistory.FieldTags:        {Type: field.TypeJSON, Column: contacthistory.FieldTags},
			contacthistory.FieldOwnerID:     {Type: field.TypeString, Column: contacthistory.FieldOwnerID},
			contacthistory.FieldFullName:    {Type: field.TypeString, Column: contacthistory.FieldFullName},
			contacthistory.FieldTitle:       {Type: field.TypeString, Column: contacthistory.FieldTitle},
			contacthistory.FieldCompany:     {Type: field.TypeString, Column: contacthistory.FieldCompany},
			contacthistory.FieldEmail:       {Type: field.TypeString, Column: contacthistory.FieldEmail},
			contacthistory.FieldPhoneNumber: {Type: field.TypeString, Column: contacthistory.FieldPhoneNumber},
			contacthistory.FieldAddress:     {Type: field.TypeString, Column: contacthistory.FieldAddress},
			contacthistory.FieldStatus:      {Type: field.TypeEnum, Column: contacthistory.FieldStatus},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   documentdata.Table,
			Columns: documentdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: documentdata.FieldID,
			},
		},
		Type: "DocumentData",
		Fields: map[string]*sqlgraph.FieldSpec{
			documentdata.FieldCreatedAt:  {Type: field.TypeTime, Column: documentdata.FieldCreatedAt},
			documentdata.FieldUpdatedAt:  {Type: field.TypeTime, Column: documentdata.FieldUpdatedAt},
			documentdata.FieldCreatedBy:  {Type: field.TypeString, Column: documentdata.FieldCreatedBy},
			documentdata.FieldUpdatedBy:  {Type: field.TypeString, Column: documentdata.FieldUpdatedBy},
			documentdata.FieldMappingID:  {Type: field.TypeString, Column: documentdata.FieldMappingID},
			documentdata.FieldTags:       {Type: field.TypeJSON, Column: documentdata.FieldTags},
			documentdata.FieldDeletedAt:  {Type: field.TypeTime, Column: documentdata.FieldDeletedAt},
			documentdata.FieldDeletedBy:  {Type: field.TypeString, Column: documentdata.FieldDeletedBy},
			documentdata.FieldOwnerID:    {Type: field.TypeString, Column: documentdata.FieldOwnerID},
			documentdata.FieldTemplateID: {Type: field.TypeString, Column: documentdata.FieldTemplateID},
			documentdata.FieldData:       {Type: field.TypeJSON, Column: documentdata.FieldData},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   documentdatahistory.Table,
			Columns: documentdatahistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: documentdatahistory.FieldID,
			},
		},
		Type: "DocumentDataHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			documentdatahistory.FieldHistoryTime: {Type: field.TypeTime, Column: documentdatahistory.FieldHistoryTime},
			documentdatahistory.FieldRef:         {Type: field.TypeString, Column: documentdatahistory.FieldRef},
			documentdatahistory.FieldOperation:   {Type: field.TypeEnum, Column: documentdatahistory.FieldOperation},
			documentdatahistory.FieldCreatedAt:   {Type: field.TypeTime, Column: documentdatahistory.FieldCreatedAt},
			documentdatahistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: documentdatahistory.FieldUpdatedAt},
			documentdatahistory.FieldCreatedBy:   {Type: field.TypeString, Column: documentdatahistory.FieldCreatedBy},
			documentdatahistory.FieldUpdatedBy:   {Type: field.TypeString, Column: documentdatahistory.FieldUpdatedBy},
			documentdatahistory.FieldMappingID:   {Type: field.TypeString, Column: documentdatahistory.FieldMappingID},
			documentdatahistory.FieldTags:        {Type: field.TypeJSON, Column: documentdatahistory.FieldTags},
			documentdatahistory.FieldDeletedAt:   {Type: field.TypeTime, Column: documentdatahistory.FieldDeletedAt},
			documentdatahistory.FieldDeletedBy:   {Type: field.TypeString, Column: documentdatahistory.FieldDeletedBy},
			documentdatahistory.FieldOwnerID:     {Type: field.TypeString, Column: documentdatahistory.FieldOwnerID},
			documentdatahistory.FieldTemplateID:  {Type: field.TypeString, Column: documentdatahistory.FieldTemplateID},
			documentdatahistory.FieldData:        {Type: field.TypeJSON, Column: documentdatahistory.FieldData},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailverificationtoken.Table,
			Columns: emailverificationtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emailverificationtoken.FieldID,
			},
		},
		Type: "EmailVerificationToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailverificationtoken.FieldCreatedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldCreatedAt},
			emailverificationtoken.FieldUpdatedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldUpdatedAt},
			emailverificationtoken.FieldCreatedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldCreatedBy},
			emailverificationtoken.FieldUpdatedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldUpdatedBy},
			emailverificationtoken.FieldMappingID: {Type: field.TypeString, Column: emailverificationtoken.FieldMappingID},
			emailverificationtoken.FieldDeletedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldDeletedAt},
			emailverificationtoken.FieldDeletedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldDeletedBy},
			emailverificationtoken.FieldOwnerID:   {Type: field.TypeString, Column: emailverificationtoken.FieldOwnerID},
			emailverificationtoken.FieldToken:     {Type: field.TypeString, Column: emailverificationtoken.FieldToken},
			emailverificationtoken.FieldTTL:       {Type: field.TypeTime, Column: emailverificationtoken.FieldTTL},
			emailverificationtoken.FieldEmail:     {Type: field.TypeString, Column: emailverificationtoken.FieldEmail},
			emailverificationtoken.FieldSecret:    {Type: field.TypeBytes, Column: emailverificationtoken.FieldSecret},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitlement.Table,
			Columns: entitlement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitlement.FieldID,
			},
		},
		Type: "Entitlement",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitlement.FieldCreatedAt:              {Type: field.TypeTime, Column: entitlement.FieldCreatedAt},
			entitlement.FieldUpdatedAt:              {Type: field.TypeTime, Column: entitlement.FieldUpdatedAt},
			entitlement.FieldCreatedBy:              {Type: field.TypeString, Column: entitlement.FieldCreatedBy},
			entitlement.FieldUpdatedBy:              {Type: field.TypeString, Column: entitlement.FieldUpdatedBy},
			entitlement.FieldMappingID:              {Type: field.TypeString, Column: entitlement.FieldMappingID},
			entitlement.FieldTags:                   {Type: field.TypeJSON, Column: entitlement.FieldTags},
			entitlement.FieldDeletedAt:              {Type: field.TypeTime, Column: entitlement.FieldDeletedAt},
			entitlement.FieldDeletedBy:              {Type: field.TypeString, Column: entitlement.FieldDeletedBy},
			entitlement.FieldOwnerID:                {Type: field.TypeString, Column: entitlement.FieldOwnerID},
			entitlement.FieldPlanID:                 {Type: field.TypeString, Column: entitlement.FieldPlanID},
			entitlement.FieldOrganizationID:         {Type: field.TypeString, Column: entitlement.FieldOrganizationID},
			entitlement.FieldExternalCustomerID:     {Type: field.TypeString, Column: entitlement.FieldExternalCustomerID},
			entitlement.FieldExternalSubscriptionID: {Type: field.TypeString, Column: entitlement.FieldExternalSubscriptionID},
			entitlement.FieldExpires:                {Type: field.TypeBool, Column: entitlement.FieldExpires},
			entitlement.FieldExpiresAt:              {Type: field.TypeTime, Column: entitlement.FieldExpiresAt},
			entitlement.FieldCancelled:              {Type: field.TypeBool, Column: entitlement.FieldCancelled},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitlementhistory.Table,
			Columns: entitlementhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitlementhistory.FieldID,
			},
		},
		Type: "EntitlementHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitlementhistory.FieldHistoryTime:            {Type: field.TypeTime, Column: entitlementhistory.FieldHistoryTime},
			entitlementhistory.FieldRef:                    {Type: field.TypeString, Column: entitlementhistory.FieldRef},
			entitlementhistory.FieldOperation:              {Type: field.TypeEnum, Column: entitlementhistory.FieldOperation},
			entitlementhistory.FieldCreatedAt:              {Type: field.TypeTime, Column: entitlementhistory.FieldCreatedAt},
			entitlementhistory.FieldUpdatedAt:              {Type: field.TypeTime, Column: entitlementhistory.FieldUpdatedAt},
			entitlementhistory.FieldCreatedBy:              {Type: field.TypeString, Column: entitlementhistory.FieldCreatedBy},
			entitlementhistory.FieldUpdatedBy:              {Type: field.TypeString, Column: entitlementhistory.FieldUpdatedBy},
			entitlementhistory.FieldMappingID:              {Type: field.TypeString, Column: entitlementhistory.FieldMappingID},
			entitlementhistory.FieldTags:                   {Type: field.TypeJSON, Column: entitlementhistory.FieldTags},
			entitlementhistory.FieldDeletedAt:              {Type: field.TypeTime, Column: entitlementhistory.FieldDeletedAt},
			entitlementhistory.FieldDeletedBy:              {Type: field.TypeString, Column: entitlementhistory.FieldDeletedBy},
			entitlementhistory.FieldOwnerID:                {Type: field.TypeString, Column: entitlementhistory.FieldOwnerID},
			entitlementhistory.FieldPlanID:                 {Type: field.TypeString, Column: entitlementhistory.FieldPlanID},
			entitlementhistory.FieldOrganizationID:         {Type: field.TypeString, Column: entitlementhistory.FieldOrganizationID},
			entitlementhistory.FieldExternalCustomerID:     {Type: field.TypeString, Column: entitlementhistory.FieldExternalCustomerID},
			entitlementhistory.FieldExternalSubscriptionID: {Type: field.TypeString, Column: entitlementhistory.FieldExternalSubscriptionID},
			entitlementhistory.FieldExpires:                {Type: field.TypeBool, Column: entitlementhistory.FieldExpires},
			entitlementhistory.FieldExpiresAt:              {Type: field.TypeTime, Column: entitlementhistory.FieldExpiresAt},
			entitlementhistory.FieldCancelled:              {Type: field.TypeBool, Column: entitlementhistory.FieldCancelled},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitlementplan.Table,
			Columns: entitlementplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitlementplan.FieldID,
			},
		},
		Type: "EntitlementPlan",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitlementplan.FieldCreatedAt:   {Type: field.TypeTime, Column: entitlementplan.FieldCreatedAt},
			entitlementplan.FieldUpdatedAt:   {Type: field.TypeTime, Column: entitlementplan.FieldUpdatedAt},
			entitlementplan.FieldCreatedBy:   {Type: field.TypeString, Column: entitlementplan.FieldCreatedBy},
			entitlementplan.FieldUpdatedBy:   {Type: field.TypeString, Column: entitlementplan.FieldUpdatedBy},
			entitlementplan.FieldMappingID:   {Type: field.TypeString, Column: entitlementplan.FieldMappingID},
			entitlementplan.FieldDeletedAt:   {Type: field.TypeTime, Column: entitlementplan.FieldDeletedAt},
			entitlementplan.FieldDeletedBy:   {Type: field.TypeString, Column: entitlementplan.FieldDeletedBy},
			entitlementplan.FieldTags:        {Type: field.TypeJSON, Column: entitlementplan.FieldTags},
			entitlementplan.FieldOwnerID:     {Type: field.TypeString, Column: entitlementplan.FieldOwnerID},
			entitlementplan.FieldDisplayName: {Type: field.TypeString, Column: entitlementplan.FieldDisplayName},
			entitlementplan.FieldName:        {Type: field.TypeString, Column: entitlementplan.FieldName},
			entitlementplan.FieldDescription: {Type: field.TypeString, Column: entitlementplan.FieldDescription},
			entitlementplan.FieldVersion:     {Type: field.TypeString, Column: entitlementplan.FieldVersion},
			entitlementplan.FieldMetadata:    {Type: field.TypeJSON, Column: entitlementplan.FieldMetadata},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitlementplanfeature.Table,
			Columns: entitlementplanfeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitlementplanfeature.FieldID,
			},
		},
		Type: "EntitlementPlanFeature",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitlementplanfeature.FieldCreatedAt: {Type: field.TypeTime, Column: entitlementplanfeature.FieldCreatedAt},
			entitlementplanfeature.FieldUpdatedAt: {Type: field.TypeTime, Column: entitlementplanfeature.FieldUpdatedAt},
			entitlementplanfeature.FieldCreatedBy: {Type: field.TypeString, Column: entitlementplanfeature.FieldCreatedBy},
			entitlementplanfeature.FieldUpdatedBy: {Type: field.TypeString, Column: entitlementplanfeature.FieldUpdatedBy},
			entitlementplanfeature.FieldMappingID: {Type: field.TypeString, Column: entitlementplanfeature.FieldMappingID},
			entitlementplanfeature.FieldDeletedAt: {Type: field.TypeTime, Column: entitlementplanfeature.FieldDeletedAt},
			entitlementplanfeature.FieldDeletedBy: {Type: field.TypeString, Column: entitlementplanfeature.FieldDeletedBy},
			entitlementplanfeature.FieldTags:      {Type: field.TypeJSON, Column: entitlementplanfeature.FieldTags},
			entitlementplanfeature.FieldOwnerID:   {Type: field.TypeString, Column: entitlementplanfeature.FieldOwnerID},
			entitlementplanfeature.FieldMetadata:  {Type: field.TypeJSON, Column: entitlementplanfeature.FieldMetadata},
			entitlementplanfeature.FieldPlanID:    {Type: field.TypeString, Column: entitlementplanfeature.FieldPlanID},
			entitlementplanfeature.FieldFeatureID: {Type: field.TypeString, Column: entitlementplanfeature.FieldFeatureID},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitlementplanfeaturehistory.Table,
			Columns: entitlementplanfeaturehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitlementplanfeaturehistory.FieldID,
			},
		},
		Type: "EntitlementPlanFeatureHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitlementplanfeaturehistory.FieldHistoryTime: {Type: field.TypeTime, Column: entitlementplanfeaturehistory.FieldHistoryTime},
			entitlementplanfeaturehistory.FieldRef:         {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldRef},
			entitlementplanfeaturehistory.FieldOperation:   {Type: field.TypeEnum, Column: entitlementplanfeaturehistory.FieldOperation},
			entitlementplanfeaturehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: entitlementplanfeaturehistory.FieldCreatedAt},
			entitlementplanfeaturehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: entitlementplanfeaturehistory.FieldUpdatedAt},
			entitlementplanfeaturehistory.FieldCreatedBy:   {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldCreatedBy},
			entitlementplanfeaturehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldUpdatedBy},
			entitlementplanfeaturehistory.FieldMappingID:   {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldMappingID},
			entitlementplanfeaturehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: entitlementplanfeaturehistory.FieldDeletedAt},
			entitlementplanfeaturehistory.FieldDeletedBy:   {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldDeletedBy},
			entitlementplanfeaturehistory.FieldTags:        {Type: field.TypeJSON, Column: entitlementplanfeaturehistory.FieldTags},
			entitlementplanfeaturehistory.FieldOwnerID:     {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldOwnerID},
			entitlementplanfeaturehistory.FieldMetadata:    {Type: field.TypeJSON, Column: entitlementplanfeaturehistory.FieldMetadata},
			entitlementplanfeaturehistory.FieldPlanID:      {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldPlanID},
			entitlementplanfeaturehistory.FieldFeatureID:   {Type: field.TypeString, Column: entitlementplanfeaturehistory.FieldFeatureID},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitlementplanhistory.Table,
			Columns: entitlementplanhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitlementplanhistory.FieldID,
			},
		},
		Type: "EntitlementPlanHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitlementplanhistory.FieldHistoryTime: {Type: field.TypeTime, Column: entitlementplanhistory.FieldHistoryTime},
			entitlementplanhistory.FieldRef:         {Type: field.TypeString, Column: entitlementplanhistory.FieldRef},
			entitlementplanhistory.FieldOperation:   {Type: field.TypeEnum, Column: entitlementplanhistory.FieldOperation},
			entitlementplanhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: entitlementplanhistory.FieldCreatedAt},
			entitlementplanhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: entitlementplanhistory.FieldUpdatedAt},
			entitlementplanhistory.FieldCreatedBy:   {Type: field.TypeString, Column: entitlementplanhistory.FieldCreatedBy},
			entitlementplanhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: entitlementplanhistory.FieldUpdatedBy},
			entitlementplanhistory.FieldMappingID:   {Type: field.TypeString, Column: entitlementplanhistory.FieldMappingID},
			entitlementplanhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: entitlementplanhistory.FieldDeletedAt},
			entitlementplanhistory.FieldDeletedBy:   {Type: field.TypeString, Column: entitlementplanhistory.FieldDeletedBy},
			entitlementplanhistory.FieldTags:        {Type: field.TypeJSON, Column: entitlementplanhistory.FieldTags},
			entitlementplanhistory.FieldOwnerID:     {Type: field.TypeString, Column: entitlementplanhistory.FieldOwnerID},
			entitlementplanhistory.FieldDisplayName: {Type: field.TypeString, Column: entitlementplanhistory.FieldDisplayName},
			entitlementplanhistory.FieldName:        {Type: field.TypeString, Column: entitlementplanhistory.FieldName},
			entitlementplanhistory.FieldDescription: {Type: field.TypeString, Column: entitlementplanhistory.FieldDescription},
			entitlementplanhistory.FieldVersion:     {Type: field.TypeString, Column: entitlementplanhistory.FieldVersion},
			entitlementplanhistory.FieldMetadata:    {Type: field.TypeJSON, Column: entitlementplanhistory.FieldMetadata},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entity.FieldID,
			},
		},
		Type: "Entity",
		Fields: map[string]*sqlgraph.FieldSpec{
			entity.FieldCreatedAt:    {Type: field.TypeTime, Column: entity.FieldCreatedAt},
			entity.FieldUpdatedAt:    {Type: field.TypeTime, Column: entity.FieldUpdatedAt},
			entity.FieldCreatedBy:    {Type: field.TypeString, Column: entity.FieldCreatedBy},
			entity.FieldUpdatedBy:    {Type: field.TypeString, Column: entity.FieldUpdatedBy},
			entity.FieldMappingID:    {Type: field.TypeString, Column: entity.FieldMappingID},
			entity.FieldDeletedAt:    {Type: field.TypeTime, Column: entity.FieldDeletedAt},
			entity.FieldDeletedBy:    {Type: field.TypeString, Column: entity.FieldDeletedBy},
			entity.FieldTags:         {Type: field.TypeJSON, Column: entity.FieldTags},
			entity.FieldOwnerID:      {Type: field.TypeString, Column: entity.FieldOwnerID},
			entity.FieldName:         {Type: field.TypeString, Column: entity.FieldName},
			entity.FieldDisplayName:  {Type: field.TypeString, Column: entity.FieldDisplayName},
			entity.FieldDescription:  {Type: field.TypeString, Column: entity.FieldDescription},
			entity.FieldDomains:      {Type: field.TypeJSON, Column: entity.FieldDomains},
			entity.FieldEntityTypeID: {Type: field.TypeString, Column: entity.FieldEntityTypeID},
			entity.FieldStatus:       {Type: field.TypeString, Column: entity.FieldStatus},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entityhistory.Table,
			Columns: entityhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entityhistory.FieldID,
			},
		},
		Type: "EntityHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			entityhistory.FieldHistoryTime:  {Type: field.TypeTime, Column: entityhistory.FieldHistoryTime},
			entityhistory.FieldRef:          {Type: field.TypeString, Column: entityhistory.FieldRef},
			entityhistory.FieldOperation:    {Type: field.TypeEnum, Column: entityhistory.FieldOperation},
			entityhistory.FieldCreatedAt:    {Type: field.TypeTime, Column: entityhistory.FieldCreatedAt},
			entityhistory.FieldUpdatedAt:    {Type: field.TypeTime, Column: entityhistory.FieldUpdatedAt},
			entityhistory.FieldCreatedBy:    {Type: field.TypeString, Column: entityhistory.FieldCreatedBy},
			entityhistory.FieldUpdatedBy:    {Type: field.TypeString, Column: entityhistory.FieldUpdatedBy},
			entityhistory.FieldMappingID:    {Type: field.TypeString, Column: entityhistory.FieldMappingID},
			entityhistory.FieldDeletedAt:    {Type: field.TypeTime, Column: entityhistory.FieldDeletedAt},
			entityhistory.FieldDeletedBy:    {Type: field.TypeString, Column: entityhistory.FieldDeletedBy},
			entityhistory.FieldTags:         {Type: field.TypeJSON, Column: entityhistory.FieldTags},
			entityhistory.FieldOwnerID:      {Type: field.TypeString, Column: entityhistory.FieldOwnerID},
			entityhistory.FieldName:         {Type: field.TypeString, Column: entityhistory.FieldName},
			entityhistory.FieldDisplayName:  {Type: field.TypeString, Column: entityhistory.FieldDisplayName},
			entityhistory.FieldDescription:  {Type: field.TypeString, Column: entityhistory.FieldDescription},
			entityhistory.FieldDomains:      {Type: field.TypeJSON, Column: entityhistory.FieldDomains},
			entityhistory.FieldEntityTypeID: {Type: field.TypeString, Column: entityhistory.FieldEntityTypeID},
			entityhistory.FieldStatus:       {Type: field.TypeString, Column: entityhistory.FieldStatus},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitytype.Table,
			Columns: entitytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitytype.FieldID,
			},
		},
		Type: "EntityType",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitytype.FieldCreatedAt: {Type: field.TypeTime, Column: entitytype.FieldCreatedAt},
			entitytype.FieldUpdatedAt: {Type: field.TypeTime, Column: entitytype.FieldUpdatedAt},
			entitytype.FieldCreatedBy: {Type: field.TypeString, Column: entitytype.FieldCreatedBy},
			entitytype.FieldUpdatedBy: {Type: field.TypeString, Column: entitytype.FieldUpdatedBy},
			entitytype.FieldMappingID: {Type: field.TypeString, Column: entitytype.FieldMappingID},
			entitytype.FieldDeletedAt: {Type: field.TypeTime, Column: entitytype.FieldDeletedAt},
			entitytype.FieldDeletedBy: {Type: field.TypeString, Column: entitytype.FieldDeletedBy},
			entitytype.FieldTags:      {Type: field.TypeJSON, Column: entitytype.FieldTags},
			entitytype.FieldOwnerID:   {Type: field.TypeString, Column: entitytype.FieldOwnerID},
			entitytype.FieldName:      {Type: field.TypeString, Column: entitytype.FieldName},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitytypehistory.Table,
			Columns: entitytypehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitytypehistory.FieldID,
			},
		},
		Type: "EntityTypeHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitytypehistory.FieldHistoryTime: {Type: field.TypeTime, Column: entitytypehistory.FieldHistoryTime},
			entitytypehistory.FieldRef:         {Type: field.TypeString, Column: entitytypehistory.FieldRef},
			entitytypehistory.FieldOperation:   {Type: field.TypeEnum, Column: entitytypehistory.FieldOperation},
			entitytypehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: entitytypehistory.FieldCreatedAt},
			entitytypehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: entitytypehistory.FieldUpdatedAt},
			entitytypehistory.FieldCreatedBy:   {Type: field.TypeString, Column: entitytypehistory.FieldCreatedBy},
			entitytypehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: entitytypehistory.FieldUpdatedBy},
			entitytypehistory.FieldMappingID:   {Type: field.TypeString, Column: entitytypehistory.FieldMappingID},
			entitytypehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: entitytypehistory.FieldDeletedAt},
			entitytypehistory.FieldDeletedBy:   {Type: field.TypeString, Column: entitytypehistory.FieldDeletedBy},
			entitytypehistory.FieldTags:        {Type: field.TypeJSON, Column: entitytypehistory.FieldTags},
			entitytypehistory.FieldOwnerID:     {Type: field.TypeString, Column: entitytypehistory.FieldOwnerID},
			entitytypehistory.FieldName:        {Type: field.TypeString, Column: entitytypehistory.FieldName},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldCreatedAt:     {Type: field.TypeTime, Column: event.FieldCreatedAt},
			event.FieldUpdatedAt:     {Type: field.TypeTime, Column: event.FieldUpdatedAt},
			event.FieldCreatedBy:     {Type: field.TypeString, Column: event.FieldCreatedBy},
			event.FieldUpdatedBy:     {Type: field.TypeString, Column: event.FieldUpdatedBy},
			event.FieldMappingID:     {Type: field.TypeString, Column: event.FieldMappingID},
			event.FieldTags:          {Type: field.TypeJSON, Column: event.FieldTags},
			event.FieldEventID:       {Type: field.TypeString, Column: event.FieldEventID},
			event.FieldCorrelationID: {Type: field.TypeString, Column: event.FieldCorrelationID},
			event.FieldEventType:     {Type: field.TypeString, Column: event.FieldEventType},
			event.FieldMetadata:      {Type: field.TypeJSON, Column: event.FieldMetadata},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventhistory.Table,
			Columns: eventhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: eventhistory.FieldID,
			},
		},
		Type: "EventHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventhistory.FieldHistoryTime:   {Type: field.TypeTime, Column: eventhistory.FieldHistoryTime},
			eventhistory.FieldRef:           {Type: field.TypeString, Column: eventhistory.FieldRef},
			eventhistory.FieldOperation:     {Type: field.TypeEnum, Column: eventhistory.FieldOperation},
			eventhistory.FieldCreatedAt:     {Type: field.TypeTime, Column: eventhistory.FieldCreatedAt},
			eventhistory.FieldUpdatedAt:     {Type: field.TypeTime, Column: eventhistory.FieldUpdatedAt},
			eventhistory.FieldCreatedBy:     {Type: field.TypeString, Column: eventhistory.FieldCreatedBy},
			eventhistory.FieldUpdatedBy:     {Type: field.TypeString, Column: eventhistory.FieldUpdatedBy},
			eventhistory.FieldMappingID:     {Type: field.TypeString, Column: eventhistory.FieldMappingID},
			eventhistory.FieldTags:          {Type: field.TypeJSON, Column: eventhistory.FieldTags},
			eventhistory.FieldEventID:       {Type: field.TypeString, Column: eventhistory.FieldEventID},
			eventhistory.FieldCorrelationID: {Type: field.TypeString, Column: eventhistory.FieldCorrelationID},
			eventhistory.FieldEventType:     {Type: field.TypeString, Column: eventhistory.FieldEventType},
			eventhistory.FieldMetadata:      {Type: field.TypeJSON, Column: eventhistory.FieldMetadata},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   feature.Table,
			Columns: feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: feature.FieldID,
			},
		},
		Type: "Feature",
		Fields: map[string]*sqlgraph.FieldSpec{
			feature.FieldCreatedAt:   {Type: field.TypeTime, Column: feature.FieldCreatedAt},
			feature.FieldUpdatedAt:   {Type: field.TypeTime, Column: feature.FieldUpdatedAt},
			feature.FieldCreatedBy:   {Type: field.TypeString, Column: feature.FieldCreatedBy},
			feature.FieldUpdatedBy:   {Type: field.TypeString, Column: feature.FieldUpdatedBy},
			feature.FieldDeletedAt:   {Type: field.TypeTime, Column: feature.FieldDeletedAt},
			feature.FieldDeletedBy:   {Type: field.TypeString, Column: feature.FieldDeletedBy},
			feature.FieldMappingID:   {Type: field.TypeString, Column: feature.FieldMappingID},
			feature.FieldTags:        {Type: field.TypeJSON, Column: feature.FieldTags},
			feature.FieldOwnerID:     {Type: field.TypeString, Column: feature.FieldOwnerID},
			feature.FieldName:        {Type: field.TypeString, Column: feature.FieldName},
			feature.FieldDisplayName: {Type: field.TypeString, Column: feature.FieldDisplayName},
			feature.FieldEnabled:     {Type: field.TypeBool, Column: feature.FieldEnabled},
			feature.FieldDescription: {Type: field.TypeString, Column: feature.FieldDescription},
			feature.FieldMetadata:    {Type: field.TypeJSON, Column: feature.FieldMetadata},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   featurehistory.Table,
			Columns: featurehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: featurehistory.FieldID,
			},
		},
		Type: "FeatureHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			featurehistory.FieldHistoryTime: {Type: field.TypeTime, Column: featurehistory.FieldHistoryTime},
			featurehistory.FieldRef:         {Type: field.TypeString, Column: featurehistory.FieldRef},
			featurehistory.FieldOperation:   {Type: field.TypeEnum, Column: featurehistory.FieldOperation},
			featurehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: featurehistory.FieldCreatedAt},
			featurehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: featurehistory.FieldUpdatedAt},
			featurehistory.FieldCreatedBy:   {Type: field.TypeString, Column: featurehistory.FieldCreatedBy},
			featurehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: featurehistory.FieldUpdatedBy},
			featurehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: featurehistory.FieldDeletedAt},
			featurehistory.FieldDeletedBy:   {Type: field.TypeString, Column: featurehistory.FieldDeletedBy},
			featurehistory.FieldMappingID:   {Type: field.TypeString, Column: featurehistory.FieldMappingID},
			featurehistory.FieldTags:        {Type: field.TypeJSON, Column: featurehistory.FieldTags},
			featurehistory.FieldOwnerID:     {Type: field.TypeString, Column: featurehistory.FieldOwnerID},
			featurehistory.FieldName:        {Type: field.TypeString, Column: featurehistory.FieldName},
			featurehistory.FieldDisplayName: {Type: field.TypeString, Column: featurehistory.FieldDisplayName},
			featurehistory.FieldEnabled:     {Type: field.TypeBool, Column: featurehistory.FieldEnabled},
			featurehistory.FieldDescription: {Type: field.TypeString, Column: featurehistory.FieldDescription},
			featurehistory.FieldMetadata:    {Type: field.TypeJSON, Column: featurehistory.FieldMetadata},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: file.FieldID,
			},
		},
		Type: "File",
		Fields: map[string]*sqlgraph.FieldSpec{
			file.FieldCreatedAt:             {Type: field.TypeTime, Column: file.FieldCreatedAt},
			file.FieldUpdatedAt:             {Type: field.TypeTime, Column: file.FieldUpdatedAt},
			file.FieldCreatedBy:             {Type: field.TypeString, Column: file.FieldCreatedBy},
			file.FieldUpdatedBy:             {Type: field.TypeString, Column: file.FieldUpdatedBy},
			file.FieldDeletedAt:             {Type: field.TypeTime, Column: file.FieldDeletedAt},
			file.FieldDeletedBy:             {Type: field.TypeString, Column: file.FieldDeletedBy},
			file.FieldMappingID:             {Type: field.TypeString, Column: file.FieldMappingID},
			file.FieldTags:                  {Type: field.TypeJSON, Column: file.FieldTags},
			file.FieldProvidedFileName:      {Type: field.TypeString, Column: file.FieldProvidedFileName},
			file.FieldProvidedFileExtension: {Type: field.TypeString, Column: file.FieldProvidedFileExtension},
			file.FieldProvidedFileSize:      {Type: field.TypeInt64, Column: file.FieldProvidedFileSize},
			file.FieldPersistedFileSize:     {Type: field.TypeInt64, Column: file.FieldPersistedFileSize},
			file.FieldDetectedMimeType:      {Type: field.TypeString, Column: file.FieldDetectedMimeType},
			file.FieldMd5Hash:               {Type: field.TypeString, Column: file.FieldMd5Hash},
			file.FieldDetectedContentType:   {Type: field.TypeString, Column: file.FieldDetectedContentType},
			file.FieldStoreKey:              {Type: field.TypeString, Column: file.FieldStoreKey},
			file.FieldCategoryType:          {Type: field.TypeString, Column: file.FieldCategoryType},
			file.FieldURI:                   {Type: field.TypeString, Column: file.FieldURI},
			file.FieldStorageScheme:         {Type: field.TypeString, Column: file.FieldStorageScheme},
			file.FieldStorageVolume:         {Type: field.TypeString, Column: file.FieldStorageVolume},
			file.FieldStoragePath:           {Type: field.TypeString, Column: file.FieldStoragePath},
			file.FieldFileContents:          {Type: field.TypeBytes, Column: file.FieldFileContents},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   filehistory.Table,
			Columns: filehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: filehistory.FieldID,
			},
		},
		Type: "FileHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			filehistory.FieldHistoryTime:           {Type: field.TypeTime, Column: filehistory.FieldHistoryTime},
			filehistory.FieldRef:                   {Type: field.TypeString, Column: filehistory.FieldRef},
			filehistory.FieldOperation:             {Type: field.TypeEnum, Column: filehistory.FieldOperation},
			filehistory.FieldCreatedAt:             {Type: field.TypeTime, Column: filehistory.FieldCreatedAt},
			filehistory.FieldUpdatedAt:             {Type: field.TypeTime, Column: filehistory.FieldUpdatedAt},
			filehistory.FieldCreatedBy:             {Type: field.TypeString, Column: filehistory.FieldCreatedBy},
			filehistory.FieldUpdatedBy:             {Type: field.TypeString, Column: filehistory.FieldUpdatedBy},
			filehistory.FieldDeletedAt:             {Type: field.TypeTime, Column: filehistory.FieldDeletedAt},
			filehistory.FieldDeletedBy:             {Type: field.TypeString, Column: filehistory.FieldDeletedBy},
			filehistory.FieldMappingID:             {Type: field.TypeString, Column: filehistory.FieldMappingID},
			filehistory.FieldTags:                  {Type: field.TypeJSON, Column: filehistory.FieldTags},
			filehistory.FieldProvidedFileName:      {Type: field.TypeString, Column: filehistory.FieldProvidedFileName},
			filehistory.FieldProvidedFileExtension: {Type: field.TypeString, Column: filehistory.FieldProvidedFileExtension},
			filehistory.FieldProvidedFileSize:      {Type: field.TypeInt64, Column: filehistory.FieldProvidedFileSize},
			filehistory.FieldPersistedFileSize:     {Type: field.TypeInt64, Column: filehistory.FieldPersistedFileSize},
			filehistory.FieldDetectedMimeType:      {Type: field.TypeString, Column: filehistory.FieldDetectedMimeType},
			filehistory.FieldMd5Hash:               {Type: field.TypeString, Column: filehistory.FieldMd5Hash},
			filehistory.FieldDetectedContentType:   {Type: field.TypeString, Column: filehistory.FieldDetectedContentType},
			filehistory.FieldStoreKey:              {Type: field.TypeString, Column: filehistory.FieldStoreKey},
			filehistory.FieldCategoryType:          {Type: field.TypeString, Column: filehistory.FieldCategoryType},
			filehistory.FieldURI:                   {Type: field.TypeString, Column: filehistory.FieldURI},
			filehistory.FieldStorageScheme:         {Type: field.TypeString, Column: filehistory.FieldStorageScheme},
			filehistory.FieldStorageVolume:         {Type: field.TypeString, Column: filehistory.FieldStorageVolume},
			filehistory.FieldStoragePath:           {Type: field.TypeString, Column: filehistory.FieldStoragePath},
			filehistory.FieldFileContents:          {Type: field.TypeBytes, Column: filehistory.FieldFileContents},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: group.FieldID,
			},
		},
		Type: "Group",
		Fields: map[string]*sqlgraph.FieldSpec{
			group.FieldCreatedAt:       {Type: field.TypeTime, Column: group.FieldCreatedAt},
			group.FieldUpdatedAt:       {Type: field.TypeTime, Column: group.FieldUpdatedAt},
			group.FieldCreatedBy:       {Type: field.TypeString, Column: group.FieldCreatedBy},
			group.FieldUpdatedBy:       {Type: field.TypeString, Column: group.FieldUpdatedBy},
			group.FieldDeletedAt:       {Type: field.TypeTime, Column: group.FieldDeletedAt},
			group.FieldDeletedBy:       {Type: field.TypeString, Column: group.FieldDeletedBy},
			group.FieldMappingID:       {Type: field.TypeString, Column: group.FieldMappingID},
			group.FieldTags:            {Type: field.TypeJSON, Column: group.FieldTags},
			group.FieldOwnerID:         {Type: field.TypeString, Column: group.FieldOwnerID},
			group.FieldName:            {Type: field.TypeString, Column: group.FieldName},
			group.FieldDescription:     {Type: field.TypeString, Column: group.FieldDescription},
			group.FieldGravatarLogoURL: {Type: field.TypeString, Column: group.FieldGravatarLogoURL},
			group.FieldLogoURL:         {Type: field.TypeString, Column: group.FieldLogoURL},
			group.FieldDisplayName:     {Type: field.TypeString, Column: group.FieldDisplayName},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   grouphistory.Table,
			Columns: grouphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: grouphistory.FieldID,
			},
		},
		Type: "GroupHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			grouphistory.FieldHistoryTime:     {Type: field.TypeTime, Column: grouphistory.FieldHistoryTime},
			grouphistory.FieldRef:             {Type: field.TypeString, Column: grouphistory.FieldRef},
			grouphistory.FieldOperation:       {Type: field.TypeEnum, Column: grouphistory.FieldOperation},
			grouphistory.FieldCreatedAt:       {Type: field.TypeTime, Column: grouphistory.FieldCreatedAt},
			grouphistory.FieldUpdatedAt:       {Type: field.TypeTime, Column: grouphistory.FieldUpdatedAt},
			grouphistory.FieldCreatedBy:       {Type: field.TypeString, Column: grouphistory.FieldCreatedBy},
			grouphistory.FieldUpdatedBy:       {Type: field.TypeString, Column: grouphistory.FieldUpdatedBy},
			grouphistory.FieldDeletedAt:       {Type: field.TypeTime, Column: grouphistory.FieldDeletedAt},
			grouphistory.FieldDeletedBy:       {Type: field.TypeString, Column: grouphistory.FieldDeletedBy},
			grouphistory.FieldMappingID:       {Type: field.TypeString, Column: grouphistory.FieldMappingID},
			grouphistory.FieldTags:            {Type: field.TypeJSON, Column: grouphistory.FieldTags},
			grouphistory.FieldOwnerID:         {Type: field.TypeString, Column: grouphistory.FieldOwnerID},
			grouphistory.FieldName:            {Type: field.TypeString, Column: grouphistory.FieldName},
			grouphistory.FieldDescription:     {Type: field.TypeString, Column: grouphistory.FieldDescription},
			grouphistory.FieldGravatarLogoURL: {Type: field.TypeString, Column: grouphistory.FieldGravatarLogoURL},
			grouphistory.FieldLogoURL:         {Type: field.TypeString, Column: grouphistory.FieldLogoURL},
			grouphistory.FieldDisplayName:     {Type: field.TypeString, Column: grouphistory.FieldDisplayName},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupmembership.Table,
			Columns: groupmembership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupmembership.FieldID,
			},
		},
		Type: "GroupMembership",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupmembership.FieldCreatedAt: {Type: field.TypeTime, Column: groupmembership.FieldCreatedAt},
			groupmembership.FieldUpdatedAt: {Type: field.TypeTime, Column: groupmembership.FieldUpdatedAt},
			groupmembership.FieldCreatedBy: {Type: field.TypeString, Column: groupmembership.FieldCreatedBy},
			groupmembership.FieldUpdatedBy: {Type: field.TypeString, Column: groupmembership.FieldUpdatedBy},
			groupmembership.FieldMappingID: {Type: field.TypeString, Column: groupmembership.FieldMappingID},
			groupmembership.FieldDeletedAt: {Type: field.TypeTime, Column: groupmembership.FieldDeletedAt},
			groupmembership.FieldDeletedBy: {Type: field.TypeString, Column: groupmembership.FieldDeletedBy},
			groupmembership.FieldRole:      {Type: field.TypeEnum, Column: groupmembership.FieldRole},
			groupmembership.FieldGroupID:   {Type: field.TypeString, Column: groupmembership.FieldGroupID},
			groupmembership.FieldUserID:    {Type: field.TypeString, Column: groupmembership.FieldUserID},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupmembershiphistory.Table,
			Columns: groupmembershiphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupmembershiphistory.FieldID,
			},
		},
		Type: "GroupMembershipHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupmembershiphistory.FieldHistoryTime: {Type: field.TypeTime, Column: groupmembershiphistory.FieldHistoryTime},
			groupmembershiphistory.FieldRef:         {Type: field.TypeString, Column: groupmembershiphistory.FieldRef},
			groupmembershiphistory.FieldOperation:   {Type: field.TypeEnum, Column: groupmembershiphistory.FieldOperation},
			groupmembershiphistory.FieldCreatedAt:   {Type: field.TypeTime, Column: groupmembershiphistory.FieldCreatedAt},
			groupmembershiphistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: groupmembershiphistory.FieldUpdatedAt},
			groupmembershiphistory.FieldCreatedBy:   {Type: field.TypeString, Column: groupmembershiphistory.FieldCreatedBy},
			groupmembershiphistory.FieldUpdatedBy:   {Type: field.TypeString, Column: groupmembershiphistory.FieldUpdatedBy},
			groupmembershiphistory.FieldMappingID:   {Type: field.TypeString, Column: groupmembershiphistory.FieldMappingID},
			groupmembershiphistory.FieldDeletedAt:   {Type: field.TypeTime, Column: groupmembershiphistory.FieldDeletedAt},
			groupmembershiphistory.FieldDeletedBy:   {Type: field.TypeString, Column: groupmembershiphistory.FieldDeletedBy},
			groupmembershiphistory.FieldRole:        {Type: field.TypeEnum, Column: groupmembershiphistory.FieldRole},
			groupmembershiphistory.FieldGroupID:     {Type: field.TypeString, Column: groupmembershiphistory.FieldGroupID},
			groupmembershiphistory.FieldUserID:      {Type: field.TypeString, Column: groupmembershiphistory.FieldUserID},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupsetting.Table,
			Columns: groupsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupsetting.FieldID,
			},
		},
		Type: "GroupSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupsetting.FieldCreatedAt:    {Type: field.TypeTime, Column: groupsetting.FieldCreatedAt},
			groupsetting.FieldUpdatedAt:    {Type: field.TypeTime, Column: groupsetting.FieldUpdatedAt},
			groupsetting.FieldCreatedBy:    {Type: field.TypeString, Column: groupsetting.FieldCreatedBy},
			groupsetting.FieldUpdatedBy:    {Type: field.TypeString, Column: groupsetting.FieldUpdatedBy},
			groupsetting.FieldMappingID:    {Type: field.TypeString, Column: groupsetting.FieldMappingID},
			groupsetting.FieldTags:         {Type: field.TypeJSON, Column: groupsetting.FieldTags},
			groupsetting.FieldDeletedAt:    {Type: field.TypeTime, Column: groupsetting.FieldDeletedAt},
			groupsetting.FieldDeletedBy:    {Type: field.TypeString, Column: groupsetting.FieldDeletedBy},
			groupsetting.FieldVisibility:   {Type: field.TypeEnum, Column: groupsetting.FieldVisibility},
			groupsetting.FieldJoinPolicy:   {Type: field.TypeEnum, Column: groupsetting.FieldJoinPolicy},
			groupsetting.FieldSyncToSlack:  {Type: field.TypeBool, Column: groupsetting.FieldSyncToSlack},
			groupsetting.FieldSyncToGithub: {Type: field.TypeBool, Column: groupsetting.FieldSyncToGithub},
			groupsetting.FieldGroupID:      {Type: field.TypeString, Column: groupsetting.FieldGroupID},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupsettinghistory.Table,
			Columns: groupsettinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupsettinghistory.FieldID,
			},
		},
		Type: "GroupSettingHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupsettinghistory.FieldHistoryTime:  {Type: field.TypeTime, Column: groupsettinghistory.FieldHistoryTime},
			groupsettinghistory.FieldRef:          {Type: field.TypeString, Column: groupsettinghistory.FieldRef},
			groupsettinghistory.FieldOperation:    {Type: field.TypeEnum, Column: groupsettinghistory.FieldOperation},
			groupsettinghistory.FieldCreatedAt:    {Type: field.TypeTime, Column: groupsettinghistory.FieldCreatedAt},
			groupsettinghistory.FieldUpdatedAt:    {Type: field.TypeTime, Column: groupsettinghistory.FieldUpdatedAt},
			groupsettinghistory.FieldCreatedBy:    {Type: field.TypeString, Column: groupsettinghistory.FieldCreatedBy},
			groupsettinghistory.FieldUpdatedBy:    {Type: field.TypeString, Column: groupsettinghistory.FieldUpdatedBy},
			groupsettinghistory.FieldMappingID:    {Type: field.TypeString, Column: groupsettinghistory.FieldMappingID},
			groupsettinghistory.FieldTags:         {Type: field.TypeJSON, Column: groupsettinghistory.FieldTags},
			groupsettinghistory.FieldDeletedAt:    {Type: field.TypeTime, Column: groupsettinghistory.FieldDeletedAt},
			groupsettinghistory.FieldDeletedBy:    {Type: field.TypeString, Column: groupsettinghistory.FieldDeletedBy},
			groupsettinghistory.FieldVisibility:   {Type: field.TypeEnum, Column: groupsettinghistory.FieldVisibility},
			groupsettinghistory.FieldJoinPolicy:   {Type: field.TypeEnum, Column: groupsettinghistory.FieldJoinPolicy},
			groupsettinghistory.FieldSyncToSlack:  {Type: field.TypeBool, Column: groupsettinghistory.FieldSyncToSlack},
			groupsettinghistory.FieldSyncToGithub: {Type: field.TypeBool, Column: groupsettinghistory.FieldSyncToGithub},
			groupsettinghistory.FieldGroupID:      {Type: field.TypeString, Column: groupsettinghistory.FieldGroupID},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hush.Table,
			Columns: hush.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hush.FieldID,
			},
		},
		Type: "Hush",
		Fields: map[string]*sqlgraph.FieldSpec{
			hush.FieldCreatedAt:   {Type: field.TypeTime, Column: hush.FieldCreatedAt},
			hush.FieldUpdatedAt:   {Type: field.TypeTime, Column: hush.FieldUpdatedAt},
			hush.FieldCreatedBy:   {Type: field.TypeString, Column: hush.FieldCreatedBy},
			hush.FieldUpdatedBy:   {Type: field.TypeString, Column: hush.FieldUpdatedBy},
			hush.FieldMappingID:   {Type: field.TypeString, Column: hush.FieldMappingID},
			hush.FieldDeletedAt:   {Type: field.TypeTime, Column: hush.FieldDeletedAt},
			hush.FieldDeletedBy:   {Type: field.TypeString, Column: hush.FieldDeletedBy},
			hush.FieldName:        {Type: field.TypeString, Column: hush.FieldName},
			hush.FieldDescription: {Type: field.TypeString, Column: hush.FieldDescription},
			hush.FieldKind:        {Type: field.TypeString, Column: hush.FieldKind},
			hush.FieldSecretName:  {Type: field.TypeString, Column: hush.FieldSecretName},
			hush.FieldSecretValue: {Type: field.TypeString, Column: hush.FieldSecretValue},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hushhistory.Table,
			Columns: hushhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hushhistory.FieldID,
			},
		},
		Type: "HushHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			hushhistory.FieldHistoryTime: {Type: field.TypeTime, Column: hushhistory.FieldHistoryTime},
			hushhistory.FieldRef:         {Type: field.TypeString, Column: hushhistory.FieldRef},
			hushhistory.FieldOperation:   {Type: field.TypeEnum, Column: hushhistory.FieldOperation},
			hushhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: hushhistory.FieldCreatedAt},
			hushhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: hushhistory.FieldUpdatedAt},
			hushhistory.FieldCreatedBy:   {Type: field.TypeString, Column: hushhistory.FieldCreatedBy},
			hushhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: hushhistory.FieldUpdatedBy},
			hushhistory.FieldMappingID:   {Type: field.TypeString, Column: hushhistory.FieldMappingID},
			hushhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: hushhistory.FieldDeletedAt},
			hushhistory.FieldDeletedBy:   {Type: field.TypeString, Column: hushhistory.FieldDeletedBy},
			hushhistory.FieldName:        {Type: field.TypeString, Column: hushhistory.FieldName},
			hushhistory.FieldDescription: {Type: field.TypeString, Column: hushhistory.FieldDescription},
			hushhistory.FieldKind:        {Type: field.TypeString, Column: hushhistory.FieldKind},
			hushhistory.FieldSecretName:  {Type: field.TypeString, Column: hushhistory.FieldSecretName},
			hushhistory.FieldSecretValue: {Type: field.TypeString, Column: hushhistory.FieldSecretValue},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   integration.Table,
			Columns: integration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: integration.FieldID,
			},
		},
		Type: "Integration",
		Fields: map[string]*sqlgraph.FieldSpec{
			integration.FieldCreatedAt:   {Type: field.TypeTime, Column: integration.FieldCreatedAt},
			integration.FieldUpdatedAt:   {Type: field.TypeTime, Column: integration.FieldUpdatedAt},
			integration.FieldCreatedBy:   {Type: field.TypeString, Column: integration.FieldCreatedBy},
			integration.FieldUpdatedBy:   {Type: field.TypeString, Column: integration.FieldUpdatedBy},
			integration.FieldMappingID:   {Type: field.TypeString, Column: integration.FieldMappingID},
			integration.FieldTags:        {Type: field.TypeJSON, Column: integration.FieldTags},
			integration.FieldDeletedAt:   {Type: field.TypeTime, Column: integration.FieldDeletedAt},
			integration.FieldDeletedBy:   {Type: field.TypeString, Column: integration.FieldDeletedBy},
			integration.FieldOwnerID:     {Type: field.TypeString, Column: integration.FieldOwnerID},
			integration.FieldName:        {Type: field.TypeString, Column: integration.FieldName},
			integration.FieldDescription: {Type: field.TypeString, Column: integration.FieldDescription},
			integration.FieldKind:        {Type: field.TypeString, Column: integration.FieldKind},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   integrationhistory.Table,
			Columns: integrationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: integrationhistory.FieldID,
			},
		},
		Type: "IntegrationHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			integrationhistory.FieldHistoryTime: {Type: field.TypeTime, Column: integrationhistory.FieldHistoryTime},
			integrationhistory.FieldRef:         {Type: field.TypeString, Column: integrationhistory.FieldRef},
			integrationhistory.FieldOperation:   {Type: field.TypeEnum, Column: integrationhistory.FieldOperation},
			integrationhistory.FieldCreatedAt:   {Type: field.TypeTime, Column: integrationhistory.FieldCreatedAt},
			integrationhistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: integrationhistory.FieldUpdatedAt},
			integrationhistory.FieldCreatedBy:   {Type: field.TypeString, Column: integrationhistory.FieldCreatedBy},
			integrationhistory.FieldUpdatedBy:   {Type: field.TypeString, Column: integrationhistory.FieldUpdatedBy},
			integrationhistory.FieldMappingID:   {Type: field.TypeString, Column: integrationhistory.FieldMappingID},
			integrationhistory.FieldTags:        {Type: field.TypeJSON, Column: integrationhistory.FieldTags},
			integrationhistory.FieldDeletedAt:   {Type: field.TypeTime, Column: integrationhistory.FieldDeletedAt},
			integrationhistory.FieldDeletedBy:   {Type: field.TypeString, Column: integrationhistory.FieldDeletedBy},
			integrationhistory.FieldOwnerID:     {Type: field.TypeString, Column: integrationhistory.FieldOwnerID},
			integrationhistory.FieldName:        {Type: field.TypeString, Column: integrationhistory.FieldName},
			integrationhistory.FieldDescription: {Type: field.TypeString, Column: integrationhistory.FieldDescription},
			integrationhistory.FieldKind:        {Type: field.TypeString, Column: integrationhistory.FieldKind},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invite.Table,
			Columns: invite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: invite.FieldID,
			},
		},
		Type: "Invite",
		Fields: map[string]*sqlgraph.FieldSpec{
			invite.FieldCreatedAt:    {Type: field.TypeTime, Column: invite.FieldCreatedAt},
			invite.FieldUpdatedAt:    {Type: field.TypeTime, Column: invite.FieldUpdatedAt},
			invite.FieldCreatedBy:    {Type: field.TypeString, Column: invite.FieldCreatedBy},
			invite.FieldUpdatedBy:    {Type: field.TypeString, Column: invite.FieldUpdatedBy},
			invite.FieldMappingID:    {Type: field.TypeString, Column: invite.FieldMappingID},
			invite.FieldDeletedAt:    {Type: field.TypeTime, Column: invite.FieldDeletedAt},
			invite.FieldDeletedBy:    {Type: field.TypeString, Column: invite.FieldDeletedBy},
			invite.FieldOwnerID:      {Type: field.TypeString, Column: invite.FieldOwnerID},
			invite.FieldToken:        {Type: field.TypeString, Column: invite.FieldToken},
			invite.FieldExpires:      {Type: field.TypeTime, Column: invite.FieldExpires},
			invite.FieldRecipient:    {Type: field.TypeString, Column: invite.FieldRecipient},
			invite.FieldStatus:       {Type: field.TypeEnum, Column: invite.FieldStatus},
			invite.FieldRole:         {Type: field.TypeEnum, Column: invite.FieldRole},
			invite.FieldSendAttempts: {Type: field.TypeInt, Column: invite.FieldSendAttempts},
			invite.FieldRequestorID:  {Type: field.TypeString, Column: invite.FieldRequestorID},
			invite.FieldSecret:       {Type: field.TypeBytes, Column: invite.FieldSecret},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   note.Table,
			Columns: note.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: note.FieldID,
			},
		},
		Type: "Note",
		Fields: map[string]*sqlgraph.FieldSpec{
			note.FieldCreatedAt: {Type: field.TypeTime, Column: note.FieldCreatedAt},
			note.FieldUpdatedAt: {Type: field.TypeTime, Column: note.FieldUpdatedAt},
			note.FieldCreatedBy: {Type: field.TypeString, Column: note.FieldCreatedBy},
			note.FieldUpdatedBy: {Type: field.TypeString, Column: note.FieldUpdatedBy},
			note.FieldMappingID: {Type: field.TypeString, Column: note.FieldMappingID},
			note.FieldDeletedAt: {Type: field.TypeTime, Column: note.FieldDeletedAt},
			note.FieldDeletedBy: {Type: field.TypeString, Column: note.FieldDeletedBy},
			note.FieldTags:      {Type: field.TypeJSON, Column: note.FieldTags},
			note.FieldOwnerID:   {Type: field.TypeString, Column: note.FieldOwnerID},
			note.FieldText:      {Type: field.TypeString, Column: note.FieldText},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notehistory.Table,
			Columns: notehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: notehistory.FieldID,
			},
		},
		Type: "NoteHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			notehistory.FieldHistoryTime: {Type: field.TypeTime, Column: notehistory.FieldHistoryTime},
			notehistory.FieldRef:         {Type: field.TypeString, Column: notehistory.FieldRef},
			notehistory.FieldOperation:   {Type: field.TypeEnum, Column: notehistory.FieldOperation},
			notehistory.FieldCreatedAt:   {Type: field.TypeTime, Column: notehistory.FieldCreatedAt},
			notehistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: notehistory.FieldUpdatedAt},
			notehistory.FieldCreatedBy:   {Type: field.TypeString, Column: notehistory.FieldCreatedBy},
			notehistory.FieldUpdatedBy:   {Type: field.TypeString, Column: notehistory.FieldUpdatedBy},
			notehistory.FieldMappingID:   {Type: field.TypeString, Column: notehistory.FieldMappingID},
			notehistory.FieldDeletedAt:   {Type: field.TypeTime, Column: notehistory.FieldDeletedAt},
			notehistory.FieldDeletedBy:   {Type: field.TypeString, Column: notehistory.FieldDeletedBy},
			notehistory.FieldTags:        {Type: field.TypeJSON, Column: notehistory.FieldTags},
			notehistory.FieldOwnerID:     {Type: field.TypeString, Column: notehistory.FieldOwnerID},
			notehistory.FieldText:        {Type: field.TypeString, Column: notehistory.FieldText},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthprovider.Table,
			Columns: oauthprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: oauthprovider.FieldID,
			},
		},
		Type: "OauthProvider",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthprovider.FieldCreatedAt:    {Type: field.TypeTime, Column: oauthprovider.FieldCreatedAt},
			oauthprovider.FieldUpdatedAt:    {Type: field.TypeTime, Column: oauthprovider.FieldUpdatedAt},
			oauthprovider.FieldCreatedBy:    {Type: field.TypeString, Column: oauthprovider.FieldCreatedBy},
			oauthprovider.FieldUpdatedBy:    {Type: field.TypeString, Column: oauthprovider.FieldUpdatedBy},
			oauthprovider.FieldMappingID:    {Type: field.TypeString, Column: oauthprovider.FieldMappingID},
			oauthprovider.FieldTags:         {Type: field.TypeJSON, Column: oauthprovider.FieldTags},
			oauthprovider.FieldDeletedAt:    {Type: field.TypeTime, Column: oauthprovider.FieldDeletedAt},
			oauthprovider.FieldDeletedBy:    {Type: field.TypeString, Column: oauthprovider.FieldDeletedBy},
			oauthprovider.FieldOwnerID:      {Type: field.TypeString, Column: oauthprovider.FieldOwnerID},
			oauthprovider.FieldName:         {Type: field.TypeString, Column: oauthprovider.FieldName},
			oauthprovider.FieldClientID:     {Type: field.TypeString, Column: oauthprovider.FieldClientID},
			oauthprovider.FieldClientSecret: {Type: field.TypeString, Column: oauthprovider.FieldClientSecret},
			oauthprovider.FieldRedirectURL:  {Type: field.TypeString, Column: oauthprovider.FieldRedirectURL},
			oauthprovider.FieldScopes:       {Type: field.TypeString, Column: oauthprovider.FieldScopes},
			oauthprovider.FieldAuthURL:      {Type: field.TypeString, Column: oauthprovider.FieldAuthURL},
			oauthprovider.FieldTokenURL:     {Type: field.TypeString, Column: oauthprovider.FieldTokenURL},
			oauthprovider.FieldAuthStyle:    {Type: field.TypeUint8, Column: oauthprovider.FieldAuthStyle},
			oauthprovider.FieldInfoURL:      {Type: field.TypeString, Column: oauthprovider.FieldInfoURL},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthproviderhistory.Table,
			Columns: oauthproviderhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: oauthproviderhistory.FieldID,
			},
		},
		Type: "OauthProviderHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthproviderhistory.FieldHistoryTime:  {Type: field.TypeTime, Column: oauthproviderhistory.FieldHistoryTime},
			oauthproviderhistory.FieldRef:          {Type: field.TypeString, Column: oauthproviderhistory.FieldRef},
			oauthproviderhistory.FieldOperation:    {Type: field.TypeEnum, Column: oauthproviderhistory.FieldOperation},
			oauthproviderhistory.FieldCreatedAt:    {Type: field.TypeTime, Column: oauthproviderhistory.FieldCreatedAt},
			oauthproviderhistory.FieldUpdatedAt:    {Type: field.TypeTime, Column: oauthproviderhistory.FieldUpdatedAt},
			oauthproviderhistory.FieldCreatedBy:    {Type: field.TypeString, Column: oauthproviderhistory.FieldCreatedBy},
			oauthproviderhistory.FieldUpdatedBy:    {Type: field.TypeString, Column: oauthproviderhistory.FieldUpdatedBy},
			oauthproviderhistory.FieldMappingID:    {Type: field.TypeString, Column: oauthproviderhistory.FieldMappingID},
			oauthproviderhistory.FieldTags:         {Type: field.TypeJSON, Column: oauthproviderhistory.FieldTags},
			oauthproviderhistory.FieldDeletedAt:    {Type: field.TypeTime, Column: oauthproviderhistory.FieldDeletedAt},
			oauthproviderhistory.FieldDeletedBy:    {Type: field.TypeString, Column: oauthproviderhistory.FieldDeletedBy},
			oauthproviderhistory.FieldOwnerID:      {Type: field.TypeString, Column: oauthproviderhistory.FieldOwnerID},
			oauthproviderhistory.FieldName:         {Type: field.TypeString, Column: oauthproviderhistory.FieldName},
			oauthproviderhistory.FieldClientID:     {Type: field.TypeString, Column: oauthproviderhistory.FieldClientID},
			oauthproviderhistory.FieldClientSecret: {Type: field.TypeString, Column: oauthproviderhistory.FieldClientSecret},
			oauthproviderhistory.FieldRedirectURL:  {Type: field.TypeString, Column: oauthproviderhistory.FieldRedirectURL},
			oauthproviderhistory.FieldScopes:       {Type: field.TypeString, Column: oauthproviderhistory.FieldScopes},
			oauthproviderhistory.FieldAuthURL:      {Type: field.TypeString, Column: oauthproviderhistory.FieldAuthURL},
			oauthproviderhistory.FieldTokenURL:     {Type: field.TypeString, Column: oauthproviderhistory.FieldTokenURL},
			oauthproviderhistory.FieldAuthStyle:    {Type: field.TypeUint8, Column: oauthproviderhistory.FieldAuthStyle},
			oauthproviderhistory.FieldInfoURL:      {Type: field.TypeString, Column: oauthproviderhistory.FieldInfoURL},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ohauthtootoken.Table,
			Columns: ohauthtootoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ohauthtootoken.FieldID,
			},
		},
		Type: "OhAuthTooToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			ohauthtootoken.FieldMappingID:               {Type: field.TypeString, Column: ohauthtootoken.FieldMappingID},
			ohauthtootoken.FieldTags:                    {Type: field.TypeJSON, Column: ohauthtootoken.FieldTags},
			ohauthtootoken.FieldClientID:                {Type: field.TypeString, Column: ohauthtootoken.FieldClientID},
			ohauthtootoken.FieldScopes:                  {Type: field.TypeJSON, Column: ohauthtootoken.FieldScopes},
			ohauthtootoken.FieldNonce:                   {Type: field.TypeString, Column: ohauthtootoken.FieldNonce},
			ohauthtootoken.FieldClaimsUserID:            {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsUserID},
			ohauthtootoken.FieldClaimsUsername:          {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsUsername},
			ohauthtootoken.FieldClaimsEmail:             {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsEmail},
			ohauthtootoken.FieldClaimsEmailVerified:     {Type: field.TypeBool, Column: ohauthtootoken.FieldClaimsEmailVerified},
			ohauthtootoken.FieldClaimsGroups:            {Type: field.TypeJSON, Column: ohauthtootoken.FieldClaimsGroups},
			ohauthtootoken.FieldClaimsPreferredUsername: {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsPreferredUsername},
			ohauthtootoken.FieldConnectorID:             {Type: field.TypeString, Column: ohauthtootoken.FieldConnectorID},
			ohauthtootoken.FieldConnectorData:           {Type: field.TypeJSON, Column: ohauthtootoken.FieldConnectorData},
			ohauthtootoken.FieldLastUsed:                {Type: field.TypeTime, Column: ohauthtootoken.FieldLastUsed},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgmembership.Table,
			Columns: orgmembership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgmembership.FieldID,
			},
		},
		Type: "OrgMembership",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgmembership.FieldCreatedAt:      {Type: field.TypeTime, Column: orgmembership.FieldCreatedAt},
			orgmembership.FieldUpdatedAt:      {Type: field.TypeTime, Column: orgmembership.FieldUpdatedAt},
			orgmembership.FieldCreatedBy:      {Type: field.TypeString, Column: orgmembership.FieldCreatedBy},
			orgmembership.FieldUpdatedBy:      {Type: field.TypeString, Column: orgmembership.FieldUpdatedBy},
			orgmembership.FieldMappingID:      {Type: field.TypeString, Column: orgmembership.FieldMappingID},
			orgmembership.FieldDeletedAt:      {Type: field.TypeTime, Column: orgmembership.FieldDeletedAt},
			orgmembership.FieldDeletedBy:      {Type: field.TypeString, Column: orgmembership.FieldDeletedBy},
			orgmembership.FieldRole:           {Type: field.TypeEnum, Column: orgmembership.FieldRole},
			orgmembership.FieldOrganizationID: {Type: field.TypeString, Column: orgmembership.FieldOrganizationID},
			orgmembership.FieldUserID:         {Type: field.TypeString, Column: orgmembership.FieldUserID},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgmembershiphistory.Table,
			Columns: orgmembershiphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgmembershiphistory.FieldID,
			},
		},
		Type: "OrgMembershipHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgmembershiphistory.FieldHistoryTime:    {Type: field.TypeTime, Column: orgmembershiphistory.FieldHistoryTime},
			orgmembershiphistory.FieldRef:            {Type: field.TypeString, Column: orgmembershiphistory.FieldRef},
			orgmembershiphistory.FieldOperation:      {Type: field.TypeEnum, Column: orgmembershiphistory.FieldOperation},
			orgmembershiphistory.FieldCreatedAt:      {Type: field.TypeTime, Column: orgmembershiphistory.FieldCreatedAt},
			orgmembershiphistory.FieldUpdatedAt:      {Type: field.TypeTime, Column: orgmembershiphistory.FieldUpdatedAt},
			orgmembershiphistory.FieldCreatedBy:      {Type: field.TypeString, Column: orgmembershiphistory.FieldCreatedBy},
			orgmembershiphistory.FieldUpdatedBy:      {Type: field.TypeString, Column: orgmembershiphistory.FieldUpdatedBy},
			orgmembershiphistory.FieldMappingID:      {Type: field.TypeString, Column: orgmembershiphistory.FieldMappingID},
			orgmembershiphistory.FieldDeletedAt:      {Type: field.TypeTime, Column: orgmembershiphistory.FieldDeletedAt},
			orgmembershiphistory.FieldDeletedBy:      {Type: field.TypeString, Column: orgmembershiphistory.FieldDeletedBy},
			orgmembershiphistory.FieldRole:           {Type: field.TypeEnum, Column: orgmembershiphistory.FieldRole},
			orgmembershiphistory.FieldOrganizationID: {Type: field.TypeString, Column: orgmembershiphistory.FieldOrganizationID},
			orgmembershiphistory.FieldUserID:         {Type: field.TypeString, Column: orgmembershiphistory.FieldUserID},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt:            {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:            {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldCreatedBy:            {Type: field.TypeString, Column: organization.FieldCreatedBy},
			organization.FieldUpdatedBy:            {Type: field.TypeString, Column: organization.FieldUpdatedBy},
			organization.FieldMappingID:            {Type: field.TypeString, Column: organization.FieldMappingID},
			organization.FieldTags:                 {Type: field.TypeJSON, Column: organization.FieldTags},
			organization.FieldDeletedAt:            {Type: field.TypeTime, Column: organization.FieldDeletedAt},
			organization.FieldDeletedBy:            {Type: field.TypeString, Column: organization.FieldDeletedBy},
			organization.FieldName:                 {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldDisplayName:          {Type: field.TypeString, Column: organization.FieldDisplayName},
			organization.FieldDescription:          {Type: field.TypeString, Column: organization.FieldDescription},
			organization.FieldParentOrganizationID: {Type: field.TypeString, Column: organization.FieldParentOrganizationID},
			organization.FieldPersonalOrg:          {Type: field.TypeBool, Column: organization.FieldPersonalOrg},
			organization.FieldAvatarRemoteURL:      {Type: field.TypeString, Column: organization.FieldAvatarRemoteURL},
			organization.FieldDedicatedDb:          {Type: field.TypeBool, Column: organization.FieldDedicatedDb},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationhistory.Table,
			Columns: organizationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationhistory.FieldID,
			},
		},
		Type: "OrganizationHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationhistory.FieldHistoryTime:          {Type: field.TypeTime, Column: organizationhistory.FieldHistoryTime},
			organizationhistory.FieldRef:                  {Type: field.TypeString, Column: organizationhistory.FieldRef},
			organizationhistory.FieldOperation:            {Type: field.TypeEnum, Column: organizationhistory.FieldOperation},
			organizationhistory.FieldCreatedAt:            {Type: field.TypeTime, Column: organizationhistory.FieldCreatedAt},
			organizationhistory.FieldUpdatedAt:            {Type: field.TypeTime, Column: organizationhistory.FieldUpdatedAt},
			organizationhistory.FieldCreatedBy:            {Type: field.TypeString, Column: organizationhistory.FieldCreatedBy},
			organizationhistory.FieldUpdatedBy:            {Type: field.TypeString, Column: organizationhistory.FieldUpdatedBy},
			organizationhistory.FieldMappingID:            {Type: field.TypeString, Column: organizationhistory.FieldMappingID},
			organizationhistory.FieldTags:                 {Type: field.TypeJSON, Column: organizationhistory.FieldTags},
			organizationhistory.FieldDeletedAt:            {Type: field.TypeTime, Column: organizationhistory.FieldDeletedAt},
			organizationhistory.FieldDeletedBy:            {Type: field.TypeString, Column: organizationhistory.FieldDeletedBy},
			organizationhistory.FieldName:                 {Type: field.TypeString, Column: organizationhistory.FieldName},
			organizationhistory.FieldDisplayName:          {Type: field.TypeString, Column: organizationhistory.FieldDisplayName},
			organizationhistory.FieldDescription:          {Type: field.TypeString, Column: organizationhistory.FieldDescription},
			organizationhistory.FieldParentOrganizationID: {Type: field.TypeString, Column: organizationhistory.FieldParentOrganizationID},
			organizationhistory.FieldPersonalOrg:          {Type: field.TypeBool, Column: organizationhistory.FieldPersonalOrg},
			organizationhistory.FieldAvatarRemoteURL:      {Type: field.TypeString, Column: organizationhistory.FieldAvatarRemoteURL},
			organizationhistory.FieldDedicatedDb:          {Type: field.TypeBool, Column: organizationhistory.FieldDedicatedDb},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationsetting.Table,
			Columns: organizationsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationsetting.FieldID,
			},
		},
		Type: "OrganizationSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationsetting.FieldCreatedAt:      {Type: field.TypeTime, Column: organizationsetting.FieldCreatedAt},
			organizationsetting.FieldUpdatedAt:      {Type: field.TypeTime, Column: organizationsetting.FieldUpdatedAt},
			organizationsetting.FieldCreatedBy:      {Type: field.TypeString, Column: organizationsetting.FieldCreatedBy},
			organizationsetting.FieldUpdatedBy:      {Type: field.TypeString, Column: organizationsetting.FieldUpdatedBy},
			organizationsetting.FieldMappingID:      {Type: field.TypeString, Column: organizationsetting.FieldMappingID},
			organizationsetting.FieldTags:           {Type: field.TypeJSON, Column: organizationsetting.FieldTags},
			organizationsetting.FieldDeletedAt:      {Type: field.TypeTime, Column: organizationsetting.FieldDeletedAt},
			organizationsetting.FieldDeletedBy:      {Type: field.TypeString, Column: organizationsetting.FieldDeletedBy},
			organizationsetting.FieldDomains:        {Type: field.TypeJSON, Column: organizationsetting.FieldDomains},
			organizationsetting.FieldBillingContact: {Type: field.TypeString, Column: organizationsetting.FieldBillingContact},
			organizationsetting.FieldBillingEmail:   {Type: field.TypeString, Column: organizationsetting.FieldBillingEmail},
			organizationsetting.FieldBillingPhone:   {Type: field.TypeString, Column: organizationsetting.FieldBillingPhone},
			organizationsetting.FieldBillingAddress: {Type: field.TypeString, Column: organizationsetting.FieldBillingAddress},
			organizationsetting.FieldTaxIdentifier:  {Type: field.TypeString, Column: organizationsetting.FieldTaxIdentifier},
			organizationsetting.FieldGeoLocation:    {Type: field.TypeEnum, Column: organizationsetting.FieldGeoLocation},
			organizationsetting.FieldOrganizationID: {Type: field.TypeString, Column: organizationsetting.FieldOrganizationID},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationsettinghistory.Table,
			Columns: organizationsettinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationsettinghistory.FieldID,
			},
		},
		Type: "OrganizationSettingHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationsettinghistory.FieldHistoryTime:    {Type: field.TypeTime, Column: organizationsettinghistory.FieldHistoryTime},
			organizationsettinghistory.FieldRef:            {Type: field.TypeString, Column: organizationsettinghistory.FieldRef},
			organizationsettinghistory.FieldOperation:      {Type: field.TypeEnum, Column: organizationsettinghistory.FieldOperation},
			organizationsettinghistory.FieldCreatedAt:      {Type: field.TypeTime, Column: organizationsettinghistory.FieldCreatedAt},
			organizationsettinghistory.FieldUpdatedAt:      {Type: field.TypeTime, Column: organizationsettinghistory.FieldUpdatedAt},
			organizationsettinghistory.FieldCreatedBy:      {Type: field.TypeString, Column: organizationsettinghistory.FieldCreatedBy},
			organizationsettinghistory.FieldUpdatedBy:      {Type: field.TypeString, Column: organizationsettinghistory.FieldUpdatedBy},
			organizationsettinghistory.FieldMappingID:      {Type: field.TypeString, Column: organizationsettinghistory.FieldMappingID},
			organizationsettinghistory.FieldTags:           {Type: field.TypeJSON, Column: organizationsettinghistory.FieldTags},
			organizationsettinghistory.FieldDeletedAt:      {Type: field.TypeTime, Column: organizationsettinghistory.FieldDeletedAt},
			organizationsettinghistory.FieldDeletedBy:      {Type: field.TypeString, Column: organizationsettinghistory.FieldDeletedBy},
			organizationsettinghistory.FieldDomains:        {Type: field.TypeJSON, Column: organizationsettinghistory.FieldDomains},
			organizationsettinghistory.FieldBillingContact: {Type: field.TypeString, Column: organizationsettinghistory.FieldBillingContact},
			organizationsettinghistory.FieldBillingEmail:   {Type: field.TypeString, Column: organizationsettinghistory.FieldBillingEmail},
			organizationsettinghistory.FieldBillingPhone:   {Type: field.TypeString, Column: organizationsettinghistory.FieldBillingPhone},
			organizationsettinghistory.FieldBillingAddress: {Type: field.TypeString, Column: organizationsettinghistory.FieldBillingAddress},
			organizationsettinghistory.FieldTaxIdentifier:  {Type: field.TypeString, Column: organizationsettinghistory.FieldTaxIdentifier},
			organizationsettinghistory.FieldGeoLocation:    {Type: field.TypeEnum, Column: organizationsettinghistory.FieldGeoLocation},
			organizationsettinghistory.FieldOrganizationID: {Type: field.TypeString, Column: organizationsettinghistory.FieldOrganizationID},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   passwordresettoken.Table,
			Columns: passwordresettoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: passwordresettoken.FieldID,
			},
		},
		Type: "PasswordResetToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			passwordresettoken.FieldCreatedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldCreatedAt},
			passwordresettoken.FieldUpdatedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldUpdatedAt},
			passwordresettoken.FieldCreatedBy: {Type: field.TypeString, Column: passwordresettoken.FieldCreatedBy},
			passwordresettoken.FieldUpdatedBy: {Type: field.TypeString, Column: passwordresettoken.FieldUpdatedBy},
			passwordresettoken.FieldMappingID: {Type: field.TypeString, Column: passwordresettoken.FieldMappingID},
			passwordresettoken.FieldDeletedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldDeletedAt},
			passwordresettoken.FieldDeletedBy: {Type: field.TypeString, Column: passwordresettoken.FieldDeletedBy},
			passwordresettoken.FieldOwnerID:   {Type: field.TypeString, Column: passwordresettoken.FieldOwnerID},
			passwordresettoken.FieldToken:     {Type: field.TypeString, Column: passwordresettoken.FieldToken},
			passwordresettoken.FieldTTL:       {Type: field.TypeTime, Column: passwordresettoken.FieldTTL},
			passwordresettoken.FieldEmail:     {Type: field.TypeString, Column: passwordresettoken.FieldEmail},
			passwordresettoken.FieldSecret:    {Type: field.TypeBytes, Column: passwordresettoken.FieldSecret},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   personalaccesstoken.Table,
			Columns: personalaccesstoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: personalaccesstoken.FieldID,
			},
		},
		Type: "PersonalAccessToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			personalaccesstoken.FieldCreatedAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldCreatedAt},
			personalaccesstoken.FieldUpdatedAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldUpdatedAt},
			personalaccesstoken.FieldCreatedBy:   {Type: field.TypeString, Column: personalaccesstoken.FieldCreatedBy},
			personalaccesstoken.FieldUpdatedBy:   {Type: field.TypeString, Column: personalaccesstoken.FieldUpdatedBy},
			personalaccesstoken.FieldDeletedAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldDeletedAt},
			personalaccesstoken.FieldDeletedBy:   {Type: field.TypeString, Column: personalaccesstoken.FieldDeletedBy},
			personalaccesstoken.FieldMappingID:   {Type: field.TypeString, Column: personalaccesstoken.FieldMappingID},
			personalaccesstoken.FieldTags:        {Type: field.TypeJSON, Column: personalaccesstoken.FieldTags},
			personalaccesstoken.FieldOwnerID:     {Type: field.TypeString, Column: personalaccesstoken.FieldOwnerID},
			personalaccesstoken.FieldName:        {Type: field.TypeString, Column: personalaccesstoken.FieldName},
			personalaccesstoken.FieldToken:       {Type: field.TypeString, Column: personalaccesstoken.FieldToken},
			personalaccesstoken.FieldExpiresAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldExpiresAt},
			personalaccesstoken.FieldDescription: {Type: field.TypeString, Column: personalaccesstoken.FieldDescription},
			personalaccesstoken.FieldScopes:      {Type: field.TypeJSON, Column: personalaccesstoken.FieldScopes},
			personalaccesstoken.FieldLastUsedAt:  {Type: field.TypeTime, Column: personalaccesstoken.FieldLastUsedAt},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscriber.Table,
			Columns: subscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: subscriber.FieldID,
			},
		},
		Type: "Subscriber",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscriber.FieldCreatedAt:     {Type: field.TypeTime, Column: subscriber.FieldCreatedAt},
			subscriber.FieldUpdatedAt:     {Type: field.TypeTime, Column: subscriber.FieldUpdatedAt},
			subscriber.FieldCreatedBy:     {Type: field.TypeString, Column: subscriber.FieldCreatedBy},
			subscriber.FieldUpdatedBy:     {Type: field.TypeString, Column: subscriber.FieldUpdatedBy},
			subscriber.FieldMappingID:     {Type: field.TypeString, Column: subscriber.FieldMappingID},
			subscriber.FieldTags:          {Type: field.TypeJSON, Column: subscriber.FieldTags},
			subscriber.FieldDeletedAt:     {Type: field.TypeTime, Column: subscriber.FieldDeletedAt},
			subscriber.FieldDeletedBy:     {Type: field.TypeString, Column: subscriber.FieldDeletedBy},
			subscriber.FieldOwnerID:       {Type: field.TypeString, Column: subscriber.FieldOwnerID},
			subscriber.FieldEmail:         {Type: field.TypeString, Column: subscriber.FieldEmail},
			subscriber.FieldPhoneNumber:   {Type: field.TypeString, Column: subscriber.FieldPhoneNumber},
			subscriber.FieldVerifiedEmail: {Type: field.TypeBool, Column: subscriber.FieldVerifiedEmail},
			subscriber.FieldVerifiedPhone: {Type: field.TypeBool, Column: subscriber.FieldVerifiedPhone},
			subscriber.FieldActive:        {Type: field.TypeBool, Column: subscriber.FieldActive},
			subscriber.FieldToken:         {Type: field.TypeString, Column: subscriber.FieldToken},
			subscriber.FieldTTL:           {Type: field.TypeTime, Column: subscriber.FieldTTL},
			subscriber.FieldSecret:        {Type: field.TypeBytes, Column: subscriber.FieldSecret},
		},
	}
	graph.Nodes[47] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tfasetting.Table,
			Columns: tfasetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tfasetting.FieldID,
			},
		},
		Type: "TFASetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			tfasetting.FieldCreatedAt:       {Type: field.TypeTime, Column: tfasetting.FieldCreatedAt},
			tfasetting.FieldUpdatedAt:       {Type: field.TypeTime, Column: tfasetting.FieldUpdatedAt},
			tfasetting.FieldCreatedBy:       {Type: field.TypeString, Column: tfasetting.FieldCreatedBy},
			tfasetting.FieldUpdatedBy:       {Type: field.TypeString, Column: tfasetting.FieldUpdatedBy},
			tfasetting.FieldMappingID:       {Type: field.TypeString, Column: tfasetting.FieldMappingID},
			tfasetting.FieldDeletedAt:       {Type: field.TypeTime, Column: tfasetting.FieldDeletedAt},
			tfasetting.FieldDeletedBy:       {Type: field.TypeString, Column: tfasetting.FieldDeletedBy},
			tfasetting.FieldTags:            {Type: field.TypeJSON, Column: tfasetting.FieldTags},
			tfasetting.FieldOwnerID:         {Type: field.TypeString, Column: tfasetting.FieldOwnerID},
			tfasetting.FieldTfaSecret:       {Type: field.TypeString, Column: tfasetting.FieldTfaSecret},
			tfasetting.FieldVerified:        {Type: field.TypeBool, Column: tfasetting.FieldVerified},
			tfasetting.FieldRecoveryCodes:   {Type: field.TypeJSON, Column: tfasetting.FieldRecoveryCodes},
			tfasetting.FieldPhoneOtpAllowed: {Type: field.TypeBool, Column: tfasetting.FieldPhoneOtpAllowed},
			tfasetting.FieldEmailOtpAllowed: {Type: field.TypeBool, Column: tfasetting.FieldEmailOtpAllowed},
			tfasetting.FieldTotpAllowed:     {Type: field.TypeBool, Column: tfasetting.FieldTotpAllowed},
		},
	}
	graph.Nodes[48] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   template.Table,
			Columns: template.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: template.FieldID,
			},
		},
		Type: "Template",
		Fields: map[string]*sqlgraph.FieldSpec{
			template.FieldCreatedAt:    {Type: field.TypeTime, Column: template.FieldCreatedAt},
			template.FieldUpdatedAt:    {Type: field.TypeTime, Column: template.FieldUpdatedAt},
			template.FieldCreatedBy:    {Type: field.TypeString, Column: template.FieldCreatedBy},
			template.FieldUpdatedBy:    {Type: field.TypeString, Column: template.FieldUpdatedBy},
			template.FieldDeletedAt:    {Type: field.TypeTime, Column: template.FieldDeletedAt},
			template.FieldDeletedBy:    {Type: field.TypeString, Column: template.FieldDeletedBy},
			template.FieldMappingID:    {Type: field.TypeString, Column: template.FieldMappingID},
			template.FieldTags:         {Type: field.TypeJSON, Column: template.FieldTags},
			template.FieldOwnerID:      {Type: field.TypeString, Column: template.FieldOwnerID},
			template.FieldName:         {Type: field.TypeString, Column: template.FieldName},
			template.FieldTemplateType: {Type: field.TypeEnum, Column: template.FieldTemplateType},
			template.FieldDescription:  {Type: field.TypeString, Column: template.FieldDescription},
			template.FieldJsonconfig:   {Type: field.TypeJSON, Column: template.FieldJsonconfig},
			template.FieldUischema:     {Type: field.TypeJSON, Column: template.FieldUischema},
		},
	}
	graph.Nodes[49] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   templatehistory.Table,
			Columns: templatehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: templatehistory.FieldID,
			},
		},
		Type: "TemplateHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			templatehistory.FieldHistoryTime:  {Type: field.TypeTime, Column: templatehistory.FieldHistoryTime},
			templatehistory.FieldRef:          {Type: field.TypeString, Column: templatehistory.FieldRef},
			templatehistory.FieldOperation:    {Type: field.TypeEnum, Column: templatehistory.FieldOperation},
			templatehistory.FieldCreatedAt:    {Type: field.TypeTime, Column: templatehistory.FieldCreatedAt},
			templatehistory.FieldUpdatedAt:    {Type: field.TypeTime, Column: templatehistory.FieldUpdatedAt},
			templatehistory.FieldCreatedBy:    {Type: field.TypeString, Column: templatehistory.FieldCreatedBy},
			templatehistory.FieldUpdatedBy:    {Type: field.TypeString, Column: templatehistory.FieldUpdatedBy},
			templatehistory.FieldDeletedAt:    {Type: field.TypeTime, Column: templatehistory.FieldDeletedAt},
			templatehistory.FieldDeletedBy:    {Type: field.TypeString, Column: templatehistory.FieldDeletedBy},
			templatehistory.FieldMappingID:    {Type: field.TypeString, Column: templatehistory.FieldMappingID},
			templatehistory.FieldTags:         {Type: field.TypeJSON, Column: templatehistory.FieldTags},
			templatehistory.FieldOwnerID:      {Type: field.TypeString, Column: templatehistory.FieldOwnerID},
			templatehistory.FieldName:         {Type: field.TypeString, Column: templatehistory.FieldName},
			templatehistory.FieldTemplateType: {Type: field.TypeEnum, Column: templatehistory.FieldTemplateType},
			templatehistory.FieldDescription:  {Type: field.TypeString, Column: templatehistory.FieldDescription},
			templatehistory.FieldJsonconfig:   {Type: field.TypeJSON, Column: templatehistory.FieldJsonconfig},
			templatehistory.FieldUischema:     {Type: field.TypeJSON, Column: templatehistory.FieldUischema},
		},
	}
	graph.Nodes[50] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:         {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:         {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldCreatedBy:         {Type: field.TypeString, Column: user.FieldCreatedBy},
			user.FieldUpdatedBy:         {Type: field.TypeString, Column: user.FieldUpdatedBy},
			user.FieldDeletedAt:         {Type: field.TypeTime, Column: user.FieldDeletedAt},
			user.FieldDeletedBy:         {Type: field.TypeString, Column: user.FieldDeletedBy},
			user.FieldMappingID:         {Type: field.TypeString, Column: user.FieldMappingID},
			user.FieldTags:              {Type: field.TypeJSON, Column: user.FieldTags},
			user.FieldEmail:             {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldFirstName:         {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:          {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldDisplayName:       {Type: field.TypeString, Column: user.FieldDisplayName},
			user.FieldAvatarRemoteURL:   {Type: field.TypeString, Column: user.FieldAvatarRemoteURL},
			user.FieldAvatarLocalFile:   {Type: field.TypeString, Column: user.FieldAvatarLocalFile},
			user.FieldAvatarLocalFileID: {Type: field.TypeString, Column: user.FieldAvatarLocalFileID},
			user.FieldAvatarUpdatedAt:   {Type: field.TypeTime, Column: user.FieldAvatarUpdatedAt},
			user.FieldLastSeen:          {Type: field.TypeTime, Column: user.FieldLastSeen},
			user.FieldPassword:          {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldSub:               {Type: field.TypeString, Column: user.FieldSub},
			user.FieldAuthProvider:      {Type: field.TypeEnum, Column: user.FieldAuthProvider},
			user.FieldRole:              {Type: field.TypeEnum, Column: user.FieldRole},
		},
	}
	graph.Nodes[51] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userhistory.Table,
			Columns: userhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: userhistory.FieldID,
			},
		},
		Type: "UserHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			userhistory.FieldHistoryTime:       {Type: field.TypeTime, Column: userhistory.FieldHistoryTime},
			userhistory.FieldRef:               {Type: field.TypeString, Column: userhistory.FieldRef},
			userhistory.FieldOperation:         {Type: field.TypeEnum, Column: userhistory.FieldOperation},
			userhistory.FieldCreatedAt:         {Type: field.TypeTime, Column: userhistory.FieldCreatedAt},
			userhistory.FieldUpdatedAt:         {Type: field.TypeTime, Column: userhistory.FieldUpdatedAt},
			userhistory.FieldCreatedBy:         {Type: field.TypeString, Column: userhistory.FieldCreatedBy},
			userhistory.FieldUpdatedBy:         {Type: field.TypeString, Column: userhistory.FieldUpdatedBy},
			userhistory.FieldDeletedAt:         {Type: field.TypeTime, Column: userhistory.FieldDeletedAt},
			userhistory.FieldDeletedBy:         {Type: field.TypeString, Column: userhistory.FieldDeletedBy},
			userhistory.FieldMappingID:         {Type: field.TypeString, Column: userhistory.FieldMappingID},
			userhistory.FieldTags:              {Type: field.TypeJSON, Column: userhistory.FieldTags},
			userhistory.FieldEmail:             {Type: field.TypeString, Column: userhistory.FieldEmail},
			userhistory.FieldFirstName:         {Type: field.TypeString, Column: userhistory.FieldFirstName},
			userhistory.FieldLastName:          {Type: field.TypeString, Column: userhistory.FieldLastName},
			userhistory.FieldDisplayName:       {Type: field.TypeString, Column: userhistory.FieldDisplayName},
			userhistory.FieldAvatarRemoteURL:   {Type: field.TypeString, Column: userhistory.FieldAvatarRemoteURL},
			userhistory.FieldAvatarLocalFile:   {Type: field.TypeString, Column: userhistory.FieldAvatarLocalFile},
			userhistory.FieldAvatarLocalFileID: {Type: field.TypeString, Column: userhistory.FieldAvatarLocalFileID},
			userhistory.FieldAvatarUpdatedAt:   {Type: field.TypeTime, Column: userhistory.FieldAvatarUpdatedAt},
			userhistory.FieldLastSeen:          {Type: field.TypeTime, Column: userhistory.FieldLastSeen},
			userhistory.FieldPassword:          {Type: field.TypeString, Column: userhistory.FieldPassword},
			userhistory.FieldSub:               {Type: field.TypeString, Column: userhistory.FieldSub},
			userhistory.FieldAuthProvider:      {Type: field.TypeEnum, Column: userhistory.FieldAuthProvider},
			userhistory.FieldRole:              {Type: field.TypeEnum, Column: userhistory.FieldRole},
		},
	}
	graph.Nodes[52] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usersetting.Table,
			Columns: usersetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: usersetting.FieldID,
			},
		},
		Type: "UserSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			usersetting.FieldCreatedAt:         {Type: field.TypeTime, Column: usersetting.FieldCreatedAt},
			usersetting.FieldUpdatedAt:         {Type: field.TypeTime, Column: usersetting.FieldUpdatedAt},
			usersetting.FieldCreatedBy:         {Type: field.TypeString, Column: usersetting.FieldCreatedBy},
			usersetting.FieldUpdatedBy:         {Type: field.TypeString, Column: usersetting.FieldUpdatedBy},
			usersetting.FieldMappingID:         {Type: field.TypeString, Column: usersetting.FieldMappingID},
			usersetting.FieldTags:              {Type: field.TypeJSON, Column: usersetting.FieldTags},
			usersetting.FieldDeletedAt:         {Type: field.TypeTime, Column: usersetting.FieldDeletedAt},
			usersetting.FieldDeletedBy:         {Type: field.TypeString, Column: usersetting.FieldDeletedBy},
			usersetting.FieldUserID:            {Type: field.TypeString, Column: usersetting.FieldUserID},
			usersetting.FieldLocked:            {Type: field.TypeBool, Column: usersetting.FieldLocked},
			usersetting.FieldSilencedAt:        {Type: field.TypeTime, Column: usersetting.FieldSilencedAt},
			usersetting.FieldSuspendedAt:       {Type: field.TypeTime, Column: usersetting.FieldSuspendedAt},
			usersetting.FieldStatus:            {Type: field.TypeEnum, Column: usersetting.FieldStatus},
			usersetting.FieldEmailConfirmed:    {Type: field.TypeBool, Column: usersetting.FieldEmailConfirmed},
			usersetting.FieldIsWebauthnAllowed: {Type: field.TypeBool, Column: usersetting.FieldIsWebauthnAllowed},
			usersetting.FieldIsTfaEnabled:      {Type: field.TypeBool, Column: usersetting.FieldIsTfaEnabled},
			usersetting.FieldPhoneNumber:       {Type: field.TypeString, Column: usersetting.FieldPhoneNumber},
		},
	}
	graph.Nodes[53] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usersettinghistory.Table,
			Columns: usersettinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: usersettinghistory.FieldID,
			},
		},
		Type: "UserSettingHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			usersettinghistory.FieldHistoryTime:       {Type: field.TypeTime, Column: usersettinghistory.FieldHistoryTime},
			usersettinghistory.FieldRef:               {Type: field.TypeString, Column: usersettinghistory.FieldRef},
			usersettinghistory.FieldOperation:         {Type: field.TypeEnum, Column: usersettinghistory.FieldOperation},
			usersettinghistory.FieldCreatedAt:         {Type: field.TypeTime, Column: usersettinghistory.FieldCreatedAt},
			usersettinghistory.FieldUpdatedAt:         {Type: field.TypeTime, Column: usersettinghistory.FieldUpdatedAt},
			usersettinghistory.FieldCreatedBy:         {Type: field.TypeString, Column: usersettinghistory.FieldCreatedBy},
			usersettinghistory.FieldUpdatedBy:         {Type: field.TypeString, Column: usersettinghistory.FieldUpdatedBy},
			usersettinghistory.FieldMappingID:         {Type: field.TypeString, Column: usersettinghistory.FieldMappingID},
			usersettinghistory.FieldTags:              {Type: field.TypeJSON, Column: usersettinghistory.FieldTags},
			usersettinghistory.FieldDeletedAt:         {Type: field.TypeTime, Column: usersettinghistory.FieldDeletedAt},
			usersettinghistory.FieldDeletedBy:         {Type: field.TypeString, Column: usersettinghistory.FieldDeletedBy},
			usersettinghistory.FieldUserID:            {Type: field.TypeString, Column: usersettinghistory.FieldUserID},
			usersettinghistory.FieldLocked:            {Type: field.TypeBool, Column: usersettinghistory.FieldLocked},
			usersettinghistory.FieldSilencedAt:        {Type: field.TypeTime, Column: usersettinghistory.FieldSilencedAt},
			usersettinghistory.FieldSuspendedAt:       {Type: field.TypeTime, Column: usersettinghistory.FieldSuspendedAt},
			usersettinghistory.FieldStatus:            {Type: field.TypeEnum, Column: usersettinghistory.FieldStatus},
			usersettinghistory.FieldEmailConfirmed:    {Type: field.TypeBool, Column: usersettinghistory.FieldEmailConfirmed},
			usersettinghistory.FieldIsWebauthnAllowed: {Type: field.TypeBool, Column: usersettinghistory.FieldIsWebauthnAllowed},
			usersettinghistory.FieldIsTfaEnabled:      {Type: field.TypeBool, Column: usersettinghistory.FieldIsTfaEnabled},
			usersettinghistory.FieldPhoneNumber:       {Type: field.TypeString, Column: usersettinghistory.FieldPhoneNumber},
		},
	}
	graph.Nodes[54] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   webauthn.Table,
			Columns: webauthn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webauthn.FieldID,
			},
		},
		Type: "Webauthn",
		Fields: map[string]*sqlgraph.FieldSpec{
			webauthn.FieldCreatedAt:       {Type: field.TypeTime, Column: webauthn.FieldCreatedAt},
			webauthn.FieldUpdatedAt:       {Type: field.TypeTime, Column: webauthn.FieldUpdatedAt},
			webauthn.FieldCreatedBy:       {Type: field.TypeString, Column: webauthn.FieldCreatedBy},
			webauthn.FieldUpdatedBy:       {Type: field.TypeString, Column: webauthn.FieldUpdatedBy},
			webauthn.FieldMappingID:       {Type: field.TypeString, Column: webauthn.FieldMappingID},
			webauthn.FieldTags:            {Type: field.TypeJSON, Column: webauthn.FieldTags},
			webauthn.FieldOwnerID:         {Type: field.TypeString, Column: webauthn.FieldOwnerID},
			webauthn.FieldCredentialID:    {Type: field.TypeBytes, Column: webauthn.FieldCredentialID},
			webauthn.FieldPublicKey:       {Type: field.TypeBytes, Column: webauthn.FieldPublicKey},
			webauthn.FieldAttestationType: {Type: field.TypeString, Column: webauthn.FieldAttestationType},
			webauthn.FieldAaguid:          {Type: field.TypeBytes, Column: webauthn.FieldAaguid},
			webauthn.FieldSignCount:       {Type: field.TypeInt32, Column: webauthn.FieldSignCount},
			webauthn.FieldTransports:      {Type: field.TypeJSON, Column: webauthn.FieldTransports},
			webauthn.FieldBackupEligible:  {Type: field.TypeBool, Column: webauthn.FieldBackupEligible},
			webauthn.FieldBackupState:     {Type: field.TypeBool, Column: webauthn.FieldBackupState},
			webauthn.FieldUserPresent:     {Type: field.TypeBool, Column: webauthn.FieldUserPresent},
			webauthn.FieldUserVerified:    {Type: field.TypeBool, Column: webauthn.FieldUserVerified},
		},
	}
	graph.Nodes[55] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   webhook.Table,
			Columns: webhook.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webhook.FieldID,
			},
		},
		Type: "Webhook",
		Fields: map[string]*sqlgraph.FieldSpec{
			webhook.FieldCreatedAt:      {Type: field.TypeTime, Column: webhook.FieldCreatedAt},
			webhook.FieldUpdatedAt:      {Type: field.TypeTime, Column: webhook.FieldUpdatedAt},
			webhook.FieldCreatedBy:      {Type: field.TypeString, Column: webhook.FieldCreatedBy},
			webhook.FieldUpdatedBy:      {Type: field.TypeString, Column: webhook.FieldUpdatedBy},
			webhook.FieldMappingID:      {Type: field.TypeString, Column: webhook.FieldMappingID},
			webhook.FieldTags:           {Type: field.TypeJSON, Column: webhook.FieldTags},
			webhook.FieldDeletedAt:      {Type: field.TypeTime, Column: webhook.FieldDeletedAt},
			webhook.FieldDeletedBy:      {Type: field.TypeString, Column: webhook.FieldDeletedBy},
			webhook.FieldOwnerID:        {Type: field.TypeString, Column: webhook.FieldOwnerID},
			webhook.FieldName:           {Type: field.TypeString, Column: webhook.FieldName},
			webhook.FieldDescription:    {Type: field.TypeString, Column: webhook.FieldDescription},
			webhook.FieldDestinationURL: {Type: field.TypeString, Column: webhook.FieldDestinationURL},
			webhook.FieldEnabled:        {Type: field.TypeBool, Column: webhook.FieldEnabled},
			webhook.FieldCallback:       {Type: field.TypeString, Column: webhook.FieldCallback},
			webhook.FieldExpiresAt:      {Type: field.TypeTime, Column: webhook.FieldExpiresAt},
			webhook.FieldSecret:         {Type: field.TypeBytes, Column: webhook.FieldSecret},
			webhook.FieldFailures:       {Type: field.TypeInt, Column: webhook.FieldFailures},
			webhook.FieldLastError:      {Type: field.TypeString, Column: webhook.FieldLastError},
			webhook.FieldLastResponse:   {Type: field.TypeString, Column: webhook.FieldLastResponse},
		},
	}
	graph.Nodes[56] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   webhookhistory.Table,
			Columns: webhookhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webhookhistory.FieldID,
			},
		},
		Type: "WebhookHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			webhookhistory.FieldHistoryTime:    {Type: field.TypeTime, Column: webhookhistory.FieldHistoryTime},
			webhookhistory.FieldRef:            {Type: field.TypeString, Column: webhookhistory.FieldRef},
			webhookhistory.FieldOperation:      {Type: field.TypeEnum, Column: webhookhistory.FieldOperation},
			webhookhistory.FieldCreatedAt:      {Type: field.TypeTime, Column: webhookhistory.FieldCreatedAt},
			webhookhistory.FieldUpdatedAt:      {Type: field.TypeTime, Column: webhookhistory.FieldUpdatedAt},
			webhookhistory.FieldCreatedBy:      {Type: field.TypeString, Column: webhookhistory.FieldCreatedBy},
			webhookhistory.FieldUpdatedBy:      {Type: field.TypeString, Column: webhookhistory.FieldUpdatedBy},
			webhookhistory.FieldMappingID:      {Type: field.TypeString, Column: webhookhistory.FieldMappingID},
			webhookhistory.FieldTags:           {Type: field.TypeJSON, Column: webhookhistory.FieldTags},
			webhookhistory.FieldDeletedAt:      {Type: field.TypeTime, Column: webhookhistory.FieldDeletedAt},
			webhookhistory.FieldDeletedBy:      {Type: field.TypeString, Column: webhookhistory.FieldDeletedBy},
			webhookhistory.FieldOwnerID:        {Type: field.TypeString, Column: webhookhistory.FieldOwnerID},
			webhookhistory.FieldName:           {Type: field.TypeString, Column: webhookhistory.FieldName},
			webhookhistory.FieldDescription:    {Type: field.TypeString, Column: webhookhistory.FieldDescription},
			webhookhistory.FieldDestinationURL: {Type: field.TypeString, Column: webhookhistory.FieldDestinationURL},
			webhookhistory.FieldEnabled:        {Type: field.TypeBool, Column: webhookhistory.FieldEnabled},
			webhookhistory.FieldCallback:       {Type: field.TypeString, Column: webhookhistory.FieldCallback},
			webhookhistory.FieldExpiresAt:      {Type: field.TypeTime, Column: webhookhistory.FieldExpiresAt},
			webhookhistory.FieldSecret:         {Type: field.TypeBytes, Column: webhookhistory.FieldSecret},
			webhookhistory.FieldFailures:       {Type: field.TypeInt, Column: webhookhistory.FieldFailures},
			webhookhistory.FieldLastError:      {Type: field.TypeString, Column: webhookhistory.FieldLastError},
			webhookhistory.FieldLastResponse:   {Type: field.TypeString, Column: webhookhistory.FieldLastResponse},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.OwnerTable,
			Columns: []string{apitoken.OwnerColumn},
			Bidi:    false,
		},
		"APIToken",
		"Organization",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
		},
		"Contact",
		"Organization",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
		},
		"Contact",
		"Entity",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
		},
		"Contact",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentdata.OwnerTable,
			Columns: []string{documentdata.OwnerColumn},
			Bidi:    false,
		},
		"DocumentData",
		"Organization",
	)
	graph.MustAddE(
		"template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentdata.TemplateTable,
			Columns: []string{documentdata.TemplateColumn},
			Bidi:    false,
		},
		"DocumentData",
		"Template",
	)
	graph.MustAddE(
		"entity",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   documentdata.EntityTable,
			Columns: documentdata.EntityPrimaryKey,
			Bidi:    false,
		},
		"DocumentData",
		"Entity",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   documentdata.FilesTable,
			Columns: documentdata.FilesPrimaryKey,
			Bidi:    false,
		},
		"DocumentData",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailverificationtoken.OwnerTable,
			Columns: []string{emailverificationtoken.OwnerColumn},
			Bidi:    false,
		},
		"EmailVerificationToken",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.OwnerTable,
			Columns: []string{entitlement.OwnerColumn},
			Bidi:    false,
		},
		"Entitlement",
		"Organization",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.PlanTable,
			Columns: []string{entitlement.PlanColumn},
			Bidi:    false,
		},
		"Entitlement",
		"EntitlementPlan",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.OrganizationTable,
			Columns: []string{entitlement.OrganizationColumn},
			Bidi:    false,
		},
		"Entitlement",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlement.EventsTable,
			Columns: entitlement.EventsPrimaryKey,
			Bidi:    false,
		},
		"Entitlement",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplan.OwnerTable,
			Columns: []string{entitlementplan.OwnerColumn},
			Bidi:    false,
		},
		"EntitlementPlan",
		"Organization",
	)
	graph.MustAddE(
		"entitlements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlementplan.EntitlementsTable,
			Columns: []string{entitlementplan.EntitlementsColumn},
			Bidi:    false,
		},
		"EntitlementPlan",
		"Entitlement",
	)
	graph.MustAddE(
		"base_features",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entitlementplan.BaseFeaturesTable,
			Columns: entitlementplan.BaseFeaturesPrimaryKey,
			Bidi:    false,
		},
		"EntitlementPlan",
		"Feature",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplan.EventsTable,
			Columns: entitlementplan.EventsPrimaryKey,
			Bidi:    false,
		},
		"EntitlementPlan",
		"Event",
	)
	graph.MustAddE(
		"features",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementplan.FeaturesTable,
			Columns: []string{entitlementplan.FeaturesColumn},
			Bidi:    false,
		},
		"EntitlementPlan",
		"EntitlementPlanFeature",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplanfeature.OwnerTable,
			Columns: []string{entitlementplanfeature.OwnerColumn},
			Bidi:    false,
		},
		"EntitlementPlanFeature",
		"Organization",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitlementplanfeature.PlanTable,
			Columns: []string{entitlementplanfeature.PlanColumn},
			Bidi:    false,
		},
		"EntitlementPlanFeature",
		"EntitlementPlan",
	)
	graph.MustAddE(
		"feature",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitlementplanfeature.FeatureTable,
			Columns: []string{entitlementplanfeature.FeatureColumn},
			Bidi:    false,
		},
		"EntitlementPlanFeature",
		"Feature",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
		},
		"EntitlementPlanFeature",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.OwnerTable,
			Columns: []string{entity.OwnerColumn},
			Bidi:    false,
		},
		"Entity",
		"Organization",
	)
	graph.MustAddE(
		"contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"Contact",
	)
	graph.MustAddE(
		"documents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"DocumentData",
	)
	graph.MustAddE(
		"notes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
		},
		"Entity",
		"Note",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
		},
		"Entity",
		"File",
	)
	graph.MustAddE(
		"entity_type",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entity.EntityTypeTable,
			Columns: []string{entity.EntityTypeColumn},
			Bidi:    false,
		},
		"Entity",
		"EntityType",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.OwnerTable,
			Columns: []string{entitytype.OwnerColumn},
			Bidi:    false,
		},
		"EntityType",
		"Organization",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
		},
		"EntityType",
		"Entity",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UserTable,
			Columns: event.UserPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"User",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: event.GroupPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Group",
	)
	graph.MustAddE(
		"integration",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationTable,
			Columns: event.IntegrationPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Integration",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: event.OrganizationPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Organization",
	)
	graph.MustAddE(
		"invite",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InviteTable,
			Columns: event.InvitePrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Invite",
	)
	graph.MustAddE(
		"feature",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FeatureTable,
			Columns: event.FeaturePrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Feature",
	)
	graph.MustAddE(
		"entitlementplan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanTable,
			Columns: event.EntitlementplanPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"EntitlementPlan",
	)
	graph.MustAddE(
		"entitlementplanfeature",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanfeatureTable,
			Columns: event.EntitlementplanfeaturePrimaryKey,
			Bidi:    false,
		},
		"Event",
		"EntitlementPlanFeature",
	)
	graph.MustAddE(
		"personal_access_token",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokenTable,
			Columns: event.PersonalAccessTokenPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"oauth2token",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.Oauth2tokenTable,
			Columns: event.Oauth2tokenPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"OhAuthTooToken",
	)
	graph.MustAddE(
		"hush",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.HushTable,
			Columns: event.HushPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Hush",
	)
	graph.MustAddE(
		"orgmembership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipTable,
			Columns: event.OrgmembershipPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"OrgMembership",
	)
	graph.MustAddE(
		"groupmembership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipTable,
			Columns: event.GroupmembershipPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"GroupMembership",
	)
	graph.MustAddE(
		"entitlement",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementTable,
			Columns: event.EntitlementPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Entitlement",
	)
	graph.MustAddE(
		"webhook",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.WebhookTable,
			Columns: event.WebhookPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Webhook",
	)
	graph.MustAddE(
		"subscriber",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscriberTable,
			Columns: event.SubscriberPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"Subscriber",
	)
	graph.MustAddE(
		"file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FileTable,
			Columns: event.FilePrimaryKey,
			Bidi:    false,
		},
		"Event",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feature.OwnerTable,
			Columns: []string{feature.OwnerColumn},
			Bidi:    false,
		},
		"Feature",
		"Organization",
	)
	graph.MustAddE(
		"plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.PlansTable,
			Columns: feature.PlansPrimaryKey,
			Bidi:    false,
		},
		"Feature",
		"EntitlementPlan",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.EventsTable,
			Columns: feature.EventsPrimaryKey,
			Bidi:    false,
		},
		"Feature",
		"Event",
	)
	graph.MustAddE(
		"features",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feature.FeaturesTable,
			Columns: []string{feature.FeaturesColumn},
			Bidi:    false,
		},
		"Feature",
		"EntitlementPlanFeature",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
		},
		"File",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Organization",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: file.GroupPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Group",
	)
	graph.MustAddE(
		"contact",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Contact",
	)
	graph.MustAddE(
		"entity",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Entity",
	)
	graph.MustAddE(
		"usersetting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UsersettingTable,
			Columns: file.UsersettingPrimaryKey,
			Bidi:    false,
		},
		"File",
		"UserSetting",
	)
	graph.MustAddE(
		"organizationsetting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationsettingTable,
			Columns: file.OrganizationsettingPrimaryKey,
			Bidi:    false,
		},
		"File",
		"OrganizationSetting",
	)
	graph.MustAddE(
		"template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
		},
		"File",
		"Template",
	)
	graph.MustAddE(
		"documentdata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentdataTable,
			Columns: file.DocumentdataPrimaryKey,
			Bidi:    false,
		},
		"File",
		"DocumentData",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
		},
		"File",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
		},
		"Group",
		"Organization",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
		},
		"Group",
		"GroupSetting",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"User",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"Event",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
		},
		"Group",
		"Integration",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"File",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
		},
		"Group",
		"GroupMembership",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupmembership.GroupTable,
			Columns: []string{groupmembership.GroupColumn},
			Bidi:    false,
		},
		"GroupMembership",
		"Group",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupmembership.UserTable,
			Columns: []string{groupmembership.UserColumn},
			Bidi:    false,
		},
		"GroupMembership",
		"User",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groupmembership.EventsTable,
			Columns: groupmembership.EventsPrimaryKey,
			Bidi:    false,
		},
		"GroupMembership",
		"Event",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsetting.GroupTable,
			Columns: []string{groupsetting.GroupColumn},
			Bidi:    false,
		},
		"GroupSetting",
		"Group",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hush.IntegrationsTable,
			Columns: hush.IntegrationsPrimaryKey,
			Bidi:    false,
		},
		"Hush",
		"Integration",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hush.OrganizationTable,
			Columns: hush.OrganizationPrimaryKey,
			Bidi:    false,
		},
		"Hush",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hush.EventsTable,
			Columns: hush.EventsPrimaryKey,
			Bidi:    false,
		},
		"Hush",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OwnerTable,
			Columns: []string{integration.OwnerColumn},
			Bidi:    false,
		},
		"Integration",
		"Organization",
	)
	graph.MustAddE(
		"secrets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   integration.SecretsTable,
			Columns: integration.SecretsPrimaryKey,
			Bidi:    false,
		},
		"Integration",
		"Hush",
	)
	graph.MustAddE(
		"oauth2tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   integration.Oauth2tokensTable,
			Columns: integration.Oauth2tokensPrimaryKey,
			Bidi:    false,
		},
		"Integration",
		"OhAuthTooToken",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   integration.EventsTable,
			Columns: integration.EventsPrimaryKey,
			Bidi:    false,
		},
		"Integration",
		"Event",
	)
	graph.MustAddE(
		"webhooks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   integration.WebhooksTable,
			Columns: integration.WebhooksPrimaryKey,
			Bidi:    false,
		},
		"Integration",
		"Webhook",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.OwnerTable,
			Columns: []string{invite.OwnerColumn},
			Bidi:    false,
		},
		"Invite",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
		},
		"Invite",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
		},
		"Note",
		"Organization",
	)
	graph.MustAddE(
		"entity",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.EntityTable,
			Columns: []string{note.EntityColumn},
			Bidi:    false,
		},
		"Note",
		"Entity",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthprovider.OwnerTable,
			Columns: []string{oauthprovider.OwnerColumn},
			Bidi:    false,
		},
		"OauthProvider",
		"Organization",
	)
	graph.MustAddE(
		"integration",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ohauthtootoken.IntegrationTable,
			Columns: ohauthtootoken.IntegrationPrimaryKey,
			Bidi:    false,
		},
		"OhAuthTooToken",
		"Integration",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ohauthtootoken.EventsTable,
			Columns: ohauthtootoken.EventsPrimaryKey,
			Bidi:    false,
		},
		"OhAuthTooToken",
		"Event",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.OrganizationTable,
			Columns: []string{orgmembership.OrganizationColumn},
			Bidi:    false,
		},
		"OrgMembership",
		"Organization",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.UserTable,
			Columns: []string{orgmembership.UserColumn},
			Bidi:    false,
		},
		"OrgMembership",
		"User",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmembership.EventsTable,
			Columns: orgmembership.EventsPrimaryKey,
			Bidi:    false,
		},
		"OrgMembership",
		"Event",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"templates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
		},
		"Organization",
		"Template",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
		},
		"Organization",
		"Integration",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
		},
		"Organization",
		"OrganizationSetting",
	)
	graph.MustAddE(
		"documentdata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
		},
		"Organization",
		"DocumentData",
	)
	graph.MustAddE(
		"entitlements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
		},
		"Organization",
		"Entitlement",
	)
	graph.MustAddE(
		"organization_entitlement",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
		},
		"Organization",
		"Entitlement",
	)
	graph.MustAddE(
		"personal_access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"api_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
		},
		"Organization",
		"APIToken",
	)
	graph.MustAddE(
		"oauthprovider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
		},
		"Organization",
		"OauthProvider",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"invites",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
		},
		"Organization",
		"Invite",
	)
	graph.MustAddE(
		"subscribers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
		},
		"Organization",
		"Subscriber",
	)
	graph.MustAddE(
		"webhooks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
		},
		"Organization",
		"Webhook",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"Event",
	)
	graph.MustAddE(
		"secrets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"Hush",
	)
	graph.MustAddE(
		"features",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
		},
		"Organization",
		"Feature",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"File",
	)
	graph.MustAddE(
		"entitlementplans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
		},
		"Organization",
		"EntitlementPlan",
	)
	graph.MustAddE(
		"entitlementplanfeatures",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
		},
		"Organization",
		"EntitlementPlanFeature",
	)
	graph.MustAddE(
		"entities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
		},
		"Organization",
		"Entity",
	)
	graph.MustAddE(
		"entitytypes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
		},
		"Organization",
		"EntityType",
	)
	graph.MustAddE(
		"contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
		},
		"Organization",
		"Contact",
	)
	graph.MustAddE(
		"notes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
		},
		"Organization",
		"Note",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgMembership",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrganizationTable,
			Columns: []string{organizationsetting.OrganizationColumn},
			Bidi:    false,
		},
		"OrganizationSetting",
		"Organization",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
		},
		"OrganizationSetting",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresettoken.OwnerTable,
			Columns: []string{passwordresettoken.OwnerColumn},
			Bidi:    false,
		},
		"PasswordResetToken",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalaccesstoken.OwnerTable,
			Columns: []string{personalaccesstoken.OwnerColumn},
			Bidi:    false,
		},
		"PersonalAccessToken",
		"User",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personalaccesstoken.OrganizationsTable,
			Columns: personalaccesstoken.OrganizationsPrimaryKey,
			Bidi:    false,
		},
		"PersonalAccessToken",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalaccesstoken.EventsTable,
			Columns: personalaccesstoken.EventsPrimaryKey,
			Bidi:    false,
		},
		"PersonalAccessToken",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriber.OwnerTable,
			Columns: []string{subscriber.OwnerColumn},
			Bidi:    false,
		},
		"Subscriber",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
		},
		"Subscriber",
		"Event",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tfasetting.OwnerTable,
			Columns: []string{tfasetting.OwnerColumn},
			Bidi:    false,
		},
		"TFASetting",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   template.OwnerTable,
			Columns: []string{template.OwnerColumn},
			Bidi:    false,
		},
		"Template",
		"Organization",
	)
	graph.MustAddE(
		"documents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.DocumentsTable,
			Columns: []string{template.DocumentsColumn},
			Bidi:    false,
		},
		"Template",
		"DocumentData",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   template.FilesTable,
			Columns: template.FilesPrimaryKey,
			Bidi:    false,
		},
		"Template",
		"File",
	)
	graph.MustAddE(
		"personal_access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
		},
		"User",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"tfa_settings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TfaSettingsTable,
			Columns: []string{user.TfaSettingsColumn},
			Bidi:    false,
		},
		"User",
		"TFASetting",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
		},
		"User",
		"UserSetting",
	)
	graph.MustAddE(
		"email_verification_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
		},
		"User",
		"EmailVerificationToken",
	)
	graph.MustAddE(
		"password_reset_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
		},
		"User",
		"PasswordResetToken",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Group",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	graph.MustAddE(
		"webauthn",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
		},
		"User",
		"Webauthn",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: user.FilesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"File",
	)
	graph.MustAddE(
		"file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.FileTable,
			Columns: []string{user.FileColumn},
			Bidi:    false,
		},
		"User",
		"File",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Event",
	)
	graph.MustAddE(
		"group_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
		},
		"User",
		"GroupMembership",
	)
	graph.MustAddE(
		"org_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
		},
		"User",
		"OrgMembership",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
		},
		"UserSetting",
		"User",
	)
	graph.MustAddE(
		"default_org",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersetting.DefaultOrgTable,
			Columns: []string{usersetting.DefaultOrgColumn},
			Bidi:    false,
		},
		"UserSetting",
		"Organization",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
		},
		"UserSetting",
		"File",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
		},
		"Webauthn",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OwnerTable,
			Columns: []string{webhook.OwnerColumn},
			Bidi:    false,
		},
		"Webhook",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: webhook.EventsPrimaryKey,
			Bidi:    false,
		},
		"Webhook",
		"Event",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   webhook.IntegrationsTable,
			Columns: webhook.IntegrationsPrimaryKey,
			Bidi:    false,
		},
		"Webhook",
		"Integration",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (atq *APITokenQuery) addPredicate(pred func(s *sql.Selector)) {
	atq.predicates = append(atq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the APITokenQuery builder.
func (atq *APITokenQuery) Filter() *APITokenFilter {
	return &APITokenFilter{config: atq.config, predicateAdder: atq}
}

// addPredicate implements the predicateAdder interface.
func (m *APITokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the APITokenMutation builder.
func (m *APITokenMutation) Filter() *APITokenFilter {
	return &APITokenFilter{config: m.config, predicateAdder: m}
}

// APITokenFilter provides a generic filtering capability at runtime for APITokenQuery.
type APITokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *APITokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *APITokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *APITokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *APITokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *APITokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *APITokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *APITokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *APITokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *APITokenFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *APITokenFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(apitoken.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *APITokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *APITokenFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldName))
}

// WhereToken applies the entql string predicate on the token field.
func (f *APITokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *APITokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldExpiresAt))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *APITokenFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldDescription))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *APITokenFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(apitoken.FieldScopes))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *APITokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldLastUsedAt))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *APITokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *APITokenFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContactQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContactQuery builder.
func (cq *ContactQuery) Filter() *ContactFilter {
	return &ContactFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContactMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContactMutation builder.
func (m *ContactMutation) Filter() *ContactFilter {
	return &ContactFilter{config: m.config, predicateAdder: m}
}

// ContactFilter provides a generic filtering capability at runtime for ContactQuery.
type ContactFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContactFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ContactFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(contact.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContactFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contact.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContactFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contact.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ContactFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(contact.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ContactFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(contact.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *ContactFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(contact.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContactFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contact.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ContactFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(contact.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ContactFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(contact.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ContactFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(contact.FieldOwnerID))
}

// WhereFullName applies the entql string predicate on the full_name field.
func (f *ContactFilter) WhereFullName(p entql.StringP) {
	f.Where(p.Field(contact.FieldFullName))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ContactFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(contact.FieldTitle))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *ContactFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(contact.FieldCompany))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *ContactFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(contact.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *ContactFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(contact.FieldPhoneNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *ContactFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(contact.FieldAddress))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ContactFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(contact.FieldStatus))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *ContactFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *ContactFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *ContactFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *ContactFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *ContactFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *ContactFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (chq *ContactHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	chq.predicates = append(chq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContactHistoryQuery builder.
func (chq *ContactHistoryQuery) Filter() *ContactHistoryFilter {
	return &ContactHistoryFilter{config: chq.config, predicateAdder: chq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContactHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContactHistoryMutation builder.
func (m *ContactHistoryMutation) Filter() *ContactHistoryFilter {
	return &ContactHistoryFilter{config: m.config, predicateAdder: m}
}

// ContactHistoryFilter provides a generic filtering capability at runtime for ContactHistoryQuery.
type ContactHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContactHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ContactHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *ContactHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *ContactHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ContactHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContactHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContactHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *ContactHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *ContactHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *ContactHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContactHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contacthistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *ContactHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ContactHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(contacthistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ContactHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldOwnerID))
}

// WhereFullName applies the entql string predicate on the full_name field.
func (f *ContactHistoryFilter) WhereFullName(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldFullName))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ContactHistoryFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldTitle))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *ContactHistoryFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldCompany))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *ContactHistoryFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *ContactHistoryFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldPhoneNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *ContactHistoryFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldAddress))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ContactHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(contacthistory.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (ddq *DocumentDataQuery) addPredicate(pred func(s *sql.Selector)) {
	ddq.predicates = append(ddq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentDataQuery builder.
func (ddq *DocumentDataQuery) Filter() *DocumentDataFilter {
	return &DocumentDataFilter{config: ddq.config, predicateAdder: ddq}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentDataMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentDataMutation builder.
func (m *DocumentDataMutation) Filter() *DocumentDataFilter {
	return &DocumentDataFilter{config: m.config, predicateAdder: m}
}

// DocumentDataFilter provides a generic filtering capability at runtime for DocumentDataQuery.
type DocumentDataFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentDataFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DocumentDataFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentDataFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdata.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DocumentDataFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdata.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DocumentDataFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DocumentDataFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *DocumentDataFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DocumentDataFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(documentdata.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DocumentDataFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(documentdata.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DocumentDataFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *DocumentDataFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldOwnerID))
}

// WhereTemplateID applies the entql string predicate on the template_id field.
func (f *DocumentDataFilter) WhereTemplateID(p entql.StringP) {
	f.Where(p.Field(documentdata.FieldTemplateID))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *DocumentDataFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(documentdata.FieldData))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *DocumentDataFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplate applies a predicate to check if query has an edge template.
func (f *DocumentDataFilter) WhereHasTemplate() {
	f.Where(entql.HasEdge("template"))
}

// WhereHasTemplateWith applies a predicate to check if query has an edge template with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasTemplateWith(preds ...predicate.Template) {
	f.Where(entql.HasEdgeWith("template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntity applies a predicate to check if query has an edge entity.
func (f *DocumentDataFilter) WhereHasEntity() {
	f.Where(entql.HasEdge("entity"))
}

// WhereHasEntityWith applies a predicate to check if query has an edge entity with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasEntityWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entity", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *DocumentDataFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *DocumentDataFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ddhq *DocumentDataHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ddhq.predicates = append(ddhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentDataHistoryQuery builder.
func (ddhq *DocumentDataHistoryQuery) Filter() *DocumentDataHistoryFilter {
	return &DocumentDataHistoryFilter{config: ddhq.config, predicateAdder: ddhq}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentDataHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentDataHistoryMutation builder.
func (m *DocumentDataHistoryMutation) Filter() *DocumentDataHistoryFilter {
	return &DocumentDataHistoryFilter{config: m.config, predicateAdder: m}
}

// DocumentDataHistoryFilter provides a generic filtering capability at runtime for DocumentDataHistoryQuery.
type DocumentDataHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentDataHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DocumentDataHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *DocumentDataHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *DocumentDataHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *DocumentDataHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentDataHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DocumentDataHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DocumentDataHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DocumentDataHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *DocumentDataHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DocumentDataHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(documentdatahistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DocumentDataHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(documentdatahistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DocumentDataHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *DocumentDataHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldOwnerID))
}

// WhereTemplateID applies the entql string predicate on the template_id field.
func (f *DocumentDataHistoryFilter) WhereTemplateID(p entql.StringP) {
	f.Where(p.Field(documentdatahistory.FieldTemplateID))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *DocumentDataHistoryFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(documentdatahistory.FieldData))
}

// addPredicate implements the predicateAdder interface.
func (evtq *EmailVerificationTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	evtq.predicates = append(evtq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailVerificationTokenQuery builder.
func (evtq *EmailVerificationTokenQuery) Filter() *EmailVerificationTokenFilter {
	return &EmailVerificationTokenFilter{config: evtq.config, predicateAdder: evtq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailVerificationTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailVerificationTokenMutation builder.
func (m *EmailVerificationTokenMutation) Filter() *EmailVerificationTokenFilter {
	return &EmailVerificationTokenFilter{config: m.config, predicateAdder: m}
}

// EmailVerificationTokenFilter provides a generic filtering capability at runtime for EmailVerificationTokenQuery.
type EmailVerificationTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailVerificationTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EmailVerificationTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmailVerificationTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmailVerificationTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EmailVerificationTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EmailVerificationTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EmailVerificationTokenFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmailVerificationTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EmailVerificationTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EmailVerificationTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *EmailVerificationTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *EmailVerificationTokenFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldTTL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *EmailVerificationTokenFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldEmail))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *EmailVerificationTokenFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(emailverificationtoken.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EmailVerificationTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EmailVerificationTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EntitlementQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntitlementQuery builder.
func (eq *EntitlementQuery) Filter() *EntitlementFilter {
	return &EntitlementFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntitlementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntitlementMutation builder.
func (m *EntitlementMutation) Filter() *EntitlementFilter {
	return &EntitlementFilter{config: m.config, predicateAdder: m}
}

// EntitlementFilter provides a generic filtering capability at runtime for EntitlementQuery.
type EntitlementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntitlementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntitlementFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntitlementFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntitlementFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntitlementFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntitlementFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntitlementFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntitlementFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitlement.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntitlementFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntitlementFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntitlementFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldOwnerID))
}

// WherePlanID applies the entql string predicate on the plan_id field.
func (f *EntitlementFilter) WherePlanID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldPlanID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *EntitlementFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldOrganizationID))
}

// WhereExternalCustomerID applies the entql string predicate on the external_customer_id field.
func (f *EntitlementFilter) WhereExternalCustomerID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldExternalCustomerID))
}

// WhereExternalSubscriptionID applies the entql string predicate on the external_subscription_id field.
func (f *EntitlementFilter) WhereExternalSubscriptionID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldExternalSubscriptionID))
}

// WhereExpires applies the entql bool predicate on the expires field.
func (f *EntitlementFilter) WhereExpires(p entql.BoolP) {
	f.Where(p.Field(entitlement.FieldExpires))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *EntitlementFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldExpiresAt))
}

// WhereCancelled applies the entql bool predicate on the cancelled field.
func (f *EntitlementFilter) WhereCancelled(p entql.BoolP) {
	f.Where(p.Field(entitlement.FieldCancelled))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntitlementFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntitlementFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *EntitlementFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *EntitlementFilter) WhereHasPlanWith(preds ...predicate.EntitlementPlan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *EntitlementFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *EntitlementFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *EntitlementFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *EntitlementFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ehq *EntitlementHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ehq.predicates = append(ehq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntitlementHistoryQuery builder.
func (ehq *EntitlementHistoryQuery) Filter() *EntitlementHistoryFilter {
	return &EntitlementHistoryFilter{config: ehq.config, predicateAdder: ehq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntitlementHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntitlementHistoryMutation builder.
func (m *EntitlementHistoryMutation) Filter() *EntitlementHistoryFilter {
	return &EntitlementHistoryFilter{config: m.config, predicateAdder: m}
}

// EntitlementHistoryFilter provides a generic filtering capability at runtime for EntitlementHistoryQuery.
type EntitlementHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntitlementHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntitlementHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EntitlementHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(entitlementhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EntitlementHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EntitlementHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntitlementHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntitlementHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntitlementHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntitlementHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntitlementHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntitlementHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitlementhistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntitlementHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntitlementHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntitlementHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldOwnerID))
}

// WherePlanID applies the entql string predicate on the plan_id field.
func (f *EntitlementHistoryFilter) WherePlanID(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldPlanID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *EntitlementHistoryFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldOrganizationID))
}

// WhereExternalCustomerID applies the entql string predicate on the external_customer_id field.
func (f *EntitlementHistoryFilter) WhereExternalCustomerID(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldExternalCustomerID))
}

// WhereExternalSubscriptionID applies the entql string predicate on the external_subscription_id field.
func (f *EntitlementHistoryFilter) WhereExternalSubscriptionID(p entql.StringP) {
	f.Where(p.Field(entitlementhistory.FieldExternalSubscriptionID))
}

// WhereExpires applies the entql bool predicate on the expires field.
func (f *EntitlementHistoryFilter) WhereExpires(p entql.BoolP) {
	f.Where(p.Field(entitlementhistory.FieldExpires))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *EntitlementHistoryFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(entitlementhistory.FieldExpiresAt))
}

// WhereCancelled applies the entql bool predicate on the cancelled field.
func (f *EntitlementHistoryFilter) WhereCancelled(p entql.BoolP) {
	f.Where(p.Field(entitlementhistory.FieldCancelled))
}

// addPredicate implements the predicateAdder interface.
func (epq *EntitlementPlanQuery) addPredicate(pred func(s *sql.Selector)) {
	epq.predicates = append(epq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntitlementPlanQuery builder.
func (epq *EntitlementPlanQuery) Filter() *EntitlementPlanFilter {
	return &EntitlementPlanFilter{config: epq.config, predicateAdder: epq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntitlementPlanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntitlementPlanMutation builder.
func (m *EntitlementPlanMutation) Filter() *EntitlementPlanFilter {
	return &EntitlementPlanFilter{config: m.config, predicateAdder: m}
}

// EntitlementPlanFilter provides a generic filtering capability at runtime for EntitlementPlanQuery.
type EntitlementPlanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntitlementPlanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntitlementPlanFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntitlementPlanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplan.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntitlementPlanFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplan.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntitlementPlanFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntitlementPlanFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntitlementPlanFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntitlementPlanFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplan.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntitlementPlanFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntitlementPlanFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitlementplan.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntitlementPlanFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldOwnerID))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *EntitlementPlanFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldDisplayName))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntitlementPlanFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EntitlementPlanFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldDescription))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *EntitlementPlanFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(entitlementplan.FieldVersion))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EntitlementPlanFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(entitlementplan.FieldMetadata))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntitlementPlanFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntitlementPlanFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlements applies a predicate to check if query has an edge entitlements.
func (f *EntitlementPlanFilter) WhereHasEntitlements() {
	f.Where(entql.HasEdge("entitlements"))
}

// WhereHasEntitlementsWith applies a predicate to check if query has an edge entitlements with a given conditions (other predicates).
func (f *EntitlementPlanFilter) WhereHasEntitlementsWith(preds ...predicate.Entitlement) {
	f.Where(entql.HasEdgeWith("entitlements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBaseFeatures applies a predicate to check if query has an edge base_features.
func (f *EntitlementPlanFilter) WhereHasBaseFeatures() {
	f.Where(entql.HasEdge("base_features"))
}

// WhereHasBaseFeaturesWith applies a predicate to check if query has an edge base_features with a given conditions (other predicates).
func (f *EntitlementPlanFilter) WhereHasBaseFeaturesWith(preds ...predicate.Feature) {
	f.Where(entql.HasEdgeWith("base_features", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *EntitlementPlanFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *EntitlementPlanFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeatures applies a predicate to check if query has an edge features.
func (f *EntitlementPlanFilter) WhereHasFeatures() {
	f.Where(entql.HasEdge("features"))
}

// WhereHasFeaturesWith applies a predicate to check if query has an edge features with a given conditions (other predicates).
func (f *EntitlementPlanFilter) WhereHasFeaturesWith(preds ...predicate.EntitlementPlanFeature) {
	f.Where(entql.HasEdgeWith("features", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (epfq *EntitlementPlanFeatureQuery) addPredicate(pred func(s *sql.Selector)) {
	epfq.predicates = append(epfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntitlementPlanFeatureQuery builder.
func (epfq *EntitlementPlanFeatureQuery) Filter() *EntitlementPlanFeatureFilter {
	return &EntitlementPlanFeatureFilter{config: epfq.config, predicateAdder: epfq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntitlementPlanFeatureMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntitlementPlanFeatureMutation builder.
func (m *EntitlementPlanFeatureMutation) Filter() *EntitlementPlanFeatureFilter {
	return &EntitlementPlanFeatureFilter{config: m.config, predicateAdder: m}
}

// EntitlementPlanFeatureFilter provides a generic filtering capability at runtime for EntitlementPlanFeatureQuery.
type EntitlementPlanFeatureFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntitlementPlanFeatureFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntitlementPlanFeatureFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntitlementPlanFeatureFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanfeature.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntitlementPlanFeatureFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanfeature.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntitlementPlanFeatureFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntitlementPlanFeatureFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntitlementPlanFeatureFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntitlementPlanFeatureFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanfeature.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntitlementPlanFeatureFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntitlementPlanFeatureFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitlementplanfeature.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntitlementPlanFeatureFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldOwnerID))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EntitlementPlanFeatureFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(entitlementplanfeature.FieldMetadata))
}

// WherePlanID applies the entql string predicate on the plan_id field.
func (f *EntitlementPlanFeatureFilter) WherePlanID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldPlanID))
}

// WhereFeatureID applies the entql string predicate on the feature_id field.
func (f *EntitlementPlanFeatureFilter) WhereFeatureID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeature.FieldFeatureID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntitlementPlanFeatureFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntitlementPlanFeatureFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *EntitlementPlanFeatureFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *EntitlementPlanFeatureFilter) WhereHasPlanWith(preds ...predicate.EntitlementPlan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeature applies a predicate to check if query has an edge feature.
func (f *EntitlementPlanFeatureFilter) WhereHasFeature() {
	f.Where(entql.HasEdge("feature"))
}

// WhereHasFeatureWith applies a predicate to check if query has an edge feature with a given conditions (other predicates).
func (f *EntitlementPlanFeatureFilter) WhereHasFeatureWith(preds ...predicate.Feature) {
	f.Where(entql.HasEdgeWith("feature", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *EntitlementPlanFeatureFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *EntitlementPlanFeatureFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (epfhq *EntitlementPlanFeatureHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	epfhq.predicates = append(epfhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntitlementPlanFeatureHistoryQuery builder.
func (epfhq *EntitlementPlanFeatureHistoryQuery) Filter() *EntitlementPlanFeatureHistoryFilter {
	return &EntitlementPlanFeatureHistoryFilter{config: epfhq.config, predicateAdder: epfhq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntitlementPlanFeatureHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntitlementPlanFeatureHistoryMutation builder.
func (m *EntitlementPlanFeatureHistoryMutation) Filter() *EntitlementPlanFeatureHistoryFilter {
	return &EntitlementPlanFeatureHistoryFilter{config: m.config, predicateAdder: m}
}

// EntitlementPlanFeatureHistoryFilter provides a generic filtering capability at runtime for EntitlementPlanFeatureHistoryQuery.
type EntitlementPlanFeatureHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntitlementPlanFeatureHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldOwnerID))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldMetadata))
}

// WherePlanID applies the entql string predicate on the plan_id field.
func (f *EntitlementPlanFeatureHistoryFilter) WherePlanID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldPlanID))
}

// WhereFeatureID applies the entql string predicate on the feature_id field.
func (f *EntitlementPlanFeatureHistoryFilter) WhereFeatureID(p entql.StringP) {
	f.Where(p.Field(entitlementplanfeaturehistory.FieldFeatureID))
}

// addPredicate implements the predicateAdder interface.
func (ephq *EntitlementPlanHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ephq.predicates = append(ephq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntitlementPlanHistoryQuery builder.
func (ephq *EntitlementPlanHistoryQuery) Filter() *EntitlementPlanHistoryFilter {
	return &EntitlementPlanHistoryFilter{config: ephq.config, predicateAdder: ephq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntitlementPlanHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntitlementPlanHistoryMutation builder.
func (m *EntitlementPlanHistoryMutation) Filter() *EntitlementPlanHistoryFilter {
	return &EntitlementPlanHistoryFilter{config: m.config, predicateAdder: m}
}

// EntitlementPlanHistoryFilter provides a generic filtering capability at runtime for EntitlementPlanHistoryQuery.
type EntitlementPlanHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntitlementPlanHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntitlementPlanHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EntitlementPlanHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(entitlementplanhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EntitlementPlanHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EntitlementPlanHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntitlementPlanHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntitlementPlanHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntitlementPlanHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntitlementPlanHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntitlementPlanHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntitlementPlanHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitlementplanhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntitlementPlanHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntitlementPlanHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitlementplanhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntitlementPlanHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldOwnerID))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *EntitlementPlanHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldDisplayName))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntitlementPlanHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EntitlementPlanHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldDescription))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *EntitlementPlanHistoryFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(entitlementplanhistory.FieldVersion))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EntitlementPlanHistoryFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(entitlementplanhistory.FieldMetadata))
}

// addPredicate implements the predicateAdder interface.
func (eq *EntityQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityQuery builder.
func (eq *EntityQuery) Filter() *EntityFilter {
	return &EntityFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityMutation builder.
func (m *EntityMutation) Filter() *EntityFilter {
	return &EntityFilter{config: m.config, predicateAdder: m}
}

// EntityFilter provides a generic filtering capability at runtime for EntityQuery.
type EntityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entity.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entity.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entity.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entity.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entity.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntityFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entity.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entity.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entity.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entity.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entity.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entity.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *EntityFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(entity.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EntityFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(entity.FieldDescription))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *EntityFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(entity.FieldDomains))
}

// WhereEntityTypeID applies the entql string predicate on the entity_type_id field.
func (f *EntityFilter) WhereEntityTypeID(p entql.StringP) {
	f.Where(p.Field(entity.FieldEntityTypeID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EntityFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(entity.FieldStatus))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntityFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntityFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContacts applies a predicate to check if query has an edge contacts.
func (f *EntityFilter) WhereHasContacts() {
	f.Where(entql.HasEdge("contacts"))
}

// WhereHasContactsWith applies a predicate to check if query has an edge contacts with a given conditions (other predicates).
func (f *EntityFilter) WhereHasContactsWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocuments applies a predicate to check if query has an edge documents.
func (f *EntityFilter) WhereHasDocuments() {
	f.Where(entql.HasEdge("documents"))
}

// WhereHasDocumentsWith applies a predicate to check if query has an edge documents with a given conditions (other predicates).
func (f *EntityFilter) WhereHasDocumentsWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("documents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotes applies a predicate to check if query has an edge notes.
func (f *EntityFilter) WhereHasNotes() {
	f.Where(entql.HasEdge("notes"))
}

// WhereHasNotesWith applies a predicate to check if query has an edge notes with a given conditions (other predicates).
func (f *EntityFilter) WhereHasNotesWith(preds ...predicate.Note) {
	f.Where(entql.HasEdgeWith("notes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *EntityFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *EntityFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntityType applies a predicate to check if query has an edge entity_type.
func (f *EntityFilter) WhereHasEntityType() {
	f.Where(entql.HasEdge("entity_type"))
}

// WhereHasEntityTypeWith applies a predicate to check if query has an edge entity_type with a given conditions (other predicates).
func (f *EntityFilter) WhereHasEntityTypeWith(preds ...predicate.EntityType) {
	f.Where(entql.HasEdgeWith("entity_type", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ehq *EntityHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ehq.predicates = append(ehq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityHistoryQuery builder.
func (ehq *EntityHistoryQuery) Filter() *EntityHistoryFilter {
	return &EntityHistoryFilter{config: ehq.config, predicateAdder: ehq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityHistoryMutation builder.
func (m *EntityHistoryMutation) Filter() *EntityHistoryFilter {
	return &EntityHistoryFilter{config: m.config, predicateAdder: m}
}

// EntityHistoryFilter provides a generic filtering capability at runtime for EntityHistoryQuery.
type EntityHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EntityHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EntityHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EntityHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntityHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entityhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entityhistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *EntityHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EntityHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldDescription))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *EntityHistoryFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(entityhistory.FieldDomains))
}

// WhereEntityTypeID applies the entql string predicate on the entity_type_id field.
func (f *EntityHistoryFilter) WhereEntityTypeID(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldEntityTypeID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EntityHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(entityhistory.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (etq *EntityTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	etq.predicates = append(etq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityTypeQuery builder.
func (etq *EntityTypeQuery) Filter() *EntityTypeFilter {
	return &EntityTypeFilter{config: etq.config, predicateAdder: etq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityTypeMutation builder.
func (m *EntityTypeMutation) Filter() *EntityTypeFilter {
	return &EntityTypeFilter{config: m.config, predicateAdder: m}
}

// EntityTypeFilter provides a generic filtering capability at runtime for EntityTypeQuery.
type EntityTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityTypeFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytype.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityTypeFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityTypeFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntityTypeFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityTypeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitytype.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityTypeFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityTypeFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitytype.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityTypeFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityTypeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entitytype.FieldName))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntityTypeFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntityTypeFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *EntityTypeFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *EntityTypeFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ethq *EntityTypeHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ethq.predicates = append(ethq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntityTypeHistoryQuery builder.
func (ethq *EntityTypeHistoryQuery) Filter() *EntityTypeHistoryFilter {
	return &EntityTypeHistoryFilter{config: ethq.config, predicateAdder: ethq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntityTypeHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntityTypeHistoryMutation builder.
func (m *EntityTypeHistoryMutation) Filter() *EntityTypeHistoryFilter {
	return &EntityTypeHistoryFilter{config: m.config, predicateAdder: m}
}

// EntityTypeHistoryFilter provides a generic filtering capability at runtime for EntityTypeHistoryQuery.
type EntityTypeHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntityTypeHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntityTypeHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EntityTypeHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EntityTypeHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EntityTypeHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntityTypeHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntityTypeHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntityTypeHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntityTypeHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EntityTypeHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntityTypeHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitytypehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntityTypeHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EntityTypeHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(entitytypehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntityTypeHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EntityTypeHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(entitytypehistory.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (eq *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (eq *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EventFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(event.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EventFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(event.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EventFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(event.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EventFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(event.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EventFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(event.FieldTags))
}

// WhereEventID applies the entql string predicate on the event_id field.
func (f *EventFilter) WhereEventID(p entql.StringP) {
	f.Where(p.Field(event.FieldEventID))
}

// WhereCorrelationID applies the entql string predicate on the correlation_id field.
func (f *EventFilter) WhereCorrelationID(p entql.StringP) {
	f.Where(p.Field(event.FieldCorrelationID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(event.FieldEventType))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EventFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(event.FieldMetadata))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *EventFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *EventFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *EventFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *EventFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegration applies a predicate to check if query has an edge integration.
func (f *EventFilter) WhereHasIntegration() {
	f.Where(entql.HasEdge("integration"))
}

// WhereHasIntegrationWith applies a predicate to check if query has an edge integration with a given conditions (other predicates).
func (f *EventFilter) WhereHasIntegrationWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integration", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *EventFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *EventFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInvite applies a predicate to check if query has an edge invite.
func (f *EventFilter) WhereHasInvite() {
	f.Where(entql.HasEdge("invite"))
}

// WhereHasInviteWith applies a predicate to check if query has an edge invite with a given conditions (other predicates).
func (f *EventFilter) WhereHasInviteWith(preds ...predicate.Invite) {
	f.Where(entql.HasEdgeWith("invite", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeature applies a predicate to check if query has an edge feature.
func (f *EventFilter) WhereHasFeature() {
	f.Where(entql.HasEdge("feature"))
}

// WhereHasFeatureWith applies a predicate to check if query has an edge feature with a given conditions (other predicates).
func (f *EventFilter) WhereHasFeatureWith(preds ...predicate.Feature) {
	f.Where(entql.HasEdgeWith("feature", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlementplan applies a predicate to check if query has an edge entitlementplan.
func (f *EventFilter) WhereHasEntitlementplan() {
	f.Where(entql.HasEdge("entitlementplan"))
}

// WhereHasEntitlementplanWith applies a predicate to check if query has an edge entitlementplan with a given conditions (other predicates).
func (f *EventFilter) WhereHasEntitlementplanWith(preds ...predicate.EntitlementPlan) {
	f.Where(entql.HasEdgeWith("entitlementplan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlementplanfeature applies a predicate to check if query has an edge entitlementplanfeature.
func (f *EventFilter) WhereHasEntitlementplanfeature() {
	f.Where(entql.HasEdge("entitlementplanfeature"))
}

// WhereHasEntitlementplanfeatureWith applies a predicate to check if query has an edge entitlementplanfeature with a given conditions (other predicates).
func (f *EventFilter) WhereHasEntitlementplanfeatureWith(preds ...predicate.EntitlementPlanFeature) {
	f.Where(entql.HasEdgeWith("entitlementplanfeature", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPersonalAccessToken applies a predicate to check if query has an edge personal_access_token.
func (f *EventFilter) WhereHasPersonalAccessToken() {
	f.Where(entql.HasEdge("personal_access_token"))
}

// WhereHasPersonalAccessTokenWith applies a predicate to check if query has an edge personal_access_token with a given conditions (other predicates).
func (f *EventFilter) WhereHasPersonalAccessTokenWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_token", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauth2token applies a predicate to check if query has an edge oauth2token.
func (f *EventFilter) WhereHasOauth2token() {
	f.Where(entql.HasEdge("oauth2token"))
}

// WhereHasOauth2tokenWith applies a predicate to check if query has an edge oauth2token with a given conditions (other predicates).
func (f *EventFilter) WhereHasOauth2tokenWith(preds ...predicate.OhAuthTooToken) {
	f.Where(entql.HasEdgeWith("oauth2token", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHush applies a predicate to check if query has an edge hush.
func (f *EventFilter) WhereHasHush() {
	f.Where(entql.HasEdge("hush"))
}

// WhereHasHushWith applies a predicate to check if query has an edge hush with a given conditions (other predicates).
func (f *EventFilter) WhereHasHushWith(preds ...predicate.Hush) {
	f.Where(entql.HasEdgeWith("hush", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgmembership applies a predicate to check if query has an edge orgmembership.
func (f *EventFilter) WhereHasOrgmembership() {
	f.Where(entql.HasEdge("orgmembership"))
}

// WhereHasOrgmembershipWith applies a predicate to check if query has an edge orgmembership with a given conditions (other predicates).
func (f *EventFilter) WhereHasOrgmembershipWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("orgmembership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupmembership applies a predicate to check if query has an edge groupmembership.
func (f *EventFilter) WhereHasGroupmembership() {
	f.Where(entql.HasEdge("groupmembership"))
}

// WhereHasGroupmembershipWith applies a predicate to check if query has an edge groupmembership with a given conditions (other predicates).
func (f *EventFilter) WhereHasGroupmembershipWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("groupmembership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlement applies a predicate to check if query has an edge entitlement.
func (f *EventFilter) WhereHasEntitlement() {
	f.Where(entql.HasEdge("entitlement"))
}

// WhereHasEntitlementWith applies a predicate to check if query has an edge entitlement with a given conditions (other predicates).
func (f *EventFilter) WhereHasEntitlementWith(preds ...predicate.Entitlement) {
	f.Where(entql.HasEdgeWith("entitlement", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWebhook applies a predicate to check if query has an edge webhook.
func (f *EventFilter) WhereHasWebhook() {
	f.Where(entql.HasEdge("webhook"))
}

// WhereHasWebhookWith applies a predicate to check if query has an edge webhook with a given conditions (other predicates).
func (f *EventFilter) WhereHasWebhookWith(preds ...predicate.Webhook) {
	f.Where(entql.HasEdgeWith("webhook", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscriber applies a predicate to check if query has an edge subscriber.
func (f *EventFilter) WhereHasSubscriber() {
	f.Where(entql.HasEdge("subscriber"))
}

// WhereHasSubscriberWith applies a predicate to check if query has an edge subscriber with a given conditions (other predicates).
func (f *EventFilter) WhereHasSubscriberWith(preds ...predicate.Subscriber) {
	f.Where(entql.HasEdgeWith("subscriber", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFile applies a predicate to check if query has an edge file.
func (f *EventFilter) WhereHasFile() {
	f.Where(entql.HasEdge("file"))
}

// WhereHasFileWith applies a predicate to check if query has an edge file with a given conditions (other predicates).
func (f *EventFilter) WhereHasFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ehq *EventHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ehq.predicates = append(ehq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventHistoryQuery builder.
func (ehq *EventHistoryQuery) Filter() *EventHistoryFilter {
	return &EventHistoryFilter{config: ehq.config, predicateAdder: ehq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventHistoryMutation builder.
func (m *EventHistoryMutation) Filter() *EventHistoryFilter {
	return &EventHistoryFilter{config: m.config, predicateAdder: m}
}

// EventHistoryFilter provides a generic filtering capability at runtime for EventHistoryQuery.
type EventHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EventHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *EventHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(eventhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *EventHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *EventHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(eventhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EventHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(eventhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EventHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EventHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *EventHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EventHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(eventhistory.FieldTags))
}

// WhereEventID applies the entql string predicate on the event_id field.
func (f *EventHistoryFilter) WhereEventID(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldEventID))
}

// WhereCorrelationID applies the entql string predicate on the correlation_id field.
func (f *EventHistoryFilter) WhereCorrelationID(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldCorrelationID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventHistoryFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(eventhistory.FieldEventType))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EventHistoryFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(eventhistory.FieldMetadata))
}

// addPredicate implements the predicateAdder interface.
func (fq *FeatureQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeatureQuery builder.
func (fq *FeatureQuery) Filter() *FeatureFilter {
	return &FeatureFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FeatureMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeatureMutation builder.
func (m *FeatureMutation) Filter() *FeatureFilter {
	return &FeatureFilter{config: m.config, predicateAdder: m}
}

// FeatureFilter provides a generic filtering capability at runtime for FeatureQuery.
type FeatureFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeatureFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FeatureFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(feature.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FeatureFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(feature.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FeatureFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(feature.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *FeatureFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(feature.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *FeatureFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(feature.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FeatureFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(feature.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *FeatureFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(feature.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *FeatureFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(feature.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *FeatureFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(feature.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *FeatureFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(feature.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *FeatureFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(feature.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *FeatureFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(feature.FieldDisplayName))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *FeatureFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(feature.FieldEnabled))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *FeatureFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(feature.FieldDescription))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *FeatureFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(feature.FieldMetadata))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *FeatureFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *FeatureFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlans applies a predicate to check if query has an edge plans.
func (f *FeatureFilter) WhereHasPlans() {
	f.Where(entql.HasEdge("plans"))
}

// WhereHasPlansWith applies a predicate to check if query has an edge plans with a given conditions (other predicates).
func (f *FeatureFilter) WhereHasPlansWith(preds ...predicate.EntitlementPlan) {
	f.Where(entql.HasEdgeWith("plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *FeatureFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *FeatureFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeatures applies a predicate to check if query has an edge features.
func (f *FeatureFilter) WhereHasFeatures() {
	f.Where(entql.HasEdge("features"))
}

// WhereHasFeaturesWith applies a predicate to check if query has an edge features with a given conditions (other predicates).
func (f *FeatureFilter) WhereHasFeaturesWith(preds ...predicate.EntitlementPlanFeature) {
	f.Where(entql.HasEdgeWith("features", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fhq *FeatureHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	fhq.predicates = append(fhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeatureHistoryQuery builder.
func (fhq *FeatureHistoryQuery) Filter() *FeatureHistoryFilter {
	return &FeatureHistoryFilter{config: fhq.config, predicateAdder: fhq}
}

// addPredicate implements the predicateAdder interface.
func (m *FeatureHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeatureHistoryMutation builder.
func (m *FeatureHistoryMutation) Filter() *FeatureHistoryFilter {
	return &FeatureHistoryFilter{config: m.config, predicateAdder: m}
}

// FeatureHistoryFilter provides a generic filtering capability at runtime for FeatureHistoryQuery.
type FeatureHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeatureHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FeatureHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *FeatureHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(featurehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *FeatureHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *FeatureHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FeatureHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(featurehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FeatureHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(featurehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *FeatureHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *FeatureHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FeatureHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(featurehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *FeatureHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *FeatureHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *FeatureHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(featurehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *FeatureHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *FeatureHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *FeatureHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldDisplayName))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *FeatureHistoryFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(featurehistory.FieldEnabled))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *FeatureHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(featurehistory.FieldDescription))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *FeatureHistoryFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(featurehistory.FieldMetadata))
}

// addPredicate implements the predicateAdder interface.
func (fq *FileQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FileQuery builder.
func (fq *FileQuery) Filter() *FileFilter {
	return &FileFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FileMutation builder.
func (m *FileMutation) Filter() *FileFilter {
	return &FileFilter{config: m.config, predicateAdder: m}
}

// FileFilter provides a generic filtering capability at runtime for FileQuery.
type FileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FileFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(file.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *FileFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(file.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *FileFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(file.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FileFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *FileFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(file.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *FileFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(file.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *FileFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(file.FieldTags))
}

// WhereProvidedFileName applies the entql string predicate on the provided_file_name field.
func (f *FileFilter) WhereProvidedFileName(p entql.StringP) {
	f.Where(p.Field(file.FieldProvidedFileName))
}

// WhereProvidedFileExtension applies the entql string predicate on the provided_file_extension field.
func (f *FileFilter) WhereProvidedFileExtension(p entql.StringP) {
	f.Where(p.Field(file.FieldProvidedFileExtension))
}

// WhereProvidedFileSize applies the entql int64 predicate on the provided_file_size field.
func (f *FileFilter) WhereProvidedFileSize(p entql.Int64P) {
	f.Where(p.Field(file.FieldProvidedFileSize))
}

// WherePersistedFileSize applies the entql int64 predicate on the persisted_file_size field.
func (f *FileFilter) WherePersistedFileSize(p entql.Int64P) {
	f.Where(p.Field(file.FieldPersistedFileSize))
}

// WhereDetectedMimeType applies the entql string predicate on the detected_mime_type field.
func (f *FileFilter) WhereDetectedMimeType(p entql.StringP) {
	f.Where(p.Field(file.FieldDetectedMimeType))
}

// WhereMd5Hash applies the entql string predicate on the md5_hash field.
func (f *FileFilter) WhereMd5Hash(p entql.StringP) {
	f.Where(p.Field(file.FieldMd5Hash))
}

// WhereDetectedContentType applies the entql string predicate on the detected_content_type field.
func (f *FileFilter) WhereDetectedContentType(p entql.StringP) {
	f.Where(p.Field(file.FieldDetectedContentType))
}

// WhereStoreKey applies the entql string predicate on the store_key field.
func (f *FileFilter) WhereStoreKey(p entql.StringP) {
	f.Where(p.Field(file.FieldStoreKey))
}

// WhereCategoryType applies the entql string predicate on the category_type field.
func (f *FileFilter) WhereCategoryType(p entql.StringP) {
	f.Where(p.Field(file.FieldCategoryType))
}

// WhereURI applies the entql string predicate on the uri field.
func (f *FileFilter) WhereURI(p entql.StringP) {
	f.Where(p.Field(file.FieldURI))
}

// WhereStorageScheme applies the entql string predicate on the storage_scheme field.
func (f *FileFilter) WhereStorageScheme(p entql.StringP) {
	f.Where(p.Field(file.FieldStorageScheme))
}

// WhereStorageVolume applies the entql string predicate on the storage_volume field.
func (f *FileFilter) WhereStorageVolume(p entql.StringP) {
	f.Where(p.Field(file.FieldStorageVolume))
}

// WhereStoragePath applies the entql string predicate on the storage_path field.
func (f *FileFilter) WhereStoragePath(p entql.StringP) {
	f.Where(p.Field(file.FieldStoragePath))
}

// WhereFileContents applies the entql []byte predicate on the file_contents field.
func (f *FileFilter) WhereFileContents(p entql.BytesP) {
	f.Where(p.Field(file.FieldFileContents))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *FileFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *FileFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *FileFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *FileFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *FileFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *FileFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContact applies a predicate to check if query has an edge contact.
func (f *FileFilter) WhereHasContact() {
	f.Where(entql.HasEdge("contact"))
}

// WhereHasContactWith applies a predicate to check if query has an edge contact with a given conditions (other predicates).
func (f *FileFilter) WhereHasContactWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("contact", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntity applies a predicate to check if query has an edge entity.
func (f *FileFilter) WhereHasEntity() {
	f.Where(entql.HasEdge("entity"))
}

// WhereHasEntityWith applies a predicate to check if query has an edge entity with a given conditions (other predicates).
func (f *FileFilter) WhereHasEntityWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entity", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsersetting applies a predicate to check if query has an edge usersetting.
func (f *FileFilter) WhereHasUsersetting() {
	f.Where(entql.HasEdge("usersetting"))
}

// WhereHasUsersettingWith applies a predicate to check if query has an edge usersetting with a given conditions (other predicates).
func (f *FileFilter) WhereHasUsersettingWith(preds ...predicate.UserSetting) {
	f.Where(entql.HasEdgeWith("usersetting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationsetting applies a predicate to check if query has an edge organizationsetting.
func (f *FileFilter) WhereHasOrganizationsetting() {
	f.Where(entql.HasEdge("organizationsetting"))
}

// WhereHasOrganizationsettingWith applies a predicate to check if query has an edge organizationsetting with a given conditions (other predicates).
func (f *FileFilter) WhereHasOrganizationsettingWith(preds ...predicate.OrganizationSetting) {
	f.Where(entql.HasEdgeWith("organizationsetting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplate applies a predicate to check if query has an edge template.
func (f *FileFilter) WhereHasTemplate() {
	f.Where(entql.HasEdge("template"))
}

// WhereHasTemplateWith applies a predicate to check if query has an edge template with a given conditions (other predicates).
func (f *FileFilter) WhereHasTemplateWith(preds ...predicate.Template) {
	f.Where(entql.HasEdgeWith("template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocumentdata applies a predicate to check if query has an edge documentdata.
func (f *FileFilter) WhereHasDocumentdata() {
	f.Where(entql.HasEdge("documentdata"))
}

// WhereHasDocumentdataWith applies a predicate to check if query has an edge documentdata with a given conditions (other predicates).
func (f *FileFilter) WhereHasDocumentdataWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("documentdata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *FileFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *FileFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fhq *FileHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	fhq.predicates = append(fhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FileHistoryQuery builder.
func (fhq *FileHistoryQuery) Filter() *FileHistoryFilter {
	return &FileHistoryFilter{config: fhq.config, predicateAdder: fhq}
}

// addPredicate implements the predicateAdder interface.
func (m *FileHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FileHistoryMutation builder.
func (m *FileHistoryMutation) Filter() *FileHistoryFilter {
	return &FileHistoryFilter{config: m.config, predicateAdder: m}
}

// FileHistoryFilter provides a generic filtering capability at runtime for FileHistoryQuery.
type FileHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FileHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FileHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *FileHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *FileHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *FileHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FileHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FileHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *FileHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *FileHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FileHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(filehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *FileHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *FileHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *FileHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(filehistory.FieldTags))
}

// WhereProvidedFileName applies the entql string predicate on the provided_file_name field.
func (f *FileHistoryFilter) WhereProvidedFileName(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldProvidedFileName))
}

// WhereProvidedFileExtension applies the entql string predicate on the provided_file_extension field.
func (f *FileHistoryFilter) WhereProvidedFileExtension(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldProvidedFileExtension))
}

// WhereProvidedFileSize applies the entql int64 predicate on the provided_file_size field.
func (f *FileHistoryFilter) WhereProvidedFileSize(p entql.Int64P) {
	f.Where(p.Field(filehistory.FieldProvidedFileSize))
}

// WherePersistedFileSize applies the entql int64 predicate on the persisted_file_size field.
func (f *FileHistoryFilter) WherePersistedFileSize(p entql.Int64P) {
	f.Where(p.Field(filehistory.FieldPersistedFileSize))
}

// WhereDetectedMimeType applies the entql string predicate on the detected_mime_type field.
func (f *FileHistoryFilter) WhereDetectedMimeType(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldDetectedMimeType))
}

// WhereMd5Hash applies the entql string predicate on the md5_hash field.
func (f *FileHistoryFilter) WhereMd5Hash(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldMd5Hash))
}

// WhereDetectedContentType applies the entql string predicate on the detected_content_type field.
func (f *FileHistoryFilter) WhereDetectedContentType(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldDetectedContentType))
}

// WhereStoreKey applies the entql string predicate on the store_key field.
func (f *FileHistoryFilter) WhereStoreKey(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStoreKey))
}

// WhereCategoryType applies the entql string predicate on the category_type field.
func (f *FileHistoryFilter) WhereCategoryType(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldCategoryType))
}

// WhereURI applies the entql string predicate on the uri field.
func (f *FileHistoryFilter) WhereURI(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldURI))
}

// WhereStorageScheme applies the entql string predicate on the storage_scheme field.
func (f *FileHistoryFilter) WhereStorageScheme(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStorageScheme))
}

// WhereStorageVolume applies the entql string predicate on the storage_volume field.
func (f *FileHistoryFilter) WhereStorageVolume(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStorageVolume))
}

// WhereStoragePath applies the entql string predicate on the storage_path field.
func (f *FileHistoryFilter) WhereStoragePath(p entql.StringP) {
	f.Where(p.Field(filehistory.FieldStoragePath))
}

// WhereFileContents applies the entql []byte predicate on the file_contents field.
func (f *FileHistoryFilter) WhereFileContents(p entql.BytesP) {
	f.Where(p.Field(filehistory.FieldFileContents))
}

// addPredicate implements the predicateAdder interface.
func (gq *GroupQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupQuery builder.
func (gq *GroupQuery) Filter() *GroupFilter {
	return &GroupFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMutation builder.
func (m *GroupMutation) Filter() *GroupFilter {
	return &GroupFilter{config: m.config, predicateAdder: m}
}

// GroupFilter provides a generic filtering capability at runtime for GroupQuery.
type GroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(group.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *GroupFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(group.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *GroupFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(group.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *GroupFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(group.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(group.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GroupFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(group.FieldDescription))
}

// WhereGravatarLogoURL applies the entql string predicate on the gravatar_logo_url field.
func (f *GroupFilter) WhereGravatarLogoURL(p entql.StringP) {
	f.Where(p.Field(group.FieldGravatarLogoURL))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *GroupFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(group.FieldLogoURL))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *GroupFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(group.FieldDisplayName))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *GroupFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *GroupFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *GroupFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *GroupFilter) WhereHasSettingWith(preds ...predicate.GroupSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *GroupFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *GroupFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *GroupFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *GroupFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *GroupFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *GroupFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *GroupFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *GroupFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *GroupFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *GroupFilter) WhereHasMembersWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ghq *GroupHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ghq.predicates = append(ghq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupHistoryQuery builder.
func (ghq *GroupHistoryQuery) Filter() *GroupHistoryFilter {
	return &GroupHistoryFilter{config: ghq.config, predicateAdder: ghq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupHistoryMutation builder.
func (m *GroupHistoryMutation) Filter() *GroupHistoryFilter {
	return &GroupHistoryFilter{config: m.config, predicateAdder: m}
}

// GroupHistoryFilter provides a generic filtering capability at runtime for GroupHistoryQuery.
type GroupHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *GroupHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *GroupHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *GroupHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(grouphistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *GroupHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *GroupHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(grouphistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *GroupHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GroupHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GroupHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldDescription))
}

// WhereGravatarLogoURL applies the entql string predicate on the gravatar_logo_url field.
func (f *GroupHistoryFilter) WhereGravatarLogoURL(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldGravatarLogoURL))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *GroupHistoryFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldLogoURL))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *GroupHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(grouphistory.FieldDisplayName))
}

// addPredicate implements the predicateAdder interface.
func (gmq *GroupMembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	gmq.predicates = append(gmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupMembershipQuery builder.
func (gmq *GroupMembershipQuery) Filter() *GroupMembershipFilter {
	return &GroupMembershipFilter{config: gmq.config, predicateAdder: gmq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMembershipMutation builder.
func (m *GroupMembershipMutation) Filter() *GroupMembershipFilter {
	return &GroupMembershipFilter{config: m.config, predicateAdder: m}
}

// GroupMembershipFilter provides a generic filtering capability at runtime for GroupMembershipQuery.
type GroupMembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupMembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupMembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupMembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupMembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupMembershipFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupMembershipFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *GroupMembershipFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupMembershipFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupMembershipFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldDeletedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *GroupMembershipFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldRole))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupMembershipFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldGroupID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *GroupMembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldUserID))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *GroupMembershipFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *GroupMembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *GroupMembershipFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gmhq *GroupMembershipHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	gmhq.predicates = append(gmhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupMembershipHistoryQuery builder.
func (gmhq *GroupMembershipHistoryQuery) Filter() *GroupMembershipHistoryFilter {
	return &GroupMembershipHistoryFilter{config: gmhq.config, predicateAdder: gmhq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMembershipHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMembershipHistoryMutation builder.
func (m *GroupMembershipHistoryMutation) Filter() *GroupMembershipHistoryFilter {
	return &GroupMembershipHistoryFilter{config: m.config, predicateAdder: m}
}

// GroupMembershipHistoryFilter provides a generic filtering capability at runtime for GroupMembershipHistoryQuery.
type GroupMembershipHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupMembershipHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupMembershipHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *GroupMembershipHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(groupmembershiphistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *GroupMembershipHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *GroupMembershipHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupMembershipHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembershiphistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupMembershipHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembershiphistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupMembershipHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupMembershipHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *GroupMembershipHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupMembershipHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembershiphistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupMembershipHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldDeletedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *GroupMembershipHistoryFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldRole))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupMembershipHistoryFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldGroupID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *GroupMembershipHistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(groupmembershiphistory.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (gsq *GroupSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	gsq.predicates = append(gsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupSettingQuery builder.
func (gsq *GroupSettingQuery) Filter() *GroupSettingFilter {
	return &GroupSettingFilter{config: gsq.config, predicateAdder: gsq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupSettingMutation builder.
func (m *GroupSettingMutation) Filter() *GroupSettingFilter {
	return &GroupSettingFilter{config: m.config, predicateAdder: m}
}

// GroupSettingFilter provides a generic filtering capability at runtime for GroupSettingQuery.
type GroupSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *GroupSettingFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *GroupSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(groupsetting.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldDeletedBy))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *GroupSettingFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldVisibility))
}

// WhereJoinPolicy applies the entql string predicate on the join_policy field.
func (f *GroupSettingFilter) WhereJoinPolicy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldJoinPolicy))
}

// WhereSyncToSlack applies the entql bool predicate on the sync_to_slack field.
func (f *GroupSettingFilter) WhereSyncToSlack(p entql.BoolP) {
	f.Where(p.Field(groupsetting.FieldSyncToSlack))
}

// WhereSyncToGithub applies the entql bool predicate on the sync_to_github field.
func (f *GroupSettingFilter) WhereSyncToGithub(p entql.BoolP) {
	f.Where(p.Field(groupsetting.FieldSyncToGithub))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupSettingFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldGroupID))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *GroupSettingFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *GroupSettingFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gshq *GroupSettingHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	gshq.predicates = append(gshq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupSettingHistoryQuery builder.
func (gshq *GroupSettingHistoryQuery) Filter() *GroupSettingHistoryFilter {
	return &GroupSettingHistoryFilter{config: gshq.config, predicateAdder: gshq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupSettingHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupSettingHistoryMutation builder.
func (m *GroupSettingHistoryMutation) Filter() *GroupSettingHistoryFilter {
	return &GroupSettingHistoryFilter{config: m.config, predicateAdder: m}
}

// GroupSettingHistoryFilter provides a generic filtering capability at runtime for GroupSettingHistoryQuery.
type GroupSettingHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupSettingHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupSettingHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *GroupSettingHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *GroupSettingHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *GroupSettingHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupSettingHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupSettingHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupSettingHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupSettingHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *GroupSettingHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *GroupSettingHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(groupsettinghistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupSettingHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettinghistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupSettingHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldDeletedBy))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *GroupSettingHistoryFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldVisibility))
}

// WhereJoinPolicy applies the entql string predicate on the join_policy field.
func (f *GroupSettingHistoryFilter) WhereJoinPolicy(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldJoinPolicy))
}

// WhereSyncToSlack applies the entql bool predicate on the sync_to_slack field.
func (f *GroupSettingHistoryFilter) WhereSyncToSlack(p entql.BoolP) {
	f.Where(p.Field(groupsettinghistory.FieldSyncToSlack))
}

// WhereSyncToGithub applies the entql bool predicate on the sync_to_github field.
func (f *GroupSettingHistoryFilter) WhereSyncToGithub(p entql.BoolP) {
	f.Where(p.Field(groupsettinghistory.FieldSyncToGithub))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupSettingHistoryFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupsettinghistory.FieldGroupID))
}

// addPredicate implements the predicateAdder interface.
func (hq *HushQuery) addPredicate(pred func(s *sql.Selector)) {
	hq.predicates = append(hq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HushQuery builder.
func (hq *HushQuery) Filter() *HushFilter {
	return &HushFilter{config: hq.config, predicateAdder: hq}
}

// addPredicate implements the predicateAdder interface.
func (m *HushMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HushMutation builder.
func (m *HushMutation) Filter() *HushFilter {
	return &HushFilter{config: m.config, predicateAdder: m}
}

// HushFilter provides a generic filtering capability at runtime for HushQuery.
type HushFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HushFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HushFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hush.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HushFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hush.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HushFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hush.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *HushFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(hush.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *HushFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(hush.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *HushFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(hush.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *HushFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(hush.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *HushFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(hush.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *HushFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hush.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HushFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hush.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *HushFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(hush.FieldKind))
}

// WhereSecretName applies the entql string predicate on the secret_name field.
func (f *HushFilter) WhereSecretName(p entql.StringP) {
	f.Where(p.Field(hush.FieldSecretName))
}

// WhereSecretValue applies the entql string predicate on the secret_value field.
func (f *HushFilter) WhereSecretValue(p entql.StringP) {
	f.Where(p.Field(hush.FieldSecretValue))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *HushFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *HushFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *HushFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *HushFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *HushFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *HushFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hhq *HushHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	hhq.predicates = append(hhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HushHistoryQuery builder.
func (hhq *HushHistoryQuery) Filter() *HushHistoryFilter {
	return &HushHistoryFilter{config: hhq.config, predicateAdder: hhq}
}

// addPredicate implements the predicateAdder interface.
func (m *HushHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HushHistoryMutation builder.
func (m *HushHistoryMutation) Filter() *HushHistoryFilter {
	return &HushHistoryFilter{config: m.config, predicateAdder: m}
}

// HushHistoryFilter provides a generic filtering capability at runtime for HushHistoryQuery.
type HushHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HushHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HushHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *HushHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *HushHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *HushHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HushHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HushHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *HushHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *HushHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *HushHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *HushHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(hushhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *HushHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *HushHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HushHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *HushHistoryFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldKind))
}

// WhereSecretName applies the entql string predicate on the secret_name field.
func (f *HushHistoryFilter) WhereSecretName(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldSecretName))
}

// WhereSecretValue applies the entql string predicate on the secret_value field.
func (f *HushHistoryFilter) WhereSecretValue(p entql.StringP) {
	f.Where(p.Field(hushhistory.FieldSecretValue))
}

// addPredicate implements the predicateAdder interface.
func (iq *IntegrationQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IntegrationQuery builder.
func (iq *IntegrationQuery) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *IntegrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IntegrationMutation builder.
func (m *IntegrationMutation) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: m.config, predicateAdder: m}
}

// IntegrationFilter provides a generic filtering capability at runtime for IntegrationQuery.
type IntegrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IntegrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IntegrationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(integration.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IntegrationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IntegrationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *IntegrationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *IntegrationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *IntegrationFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(integration.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *IntegrationFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(integration.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IntegrationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *IntegrationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *IntegrationFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(integration.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *IntegrationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(integration.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IntegrationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(integration.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IntegrationFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(integration.FieldKind))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *IntegrationFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSecrets applies a predicate to check if query has an edge secrets.
func (f *IntegrationFilter) WhereHasSecrets() {
	f.Where(entql.HasEdge("secrets"))
}

// WhereHasSecretsWith applies a predicate to check if query has an edge secrets with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasSecretsWith(preds ...predicate.Hush) {
	f.Where(entql.HasEdgeWith("secrets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauth2tokens applies a predicate to check if query has an edge oauth2tokens.
func (f *IntegrationFilter) WhereHasOauth2tokens() {
	f.Where(entql.HasEdge("oauth2tokens"))
}

// WhereHasOauth2tokensWith applies a predicate to check if query has an edge oauth2tokens with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasOauth2tokensWith(preds ...predicate.OhAuthTooToken) {
	f.Where(entql.HasEdgeWith("oauth2tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *IntegrationFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWebhooks applies a predicate to check if query has an edge webhooks.
func (f *IntegrationFilter) WhereHasWebhooks() {
	f.Where(entql.HasEdge("webhooks"))
}

// WhereHasWebhooksWith applies a predicate to check if query has an edge webhooks with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasWebhooksWith(preds ...predicate.Webhook) {
	f.Where(entql.HasEdgeWith("webhooks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ihq *IntegrationHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ihq.predicates = append(ihq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IntegrationHistoryQuery builder.
func (ihq *IntegrationHistoryQuery) Filter() *IntegrationHistoryFilter {
	return &IntegrationHistoryFilter{config: ihq.config, predicateAdder: ihq}
}

// addPredicate implements the predicateAdder interface.
func (m *IntegrationHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IntegrationHistoryMutation builder.
func (m *IntegrationHistoryMutation) Filter() *IntegrationHistoryFilter {
	return &IntegrationHistoryFilter{config: m.config, predicateAdder: m}
}

// IntegrationHistoryFilter provides a generic filtering capability at runtime for IntegrationHistoryQuery.
type IntegrationHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IntegrationHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IntegrationHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *IntegrationHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *IntegrationHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *IntegrationHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IntegrationHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IntegrationHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *IntegrationHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *IntegrationHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *IntegrationHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *IntegrationHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(integrationhistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IntegrationHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(integrationhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *IntegrationHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *IntegrationHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *IntegrationHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IntegrationHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IntegrationHistoryFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(integrationhistory.FieldKind))
}

// addPredicate implements the predicateAdder interface.
func (iq *InviteQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InviteQuery builder.
func (iq *InviteQuery) Filter() *InviteFilter {
	return &InviteFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *InviteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InviteMutation builder.
func (m *InviteMutation) Filter() *InviteFilter {
	return &InviteFilter{config: m.config, predicateAdder: m}
}

// InviteFilter provides a generic filtering capability at runtime for InviteQuery.
type InviteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InviteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *InviteFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(invite.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InviteFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InviteFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *InviteFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *InviteFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *InviteFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(invite.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InviteFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *InviteFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *InviteFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(invite.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *InviteFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(invite.FieldToken))
}

// WhereExpires applies the entql time.Time predicate on the expires field.
func (f *InviteFilter) WhereExpires(p entql.TimeP) {
	f.Where(p.Field(invite.FieldExpires))
}

// WhereRecipient applies the entql string predicate on the recipient field.
func (f *InviteFilter) WhereRecipient(p entql.StringP) {
	f.Where(p.Field(invite.FieldRecipient))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *InviteFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(invite.FieldStatus))
}

// WhereRole applies the entql string predicate on the role field.
func (f *InviteFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(invite.FieldRole))
}

// WhereSendAttempts applies the entql int predicate on the send_attempts field.
func (f *InviteFilter) WhereSendAttempts(p entql.IntP) {
	f.Where(p.Field(invite.FieldSendAttempts))
}

// WhereRequestorID applies the entql string predicate on the requestor_id field.
func (f *InviteFilter) WhereRequestorID(p entql.StringP) {
	f.Where(p.Field(invite.FieldRequestorID))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *InviteFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(invite.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *InviteFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *InviteFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *InviteFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *InviteFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (nq *NoteQuery) addPredicate(pred func(s *sql.Selector)) {
	nq.predicates = append(nq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NoteQuery builder.
func (nq *NoteQuery) Filter() *NoteFilter {
	return &NoteFilter{config: nq.config, predicateAdder: nq}
}

// addPredicate implements the predicateAdder interface.
func (m *NoteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NoteMutation builder.
func (m *NoteMutation) Filter() *NoteFilter {
	return &NoteFilter{config: m.config, predicateAdder: m}
}

// NoteFilter provides a generic filtering capability at runtime for NoteQuery.
type NoteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NoteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *NoteFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(note.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NoteFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(note.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NoteFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(note.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *NoteFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(note.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *NoteFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(note.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *NoteFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(note.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NoteFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(note.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *NoteFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(note.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *NoteFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(note.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *NoteFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(note.FieldOwnerID))
}

// WhereText applies the entql string predicate on the text field.
func (f *NoteFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(note.FieldText))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *NoteFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *NoteFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntity applies a predicate to check if query has an edge entity.
func (f *NoteFilter) WhereHasEntity() {
	f.Where(entql.HasEdge("entity"))
}

// WhereHasEntityWith applies a predicate to check if query has an edge entity with a given conditions (other predicates).
func (f *NoteFilter) WhereHasEntityWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entity", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (nhq *NoteHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	nhq.predicates = append(nhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NoteHistoryQuery builder.
func (nhq *NoteHistoryQuery) Filter() *NoteHistoryFilter {
	return &NoteHistoryFilter{config: nhq.config, predicateAdder: nhq}
}

// addPredicate implements the predicateAdder interface.
func (m *NoteHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NoteHistoryMutation builder.
func (m *NoteHistoryMutation) Filter() *NoteHistoryFilter {
	return &NoteHistoryFilter{config: m.config, predicateAdder: m}
}

// NoteHistoryFilter provides a generic filtering capability at runtime for NoteHistoryQuery.
type NoteHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NoteHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *NoteHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *NoteHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *NoteHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *NoteHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NoteHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NoteHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *NoteHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *NoteHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *NoteHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NoteHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(notehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *NoteHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *NoteHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(notehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *NoteHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldOwnerID))
}

// WhereText applies the entql string predicate on the text field.
func (f *NoteHistoryFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(notehistory.FieldText))
}

// addPredicate implements the predicateAdder interface.
func (opq *OauthProviderQuery) addPredicate(pred func(s *sql.Selector)) {
	opq.predicates = append(opq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthProviderQuery builder.
func (opq *OauthProviderQuery) Filter() *OauthProviderFilter {
	return &OauthProviderFilter{config: opq.config, predicateAdder: opq}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthProviderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthProviderMutation builder.
func (m *OauthProviderMutation) Filter() *OauthProviderFilter {
	return &OauthProviderFilter{config: m.config, predicateAdder: m}
}

// OauthProviderFilter provides a generic filtering capability at runtime for OauthProviderQuery.
type OauthProviderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthProviderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OauthProviderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OauthProviderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OauthProviderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OauthProviderFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OauthProviderFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OauthProviderFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OauthProviderFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(oauthprovider.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OauthProviderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OauthProviderFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OauthProviderFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *OauthProviderFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldName))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OauthProviderFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *OauthProviderFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldClientSecret))
}

// WhereRedirectURL applies the entql string predicate on the redirect_url field.
func (f *OauthProviderFilter) WhereRedirectURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldRedirectURL))
}

// WhereScopes applies the entql string predicate on the scopes field.
func (f *OauthProviderFilter) WhereScopes(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldScopes))
}

// WhereAuthURL applies the entql string predicate on the auth_url field.
func (f *OauthProviderFilter) WhereAuthURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldAuthURL))
}

// WhereTokenURL applies the entql string predicate on the token_url field.
func (f *OauthProviderFilter) WhereTokenURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldTokenURL))
}

// WhereAuthStyle applies the entql uint8 predicate on the auth_style field.
func (f *OauthProviderFilter) WhereAuthStyle(p entql.Uint8P) {
	f.Where(p.Field(oauthprovider.FieldAuthStyle))
}

// WhereInfoURL applies the entql string predicate on the info_url field.
func (f *OauthProviderFilter) WhereInfoURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldInfoURL))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *OauthProviderFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *OauthProviderFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ophq *OauthProviderHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ophq.predicates = append(ophq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthProviderHistoryQuery builder.
func (ophq *OauthProviderHistoryQuery) Filter() *OauthProviderHistoryFilter {
	return &OauthProviderHistoryFilter{config: ophq.config, predicateAdder: ophq}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthProviderHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthProviderHistoryMutation builder.
func (m *OauthProviderHistoryMutation) Filter() *OauthProviderHistoryFilter {
	return &OauthProviderHistoryFilter{config: m.config, predicateAdder: m}
}

// OauthProviderHistoryFilter provides a generic filtering capability at runtime for OauthProviderHistoryQuery.
type OauthProviderHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthProviderHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OauthProviderHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OauthProviderHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(oauthproviderhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OauthProviderHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OauthProviderHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OauthProviderHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthproviderhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OauthProviderHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthproviderhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OauthProviderHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OauthProviderHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OauthProviderHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OauthProviderHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(oauthproviderhistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OauthProviderHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(oauthproviderhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OauthProviderHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OauthProviderHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *OauthProviderHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldName))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OauthProviderHistoryFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *OauthProviderHistoryFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldClientSecret))
}

// WhereRedirectURL applies the entql string predicate on the redirect_url field.
func (f *OauthProviderHistoryFilter) WhereRedirectURL(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldRedirectURL))
}

// WhereScopes applies the entql string predicate on the scopes field.
func (f *OauthProviderHistoryFilter) WhereScopes(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldScopes))
}

// WhereAuthURL applies the entql string predicate on the auth_url field.
func (f *OauthProviderHistoryFilter) WhereAuthURL(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldAuthURL))
}

// WhereTokenURL applies the entql string predicate on the token_url field.
func (f *OauthProviderHistoryFilter) WhereTokenURL(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldTokenURL))
}

// WhereAuthStyle applies the entql uint8 predicate on the auth_style field.
func (f *OauthProviderHistoryFilter) WhereAuthStyle(p entql.Uint8P) {
	f.Where(p.Field(oauthproviderhistory.FieldAuthStyle))
}

// WhereInfoURL applies the entql string predicate on the info_url field.
func (f *OauthProviderHistoryFilter) WhereInfoURL(p entql.StringP) {
	f.Where(p.Field(oauthproviderhistory.FieldInfoURL))
}

// addPredicate implements the predicateAdder interface.
func (oattq *OhAuthTooTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	oattq.predicates = append(oattq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OhAuthTooTokenQuery builder.
func (oattq *OhAuthTooTokenQuery) Filter() *OhAuthTooTokenFilter {
	return &OhAuthTooTokenFilter{config: oattq.config, predicateAdder: oattq}
}

// addPredicate implements the predicateAdder interface.
func (m *OhAuthTooTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OhAuthTooTokenMutation builder.
func (m *OhAuthTooTokenMutation) Filter() *OhAuthTooTokenFilter {
	return &OhAuthTooTokenFilter{config: m.config, predicateAdder: m}
}

// OhAuthTooTokenFilter provides a generic filtering capability at runtime for OhAuthTooTokenQuery.
type OhAuthTooTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OhAuthTooTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OhAuthTooTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldID))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OhAuthTooTokenFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OhAuthTooTokenFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(ohauthtootoken.FieldTags))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OhAuthTooTokenFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClientID))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *OhAuthTooTokenFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(ohauthtootoken.FieldScopes))
}

// WhereNonce applies the entql string predicate on the nonce field.
func (f *OhAuthTooTokenFilter) WhereNonce(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldNonce))
}

// WhereClaimsUserID applies the entql string predicate on the claims_user_id field.
func (f *OhAuthTooTokenFilter) WhereClaimsUserID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsUserID))
}

// WhereClaimsUsername applies the entql string predicate on the claims_username field.
func (f *OhAuthTooTokenFilter) WhereClaimsUsername(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsUsername))
}

// WhereClaimsEmail applies the entql string predicate on the claims_email field.
func (f *OhAuthTooTokenFilter) WhereClaimsEmail(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsEmail))
}

// WhereClaimsEmailVerified applies the entql bool predicate on the claims_email_verified field.
func (f *OhAuthTooTokenFilter) WhereClaimsEmailVerified(p entql.BoolP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsEmailVerified))
}

// WhereClaimsGroups applies the entql json.RawMessage predicate on the claims_groups field.
func (f *OhAuthTooTokenFilter) WhereClaimsGroups(p entql.BytesP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsGroups))
}

// WhereClaimsPreferredUsername applies the entql string predicate on the claims_preferred_username field.
func (f *OhAuthTooTokenFilter) WhereClaimsPreferredUsername(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsPreferredUsername))
}

// WhereConnectorID applies the entql string predicate on the connector_id field.
func (f *OhAuthTooTokenFilter) WhereConnectorID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldConnectorID))
}

// WhereConnectorData applies the entql json.RawMessage predicate on the connector_data field.
func (f *OhAuthTooTokenFilter) WhereConnectorData(p entql.BytesP) {
	f.Where(p.Field(ohauthtootoken.FieldConnectorData))
}

// WhereLastUsed applies the entql time.Time predicate on the last_used field.
func (f *OhAuthTooTokenFilter) WhereLastUsed(p entql.TimeP) {
	f.Where(p.Field(ohauthtootoken.FieldLastUsed))
}

// WhereHasIntegration applies a predicate to check if query has an edge integration.
func (f *OhAuthTooTokenFilter) WhereHasIntegration() {
	f.Where(entql.HasEdge("integration"))
}

// WhereHasIntegrationWith applies a predicate to check if query has an edge integration with a given conditions (other predicates).
func (f *OhAuthTooTokenFilter) WhereHasIntegrationWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integration", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *OhAuthTooTokenFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *OhAuthTooTokenFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (omq *OrgMembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	omq.predicates = append(omq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgMembershipQuery builder.
func (omq *OrgMembershipQuery) Filter() *OrgMembershipFilter {
	return &OrgMembershipFilter{config: omq.config, predicateAdder: omq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgMembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgMembershipMutation builder.
func (m *OrgMembershipMutation) Filter() *OrgMembershipFilter {
	return &OrgMembershipFilter{config: m.config, predicateAdder: m}
}

// OrgMembershipFilter provides a generic filtering capability at runtime for OrgMembershipQuery.
type OrgMembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgMembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgMembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgMembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgMembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgMembershipFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgMembershipFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OrgMembershipFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgMembershipFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgMembershipFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldDeletedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *OrgMembershipFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldRole))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrgMembershipFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldOrganizationID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *OrgMembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldUserID))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrgMembershipFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OrgMembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *OrgMembershipFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (omhq *OrgMembershipHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	omhq.predicates = append(omhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgMembershipHistoryQuery builder.
func (omhq *OrgMembershipHistoryQuery) Filter() *OrgMembershipHistoryFilter {
	return &OrgMembershipHistoryFilter{config: omhq.config, predicateAdder: omhq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgMembershipHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgMembershipHistoryMutation builder.
func (m *OrgMembershipHistoryMutation) Filter() *OrgMembershipHistoryFilter {
	return &OrgMembershipHistoryFilter{config: m.config, predicateAdder: m}
}

// OrgMembershipHistoryFilter provides a generic filtering capability at runtime for OrgMembershipHistoryQuery.
type OrgMembershipHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgMembershipHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgMembershipHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OrgMembershipHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(orgmembershiphistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OrgMembershipHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OrgMembershipHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgMembershipHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembershiphistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgMembershipHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembershiphistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgMembershipHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgMembershipHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OrgMembershipHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgMembershipHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembershiphistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgMembershipHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldDeletedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *OrgMembershipHistoryFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldRole))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrgMembershipHistoryFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldOrganizationID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *OrgMembershipHistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(orgmembershiphistory.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (oq *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OrganizationFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(organization.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organization.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *OrganizationFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(organization.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OrganizationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(organization.FieldDescription))
}

// WhereParentOrganizationID applies the entql string predicate on the parent_organization_id field.
func (f *OrganizationFilter) WhereParentOrganizationID(p entql.StringP) {
	f.Where(p.Field(organization.FieldParentOrganizationID))
}

// WherePersonalOrg applies the entql bool predicate on the personal_org field.
func (f *OrganizationFilter) WherePersonalOrg(p entql.BoolP) {
	f.Where(p.Field(organization.FieldPersonalOrg))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *OrganizationFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(organization.FieldAvatarRemoteURL))
}

// WhereDedicatedDb applies the entql bool predicate on the dedicated_db field.
func (f *OrganizationFilter) WhereDedicatedDb(p entql.BoolP) {
	f.Where(p.Field(organization.FieldDedicatedDb))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *OrganizationFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasParentWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *OrganizationFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasChildrenWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *OrganizationFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplates applies a predicate to check if query has an edge templates.
func (f *OrganizationFilter) WhereHasTemplates() {
	f.Where(entql.HasEdge("templates"))
}

// WhereHasTemplatesWith applies a predicate to check if query has an edge templates with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasTemplatesWith(preds ...predicate.Template) {
	f.Where(entql.HasEdgeWith("templates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *OrganizationFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *OrganizationFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSettingWith(preds ...predicate.OrganizationSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocumentdata applies a predicate to check if query has an edge documentdata.
func (f *OrganizationFilter) WhereHasDocumentdata() {
	f.Where(entql.HasEdge("documentdata"))
}

// WhereHasDocumentdataWith applies a predicate to check if query has an edge documentdata with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasDocumentdataWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("documentdata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlements applies a predicate to check if query has an edge entitlements.
func (f *OrganizationFilter) WhereHasEntitlements() {
	f.Where(entql.HasEdge("entitlements"))
}

// WhereHasEntitlementsWith applies a predicate to check if query has an edge entitlements with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntitlementsWith(preds ...predicate.Entitlement) {
	f.Where(entql.HasEdgeWith("entitlements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationEntitlement applies a predicate to check if query has an edge organization_entitlement.
func (f *OrganizationFilter) WhereHasOrganizationEntitlement() {
	f.Where(entql.HasEdge("organization_entitlement"))
}

// WhereHasOrganizationEntitlementWith applies a predicate to check if query has an edge organization_entitlement with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOrganizationEntitlementWith(preds ...predicate.Entitlement) {
	f.Where(entql.HasEdgeWith("organization_entitlement", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPersonalAccessTokens applies a predicate to check if query has an edge personal_access_tokens.
func (f *OrganizationFilter) WhereHasPersonalAccessTokens() {
	f.Where(entql.HasEdge("personal_access_tokens"))
}

// WhereHasPersonalAccessTokensWith applies a predicate to check if query has an edge personal_access_tokens with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPITokens applies a predicate to check if query has an edge api_tokens.
func (f *OrganizationFilter) WhereHasAPITokens() {
	f.Where(entql.HasEdge("api_tokens"))
}

// WhereHasAPITokensWith applies a predicate to check if query has an edge api_tokens with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasAPITokensWith(preds ...predicate.APIToken) {
	f.Where(entql.HasEdgeWith("api_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthprovider applies a predicate to check if query has an edge oauthprovider.
func (f *OrganizationFilter) WhereHasOauthprovider() {
	f.Where(entql.HasEdge("oauthprovider"))
}

// WhereHasOauthproviderWith applies a predicate to check if query has an edge oauthprovider with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOauthproviderWith(preds ...predicate.OauthProvider) {
	f.Where(entql.HasEdgeWith("oauthprovider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *OrganizationFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInvites applies a predicate to check if query has an edge invites.
func (f *OrganizationFilter) WhereHasInvites() {
	f.Where(entql.HasEdge("invites"))
}

// WhereHasInvitesWith applies a predicate to check if query has an edge invites with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasInvitesWith(preds ...predicate.Invite) {
	f.Where(entql.HasEdgeWith("invites", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribers applies a predicate to check if query has an edge subscribers.
func (f *OrganizationFilter) WhereHasSubscribers() {
	f.Where(entql.HasEdge("subscribers"))
}

// WhereHasSubscribersWith applies a predicate to check if query has an edge subscribers with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSubscribersWith(preds ...predicate.Subscriber) {
	f.Where(entql.HasEdgeWith("subscribers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWebhooks applies a predicate to check if query has an edge webhooks.
func (f *OrganizationFilter) WhereHasWebhooks() {
	f.Where(entql.HasEdge("webhooks"))
}

// WhereHasWebhooksWith applies a predicate to check if query has an edge webhooks with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasWebhooksWith(preds ...predicate.Webhook) {
	f.Where(entql.HasEdgeWith("webhooks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *OrganizationFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSecrets applies a predicate to check if query has an edge secrets.
func (f *OrganizationFilter) WhereHasSecrets() {
	f.Where(entql.HasEdge("secrets"))
}

// WhereHasSecretsWith applies a predicate to check if query has an edge secrets with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSecretsWith(preds ...predicate.Hush) {
	f.Where(entql.HasEdgeWith("secrets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeatures applies a predicate to check if query has an edge features.
func (f *OrganizationFilter) WhereHasFeatures() {
	f.Where(entql.HasEdge("features"))
}

// WhereHasFeaturesWith applies a predicate to check if query has an edge features with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasFeaturesWith(preds ...predicate.Feature) {
	f.Where(entql.HasEdgeWith("features", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *OrganizationFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlementplans applies a predicate to check if query has an edge entitlementplans.
func (f *OrganizationFilter) WhereHasEntitlementplans() {
	f.Where(entql.HasEdge("entitlementplans"))
}

// WhereHasEntitlementplansWith applies a predicate to check if query has an edge entitlementplans with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntitlementplansWith(preds ...predicate.EntitlementPlan) {
	f.Where(entql.HasEdgeWith("entitlementplans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlementplanfeatures applies a predicate to check if query has an edge entitlementplanfeatures.
func (f *OrganizationFilter) WhereHasEntitlementplanfeatures() {
	f.Where(entql.HasEdge("entitlementplanfeatures"))
}

// WhereHasEntitlementplanfeaturesWith applies a predicate to check if query has an edge entitlementplanfeatures with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntitlementplanfeaturesWith(preds ...predicate.EntitlementPlanFeature) {
	f.Where(entql.HasEdgeWith("entitlementplanfeatures", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntities applies a predicate to check if query has an edge entities.
func (f *OrganizationFilter) WhereHasEntities() {
	f.Where(entql.HasEdge("entities"))
}

// WhereHasEntitiesWith applies a predicate to check if query has an edge entities with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntitiesWith(preds ...predicate.Entity) {
	f.Where(entql.HasEdgeWith("entities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitytypes applies a predicate to check if query has an edge entitytypes.
func (f *OrganizationFilter) WhereHasEntitytypes() {
	f.Where(entql.HasEdge("entitytypes"))
}

// WhereHasEntitytypesWith applies a predicate to check if query has an edge entitytypes with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntitytypesWith(preds ...predicate.EntityType) {
	f.Where(entql.HasEdgeWith("entitytypes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContacts applies a predicate to check if query has an edge contacts.
func (f *OrganizationFilter) WhereHasContacts() {
	f.Where(entql.HasEdge("contacts"))
}

// WhereHasContactsWith applies a predicate to check if query has an edge contacts with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasContactsWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotes applies a predicate to check if query has an edge notes.
func (f *OrganizationFilter) WhereHasNotes() {
	f.Where(entql.HasEdge("notes"))
}

// WhereHasNotesWith applies a predicate to check if query has an edge notes with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasNotesWith(preds ...predicate.Note) {
	f.Where(entql.HasEdgeWith("notes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *OrganizationFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasMembersWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ohq *OrganizationHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ohq.predicates = append(ohq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationHistoryQuery builder.
func (ohq *OrganizationHistoryQuery) Filter() *OrganizationHistoryFilter {
	return &OrganizationHistoryFilter{config: ohq.config, predicateAdder: ohq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationHistoryMutation builder.
func (m *OrganizationHistoryMutation) Filter() *OrganizationHistoryFilter {
	return &OrganizationHistoryFilter{config: m.config, predicateAdder: m}
}

// OrganizationHistoryFilter provides a generic filtering capability at runtime for OrganizationHistoryQuery.
type OrganizationHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OrganizationHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OrganizationHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OrganizationHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OrganizationHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organizationhistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *OrganizationHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OrganizationHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldDescription))
}

// WhereParentOrganizationID applies the entql string predicate on the parent_organization_id field.
func (f *OrganizationHistoryFilter) WhereParentOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldParentOrganizationID))
}

// WherePersonalOrg applies the entql bool predicate on the personal_org field.
func (f *OrganizationHistoryFilter) WherePersonalOrg(p entql.BoolP) {
	f.Where(p.Field(organizationhistory.FieldPersonalOrg))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *OrganizationHistoryFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(organizationhistory.FieldAvatarRemoteURL))
}

// WhereDedicatedDb applies the entql bool predicate on the dedicated_db field.
func (f *OrganizationHistoryFilter) WhereDedicatedDb(p entql.BoolP) {
	f.Where(p.Field(organizationhistory.FieldDedicatedDb))
}

// addPredicate implements the predicateAdder interface.
func (osq *OrganizationSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationSettingQuery builder.
func (osq *OrganizationSettingQuery) Filter() *OrganizationSettingFilter {
	return &OrganizationSettingFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationSettingMutation builder.
func (m *OrganizationSettingMutation) Filter() *OrganizationSettingFilter {
	return &OrganizationSettingFilter{config: m.config, predicateAdder: m}
}

// OrganizationSettingFilter provides a generic filtering capability at runtime for OrganizationSettingQuery.
type OrganizationSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OrganizationSettingFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldDeletedBy))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *OrganizationSettingFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldDomains))
}

// WhereBillingContact applies the entql string predicate on the billing_contact field.
func (f *OrganizationSettingFilter) WhereBillingContact(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingContact))
}

// WhereBillingEmail applies the entql string predicate on the billing_email field.
func (f *OrganizationSettingFilter) WhereBillingEmail(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingEmail))
}

// WhereBillingPhone applies the entql string predicate on the billing_phone field.
func (f *OrganizationSettingFilter) WhereBillingPhone(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingPhone))
}

// WhereBillingAddress applies the entql string predicate on the billing_address field.
func (f *OrganizationSettingFilter) WhereBillingAddress(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingAddress))
}

// WhereTaxIdentifier applies the entql string predicate on the tax_identifier field.
func (f *OrganizationSettingFilter) WhereTaxIdentifier(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldTaxIdentifier))
}

// WhereGeoLocation applies the entql string predicate on the geo_location field.
func (f *OrganizationSettingFilter) WhereGeoLocation(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldGeoLocation))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrganizationSettingFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldOrganizationID))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrganizationSettingFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrganizationSettingFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *OrganizationSettingFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *OrganizationSettingFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oshq *OrganizationSettingHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	oshq.predicates = append(oshq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationSettingHistoryQuery builder.
func (oshq *OrganizationSettingHistoryQuery) Filter() *OrganizationSettingHistoryFilter {
	return &OrganizationSettingHistoryFilter{config: oshq.config, predicateAdder: oshq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationSettingHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationSettingHistoryMutation builder.
func (m *OrganizationSettingHistoryMutation) Filter() *OrganizationSettingHistoryFilter {
	return &OrganizationSettingHistoryFilter{config: m.config, predicateAdder: m}
}

// OrganizationSettingHistoryFilter provides a generic filtering capability at runtime for OrganizationSettingHistoryQuery.
type OrganizationSettingHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationSettingHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationSettingHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *OrganizationSettingHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *OrganizationSettingHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *OrganizationSettingHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationSettingHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationSettingHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationSettingHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationSettingHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *OrganizationSettingHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationSettingHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organizationsettinghistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationSettingHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsettinghistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationSettingHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldDeletedBy))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *OrganizationSettingHistoryFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(organizationsettinghistory.FieldDomains))
}

// WhereBillingContact applies the entql string predicate on the billing_contact field.
func (f *OrganizationSettingHistoryFilter) WhereBillingContact(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingContact))
}

// WhereBillingEmail applies the entql string predicate on the billing_email field.
func (f *OrganizationSettingHistoryFilter) WhereBillingEmail(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingEmail))
}

// WhereBillingPhone applies the entql string predicate on the billing_phone field.
func (f *OrganizationSettingHistoryFilter) WhereBillingPhone(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingPhone))
}

// WhereBillingAddress applies the entql string predicate on the billing_address field.
func (f *OrganizationSettingHistoryFilter) WhereBillingAddress(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldBillingAddress))
}

// WhereTaxIdentifier applies the entql string predicate on the tax_identifier field.
func (f *OrganizationSettingHistoryFilter) WhereTaxIdentifier(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldTaxIdentifier))
}

// WhereGeoLocation applies the entql string predicate on the geo_location field.
func (f *OrganizationSettingHistoryFilter) WhereGeoLocation(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldGeoLocation))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrganizationSettingHistoryFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationsettinghistory.FieldOrganizationID))
}

// addPredicate implements the predicateAdder interface.
func (prtq *PasswordResetTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	prtq.predicates = append(prtq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PasswordResetTokenQuery builder.
func (prtq *PasswordResetTokenQuery) Filter() *PasswordResetTokenFilter {
	return &PasswordResetTokenFilter{config: prtq.config, predicateAdder: prtq}
}

// addPredicate implements the predicateAdder interface.
func (m *PasswordResetTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PasswordResetTokenMutation builder.
func (m *PasswordResetTokenMutation) Filter() *PasswordResetTokenFilter {
	return &PasswordResetTokenFilter{config: m.config, predicateAdder: m}
}

// PasswordResetTokenFilter provides a generic filtering capability at runtime for PasswordResetTokenQuery.
type PasswordResetTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PasswordResetTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PasswordResetTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PasswordResetTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PasswordResetTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PasswordResetTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *PasswordResetTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *PasswordResetTokenFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PasswordResetTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *PasswordResetTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *PasswordResetTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *PasswordResetTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *PasswordResetTokenFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldTTL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *PasswordResetTokenFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldEmail))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *PasswordResetTokenFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(passwordresettoken.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *PasswordResetTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *PasswordResetTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (patq *PersonalAccessTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	patq.predicates = append(patq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonalAccessTokenQuery builder.
func (patq *PersonalAccessTokenQuery) Filter() *PersonalAccessTokenFilter {
	return &PersonalAccessTokenFilter{config: patq.config, predicateAdder: patq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonalAccessTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonalAccessTokenMutation builder.
func (m *PersonalAccessTokenMutation) Filter() *PersonalAccessTokenFilter {
	return &PersonalAccessTokenFilter{config: m.config, predicateAdder: m}
}

// PersonalAccessTokenFilter provides a generic filtering capability at runtime for PersonalAccessTokenQuery.
type PersonalAccessTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PersonalAccessTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PersonalAccessTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonalAccessTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonalAccessTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PersonalAccessTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *PersonalAccessTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonalAccessTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *PersonalAccessTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *PersonalAccessTokenFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *PersonalAccessTokenFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(personalaccesstoken.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *PersonalAccessTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonalAccessTokenFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldName))
}

// WhereToken applies the entql string predicate on the token field.
func (f *PersonalAccessTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *PersonalAccessTokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldExpiresAt))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PersonalAccessTokenFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldDescription))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *PersonalAccessTokenFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(personalaccesstoken.FieldScopes))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *PersonalAccessTokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldLastUsedAt))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *PersonalAccessTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *PersonalAccessTokenFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *PersonalAccessTokenFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SubscriberQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscriberQuery builder.
func (sq *SubscriberQuery) Filter() *SubscriberFilter {
	return &SubscriberFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscriberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscriberMutation builder.
func (m *SubscriberMutation) Filter() *SubscriberFilter {
	return &SubscriberFilter{config: m.config, predicateAdder: m}
}

// SubscriberFilter provides a generic filtering capability at runtime for SubscriberQuery.
type SubscriberFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscriberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SubscriberFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscriberFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscriberFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *SubscriberFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *SubscriberFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *SubscriberFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *SubscriberFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(subscriber.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscriberFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *SubscriberFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *SubscriberFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldOwnerID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *SubscriberFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *SubscriberFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldPhoneNumber))
}

// WhereVerifiedEmail applies the entql bool predicate on the verified_email field.
func (f *SubscriberFilter) WhereVerifiedEmail(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldVerifiedEmail))
}

// WhereVerifiedPhone applies the entql bool predicate on the verified_phone field.
func (f *SubscriberFilter) WhereVerifiedPhone(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldVerifiedPhone))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *SubscriberFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(subscriber.FieldActive))
}

// WhereToken applies the entql string predicate on the token field.
func (f *SubscriberFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(subscriber.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *SubscriberFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(subscriber.FieldTTL))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *SubscriberFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(subscriber.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *SubscriberFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *SubscriberFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *SubscriberFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *SubscriberFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tsq *TFASettingQuery) addPredicate(pred func(s *sql.Selector)) {
	tsq.predicates = append(tsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TFASettingQuery builder.
func (tsq *TFASettingQuery) Filter() *TFASettingFilter {
	return &TFASettingFilter{config: tsq.config, predicateAdder: tsq}
}

// addPredicate implements the predicateAdder interface.
func (m *TFASettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TFASettingMutation builder.
func (m *TFASettingMutation) Filter() *TFASettingFilter {
	return &TFASettingFilter{config: m.config, predicateAdder: m}
}

// TFASettingFilter provides a generic filtering capability at runtime for TFASettingQuery.
type TFASettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TFASettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[47].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TFASettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TFASettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tfasetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TFASettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tfasetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TFASettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TFASettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *TFASettingFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TFASettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(tfasetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TFASettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldDeletedBy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TFASettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(tfasetting.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TFASettingFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldOwnerID))
}

// WhereTfaSecret applies the entql string predicate on the tfa_secret field.
func (f *TFASettingFilter) WhereTfaSecret(p entql.StringP) {
	f.Where(p.Field(tfasetting.FieldTfaSecret))
}

// WhereVerified applies the entql bool predicate on the verified field.
func (f *TFASettingFilter) WhereVerified(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldVerified))
}

// WhereRecoveryCodes applies the entql json.RawMessage predicate on the recovery_codes field.
func (f *TFASettingFilter) WhereRecoveryCodes(p entql.BytesP) {
	f.Where(p.Field(tfasetting.FieldRecoveryCodes))
}

// WherePhoneOtpAllowed applies the entql bool predicate on the phone_otp_allowed field.
func (f *TFASettingFilter) WherePhoneOtpAllowed(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldPhoneOtpAllowed))
}

// WhereEmailOtpAllowed applies the entql bool predicate on the email_otp_allowed field.
func (f *TFASettingFilter) WhereEmailOtpAllowed(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldEmailOtpAllowed))
}

// WhereTotpAllowed applies the entql bool predicate on the totp_allowed field.
func (f *TFASettingFilter) WhereTotpAllowed(p entql.BoolP) {
	f.Where(p.Field(tfasetting.FieldTotpAllowed))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TFASettingFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TFASettingFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TemplateQuery builder.
func (tq *TemplateQuery) Filter() *TemplateFilter {
	return &TemplateFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TemplateMutation builder.
func (m *TemplateMutation) Filter() *TemplateFilter {
	return &TemplateFilter{config: m.config, predicateAdder: m}
}

// TemplateFilter provides a generic filtering capability at runtime for TemplateQuery.
type TemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[48].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TemplateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(template.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(template.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(template.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TemplateFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(template.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TemplateFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(template.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TemplateFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(template.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TemplateFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(template.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *TemplateFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(template.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TemplateFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(template.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TemplateFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(template.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TemplateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(template.FieldName))
}

// WhereTemplateType applies the entql string predicate on the template_type field.
func (f *TemplateFilter) WhereTemplateType(p entql.StringP) {
	f.Where(p.Field(template.FieldTemplateType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *TemplateFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(template.FieldDescription))
}

// WhereJsonconfig applies the entql json.RawMessage predicate on the jsonconfig field.
func (f *TemplateFilter) WhereJsonconfig(p entql.BytesP) {
	f.Where(p.Field(template.FieldJsonconfig))
}

// WhereUischema applies the entql json.RawMessage predicate on the uischema field.
func (f *TemplateFilter) WhereUischema(p entql.BytesP) {
	f.Where(p.Field(template.FieldUischema))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TemplateFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TemplateFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocuments applies a predicate to check if query has an edge documents.
func (f *TemplateFilter) WhereHasDocuments() {
	f.Where(entql.HasEdge("documents"))
}

// WhereHasDocumentsWith applies a predicate to check if query has an edge documents with a given conditions (other predicates).
func (f *TemplateFilter) WhereHasDocumentsWith(preds ...predicate.DocumentData) {
	f.Where(entql.HasEdgeWith("documents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *TemplateFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *TemplateFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (thq *TemplateHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	thq.predicates = append(thq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TemplateHistoryQuery builder.
func (thq *TemplateHistoryQuery) Filter() *TemplateHistoryFilter {
	return &TemplateHistoryFilter{config: thq.config, predicateAdder: thq}
}

// addPredicate implements the predicateAdder interface.
func (m *TemplateHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TemplateHistoryMutation builder.
func (m *TemplateHistoryMutation) Filter() *TemplateHistoryFilter {
	return &TemplateHistoryFilter{config: m.config, predicateAdder: m}
}

// TemplateHistoryFilter provides a generic filtering capability at runtime for TemplateHistoryQuery.
type TemplateHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TemplateHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[49].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TemplateHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TemplateHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *TemplateHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TemplateHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TemplateHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TemplateHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *TemplateHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *TemplateHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TemplateHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(templatehistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *TemplateHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *TemplateHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *TemplateHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(templatehistory.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *TemplateHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TemplateHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldName))
}

// WhereTemplateType applies the entql string predicate on the template_type field.
func (f *TemplateHistoryFilter) WhereTemplateType(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldTemplateType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *TemplateHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(templatehistory.FieldDescription))
}

// WhereJsonconfig applies the entql json.RawMessage predicate on the jsonconfig field.
func (f *TemplateHistoryFilter) WhereJsonconfig(p entql.BytesP) {
	f.Where(p.Field(templatehistory.FieldJsonconfig))
}

// WhereUischema applies the entql json.RawMessage predicate on the uischema field.
func (f *TemplateHistoryFilter) WhereUischema(p entql.BytesP) {
	f.Where(p.Field(templatehistory.FieldUischema))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[50].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *UserFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(user.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(user.FieldTags))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *UserFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(user.FieldDisplayName))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *UserFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFile applies the entql string predicate on the avatar_local_file field.
func (f *UserFilter) WhereAvatarLocalFile(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarLocalFile))
}

// WhereAvatarLocalFileID applies the entql string predicate on the avatar_local_file_id field.
func (f *UserFilter) WhereAvatarLocalFileID(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarLocalFileID))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *UserFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldAvatarUpdatedAt))
}

// WhereLastSeen applies the entql time.Time predicate on the last_seen field.
func (f *UserFilter) WhereLastSeen(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastSeen))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereSub applies the entql string predicate on the sub field.
func (f *UserFilter) WhereSub(p entql.StringP) {
	f.Where(p.Field(user.FieldSub))
}

// WhereAuthProvider applies the entql string predicate on the auth_provider field.
func (f *UserFilter) WhereAuthProvider(p entql.StringP) {
	f.Where(p.Field(user.FieldAuthProvider))
}

// WhereRole applies the entql string predicate on the role field.
func (f *UserFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(user.FieldRole))
}

// WhereHasPersonalAccessTokens applies a predicate to check if query has an edge personal_access_tokens.
func (f *UserFilter) WhereHasPersonalAccessTokens() {
	f.Where(entql.HasEdge("personal_access_tokens"))
}

// WhereHasPersonalAccessTokensWith applies a predicate to check if query has an edge personal_access_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTfaSettings applies a predicate to check if query has an edge tfa_settings.
func (f *UserFilter) WhereHasTfaSettings() {
	f.Where(entql.HasEdge("tfa_settings"))
}

// WhereHasTfaSettingsWith applies a predicate to check if query has an edge tfa_settings with a given conditions (other predicates).
func (f *UserFilter) WhereHasTfaSettingsWith(preds ...predicate.TFASetting) {
	f.Where(entql.HasEdgeWith("tfa_settings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *UserFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *UserFilter) WhereHasSettingWith(preds ...predicate.UserSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailVerificationTokens applies a predicate to check if query has an edge email_verification_tokens.
func (f *UserFilter) WhereHasEmailVerificationTokens() {
	f.Where(entql.HasEdge("email_verification_tokens"))
}

// WhereHasEmailVerificationTokensWith applies a predicate to check if query has an edge email_verification_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasEmailVerificationTokensWith(preds ...predicate.EmailVerificationToken) {
	f.Where(entql.HasEdgeWith("email_verification_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPasswordResetTokens applies a predicate to check if query has an edge password_reset_tokens.
func (f *UserFilter) WhereHasPasswordResetTokens() {
	f.Where(entql.HasEdge("password_reset_tokens"))
}

// WhereHasPasswordResetTokensWith applies a predicate to check if query has an edge password_reset_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasPasswordResetTokensWith(preds ...predicate.PasswordResetToken) {
	f.Where(entql.HasEdgeWith("password_reset_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *UserFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *UserFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *UserFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWebauthn applies a predicate to check if query has an edge webauthn.
func (f *UserFilter) WhereHasWebauthn() {
	f.Where(entql.HasEdge("webauthn"))
}

// WhereHasWebauthnWith applies a predicate to check if query has an edge webauthn with a given conditions (other predicates).
func (f *UserFilter) WhereHasWebauthnWith(preds ...predicate.Webauthn) {
	f.Where(entql.HasEdgeWith("webauthn", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *UserFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *UserFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFile applies a predicate to check if query has an edge file.
func (f *UserFilter) WhereHasFile() {
	f.Where(entql.HasEdge("file"))
}

// WhereHasFileWith applies a predicate to check if query has an edge file with a given conditions (other predicates).
func (f *UserFilter) WhereHasFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *UserFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *UserFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupMemberships applies a predicate to check if query has an edge group_memberships.
func (f *UserFilter) WhereHasGroupMemberships() {
	f.Where(entql.HasEdge("group_memberships"))
}

// WhereHasGroupMembershipsWith applies a predicate to check if query has an edge group_memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasGroupMembershipsWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("group_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgMemberships applies a predicate to check if query has an edge org_memberships.
func (f *UserFilter) WhereHasOrgMemberships() {
	f.Where(entql.HasEdge("org_memberships"))
}

// WhereHasOrgMembershipsWith applies a predicate to check if query has an edge org_memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrgMembershipsWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("org_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uhq *UserHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	uhq.predicates = append(uhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserHistoryQuery builder.
func (uhq *UserHistoryQuery) Filter() *UserHistoryFilter {
	return &UserHistoryFilter{config: uhq.config, predicateAdder: uhq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserHistoryMutation builder.
func (m *UserHistoryMutation) Filter() *UserHistoryFilter {
	return &UserHistoryFilter{config: m.config, predicateAdder: m}
}

// UserHistoryFilter provides a generic filtering capability at runtime for UserHistoryQuery.
type UserHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[51].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *UserHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *UserHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *UserHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *UserHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(userhistory.FieldTags))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserHistoryFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldEmail))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserHistoryFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserHistoryFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldLastName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *UserHistoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldDisplayName))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *UserHistoryFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFile applies the entql string predicate on the avatar_local_file field.
func (f *UserHistoryFilter) WhereAvatarLocalFile(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldAvatarLocalFile))
}

// WhereAvatarLocalFileID applies the entql string predicate on the avatar_local_file_id field.
func (f *UserHistoryFilter) WhereAvatarLocalFileID(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldAvatarLocalFileID))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *UserHistoryFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldAvatarUpdatedAt))
}

// WhereLastSeen applies the entql time.Time predicate on the last_seen field.
func (f *UserHistoryFilter) WhereLastSeen(p entql.TimeP) {
	f.Where(p.Field(userhistory.FieldLastSeen))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserHistoryFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldPassword))
}

// WhereSub applies the entql string predicate on the sub field.
func (f *UserHistoryFilter) WhereSub(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldSub))
}

// WhereAuthProvider applies the entql string predicate on the auth_provider field.
func (f *UserHistoryFilter) WhereAuthProvider(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldAuthProvider))
}

// WhereRole applies the entql string predicate on the role field.
func (f *UserHistoryFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(userhistory.FieldRole))
}

// addPredicate implements the predicateAdder interface.
func (usq *UserSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	usq.predicates = append(usq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSettingQuery builder.
func (usq *UserSettingQuery) Filter() *UserSettingFilter {
	return &UserSettingFilter{config: usq.config, predicateAdder: usq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSettingMutation builder.
func (m *UserSettingMutation) Filter() *UserSettingFilter {
	return &UserSettingFilter{config: m.config, predicateAdder: m}
}

// UserSettingFilter provides a generic filtering capability at runtime for UserSettingQuery.
type UserSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[52].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *UserSettingFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(usersetting.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldDeletedBy))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserSettingFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldUserID))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *UserSettingFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldLocked))
}

// WhereSilencedAt applies the entql time.Time predicate on the silenced_at field.
func (f *UserSettingFilter) WhereSilencedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldSilencedAt))
}

// WhereSuspendedAt applies the entql time.Time predicate on the suspended_at field.
func (f *UserSettingFilter) WhereSuspendedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldSuspendedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserSettingFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldStatus))
}

// WhereEmailConfirmed applies the entql bool predicate on the email_confirmed field.
func (f *UserSettingFilter) WhereEmailConfirmed(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldEmailConfirmed))
}

// WhereIsWebauthnAllowed applies the entql bool predicate on the is_webauthn_allowed field.
func (f *UserSettingFilter) WhereIsWebauthnAllowed(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldIsWebauthnAllowed))
}

// WhereIsTfaEnabled applies the entql bool predicate on the is_tfa_enabled field.
func (f *UserSettingFilter) WhereIsTfaEnabled(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldIsTfaEnabled))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserSettingFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldPhoneNumber))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserSettingFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultOrg applies a predicate to check if query has an edge default_org.
func (f *UserSettingFilter) WhereHasDefaultOrg() {
	f.Where(entql.HasEdge("default_org"))
}

// WhereHasDefaultOrgWith applies a predicate to check if query has an edge default_org with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasDefaultOrgWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("default_org", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *UserSettingFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ushq *UserSettingHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ushq.predicates = append(ushq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSettingHistoryQuery builder.
func (ushq *UserSettingHistoryQuery) Filter() *UserSettingHistoryFilter {
	return &UserSettingHistoryFilter{config: ushq.config, predicateAdder: ushq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSettingHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSettingHistoryMutation builder.
func (m *UserSettingHistoryMutation) Filter() *UserSettingHistoryFilter {
	return &UserSettingHistoryFilter{config: m.config, predicateAdder: m}
}

// UserSettingHistoryFilter provides a generic filtering capability at runtime for UserSettingHistoryQuery.
type UserSettingHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSettingHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[53].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserSettingHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *UserSettingHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *UserSettingHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *UserSettingHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserSettingHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserSettingHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserSettingHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserSettingHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *UserSettingHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserSettingHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(usersettinghistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserSettingHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserSettingHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldDeletedBy))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserSettingHistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldUserID))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *UserSettingHistoryFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldLocked))
}

// WhereSilencedAt applies the entql time.Time predicate on the silenced_at field.
func (f *UserSettingHistoryFilter) WhereSilencedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldSilencedAt))
}

// WhereSuspendedAt applies the entql time.Time predicate on the suspended_at field.
func (f *UserSettingHistoryFilter) WhereSuspendedAt(p entql.TimeP) {
	f.Where(p.Field(usersettinghistory.FieldSuspendedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserSettingHistoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldStatus))
}

// WhereEmailConfirmed applies the entql bool predicate on the email_confirmed field.
func (f *UserSettingHistoryFilter) WhereEmailConfirmed(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldEmailConfirmed))
}

// WhereIsWebauthnAllowed applies the entql bool predicate on the is_webauthn_allowed field.
func (f *UserSettingHistoryFilter) WhereIsWebauthnAllowed(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldIsWebauthnAllowed))
}

// WhereIsTfaEnabled applies the entql bool predicate on the is_tfa_enabled field.
func (f *UserSettingHistoryFilter) WhereIsTfaEnabled(p entql.BoolP) {
	f.Where(p.Field(usersettinghistory.FieldIsTfaEnabled))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserSettingHistoryFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(usersettinghistory.FieldPhoneNumber))
}

// addPredicate implements the predicateAdder interface.
func (wq *WebauthnQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WebauthnQuery builder.
func (wq *WebauthnQuery) Filter() *WebauthnFilter {
	return &WebauthnFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WebauthnMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WebauthnMutation builder.
func (m *WebauthnMutation) Filter() *WebauthnFilter {
	return &WebauthnFilter{config: m.config, predicateAdder: m}
}

// WebauthnFilter provides a generic filtering capability at runtime for WebauthnQuery.
type WebauthnFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WebauthnFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[54].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WebauthnFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WebauthnFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(webauthn.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WebauthnFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(webauthn.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *WebauthnFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *WebauthnFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *WebauthnFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *WebauthnFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldTags))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *WebauthnFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldOwnerID))
}

// WhereCredentialID applies the entql []byte predicate on the credential_id field.
func (f *WebauthnFilter) WhereCredentialID(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldCredentialID))
}

// WherePublicKey applies the entql []byte predicate on the public_key field.
func (f *WebauthnFilter) WherePublicKey(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldPublicKey))
}

// WhereAttestationType applies the entql string predicate on the attestation_type field.
func (f *WebauthnFilter) WhereAttestationType(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldAttestationType))
}

// WhereAaguid applies the entql []byte predicate on the aaguid field.
func (f *WebauthnFilter) WhereAaguid(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldAaguid))
}

// WhereSignCount applies the entql int32 predicate on the sign_count field.
func (f *WebauthnFilter) WhereSignCount(p entql.Int32P) {
	f.Where(p.Field(webauthn.FieldSignCount))
}

// WhereTransports applies the entql json.RawMessage predicate on the transports field.
func (f *WebauthnFilter) WhereTransports(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldTransports))
}

// WhereBackupEligible applies the entql bool predicate on the backup_eligible field.
func (f *WebauthnFilter) WhereBackupEligible(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldBackupEligible))
}

// WhereBackupState applies the entql bool predicate on the backup_state field.
func (f *WebauthnFilter) WhereBackupState(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldBackupState))
}

// WhereUserPresent applies the entql bool predicate on the user_present field.
func (f *WebauthnFilter) WhereUserPresent(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldUserPresent))
}

// WhereUserVerified applies the entql bool predicate on the user_verified field.
func (f *WebauthnFilter) WhereUserVerified(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldUserVerified))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *WebauthnFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *WebauthnFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wq *WebhookQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WebhookQuery builder.
func (wq *WebhookQuery) Filter() *WebhookFilter {
	return &WebhookFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WebhookMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WebhookMutation builder.
func (m *WebhookMutation) Filter() *WebhookFilter {
	return &WebhookFilter{config: m.config, predicateAdder: m}
}

// WebhookFilter provides a generic filtering capability at runtime for WebhookQuery.
type WebhookFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WebhookFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[55].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WebhookFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(webhook.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WebhookFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(webhook.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WebhookFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(webhook.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *WebhookFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(webhook.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *WebhookFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(webhook.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *WebhookFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(webhook.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *WebhookFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(webhook.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *WebhookFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(webhook.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *WebhookFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(webhook.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *WebhookFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(webhook.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *WebhookFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(webhook.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *WebhookFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(webhook.FieldDescription))
}

// WhereDestinationURL applies the entql string predicate on the destination_url field.
func (f *WebhookFilter) WhereDestinationURL(p entql.StringP) {
	f.Where(p.Field(webhook.FieldDestinationURL))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *WebhookFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(webhook.FieldEnabled))
}

// WhereCallback applies the entql string predicate on the callback field.
func (f *WebhookFilter) WhereCallback(p entql.StringP) {
	f.Where(p.Field(webhook.FieldCallback))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *WebhookFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(webhook.FieldExpiresAt))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *WebhookFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(webhook.FieldSecret))
}

// WhereFailures applies the entql int predicate on the failures field.
func (f *WebhookFilter) WhereFailures(p entql.IntP) {
	f.Where(p.Field(webhook.FieldFailures))
}

// WhereLastError applies the entql string predicate on the last_error field.
func (f *WebhookFilter) WhereLastError(p entql.StringP) {
	f.Where(p.Field(webhook.FieldLastError))
}

// WhereLastResponse applies the entql string predicate on the last_response field.
func (f *WebhookFilter) WhereLastResponse(p entql.StringP) {
	f.Where(p.Field(webhook.FieldLastResponse))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *WebhookFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *WebhookFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *WebhookFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *WebhookFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *WebhookFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *WebhookFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (whq *WebhookHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	whq.predicates = append(whq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WebhookHistoryQuery builder.
func (whq *WebhookHistoryQuery) Filter() *WebhookHistoryFilter {
	return &WebhookHistoryFilter{config: whq.config, predicateAdder: whq}
}

// addPredicate implements the predicateAdder interface.
func (m *WebhookHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WebhookHistoryMutation builder.
func (m *WebhookHistoryMutation) Filter() *WebhookHistoryFilter {
	return &WebhookHistoryFilter{config: m.config, predicateAdder: m}
}

// WebhookHistoryFilter provides a generic filtering capability at runtime for WebhookHistoryQuery.
type WebhookHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WebhookHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[56].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WebhookHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *WebhookHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(webhookhistory.FieldHistoryTime))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *WebhookHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldRef))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *WebhookHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldOperation))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WebhookHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(webhookhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WebhookHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(webhookhistory.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *WebhookHistoryFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *WebhookHistoryFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *WebhookHistoryFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldMappingID))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *WebhookHistoryFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(webhookhistory.FieldTags))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *WebhookHistoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(webhookhistory.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *WebhookHistoryFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *WebhookHistoryFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *WebhookHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *WebhookHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldDescription))
}

// WhereDestinationURL applies the entql string predicate on the destination_url field.
func (f *WebhookHistoryFilter) WhereDestinationURL(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldDestinationURL))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *WebhookHistoryFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(webhookhistory.FieldEnabled))
}

// WhereCallback applies the entql string predicate on the callback field.
func (f *WebhookHistoryFilter) WhereCallback(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldCallback))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *WebhookHistoryFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(webhookhistory.FieldExpiresAt))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *WebhookHistoryFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(webhookhistory.FieldSecret))
}

// WhereFailures applies the entql int predicate on the failures field.
func (f *WebhookHistoryFilter) WhereFailures(p entql.IntP) {
	f.Where(p.Field(webhookhistory.FieldFailures))
}

// WhereLastError applies the entql string predicate on the last_error field.
func (f *WebhookHistoryFilter) WhereLastError(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldLastError))
}

// WhereLastResponse applies the entql string predicate on the last_response field.
func (f *WebhookHistoryFilter) WhereLastResponse(p entql.StringP) {
	f.Where(p.Field(webhookhistory.FieldLastResponse))
}
