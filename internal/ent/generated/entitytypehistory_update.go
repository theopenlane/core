// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// EntityTypeHistoryUpdate is the builder for updating EntityTypeHistory entities.
type EntityTypeHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *EntityTypeHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntityTypeHistoryUpdate builder.
func (ethu *EntityTypeHistoryUpdate) Where(ps ...predicate.EntityTypeHistory) *EntityTypeHistoryUpdate {
	ethu.mutation.Where(ps...)
	return ethu
}

// SetUpdatedAt sets the "updated_at" field.
func (ethu *EntityTypeHistoryUpdate) SetUpdatedAt(t time.Time) *EntityTypeHistoryUpdate {
	ethu.mutation.SetUpdatedAt(t)
	return ethu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ethu *EntityTypeHistoryUpdate) ClearUpdatedAt() *EntityTypeHistoryUpdate {
	ethu.mutation.ClearUpdatedAt()
	return ethu
}

// SetUpdatedBy sets the "updated_by" field.
func (ethu *EntityTypeHistoryUpdate) SetUpdatedBy(s string) *EntityTypeHistoryUpdate {
	ethu.mutation.SetUpdatedBy(s)
	return ethu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ethu *EntityTypeHistoryUpdate) SetNillableUpdatedBy(s *string) *EntityTypeHistoryUpdate {
	if s != nil {
		ethu.SetUpdatedBy(*s)
	}
	return ethu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ethu *EntityTypeHistoryUpdate) ClearUpdatedBy() *EntityTypeHistoryUpdate {
	ethu.mutation.ClearUpdatedBy()
	return ethu
}

// SetDeletedAt sets the "deleted_at" field.
func (ethu *EntityTypeHistoryUpdate) SetDeletedAt(t time.Time) *EntityTypeHistoryUpdate {
	ethu.mutation.SetDeletedAt(t)
	return ethu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ethu *EntityTypeHistoryUpdate) SetNillableDeletedAt(t *time.Time) *EntityTypeHistoryUpdate {
	if t != nil {
		ethu.SetDeletedAt(*t)
	}
	return ethu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ethu *EntityTypeHistoryUpdate) ClearDeletedAt() *EntityTypeHistoryUpdate {
	ethu.mutation.ClearDeletedAt()
	return ethu
}

// SetDeletedBy sets the "deleted_by" field.
func (ethu *EntityTypeHistoryUpdate) SetDeletedBy(s string) *EntityTypeHistoryUpdate {
	ethu.mutation.SetDeletedBy(s)
	return ethu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ethu *EntityTypeHistoryUpdate) SetNillableDeletedBy(s *string) *EntityTypeHistoryUpdate {
	if s != nil {
		ethu.SetDeletedBy(*s)
	}
	return ethu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ethu *EntityTypeHistoryUpdate) ClearDeletedBy() *EntityTypeHistoryUpdate {
	ethu.mutation.ClearDeletedBy()
	return ethu
}

// SetTags sets the "tags" field.
func (ethu *EntityTypeHistoryUpdate) SetTags(s []string) *EntityTypeHistoryUpdate {
	ethu.mutation.SetTags(s)
	return ethu
}

// AppendTags appends s to the "tags" field.
func (ethu *EntityTypeHistoryUpdate) AppendTags(s []string) *EntityTypeHistoryUpdate {
	ethu.mutation.AppendTags(s)
	return ethu
}

// ClearTags clears the value of the "tags" field.
func (ethu *EntityTypeHistoryUpdate) ClearTags() *EntityTypeHistoryUpdate {
	ethu.mutation.ClearTags()
	return ethu
}

// SetOwnerID sets the "owner_id" field.
func (ethu *EntityTypeHistoryUpdate) SetOwnerID(s string) *EntityTypeHistoryUpdate {
	ethu.mutation.SetOwnerID(s)
	return ethu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ethu *EntityTypeHistoryUpdate) SetNillableOwnerID(s *string) *EntityTypeHistoryUpdate {
	if s != nil {
		ethu.SetOwnerID(*s)
	}
	return ethu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ethu *EntityTypeHistoryUpdate) ClearOwnerID() *EntityTypeHistoryUpdate {
	ethu.mutation.ClearOwnerID()
	return ethu
}

// SetName sets the "name" field.
func (ethu *EntityTypeHistoryUpdate) SetName(s string) *EntityTypeHistoryUpdate {
	ethu.mutation.SetName(s)
	return ethu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ethu *EntityTypeHistoryUpdate) SetNillableName(s *string) *EntityTypeHistoryUpdate {
	if s != nil {
		ethu.SetName(*s)
	}
	return ethu
}

// Mutation returns the EntityTypeHistoryMutation object of the builder.
func (ethu *EntityTypeHistoryUpdate) Mutation() *EntityTypeHistoryMutation {
	return ethu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ethu *EntityTypeHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := ethu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ethu.sqlSave, ethu.mutation, ethu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ethu *EntityTypeHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ethu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ethu *EntityTypeHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ethu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ethu *EntityTypeHistoryUpdate) ExecX(ctx context.Context) {
	if err := ethu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ethu *EntityTypeHistoryUpdate) defaults() error {
	if _, ok := ethu.mutation.UpdatedAt(); !ok && !ethu.mutation.UpdatedAtCleared() {
		if entitytypehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitytypehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitytypehistory.UpdateDefaultUpdatedAt()
		ethu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ethu *EntityTypeHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntityTypeHistoryUpdate {
	ethu.modifiers = append(ethu.modifiers, modifiers...)
	return ethu
}

func (ethu *EntityTypeHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitytypehistory.Table, entitytypehistory.Columns, sqlgraph.NewFieldSpec(entitytypehistory.FieldID, field.TypeString))
	if ps := ethu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ethu.mutation.RefCleared() {
		_spec.ClearField(entitytypehistory.FieldRef, field.TypeString)
	}
	if ethu.mutation.CreatedAtCleared() {
		_spec.ClearField(entitytypehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ethu.mutation.UpdatedAt(); ok {
		_spec.SetField(entitytypehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ethu.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitytypehistory.FieldUpdatedAt, field.TypeTime)
	}
	if ethu.mutation.CreatedByCleared() {
		_spec.ClearField(entitytypehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ethu.mutation.UpdatedBy(); ok {
		_spec.SetField(entitytypehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ethu.mutation.UpdatedByCleared() {
		_spec.ClearField(entitytypehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ethu.mutation.DeletedAt(); ok {
		_spec.SetField(entitytypehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ethu.mutation.DeletedAtCleared() {
		_spec.ClearField(entitytypehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ethu.mutation.DeletedBy(); ok {
		_spec.SetField(entitytypehistory.FieldDeletedBy, field.TypeString, value)
	}
	if ethu.mutation.DeletedByCleared() {
		_spec.ClearField(entitytypehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ethu.mutation.Tags(); ok {
		_spec.SetField(entitytypehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ethu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitytypehistory.FieldTags, value)
		})
	}
	if ethu.mutation.TagsCleared() {
		_spec.ClearField(entitytypehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := ethu.mutation.OwnerID(); ok {
		_spec.SetField(entitytypehistory.FieldOwnerID, field.TypeString, value)
	}
	if ethu.mutation.OwnerIDCleared() {
		_spec.ClearField(entitytypehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ethu.mutation.Name(); ok {
		_spec.SetField(entitytypehistory.FieldName, field.TypeString, value)
	}
	_spec.Node.Schema = ethu.schemaConfig.EntityTypeHistory
	ctx = internal.NewSchemaConfigContext(ctx, ethu.schemaConfig)
	_spec.AddModifiers(ethu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ethu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitytypehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ethu.mutation.done = true
	return n, nil
}

// EntityTypeHistoryUpdateOne is the builder for updating a single EntityTypeHistory entity.
type EntityTypeHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntityTypeHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ethuo *EntityTypeHistoryUpdateOne) SetUpdatedAt(t time.Time) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.SetUpdatedAt(t)
	return ethuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ethuo *EntityTypeHistoryUpdateOne) ClearUpdatedAt() *EntityTypeHistoryUpdateOne {
	ethuo.mutation.ClearUpdatedAt()
	return ethuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ethuo *EntityTypeHistoryUpdateOne) SetUpdatedBy(s string) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.SetUpdatedBy(s)
	return ethuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ethuo *EntityTypeHistoryUpdateOne) SetNillableUpdatedBy(s *string) *EntityTypeHistoryUpdateOne {
	if s != nil {
		ethuo.SetUpdatedBy(*s)
	}
	return ethuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ethuo *EntityTypeHistoryUpdateOne) ClearUpdatedBy() *EntityTypeHistoryUpdateOne {
	ethuo.mutation.ClearUpdatedBy()
	return ethuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ethuo *EntityTypeHistoryUpdateOne) SetDeletedAt(t time.Time) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.SetDeletedAt(t)
	return ethuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ethuo *EntityTypeHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *EntityTypeHistoryUpdateOne {
	if t != nil {
		ethuo.SetDeletedAt(*t)
	}
	return ethuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ethuo *EntityTypeHistoryUpdateOne) ClearDeletedAt() *EntityTypeHistoryUpdateOne {
	ethuo.mutation.ClearDeletedAt()
	return ethuo
}

// SetDeletedBy sets the "deleted_by" field.
func (ethuo *EntityTypeHistoryUpdateOne) SetDeletedBy(s string) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.SetDeletedBy(s)
	return ethuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ethuo *EntityTypeHistoryUpdateOne) SetNillableDeletedBy(s *string) *EntityTypeHistoryUpdateOne {
	if s != nil {
		ethuo.SetDeletedBy(*s)
	}
	return ethuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ethuo *EntityTypeHistoryUpdateOne) ClearDeletedBy() *EntityTypeHistoryUpdateOne {
	ethuo.mutation.ClearDeletedBy()
	return ethuo
}

// SetTags sets the "tags" field.
func (ethuo *EntityTypeHistoryUpdateOne) SetTags(s []string) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.SetTags(s)
	return ethuo
}

// AppendTags appends s to the "tags" field.
func (ethuo *EntityTypeHistoryUpdateOne) AppendTags(s []string) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.AppendTags(s)
	return ethuo
}

// ClearTags clears the value of the "tags" field.
func (ethuo *EntityTypeHistoryUpdateOne) ClearTags() *EntityTypeHistoryUpdateOne {
	ethuo.mutation.ClearTags()
	return ethuo
}

// SetOwnerID sets the "owner_id" field.
func (ethuo *EntityTypeHistoryUpdateOne) SetOwnerID(s string) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.SetOwnerID(s)
	return ethuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ethuo *EntityTypeHistoryUpdateOne) SetNillableOwnerID(s *string) *EntityTypeHistoryUpdateOne {
	if s != nil {
		ethuo.SetOwnerID(*s)
	}
	return ethuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ethuo *EntityTypeHistoryUpdateOne) ClearOwnerID() *EntityTypeHistoryUpdateOne {
	ethuo.mutation.ClearOwnerID()
	return ethuo
}

// SetName sets the "name" field.
func (ethuo *EntityTypeHistoryUpdateOne) SetName(s string) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.SetName(s)
	return ethuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ethuo *EntityTypeHistoryUpdateOne) SetNillableName(s *string) *EntityTypeHistoryUpdateOne {
	if s != nil {
		ethuo.SetName(*s)
	}
	return ethuo
}

// Mutation returns the EntityTypeHistoryMutation object of the builder.
func (ethuo *EntityTypeHistoryUpdateOne) Mutation() *EntityTypeHistoryMutation {
	return ethuo.mutation
}

// Where appends a list predicates to the EntityTypeHistoryUpdate builder.
func (ethuo *EntityTypeHistoryUpdateOne) Where(ps ...predicate.EntityTypeHistory) *EntityTypeHistoryUpdateOne {
	ethuo.mutation.Where(ps...)
	return ethuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ethuo *EntityTypeHistoryUpdateOne) Select(field string, fields ...string) *EntityTypeHistoryUpdateOne {
	ethuo.fields = append([]string{field}, fields...)
	return ethuo
}

// Save executes the query and returns the updated EntityTypeHistory entity.
func (ethuo *EntityTypeHistoryUpdateOne) Save(ctx context.Context) (*EntityTypeHistory, error) {
	if err := ethuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ethuo.sqlSave, ethuo.mutation, ethuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ethuo *EntityTypeHistoryUpdateOne) SaveX(ctx context.Context) *EntityTypeHistory {
	node, err := ethuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ethuo *EntityTypeHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ethuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ethuo *EntityTypeHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ethuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ethuo *EntityTypeHistoryUpdateOne) defaults() error {
	if _, ok := ethuo.mutation.UpdatedAt(); !ok && !ethuo.mutation.UpdatedAtCleared() {
		if entitytypehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitytypehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitytypehistory.UpdateDefaultUpdatedAt()
		ethuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ethuo *EntityTypeHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntityTypeHistoryUpdateOne {
	ethuo.modifiers = append(ethuo.modifiers, modifiers...)
	return ethuo
}

func (ethuo *EntityTypeHistoryUpdateOne) sqlSave(ctx context.Context) (_node *EntityTypeHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitytypehistory.Table, entitytypehistory.Columns, sqlgraph.NewFieldSpec(entitytypehistory.FieldID, field.TypeString))
	id, ok := ethuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EntityTypeHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ethuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitytypehistory.FieldID)
		for _, f := range fields {
			if !entitytypehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != entitytypehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ethuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ethuo.mutation.RefCleared() {
		_spec.ClearField(entitytypehistory.FieldRef, field.TypeString)
	}
	if ethuo.mutation.CreatedAtCleared() {
		_spec.ClearField(entitytypehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ethuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entitytypehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ethuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitytypehistory.FieldUpdatedAt, field.TypeTime)
	}
	if ethuo.mutation.CreatedByCleared() {
		_spec.ClearField(entitytypehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ethuo.mutation.UpdatedBy(); ok {
		_spec.SetField(entitytypehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ethuo.mutation.UpdatedByCleared() {
		_spec.ClearField(entitytypehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ethuo.mutation.DeletedAt(); ok {
		_spec.SetField(entitytypehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ethuo.mutation.DeletedAtCleared() {
		_spec.ClearField(entitytypehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ethuo.mutation.DeletedBy(); ok {
		_spec.SetField(entitytypehistory.FieldDeletedBy, field.TypeString, value)
	}
	if ethuo.mutation.DeletedByCleared() {
		_spec.ClearField(entitytypehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ethuo.mutation.Tags(); ok {
		_spec.SetField(entitytypehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ethuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitytypehistory.FieldTags, value)
		})
	}
	if ethuo.mutation.TagsCleared() {
		_spec.ClearField(entitytypehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := ethuo.mutation.OwnerID(); ok {
		_spec.SetField(entitytypehistory.FieldOwnerID, field.TypeString, value)
	}
	if ethuo.mutation.OwnerIDCleared() {
		_spec.ClearField(entitytypehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ethuo.mutation.Name(); ok {
		_spec.SetField(entitytypehistory.FieldName, field.TypeString, value)
	}
	_spec.Node.Schema = ethuo.schemaConfig.EntityTypeHistory
	ctx = internal.NewSchemaConfigContext(ctx, ethuo.schemaConfig)
	_spec.AddModifiers(ethuo.modifiers...)
	_node = &EntityTypeHistory{config: ethuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ethuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitytypehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ethuo.mutation.done = true
	return _node, nil
}
