// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// InternalPolicyQuery is the builder for querying InternalPolicy entities.
type InternalPolicyQuery struct {
	config
	ctx                             *QueryContext
	order                           []internalpolicy.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.InternalPolicy
	withOwner                       *OrganizationQuery
	withBlockedGroups               *GroupQuery
	withEditors                     *GroupQuery
	withApprover                    *GroupQuery
	withDelegate                    *GroupQuery
	withControlObjectives           *ControlObjectiveQuery
	withControlImplementations      *ControlImplementationQuery
	withControls                    *ControlQuery
	withSubcontrols                 *SubcontrolQuery
	withProcedures                  *ProcedureQuery
	withNarratives                  *NarrativeQuery
	withTasks                       *TaskQuery
	withRisks                       *RiskQuery
	withPrograms                    *ProgramQuery
	loadTotal                       []func(context.Context, []*InternalPolicy) error
	modifiers                       []func(*sql.Selector)
	withNamedBlockedGroups          map[string]*GroupQuery
	withNamedEditors                map[string]*GroupQuery
	withNamedControlObjectives      map[string]*ControlObjectiveQuery
	withNamedControlImplementations map[string]*ControlImplementationQuery
	withNamedControls               map[string]*ControlQuery
	withNamedSubcontrols            map[string]*SubcontrolQuery
	withNamedProcedures             map[string]*ProcedureQuery
	withNamedNarratives             map[string]*NarrativeQuery
	withNamedTasks                  map[string]*TaskQuery
	withNamedRisks                  map[string]*RiskQuery
	withNamedPrograms               map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InternalPolicyQuery builder.
func (_q *InternalPolicyQuery) Where(ps ...predicate.InternalPolicy) *InternalPolicyQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *InternalPolicyQuery) Limit(limit int) *InternalPolicyQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *InternalPolicyQuery) Offset(offset int) *InternalPolicyQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *InternalPolicyQuery) Unique(unique bool) *InternalPolicyQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *InternalPolicyQuery) Order(o ...internalpolicy.OrderOption) *InternalPolicyQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryOwner chains the current query on the "owner" edge.
func (_q *InternalPolicyQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, internalpolicy.OwnerTable, internalpolicy.OwnerColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.InternalPolicy
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (_q *InternalPolicyQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.BlockedGroupsTable, internalpolicy.BlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicyBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (_q *InternalPolicyQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.EditorsTable, internalpolicy.EditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicyEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprover chains the current query on the "approver" edge.
func (_q *InternalPolicyQuery) QueryApprover() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, internalpolicy.ApproverTable, internalpolicy.ApproverColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicy
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDelegate chains the current query on the "delegate" edge.
func (_q *InternalPolicyQuery) QueryDelegate() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, internalpolicy.DelegateTable, internalpolicy.DelegateColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicy
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectives chains the current query on the "control_objectives" edge.
func (_q *InternalPolicyQuery) QueryControlObjectives() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.ControlObjectivesTable, internalpolicy.ControlObjectivesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.InternalPolicyControlObjectives
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlImplementations chains the current query on the "control_implementations" edge.
func (_q *InternalPolicyQuery) QueryControlImplementations() *ControlImplementationQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(controlimplementation.Table, controlimplementation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, internalpolicy.ControlImplementationsTable, internalpolicy.ControlImplementationsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlImplementation
		step.Edge.Schema = schemaConfig.ControlImplementation
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (_q *InternalPolicyQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.ControlsTable, internalpolicy.ControlsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.InternalPolicyControls
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrols chains the current query on the "subcontrols" edge.
func (_q *InternalPolicyQuery) QuerySubcontrols() *SubcontrolQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.SubcontrolsTable, internalpolicy.SubcontrolsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.InternalPolicySubcontrols
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedures chains the current query on the "procedures" edge.
func (_q *InternalPolicyQuery) QueryProcedures() *ProcedureQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.ProceduresTable, internalpolicy.ProceduresPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.InternalPolicyProcedures
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarratives chains the current query on the "narratives" edge.
func (_q *InternalPolicyQuery) QueryNarratives() *NarrativeQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.NarrativesTable, internalpolicy.NarrativesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.InternalPolicyNarratives
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (_q *InternalPolicyQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.TasksTable, internalpolicy.TasksPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.InternalPolicyTasks
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "risks" edge.
func (_q *InternalPolicyQuery) QueryRisks() *RiskQuery {
	query := (&RiskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internalpolicy.RisksTable, internalpolicy.RisksPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.InternalPolicyRisks
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (_q *InternalPolicyQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internalpolicy.Table, internalpolicy.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, internalpolicy.ProgramsTable, internalpolicy.ProgramsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramInternalPolicies
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InternalPolicy entity from the query.
// Returns a *NotFoundError when no InternalPolicy was found.
func (_q *InternalPolicyQuery) First(ctx context.Context) (*InternalPolicy, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{internalpolicy.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *InternalPolicyQuery) FirstX(ctx context.Context) *InternalPolicy {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InternalPolicy ID from the query.
// Returns a *NotFoundError when no InternalPolicy ID was found.
func (_q *InternalPolicyQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{internalpolicy.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *InternalPolicyQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InternalPolicy entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InternalPolicy entity is found.
// Returns a *NotFoundError when no InternalPolicy entities are found.
func (_q *InternalPolicyQuery) Only(ctx context.Context) (*InternalPolicy, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{internalpolicy.Label}
	default:
		return nil, &NotSingularError{internalpolicy.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *InternalPolicyQuery) OnlyX(ctx context.Context) *InternalPolicy {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InternalPolicy ID in the query.
// Returns a *NotSingularError when more than one InternalPolicy ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *InternalPolicyQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{internalpolicy.Label}
	default:
		err = &NotSingularError{internalpolicy.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *InternalPolicyQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InternalPolicies.
func (_q *InternalPolicyQuery) All(ctx context.Context) ([]*InternalPolicy, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InternalPolicy, *InternalPolicyQuery]()
	return withInterceptors[[]*InternalPolicy](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *InternalPolicyQuery) AllX(ctx context.Context) []*InternalPolicy {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InternalPolicy IDs.
func (_q *InternalPolicyQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(internalpolicy.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *InternalPolicyQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *InternalPolicyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*InternalPolicyQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *InternalPolicyQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *InternalPolicyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *InternalPolicyQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InternalPolicyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *InternalPolicyQuery) Clone() *InternalPolicyQuery {
	if _q == nil {
		return nil
	}
	return &InternalPolicyQuery{
		config:                     _q.config,
		ctx:                        _q.ctx.Clone(),
		order:                      append([]internalpolicy.OrderOption{}, _q.order...),
		inters:                     append([]Interceptor{}, _q.inters...),
		predicates:                 append([]predicate.InternalPolicy{}, _q.predicates...),
		withOwner:                  _q.withOwner.Clone(),
		withBlockedGroups:          _q.withBlockedGroups.Clone(),
		withEditors:                _q.withEditors.Clone(),
		withApprover:               _q.withApprover.Clone(),
		withDelegate:               _q.withDelegate.Clone(),
		withControlObjectives:      _q.withControlObjectives.Clone(),
		withControlImplementations: _q.withControlImplementations.Clone(),
		withControls:               _q.withControls.Clone(),
		withSubcontrols:            _q.withSubcontrols.Clone(),
		withProcedures:             _q.withProcedures.Clone(),
		withNarratives:             _q.withNarratives.Clone(),
		withTasks:                  _q.withTasks.Clone(),
		withRisks:                  _q.withRisks.Clone(),
		withPrograms:               _q.withPrograms.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithOwner(opts ...func(*OrganizationQuery)) *InternalPolicyQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOwner = query
	return _q
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *InternalPolicyQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBlockedGroups = query
	return _q
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithEditors(opts ...func(*GroupQuery)) *InternalPolicyQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEditors = query
	return _q
}

// WithApprover tells the query-builder to eager-load the nodes that are connected to
// the "approver" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithApprover(opts ...func(*GroupQuery)) *InternalPolicyQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withApprover = query
	return _q
}

// WithDelegate tells the query-builder to eager-load the nodes that are connected to
// the "delegate" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithDelegate(opts ...func(*GroupQuery)) *InternalPolicyQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDelegate = query
	return _q
}

// WithControlObjectives tells the query-builder to eager-load the nodes that are connected to
// the "control_objectives" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithControlObjectives(opts ...func(*ControlObjectiveQuery)) *InternalPolicyQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlObjectives = query
	return _q
}

// WithControlImplementations tells the query-builder to eager-load the nodes that are connected to
// the "control_implementations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithControlImplementations(opts ...func(*ControlImplementationQuery)) *InternalPolicyQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlImplementations = query
	return _q
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithControls(opts ...func(*ControlQuery)) *InternalPolicyQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControls = query
	return _q
}

// WithSubcontrols tells the query-builder to eager-load the nodes that are connected to
// the "subcontrols" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithSubcontrols(opts ...func(*SubcontrolQuery)) *InternalPolicyQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubcontrols = query
	return _q
}

// WithProcedures tells the query-builder to eager-load the nodes that are connected to
// the "procedures" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithProcedures(opts ...func(*ProcedureQuery)) *InternalPolicyQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProcedures = query
	return _q
}

// WithNarratives tells the query-builder to eager-load the nodes that are connected to
// the "narratives" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNarratives(opts ...func(*NarrativeQuery)) *InternalPolicyQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNarratives = query
	return _q
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithTasks(opts ...func(*TaskQuery)) *InternalPolicyQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTasks = query
	return _q
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "risks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithRisks(opts ...func(*RiskQuery)) *InternalPolicyQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withRisks = query
	return _q
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithPrograms(opts ...func(*ProgramQuery)) *InternalPolicyQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPrograms = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InternalPolicy.Query().
//		GroupBy(internalpolicy.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *InternalPolicyQuery) GroupBy(field string, fields ...string) *InternalPolicyGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InternalPolicyGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = internalpolicy.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.InternalPolicy.Query().
//		Select(internalpolicy.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *InternalPolicyQuery) Select(fields ...string) *InternalPolicySelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &InternalPolicySelect{InternalPolicyQuery: _q}
	sbuild.label = internalpolicy.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InternalPolicySelect configured with the given aggregations.
func (_q *InternalPolicyQuery) Aggregate(fns ...AggregateFunc) *InternalPolicySelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *InternalPolicyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !internalpolicy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if internalpolicy.Policy == nil {
		return errors.New("generated: uninitialized internalpolicy.Policy (forgotten import generated/runtime?)")
	}
	if err := internalpolicy.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *InternalPolicyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InternalPolicy, error) {
	var (
		nodes       = []*InternalPolicy{}
		_spec       = _q.querySpec()
		loadedTypes = [14]bool{
			_q.withOwner != nil,
			_q.withBlockedGroups != nil,
			_q.withEditors != nil,
			_q.withApprover != nil,
			_q.withDelegate != nil,
			_q.withControlObjectives != nil,
			_q.withControlImplementations != nil,
			_q.withControls != nil,
			_q.withSubcontrols != nil,
			_q.withProcedures != nil,
			_q.withNarratives != nil,
			_q.withTasks != nil,
			_q.withRisks != nil,
			_q.withPrograms != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InternalPolicy).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InternalPolicy{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.InternalPolicy
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withOwner; query != nil {
		if err := _q.loadOwner(ctx, query, nodes, nil,
			func(n *InternalPolicy, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withBlockedGroups; query != nil {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.BlockedGroups = []*Group{} },
			func(n *InternalPolicy, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEditors; query != nil {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Editors = []*Group{} },
			func(n *InternalPolicy, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withApprover; query != nil {
		if err := _q.loadApprover(ctx, query, nodes, nil,
			func(n *InternalPolicy, e *Group) { n.Edges.Approver = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withDelegate; query != nil {
		if err := _q.loadDelegate(ctx, query, nodes, nil,
			func(n *InternalPolicy, e *Group) { n.Edges.Delegate = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlObjectives; query != nil {
		if err := _q.loadControlObjectives(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.ControlObjectives = []*ControlObjective{} },
			func(n *InternalPolicy, e *ControlObjective) {
				n.Edges.ControlObjectives = append(n.Edges.ControlObjectives, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlImplementations; query != nil {
		if err := _q.loadControlImplementations(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.ControlImplementations = []*ControlImplementation{} },
			func(n *InternalPolicy, e *ControlImplementation) {
				n.Edges.ControlImplementations = append(n.Edges.ControlImplementations, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControls; query != nil {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Controls = []*Control{} },
			func(n *InternalPolicy, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubcontrols; query != nil {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Subcontrols = []*Subcontrol{} },
			func(n *InternalPolicy, e *Subcontrol) { n.Edges.Subcontrols = append(n.Edges.Subcontrols, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProcedures; query != nil {
		if err := _q.loadProcedures(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Procedures = []*Procedure{} },
			func(n *InternalPolicy, e *Procedure) { n.Edges.Procedures = append(n.Edges.Procedures, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withNarratives; query != nil {
		if err := _q.loadNarratives(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Narratives = []*Narrative{} },
			func(n *InternalPolicy, e *Narrative) { n.Edges.Narratives = append(n.Edges.Narratives, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTasks; query != nil {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Tasks = []*Task{} },
			func(n *InternalPolicy, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withRisks; query != nil {
		if err := _q.loadRisks(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Risks = []*Risk{} },
			func(n *InternalPolicy, e *Risk) { n.Edges.Risks = append(n.Edges.Risks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPrograms; query != nil {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *InternalPolicy) { n.Edges.Programs = []*Program{} },
			func(n *InternalPolicy, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedBlockedGroups {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedBlockedGroups(name) },
			func(n *InternalPolicy, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEditors {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedEditors(name) },
			func(n *InternalPolicy, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlObjectives {
		if err := _q.loadControlObjectives(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedControlObjectives(name) },
			func(n *InternalPolicy, e *ControlObjective) { n.appendNamedControlObjectives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlImplementations {
		if err := _q.loadControlImplementations(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedControlImplementations(name) },
			func(n *InternalPolicy, e *ControlImplementation) { n.appendNamedControlImplementations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControls {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedControls(name) },
			func(n *InternalPolicy, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubcontrols {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedSubcontrols(name) },
			func(n *InternalPolicy, e *Subcontrol) { n.appendNamedSubcontrols(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProcedures {
		if err := _q.loadProcedures(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedProcedures(name) },
			func(n *InternalPolicy, e *Procedure) { n.appendNamedProcedures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNarratives {
		if err := _q.loadNarratives(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedNarratives(name) },
			func(n *InternalPolicy, e *Narrative) { n.appendNamedNarratives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTasks {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedTasks(name) },
			func(n *InternalPolicy, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedRisks {
		if err := _q.loadRisks(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedRisks(name) },
			func(n *InternalPolicy, e *Risk) { n.appendNamedRisks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPrograms {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *InternalPolicy) { n.appendNamedPrograms(name) },
			func(n *InternalPolicy, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *InternalPolicyQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InternalPolicy)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.BlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyBlockedGroups)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(internalpolicy.BlockedGroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.BlockedGroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.BlockedGroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.EditorsTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyEditors)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(internalpolicy.EditorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.EditorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.EditorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadApprover(ctx context.Context, query *GroupQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InternalPolicy)
	for i := range nodes {
		fk := nodes[i].ApproverID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "approver_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadDelegate(ctx context.Context, query *GroupQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InternalPolicy)
	for i := range nodes {
		fk := nodes[i].DelegateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delegate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadControlObjectives(ctx context.Context, query *ControlObjectiveQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.ControlObjectivesTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyControlObjectives)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(internalpolicy.ControlObjectivesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.ControlObjectivesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.ControlObjectivesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objectives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadControlImplementations(ctx context.Context, query *ControlImplementationQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *ControlImplementation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*InternalPolicy)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ControlImplementation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(internalpolicy.ControlImplementationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.internal_policy_control_implementations
		if fk == nil {
			return fmt.Errorf(`foreign-key "internal_policy_control_implementations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "internal_policy_control_implementations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *InternalPolicyQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.ControlsTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyControls)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(internalpolicy.ControlsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.ControlsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.ControlsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadSubcontrols(ctx context.Context, query *SubcontrolQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Subcontrol)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.SubcontrolsTable)
		joinT.Schema(_q.schemaConfig.InternalPolicySubcontrols)
		s.Join(joinT).On(s.C(subcontrol.FieldID), joinT.C(internalpolicy.SubcontrolsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.SubcontrolsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.SubcontrolsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subcontrol](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subcontrols" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadProcedures(ctx context.Context, query *ProcedureQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.ProceduresTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyProcedures)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(internalpolicy.ProceduresPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.ProceduresPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.ProceduresPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedures" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadNarratives(ctx context.Context, query *NarrativeQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Narrative)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.NarrativesTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyNarratives)
		s.Join(joinT).On(s.C(narrative.FieldID), joinT.C(internalpolicy.NarrativesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.NarrativesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.NarrativesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Narrative](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "narratives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.TasksTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(internalpolicy.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadRisks(ctx context.Context, query *RiskQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.RisksTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyRisks)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(internalpolicy.RisksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internalpolicy.RisksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.RisksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *InternalPolicyQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*InternalPolicy, init func(*InternalPolicy), assign func(*InternalPolicy, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*InternalPolicy)
	nids := make(map[string]map[*InternalPolicy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internalpolicy.ProgramsTable)
		joinT.Schema(_q.schemaConfig.ProgramInternalPolicies)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(internalpolicy.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(internalpolicy.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internalpolicy.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalPolicy]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (_q *InternalPolicyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.InternalPolicy
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *InternalPolicyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(internalpolicy.Table, internalpolicy.Columns, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internalpolicy.FieldID)
		for i := range fields {
			if fields[i] != internalpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withOwner != nil {
			_spec.Node.AddColumnOnce(internalpolicy.FieldOwnerID)
		}
		if _q.withApprover != nil {
			_spec.Node.AddColumnOnce(internalpolicy.FieldApproverID)
		}
		if _q.withDelegate != nil {
			_spec.Node.AddColumnOnce(internalpolicy.FieldDelegateID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *InternalPolicyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(internalpolicy.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = internalpolicy.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.InternalPolicy)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *InternalPolicyQuery) Modify(modifiers ...func(s *sql.Selector)) *InternalPolicySelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *InternalPolicyQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedBlockedGroups == nil {
		_q.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	_q.withNamedBlockedGroups[name] = query
	return _q
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *InternalPolicyQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEditors == nil {
		_q.withNamedEditors = make(map[string]*GroupQuery)
	}
	_q.withNamedEditors[name] = query
	return _q
}

// WithNamedControlObjectives tells the query-builder to eager-load the nodes that are connected to the "control_objectives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedControlObjectives(name string, opts ...func(*ControlObjectiveQuery)) *InternalPolicyQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlObjectives == nil {
		_q.withNamedControlObjectives = make(map[string]*ControlObjectiveQuery)
	}
	_q.withNamedControlObjectives[name] = query
	return _q
}

// WithNamedControlImplementations tells the query-builder to eager-load the nodes that are connected to the "control_implementations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedControlImplementations(name string, opts ...func(*ControlImplementationQuery)) *InternalPolicyQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlImplementations == nil {
		_q.withNamedControlImplementations = make(map[string]*ControlImplementationQuery)
	}
	_q.withNamedControlImplementations[name] = query
	return _q
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *InternalPolicyQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControls == nil {
		_q.withNamedControls = make(map[string]*ControlQuery)
	}
	_q.withNamedControls[name] = query
	return _q
}

// WithNamedSubcontrols tells the query-builder to eager-load the nodes that are connected to the "subcontrols"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedSubcontrols(name string, opts ...func(*SubcontrolQuery)) *InternalPolicyQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubcontrols == nil {
		_q.withNamedSubcontrols = make(map[string]*SubcontrolQuery)
	}
	_q.withNamedSubcontrols[name] = query
	return _q
}

// WithNamedProcedures tells the query-builder to eager-load the nodes that are connected to the "procedures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedProcedures(name string, opts ...func(*ProcedureQuery)) *InternalPolicyQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProcedures == nil {
		_q.withNamedProcedures = make(map[string]*ProcedureQuery)
	}
	_q.withNamedProcedures[name] = query
	return _q
}

// WithNamedNarratives tells the query-builder to eager-load the nodes that are connected to the "narratives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedNarratives(name string, opts ...func(*NarrativeQuery)) *InternalPolicyQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNarratives == nil {
		_q.withNamedNarratives = make(map[string]*NarrativeQuery)
	}
	_q.withNamedNarratives[name] = query
	return _q
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *InternalPolicyQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTasks == nil {
		_q.withNamedTasks = make(map[string]*TaskQuery)
	}
	_q.withNamedTasks[name] = query
	return _q
}

// WithNamedRisks tells the query-builder to eager-load the nodes that are connected to the "risks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedRisks(name string, opts ...func(*RiskQuery)) *InternalPolicyQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedRisks == nil {
		_q.withNamedRisks = make(map[string]*RiskQuery)
	}
	_q.withNamedRisks[name] = query
	return _q
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *InternalPolicyQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *InternalPolicyQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPrograms == nil {
		_q.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	_q.withNamedPrograms[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (ipq *InternalPolicyQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ipq.ctx, ent.OpQueryIDs)
	if err := ipq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return ipq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, ipq, qr, ipq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// InternalPolicyGroupBy is the group-by builder for InternalPolicy entities.
type InternalPolicyGroupBy struct {
	selector
	build *InternalPolicyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *InternalPolicyGroupBy) Aggregate(fns ...AggregateFunc) *InternalPolicyGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *InternalPolicyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InternalPolicyQuery, *InternalPolicyGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *InternalPolicyGroupBy) sqlScan(ctx context.Context, root *InternalPolicyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InternalPolicySelect is the builder for selecting fields of InternalPolicy entities.
type InternalPolicySelect struct {
	*InternalPolicyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *InternalPolicySelect) Aggregate(fns ...AggregateFunc) *InternalPolicySelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *InternalPolicySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InternalPolicyQuery, *InternalPolicySelect](ctx, _s.InternalPolicyQuery, _s, _s.inters, v)
}

func (_s *InternalPolicySelect) sqlScan(ctx context.Context, root *InternalPolicyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *InternalPolicySelect) Modify(modifiers ...func(s *sql.Selector)) *InternalPolicySelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
