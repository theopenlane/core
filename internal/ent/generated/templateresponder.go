// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/templateresponder"
	"github.com/theopenlane/core/pkg/enums"
)

// TemplateResponder is the model entity for the TemplateResponder schema.
type TemplateResponder struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the assement associated with this responder
	AssessmentID string `json:"assessment_id,omitempty"`
	// the email address of the recipient
	Email string `json:"email,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// the comparison secret to verify the token's signature
	Secret *[]byte `json:"secret,omitempty"`
	// the number of attempts made to perform email send, maximum of 5
	SendAttempts int `json:"send_attempts,omitempty"`
	// the status of the template responder
	Status enums.TemplateResponderStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemplateResponderQuery when eager-loading is set.
	Edges        TemplateResponderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TemplateResponderEdges holds the relations/edges for other nodes in the graph.
type TemplateResponderEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Assessment holds the value of the assessment edge.
	Assessment *Assessment `json:"assessment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateResponderEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// AssessmentOrErr returns the Assessment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateResponderEdges) AssessmentOrErr() (*Assessment, error) {
	if e.Assessment != nil {
		return e.Assessment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: assessment.Label}
	}
	return nil, &NotLoadedError{edge: "assessment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemplateResponder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case templateresponder.FieldSecret:
			values[i] = new([]byte)
		case templateresponder.FieldSendAttempts:
			values[i] = new(sql.NullInt64)
		case templateresponder.FieldID, templateresponder.FieldCreatedBy, templateresponder.FieldUpdatedBy, templateresponder.FieldDeletedBy, templateresponder.FieldOwnerID, templateresponder.FieldAssessmentID, templateresponder.FieldEmail, templateresponder.FieldToken, templateresponder.FieldStatus:
			values[i] = new(sql.NullString)
		case templateresponder.FieldCreatedAt, templateresponder.FieldUpdatedAt, templateresponder.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemplateResponder fields.
func (_m *TemplateResponder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case templateresponder.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case templateresponder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case templateresponder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case templateresponder.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case templateresponder.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case templateresponder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case templateresponder.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case templateresponder.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case templateresponder.FieldAssessmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_id", values[i])
			} else if value.Valid {
				_m.AssessmentID = value.String
			}
		case templateresponder.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case templateresponder.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				_m.Token = value.String
			}
		case templateresponder.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				_m.Secret = value
			}
		case templateresponder.FieldSendAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field send_attempts", values[i])
			} else if value.Valid {
				_m.SendAttempts = int(value.Int64)
			}
		case templateresponder.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.TemplateResponderStatus(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TemplateResponder.
// This includes values selected through modifiers, order, etc.
func (_m *TemplateResponder) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the TemplateResponder entity.
func (_m *TemplateResponder) QueryOwner() *OrganizationQuery {
	return NewTemplateResponderClient(_m.config).QueryOwner(_m)
}

// QueryAssessment queries the "assessment" edge of the TemplateResponder entity.
func (_m *TemplateResponder) QueryAssessment() *AssessmentQuery {
	return NewTemplateResponderClient(_m.config).QueryAssessment(_m)
}

// Update returns a builder for updating this TemplateResponder.
// Note that you need to call TemplateResponder.Unwrap() before calling this method if this TemplateResponder
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TemplateResponder) Update() *TemplateResponderUpdateOne {
	return NewTemplateResponderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TemplateResponder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TemplateResponder) Unwrap() *TemplateResponder {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: TemplateResponder is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TemplateResponder) String() string {
	var builder strings.Builder
	builder.WriteString("TemplateResponder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("assessment_id=")
	builder.WriteString(_m.AssessmentID)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(_m.Token)
	builder.WriteString(", ")
	if v := _m.Secret; v != nil {
		builder.WriteString("secret=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("send_attempts=")
	builder.WriteString(fmt.Sprintf("%v", _m.SendAttempts))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// TemplateResponders is a parsable slice of TemplateResponder.
type TemplateResponders []*TemplateResponder
