// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// EntityQuery is the builder for querying Entity entities.
type EntityQuery struct {
	config
	ctx                *QueryContext
	order              []entity.OrderOption
	inters             []Interceptor
	predicates         []predicate.Entity
	withOwner          *OrganizationQuery
	withContacts       *ContactQuery
	withDocuments      *DocumentDataQuery
	withNotes          *NoteQuery
	withFiles          *FileQuery
	withEntityType     *EntityTypeQuery
	withFKs            bool
	loadTotal          []func(context.Context, []*Entity) error
	modifiers          []func(*sql.Selector)
	withNamedContacts  map[string]*ContactQuery
	withNamedDocuments map[string]*DocumentDataQuery
	withNamedNotes     map[string]*NoteQuery
	withNamedFiles     map[string]*FileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntityQuery builder.
func (eq *EntityQuery) Where(ps ...predicate.Entity) *EntityQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EntityQuery) Limit(limit int) *EntityQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EntityQuery) Offset(offset int) *EntityQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EntityQuery) Unique(unique bool) *EntityQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EntityQuery) Order(o ...entity.OrderOption) *EntityQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryOwner chains the current query on the "owner" edge.
func (eq *EntityQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entity.OwnerTable, entity.OwnerColumn),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Entity
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContacts chains the current query on the "contacts" edge.
func (eq *EntityQuery) QueryContacts() *ContactQuery {
	query := (&ContactClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entity.ContactsTable, entity.ContactsPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.EntityContacts
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocuments chains the current query on the "documents" edge.
func (eq *EntityQuery) QueryDocuments() *DocumentDataQuery {
	query := (&DocumentDataClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, selector),
			sqlgraph.To(documentdata.Table, documentdata.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entity.DocumentsTable, entity.DocumentsPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.EntityDocuments
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotes chains the current query on the "notes" edge.
func (eq *EntityQuery) QueryNotes() *NoteQuery {
	query := (&NoteClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, selector),
			sqlgraph.To(note.Table, note.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entity.NotesTable, entity.NotesColumn),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Note
		step.Edge.Schema = schemaConfig.Note
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (eq *EntityQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entity.FilesTable, entity.FilesPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.EntityFiles
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntityType chains the current query on the "entity_type" edge.
func (eq *EntityQuery) QueryEntityType() *EntityTypeQuery {
	query := (&EntityTypeClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, selector),
			sqlgraph.To(entitytype.Table, entitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entity.EntityTypeTable, entity.EntityTypeColumn),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.EntityType
		step.Edge.Schema = schemaConfig.Entity
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Entity entity from the query.
// Returns a *NotFoundError when no Entity was found.
func (eq *EntityQuery) First(ctx context.Context) (*Entity, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EntityQuery) FirstX(ctx context.Context) *Entity {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Entity ID from the query.
// Returns a *NotFoundError when no Entity ID was found.
func (eq *EntityQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EntityQuery) FirstIDX(ctx context.Context) string {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Entity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Entity entity is found.
// Returns a *NotFoundError when no Entity entities are found.
func (eq *EntityQuery) Only(ctx context.Context) (*Entity, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entity.Label}
	default:
		return nil, &NotSingularError{entity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EntityQuery) OnlyX(ctx context.Context) *Entity {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Entity ID in the query.
// Returns a *NotSingularError when more than one Entity ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EntityQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entity.Label}
	default:
		err = &NotSingularError{entity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EntityQuery) OnlyIDX(ctx context.Context) string {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Entities.
func (eq *EntityQuery) All(ctx context.Context) ([]*Entity, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Entity, *EntityQuery]()
	return withInterceptors[[]*Entity](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EntityQuery) AllX(ctx context.Context) []*Entity {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Entity IDs.
func (eq *EntityQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(entity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EntityQuery) IDsX(ctx context.Context) []string {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EntityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EntityQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EntityQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EntityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EntityQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EntityQuery) Clone() *EntityQuery {
	if eq == nil {
		return nil
	}
	return &EntityQuery{
		config:         eq.config,
		ctx:            eq.ctx.Clone(),
		order:          append([]entity.OrderOption{}, eq.order...),
		inters:         append([]Interceptor{}, eq.inters...),
		predicates:     append([]predicate.Entity{}, eq.predicates...),
		withOwner:      eq.withOwner.Clone(),
		withContacts:   eq.withContacts.Clone(),
		withDocuments:  eq.withDocuments.Clone(),
		withNotes:      eq.withNotes.Clone(),
		withFiles:      eq.withFiles.Clone(),
		withEntityType: eq.withEntityType.Clone(),
		// clone intermediate query.
		sql:       eq.sql.Clone(),
		path:      eq.path,
		modifiers: append([]func(*sql.Selector){}, eq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithOwner(opts ...func(*OrganizationQuery)) *EntityQuery {
	query := (&OrganizationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withOwner = query
	return eq
}

// WithContacts tells the query-builder to eager-load the nodes that are connected to
// the "contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithContacts(opts ...func(*ContactQuery)) *EntityQuery {
	query := (&ContactClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withContacts = query
	return eq
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithDocuments(opts ...func(*DocumentDataQuery)) *EntityQuery {
	query := (&DocumentDataClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withDocuments = query
	return eq
}

// WithNotes tells the query-builder to eager-load the nodes that are connected to
// the "notes" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithNotes(opts ...func(*NoteQuery)) *EntityQuery {
	query := (&NoteClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withNotes = query
	return eq
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithFiles(opts ...func(*FileQuery)) *EntityQuery {
	query := (&FileClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withFiles = query
	return eq
}

// WithEntityType tells the query-builder to eager-load the nodes that are connected to
// the "entity_type" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithEntityType(opts ...func(*EntityTypeQuery)) *EntityQuery {
	query := (&EntityTypeClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEntityType = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Entity.Query().
//		GroupBy(entity.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (eq *EntityQuery) GroupBy(field string, fields ...string) *EntityGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EntityGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = entity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Entity.Query().
//		Select(entity.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *EntityQuery) Select(fields ...string) *EntitySelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EntitySelect{EntityQuery: eq}
	sbuild.label = entity.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EntitySelect configured with the given aggregations.
func (eq *EntityQuery) Aggregate(fns ...AggregateFunc) *EntitySelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EntityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !entity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	if entity.Policy == nil {
		return errors.New("generated: uninitialized entity.Policy (forgotten import generated/runtime?)")
	}
	if err := entity.Policy.EvalQuery(ctx, eq); err != nil {
		return err
	}
	return nil
}

func (eq *EntityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Entity, error) {
	var (
		nodes       = []*Entity{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [6]bool{
			eq.withOwner != nil,
			eq.withContacts != nil,
			eq.withDocuments != nil,
			eq.withNotes != nil,
			eq.withFiles != nil,
			eq.withEntityType != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, entity.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Entity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Entity{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = eq.schemaConfig.Entity
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withOwner; query != nil {
		if err := eq.loadOwner(ctx, query, nodes, nil,
			func(n *Entity, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withContacts; query != nil {
		if err := eq.loadContacts(ctx, query, nodes,
			func(n *Entity) { n.Edges.Contacts = []*Contact{} },
			func(n *Entity, e *Contact) { n.Edges.Contacts = append(n.Edges.Contacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withDocuments; query != nil {
		if err := eq.loadDocuments(ctx, query, nodes,
			func(n *Entity) { n.Edges.Documents = []*DocumentData{} },
			func(n *Entity, e *DocumentData) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withNotes; query != nil {
		if err := eq.loadNotes(ctx, query, nodes,
			func(n *Entity) { n.Edges.Notes = []*Note{} },
			func(n *Entity, e *Note) { n.Edges.Notes = append(n.Edges.Notes, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withFiles; query != nil {
		if err := eq.loadFiles(ctx, query, nodes,
			func(n *Entity) { n.Edges.Files = []*File{} },
			func(n *Entity, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEntityType; query != nil {
		if err := eq.loadEntityType(ctx, query, nodes, nil,
			func(n *Entity, e *EntityType) { n.Edges.EntityType = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedContacts {
		if err := eq.loadContacts(ctx, query, nodes,
			func(n *Entity) { n.appendNamedContacts(name) },
			func(n *Entity, e *Contact) { n.appendNamedContacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedDocuments {
		if err := eq.loadDocuments(ctx, query, nodes,
			func(n *Entity) { n.appendNamedDocuments(name) },
			func(n *Entity, e *DocumentData) { n.appendNamedDocuments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedNotes {
		if err := eq.loadNotes(ctx, query, nodes,
			func(n *Entity) { n.appendNamedNotes(name) },
			func(n *Entity, e *Note) { n.appendNamedNotes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedFiles {
		if err := eq.loadFiles(ctx, query, nodes,
			func(n *Entity) { n.appendNamedFiles(name) },
			func(n *Entity, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range eq.loadTotal {
		if err := eq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EntityQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Entity, init func(*Entity), assign func(*Entity, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Entity)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EntityQuery) loadContacts(ctx context.Context, query *ContactQuery, nodes []*Entity, init func(*Entity), assign func(*Entity, *Contact)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Entity)
	nids := make(map[string]map[*Entity]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entity.ContactsTable)
		joinT.Schema(eq.schemaConfig.EntityContacts)
		s.Join(joinT).On(s.C(contact.FieldID), joinT.C(entity.ContactsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entity.ContactsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entity.ContactsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Entity]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Contact](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "contacts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EntityQuery) loadDocuments(ctx context.Context, query *DocumentDataQuery, nodes []*Entity, init func(*Entity), assign func(*Entity, *DocumentData)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Entity)
	nids := make(map[string]map[*Entity]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entity.DocumentsTable)
		joinT.Schema(eq.schemaConfig.EntityDocuments)
		s.Join(joinT).On(s.C(documentdata.FieldID), joinT.C(entity.DocumentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entity.DocumentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entity.DocumentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Entity]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DocumentData](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "documents" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EntityQuery) loadNotes(ctx context.Context, query *NoteQuery, nodes []*Entity, init func(*Entity), assign func(*Entity, *Note)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Entity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Note(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(entity.NotesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.entity_notes
		if fk == nil {
			return fmt.Errorf(`foreign-key "entity_notes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entity_notes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EntityQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*Entity, init func(*Entity), assign func(*Entity, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Entity)
	nids := make(map[string]map[*Entity]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entity.FilesTable)
		joinT.Schema(eq.schemaConfig.EntityFiles)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(entity.FilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entity.FilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entity.FilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Entity]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EntityQuery) loadEntityType(ctx context.Context, query *EntityTypeQuery, nodes []*Entity, init func(*Entity), assign func(*Entity, *EntityType)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Entity)
	for i := range nodes {
		fk := nodes[i].EntityTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entitytype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entity_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eq *EntityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Schema = eq.schemaConfig.Entity
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EntityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entity.FieldID)
		for i := range fields {
			if fields[i] != entity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eq.withOwner != nil {
			_spec.Node.AddColumnOnce(entity.FieldOwnerID)
		}
		if eq.withEntityType != nil {
			_spec.Node.AddColumnOnce(entity.FieldEntityTypeID)
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EntityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(entity.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = entity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(eq.schemaConfig.Entity)
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *EntityQuery) Modify(modifiers ...func(s *sql.Selector)) *EntitySelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

// WithNamedContacts tells the query-builder to eager-load the nodes that are connected to the "contacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithNamedContacts(name string, opts ...func(*ContactQuery)) *EntityQuery {
	query := (&ContactClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedContacts == nil {
		eq.withNamedContacts = make(map[string]*ContactQuery)
	}
	eq.withNamedContacts[name] = query
	return eq
}

// WithNamedDocuments tells the query-builder to eager-load the nodes that are connected to the "documents"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithNamedDocuments(name string, opts ...func(*DocumentDataQuery)) *EntityQuery {
	query := (&DocumentDataClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedDocuments == nil {
		eq.withNamedDocuments = make(map[string]*DocumentDataQuery)
	}
	eq.withNamedDocuments[name] = query
	return eq
}

// WithNamedNotes tells the query-builder to eager-load the nodes that are connected to the "notes"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithNamedNotes(name string, opts ...func(*NoteQuery)) *EntityQuery {
	query := (&NoteClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedNotes == nil {
		eq.withNamedNotes = make(map[string]*NoteQuery)
	}
	eq.withNamedNotes[name] = query
	return eq
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EntityQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *EntityQuery {
	query := (&FileClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedFiles == nil {
		eq.withNamedFiles = make(map[string]*FileQuery)
	}
	eq.withNamedFiles[name] = query
	return eq
}

// EntityGroupBy is the group-by builder for Entity entities.
type EntityGroupBy struct {
	selector
	build *EntityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EntityGroupBy) Aggregate(fns ...AggregateFunc) *EntityGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EntityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntityQuery, *EntityGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EntityGroupBy) sqlScan(ctx context.Context, root *EntityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EntitySelect is the builder for selecting fields of Entity entities.
type EntitySelect struct {
	*EntityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EntitySelect) Aggregate(fns ...AggregateFunc) *EntitySelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EntitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntityQuery, *EntitySelect](ctx, es.EntityQuery, es, es.inters, v)
}

func (es *EntitySelect) sqlScan(ctx context.Context, root *EntityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *EntitySelect) Modify(modifiers ...func(s *sql.Selector)) *EntitySelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}
