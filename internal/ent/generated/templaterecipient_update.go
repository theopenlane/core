// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/templaterecipient"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TemplateRecipientUpdate is the builder for updating TemplateRecipient entities.
type TemplateRecipientUpdate struct {
	config
	hooks     []Hook
	mutation  *TemplateRecipientMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TemplateRecipientUpdate builder.
func (tru *TemplateRecipientUpdate) Where(ps ...predicate.TemplateRecipient) *TemplateRecipientUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetUpdatedAt sets the "updated_at" field.
func (tru *TemplateRecipientUpdate) SetUpdatedAt(t time.Time) *TemplateRecipientUpdate {
	tru.mutation.SetUpdatedAt(t)
	return tru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tru *TemplateRecipientUpdate) ClearUpdatedAt() *TemplateRecipientUpdate {
	tru.mutation.ClearUpdatedAt()
	return tru
}

// SetUpdatedBy sets the "updated_by" field.
func (tru *TemplateRecipientUpdate) SetUpdatedBy(s string) *TemplateRecipientUpdate {
	tru.mutation.SetUpdatedBy(s)
	return tru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableUpdatedBy(s *string) *TemplateRecipientUpdate {
	if s != nil {
		tru.SetUpdatedBy(*s)
	}
	return tru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tru *TemplateRecipientUpdate) ClearUpdatedBy() *TemplateRecipientUpdate {
	tru.mutation.ClearUpdatedBy()
	return tru
}

// SetDeletedAt sets the "deleted_at" field.
func (tru *TemplateRecipientUpdate) SetDeletedAt(t time.Time) *TemplateRecipientUpdate {
	tru.mutation.SetDeletedAt(t)
	return tru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableDeletedAt(t *time.Time) *TemplateRecipientUpdate {
	if t != nil {
		tru.SetDeletedAt(*t)
	}
	return tru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tru *TemplateRecipientUpdate) ClearDeletedAt() *TemplateRecipientUpdate {
	tru.mutation.ClearDeletedAt()
	return tru
}

// SetDeletedBy sets the "deleted_by" field.
func (tru *TemplateRecipientUpdate) SetDeletedBy(s string) *TemplateRecipientUpdate {
	tru.mutation.SetDeletedBy(s)
	return tru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableDeletedBy(s *string) *TemplateRecipientUpdate {
	if s != nil {
		tru.SetDeletedBy(*s)
	}
	return tru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tru *TemplateRecipientUpdate) ClearDeletedBy() *TemplateRecipientUpdate {
	tru.mutation.ClearDeletedBy()
	return tru
}

// SetOwnerID sets the "owner_id" field.
func (tru *TemplateRecipientUpdate) SetOwnerID(s string) *TemplateRecipientUpdate {
	tru.mutation.SetOwnerID(s)
	return tru
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableOwnerID(s *string) *TemplateRecipientUpdate {
	if s != nil {
		tru.SetOwnerID(*s)
	}
	return tru
}

// ClearOwnerID clears the value of the "owner_id" field.
func (tru *TemplateRecipientUpdate) ClearOwnerID() *TemplateRecipientUpdate {
	tru.mutation.ClearOwnerID()
	return tru
}

// SetSendAttempts sets the "send_attempts" field.
func (tru *TemplateRecipientUpdate) SetSendAttempts(i int) *TemplateRecipientUpdate {
	tru.mutation.ResetSendAttempts()
	tru.mutation.SetSendAttempts(i)
	return tru
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableSendAttempts(i *int) *TemplateRecipientUpdate {
	if i != nil {
		tru.SetSendAttempts(*i)
	}
	return tru
}

// AddSendAttempts adds i to the "send_attempts" field.
func (tru *TemplateRecipientUpdate) AddSendAttempts(i int) *TemplateRecipientUpdate {
	tru.mutation.AddSendAttempts(i)
	return tru
}

// SetStatus sets the "status" field.
func (tru *TemplateRecipientUpdate) SetStatus(ers enums.TemplateRecipientStatus) *TemplateRecipientUpdate {
	tru.mutation.SetStatus(ers)
	return tru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableStatus(ers *enums.TemplateRecipientStatus) *TemplateRecipientUpdate {
	if ers != nil {
		tru.SetStatus(*ers)
	}
	return tru
}

// SetDocumentDataID sets the "document_data_id" field.
func (tru *TemplateRecipientUpdate) SetDocumentDataID(s string) *TemplateRecipientUpdate {
	tru.mutation.SetDocumentDataID(s)
	return tru
}

// SetNillableDocumentDataID sets the "document_data_id" field if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableDocumentDataID(s *string) *TemplateRecipientUpdate {
	if s != nil {
		tru.SetDocumentDataID(*s)
	}
	return tru
}

// ClearDocumentDataID clears the value of the "document_data_id" field.
func (tru *TemplateRecipientUpdate) ClearDocumentDataID() *TemplateRecipientUpdate {
	tru.mutation.ClearDocumentDataID()
	return tru
}

// SetOwner sets the "owner" edge to the Organization entity.
func (tru *TemplateRecipientUpdate) SetOwner(o *Organization) *TemplateRecipientUpdate {
	return tru.SetOwnerID(o.ID)
}

// SetDocumentID sets the "document" edge to the DocumentData entity by ID.
func (tru *TemplateRecipientUpdate) SetDocumentID(id string) *TemplateRecipientUpdate {
	tru.mutation.SetDocumentID(id)
	return tru
}

// SetNillableDocumentID sets the "document" edge to the DocumentData entity by ID if the given value is not nil.
func (tru *TemplateRecipientUpdate) SetNillableDocumentID(id *string) *TemplateRecipientUpdate {
	if id != nil {
		tru = tru.SetDocumentID(*id)
	}
	return tru
}

// SetDocument sets the "document" edge to the DocumentData entity.
func (tru *TemplateRecipientUpdate) SetDocument(d *DocumentData) *TemplateRecipientUpdate {
	return tru.SetDocumentID(d.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (tru *TemplateRecipientUpdate) AddEventIDs(ids ...string) *TemplateRecipientUpdate {
	tru.mutation.AddEventIDs(ids...)
	return tru
}

// AddEvents adds the "events" edges to the Event entity.
func (tru *TemplateRecipientUpdate) AddEvents(e ...*Event) *TemplateRecipientUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tru.AddEventIDs(ids...)
}

// Mutation returns the TemplateRecipientMutation object of the builder.
func (tru *TemplateRecipientUpdate) Mutation() *TemplateRecipientMutation {
	return tru.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (tru *TemplateRecipientUpdate) ClearOwner() *TemplateRecipientUpdate {
	tru.mutation.ClearOwner()
	return tru
}

// ClearDocument clears the "document" edge to the DocumentData entity.
func (tru *TemplateRecipientUpdate) ClearDocument() *TemplateRecipientUpdate {
	tru.mutation.ClearDocument()
	return tru
}

// ClearEvents clears all "events" edges to the Event entity.
func (tru *TemplateRecipientUpdate) ClearEvents() *TemplateRecipientUpdate {
	tru.mutation.ClearEvents()
	return tru
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (tru *TemplateRecipientUpdate) RemoveEventIDs(ids ...string) *TemplateRecipientUpdate {
	tru.mutation.RemoveEventIDs(ids...)
	return tru
}

// RemoveEvents removes "events" edges to Event entities.
func (tru *TemplateRecipientUpdate) RemoveEvents(e ...*Event) *TemplateRecipientUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tru.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TemplateRecipientUpdate) Save(ctx context.Context) (int, error) {
	if err := tru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TemplateRecipientUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TemplateRecipientUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TemplateRecipientUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TemplateRecipientUpdate) defaults() error {
	if _, ok := tru.mutation.UpdatedAt(); !ok && !tru.mutation.UpdatedAtCleared() {
		if templaterecipient.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized templaterecipient.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := templaterecipient.UpdateDefaultUpdatedAt()
		tru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tru *TemplateRecipientUpdate) check() error {
	if v, ok := tru.mutation.OwnerID(); ok {
		if err := templaterecipient.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.owner_id": %w`, err)}
		}
	}
	if v, ok := tru.mutation.Status(); ok {
		if err := templaterecipient.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.status": %w`, err)}
		}
	}
	if tru.mutation.TemplateCleared() && len(tru.mutation.TemplateIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TemplateRecipient.template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tru *TemplateRecipientUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateRecipientUpdate {
	tru.modifiers = append(tru.modifiers, modifiers...)
	return tru
}

func (tru *TemplateRecipientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(templaterecipient.Table, templaterecipient.Columns, sqlgraph.NewFieldSpec(templaterecipient.FieldID, field.TypeString))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tru.mutation.CreatedAtCleared() {
		_spec.ClearField(templaterecipient.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tru.mutation.UpdatedAt(); ok {
		_spec.SetField(templaterecipient.FieldUpdatedAt, field.TypeTime, value)
	}
	if tru.mutation.UpdatedAtCleared() {
		_spec.ClearField(templaterecipient.FieldUpdatedAt, field.TypeTime)
	}
	if tru.mutation.CreatedByCleared() {
		_spec.ClearField(templaterecipient.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tru.mutation.UpdatedBy(); ok {
		_spec.SetField(templaterecipient.FieldUpdatedBy, field.TypeString, value)
	}
	if tru.mutation.UpdatedByCleared() {
		_spec.ClearField(templaterecipient.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tru.mutation.DeletedAt(); ok {
		_spec.SetField(templaterecipient.FieldDeletedAt, field.TypeTime, value)
	}
	if tru.mutation.DeletedAtCleared() {
		_spec.ClearField(templaterecipient.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tru.mutation.DeletedBy(); ok {
		_spec.SetField(templaterecipient.FieldDeletedBy, field.TypeString, value)
	}
	if tru.mutation.DeletedByCleared() {
		_spec.ClearField(templaterecipient.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tru.mutation.SendAttempts(); ok {
		_spec.SetField(templaterecipient.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedSendAttempts(); ok {
		_spec.AddField(templaterecipient.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := tru.mutation.Status(); ok {
		_spec.SetField(templaterecipient.FieldStatus, field.TypeEnum, value)
	}
	if tru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templaterecipient.OwnerTable,
			Columns: []string{templaterecipient.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tru.schemaConfig.TemplateRecipient
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templaterecipient.OwnerTable,
			Columns: []string{templaterecipient.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tru.schemaConfig.TemplateRecipient
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   templaterecipient.DocumentTable,
			Columns: []string{templaterecipient.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = tru.schemaConfig.TemplateRecipient
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   templaterecipient.DocumentTable,
			Columns: []string{templaterecipient.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = tru.schemaConfig.TemplateRecipient
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templaterecipient.EventsTable,
			Columns: []string{templaterecipient.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = tru.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RemovedEventsIDs(); len(nodes) > 0 && !tru.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templaterecipient.EventsTable,
			Columns: []string{templaterecipient.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = tru.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templaterecipient.EventsTable,
			Columns: []string{templaterecipient.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = tru.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tru.schemaConfig.TemplateRecipient
	ctx = internal.NewSchemaConfigContext(ctx, tru.schemaConfig)
	_spec.AddModifiers(tru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templaterecipient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TemplateRecipientUpdateOne is the builder for updating a single TemplateRecipient entity.
type TemplateRecipientUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TemplateRecipientMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (truo *TemplateRecipientUpdateOne) SetUpdatedAt(t time.Time) *TemplateRecipientUpdateOne {
	truo.mutation.SetUpdatedAt(t)
	return truo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (truo *TemplateRecipientUpdateOne) ClearUpdatedAt() *TemplateRecipientUpdateOne {
	truo.mutation.ClearUpdatedAt()
	return truo
}

// SetUpdatedBy sets the "updated_by" field.
func (truo *TemplateRecipientUpdateOne) SetUpdatedBy(s string) *TemplateRecipientUpdateOne {
	truo.mutation.SetUpdatedBy(s)
	return truo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableUpdatedBy(s *string) *TemplateRecipientUpdateOne {
	if s != nil {
		truo.SetUpdatedBy(*s)
	}
	return truo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (truo *TemplateRecipientUpdateOne) ClearUpdatedBy() *TemplateRecipientUpdateOne {
	truo.mutation.ClearUpdatedBy()
	return truo
}

// SetDeletedAt sets the "deleted_at" field.
func (truo *TemplateRecipientUpdateOne) SetDeletedAt(t time.Time) *TemplateRecipientUpdateOne {
	truo.mutation.SetDeletedAt(t)
	return truo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableDeletedAt(t *time.Time) *TemplateRecipientUpdateOne {
	if t != nil {
		truo.SetDeletedAt(*t)
	}
	return truo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (truo *TemplateRecipientUpdateOne) ClearDeletedAt() *TemplateRecipientUpdateOne {
	truo.mutation.ClearDeletedAt()
	return truo
}

// SetDeletedBy sets the "deleted_by" field.
func (truo *TemplateRecipientUpdateOne) SetDeletedBy(s string) *TemplateRecipientUpdateOne {
	truo.mutation.SetDeletedBy(s)
	return truo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableDeletedBy(s *string) *TemplateRecipientUpdateOne {
	if s != nil {
		truo.SetDeletedBy(*s)
	}
	return truo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (truo *TemplateRecipientUpdateOne) ClearDeletedBy() *TemplateRecipientUpdateOne {
	truo.mutation.ClearDeletedBy()
	return truo
}

// SetOwnerID sets the "owner_id" field.
func (truo *TemplateRecipientUpdateOne) SetOwnerID(s string) *TemplateRecipientUpdateOne {
	truo.mutation.SetOwnerID(s)
	return truo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableOwnerID(s *string) *TemplateRecipientUpdateOne {
	if s != nil {
		truo.SetOwnerID(*s)
	}
	return truo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (truo *TemplateRecipientUpdateOne) ClearOwnerID() *TemplateRecipientUpdateOne {
	truo.mutation.ClearOwnerID()
	return truo
}

// SetSendAttempts sets the "send_attempts" field.
func (truo *TemplateRecipientUpdateOne) SetSendAttempts(i int) *TemplateRecipientUpdateOne {
	truo.mutation.ResetSendAttempts()
	truo.mutation.SetSendAttempts(i)
	return truo
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableSendAttempts(i *int) *TemplateRecipientUpdateOne {
	if i != nil {
		truo.SetSendAttempts(*i)
	}
	return truo
}

// AddSendAttempts adds i to the "send_attempts" field.
func (truo *TemplateRecipientUpdateOne) AddSendAttempts(i int) *TemplateRecipientUpdateOne {
	truo.mutation.AddSendAttempts(i)
	return truo
}

// SetStatus sets the "status" field.
func (truo *TemplateRecipientUpdateOne) SetStatus(ers enums.TemplateRecipientStatus) *TemplateRecipientUpdateOne {
	truo.mutation.SetStatus(ers)
	return truo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableStatus(ers *enums.TemplateRecipientStatus) *TemplateRecipientUpdateOne {
	if ers != nil {
		truo.SetStatus(*ers)
	}
	return truo
}

// SetDocumentDataID sets the "document_data_id" field.
func (truo *TemplateRecipientUpdateOne) SetDocumentDataID(s string) *TemplateRecipientUpdateOne {
	truo.mutation.SetDocumentDataID(s)
	return truo
}

// SetNillableDocumentDataID sets the "document_data_id" field if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableDocumentDataID(s *string) *TemplateRecipientUpdateOne {
	if s != nil {
		truo.SetDocumentDataID(*s)
	}
	return truo
}

// ClearDocumentDataID clears the value of the "document_data_id" field.
func (truo *TemplateRecipientUpdateOne) ClearDocumentDataID() *TemplateRecipientUpdateOne {
	truo.mutation.ClearDocumentDataID()
	return truo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (truo *TemplateRecipientUpdateOne) SetOwner(o *Organization) *TemplateRecipientUpdateOne {
	return truo.SetOwnerID(o.ID)
}

// SetDocumentID sets the "document" edge to the DocumentData entity by ID.
func (truo *TemplateRecipientUpdateOne) SetDocumentID(id string) *TemplateRecipientUpdateOne {
	truo.mutation.SetDocumentID(id)
	return truo
}

// SetNillableDocumentID sets the "document" edge to the DocumentData entity by ID if the given value is not nil.
func (truo *TemplateRecipientUpdateOne) SetNillableDocumentID(id *string) *TemplateRecipientUpdateOne {
	if id != nil {
		truo = truo.SetDocumentID(*id)
	}
	return truo
}

// SetDocument sets the "document" edge to the DocumentData entity.
func (truo *TemplateRecipientUpdateOne) SetDocument(d *DocumentData) *TemplateRecipientUpdateOne {
	return truo.SetDocumentID(d.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (truo *TemplateRecipientUpdateOne) AddEventIDs(ids ...string) *TemplateRecipientUpdateOne {
	truo.mutation.AddEventIDs(ids...)
	return truo
}

// AddEvents adds the "events" edges to the Event entity.
func (truo *TemplateRecipientUpdateOne) AddEvents(e ...*Event) *TemplateRecipientUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return truo.AddEventIDs(ids...)
}

// Mutation returns the TemplateRecipientMutation object of the builder.
func (truo *TemplateRecipientUpdateOne) Mutation() *TemplateRecipientMutation {
	return truo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (truo *TemplateRecipientUpdateOne) ClearOwner() *TemplateRecipientUpdateOne {
	truo.mutation.ClearOwner()
	return truo
}

// ClearDocument clears the "document" edge to the DocumentData entity.
func (truo *TemplateRecipientUpdateOne) ClearDocument() *TemplateRecipientUpdateOne {
	truo.mutation.ClearDocument()
	return truo
}

// ClearEvents clears all "events" edges to the Event entity.
func (truo *TemplateRecipientUpdateOne) ClearEvents() *TemplateRecipientUpdateOne {
	truo.mutation.ClearEvents()
	return truo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (truo *TemplateRecipientUpdateOne) RemoveEventIDs(ids ...string) *TemplateRecipientUpdateOne {
	truo.mutation.RemoveEventIDs(ids...)
	return truo
}

// RemoveEvents removes "events" edges to Event entities.
func (truo *TemplateRecipientUpdateOne) RemoveEvents(e ...*Event) *TemplateRecipientUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return truo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the TemplateRecipientUpdate builder.
func (truo *TemplateRecipientUpdateOne) Where(ps ...predicate.TemplateRecipient) *TemplateRecipientUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TemplateRecipientUpdateOne) Select(field string, fields ...string) *TemplateRecipientUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TemplateRecipient entity.
func (truo *TemplateRecipientUpdateOne) Save(ctx context.Context) (*TemplateRecipient, error) {
	if err := truo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TemplateRecipientUpdateOne) SaveX(ctx context.Context) *TemplateRecipient {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TemplateRecipientUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TemplateRecipientUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TemplateRecipientUpdateOne) defaults() error {
	if _, ok := truo.mutation.UpdatedAt(); !ok && !truo.mutation.UpdatedAtCleared() {
		if templaterecipient.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized templaterecipient.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := templaterecipient.UpdateDefaultUpdatedAt()
		truo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (truo *TemplateRecipientUpdateOne) check() error {
	if v, ok := truo.mutation.OwnerID(); ok {
		if err := templaterecipient.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.owner_id": %w`, err)}
		}
	}
	if v, ok := truo.mutation.Status(); ok {
		if err := templaterecipient.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.status": %w`, err)}
		}
	}
	if truo.mutation.TemplateCleared() && len(truo.mutation.TemplateIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TemplateRecipient.template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (truo *TemplateRecipientUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateRecipientUpdateOne {
	truo.modifiers = append(truo.modifiers, modifiers...)
	return truo
}

func (truo *TemplateRecipientUpdateOne) sqlSave(ctx context.Context) (_node *TemplateRecipient, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(templaterecipient.Table, templaterecipient.Columns, sqlgraph.NewFieldSpec(templaterecipient.FieldID, field.TypeString))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TemplateRecipient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, templaterecipient.FieldID)
		for _, f := range fields {
			if !templaterecipient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != templaterecipient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if truo.mutation.CreatedAtCleared() {
		_spec.ClearField(templaterecipient.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := truo.mutation.UpdatedAt(); ok {
		_spec.SetField(templaterecipient.FieldUpdatedAt, field.TypeTime, value)
	}
	if truo.mutation.UpdatedAtCleared() {
		_spec.ClearField(templaterecipient.FieldUpdatedAt, field.TypeTime)
	}
	if truo.mutation.CreatedByCleared() {
		_spec.ClearField(templaterecipient.FieldCreatedBy, field.TypeString)
	}
	if value, ok := truo.mutation.UpdatedBy(); ok {
		_spec.SetField(templaterecipient.FieldUpdatedBy, field.TypeString, value)
	}
	if truo.mutation.UpdatedByCleared() {
		_spec.ClearField(templaterecipient.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := truo.mutation.DeletedAt(); ok {
		_spec.SetField(templaterecipient.FieldDeletedAt, field.TypeTime, value)
	}
	if truo.mutation.DeletedAtCleared() {
		_spec.ClearField(templaterecipient.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := truo.mutation.DeletedBy(); ok {
		_spec.SetField(templaterecipient.FieldDeletedBy, field.TypeString, value)
	}
	if truo.mutation.DeletedByCleared() {
		_spec.ClearField(templaterecipient.FieldDeletedBy, field.TypeString)
	}
	if value, ok := truo.mutation.SendAttempts(); ok {
		_spec.SetField(templaterecipient.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedSendAttempts(); ok {
		_spec.AddField(templaterecipient.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := truo.mutation.Status(); ok {
		_spec.SetField(templaterecipient.FieldStatus, field.TypeEnum, value)
	}
	if truo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templaterecipient.OwnerTable,
			Columns: []string{templaterecipient.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = truo.schemaConfig.TemplateRecipient
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templaterecipient.OwnerTable,
			Columns: []string{templaterecipient.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = truo.schemaConfig.TemplateRecipient
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   templaterecipient.DocumentTable,
			Columns: []string{templaterecipient.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = truo.schemaConfig.TemplateRecipient
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   templaterecipient.DocumentTable,
			Columns: []string{templaterecipient.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = truo.schemaConfig.TemplateRecipient
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templaterecipient.EventsTable,
			Columns: []string{templaterecipient.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = truo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !truo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templaterecipient.EventsTable,
			Columns: []string{templaterecipient.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = truo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templaterecipient.EventsTable,
			Columns: []string{templaterecipient.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = truo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = truo.schemaConfig.TemplateRecipient
	ctx = internal.NewSchemaConfigContext(ctx, truo.schemaConfig)
	_spec.AddModifiers(truo.modifiers...)
	_node = &TemplateRecipient{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templaterecipient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
