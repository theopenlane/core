// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/template"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// DocumentDataQuery is the builder for querying DocumentData entities.
type DocumentDataQuery struct {
	config
	ctx               *QueryContext
	order             []documentdata.OrderOption
	inters            []Interceptor
	predicates        []predicate.DocumentData
	withOwner         *OrganizationQuery
	withTemplate      *TemplateQuery
	withEntities      *EntityQuery
	withFiles         *FileQuery
	loadTotal         []func(context.Context, []*DocumentData) error
	modifiers         []func(*sql.Selector)
	withNamedEntities map[string]*EntityQuery
	withNamedFiles    map[string]*FileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DocumentDataQuery builder.
func (ddq *DocumentDataQuery) Where(ps ...predicate.DocumentData) *DocumentDataQuery {
	ddq.predicates = append(ddq.predicates, ps...)
	return ddq
}

// Limit the number of records to be returned by this query.
func (ddq *DocumentDataQuery) Limit(limit int) *DocumentDataQuery {
	ddq.ctx.Limit = &limit
	return ddq
}

// Offset to start from.
func (ddq *DocumentDataQuery) Offset(offset int) *DocumentDataQuery {
	ddq.ctx.Offset = &offset
	return ddq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ddq *DocumentDataQuery) Unique(unique bool) *DocumentDataQuery {
	ddq.ctx.Unique = &unique
	return ddq
}

// Order specifies how the records should be ordered.
func (ddq *DocumentDataQuery) Order(o ...documentdata.OrderOption) *DocumentDataQuery {
	ddq.order = append(ddq.order, o...)
	return ddq
}

// QueryOwner chains the current query on the "owner" edge.
func (ddq *DocumentDataQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: ddq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ddq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ddq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentdata.Table, documentdata.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, documentdata.OwnerTable, documentdata.OwnerColumn),
		)
		schemaConfig := ddq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.DocumentData
		fromU = sqlgraph.SetNeighbors(ddq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplate chains the current query on the "template" edge.
func (ddq *DocumentDataQuery) QueryTemplate() *TemplateQuery {
	query := (&TemplateClient{config: ddq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ddq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ddq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentdata.Table, documentdata.FieldID, selector),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, documentdata.TemplateTable, documentdata.TemplateColumn),
		)
		schemaConfig := ddq.schemaConfig
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.DocumentData
		fromU = sqlgraph.SetNeighbors(ddq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntities chains the current query on the "entities" edge.
func (ddq *DocumentDataQuery) QueryEntities() *EntityQuery {
	query := (&EntityClient{config: ddq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ddq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ddq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentdata.Table, documentdata.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, documentdata.EntitiesTable, documentdata.EntitiesPrimaryKey...),
		)
		schemaConfig := ddq.schemaConfig
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.EntityDocuments
		fromU = sqlgraph.SetNeighbors(ddq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (ddq *DocumentDataQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: ddq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ddq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ddq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentdata.Table, documentdata.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, documentdata.FilesTable, documentdata.FilesPrimaryKey...),
		)
		schemaConfig := ddq.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.DocumentDataFiles
		fromU = sqlgraph.SetNeighbors(ddq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DocumentData entity from the query.
// Returns a *NotFoundError when no DocumentData was found.
func (ddq *DocumentDataQuery) First(ctx context.Context) (*DocumentData, error) {
	nodes, err := ddq.Limit(1).All(setContextOp(ctx, ddq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{documentdata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ddq *DocumentDataQuery) FirstX(ctx context.Context) *DocumentData {
	node, err := ddq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DocumentData ID from the query.
// Returns a *NotFoundError when no DocumentData ID was found.
func (ddq *DocumentDataQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ddq.Limit(1).IDs(setContextOp(ctx, ddq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{documentdata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ddq *DocumentDataQuery) FirstIDX(ctx context.Context) string {
	id, err := ddq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DocumentData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DocumentData entity is found.
// Returns a *NotFoundError when no DocumentData entities are found.
func (ddq *DocumentDataQuery) Only(ctx context.Context) (*DocumentData, error) {
	nodes, err := ddq.Limit(2).All(setContextOp(ctx, ddq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{documentdata.Label}
	default:
		return nil, &NotSingularError{documentdata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ddq *DocumentDataQuery) OnlyX(ctx context.Context) *DocumentData {
	node, err := ddq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DocumentData ID in the query.
// Returns a *NotSingularError when more than one DocumentData ID is found.
// Returns a *NotFoundError when no entities are found.
func (ddq *DocumentDataQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ddq.Limit(2).IDs(setContextOp(ctx, ddq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{documentdata.Label}
	default:
		err = &NotSingularError{documentdata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ddq *DocumentDataQuery) OnlyIDX(ctx context.Context) string {
	id, err := ddq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DocumentDataSlice.
func (ddq *DocumentDataQuery) All(ctx context.Context) ([]*DocumentData, error) {
	ctx = setContextOp(ctx, ddq.ctx, ent.OpQueryAll)
	if err := ddq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DocumentData, *DocumentDataQuery]()
	return withInterceptors[[]*DocumentData](ctx, ddq, qr, ddq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ddq *DocumentDataQuery) AllX(ctx context.Context) []*DocumentData {
	nodes, err := ddq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DocumentData IDs.
func (ddq *DocumentDataQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ddq.ctx.Unique == nil && ddq.path != nil {
		ddq.Unique(true)
	}
	ctx = setContextOp(ctx, ddq.ctx, ent.OpQueryIDs)
	if err = ddq.Select(documentdata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ddq *DocumentDataQuery) IDsX(ctx context.Context) []string {
	ids, err := ddq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ddq *DocumentDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ddq.ctx, ent.OpQueryCount)
	if err := ddq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ddq, querierCount[*DocumentDataQuery](), ddq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ddq *DocumentDataQuery) CountX(ctx context.Context) int {
	count, err := ddq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ddq *DocumentDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ddq.ctx, ent.OpQueryExist)
	switch _, err := ddq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ddq *DocumentDataQuery) ExistX(ctx context.Context) bool {
	exist, err := ddq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DocumentDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ddq *DocumentDataQuery) Clone() *DocumentDataQuery {
	if ddq == nil {
		return nil
	}
	return &DocumentDataQuery{
		config:       ddq.config,
		ctx:          ddq.ctx.Clone(),
		order:        append([]documentdata.OrderOption{}, ddq.order...),
		inters:       append([]Interceptor{}, ddq.inters...),
		predicates:   append([]predicate.DocumentData{}, ddq.predicates...),
		withOwner:    ddq.withOwner.Clone(),
		withTemplate: ddq.withTemplate.Clone(),
		withEntities: ddq.withEntities.Clone(),
		withFiles:    ddq.withFiles.Clone(),
		// clone intermediate query.
		sql:       ddq.sql.Clone(),
		path:      ddq.path,
		modifiers: append([]func(*sql.Selector){}, ddq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (ddq *DocumentDataQuery) WithOwner(opts ...func(*OrganizationQuery)) *DocumentDataQuery {
	query := (&OrganizationClient{config: ddq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ddq.withOwner = query
	return ddq
}

// WithTemplate tells the query-builder to eager-load the nodes that are connected to
// the "template" edge. The optional arguments are used to configure the query builder of the edge.
func (ddq *DocumentDataQuery) WithTemplate(opts ...func(*TemplateQuery)) *DocumentDataQuery {
	query := (&TemplateClient{config: ddq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ddq.withTemplate = query
	return ddq
}

// WithEntities tells the query-builder to eager-load the nodes that are connected to
// the "entities" edge. The optional arguments are used to configure the query builder of the edge.
func (ddq *DocumentDataQuery) WithEntities(opts ...func(*EntityQuery)) *DocumentDataQuery {
	query := (&EntityClient{config: ddq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ddq.withEntities = query
	return ddq
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (ddq *DocumentDataQuery) WithFiles(opts ...func(*FileQuery)) *DocumentDataQuery {
	query := (&FileClient{config: ddq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ddq.withFiles = query
	return ddq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DocumentData.Query().
//		GroupBy(documentdata.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (ddq *DocumentDataQuery) GroupBy(field string, fields ...string) *DocumentDataGroupBy {
	ddq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DocumentDataGroupBy{build: ddq}
	grbuild.flds = &ddq.ctx.Fields
	grbuild.label = documentdata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.DocumentData.Query().
//		Select(documentdata.FieldCreatedAt).
//		Scan(ctx, &v)
func (ddq *DocumentDataQuery) Select(fields ...string) *DocumentDataSelect {
	ddq.ctx.Fields = append(ddq.ctx.Fields, fields...)
	sbuild := &DocumentDataSelect{DocumentDataQuery: ddq}
	sbuild.label = documentdata.Label
	sbuild.flds, sbuild.scan = &ddq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DocumentDataSelect configured with the given aggregations.
func (ddq *DocumentDataQuery) Aggregate(fns ...AggregateFunc) *DocumentDataSelect {
	return ddq.Select().Aggregate(fns...)
}

func (ddq *DocumentDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ddq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ddq); err != nil {
				return err
			}
		}
	}
	for _, f := range ddq.ctx.Fields {
		if !documentdata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if ddq.path != nil {
		prev, err := ddq.path(ctx)
		if err != nil {
			return err
		}
		ddq.sql = prev
	}
	if documentdata.Policy == nil {
		return errors.New("generated: uninitialized documentdata.Policy (forgotten import generated/runtime?)")
	}
	if err := documentdata.Policy.EvalQuery(ctx, ddq); err != nil {
		return err
	}
	return nil
}

func (ddq *DocumentDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DocumentData, error) {
	var (
		nodes       = []*DocumentData{}
		_spec       = ddq.querySpec()
		loadedTypes = [4]bool{
			ddq.withOwner != nil,
			ddq.withTemplate != nil,
			ddq.withEntities != nil,
			ddq.withFiles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DocumentData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DocumentData{config: ddq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = ddq.schemaConfig.DocumentData
	ctx = internal.NewSchemaConfigContext(ctx, ddq.schemaConfig)
	if len(ddq.modifiers) > 0 {
		_spec.Modifiers = ddq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ddq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ddq.withOwner; query != nil {
		if err := ddq.loadOwner(ctx, query, nodes, nil,
			func(n *DocumentData, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := ddq.withTemplate; query != nil {
		if err := ddq.loadTemplate(ctx, query, nodes, nil,
			func(n *DocumentData, e *Template) { n.Edges.Template = e }); err != nil {
			return nil, err
		}
	}
	if query := ddq.withEntities; query != nil {
		if err := ddq.loadEntities(ctx, query, nodes,
			func(n *DocumentData) { n.Edges.Entities = []*Entity{} },
			func(n *DocumentData, e *Entity) { n.Edges.Entities = append(n.Edges.Entities, e) }); err != nil {
			return nil, err
		}
	}
	if query := ddq.withFiles; query != nil {
		if err := ddq.loadFiles(ctx, query, nodes,
			func(n *DocumentData) { n.Edges.Files = []*File{} },
			func(n *DocumentData, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ddq.withNamedEntities {
		if err := ddq.loadEntities(ctx, query, nodes,
			func(n *DocumentData) { n.appendNamedEntities(name) },
			func(n *DocumentData, e *Entity) { n.appendNamedEntities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ddq.withNamedFiles {
		if err := ddq.loadFiles(ctx, query, nodes,
			func(n *DocumentData) { n.appendNamedFiles(name) },
			func(n *DocumentData, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ddq.loadTotal {
		if err := ddq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ddq *DocumentDataQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*DocumentData, init func(*DocumentData), assign func(*DocumentData, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DocumentData)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ddq *DocumentDataQuery) loadTemplate(ctx context.Context, query *TemplateQuery, nodes []*DocumentData, init func(*DocumentData), assign func(*DocumentData, *Template)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DocumentData)
	for i := range nodes {
		fk := nodes[i].TemplateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(template.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "template_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ddq *DocumentDataQuery) loadEntities(ctx context.Context, query *EntityQuery, nodes []*DocumentData, init func(*DocumentData), assign func(*DocumentData, *Entity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*DocumentData)
	nids := make(map[string]map[*DocumentData]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(documentdata.EntitiesTable)
		joinT.Schema(ddq.schemaConfig.EntityDocuments)
		s.Join(joinT).On(s.C(entity.FieldID), joinT.C(documentdata.EntitiesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(documentdata.EntitiesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(documentdata.EntitiesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*DocumentData]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Entity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "entities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ddq *DocumentDataQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*DocumentData, init func(*DocumentData), assign func(*DocumentData, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*DocumentData)
	nids := make(map[string]map[*DocumentData]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(documentdata.FilesTable)
		joinT.Schema(ddq.schemaConfig.DocumentDataFiles)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(documentdata.FilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(documentdata.FilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(documentdata.FilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*DocumentData]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ddq *DocumentDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ddq.querySpec()
	_spec.Node.Schema = ddq.schemaConfig.DocumentData
	ctx = internal.NewSchemaConfigContext(ctx, ddq.schemaConfig)
	if len(ddq.modifiers) > 0 {
		_spec.Modifiers = ddq.modifiers
	}
	_spec.Node.Columns = ddq.ctx.Fields
	if len(ddq.ctx.Fields) > 0 {
		_spec.Unique = ddq.ctx.Unique != nil && *ddq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ddq.driver, _spec)
}

func (ddq *DocumentDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(documentdata.Table, documentdata.Columns, sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString))
	_spec.From = ddq.sql
	if unique := ddq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ddq.path != nil {
		_spec.Unique = true
	}
	if fields := ddq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentdata.FieldID)
		for i := range fields {
			if fields[i] != documentdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ddq.withOwner != nil {
			_spec.Node.AddColumnOnce(documentdata.FieldOwnerID)
		}
		if ddq.withTemplate != nil {
			_spec.Node.AddColumnOnce(documentdata.FieldTemplateID)
		}
	}
	if ps := ddq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ddq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ddq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ddq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ddq *DocumentDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ddq.driver.Dialect())
	t1 := builder.Table(documentdata.Table)
	columns := ddq.ctx.Fields
	if len(columns) == 0 {
		columns = documentdata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ddq.sql != nil {
		selector = ddq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ddq.ctx.Unique != nil && *ddq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(ddq.schemaConfig.DocumentData)
	ctx = internal.NewSchemaConfigContext(ctx, ddq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range ddq.modifiers {
		m(selector)
	}
	for _, p := range ddq.predicates {
		p(selector)
	}
	for _, p := range ddq.order {
		p(selector)
	}
	if offset := ddq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ddq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ddq *DocumentDataQuery) Modify(modifiers ...func(s *sql.Selector)) *DocumentDataSelect {
	ddq.modifiers = append(ddq.modifiers, modifiers...)
	return ddq.Select()
}

// WithNamedEntities tells the query-builder to eager-load the nodes that are connected to the "entities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ddq *DocumentDataQuery) WithNamedEntities(name string, opts ...func(*EntityQuery)) *DocumentDataQuery {
	query := (&EntityClient{config: ddq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ddq.withNamedEntities == nil {
		ddq.withNamedEntities = make(map[string]*EntityQuery)
	}
	ddq.withNamedEntities[name] = query
	return ddq
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ddq *DocumentDataQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *DocumentDataQuery {
	query := (&FileClient{config: ddq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ddq.withNamedFiles == nil {
		ddq.withNamedFiles = make(map[string]*FileQuery)
	}
	ddq.withNamedFiles[name] = query
	return ddq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (ddq *DocumentDataQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ddq.ctx, ent.OpQueryIDs)
	if err := ddq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return ddq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, ddq, qr, ddq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// DocumentDataGroupBy is the group-by builder for DocumentData entities.
type DocumentDataGroupBy struct {
	selector
	build *DocumentDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ddgb *DocumentDataGroupBy) Aggregate(fns ...AggregateFunc) *DocumentDataGroupBy {
	ddgb.fns = append(ddgb.fns, fns...)
	return ddgb
}

// Scan applies the selector query and scans the result into the given value.
func (ddgb *DocumentDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ddgb.build.ctx, ent.OpQueryGroupBy)
	if err := ddgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentDataQuery, *DocumentDataGroupBy](ctx, ddgb.build, ddgb, ddgb.build.inters, v)
}

func (ddgb *DocumentDataGroupBy) sqlScan(ctx context.Context, root *DocumentDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ddgb.fns))
	for _, fn := range ddgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ddgb.flds)+len(ddgb.fns))
		for _, f := range *ddgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ddgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ddgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DocumentDataSelect is the builder for selecting fields of DocumentData entities.
type DocumentDataSelect struct {
	*DocumentDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dds *DocumentDataSelect) Aggregate(fns ...AggregateFunc) *DocumentDataSelect {
	dds.fns = append(dds.fns, fns...)
	return dds
}

// Scan applies the selector query and scans the result into the given value.
func (dds *DocumentDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dds.ctx, ent.OpQuerySelect)
	if err := dds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentDataQuery, *DocumentDataSelect](ctx, dds.DocumentDataQuery, dds, dds.inters, v)
}

func (dds *DocumentDataSelect) sqlScan(ctx context.Context, root *DocumentDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dds.fns))
	for _, fn := range dds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dds *DocumentDataSelect) Modify(modifiers ...func(s *sql.Selector)) *DocumentDataSelect {
	dds.modifiers = append(dds.modifiers, modifiers...)
	return dds
}
