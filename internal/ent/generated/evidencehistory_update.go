// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/evidencehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EvidenceHistoryUpdate is the builder for updating EvidenceHistory entities.
type EvidenceHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *EvidenceHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EvidenceHistoryUpdate builder.
func (_u *EvidenceHistoryUpdate) Where(ps ...predicate.EvidenceHistory) *EvidenceHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EvidenceHistoryUpdate) SetUpdatedAt(v time.Time) *EvidenceHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EvidenceHistoryUpdate) ClearUpdatedAt() *EvidenceHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EvidenceHistoryUpdate) SetUpdatedBy(v string) *EvidenceHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableUpdatedBy(v *string) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EvidenceHistoryUpdate) ClearUpdatedBy() *EvidenceHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EvidenceHistoryUpdate) SetDeletedAt(v time.Time) *EvidenceHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableDeletedAt(v *time.Time) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EvidenceHistoryUpdate) ClearDeletedAt() *EvidenceHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *EvidenceHistoryUpdate) SetDeletedBy(v string) *EvidenceHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableDeletedBy(v *string) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *EvidenceHistoryUpdate) ClearDeletedBy() *EvidenceHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EvidenceHistoryUpdate) SetTags(v []string) *EvidenceHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EvidenceHistoryUpdate) AppendTags(v []string) *EvidenceHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EvidenceHistoryUpdate) ClearTags() *EvidenceHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *EvidenceHistoryUpdate) SetName(v string) *EvidenceHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableName(v *string) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EvidenceHistoryUpdate) SetDescription(v string) *EvidenceHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableDescription(v *string) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EvidenceHistoryUpdate) ClearDescription() *EvidenceHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (_u *EvidenceHistoryUpdate) SetCollectionProcedure(v string) *EvidenceHistoryUpdate {
	_u.mutation.SetCollectionProcedure(v)
	return _u
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableCollectionProcedure(v *string) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetCollectionProcedure(*v)
	}
	return _u
}

// ClearCollectionProcedure clears the value of the "collection_procedure" field.
func (_u *EvidenceHistoryUpdate) ClearCollectionProcedure() *EvidenceHistoryUpdate {
	_u.mutation.ClearCollectionProcedure()
	return _u
}

// SetCreationDate sets the "creation_date" field.
func (_u *EvidenceHistoryUpdate) SetCreationDate(v time.Time) *EvidenceHistoryUpdate {
	_u.mutation.SetCreationDate(v)
	return _u
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableCreationDate(v *time.Time) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetCreationDate(*v)
	}
	return _u
}

// SetRenewalDate sets the "renewal_date" field.
func (_u *EvidenceHistoryUpdate) SetRenewalDate(v time.Time) *EvidenceHistoryUpdate {
	_u.mutation.SetRenewalDate(v)
	return _u
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableRenewalDate(v *time.Time) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetRenewalDate(*v)
	}
	return _u
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (_u *EvidenceHistoryUpdate) ClearRenewalDate() *EvidenceHistoryUpdate {
	_u.mutation.ClearRenewalDate()
	return _u
}

// SetSource sets the "source" field.
func (_u *EvidenceHistoryUpdate) SetSource(v string) *EvidenceHistoryUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableSource(v *string) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *EvidenceHistoryUpdate) ClearSource() *EvidenceHistoryUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetIsAutomated sets the "is_automated" field.
func (_u *EvidenceHistoryUpdate) SetIsAutomated(v bool) *EvidenceHistoryUpdate {
	_u.mutation.SetIsAutomated(v)
	return _u
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableIsAutomated(v *bool) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetIsAutomated(*v)
	}
	return _u
}

// ClearIsAutomated clears the value of the "is_automated" field.
func (_u *EvidenceHistoryUpdate) ClearIsAutomated() *EvidenceHistoryUpdate {
	_u.mutation.ClearIsAutomated()
	return _u
}

// SetURL sets the "url" field.
func (_u *EvidenceHistoryUpdate) SetURL(v string) *EvidenceHistoryUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableURL(v *string) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *EvidenceHistoryUpdate) ClearURL() *EvidenceHistoryUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EvidenceHistoryUpdate) SetStatus(v enums.EvidenceStatus) *EvidenceHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EvidenceHistoryUpdate) SetNillableStatus(v *enums.EvidenceStatus) *EvidenceHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *EvidenceHistoryUpdate) ClearStatus() *EvidenceHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// Mutation returns the EvidenceHistoryMutation object of the builder.
func (_u *EvidenceHistoryUpdate) Mutation() *EvidenceHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EvidenceHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EvidenceHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EvidenceHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EvidenceHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EvidenceHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if evidencehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized evidencehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := evidencehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *EvidenceHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := evidencehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "EvidenceHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EvidenceHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EvidenceHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EvidenceHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evidencehistory.Table, evidencehistory.Columns, sqlgraph.NewFieldSpec(evidencehistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(evidencehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(evidencehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(evidencehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(evidencehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, evidencehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(evidencehistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(evidencehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(evidencehistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(evidencehistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(evidencehistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidencehistory.FieldCollectionProcedure, field.TypeString, value)
	}
	if _u.mutation.CollectionProcedureCleared() {
		_spec.ClearField(evidencehistory.FieldCollectionProcedure, field.TypeString)
	}
	if value, ok := _u.mutation.CreationDate(); ok {
		_spec.SetField(evidencehistory.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenewalDate(); ok {
		_spec.SetField(evidencehistory.FieldRenewalDate, field.TypeTime, value)
	}
	if _u.mutation.RenewalDateCleared() {
		_spec.ClearField(evidencehistory.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(evidencehistory.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(evidencehistory.FieldSource, field.TypeString)
	}
	if value, ok := _u.mutation.IsAutomated(); ok {
		_spec.SetField(evidencehistory.FieldIsAutomated, field.TypeBool, value)
	}
	if _u.mutation.IsAutomatedCleared() {
		_spec.ClearField(evidencehistory.FieldIsAutomated, field.TypeBool)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(evidencehistory.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(evidencehistory.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(evidencehistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(evidencehistory.FieldStatus, field.TypeEnum)
	}
	_spec.Node.Schema = _u.schemaConfig.EvidenceHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidencehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EvidenceHistoryUpdateOne is the builder for updating a single EvidenceHistory entity.
type EvidenceHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EvidenceHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EvidenceHistoryUpdateOne) SetUpdatedAt(v time.Time) *EvidenceHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EvidenceHistoryUpdateOne) ClearUpdatedAt() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EvidenceHistoryUpdateOne) SetUpdatedBy(v string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableUpdatedBy(v *string) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EvidenceHistoryUpdateOne) ClearUpdatedBy() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EvidenceHistoryUpdateOne) SetDeletedAt(v time.Time) *EvidenceHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EvidenceHistoryUpdateOne) ClearDeletedAt() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *EvidenceHistoryUpdateOne) SetDeletedBy(v string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableDeletedBy(v *string) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *EvidenceHistoryUpdateOne) ClearDeletedBy() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EvidenceHistoryUpdateOne) SetTags(v []string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EvidenceHistoryUpdateOne) AppendTags(v []string) *EvidenceHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EvidenceHistoryUpdateOne) ClearTags() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *EvidenceHistoryUpdateOne) SetName(v string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableName(v *string) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EvidenceHistoryUpdateOne) SetDescription(v string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableDescription(v *string) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EvidenceHistoryUpdateOne) ClearDescription() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (_u *EvidenceHistoryUpdateOne) SetCollectionProcedure(v string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetCollectionProcedure(v)
	return _u
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableCollectionProcedure(v *string) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetCollectionProcedure(*v)
	}
	return _u
}

// ClearCollectionProcedure clears the value of the "collection_procedure" field.
func (_u *EvidenceHistoryUpdateOne) ClearCollectionProcedure() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearCollectionProcedure()
	return _u
}

// SetCreationDate sets the "creation_date" field.
func (_u *EvidenceHistoryUpdateOne) SetCreationDate(v time.Time) *EvidenceHistoryUpdateOne {
	_u.mutation.SetCreationDate(v)
	return _u
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableCreationDate(v *time.Time) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetCreationDate(*v)
	}
	return _u
}

// SetRenewalDate sets the "renewal_date" field.
func (_u *EvidenceHistoryUpdateOne) SetRenewalDate(v time.Time) *EvidenceHistoryUpdateOne {
	_u.mutation.SetRenewalDate(v)
	return _u
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableRenewalDate(v *time.Time) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetRenewalDate(*v)
	}
	return _u
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (_u *EvidenceHistoryUpdateOne) ClearRenewalDate() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearRenewalDate()
	return _u
}

// SetSource sets the "source" field.
func (_u *EvidenceHistoryUpdateOne) SetSource(v string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableSource(v *string) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *EvidenceHistoryUpdateOne) ClearSource() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetIsAutomated sets the "is_automated" field.
func (_u *EvidenceHistoryUpdateOne) SetIsAutomated(v bool) *EvidenceHistoryUpdateOne {
	_u.mutation.SetIsAutomated(v)
	return _u
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableIsAutomated(v *bool) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetIsAutomated(*v)
	}
	return _u
}

// ClearIsAutomated clears the value of the "is_automated" field.
func (_u *EvidenceHistoryUpdateOne) ClearIsAutomated() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearIsAutomated()
	return _u
}

// SetURL sets the "url" field.
func (_u *EvidenceHistoryUpdateOne) SetURL(v string) *EvidenceHistoryUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableURL(v *string) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *EvidenceHistoryUpdateOne) ClearURL() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EvidenceHistoryUpdateOne) SetStatus(v enums.EvidenceStatus) *EvidenceHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EvidenceHistoryUpdateOne) SetNillableStatus(v *enums.EvidenceStatus) *EvidenceHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *EvidenceHistoryUpdateOne) ClearStatus() *EvidenceHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// Mutation returns the EvidenceHistoryMutation object of the builder.
func (_u *EvidenceHistoryUpdateOne) Mutation() *EvidenceHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the EvidenceHistoryUpdate builder.
func (_u *EvidenceHistoryUpdateOne) Where(ps ...predicate.EvidenceHistory) *EvidenceHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EvidenceHistoryUpdateOne) Select(field string, fields ...string) *EvidenceHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated EvidenceHistory entity.
func (_u *EvidenceHistoryUpdateOne) Save(ctx context.Context) (*EvidenceHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EvidenceHistoryUpdateOne) SaveX(ctx context.Context) *EvidenceHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EvidenceHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EvidenceHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EvidenceHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if evidencehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized evidencehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := evidencehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *EvidenceHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := evidencehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "EvidenceHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EvidenceHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EvidenceHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EvidenceHistoryUpdateOne) sqlSave(ctx context.Context) (_node *EvidenceHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evidencehistory.Table, evidencehistory.Columns, sqlgraph.NewFieldSpec(evidencehistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EvidenceHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evidencehistory.FieldID)
		for _, f := range fields {
			if !evidencehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != evidencehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(evidencehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(evidencehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(evidencehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(evidencehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, evidencehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(evidencehistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(evidencehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(evidencehistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(evidencehistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(evidencehistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidencehistory.FieldCollectionProcedure, field.TypeString, value)
	}
	if _u.mutation.CollectionProcedureCleared() {
		_spec.ClearField(evidencehistory.FieldCollectionProcedure, field.TypeString)
	}
	if value, ok := _u.mutation.CreationDate(); ok {
		_spec.SetField(evidencehistory.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenewalDate(); ok {
		_spec.SetField(evidencehistory.FieldRenewalDate, field.TypeTime, value)
	}
	if _u.mutation.RenewalDateCleared() {
		_spec.ClearField(evidencehistory.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(evidencehistory.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(evidencehistory.FieldSource, field.TypeString)
	}
	if value, ok := _u.mutation.IsAutomated(); ok {
		_spec.SetField(evidencehistory.FieldIsAutomated, field.TypeBool, value)
	}
	if _u.mutation.IsAutomatedCleared() {
		_spec.ClearField(evidencehistory.FieldIsAutomated, field.TypeBool)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(evidencehistory.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(evidencehistory.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(evidencehistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(evidencehistory.FieldStatus, field.TypeEnum)
	}
	_spec.Node.Schema = _u.schemaConfig.EvidenceHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &EvidenceHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidencehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
