// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/evidencehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EvidenceHistoryUpdate is the builder for updating EvidenceHistory entities.
type EvidenceHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *EvidenceHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EvidenceHistoryUpdate builder.
func (ehu *EvidenceHistoryUpdate) Where(ps ...predicate.EvidenceHistory) *EvidenceHistoryUpdate {
	ehu.mutation.Where(ps...)
	return ehu
}

// SetUpdatedAt sets the "updated_at" field.
func (ehu *EvidenceHistoryUpdate) SetUpdatedAt(t time.Time) *EvidenceHistoryUpdate {
	ehu.mutation.SetUpdatedAt(t)
	return ehu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ehu *EvidenceHistoryUpdate) ClearUpdatedAt() *EvidenceHistoryUpdate {
	ehu.mutation.ClearUpdatedAt()
	return ehu
}

// SetUpdatedBy sets the "updated_by" field.
func (ehu *EvidenceHistoryUpdate) SetUpdatedBy(s string) *EvidenceHistoryUpdate {
	ehu.mutation.SetUpdatedBy(s)
	return ehu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableUpdatedBy(s *string) *EvidenceHistoryUpdate {
	if s != nil {
		ehu.SetUpdatedBy(*s)
	}
	return ehu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ehu *EvidenceHistoryUpdate) ClearUpdatedBy() *EvidenceHistoryUpdate {
	ehu.mutation.ClearUpdatedBy()
	return ehu
}

// SetDeletedAt sets the "deleted_at" field.
func (ehu *EvidenceHistoryUpdate) SetDeletedAt(t time.Time) *EvidenceHistoryUpdate {
	ehu.mutation.SetDeletedAt(t)
	return ehu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableDeletedAt(t *time.Time) *EvidenceHistoryUpdate {
	if t != nil {
		ehu.SetDeletedAt(*t)
	}
	return ehu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ehu *EvidenceHistoryUpdate) ClearDeletedAt() *EvidenceHistoryUpdate {
	ehu.mutation.ClearDeletedAt()
	return ehu
}

// SetDeletedBy sets the "deleted_by" field.
func (ehu *EvidenceHistoryUpdate) SetDeletedBy(s string) *EvidenceHistoryUpdate {
	ehu.mutation.SetDeletedBy(s)
	return ehu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableDeletedBy(s *string) *EvidenceHistoryUpdate {
	if s != nil {
		ehu.SetDeletedBy(*s)
	}
	return ehu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ehu *EvidenceHistoryUpdate) ClearDeletedBy() *EvidenceHistoryUpdate {
	ehu.mutation.ClearDeletedBy()
	return ehu
}

// SetTags sets the "tags" field.
func (ehu *EvidenceHistoryUpdate) SetTags(s []string) *EvidenceHistoryUpdate {
	ehu.mutation.SetTags(s)
	return ehu
}

// AppendTags appends s to the "tags" field.
func (ehu *EvidenceHistoryUpdate) AppendTags(s []string) *EvidenceHistoryUpdate {
	ehu.mutation.AppendTags(s)
	return ehu
}

// ClearTags clears the value of the "tags" field.
func (ehu *EvidenceHistoryUpdate) ClearTags() *EvidenceHistoryUpdate {
	ehu.mutation.ClearTags()
	return ehu
}

// SetName sets the "name" field.
func (ehu *EvidenceHistoryUpdate) SetName(s string) *EvidenceHistoryUpdate {
	ehu.mutation.SetName(s)
	return ehu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableName(s *string) *EvidenceHistoryUpdate {
	if s != nil {
		ehu.SetName(*s)
	}
	return ehu
}

// SetDescription sets the "description" field.
func (ehu *EvidenceHistoryUpdate) SetDescription(s string) *EvidenceHistoryUpdate {
	ehu.mutation.SetDescription(s)
	return ehu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableDescription(s *string) *EvidenceHistoryUpdate {
	if s != nil {
		ehu.SetDescription(*s)
	}
	return ehu
}

// ClearDescription clears the value of the "description" field.
func (ehu *EvidenceHistoryUpdate) ClearDescription() *EvidenceHistoryUpdate {
	ehu.mutation.ClearDescription()
	return ehu
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (ehu *EvidenceHistoryUpdate) SetCollectionProcedure(s string) *EvidenceHistoryUpdate {
	ehu.mutation.SetCollectionProcedure(s)
	return ehu
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableCollectionProcedure(s *string) *EvidenceHistoryUpdate {
	if s != nil {
		ehu.SetCollectionProcedure(*s)
	}
	return ehu
}

// ClearCollectionProcedure clears the value of the "collection_procedure" field.
func (ehu *EvidenceHistoryUpdate) ClearCollectionProcedure() *EvidenceHistoryUpdate {
	ehu.mutation.ClearCollectionProcedure()
	return ehu
}

// SetCreationDate sets the "creation_date" field.
func (ehu *EvidenceHistoryUpdate) SetCreationDate(t time.Time) *EvidenceHistoryUpdate {
	ehu.mutation.SetCreationDate(t)
	return ehu
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableCreationDate(t *time.Time) *EvidenceHistoryUpdate {
	if t != nil {
		ehu.SetCreationDate(*t)
	}
	return ehu
}

// SetRenewalDate sets the "renewal_date" field.
func (ehu *EvidenceHistoryUpdate) SetRenewalDate(t time.Time) *EvidenceHistoryUpdate {
	ehu.mutation.SetRenewalDate(t)
	return ehu
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableRenewalDate(t *time.Time) *EvidenceHistoryUpdate {
	if t != nil {
		ehu.SetRenewalDate(*t)
	}
	return ehu
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (ehu *EvidenceHistoryUpdate) ClearRenewalDate() *EvidenceHistoryUpdate {
	ehu.mutation.ClearRenewalDate()
	return ehu
}

// SetSource sets the "source" field.
func (ehu *EvidenceHistoryUpdate) SetSource(s string) *EvidenceHistoryUpdate {
	ehu.mutation.SetSource(s)
	return ehu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableSource(s *string) *EvidenceHistoryUpdate {
	if s != nil {
		ehu.SetSource(*s)
	}
	return ehu
}

// ClearSource clears the value of the "source" field.
func (ehu *EvidenceHistoryUpdate) ClearSource() *EvidenceHistoryUpdate {
	ehu.mutation.ClearSource()
	return ehu
}

// SetIsAutomated sets the "is_automated" field.
func (ehu *EvidenceHistoryUpdate) SetIsAutomated(b bool) *EvidenceHistoryUpdate {
	ehu.mutation.SetIsAutomated(b)
	return ehu
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableIsAutomated(b *bool) *EvidenceHistoryUpdate {
	if b != nil {
		ehu.SetIsAutomated(*b)
	}
	return ehu
}

// ClearIsAutomated clears the value of the "is_automated" field.
func (ehu *EvidenceHistoryUpdate) ClearIsAutomated() *EvidenceHistoryUpdate {
	ehu.mutation.ClearIsAutomated()
	return ehu
}

// SetURL sets the "url" field.
func (ehu *EvidenceHistoryUpdate) SetURL(s string) *EvidenceHistoryUpdate {
	ehu.mutation.SetURL(s)
	return ehu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableURL(s *string) *EvidenceHistoryUpdate {
	if s != nil {
		ehu.SetURL(*s)
	}
	return ehu
}

// ClearURL clears the value of the "url" field.
func (ehu *EvidenceHistoryUpdate) ClearURL() *EvidenceHistoryUpdate {
	ehu.mutation.ClearURL()
	return ehu
}

// SetStatus sets the "status" field.
func (ehu *EvidenceHistoryUpdate) SetStatus(es enums.EvidenceStatus) *EvidenceHistoryUpdate {
	ehu.mutation.SetStatus(es)
	return ehu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ehu *EvidenceHistoryUpdate) SetNillableStatus(es *enums.EvidenceStatus) *EvidenceHistoryUpdate {
	if es != nil {
		ehu.SetStatus(*es)
	}
	return ehu
}

// ClearStatus clears the value of the "status" field.
func (ehu *EvidenceHistoryUpdate) ClearStatus() *EvidenceHistoryUpdate {
	ehu.mutation.ClearStatus()
	return ehu
}

// Mutation returns the EvidenceHistoryMutation object of the builder.
func (ehu *EvidenceHistoryUpdate) Mutation() *EvidenceHistoryMutation {
	return ehu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ehu *EvidenceHistoryUpdate) Save(ctx context.Context) (int, error) {
	ehu.defaults()
	return withHooks(ctx, ehu.sqlSave, ehu.mutation, ehu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ehu *EvidenceHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ehu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ehu *EvidenceHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ehu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehu *EvidenceHistoryUpdate) ExecX(ctx context.Context) {
	if err := ehu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ehu *EvidenceHistoryUpdate) defaults() {
	if _, ok := ehu.mutation.UpdatedAt(); !ok && !ehu.mutation.UpdatedAtCleared() {
		v := evidencehistory.UpdateDefaultUpdatedAt()
		ehu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ehu *EvidenceHistoryUpdate) check() error {
	if v, ok := ehu.mutation.Status(); ok {
		if err := evidencehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "EvidenceHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ehu *EvidenceHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EvidenceHistoryUpdate {
	ehu.modifiers = append(ehu.modifiers, modifiers...)
	return ehu
}

func (ehu *EvidenceHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ehu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(evidencehistory.Table, evidencehistory.Columns, sqlgraph.NewFieldSpec(evidencehistory.FieldID, field.TypeString))
	if ps := ehu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ehu.mutation.RefCleared() {
		_spec.ClearField(evidencehistory.FieldRef, field.TypeString)
	}
	if ehu.mutation.CreatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ehu.mutation.UpdatedAt(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ehu.mutation.UpdatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedAt, field.TypeTime)
	}
	if ehu.mutation.CreatedByCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ehu.mutation.UpdatedBy(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ehu.mutation.UpdatedByCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ehu.mutation.DeletedAt(); ok {
		_spec.SetField(evidencehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ehu.mutation.DeletedAtCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ehu.mutation.DeletedBy(); ok {
		_spec.SetField(evidencehistory.FieldDeletedBy, field.TypeString, value)
	}
	if ehu.mutation.DeletedByCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ehu.mutation.Tags(); ok {
		_spec.SetField(evidencehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ehu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, evidencehistory.FieldTags, value)
		})
	}
	if ehu.mutation.TagsCleared() {
		_spec.ClearField(evidencehistory.FieldTags, field.TypeJSON)
	}
	if ehu.mutation.OwnerIDCleared() {
		_spec.ClearField(evidencehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ehu.mutation.Name(); ok {
		_spec.SetField(evidencehistory.FieldName, field.TypeString, value)
	}
	if value, ok := ehu.mutation.Description(); ok {
		_spec.SetField(evidencehistory.FieldDescription, field.TypeString, value)
	}
	if ehu.mutation.DescriptionCleared() {
		_spec.ClearField(evidencehistory.FieldDescription, field.TypeString)
	}
	if value, ok := ehu.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidencehistory.FieldCollectionProcedure, field.TypeString, value)
	}
	if ehu.mutation.CollectionProcedureCleared() {
		_spec.ClearField(evidencehistory.FieldCollectionProcedure, field.TypeString)
	}
	if value, ok := ehu.mutation.CreationDate(); ok {
		_spec.SetField(evidencehistory.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := ehu.mutation.RenewalDate(); ok {
		_spec.SetField(evidencehistory.FieldRenewalDate, field.TypeTime, value)
	}
	if ehu.mutation.RenewalDateCleared() {
		_spec.ClearField(evidencehistory.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := ehu.mutation.Source(); ok {
		_spec.SetField(evidencehistory.FieldSource, field.TypeString, value)
	}
	if ehu.mutation.SourceCleared() {
		_spec.ClearField(evidencehistory.FieldSource, field.TypeString)
	}
	if value, ok := ehu.mutation.IsAutomated(); ok {
		_spec.SetField(evidencehistory.FieldIsAutomated, field.TypeBool, value)
	}
	if ehu.mutation.IsAutomatedCleared() {
		_spec.ClearField(evidencehistory.FieldIsAutomated, field.TypeBool)
	}
	if value, ok := ehu.mutation.URL(); ok {
		_spec.SetField(evidencehistory.FieldURL, field.TypeString, value)
	}
	if ehu.mutation.URLCleared() {
		_spec.ClearField(evidencehistory.FieldURL, field.TypeString)
	}
	if value, ok := ehu.mutation.Status(); ok {
		_spec.SetField(evidencehistory.FieldStatus, field.TypeEnum, value)
	}
	if ehu.mutation.StatusCleared() {
		_spec.ClearField(evidencehistory.FieldStatus, field.TypeEnum)
	}
	_spec.Node.Schema = ehu.schemaConfig.EvidenceHistory
	ctx = internal.NewSchemaConfigContext(ctx, ehu.schemaConfig)
	_spec.AddModifiers(ehu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ehu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidencehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ehu.mutation.done = true
	return n, nil
}

// EvidenceHistoryUpdateOne is the builder for updating a single EvidenceHistory entity.
type EvidenceHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EvidenceHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ehuo *EvidenceHistoryUpdateOne) SetUpdatedAt(t time.Time) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetUpdatedAt(t)
	return ehuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearUpdatedAt() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearUpdatedAt()
	return ehuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ehuo *EvidenceHistoryUpdateOne) SetUpdatedBy(s string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetUpdatedBy(s)
	return ehuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableUpdatedBy(s *string) *EvidenceHistoryUpdateOne {
	if s != nil {
		ehuo.SetUpdatedBy(*s)
	}
	return ehuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearUpdatedBy() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearUpdatedBy()
	return ehuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ehuo *EvidenceHistoryUpdateOne) SetDeletedAt(t time.Time) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetDeletedAt(t)
	return ehuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *EvidenceHistoryUpdateOne {
	if t != nil {
		ehuo.SetDeletedAt(*t)
	}
	return ehuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearDeletedAt() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearDeletedAt()
	return ehuo
}

// SetDeletedBy sets the "deleted_by" field.
func (ehuo *EvidenceHistoryUpdateOne) SetDeletedBy(s string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetDeletedBy(s)
	return ehuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableDeletedBy(s *string) *EvidenceHistoryUpdateOne {
	if s != nil {
		ehuo.SetDeletedBy(*s)
	}
	return ehuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearDeletedBy() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearDeletedBy()
	return ehuo
}

// SetTags sets the "tags" field.
func (ehuo *EvidenceHistoryUpdateOne) SetTags(s []string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetTags(s)
	return ehuo
}

// AppendTags appends s to the "tags" field.
func (ehuo *EvidenceHistoryUpdateOne) AppendTags(s []string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.AppendTags(s)
	return ehuo
}

// ClearTags clears the value of the "tags" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearTags() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearTags()
	return ehuo
}

// SetName sets the "name" field.
func (ehuo *EvidenceHistoryUpdateOne) SetName(s string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetName(s)
	return ehuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableName(s *string) *EvidenceHistoryUpdateOne {
	if s != nil {
		ehuo.SetName(*s)
	}
	return ehuo
}

// SetDescription sets the "description" field.
func (ehuo *EvidenceHistoryUpdateOne) SetDescription(s string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetDescription(s)
	return ehuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableDescription(s *string) *EvidenceHistoryUpdateOne {
	if s != nil {
		ehuo.SetDescription(*s)
	}
	return ehuo
}

// ClearDescription clears the value of the "description" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearDescription() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearDescription()
	return ehuo
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (ehuo *EvidenceHistoryUpdateOne) SetCollectionProcedure(s string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetCollectionProcedure(s)
	return ehuo
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableCollectionProcedure(s *string) *EvidenceHistoryUpdateOne {
	if s != nil {
		ehuo.SetCollectionProcedure(*s)
	}
	return ehuo
}

// ClearCollectionProcedure clears the value of the "collection_procedure" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearCollectionProcedure() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearCollectionProcedure()
	return ehuo
}

// SetCreationDate sets the "creation_date" field.
func (ehuo *EvidenceHistoryUpdateOne) SetCreationDate(t time.Time) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetCreationDate(t)
	return ehuo
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableCreationDate(t *time.Time) *EvidenceHistoryUpdateOne {
	if t != nil {
		ehuo.SetCreationDate(*t)
	}
	return ehuo
}

// SetRenewalDate sets the "renewal_date" field.
func (ehuo *EvidenceHistoryUpdateOne) SetRenewalDate(t time.Time) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetRenewalDate(t)
	return ehuo
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableRenewalDate(t *time.Time) *EvidenceHistoryUpdateOne {
	if t != nil {
		ehuo.SetRenewalDate(*t)
	}
	return ehuo
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearRenewalDate() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearRenewalDate()
	return ehuo
}

// SetSource sets the "source" field.
func (ehuo *EvidenceHistoryUpdateOne) SetSource(s string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetSource(s)
	return ehuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableSource(s *string) *EvidenceHistoryUpdateOne {
	if s != nil {
		ehuo.SetSource(*s)
	}
	return ehuo
}

// ClearSource clears the value of the "source" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearSource() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearSource()
	return ehuo
}

// SetIsAutomated sets the "is_automated" field.
func (ehuo *EvidenceHistoryUpdateOne) SetIsAutomated(b bool) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetIsAutomated(b)
	return ehuo
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableIsAutomated(b *bool) *EvidenceHistoryUpdateOne {
	if b != nil {
		ehuo.SetIsAutomated(*b)
	}
	return ehuo
}

// ClearIsAutomated clears the value of the "is_automated" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearIsAutomated() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearIsAutomated()
	return ehuo
}

// SetURL sets the "url" field.
func (ehuo *EvidenceHistoryUpdateOne) SetURL(s string) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetURL(s)
	return ehuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableURL(s *string) *EvidenceHistoryUpdateOne {
	if s != nil {
		ehuo.SetURL(*s)
	}
	return ehuo
}

// ClearURL clears the value of the "url" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearURL() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearURL()
	return ehuo
}

// SetStatus sets the "status" field.
func (ehuo *EvidenceHistoryUpdateOne) SetStatus(es enums.EvidenceStatus) *EvidenceHistoryUpdateOne {
	ehuo.mutation.SetStatus(es)
	return ehuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ehuo *EvidenceHistoryUpdateOne) SetNillableStatus(es *enums.EvidenceStatus) *EvidenceHistoryUpdateOne {
	if es != nil {
		ehuo.SetStatus(*es)
	}
	return ehuo
}

// ClearStatus clears the value of the "status" field.
func (ehuo *EvidenceHistoryUpdateOne) ClearStatus() *EvidenceHistoryUpdateOne {
	ehuo.mutation.ClearStatus()
	return ehuo
}

// Mutation returns the EvidenceHistoryMutation object of the builder.
func (ehuo *EvidenceHistoryUpdateOne) Mutation() *EvidenceHistoryMutation {
	return ehuo.mutation
}

// Where appends a list predicates to the EvidenceHistoryUpdate builder.
func (ehuo *EvidenceHistoryUpdateOne) Where(ps ...predicate.EvidenceHistory) *EvidenceHistoryUpdateOne {
	ehuo.mutation.Where(ps...)
	return ehuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ehuo *EvidenceHistoryUpdateOne) Select(field string, fields ...string) *EvidenceHistoryUpdateOne {
	ehuo.fields = append([]string{field}, fields...)
	return ehuo
}

// Save executes the query and returns the updated EvidenceHistory entity.
func (ehuo *EvidenceHistoryUpdateOne) Save(ctx context.Context) (*EvidenceHistory, error) {
	ehuo.defaults()
	return withHooks(ctx, ehuo.sqlSave, ehuo.mutation, ehuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ehuo *EvidenceHistoryUpdateOne) SaveX(ctx context.Context) *EvidenceHistory {
	node, err := ehuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ehuo *EvidenceHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ehuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehuo *EvidenceHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ehuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ehuo *EvidenceHistoryUpdateOne) defaults() {
	if _, ok := ehuo.mutation.UpdatedAt(); !ok && !ehuo.mutation.UpdatedAtCleared() {
		v := evidencehistory.UpdateDefaultUpdatedAt()
		ehuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ehuo *EvidenceHistoryUpdateOne) check() error {
	if v, ok := ehuo.mutation.Status(); ok {
		if err := evidencehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "EvidenceHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ehuo *EvidenceHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EvidenceHistoryUpdateOne {
	ehuo.modifiers = append(ehuo.modifiers, modifiers...)
	return ehuo
}

func (ehuo *EvidenceHistoryUpdateOne) sqlSave(ctx context.Context) (_node *EvidenceHistory, err error) {
	if err := ehuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evidencehistory.Table, evidencehistory.Columns, sqlgraph.NewFieldSpec(evidencehistory.FieldID, field.TypeString))
	id, ok := ehuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EvidenceHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ehuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evidencehistory.FieldID)
		for _, f := range fields {
			if !evidencehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != evidencehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ehuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ehuo.mutation.RefCleared() {
		_spec.ClearField(evidencehistory.FieldRef, field.TypeString)
	}
	if ehuo.mutation.CreatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ehuo.mutation.UpdatedAt(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ehuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedAt, field.TypeTime)
	}
	if ehuo.mutation.CreatedByCleared() {
		_spec.ClearField(evidencehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ehuo.mutation.UpdatedBy(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ehuo.mutation.UpdatedByCleared() {
		_spec.ClearField(evidencehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ehuo.mutation.DeletedAt(); ok {
		_spec.SetField(evidencehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ehuo.mutation.DeletedAtCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ehuo.mutation.DeletedBy(); ok {
		_spec.SetField(evidencehistory.FieldDeletedBy, field.TypeString, value)
	}
	if ehuo.mutation.DeletedByCleared() {
		_spec.ClearField(evidencehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ehuo.mutation.Tags(); ok {
		_spec.SetField(evidencehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ehuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, evidencehistory.FieldTags, value)
		})
	}
	if ehuo.mutation.TagsCleared() {
		_spec.ClearField(evidencehistory.FieldTags, field.TypeJSON)
	}
	if ehuo.mutation.OwnerIDCleared() {
		_spec.ClearField(evidencehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ehuo.mutation.Name(); ok {
		_spec.SetField(evidencehistory.FieldName, field.TypeString, value)
	}
	if value, ok := ehuo.mutation.Description(); ok {
		_spec.SetField(evidencehistory.FieldDescription, field.TypeString, value)
	}
	if ehuo.mutation.DescriptionCleared() {
		_spec.ClearField(evidencehistory.FieldDescription, field.TypeString)
	}
	if value, ok := ehuo.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidencehistory.FieldCollectionProcedure, field.TypeString, value)
	}
	if ehuo.mutation.CollectionProcedureCleared() {
		_spec.ClearField(evidencehistory.FieldCollectionProcedure, field.TypeString)
	}
	if value, ok := ehuo.mutation.CreationDate(); ok {
		_spec.SetField(evidencehistory.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := ehuo.mutation.RenewalDate(); ok {
		_spec.SetField(evidencehistory.FieldRenewalDate, field.TypeTime, value)
	}
	if ehuo.mutation.RenewalDateCleared() {
		_spec.ClearField(evidencehistory.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := ehuo.mutation.Source(); ok {
		_spec.SetField(evidencehistory.FieldSource, field.TypeString, value)
	}
	if ehuo.mutation.SourceCleared() {
		_spec.ClearField(evidencehistory.FieldSource, field.TypeString)
	}
	if value, ok := ehuo.mutation.IsAutomated(); ok {
		_spec.SetField(evidencehistory.FieldIsAutomated, field.TypeBool, value)
	}
	if ehuo.mutation.IsAutomatedCleared() {
		_spec.ClearField(evidencehistory.FieldIsAutomated, field.TypeBool)
	}
	if value, ok := ehuo.mutation.URL(); ok {
		_spec.SetField(evidencehistory.FieldURL, field.TypeString, value)
	}
	if ehuo.mutation.URLCleared() {
		_spec.ClearField(evidencehistory.FieldURL, field.TypeString)
	}
	if value, ok := ehuo.mutation.Status(); ok {
		_spec.SetField(evidencehistory.FieldStatus, field.TypeEnum, value)
	}
	if ehuo.mutation.StatusCleared() {
		_spec.ClearField(evidencehistory.FieldStatus, field.TypeEnum)
	}
	_spec.Node.Schema = ehuo.schemaConfig.EvidenceHistory
	ctx = internal.NewSchemaConfigContext(ctx, ehuo.schemaConfig)
	_spec.AddModifiers(ehuo.modifiers...)
	_node = &EvidenceHistory{config: ehuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ehuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidencehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ehuo.mutation.done = true
	return _node, nil
}
