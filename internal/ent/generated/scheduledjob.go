// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/models"
)

// ScheduledJob is the model entity for the ScheduledJob schema.
type ScheduledJob struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the scheduled_job id to take the script to run from
	JobID string `json:"job_id,omitempty"`
	// whether the scheduled job is active
	Active bool `json:"active,omitempty"`
	// the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
	Configuration models.JobConfiguration `json:"configuration,omitempty"`
	// cron 6-field syntax, defaults to the job template's cron if not provided
	Cron *models.Cron `json:"cron,omitempty"`
	// the runner that this job will run on. If not set, it will scheduled on a general runner instead
	JobRunnerID string `json:"job_runner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduledJobQuery when eager-loading is set.
	Edges        ScheduledJobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheduledJobEdges holds the relations/edges for other nodes in the graph.
type ScheduledJobEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// JobTemplate holds the value of the job_template edge.
	JobTemplate *JobTemplate `json:"job_template,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// JobRunner holds the value of the job_runner edge.
	JobRunner *JobRunner `json:"job_runner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedControls    map[string][]*Control
	namedSubcontrols map[string][]*Subcontrol
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// JobTemplateOrErr returns the JobTemplate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobEdges) JobTemplateOrErr() (*JobTemplate, error) {
	if e.JobTemplate != nil {
		return e.JobTemplate, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: jobtemplate.Label}
	}
	return nil, &NotLoadedError{edge: "job_template"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e ScheduledJobEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[2] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e ScheduledJobEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[3] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// JobRunnerOrErr returns the JobRunner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobEdges) JobRunnerOrErr() (*JobRunner, error) {
	if e.JobRunner != nil {
		return e.JobRunner, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: jobrunner.Label}
	}
	return nil, &NotLoadedError{edge: "job_runner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduledJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduledjob.FieldCron:
			values[i] = &sql.NullScanner{S: new(models.Cron)}
		case scheduledjob.FieldConfiguration:
			values[i] = new([]byte)
		case scheduledjob.FieldActive:
			values[i] = new(sql.NullBool)
		case scheduledjob.FieldID, scheduledjob.FieldCreatedBy, scheduledjob.FieldUpdatedBy, scheduledjob.FieldDeletedBy, scheduledjob.FieldDisplayID, scheduledjob.FieldOwnerID, scheduledjob.FieldJobID, scheduledjob.FieldJobRunnerID:
			values[i] = new(sql.NullString)
		case scheduledjob.FieldCreatedAt, scheduledjob.FieldUpdatedAt, scheduledjob.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduledJob fields.
func (_m *ScheduledJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduledjob.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case scheduledjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case scheduledjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case scheduledjob.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case scheduledjob.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case scheduledjob.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case scheduledjob.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case scheduledjob.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				_m.DisplayID = value.String
			}
		case scheduledjob.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case scheduledjob.FieldJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				_m.JobID = value.String
			}
		case scheduledjob.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				_m.Active = value.Bool
			}
		case scheduledjob.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		case scheduledjob.FieldCron:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				_m.Cron = new(models.Cron)
				*_m.Cron = *value.S.(*models.Cron)
			}
		case scheduledjob.FieldJobRunnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_runner_id", values[i])
			} else if value.Valid {
				_m.JobRunnerID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduledJob.
// This includes values selected through modifiers, order, etc.
func (_m *ScheduledJob) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ScheduledJob entity.
func (_m *ScheduledJob) QueryOwner() *OrganizationQuery {
	return NewScheduledJobClient(_m.config).QueryOwner(_m)
}

// QueryJobTemplate queries the "job_template" edge of the ScheduledJob entity.
func (_m *ScheduledJob) QueryJobTemplate() *JobTemplateQuery {
	return NewScheduledJobClient(_m.config).QueryJobTemplate(_m)
}

// QueryControls queries the "controls" edge of the ScheduledJob entity.
func (_m *ScheduledJob) QueryControls() *ControlQuery {
	return NewScheduledJobClient(_m.config).QueryControls(_m)
}

// QuerySubcontrols queries the "subcontrols" edge of the ScheduledJob entity.
func (_m *ScheduledJob) QuerySubcontrols() *SubcontrolQuery {
	return NewScheduledJobClient(_m.config).QuerySubcontrols(_m)
}

// QueryJobRunner queries the "job_runner" edge of the ScheduledJob entity.
func (_m *ScheduledJob) QueryJobRunner() *JobRunnerQuery {
	return NewScheduledJobClient(_m.config).QueryJobRunner(_m)
}

// Update returns a builder for updating this ScheduledJob.
// Note that you need to call ScheduledJob.Unwrap() before calling this method if this ScheduledJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ScheduledJob) Update() *ScheduledJobUpdateOne {
	return NewScheduledJobClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ScheduledJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ScheduledJob) Unwrap() *ScheduledJob {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ScheduledJob is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ScheduledJob) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduledJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(_m.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(_m.JobID)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", _m.Active))
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", _m.Configuration))
	builder.WriteString(", ")
	if v := _m.Cron; v != nil {
		builder.WriteString("cron=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("job_runner_id=")
	builder.WriteString(_m.JobRunnerID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ScheduledJob) NamedControls(name string) ([]*Control, error) {
	if _m.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ScheduledJob) appendNamedControls(name string, edges ...*Control) {
	if _m.Edges.namedControls == nil {
		_m.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		_m.Edges.namedControls[name] = []*Control{}
	} else {
		_m.Edges.namedControls[name] = append(_m.Edges.namedControls[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ScheduledJob) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if _m.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ScheduledJob) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if _m.Edges.namedSubcontrols == nil {
		_m.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		_m.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		_m.Edges.namedSubcontrols[name] = append(_m.Edges.namedSubcontrols[name], edges...)
	}
}

// ScheduledJobs is a parsable slice of ScheduledJob.
type ScheduledJobs []*ScheduledJob
