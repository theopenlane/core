// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// ScheduledJob is the model entity for the ScheduledJob schema.
type ScheduledJob struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// the title of the job
	Title string `json:"title,omitempty"`
	// the description of the job
	Description string `json:"description,omitempty"`
	// the platform to use to execute this job
	Platform enums.JobPlatformType `json:"platform,omitempty"`
	// the script to run
	Script string `json:"script,omitempty"`
	// Windmill path
	WindmillPath string `json:"windmill_path,omitempty"`
	// the url from where to download the script from
	DownloadURL string `json:"download_url,omitempty"`
	// the configuration to run this job
	Configuration models.JobConfiguration `json:"configuration,omitempty"`
	// the schedule to run this job
	Cadence models.JobCadence `json:"cadence,omitempty"`
	// cron syntax
	Cron *models.Cron `json:"cron,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduledJobQuery when eager-loading is set.
	Edges        ScheduledJobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheduledJobEdges holds the relations/edges for other nodes in the graph.
type ScheduledJobEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduledJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduledjob.FieldCron:
			values[i] = &sql.NullScanner{S: new(models.Cron)}
		case scheduledjob.FieldTags, scheduledjob.FieldConfiguration, scheduledjob.FieldCadence:
			values[i] = new([]byte)
		case scheduledjob.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case scheduledjob.FieldID, scheduledjob.FieldCreatedBy, scheduledjob.FieldUpdatedBy, scheduledjob.FieldDeletedBy, scheduledjob.FieldDisplayID, scheduledjob.FieldOwnerID, scheduledjob.FieldTitle, scheduledjob.FieldDescription, scheduledjob.FieldPlatform, scheduledjob.FieldScript, scheduledjob.FieldWindmillPath, scheduledjob.FieldDownloadURL:
			values[i] = new(sql.NullString)
		case scheduledjob.FieldCreatedAt, scheduledjob.FieldUpdatedAt, scheduledjob.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduledJob fields.
func (sj *ScheduledJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduledjob.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sj.ID = value.String
			}
		case scheduledjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sj.CreatedAt = value.Time
			}
		case scheduledjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sj.UpdatedAt = value.Time
			}
		case scheduledjob.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sj.CreatedBy = value.String
			}
		case scheduledjob.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sj.UpdatedBy = value.String
			}
		case scheduledjob.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sj.DeletedAt = value.Time
			}
		case scheduledjob.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				sj.DeletedBy = value.String
			}
		case scheduledjob.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				sj.DisplayID = value.String
			}
		case scheduledjob.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sj.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case scheduledjob.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				sj.OwnerID = value.String
			}
		case scheduledjob.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				sj.SystemOwned = value.Bool
			}
		case scheduledjob.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sj.Title = value.String
			}
		case scheduledjob.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sj.Description = value.String
			}
		case scheduledjob.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				sj.Platform = enums.JobPlatformType(value.String)
			}
		case scheduledjob.FieldScript:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script", values[i])
			} else if value.Valid {
				sj.Script = value.String
			}
		case scheduledjob.FieldWindmillPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field windmill_path", values[i])
			} else if value.Valid {
				sj.WindmillPath = value.String
			}
		case scheduledjob.FieldDownloadURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_url", values[i])
			} else if value.Valid {
				sj.DownloadURL = value.String
			}
		case scheduledjob.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sj.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		case scheduledjob.FieldCadence:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cadence", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sj.Cadence); err != nil {
					return fmt.Errorf("unmarshal field cadence: %w", err)
				}
			}
		case scheduledjob.FieldCron:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				sj.Cron = new(models.Cron)
				*sj.Cron = *value.S.(*models.Cron)
			}
		default:
			sj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduledJob.
// This includes values selected through modifiers, order, etc.
func (sj *ScheduledJob) Value(name string) (ent.Value, error) {
	return sj.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ScheduledJob entity.
func (sj *ScheduledJob) QueryOwner() *OrganizationQuery {
	return NewScheduledJobClient(sj.config).QueryOwner(sj)
}

// Update returns a builder for updating this ScheduledJob.
// Note that you need to call ScheduledJob.Unwrap() before calling this method if this ScheduledJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (sj *ScheduledJob) Update() *ScheduledJobUpdateOne {
	return NewScheduledJobClient(sj.config).UpdateOne(sj)
}

// Unwrap unwraps the ScheduledJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sj *ScheduledJob) Unwrap() *ScheduledJob {
	_tx, ok := sj.config.driver.(*txDriver)
	if !ok {
		panic("generated: ScheduledJob is not a transactional entity")
	}
	sj.config.driver = _tx.drv
	return sj
}

// String implements the fmt.Stringer.
func (sj *ScheduledJob) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduledJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sj.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sj.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sj.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sj.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sj.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sj.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(sj.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(sj.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", sj.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(sj.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", sj.SystemOwned))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(sj.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sj.Description)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", sj.Platform))
	builder.WriteString(", ")
	builder.WriteString("script=")
	builder.WriteString(sj.Script)
	builder.WriteString(", ")
	builder.WriteString("windmill_path=")
	builder.WriteString(sj.WindmillPath)
	builder.WriteString(", ")
	builder.WriteString("download_url=")
	builder.WriteString(sj.DownloadURL)
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", sj.Configuration))
	builder.WriteString(", ")
	builder.WriteString("cadence=")
	builder.WriteString(fmt.Sprintf("%v", sj.Cadence))
	builder.WriteString(", ")
	if v := sj.Cron; v != nil {
		builder.WriteString("cron=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ScheduledJobs is a parsable slice of ScheduledJob.
type ScheduledJobs []*ScheduledJob
