// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldCorrelationID holds the string denoting the correlation_id field in the database.
	FieldCorrelationID = "correlation_id"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeIntegration holds the string denoting the integration edge name in mutations.
	EdgeIntegration = "integration"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeInvite holds the string denoting the invite edge name in mutations.
	EdgeInvite = "invite"
	// EdgeFeature holds the string denoting the feature edge name in mutations.
	EdgeFeature = "feature"
	// EdgeEntitlementplan holds the string denoting the entitlementplan edge name in mutations.
	EdgeEntitlementplan = "entitlementplan"
	// EdgeEntitlementplanfeature holds the string denoting the entitlementplanfeature edge name in mutations.
	EdgeEntitlementplanfeature = "entitlementplanfeature"
	// EdgePersonalAccessToken holds the string denoting the personal_access_token edge name in mutations.
	EdgePersonalAccessToken = "personal_access_token"
	// EdgeOauth2token holds the string denoting the oauth2token edge name in mutations.
	EdgeOauth2token = "oauth2token"
	// EdgeHush holds the string denoting the hush edge name in mutations.
	EdgeHush = "hush"
	// EdgeOrgmembership holds the string denoting the orgmembership edge name in mutations.
	EdgeOrgmembership = "orgmembership"
	// EdgeGroupmembership holds the string denoting the groupmembership edge name in mutations.
	EdgeGroupmembership = "groupmembership"
	// EdgeEntitlement holds the string denoting the entitlement edge name in mutations.
	EdgeEntitlement = "entitlement"
	// EdgeWebhook holds the string denoting the webhook edge name in mutations.
	EdgeWebhook = "webhook"
	// EdgeSubscriber holds the string denoting the subscriber edge name in mutations.
	EdgeSubscriber = "subscriber"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// Table holds the table name of the event in the database.
	Table = "events"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_events"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// GroupTable is the table that holds the group relation/edge. The primary key declared below.
	GroupTable = "group_events"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// IntegrationTable is the table that holds the integration relation/edge. The primary key declared below.
	IntegrationTable = "integration_events"
	// IntegrationInverseTable is the table name for the Integration entity.
	// It exists in this package in order to avoid circular dependency with the "integration" package.
	IntegrationInverseTable = "integrations"
	// OrganizationTable is the table that holds the organization relation/edge. The primary key declared below.
	OrganizationTable = "organization_events"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// InviteTable is the table that holds the invite relation/edge. The primary key declared below.
	InviteTable = "invite_events"
	// InviteInverseTable is the table name for the Invite entity.
	// It exists in this package in order to avoid circular dependency with the "invite" package.
	InviteInverseTable = "invites"
	// FeatureTable is the table that holds the feature relation/edge. The primary key declared below.
	FeatureTable = "feature_events"
	// FeatureInverseTable is the table name for the Feature entity.
	// It exists in this package in order to avoid circular dependency with the "feature" package.
	FeatureInverseTable = "features"
	// EntitlementplanTable is the table that holds the entitlementplan relation/edge. The primary key declared below.
	EntitlementplanTable = "entitlement_plan_events"
	// EntitlementplanInverseTable is the table name for the EntitlementPlan entity.
	// It exists in this package in order to avoid circular dependency with the "entitlementplan" package.
	EntitlementplanInverseTable = "entitlement_plans"
	// EntitlementplanfeatureTable is the table that holds the entitlementplanfeature relation/edge. The primary key declared below.
	EntitlementplanfeatureTable = "entitlement_plan_feature_events"
	// EntitlementplanfeatureInverseTable is the table name for the EntitlementPlanFeature entity.
	// It exists in this package in order to avoid circular dependency with the "entitlementplanfeature" package.
	EntitlementplanfeatureInverseTable = "entitlement_plan_features"
	// PersonalAccessTokenTable is the table that holds the personal_access_token relation/edge. The primary key declared below.
	PersonalAccessTokenTable = "personal_access_token_events"
	// PersonalAccessTokenInverseTable is the table name for the PersonalAccessToken entity.
	// It exists in this package in order to avoid circular dependency with the "personalaccesstoken" package.
	PersonalAccessTokenInverseTable = "personal_access_tokens"
	// Oauth2tokenTable is the table that holds the oauth2token relation/edge. The primary key declared below.
	Oauth2tokenTable = "oh_auth_too_token_events"
	// Oauth2tokenInverseTable is the table name for the OhAuthTooToken entity.
	// It exists in this package in order to avoid circular dependency with the "ohauthtootoken" package.
	Oauth2tokenInverseTable = "oh_auth_too_tokens"
	// HushTable is the table that holds the hush relation/edge. The primary key declared below.
	HushTable = "hush_events"
	// HushInverseTable is the table name for the Hush entity.
	// It exists in this package in order to avoid circular dependency with the "hush" package.
	HushInverseTable = "hushes"
	// OrgmembershipTable is the table that holds the orgmembership relation/edge. The primary key declared below.
	OrgmembershipTable = "org_membership_events"
	// OrgmembershipInverseTable is the table name for the OrgMembership entity.
	// It exists in this package in order to avoid circular dependency with the "orgmembership" package.
	OrgmembershipInverseTable = "org_memberships"
	// GroupmembershipTable is the table that holds the groupmembership relation/edge. The primary key declared below.
	GroupmembershipTable = "group_membership_events"
	// GroupmembershipInverseTable is the table name for the GroupMembership entity.
	// It exists in this package in order to avoid circular dependency with the "groupmembership" package.
	GroupmembershipInverseTable = "group_memberships"
	// EntitlementTable is the table that holds the entitlement relation/edge. The primary key declared below.
	EntitlementTable = "entitlement_events"
	// EntitlementInverseTable is the table name for the Entitlement entity.
	// It exists in this package in order to avoid circular dependency with the "entitlement" package.
	EntitlementInverseTable = "entitlements"
	// WebhookTable is the table that holds the webhook relation/edge. The primary key declared below.
	WebhookTable = "webhook_events"
	// WebhookInverseTable is the table name for the Webhook entity.
	// It exists in this package in order to avoid circular dependency with the "webhook" package.
	WebhookInverseTable = "webhooks"
	// SubscriberTable is the table that holds the subscriber relation/edge. The primary key declared below.
	SubscriberTable = "subscriber_events"
	// SubscriberInverseTable is the table name for the Subscriber entity.
	// It exists in this package in order to avoid circular dependency with the "subscriber" package.
	SubscriberInverseTable = "subscribers"
	// FileTable is the table that holds the file relation/edge. The primary key declared below.
	FileTable = "file_events"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldMappingID,
	FieldTags,
	FieldEventID,
	FieldCorrelationID,
	FieldEventType,
	FieldMetadata,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user_id", "event_id"}
	// GroupPrimaryKey and GroupColumn2 are the table columns denoting the
	// primary key for the group relation (M2M).
	GroupPrimaryKey = []string{"group_id", "event_id"}
	// IntegrationPrimaryKey and IntegrationColumn2 are the table columns denoting the
	// primary key for the integration relation (M2M).
	IntegrationPrimaryKey = []string{"integration_id", "event_id"}
	// OrganizationPrimaryKey and OrganizationColumn2 are the table columns denoting the
	// primary key for the organization relation (M2M).
	OrganizationPrimaryKey = []string{"organization_id", "event_id"}
	// InvitePrimaryKey and InviteColumn2 are the table columns denoting the
	// primary key for the invite relation (M2M).
	InvitePrimaryKey = []string{"invite_id", "event_id"}
	// FeaturePrimaryKey and FeatureColumn2 are the table columns denoting the
	// primary key for the feature relation (M2M).
	FeaturePrimaryKey = []string{"feature_id", "event_id"}
	// EntitlementplanPrimaryKey and EntitlementplanColumn2 are the table columns denoting the
	// primary key for the entitlementplan relation (M2M).
	EntitlementplanPrimaryKey = []string{"entitlement_plan_id", "event_id"}
	// EntitlementplanfeaturePrimaryKey and EntitlementplanfeatureColumn2 are the table columns denoting the
	// primary key for the entitlementplanfeature relation (M2M).
	EntitlementplanfeaturePrimaryKey = []string{"entitlement_plan_feature_id", "event_id"}
	// PersonalAccessTokenPrimaryKey and PersonalAccessTokenColumn2 are the table columns denoting the
	// primary key for the personal_access_token relation (M2M).
	PersonalAccessTokenPrimaryKey = []string{"personal_access_token_id", "event_id"}
	// Oauth2tokenPrimaryKey and Oauth2tokenColumn2 are the table columns denoting the
	// primary key for the oauth2token relation (M2M).
	Oauth2tokenPrimaryKey = []string{"oh_auth_too_token_id", "event_id"}
	// HushPrimaryKey and HushColumn2 are the table columns denoting the
	// primary key for the hush relation (M2M).
	HushPrimaryKey = []string{"hush_id", "event_id"}
	// OrgmembershipPrimaryKey and OrgmembershipColumn2 are the table columns denoting the
	// primary key for the orgmembership relation (M2M).
	OrgmembershipPrimaryKey = []string{"org_membership_id", "event_id"}
	// GroupmembershipPrimaryKey and GroupmembershipColumn2 are the table columns denoting the
	// primary key for the groupmembership relation (M2M).
	GroupmembershipPrimaryKey = []string{"group_membership_id", "event_id"}
	// EntitlementPrimaryKey and EntitlementColumn2 are the table columns denoting the
	// primary key for the entitlement relation (M2M).
	EntitlementPrimaryKey = []string{"entitlement_id", "event_id"}
	// WebhookPrimaryKey and WebhookColumn2 are the table columns denoting the
	// primary key for the webhook relation (M2M).
	WebhookPrimaryKey = []string{"webhook_id", "event_id"}
	// SubscriberPrimaryKey and SubscriberColumn2 are the table columns denoting the
	// primary key for the subscriber relation (M2M).
	SubscriberPrimaryKey = []string{"subscriber_id", "event_id"}
	// FilePrimaryKey and FileColumn2 are the table columns denoting the
	// primary key for the file relation (M2M).
	FilePrimaryKey = []string{"file_id", "event_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByCorrelationID orders the results by the correlation_id field.
func ByCorrelationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorrelationID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupCount orders the results by group count.
func ByGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupStep(), opts...)
	}
}

// ByGroup orders the results by group terms.
func ByGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIntegrationCount orders the results by integration count.
func ByIntegrationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIntegrationStep(), opts...)
	}
}

// ByIntegration orders the results by integration terms.
func ByIntegration(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntegrationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrganizationCount orders the results by organization count.
func ByOrganizationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationStep(), opts...)
	}
}

// ByOrganization orders the results by organization terms.
func ByOrganization(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInviteCount orders the results by invite count.
func ByInviteCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInviteStep(), opts...)
	}
}

// ByInvite orders the results by invite terms.
func ByInvite(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInviteStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeatureCount orders the results by feature count.
func ByFeatureCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeatureStep(), opts...)
	}
}

// ByFeature orders the results by feature terms.
func ByFeature(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEntitlementplanCount orders the results by entitlementplan count.
func ByEntitlementplanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntitlementplanStep(), opts...)
	}
}

// ByEntitlementplan orders the results by entitlementplan terms.
func ByEntitlementplan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementplanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEntitlementplanfeatureCount orders the results by entitlementplanfeature count.
func ByEntitlementplanfeatureCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntitlementplanfeatureStep(), opts...)
	}
}

// ByEntitlementplanfeature orders the results by entitlementplanfeature terms.
func ByEntitlementplanfeature(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementplanfeatureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPersonalAccessTokenCount orders the results by personal_access_token count.
func ByPersonalAccessTokenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonalAccessTokenStep(), opts...)
	}
}

// ByPersonalAccessToken orders the results by personal_access_token terms.
func ByPersonalAccessToken(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonalAccessTokenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauth2tokenCount orders the results by oauth2token count.
func ByOauth2tokenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauth2tokenStep(), opts...)
	}
}

// ByOauth2token orders the results by oauth2token terms.
func ByOauth2token(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauth2tokenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHushCount orders the results by hush count.
func ByHushCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHushStep(), opts...)
	}
}

// ByHush orders the results by hush terms.
func ByHush(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHushStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgmembershipCount orders the results by orgmembership count.
func ByOrgmembershipCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgmembershipStep(), opts...)
	}
}

// ByOrgmembership orders the results by orgmembership terms.
func ByOrgmembership(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgmembershipStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupmembershipCount orders the results by groupmembership count.
func ByGroupmembershipCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupmembershipStep(), opts...)
	}
}

// ByGroupmembership orders the results by groupmembership terms.
func ByGroupmembership(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupmembershipStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEntitlementCount orders the results by entitlement count.
func ByEntitlementCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntitlementStep(), opts...)
	}
}

// ByEntitlement orders the results by entitlement terms.
func ByEntitlement(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWebhookCount orders the results by webhook count.
func ByWebhookCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWebhookStep(), opts...)
	}
}

// ByWebhook orders the results by webhook terms.
func ByWebhook(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWebhookStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscriberCount orders the results by subscriber count.
func BySubscriberCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscriberStep(), opts...)
	}
}

// BySubscriber orders the results by subscriber terms.
func BySubscriber(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriberStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFileCount orders the results by file count.
func ByFileCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFileStep(), opts...)
	}
}

// ByFile orders the results by file terms.
func ByFile(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroupTable, GroupPrimaryKey...),
	)
}
func newIntegrationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntegrationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IntegrationTable, IntegrationPrimaryKey...),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrganizationTable, OrganizationPrimaryKey...),
	)
}
func newInviteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InviteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InviteTable, InvitePrimaryKey...),
	)
}
func newFeatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, FeatureTable, FeaturePrimaryKey...),
	)
}
func newEntitlementplanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementplanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EntitlementplanTable, EntitlementplanPrimaryKey...),
	)
}
func newEntitlementplanfeatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementplanfeatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EntitlementplanfeatureTable, EntitlementplanfeaturePrimaryKey...),
	)
}
func newPersonalAccessTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonalAccessTokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PersonalAccessTokenTable, PersonalAccessTokenPrimaryKey...),
	)
}
func newOauth2tokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Oauth2tokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, Oauth2tokenTable, Oauth2tokenPrimaryKey...),
	)
}
func newHushStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HushInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, HushTable, HushPrimaryKey...),
	)
}
func newOrgmembershipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgmembershipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrgmembershipTable, OrgmembershipPrimaryKey...),
	)
}
func newGroupmembershipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupmembershipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroupmembershipTable, GroupmembershipPrimaryKey...),
	)
}
func newEntitlementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EntitlementTable, EntitlementPrimaryKey...),
	)
}
func newWebhookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WebhookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, WebhookTable, WebhookPrimaryKey...),
	)
}
func newSubscriberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubscriberTable, SubscriberPrimaryKey...),
	)
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, FileTable, FilePrimaryKey...),
	)
}
