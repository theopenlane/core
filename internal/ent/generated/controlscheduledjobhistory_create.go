// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjobhistory"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// ControlScheduledJobHistoryCreate is the builder for creating a ControlScheduledJobHistory entity.
type ControlScheduledJobHistoryCreate struct {
	config
	mutation *ControlScheduledJobHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetHistoryTime(t time.Time) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetHistoryTime(t)
	return csjhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableHistoryTime(t *time.Time) *ControlScheduledJobHistoryCreate {
	if t != nil {
		csjhc.SetHistoryTime(*t)
	}
	return csjhc
}

// SetRef sets the "ref" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetRef(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetRef(s)
	return csjhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableRef(s *string) *ControlScheduledJobHistoryCreate {
	if s != nil {
		csjhc.SetRef(*s)
	}
	return csjhc
}

// SetOperation sets the "operation" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetOperation(ht history.OpType) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetOperation(ht)
	return csjhc
}

// SetCreatedAt sets the "created_at" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetCreatedAt(t time.Time) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetCreatedAt(t)
	return csjhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableCreatedAt(t *time.Time) *ControlScheduledJobHistoryCreate {
	if t != nil {
		csjhc.SetCreatedAt(*t)
	}
	return csjhc
}

// SetUpdatedAt sets the "updated_at" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetUpdatedAt(t time.Time) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetUpdatedAt(t)
	return csjhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ControlScheduledJobHistoryCreate {
	if t != nil {
		csjhc.SetUpdatedAt(*t)
	}
	return csjhc
}

// SetCreatedBy sets the "created_by" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetCreatedBy(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetCreatedBy(s)
	return csjhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableCreatedBy(s *string) *ControlScheduledJobHistoryCreate {
	if s != nil {
		csjhc.SetCreatedBy(*s)
	}
	return csjhc
}

// SetUpdatedBy sets the "updated_by" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetUpdatedBy(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetUpdatedBy(s)
	return csjhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableUpdatedBy(s *string) *ControlScheduledJobHistoryCreate {
	if s != nil {
		csjhc.SetUpdatedBy(*s)
	}
	return csjhc
}

// SetDeletedAt sets the "deleted_at" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetDeletedAt(t time.Time) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetDeletedAt(t)
	return csjhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableDeletedAt(t *time.Time) *ControlScheduledJobHistoryCreate {
	if t != nil {
		csjhc.SetDeletedAt(*t)
	}
	return csjhc
}

// SetDeletedBy sets the "deleted_by" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetDeletedBy(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetDeletedBy(s)
	return csjhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableDeletedBy(s *string) *ControlScheduledJobHistoryCreate {
	if s != nil {
		csjhc.SetDeletedBy(*s)
	}
	return csjhc
}

// SetOwnerID sets the "owner_id" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetOwnerID(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetOwnerID(s)
	return csjhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableOwnerID(s *string) *ControlScheduledJobHistoryCreate {
	if s != nil {
		csjhc.SetOwnerID(*s)
	}
	return csjhc
}

// SetJobID sets the "job_id" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetJobID(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetJobID(s)
	return csjhc
}

// SetConfiguration sets the "configuration" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetConfiguration(mc models.JobConfiguration) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetConfiguration(mc)
	return csjhc
}

// SetCadence sets the "cadence" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetCadence(mc models.JobCadence) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetCadence(mc)
	return csjhc
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableCadence(mc *models.JobCadence) *ControlScheduledJobHistoryCreate {
	if mc != nil {
		csjhc.SetCadence(*mc)
	}
	return csjhc
}

// SetCron sets the "cron" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetCron(m models.Cron) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetCron(m)
	return csjhc
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableCron(m *models.Cron) *ControlScheduledJobHistoryCreate {
	if m != nil {
		csjhc.SetCron(*m)
	}
	return csjhc
}

// SetJobRunnerID sets the "job_runner_id" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetJobRunnerID(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetJobRunnerID(s)
	return csjhc
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableJobRunnerID(s *string) *ControlScheduledJobHistoryCreate {
	if s != nil {
		csjhc.SetJobRunnerID(*s)
	}
	return csjhc
}

// SetID sets the "id" field.
func (csjhc *ControlScheduledJobHistoryCreate) SetID(s string) *ControlScheduledJobHistoryCreate {
	csjhc.mutation.SetID(s)
	return csjhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csjhc *ControlScheduledJobHistoryCreate) SetNillableID(s *string) *ControlScheduledJobHistoryCreate {
	if s != nil {
		csjhc.SetID(*s)
	}
	return csjhc
}

// Mutation returns the ControlScheduledJobHistoryMutation object of the builder.
func (csjhc *ControlScheduledJobHistoryCreate) Mutation() *ControlScheduledJobHistoryMutation {
	return csjhc.mutation
}

// Save creates the ControlScheduledJobHistory in the database.
func (csjhc *ControlScheduledJobHistoryCreate) Save(ctx context.Context) (*ControlScheduledJobHistory, error) {
	csjhc.defaults()
	return withHooks(ctx, csjhc.sqlSave, csjhc.mutation, csjhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csjhc *ControlScheduledJobHistoryCreate) SaveX(ctx context.Context) *ControlScheduledJobHistory {
	v, err := csjhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csjhc *ControlScheduledJobHistoryCreate) Exec(ctx context.Context) error {
	_, err := csjhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csjhc *ControlScheduledJobHistoryCreate) ExecX(ctx context.Context) {
	if err := csjhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csjhc *ControlScheduledJobHistoryCreate) defaults() {
	if _, ok := csjhc.mutation.HistoryTime(); !ok {
		v := controlscheduledjobhistory.DefaultHistoryTime()
		csjhc.mutation.SetHistoryTime(v)
	}
	if _, ok := csjhc.mutation.CreatedAt(); !ok {
		v := controlscheduledjobhistory.DefaultCreatedAt()
		csjhc.mutation.SetCreatedAt(v)
	}
	if _, ok := csjhc.mutation.UpdatedAt(); !ok {
		v := controlscheduledjobhistory.DefaultUpdatedAt()
		csjhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csjhc.mutation.ID(); !ok {
		v := controlscheduledjobhistory.DefaultID()
		csjhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csjhc *ControlScheduledJobHistoryCreate) check() error {
	if _, ok := csjhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ControlScheduledJobHistory.history_time"`)}
	}
	if _, ok := csjhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ControlScheduledJobHistory.operation"`)}
	}
	if v, ok := csjhc.mutation.Operation(); ok {
		if err := controlscheduledjobhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJobHistory.operation": %w`, err)}
		}
	}
	if _, ok := csjhc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`generated: missing required field "ControlScheduledJobHistory.job_id"`)}
	}
	if _, ok := csjhc.mutation.Configuration(); !ok {
		return &ValidationError{Name: "configuration", err: errors.New(`generated: missing required field "ControlScheduledJobHistory.configuration"`)}
	}
	if v, ok := csjhc.mutation.Cadence(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJobHistory.cadence": %w`, err)}
		}
	}
	if v, ok := csjhc.mutation.Cron(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJobHistory.cron": %w`, err)}
		}
	}
	return nil
}

func (csjhc *ControlScheduledJobHistoryCreate) sqlSave(ctx context.Context) (*ControlScheduledJobHistory, error) {
	if err := csjhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csjhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csjhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ControlScheduledJobHistory.ID type: %T", _spec.ID.Value)
		}
	}
	csjhc.mutation.id = &_node.ID
	csjhc.mutation.done = true
	return _node, nil
}

func (csjhc *ControlScheduledJobHistoryCreate) createSpec() (*ControlScheduledJobHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ControlScheduledJobHistory{config: csjhc.config}
		_spec = sqlgraph.NewCreateSpec(controlscheduledjobhistory.Table, sqlgraph.NewFieldSpec(controlscheduledjobhistory.FieldID, field.TypeString))
	)
	_spec.Schema = csjhc.schemaConfig.ControlScheduledJobHistory
	if id, ok := csjhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csjhc.mutation.HistoryTime(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := csjhc.mutation.Ref(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := csjhc.mutation.Operation(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := csjhc.mutation.CreatedAt(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csjhc.mutation.UpdatedAt(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csjhc.mutation.CreatedBy(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := csjhc.mutation.UpdatedBy(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := csjhc.mutation.DeletedAt(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := csjhc.mutation.DeletedBy(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := csjhc.mutation.OwnerID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := csjhc.mutation.JobID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldJobID, field.TypeString, value)
		_node.JobID = value
	}
	if value, ok := csjhc.mutation.Configuration(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldConfiguration, field.TypeJSON, value)
		_node.Configuration = value
	}
	if value, ok := csjhc.mutation.Cadence(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCadence, field.TypeJSON, value)
		_node.Cadence = value
	}
	if value, ok := csjhc.mutation.Cron(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCron, field.TypeString, value)
		_node.Cron = &value
	}
	if value, ok := csjhc.mutation.JobRunnerID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldJobRunnerID, field.TypeString, value)
		_node.JobRunnerID = value
	}
	return _node, _spec
}

// ControlScheduledJobHistoryCreateBulk is the builder for creating many ControlScheduledJobHistory entities in bulk.
type ControlScheduledJobHistoryCreateBulk struct {
	config
	err      error
	builders []*ControlScheduledJobHistoryCreate
}

// Save creates the ControlScheduledJobHistory entities in the database.
func (csjhcb *ControlScheduledJobHistoryCreateBulk) Save(ctx context.Context) ([]*ControlScheduledJobHistory, error) {
	if csjhcb.err != nil {
		return nil, csjhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csjhcb.builders))
	nodes := make([]*ControlScheduledJobHistory, len(csjhcb.builders))
	mutators := make([]Mutator, len(csjhcb.builders))
	for i := range csjhcb.builders {
		func(i int, root context.Context) {
			builder := csjhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlScheduledJobHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csjhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csjhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csjhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csjhcb *ControlScheduledJobHistoryCreateBulk) SaveX(ctx context.Context) []*ControlScheduledJobHistory {
	v, err := csjhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csjhcb *ControlScheduledJobHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := csjhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csjhcb *ControlScheduledJobHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := csjhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
