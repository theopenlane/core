// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgSubscriptionUpdate is the builder for updating OrgSubscription entities.
type OrgSubscriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgSubscriptionUpdate builder.
func (osu *OrgSubscriptionUpdate) Where(ps ...predicate.OrgSubscription) *OrgSubscriptionUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetUpdatedAt sets the "updated_at" field.
func (osu *OrgSubscriptionUpdate) SetUpdatedAt(t time.Time) *OrgSubscriptionUpdate {
	osu.mutation.SetUpdatedAt(t)
	return osu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osu *OrgSubscriptionUpdate) ClearUpdatedAt() *OrgSubscriptionUpdate {
	osu.mutation.ClearUpdatedAt()
	return osu
}

// SetUpdatedBy sets the "updated_by" field.
func (osu *OrgSubscriptionUpdate) SetUpdatedBy(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetUpdatedBy(s)
	return osu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableUpdatedBy(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetUpdatedBy(*s)
	}
	return osu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (osu *OrgSubscriptionUpdate) ClearUpdatedBy() *OrgSubscriptionUpdate {
	osu.mutation.ClearUpdatedBy()
	return osu
}

// SetTags sets the "tags" field.
func (osu *OrgSubscriptionUpdate) SetTags(s []string) *OrgSubscriptionUpdate {
	osu.mutation.SetTags(s)
	return osu
}

// AppendTags appends s to the "tags" field.
func (osu *OrgSubscriptionUpdate) AppendTags(s []string) *OrgSubscriptionUpdate {
	osu.mutation.AppendTags(s)
	return osu
}

// ClearTags clears the value of the "tags" field.
func (osu *OrgSubscriptionUpdate) ClearTags() *OrgSubscriptionUpdate {
	osu.mutation.ClearTags()
	return osu
}

// SetDeletedAt sets the "deleted_at" field.
func (osu *OrgSubscriptionUpdate) SetDeletedAt(t time.Time) *OrgSubscriptionUpdate {
	osu.mutation.SetDeletedAt(t)
	return osu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableDeletedAt(t *time.Time) *OrgSubscriptionUpdate {
	if t != nil {
		osu.SetDeletedAt(*t)
	}
	return osu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (osu *OrgSubscriptionUpdate) ClearDeletedAt() *OrgSubscriptionUpdate {
	osu.mutation.ClearDeletedAt()
	return osu
}

// SetDeletedBy sets the "deleted_by" field.
func (osu *OrgSubscriptionUpdate) SetDeletedBy(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetDeletedBy(s)
	return osu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableDeletedBy(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetDeletedBy(*s)
	}
	return osu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (osu *OrgSubscriptionUpdate) ClearDeletedBy() *OrgSubscriptionUpdate {
	osu.mutation.ClearDeletedBy()
	return osu
}

// SetOwnerID sets the "owner_id" field.
func (osu *OrgSubscriptionUpdate) SetOwnerID(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetOwnerID(s)
	return osu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableOwnerID(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetOwnerID(*s)
	}
	return osu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (osu *OrgSubscriptionUpdate) ClearOwnerID() *OrgSubscriptionUpdate {
	osu.mutation.ClearOwnerID()
	return osu
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (osu *OrgSubscriptionUpdate) SetStripeSubscriptionID(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetStripeSubscriptionID(s)
	return osu
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableStripeSubscriptionID(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetStripeSubscriptionID(*s)
	}
	return osu
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (osu *OrgSubscriptionUpdate) ClearStripeSubscriptionID() *OrgSubscriptionUpdate {
	osu.mutation.ClearStripeSubscriptionID()
	return osu
}

// SetProductTier sets the "product_tier" field.
func (osu *OrgSubscriptionUpdate) SetProductTier(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetProductTier(s)
	return osu
}

// SetNillableProductTier sets the "product_tier" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableProductTier(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetProductTier(*s)
	}
	return osu
}

// ClearProductTier clears the value of the "product_tier" field.
func (osu *OrgSubscriptionUpdate) ClearProductTier() *OrgSubscriptionUpdate {
	osu.mutation.ClearProductTier()
	return osu
}

// SetProductPrice sets the "product_price" field.
func (osu *OrgSubscriptionUpdate) SetProductPrice(m models.Price) *OrgSubscriptionUpdate {
	osu.mutation.SetProductPrice(m)
	return osu
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableProductPrice(m *models.Price) *OrgSubscriptionUpdate {
	if m != nil {
		osu.SetProductPrice(*m)
	}
	return osu
}

// ClearProductPrice clears the value of the "product_price" field.
func (osu *OrgSubscriptionUpdate) ClearProductPrice() *OrgSubscriptionUpdate {
	osu.mutation.ClearProductPrice()
	return osu
}

// SetStripeProductTierID sets the "stripe_product_tier_id" field.
func (osu *OrgSubscriptionUpdate) SetStripeProductTierID(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetStripeProductTierID(s)
	return osu
}

// SetNillableStripeProductTierID sets the "stripe_product_tier_id" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableStripeProductTierID(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetStripeProductTierID(*s)
	}
	return osu
}

// ClearStripeProductTierID clears the value of the "stripe_product_tier_id" field.
func (osu *OrgSubscriptionUpdate) ClearStripeProductTierID() *OrgSubscriptionUpdate {
	osu.mutation.ClearStripeProductTierID()
	return osu
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (osu *OrgSubscriptionUpdate) SetStripeSubscriptionStatus(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetStripeSubscriptionStatus(s)
	return osu
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableStripeSubscriptionStatus(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetStripeSubscriptionStatus(*s)
	}
	return osu
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (osu *OrgSubscriptionUpdate) ClearStripeSubscriptionStatus() *OrgSubscriptionUpdate {
	osu.mutation.ClearStripeSubscriptionStatus()
	return osu
}

// SetActive sets the "active" field.
func (osu *OrgSubscriptionUpdate) SetActive(b bool) *OrgSubscriptionUpdate {
	osu.mutation.SetActive(b)
	return osu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableActive(b *bool) *OrgSubscriptionUpdate {
	if b != nil {
		osu.SetActive(*b)
	}
	return osu
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (osu *OrgSubscriptionUpdate) SetStripeCustomerID(s string) *OrgSubscriptionUpdate {
	osu.mutation.SetStripeCustomerID(s)
	return osu
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableStripeCustomerID(s *string) *OrgSubscriptionUpdate {
	if s != nil {
		osu.SetStripeCustomerID(*s)
	}
	return osu
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (osu *OrgSubscriptionUpdate) ClearStripeCustomerID() *OrgSubscriptionUpdate {
	osu.mutation.ClearStripeCustomerID()
	return osu
}

// SetExpiresAt sets the "expires_at" field.
func (osu *OrgSubscriptionUpdate) SetExpiresAt(t time.Time) *OrgSubscriptionUpdate {
	osu.mutation.SetExpiresAt(t)
	return osu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (osu *OrgSubscriptionUpdate) SetNillableExpiresAt(t *time.Time) *OrgSubscriptionUpdate {
	if t != nil {
		osu.SetExpiresAt(*t)
	}
	return osu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (osu *OrgSubscriptionUpdate) ClearExpiresAt() *OrgSubscriptionUpdate {
	osu.mutation.ClearExpiresAt()
	return osu
}

// SetFeatures sets the "features" field.
func (osu *OrgSubscriptionUpdate) SetFeatures(s []string) *OrgSubscriptionUpdate {
	osu.mutation.SetFeatures(s)
	return osu
}

// AppendFeatures appends s to the "features" field.
func (osu *OrgSubscriptionUpdate) AppendFeatures(s []string) *OrgSubscriptionUpdate {
	osu.mutation.AppendFeatures(s)
	return osu
}

// ClearFeatures clears the value of the "features" field.
func (osu *OrgSubscriptionUpdate) ClearFeatures() *OrgSubscriptionUpdate {
	osu.mutation.ClearFeatures()
	return osu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (osu *OrgSubscriptionUpdate) SetOwner(o *Organization) *OrgSubscriptionUpdate {
	return osu.SetOwnerID(o.ID)
}

// Mutation returns the OrgSubscriptionMutation object of the builder.
func (osu *OrgSubscriptionUpdate) Mutation() *OrgSubscriptionMutation {
	return osu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (osu *OrgSubscriptionUpdate) ClearOwner() *OrgSubscriptionUpdate {
	osu.mutation.ClearOwner()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrgSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	if err := osu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrgSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrgSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrgSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osu *OrgSubscriptionUpdate) defaults() error {
	if _, ok := osu.mutation.UpdatedAt(); !ok && !osu.mutation.UpdatedAtCleared() {
		if orgsubscription.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgsubscription.UpdateDefaultUpdatedAt()
		osu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osu *OrgSubscriptionUpdate) check() error {
	if v, ok := osu.mutation.OwnerID(); ok {
		if err := orgsubscription.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgSubscription.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osu *OrgSubscriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionUpdate {
	osu.modifiers = append(osu.modifiers, modifiers...)
	return osu
}

func (osu *OrgSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgsubscription.Table, orgsubscription.Columns, sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osu.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := osu.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if osu.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedAt, field.TypeTime)
	}
	if osu.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := osu.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedBy, field.TypeString, value)
	}
	if osu.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := osu.mutation.Tags(); ok {
		_spec.SetField(orgsubscription.FieldTags, field.TypeJSON, value)
	}
	if value, ok := osu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldTags, value)
		})
	}
	if osu.mutation.TagsCleared() {
		_spec.ClearField(orgsubscription.FieldTags, field.TypeJSON)
	}
	if value, ok := osu.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscription.FieldDeletedAt, field.TypeTime, value)
	}
	if osu.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := osu.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscription.FieldDeletedBy, field.TypeString, value)
	}
	if osu.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedBy, field.TypeString)
	}
	if value, ok := osu.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if osu.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := osu.mutation.ProductTier(); ok {
		_spec.SetField(orgsubscription.FieldProductTier, field.TypeString, value)
	}
	if osu.mutation.ProductTierCleared() {
		_spec.ClearField(orgsubscription.FieldProductTier, field.TypeString)
	}
	if value, ok := osu.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscription.FieldProductPrice, field.TypeJSON, value)
	}
	if osu.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscription.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := osu.mutation.StripeProductTierID(); ok {
		_spec.SetField(orgsubscription.FieldStripeProductTierID, field.TypeString, value)
	}
	if osu.mutation.StripeProductTierIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeProductTierID, field.TypeString)
	}
	if value, ok := osu.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if osu.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := osu.mutation.Active(); ok {
		_spec.SetField(orgsubscription.FieldActive, field.TypeBool, value)
	}
	if value, ok := osu.mutation.StripeCustomerID(); ok {
		_spec.SetField(orgsubscription.FieldStripeCustomerID, field.TypeString, value)
	}
	if osu.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := osu.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscription.FieldExpiresAt, field.TypeTime, value)
	}
	if osu.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscription.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := osu.mutation.Features(); ok {
		_spec.SetField(orgsubscription.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := osu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldFeatures, value)
		})
	}
	if osu.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscription.FieldFeatures, field.TypeJSON)
	}
	if osu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgSubscription
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = osu.schemaConfig.OrgSubscription
	ctx = internal.NewSchemaConfigContext(ctx, osu.schemaConfig)
	_spec.AddModifiers(osu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrgSubscriptionUpdateOne is the builder for updating a single OrgSubscription entity.
type OrgSubscriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (osuo *OrgSubscriptionUpdateOne) SetUpdatedAt(t time.Time) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetUpdatedAt(t)
	return osuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osuo *OrgSubscriptionUpdateOne) ClearUpdatedAt() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearUpdatedAt()
	return osuo
}

// SetUpdatedBy sets the "updated_by" field.
func (osuo *OrgSubscriptionUpdateOne) SetUpdatedBy(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetUpdatedBy(s)
	return osuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableUpdatedBy(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetUpdatedBy(*s)
	}
	return osuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (osuo *OrgSubscriptionUpdateOne) ClearUpdatedBy() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearUpdatedBy()
	return osuo
}

// SetTags sets the "tags" field.
func (osuo *OrgSubscriptionUpdateOne) SetTags(s []string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetTags(s)
	return osuo
}

// AppendTags appends s to the "tags" field.
func (osuo *OrgSubscriptionUpdateOne) AppendTags(s []string) *OrgSubscriptionUpdateOne {
	osuo.mutation.AppendTags(s)
	return osuo
}

// ClearTags clears the value of the "tags" field.
func (osuo *OrgSubscriptionUpdateOne) ClearTags() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearTags()
	return osuo
}

// SetDeletedAt sets the "deleted_at" field.
func (osuo *OrgSubscriptionUpdateOne) SetDeletedAt(t time.Time) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetDeletedAt(t)
	return osuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgSubscriptionUpdateOne {
	if t != nil {
		osuo.SetDeletedAt(*t)
	}
	return osuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (osuo *OrgSubscriptionUpdateOne) ClearDeletedAt() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearDeletedAt()
	return osuo
}

// SetDeletedBy sets the "deleted_by" field.
func (osuo *OrgSubscriptionUpdateOne) SetDeletedBy(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetDeletedBy(s)
	return osuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableDeletedBy(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetDeletedBy(*s)
	}
	return osuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (osuo *OrgSubscriptionUpdateOne) ClearDeletedBy() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearDeletedBy()
	return osuo
}

// SetOwnerID sets the "owner_id" field.
func (osuo *OrgSubscriptionUpdateOne) SetOwnerID(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetOwnerID(s)
	return osuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableOwnerID(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetOwnerID(*s)
	}
	return osuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (osuo *OrgSubscriptionUpdateOne) ClearOwnerID() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearOwnerID()
	return osuo
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (osuo *OrgSubscriptionUpdateOne) SetStripeSubscriptionID(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetStripeSubscriptionID(s)
	return osuo
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableStripeSubscriptionID(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetStripeSubscriptionID(*s)
	}
	return osuo
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (osuo *OrgSubscriptionUpdateOne) ClearStripeSubscriptionID() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearStripeSubscriptionID()
	return osuo
}

// SetProductTier sets the "product_tier" field.
func (osuo *OrgSubscriptionUpdateOne) SetProductTier(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetProductTier(s)
	return osuo
}

// SetNillableProductTier sets the "product_tier" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableProductTier(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetProductTier(*s)
	}
	return osuo
}

// ClearProductTier clears the value of the "product_tier" field.
func (osuo *OrgSubscriptionUpdateOne) ClearProductTier() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearProductTier()
	return osuo
}

// SetProductPrice sets the "product_price" field.
func (osuo *OrgSubscriptionUpdateOne) SetProductPrice(m models.Price) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetProductPrice(m)
	return osuo
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableProductPrice(m *models.Price) *OrgSubscriptionUpdateOne {
	if m != nil {
		osuo.SetProductPrice(*m)
	}
	return osuo
}

// ClearProductPrice clears the value of the "product_price" field.
func (osuo *OrgSubscriptionUpdateOne) ClearProductPrice() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearProductPrice()
	return osuo
}

// SetStripeProductTierID sets the "stripe_product_tier_id" field.
func (osuo *OrgSubscriptionUpdateOne) SetStripeProductTierID(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetStripeProductTierID(s)
	return osuo
}

// SetNillableStripeProductTierID sets the "stripe_product_tier_id" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableStripeProductTierID(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetStripeProductTierID(*s)
	}
	return osuo
}

// ClearStripeProductTierID clears the value of the "stripe_product_tier_id" field.
func (osuo *OrgSubscriptionUpdateOne) ClearStripeProductTierID() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearStripeProductTierID()
	return osuo
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (osuo *OrgSubscriptionUpdateOne) SetStripeSubscriptionStatus(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetStripeSubscriptionStatus(s)
	return osuo
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableStripeSubscriptionStatus(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetStripeSubscriptionStatus(*s)
	}
	return osuo
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (osuo *OrgSubscriptionUpdateOne) ClearStripeSubscriptionStatus() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearStripeSubscriptionStatus()
	return osuo
}

// SetActive sets the "active" field.
func (osuo *OrgSubscriptionUpdateOne) SetActive(b bool) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetActive(b)
	return osuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableActive(b *bool) *OrgSubscriptionUpdateOne {
	if b != nil {
		osuo.SetActive(*b)
	}
	return osuo
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (osuo *OrgSubscriptionUpdateOne) SetStripeCustomerID(s string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetStripeCustomerID(s)
	return osuo
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableStripeCustomerID(s *string) *OrgSubscriptionUpdateOne {
	if s != nil {
		osuo.SetStripeCustomerID(*s)
	}
	return osuo
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (osuo *OrgSubscriptionUpdateOne) ClearStripeCustomerID() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearStripeCustomerID()
	return osuo
}

// SetExpiresAt sets the "expires_at" field.
func (osuo *OrgSubscriptionUpdateOne) SetExpiresAt(t time.Time) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetExpiresAt(t)
	return osuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (osuo *OrgSubscriptionUpdateOne) SetNillableExpiresAt(t *time.Time) *OrgSubscriptionUpdateOne {
	if t != nil {
		osuo.SetExpiresAt(*t)
	}
	return osuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (osuo *OrgSubscriptionUpdateOne) ClearExpiresAt() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearExpiresAt()
	return osuo
}

// SetFeatures sets the "features" field.
func (osuo *OrgSubscriptionUpdateOne) SetFeatures(s []string) *OrgSubscriptionUpdateOne {
	osuo.mutation.SetFeatures(s)
	return osuo
}

// AppendFeatures appends s to the "features" field.
func (osuo *OrgSubscriptionUpdateOne) AppendFeatures(s []string) *OrgSubscriptionUpdateOne {
	osuo.mutation.AppendFeatures(s)
	return osuo
}

// ClearFeatures clears the value of the "features" field.
func (osuo *OrgSubscriptionUpdateOne) ClearFeatures() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearFeatures()
	return osuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (osuo *OrgSubscriptionUpdateOne) SetOwner(o *Organization) *OrgSubscriptionUpdateOne {
	return osuo.SetOwnerID(o.ID)
}

// Mutation returns the OrgSubscriptionMutation object of the builder.
func (osuo *OrgSubscriptionUpdateOne) Mutation() *OrgSubscriptionMutation {
	return osuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (osuo *OrgSubscriptionUpdateOne) ClearOwner() *OrgSubscriptionUpdateOne {
	osuo.mutation.ClearOwner()
	return osuo
}

// Where appends a list predicates to the OrgSubscriptionUpdate builder.
func (osuo *OrgSubscriptionUpdateOne) Where(ps ...predicate.OrgSubscription) *OrgSubscriptionUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrgSubscriptionUpdateOne) Select(field string, fields ...string) *OrgSubscriptionUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrgSubscription entity.
func (osuo *OrgSubscriptionUpdateOne) Save(ctx context.Context) (*OrgSubscription, error) {
	if err := osuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrgSubscriptionUpdateOne) SaveX(ctx context.Context) *OrgSubscription {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrgSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrgSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osuo *OrgSubscriptionUpdateOne) defaults() error {
	if _, ok := osuo.mutation.UpdatedAt(); !ok && !osuo.mutation.UpdatedAtCleared() {
		if orgsubscription.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgsubscription.UpdateDefaultUpdatedAt()
		osuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OrgSubscriptionUpdateOne) check() error {
	if v, ok := osuo.mutation.OwnerID(); ok {
		if err := orgsubscription.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgSubscription.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osuo *OrgSubscriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionUpdateOne {
	osuo.modifiers = append(osuo.modifiers, modifiers...)
	return osuo
}

func (osuo *OrgSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *OrgSubscription, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgsubscription.Table, orgsubscription.Columns, sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrgSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgsubscription.FieldID)
		for _, f := range fields {
			if !orgsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orgsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osuo.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if osuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedAt, field.TypeTime)
	}
	if osuo.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := osuo.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedBy, field.TypeString, value)
	}
	if osuo.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := osuo.mutation.Tags(); ok {
		_spec.SetField(orgsubscription.FieldTags, field.TypeJSON, value)
	}
	if value, ok := osuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldTags, value)
		})
	}
	if osuo.mutation.TagsCleared() {
		_spec.ClearField(orgsubscription.FieldTags, field.TypeJSON)
	}
	if value, ok := osuo.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscription.FieldDeletedAt, field.TypeTime, value)
	}
	if osuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscription.FieldDeletedBy, field.TypeString, value)
	}
	if osuo.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedBy, field.TypeString)
	}
	if value, ok := osuo.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if osuo.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := osuo.mutation.ProductTier(); ok {
		_spec.SetField(orgsubscription.FieldProductTier, field.TypeString, value)
	}
	if osuo.mutation.ProductTierCleared() {
		_spec.ClearField(orgsubscription.FieldProductTier, field.TypeString)
	}
	if value, ok := osuo.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscription.FieldProductPrice, field.TypeJSON, value)
	}
	if osuo.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscription.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := osuo.mutation.StripeProductTierID(); ok {
		_spec.SetField(orgsubscription.FieldStripeProductTierID, field.TypeString, value)
	}
	if osuo.mutation.StripeProductTierIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeProductTierID, field.TypeString)
	}
	if value, ok := osuo.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if osuo.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := osuo.mutation.Active(); ok {
		_spec.SetField(orgsubscription.FieldActive, field.TypeBool, value)
	}
	if value, ok := osuo.mutation.StripeCustomerID(); ok {
		_spec.SetField(orgsubscription.FieldStripeCustomerID, field.TypeString, value)
	}
	if osuo.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := osuo.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscription.FieldExpiresAt, field.TypeTime, value)
	}
	if osuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscription.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.Features(); ok {
		_spec.SetField(orgsubscription.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := osuo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldFeatures, value)
		})
	}
	if osuo.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscription.FieldFeatures, field.TypeJSON)
	}
	if osuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgSubscription
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = osuo.schemaConfig.OrgSubscription
	ctx = internal.NewSchemaConfigContext(ctx, osuo.schemaConfig)
	_spec.AddModifiers(osuo.modifiers...)
	_node = &OrgSubscription{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
