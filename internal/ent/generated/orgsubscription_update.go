// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgSubscriptionUpdate is the builder for updating OrgSubscription entities.
type OrgSubscriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgSubscriptionUpdate builder.
func (_u *OrgSubscriptionUpdate) Where(ps ...predicate.OrgSubscription) *OrgSubscriptionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrgSubscriptionUpdate) SetUpdatedAt(v time.Time) *OrgSubscriptionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrgSubscriptionUpdate) ClearUpdatedAt() *OrgSubscriptionUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrgSubscriptionUpdate) SetUpdatedBy(v string) *OrgSubscriptionUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableUpdatedBy(v *string) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrgSubscriptionUpdate) ClearUpdatedBy() *OrgSubscriptionUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrgSubscriptionUpdate) SetDeletedAt(v time.Time) *OrgSubscriptionUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableDeletedAt(v *time.Time) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrgSubscriptionUpdate) ClearDeletedAt() *OrgSubscriptionUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrgSubscriptionUpdate) SetDeletedBy(v string) *OrgSubscriptionUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableDeletedBy(v *string) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrgSubscriptionUpdate) ClearDeletedBy() *OrgSubscriptionUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrgSubscriptionUpdate) SetTags(v []string) *OrgSubscriptionUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrgSubscriptionUpdate) AppendTags(v []string) *OrgSubscriptionUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrgSubscriptionUpdate) ClearTags() *OrgSubscriptionUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *OrgSubscriptionUpdate) SetOwnerID(v string) *OrgSubscriptionUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableOwnerID(v *string) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *OrgSubscriptionUpdate) ClearOwnerID() *OrgSubscriptionUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (_u *OrgSubscriptionUpdate) SetStripeSubscriptionID(v string) *OrgSubscriptionUpdate {
	_u.mutation.SetStripeSubscriptionID(v)
	return _u
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableStripeSubscriptionID(v *string) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetStripeSubscriptionID(*v)
	}
	return _u
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (_u *OrgSubscriptionUpdate) ClearStripeSubscriptionID() *OrgSubscriptionUpdate {
	_u.mutation.ClearStripeSubscriptionID()
	return _u
}

// SetProductPrice sets the "product_price" field.
func (_u *OrgSubscriptionUpdate) SetProductPrice(v models.Price) *OrgSubscriptionUpdate {
	_u.mutation.SetProductPrice(v)
	return _u
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableProductPrice(v *models.Price) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetProductPrice(*v)
	}
	return _u
}

// ClearProductPrice clears the value of the "product_price" field.
func (_u *OrgSubscriptionUpdate) ClearProductPrice() *OrgSubscriptionUpdate {
	_u.mutation.ClearProductPrice()
	return _u
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (_u *OrgSubscriptionUpdate) SetStripeSubscriptionStatus(v string) *OrgSubscriptionUpdate {
	_u.mutation.SetStripeSubscriptionStatus(v)
	return _u
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableStripeSubscriptionStatus(v *string) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetStripeSubscriptionStatus(*v)
	}
	return _u
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (_u *OrgSubscriptionUpdate) ClearStripeSubscriptionStatus() *OrgSubscriptionUpdate {
	_u.mutation.ClearStripeSubscriptionStatus()
	return _u
}

// SetActive sets the "active" field.
func (_u *OrgSubscriptionUpdate) SetActive(v bool) *OrgSubscriptionUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableActive(v *bool) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OrgSubscriptionUpdate) SetExpiresAt(v time.Time) *OrgSubscriptionUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableExpiresAt(v *time.Time) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *OrgSubscriptionUpdate) ClearExpiresAt() *OrgSubscriptionUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (_u *OrgSubscriptionUpdate) SetTrialExpiresAt(v time.Time) *OrgSubscriptionUpdate {
	_u.mutation.SetTrialExpiresAt(v)
	return _u
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableTrialExpiresAt(v *time.Time) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetTrialExpiresAt(*v)
	}
	return _u
}

// ClearTrialExpiresAt clears the value of the "trial_expires_at" field.
func (_u *OrgSubscriptionUpdate) ClearTrialExpiresAt() *OrgSubscriptionUpdate {
	_u.mutation.ClearTrialExpiresAt()
	return _u
}

// SetDaysUntilDue sets the "days_until_due" field.
func (_u *OrgSubscriptionUpdate) SetDaysUntilDue(v string) *OrgSubscriptionUpdate {
	_u.mutation.SetDaysUntilDue(v)
	return _u
}

// SetNillableDaysUntilDue sets the "days_until_due" field if the given value is not nil.
func (_u *OrgSubscriptionUpdate) SetNillableDaysUntilDue(v *string) *OrgSubscriptionUpdate {
	if v != nil {
		_u.SetDaysUntilDue(*v)
	}
	return _u
}

// ClearDaysUntilDue clears the value of the "days_until_due" field.
func (_u *OrgSubscriptionUpdate) ClearDaysUntilDue() *OrgSubscriptionUpdate {
	_u.mutation.ClearDaysUntilDue()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *OrgSubscriptionUpdate) SetFeatures(v []string) *OrgSubscriptionUpdate {
	_u.mutation.SetFeatures(v)
	return _u
}

// AppendFeatures appends value to the "features" field.
func (_u *OrgSubscriptionUpdate) AppendFeatures(v []string) *OrgSubscriptionUpdate {
	_u.mutation.AppendFeatures(v)
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *OrgSubscriptionUpdate) ClearFeatures() *OrgSubscriptionUpdate {
	_u.mutation.ClearFeatures()
	return _u
}

// SetFeatureLookupKeys sets the "feature_lookup_keys" field.
func (_u *OrgSubscriptionUpdate) SetFeatureLookupKeys(v []string) *OrgSubscriptionUpdate {
	_u.mutation.SetFeatureLookupKeys(v)
	return _u
}

// AppendFeatureLookupKeys appends value to the "feature_lookup_keys" field.
func (_u *OrgSubscriptionUpdate) AppendFeatureLookupKeys(v []string) *OrgSubscriptionUpdate {
	_u.mutation.AppendFeatureLookupKeys(v)
	return _u
}

// ClearFeatureLookupKeys clears the value of the "feature_lookup_keys" field.
func (_u *OrgSubscriptionUpdate) ClearFeatureLookupKeys() *OrgSubscriptionUpdate {
	_u.mutation.ClearFeatureLookupKeys()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *OrgSubscriptionUpdate) SetOwner(v *Organization) *OrgSubscriptionUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *OrgSubscriptionUpdate) AddEventIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *OrgSubscriptionUpdate) AddEvents(v ...*Event) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddModuleIDs adds the "modules" edge to the OrgModule entity by IDs.
func (_u *OrgSubscriptionUpdate) AddModuleIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.AddModuleIDs(ids...)
	return _u
}

// AddModules adds the "modules" edges to the OrgModule entity.
func (_u *OrgSubscriptionUpdate) AddModules(v ...*OrgModule) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddModuleIDs(ids...)
}

// AddProductIDs adds the "products" edge to the OrgProduct entity by IDs.
func (_u *OrgSubscriptionUpdate) AddProductIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.AddProductIDs(ids...)
	return _u
}

// AddProducts adds the "products" edges to the OrgProduct entity.
func (_u *OrgSubscriptionUpdate) AddProducts(v ...*OrgProduct) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProductIDs(ids...)
}

// AddPriceIDs adds the "prices" edge to the OrgPrice entity by IDs.
func (_u *OrgSubscriptionUpdate) AddPriceIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.AddPriceIDs(ids...)
	return _u
}

// AddPrices adds the "prices" edges to the OrgPrice entity.
func (_u *OrgSubscriptionUpdate) AddPrices(v ...*OrgPrice) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPriceIDs(ids...)
}

// Mutation returns the OrgSubscriptionMutation object of the builder.
func (_u *OrgSubscriptionUpdate) Mutation() *OrgSubscriptionMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *OrgSubscriptionUpdate) ClearOwner() *OrgSubscriptionUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *OrgSubscriptionUpdate) ClearEvents() *OrgSubscriptionUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *OrgSubscriptionUpdate) RemoveEventIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *OrgSubscriptionUpdate) RemoveEvents(v ...*Event) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearModules clears all "modules" edges to the OrgModule entity.
func (_u *OrgSubscriptionUpdate) ClearModules() *OrgSubscriptionUpdate {
	_u.mutation.ClearModules()
	return _u
}

// RemoveModuleIDs removes the "modules" edge to OrgModule entities by IDs.
func (_u *OrgSubscriptionUpdate) RemoveModuleIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.RemoveModuleIDs(ids...)
	return _u
}

// RemoveModules removes "modules" edges to OrgModule entities.
func (_u *OrgSubscriptionUpdate) RemoveModules(v ...*OrgModule) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveModuleIDs(ids...)
}

// ClearProducts clears all "products" edges to the OrgProduct entity.
func (_u *OrgSubscriptionUpdate) ClearProducts() *OrgSubscriptionUpdate {
	_u.mutation.ClearProducts()
	return _u
}

// RemoveProductIDs removes the "products" edge to OrgProduct entities by IDs.
func (_u *OrgSubscriptionUpdate) RemoveProductIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.RemoveProductIDs(ids...)
	return _u
}

// RemoveProducts removes "products" edges to OrgProduct entities.
func (_u *OrgSubscriptionUpdate) RemoveProducts(v ...*OrgProduct) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProductIDs(ids...)
}

// ClearPrices clears all "prices" edges to the OrgPrice entity.
func (_u *OrgSubscriptionUpdate) ClearPrices() *OrgSubscriptionUpdate {
	_u.mutation.ClearPrices()
	return _u
}

// RemovePriceIDs removes the "prices" edge to OrgPrice entities by IDs.
func (_u *OrgSubscriptionUpdate) RemovePriceIDs(ids ...string) *OrgSubscriptionUpdate {
	_u.mutation.RemovePriceIDs(ids...)
	return _u
}

// RemovePrices removes "prices" edges to OrgPrice entities.
func (_u *OrgSubscriptionUpdate) RemovePrices(v ...*OrgPrice) *OrgSubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrgSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrgSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrgSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrgSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrgSubscriptionUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if orgsubscription.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgsubscription.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrgSubscriptionUpdate) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := orgsubscription.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgSubscription.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrgSubscriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrgSubscriptionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgsubscription.Table, orgsubscription.Columns, sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscription.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscription.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(orgsubscription.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(orgsubscription.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := _u.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscription.FieldProductPrice, field.TypeJSON, value)
	}
	if _u.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscription.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := _u.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(orgsubscription.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscription.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscription.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgsubscription.FieldTrialExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TrialExpiresAtCleared() {
		_spec.ClearField(orgsubscription.FieldTrialExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DaysUntilDue(); ok {
		_spec.SetField(orgsubscription.FieldDaysUntilDue, field.TypeString, value)
	}
	if _u.mutation.DaysUntilDueCleared() {
		_spec.ClearField(orgsubscription.FieldDaysUntilDue, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(orgsubscription.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldFeatures, value)
		})
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscription.FieldFeatures, field.TypeJSON)
	}
	if value, ok := _u.mutation.FeatureLookupKeys(); ok {
		_spec.SetField(orgsubscription.FieldFeatureLookupKeys, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatureLookupKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldFeatureLookupKeys, value)
		})
	}
	if _u.mutation.FeatureLookupKeysCleared() {
		_spec.ClearField(orgsubscription.FieldFeatureLookupKeys, field.TypeJSON)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgsubscription.EventsTable,
			Columns: orgsubscription.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgsubscription.EventsTable,
			Columns: orgsubscription.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgsubscription.EventsTable,
			Columns: orgsubscription.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ModulesTable,
			Columns: []string{orgsubscription.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedModulesIDs(); len(nodes) > 0 && !_u.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ModulesTable,
			Columns: []string{orgsubscription.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ModulesTable,
			Columns: []string{orgsubscription.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ProductsTable,
			Columns: []string{orgsubscription.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProductsIDs(); len(nodes) > 0 && !_u.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ProductsTable,
			Columns: []string{orgsubscription.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ProductsTable,
			Columns: []string{orgsubscription.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.PricesTable,
			Columns: []string{orgsubscription.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPricesIDs(); len(nodes) > 0 && !_u.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.PricesTable,
			Columns: []string{orgsubscription.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.PricesTable,
			Columns: []string{orgsubscription.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.OrgSubscription
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrgSubscriptionUpdateOne is the builder for updating a single OrgSubscription entity.
type OrgSubscriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgSubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrgSubscriptionUpdateOne) SetUpdatedAt(v time.Time) *OrgSubscriptionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrgSubscriptionUpdateOne) ClearUpdatedAt() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrgSubscriptionUpdateOne) SetUpdatedBy(v string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableUpdatedBy(v *string) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrgSubscriptionUpdateOne) ClearUpdatedBy() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrgSubscriptionUpdateOne) SetDeletedAt(v time.Time) *OrgSubscriptionUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableDeletedAt(v *time.Time) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrgSubscriptionUpdateOne) ClearDeletedAt() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrgSubscriptionUpdateOne) SetDeletedBy(v string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableDeletedBy(v *string) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrgSubscriptionUpdateOne) ClearDeletedBy() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrgSubscriptionUpdateOne) SetTags(v []string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrgSubscriptionUpdateOne) AppendTags(v []string) *OrgSubscriptionUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrgSubscriptionUpdateOne) ClearTags() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *OrgSubscriptionUpdateOne) SetOwnerID(v string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableOwnerID(v *string) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *OrgSubscriptionUpdateOne) ClearOwnerID() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (_u *OrgSubscriptionUpdateOne) SetStripeSubscriptionID(v string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetStripeSubscriptionID(v)
	return _u
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableStripeSubscriptionID(v *string) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetStripeSubscriptionID(*v)
	}
	return _u
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (_u *OrgSubscriptionUpdateOne) ClearStripeSubscriptionID() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearStripeSubscriptionID()
	return _u
}

// SetProductPrice sets the "product_price" field.
func (_u *OrgSubscriptionUpdateOne) SetProductPrice(v models.Price) *OrgSubscriptionUpdateOne {
	_u.mutation.SetProductPrice(v)
	return _u
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableProductPrice(v *models.Price) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetProductPrice(*v)
	}
	return _u
}

// ClearProductPrice clears the value of the "product_price" field.
func (_u *OrgSubscriptionUpdateOne) ClearProductPrice() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearProductPrice()
	return _u
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (_u *OrgSubscriptionUpdateOne) SetStripeSubscriptionStatus(v string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetStripeSubscriptionStatus(v)
	return _u
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableStripeSubscriptionStatus(v *string) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetStripeSubscriptionStatus(*v)
	}
	return _u
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (_u *OrgSubscriptionUpdateOne) ClearStripeSubscriptionStatus() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearStripeSubscriptionStatus()
	return _u
}

// SetActive sets the "active" field.
func (_u *OrgSubscriptionUpdateOne) SetActive(v bool) *OrgSubscriptionUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableActive(v *bool) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OrgSubscriptionUpdateOne) SetExpiresAt(v time.Time) *OrgSubscriptionUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableExpiresAt(v *time.Time) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *OrgSubscriptionUpdateOne) ClearExpiresAt() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (_u *OrgSubscriptionUpdateOne) SetTrialExpiresAt(v time.Time) *OrgSubscriptionUpdateOne {
	_u.mutation.SetTrialExpiresAt(v)
	return _u
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableTrialExpiresAt(v *time.Time) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetTrialExpiresAt(*v)
	}
	return _u
}

// ClearTrialExpiresAt clears the value of the "trial_expires_at" field.
func (_u *OrgSubscriptionUpdateOne) ClearTrialExpiresAt() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearTrialExpiresAt()
	return _u
}

// SetDaysUntilDue sets the "days_until_due" field.
func (_u *OrgSubscriptionUpdateOne) SetDaysUntilDue(v string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetDaysUntilDue(v)
	return _u
}

// SetNillableDaysUntilDue sets the "days_until_due" field if the given value is not nil.
func (_u *OrgSubscriptionUpdateOne) SetNillableDaysUntilDue(v *string) *OrgSubscriptionUpdateOne {
	if v != nil {
		_u.SetDaysUntilDue(*v)
	}
	return _u
}

// ClearDaysUntilDue clears the value of the "days_until_due" field.
func (_u *OrgSubscriptionUpdateOne) ClearDaysUntilDue() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearDaysUntilDue()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *OrgSubscriptionUpdateOne) SetFeatures(v []string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetFeatures(v)
	return _u
}

// AppendFeatures appends value to the "features" field.
func (_u *OrgSubscriptionUpdateOne) AppendFeatures(v []string) *OrgSubscriptionUpdateOne {
	_u.mutation.AppendFeatures(v)
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *OrgSubscriptionUpdateOne) ClearFeatures() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearFeatures()
	return _u
}

// SetFeatureLookupKeys sets the "feature_lookup_keys" field.
func (_u *OrgSubscriptionUpdateOne) SetFeatureLookupKeys(v []string) *OrgSubscriptionUpdateOne {
	_u.mutation.SetFeatureLookupKeys(v)
	return _u
}

// AppendFeatureLookupKeys appends value to the "feature_lookup_keys" field.
func (_u *OrgSubscriptionUpdateOne) AppendFeatureLookupKeys(v []string) *OrgSubscriptionUpdateOne {
	_u.mutation.AppendFeatureLookupKeys(v)
	return _u
}

// ClearFeatureLookupKeys clears the value of the "feature_lookup_keys" field.
func (_u *OrgSubscriptionUpdateOne) ClearFeatureLookupKeys() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearFeatureLookupKeys()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *OrgSubscriptionUpdateOne) SetOwner(v *Organization) *OrgSubscriptionUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *OrgSubscriptionUpdateOne) AddEventIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *OrgSubscriptionUpdateOne) AddEvents(v ...*Event) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddModuleIDs adds the "modules" edge to the OrgModule entity by IDs.
func (_u *OrgSubscriptionUpdateOne) AddModuleIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.AddModuleIDs(ids...)
	return _u
}

// AddModules adds the "modules" edges to the OrgModule entity.
func (_u *OrgSubscriptionUpdateOne) AddModules(v ...*OrgModule) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddModuleIDs(ids...)
}

// AddProductIDs adds the "products" edge to the OrgProduct entity by IDs.
func (_u *OrgSubscriptionUpdateOne) AddProductIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.AddProductIDs(ids...)
	return _u
}

// AddProducts adds the "products" edges to the OrgProduct entity.
func (_u *OrgSubscriptionUpdateOne) AddProducts(v ...*OrgProduct) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProductIDs(ids...)
}

// AddPriceIDs adds the "prices" edge to the OrgPrice entity by IDs.
func (_u *OrgSubscriptionUpdateOne) AddPriceIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.AddPriceIDs(ids...)
	return _u
}

// AddPrices adds the "prices" edges to the OrgPrice entity.
func (_u *OrgSubscriptionUpdateOne) AddPrices(v ...*OrgPrice) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPriceIDs(ids...)
}

// Mutation returns the OrgSubscriptionMutation object of the builder.
func (_u *OrgSubscriptionUpdateOne) Mutation() *OrgSubscriptionMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *OrgSubscriptionUpdateOne) ClearOwner() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *OrgSubscriptionUpdateOne) ClearEvents() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *OrgSubscriptionUpdateOne) RemoveEventIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *OrgSubscriptionUpdateOne) RemoveEvents(v ...*Event) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearModules clears all "modules" edges to the OrgModule entity.
func (_u *OrgSubscriptionUpdateOne) ClearModules() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearModules()
	return _u
}

// RemoveModuleIDs removes the "modules" edge to OrgModule entities by IDs.
func (_u *OrgSubscriptionUpdateOne) RemoveModuleIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.RemoveModuleIDs(ids...)
	return _u
}

// RemoveModules removes "modules" edges to OrgModule entities.
func (_u *OrgSubscriptionUpdateOne) RemoveModules(v ...*OrgModule) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveModuleIDs(ids...)
}

// ClearProducts clears all "products" edges to the OrgProduct entity.
func (_u *OrgSubscriptionUpdateOne) ClearProducts() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearProducts()
	return _u
}

// RemoveProductIDs removes the "products" edge to OrgProduct entities by IDs.
func (_u *OrgSubscriptionUpdateOne) RemoveProductIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.RemoveProductIDs(ids...)
	return _u
}

// RemoveProducts removes "products" edges to OrgProduct entities.
func (_u *OrgSubscriptionUpdateOne) RemoveProducts(v ...*OrgProduct) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProductIDs(ids...)
}

// ClearPrices clears all "prices" edges to the OrgPrice entity.
func (_u *OrgSubscriptionUpdateOne) ClearPrices() *OrgSubscriptionUpdateOne {
	_u.mutation.ClearPrices()
	return _u
}

// RemovePriceIDs removes the "prices" edge to OrgPrice entities by IDs.
func (_u *OrgSubscriptionUpdateOne) RemovePriceIDs(ids ...string) *OrgSubscriptionUpdateOne {
	_u.mutation.RemovePriceIDs(ids...)
	return _u
}

// RemovePrices removes "prices" edges to OrgPrice entities.
func (_u *OrgSubscriptionUpdateOne) RemovePrices(v ...*OrgPrice) *OrgSubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePriceIDs(ids...)
}

// Where appends a list predicates to the OrgSubscriptionUpdate builder.
func (_u *OrgSubscriptionUpdateOne) Where(ps ...predicate.OrgSubscription) *OrgSubscriptionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrgSubscriptionUpdateOne) Select(field string, fields ...string) *OrgSubscriptionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrgSubscription entity.
func (_u *OrgSubscriptionUpdateOne) Save(ctx context.Context) (*OrgSubscription, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrgSubscriptionUpdateOne) SaveX(ctx context.Context) *OrgSubscription {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrgSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrgSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrgSubscriptionUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if orgsubscription.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgsubscription.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrgSubscriptionUpdateOne) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := orgsubscription.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgSubscription.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrgSubscriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrgSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *OrgSubscription, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgsubscription.Table, orgsubscription.Columns, sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrgSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgsubscription.FieldID)
		for _, f := range fields {
			if !orgsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orgsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscription.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscription.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscription.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscription.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(orgsubscription.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(orgsubscription.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := _u.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscription.FieldProductPrice, field.TypeJSON, value)
	}
	if _u.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscription.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := _u.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(orgsubscription.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscription.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscription.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgsubscription.FieldTrialExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TrialExpiresAtCleared() {
		_spec.ClearField(orgsubscription.FieldTrialExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DaysUntilDue(); ok {
		_spec.SetField(orgsubscription.FieldDaysUntilDue, field.TypeString, value)
	}
	if _u.mutation.DaysUntilDueCleared() {
		_spec.ClearField(orgsubscription.FieldDaysUntilDue, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(orgsubscription.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldFeatures, value)
		})
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscription.FieldFeatures, field.TypeJSON)
	}
	if value, ok := _u.mutation.FeatureLookupKeys(); ok {
		_spec.SetField(orgsubscription.FieldFeatureLookupKeys, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatureLookupKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscription.FieldFeatureLookupKeys, value)
		})
	}
	if _u.mutation.FeatureLookupKeysCleared() {
		_spec.ClearField(orgsubscription.FieldFeatureLookupKeys, field.TypeJSON)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgsubscription.EventsTable,
			Columns: orgsubscription.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgsubscription.EventsTable,
			Columns: orgsubscription.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgsubscription.EventsTable,
			Columns: orgsubscription.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ModulesTable,
			Columns: []string{orgsubscription.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedModulesIDs(); len(nodes) > 0 && !_u.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ModulesTable,
			Columns: []string{orgsubscription.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ModulesTable,
			Columns: []string{orgsubscription.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ProductsTable,
			Columns: []string{orgsubscription.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProductsIDs(); len(nodes) > 0 && !_u.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ProductsTable,
			Columns: []string{orgsubscription.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.ProductsTable,
			Columns: []string{orgsubscription.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.PricesTable,
			Columns: []string{orgsubscription.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPricesIDs(); len(nodes) > 0 && !_u.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.PricesTable,
			Columns: []string{orgsubscription.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgsubscription.PricesTable,
			Columns: []string{orgsubscription.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.OrgSubscription
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &OrgSubscription{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
